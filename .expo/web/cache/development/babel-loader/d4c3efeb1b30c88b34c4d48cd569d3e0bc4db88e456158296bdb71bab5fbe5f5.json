{"ast":null,"code":"import { BasePackageManager } from \"./BasePackageManager\";","map":{"version":3,"names":["BasePackageManager"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/package-manager/build/node/NpmPackageManager.d.ts"],"sourcesContent":["import { BasePackageManager } from './BasePackageManager';\nexport declare class NpmPackageManager extends BasePackageManager {\n    readonly name = \"npm\";\n    readonly bin = \"npm\";\n    readonly lockFile = \"package-lock.json\";\n    workspaceRoot(): NpmPackageManager | null;\n    addAsync(namesOrFlags?: string[]): import(\"@expo/spawn-async\").SpawnPromise<import(\"@expo/spawn-async\").SpawnResult> | import(\"../utils/spawn\").PendingSpawnPromise<import(\"@expo/spawn-async\").SpawnResult>;\n    addDevAsync(namesOrFlags?: string[]): import(\"@expo/spawn-async\").SpawnPromise<import(\"@expo/spawn-async\").SpawnResult> | import(\"../utils/spawn\").PendingSpawnPromise<import(\"@expo/spawn-async\").SpawnResult>;\n    addGlobalAsync(namesOrFlags?: string[]): import(\"@expo/spawn-async\").SpawnPromise<import(\"@expo/spawn-async\").SpawnResult> | import(\"../utils/spawn\").PendingSpawnPromise<import(\"@expo/spawn-async\").SpawnResult>;\n    removeAsync(namesOrFlags: string[]): import(\"@expo/spawn-async\").SpawnPromise<import(\"@expo/spawn-async\").SpawnResult>;\n    removeDevAsync(namesOrFlags: string[]): import(\"@expo/spawn-async\").SpawnPromise<import(\"@expo/spawn-async\").SpawnResult>;\n    removeGlobalAsync(namesOrFlags: string[]): import(\"@expo/spawn-async\").SpawnPromise<import(\"@expo/spawn-async\").SpawnResult>;\n    /**\n     * Parse all package specifications from the names or flag list.\n     * The result from this method can be used for `.updatePackageFileAsync`.\n     */\n    private parsePackageSpecs;\n    /**\n     * Older npm versions have issues with mismatched nested dependencies when adding exact versions.\n     * This propagates as issues like mismatched `@expo/config-pugins` versions.\n     * As a workaround, we update the `package.json` directly and run `npm install`.\n     */\n    private updatePackageFileAsync;\n}\n"],"mappings":"AAAA,SAASA,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}