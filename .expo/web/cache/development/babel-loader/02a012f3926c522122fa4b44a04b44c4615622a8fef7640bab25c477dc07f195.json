{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.appendScheme = appendScheme;\nexports.ensureManifestHasValidIntentFilter = ensureManifestHasValidIntentFilter;\nexports.getScheme = getScheme;\nexports.getSchemesFromManifest = getSchemesFromManifest;\nexports.hasScheme = hasScheme;\nexports.removeScheme = removeScheme;\nexports.setScheme = setScheme;\nexports.withScheme = void 0;\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n  _warnings = function _warnings() {\n    return data;\n  };\n  return data;\n}\nvar withScheme = (0, _androidPlugins().createAndroidManifestPlugin)(setScheme, 'withScheme');\nexports.withScheme = withScheme;\nfunction getScheme(config) {\n  if (Array.isArray(config.scheme)) {\n    var validate = function validate(value) {\n      return typeof value === 'string';\n    };\n    return config.scheme.filter(validate);\n  } else if (typeof config.scheme === 'string') {\n    return [config.scheme];\n  }\n  return [];\n}\nfunction setScheme(config, androidManifest) {\n  var _config$android, _config$android2;\n  var schemes = [].concat(_toConsumableArray(getScheme(config)), _toConsumableArray(getScheme((_config$android = config.android) !== null && _config$android !== void 0 ? _config$android : {})));\n  if ((_config$android2 = config.android) !== null && _config$android2 !== void 0 && _config$android2.package) {\n    schemes.push(config.android.package);\n  }\n  if (schemes.length === 0) {\n    return androidManifest;\n  }\n  if (!ensureManifestHasValidIntentFilter(androidManifest)) {\n    (0, _warnings().addWarningAndroid)('scheme', `Cannot add schemes because the provided manifest does not have a valid Activity with \\`android:launchMode=\"singleTask\"\\``, 'https://expo.fyi/setup-android-uri-scheme');\n    return androidManifest;\n  }\n  var currentSchemes = getSchemesFromManifest(androidManifest);\n  for (var uri of currentSchemes) {\n    var index = schemes.indexOf(uri);\n    if (index > -1) schemes.splice(index, 1);\n  }\n  for (var _uri of schemes) {\n    androidManifest = appendScheme(_uri, androidManifest);\n  }\n  return androidManifest;\n}\nfunction isValidRedirectIntentFilter(_ref) {\n  var actions = _ref.actions,\n    categories = _ref.categories;\n  return actions.includes('android.intent.action.VIEW') && !categories.includes('android.intent.category.LAUNCHER');\n}\nfunction propertiesFromIntentFilter(intentFilter) {\n  var _intentFilter$action$, _intentFilter$action, _intentFilter$categor, _intentFilter$categor2, _intentFilter$data$fi, _intentFilter$data, _intentFilter$data$fi2;\n  var actions = (_intentFilter$action$ = intentFilter === null || intentFilter === void 0 ? void 0 : (_intentFilter$action = intentFilter.action) === null || _intentFilter$action === void 0 ? void 0 : _intentFilter$action.map(function (data) {\n    var _data$$;\n    return data === null || data === void 0 ? void 0 : (_data$$ = data.$) === null || _data$$ === void 0 ? void 0 : _data$$['android:name'];\n  })) !== null && _intentFilter$action$ !== void 0 ? _intentFilter$action$ : [];\n  var categories = (_intentFilter$categor = intentFilter === null || intentFilter === void 0 ? void 0 : (_intentFilter$categor2 = intentFilter.category) === null || _intentFilter$categor2 === void 0 ? void 0 : _intentFilter$categor2.map(function (data) {\n    var _data$$2;\n    return data === null || data === void 0 ? void 0 : (_data$$2 = data.$) === null || _data$$2 === void 0 ? void 0 : _data$$2['android:name'];\n  })) !== null && _intentFilter$categor !== void 0 ? _intentFilter$categor : [];\n  var data = (_intentFilter$data$fi = intentFilter === null || intentFilter === void 0 ? void 0 : (_intentFilter$data = intentFilter.data) === null || _intentFilter$data === void 0 ? void 0 : (_intentFilter$data$fi2 = _intentFilter$data.filter(function (data) {\n    var _data$$3;\n    return data === null || data === void 0 ? void 0 : (_data$$3 = data.$) === null || _data$$3 === void 0 ? void 0 : _data$$3['android:scheme'];\n  })) === null || _intentFilter$data$fi2 === void 0 ? void 0 : _intentFilter$data$fi2.map(function (data) {\n    var _data$$4, _data$$5;\n    return {\n      scheme: data === null || data === void 0 ? void 0 : (_data$$4 = data.$) === null || _data$$4 === void 0 ? void 0 : _data$$4['android:scheme'],\n      host: data === null || data === void 0 ? void 0 : (_data$$5 = data.$) === null || _data$$5 === void 0 ? void 0 : _data$$5['android:host']\n    };\n  })) !== null && _intentFilter$data$fi !== void 0 ? _intentFilter$data$fi : [];\n  return {\n    actions: actions,\n    categories: categories,\n    data: data\n  };\n}\nfunction getSingleTaskIntentFilters(androidManifest) {\n  if (!Array.isArray(androidManifest.manifest.application)) return [];\n  var outputSchemes = [];\n  for (var application of androidManifest.manifest.application) {\n    var activity = application.activity;\n    var activities = Array.isArray(activity) ? activity : [activity];\n    var singleTaskActivities = activities.filter(function (activity) {\n      var _activity$$;\n      return (activity === null || activity === void 0 ? void 0 : (_activity$$ = activity.$) === null || _activity$$ === void 0 ? void 0 : _activity$$['android:launchMode']) === 'singleTask';\n    });\n    for (var _activity of singleTaskActivities) {\n      var intentFilters = _activity['intent-filter'];\n      outputSchemes = outputSchemes.concat(intentFilters);\n    }\n  }\n  return outputSchemes;\n}\nfunction getSchemesFromManifest(androidManifest) {\n  var requestedHost = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var outputSchemes = [];\n  var singleTaskIntentFilters = getSingleTaskIntentFilters(androidManifest);\n  for (var intentFilter of singleTaskIntentFilters) {\n    var properties = propertiesFromIntentFilter(intentFilter);\n    if (isValidRedirectIntentFilter(properties) && properties.data) {\n      for (var _ref2 of properties.data) {\n        var scheme = _ref2.scheme;\n        var host = _ref2.host;\n        if (requestedHost === null || !host || host === requestedHost) {\n          outputSchemes.push(scheme);\n        }\n      }\n    }\n  }\n  return outputSchemes;\n}\nfunction ensureManifestHasValidIntentFilter(androidManifest) {\n  if (!Array.isArray(androidManifest.manifest.application)) {\n    return false;\n  }\n  for (var application of androidManifest.manifest.application) {\n    for (var activity of application.activity || []) {\n      var _activity$$2;\n      if ((activity === null || activity === void 0 ? void 0 : (_activity$$2 = activity.$) === null || _activity$$2 === void 0 ? void 0 : _activity$$2['android:launchMode']) === 'singleTask') {\n        for (var intentFilter of activity['intent-filter'] || []) {\n          var properties = propertiesFromIntentFilter(intentFilter);\n          if (isValidRedirectIntentFilter(properties)) {\n            return true;\n          }\n        }\n        if (!activity['intent-filter']) {\n          activity['intent-filter'] = [];\n        }\n        activity['intent-filter'].push({\n          action: [{\n            $: {\n              'android:name': 'android.intent.action.VIEW'\n            }\n          }],\n          category: [{\n            $: {\n              'android:name': 'android.intent.category.DEFAULT'\n            }\n          }, {\n            $: {\n              'android:name': 'android.intent.category.BROWSABLE'\n            }\n          }]\n        });\n        return true;\n      }\n    }\n  }\n  return false;\n}\nfunction hasScheme(scheme, androidManifest) {\n  var schemes = getSchemesFromManifest(androidManifest);\n  return schemes.includes(scheme);\n}\nfunction appendScheme(scheme, androidManifest) {\n  if (!Array.isArray(androidManifest.manifest.application)) {\n    return androidManifest;\n  }\n  for (var application of androidManifest.manifest.application) {\n    for (var activity of application.activity || []) {\n      var _activity$$3;\n      if ((activity === null || activity === void 0 ? void 0 : (_activity$$3 = activity.$) === null || _activity$$3 === void 0 ? void 0 : _activity$$3['android:launchMode']) === 'singleTask') {\n        for (var intentFilter of activity['intent-filter'] || []) {\n          var properties = propertiesFromIntentFilter(intentFilter);\n          if (isValidRedirectIntentFilter(properties)) {\n            if (!intentFilter.data) intentFilter.data = [];\n            intentFilter.data.push({\n              $: {\n                'android:scheme': scheme\n              }\n            });\n          }\n        }\n        break;\n      }\n    }\n  }\n  return androidManifest;\n}\nfunction removeScheme(scheme, androidManifest) {\n  if (!Array.isArray(androidManifest.manifest.application)) {\n    return androidManifest;\n  }\n  for (var application of androidManifest.manifest.application) {\n    for (var activity of application.activity || []) {\n      var _activity$$4;\n      if ((activity === null || activity === void 0 ? void 0 : (_activity$$4 = activity.$) === null || _activity$$4 === void 0 ? void 0 : _activity$$4['android:launchMode']) === 'singleTask') {\n        for (var intentFilter of activity['intent-filter'] || []) {\n          var properties = propertiesFromIntentFilter(intentFilter);\n          if (isValidRedirectIntentFilter(properties)) {\n            for (var dataKey in (intentFilter === null || intentFilter === void 0 ? void 0 : intentFilter.data) || []) {\n              var _intentFilter$data2, _data$$6;\n              var data = (_intentFilter$data2 = intentFilter.data) === null || _intentFilter$data2 === void 0 ? void 0 : _intentFilter$data2[dataKey];\n              if ((data === null || data === void 0 ? void 0 : (_data$$6 = data.$) === null || _data$$6 === void 0 ? void 0 : _data$$6['android:scheme']) === scheme) {\n                var _intentFilter$data3;\n                (_intentFilter$data3 = intentFilter.data) === null || _intentFilter$data3 === void 0 ? true : delete _intentFilter$data3[dataKey];\n              }\n            }\n          }\n        }\n        break;\n      }\n    }\n  }\n  return androidManifest;\n}","map":{"version":3,"names":["_androidPlugins","data","require","_warnings","withScheme","createAndroidManifestPlugin","setScheme","exports","getScheme","config","Array","isArray","scheme","validate","value","filter","androidManifest","_config$android","_config$android2","schemes","concat","_toConsumableArray","android","package","push","length","ensureManifestHasValidIntentFilter","addWarningAndroid","currentSchemes","getSchemesFromManifest","uri","index","indexOf","splice","appendScheme","isValidRedirectIntentFilter","_ref","actions","categories","includes","propertiesFromIntentFilter","intentFilter","_intentFilter$action$","_intentFilter$action","_intentFilter$categor","_intentFilter$categor2","_intentFilter$data$fi","_intentFilter$data","_intentFilter$data$fi2","action","map","_data$$","$","category","_data$$2","_data$$3","_data$$4","_data$$5","host","getSingleTaskIntentFilters","manifest","application","outputSchemes","activity","activities","singleTaskActivities","_activity$$","intentFilters","requestedHost","arguments","undefined","singleTaskIntentFilters","properties","_ref2","_activity$$2","hasScheme","_activity$$3","removeScheme","_activity$$4","dataKey","_intentFilter$data2","_data$$6","_intentFilter$data3"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\android\\Scheme.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createAndroidManifestPlugin } from '../plugins/android-plugins';\nimport { addWarningAndroid } from '../utils/warnings';\nimport { AndroidManifest, ManifestActivity } from './Manifest';\n\nexport type IntentFilterProps = {\n  actions: string[];\n  categories: string[];\n  data: {\n    scheme: string;\n    host?: string;\n  }[];\n};\n\nexport const withScheme = createAndroidManifestPlugin(setScheme, 'withScheme');\n\nexport function getScheme(config: { scheme?: string | string[] }): string[] {\n  if (Array.isArray(config.scheme)) {\n    const validate = (value: any): value is string => typeof value === 'string';\n\n    return config.scheme.filter<string>(validate);\n  } else if (typeof config.scheme === 'string') {\n    return [config.scheme];\n  }\n  return [];\n}\n\n// This plugin used to remove the unused schemes but this is unpredictable because other plugins could add schemes.\n// The only way to reliably remove schemes from the project is to nuke the file and regenerate the code (`npx expo prebuild --clean`).\n// Regardless, having extra schemes isn't a fatal issue and therefore a tolerable compromise is to just add new schemes that aren't currently present.\nexport function setScheme(\n  config: Pick<ExpoConfig, 'scheme' | 'android'>,\n  androidManifest: AndroidManifest\n) {\n  const schemes = [\n    ...getScheme(config),\n    // @ts-ignore: TODO: android.scheme is an unreleased -- harder to add to turtle v1.\n    ...getScheme(config.android ?? {}),\n  ];\n  // Add the package name to the list of schemes for easier Google auth and parity with Turtle v1.\n  if (config.android?.package) {\n    schemes.push(config.android.package);\n  }\n  if (schemes.length === 0) {\n    return androidManifest;\n  }\n\n  if (!ensureManifestHasValidIntentFilter(androidManifest)) {\n    addWarningAndroid(\n      'scheme',\n      `Cannot add schemes because the provided manifest does not have a valid Activity with \\`android:launchMode=\"singleTask\"\\``,\n      'https://expo.fyi/setup-android-uri-scheme'\n    );\n    return androidManifest;\n  }\n\n  // Get the current schemes and remove them from the list of schemes to add.\n  const currentSchemes = getSchemesFromManifest(androidManifest);\n  for (const uri of currentSchemes) {\n    const index = schemes.indexOf(uri);\n    if (index > -1) schemes.splice(index, 1);\n  }\n\n  // Now add all of the remaining schemes.\n  for (const uri of schemes) {\n    androidManifest = appendScheme(uri, androidManifest);\n  }\n\n  return androidManifest;\n}\n\nfunction isValidRedirectIntentFilter({ actions, categories }: IntentFilterProps): boolean {\n  return (\n    actions.includes('android.intent.action.VIEW') &&\n    !categories.includes('android.intent.category.LAUNCHER')\n  );\n}\n\nfunction propertiesFromIntentFilter(intentFilter: any): IntentFilterProps {\n  const actions = intentFilter?.action?.map((data: any) => data?.$?.['android:name']) ?? [];\n  const categories = intentFilter?.category?.map((data: any) => data?.$?.['android:name']) ?? [];\n  const data =\n    intentFilter?.data\n      ?.filter((data: any) => data?.$?.['android:scheme'])\n      ?.map((data: any) => ({\n        scheme: data?.$?.['android:scheme'],\n        host: data?.$?.['android:host'],\n      })) ?? [];\n  return {\n    actions,\n    categories,\n    data,\n  };\n}\n\nfunction getSingleTaskIntentFilters(androidManifest: AndroidManifest): any[] {\n  if (!Array.isArray(androidManifest.manifest.application)) return [];\n\n  let outputSchemes: any[] = [];\n  for (const application of androidManifest.manifest.application) {\n    const { activity } = application;\n    // @ts-ignore\n    const activities = Array.isArray(activity) ? activity : [activity];\n    const singleTaskActivities = (activities as ManifestActivity[]).filter(\n      (activity) => activity?.$?.['android:launchMode'] === 'singleTask'\n    );\n    for (const activity of singleTaskActivities) {\n      const intentFilters = activity['intent-filter'];\n      outputSchemes = outputSchemes.concat(intentFilters);\n    }\n  }\n  return outputSchemes;\n}\n\nexport function getSchemesFromManifest(\n  androidManifest: AndroidManifest,\n  requestedHost: string | null = null\n): string[] {\n  const outputSchemes: string[] = [];\n\n  const singleTaskIntentFilters = getSingleTaskIntentFilters(androidManifest);\n  for (const intentFilter of singleTaskIntentFilters) {\n    const properties = propertiesFromIntentFilter(intentFilter);\n    if (isValidRedirectIntentFilter(properties) && properties.data) {\n      for (const { scheme, host } of properties.data) {\n        if (requestedHost === null || !host || host === requestedHost) {\n          outputSchemes.push(scheme);\n        }\n      }\n    }\n  }\n\n  return outputSchemes;\n}\n\nexport function ensureManifestHasValidIntentFilter(androidManifest: AndroidManifest): boolean {\n  if (!Array.isArray(androidManifest.manifest.application)) {\n    return false;\n  }\n\n  for (const application of androidManifest.manifest.application) {\n    for (const activity of application.activity || []) {\n      if (activity?.$?.['android:launchMode'] === 'singleTask') {\n        for (const intentFilter of activity['intent-filter'] || []) {\n          // Parse valid intent filters...\n          const properties = propertiesFromIntentFilter(intentFilter);\n          if (isValidRedirectIntentFilter(properties)) {\n            return true;\n          }\n        }\n        if (!activity['intent-filter']) {\n          activity['intent-filter'] = [];\n        }\n\n        activity['intent-filter'].push({\n          action: [{ $: { 'android:name': 'android.intent.action.VIEW' } }],\n          category: [\n            { $: { 'android:name': 'android.intent.category.DEFAULT' } },\n            { $: { 'android:name': 'android.intent.category.BROWSABLE' } },\n          ],\n        });\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nexport function hasScheme(scheme: string, androidManifest: AndroidManifest): boolean {\n  const schemes = getSchemesFromManifest(androidManifest);\n  return schemes.includes(scheme);\n}\n\nexport function appendScheme(scheme: string, androidManifest: AndroidManifest): AndroidManifest {\n  if (!Array.isArray(androidManifest.manifest.application)) {\n    return androidManifest;\n  }\n\n  for (const application of androidManifest.manifest.application) {\n    for (const activity of application.activity || []) {\n      if (activity?.$?.['android:launchMode'] === 'singleTask') {\n        for (const intentFilter of activity['intent-filter'] || []) {\n          const properties = propertiesFromIntentFilter(intentFilter);\n          if (isValidRedirectIntentFilter(properties)) {\n            if (!intentFilter.data) intentFilter.data = [];\n            intentFilter.data.push({\n              $: { 'android:scheme': scheme },\n            });\n          }\n        }\n        break;\n      }\n    }\n  }\n  return androidManifest;\n}\n\nexport function removeScheme(scheme: string, androidManifest: AndroidManifest): AndroidManifest {\n  if (!Array.isArray(androidManifest.manifest.application)) {\n    return androidManifest;\n  }\n\n  for (const application of androidManifest.manifest.application) {\n    for (const activity of application.activity || []) {\n      if (activity?.$?.['android:launchMode'] === 'singleTask') {\n        for (const intentFilter of activity['intent-filter'] || []) {\n          // Parse valid intent filters...\n          const properties = propertiesFromIntentFilter(intentFilter);\n          if (isValidRedirectIntentFilter(properties)) {\n            for (const dataKey in intentFilter?.data || []) {\n              const data = intentFilter.data?.[dataKey];\n              if (data?.$?.['android:scheme'] === scheme) {\n                delete intentFilter.data?.[dataKey];\n              }\n            }\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  return androidManifest;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}