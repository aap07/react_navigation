{"ast":null,"code":"import { uninstall } from \"./certificate-authority\";\nexport { uninstall };","map":{"version":3,"names":["uninstall"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/devcert/dist/index.d.ts"],"sourcesContent":["/// <reference types=\"node\" />\nimport { uninstall } from './certificate-authority';\nimport { UserInterface } from './user-interface';\nexport { uninstall };\nexport interface Options {\n    /** Return the CA certificate data? */\n    getCaBuffer?: boolean;\n    /** Return the path to the CA certificate? */\n    getCaPath?: boolean;\n    /** If `certutil` is not installed already (for updating nss databases; e.g. firefox), do not attempt to install it */\n    skipCertutilInstall?: boolean;\n    /** Do not update your systems host file with the domain name of the certificate */\n    skipHostsFile?: boolean;\n    /** User interface hooks */\n    ui?: UserInterface;\n}\ninterface ICaBuffer {\n    ca: Buffer;\n}\ninterface ICaPath {\n    caPath: string;\n}\ninterface IDomainData {\n    key: Buffer;\n    cert: Buffer;\n}\ndeclare type IReturnCa<O extends Options> = O['getCaBuffer'] extends true ? ICaBuffer : false;\ndeclare type IReturnCaPath<O extends Options> = O['getCaPath'] extends true ? ICaPath : false;\ndeclare type IReturnData<O extends Options = {}> = (IDomainData) & (IReturnCa<O>) & (IReturnCaPath<O>);\n/**\n * Request an SSL certificate for the given app name signed by the devcert root\n * certificate authority. If devcert has previously generated a certificate for\n * that app name on this machine, it will reuse that certificate.\n *\n * If this is the first time devcert is being run on this machine, it will\n * generate and attempt to install a root certificate authority.\n *\n * Returns a promise that resolves with { key, cert }, where `key` and `cert`\n * are Buffers with the contents of the certificate private key and certificate\n * file, respectively\n *\n * If `options.getCaBuffer` is true, return value will include the ca certificate data\n * as { ca: Buffer }\n *\n * If `options.getCaPath` is true, return value will include the ca certificate path\n * as { caPath: string }\n */\nexport declare function certificateFor<O extends Options>(domain: string, options?: O): Promise<IReturnData<O>>;\nexport declare function hasCertificateFor(domain: string): boolean;\nexport declare function configuredDomains(): string[];\nexport declare function removeDomain(domain: string): void;\n"],"mappings":"AACA,SAASA,SAAS;AAElB,SAASA,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}