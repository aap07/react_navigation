{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/package-manager/build/utils/nodeManagers.d.ts"],"sourcesContent":["import { PackageManagerOptions } from '../PackageManager';\nimport { BunPackageManager } from '../node/BunPackageManager';\nimport { NpmPackageManager } from '../node/NpmPackageManager';\nimport { PnpmPackageManager } from '../node/PnpmPackageManager';\nimport { YarnPackageManager } from '../node/YarnPackageManager';\nexport type NodePackageManager = NpmPackageManager | PnpmPackageManager | YarnPackageManager | BunPackageManager;\nexport type NodePackageManagerForProject = PackageManagerOptions & Partial<Record<NodePackageManager['name'], boolean>>;\n/** The order of the package managers to use when resolving automatically */\nexport declare const RESOLUTION_ORDER: NodePackageManager['name'][];\n/**\n * Resolve the workspace root for a project, if its part of a monorepo.\n * Optionally, provide a specific packager to only resolve that one specifically.\n */\nexport declare function findWorkspaceRoot(projectRoot: string, preferredManager?: NodePackageManager['name']): string | null;\n/**\n * Resolve the used node package manager for a project by checking the lockfile.\n * This also tries to resolve the workspace root, if its part of a monorepo.\n * Optionally, provide a preferred packager to only resolve that one specifically.\n */\nexport declare function resolvePackageManager(projectRoot: string, preferredManager?: NodePackageManager['name']): NodePackageManager['name'] | null;\n/**\n * This creates a Node package manager from the provided options.\n * If these options are not provided, it will infer the package manager from lockfiles.\n * When no package manager is found, it falls back to npm.\n */\nexport declare function createForProject(projectRoot: string, options?: NodePackageManagerForProject): NodePackageManager;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}