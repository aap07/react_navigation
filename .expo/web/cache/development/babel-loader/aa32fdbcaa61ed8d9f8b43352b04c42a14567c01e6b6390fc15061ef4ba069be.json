{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction findMatchingSimulator(simulators, findOptions) {\n  var _ref, _match;\n  if (!simulators.devices) {\n    return null;\n  }\n  var devices = simulators.devices;\n  var simulatorVersion;\n  var simulatorName = null;\n  if (findOptions && findOptions.simulator) {\n    var parsedSimulatorName = findOptions.simulator.match(/(.*)? (?:\\((\\d+\\.\\d+)?\\))$/);\n    if (parsedSimulatorName && parsedSimulatorName[2] !== undefined) {\n      simulatorVersion = parsedSimulatorName[2];\n      simulatorName = parsedSimulatorName[1];\n    } else {\n      simulatorName = findOptions.simulator;\n    }\n  }\n  var match;\n  var fallbackMatch;\n  for (var versionDescriptor in devices) {\n    var device = devices[versionDescriptor];\n    var version = versionDescriptor;\n    if (/^com\\.apple\\.CoreSimulator\\.SimRuntime\\./g.test(version)) {\n      version = version.replace(/^com\\.apple\\.CoreSimulator\\.SimRuntime\\.([^-]+)-([^-]+)-([^-]+)$/g, '$1 $2.$3');\n    }\n    if (!version.includes('iOS')) {\n      continue;\n    }\n    if (simulatorVersion && !version.endsWith(simulatorVersion)) {\n      continue;\n    }\n    for (var i in device) {\n      var simulator = device[i];\n      if (simulator.availability !== '(available)' && simulator.isAvailable !== 'YES' && simulator.isAvailable !== true) {\n        continue;\n      }\n      var booted = simulator.state === 'Booted';\n      var lastBootedAt = simulator.lastBootedAt;\n      var simulatorDescriptor = {\n        udid: simulator.udid,\n        name: simulator.name,\n        booted: booted,\n        version: version\n      };\n      if (findOptions && findOptions.udid) {\n        if (simulator.udid === findOptions.udid) {\n          return simulatorDescriptor;\n        }\n      } else {\n        if (booted && simulatorName === null) {\n          return simulatorDescriptor;\n        }\n        if (simulator.name === simulatorName && !match) {\n          match = simulatorDescriptor;\n        }\n        if (!!lastBootedAt && !match) {\n          fallbackMatch = simulatorDescriptor;\n        }\n        if (simulatorName === null && !match) {\n          match = simulatorDescriptor;\n        }\n      }\n    }\n  }\n  return (_ref = (_match = match) != null ? _match : fallbackMatch) != null ? _ref : null;\n}\nvar _default = findMatchingSimulator;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","findMatchingSimulator","simulators","findOptions","_ref","_match","devices","simulatorVersion","simulatorName","simulator","parsedSimulatorName","match","undefined","fallbackMatch","versionDescriptor","device","version","test","replace","includes","endsWith","i","availability","isAvailable","booted","state","lastBootedAt","simulatorDescriptor","udid","name","_default"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-platform-ios/build/tools/findMatchingSimulator.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Takes in a parsed simulator list and a desired name, and returns an object with the matching simulator. The desired\n * name can optionally include the iOS version in between parenthesis after the device name. Ex: \"iPhone 6 (9.2)\" in\n * which case it'll attempt to find a simulator with the exact version specified.\n *\n * If the simulatorString argument is null, we'll go into default mode and return the currently booted simulator,\n * the last booted simulator or\n * if none is booted, it will be the first in the list.\n *\n * @param simulators a parsed list from `xcrun simctl list --json devices` command\n * @param findOptions null or an object containing:\n * ```\n * {\n *    simulator: name of desired simulator\n *    udid: udid of desired simulator\n * }\n * ```\n * If null, it will use the currently booted simulator, or if none are booted, the first in the list.\n */\nfunction findMatchingSimulator(simulators, findOptions) {\n  if (!simulators.devices) {\n    return null;\n  }\n  const devices = simulators.devices;\n  let simulatorVersion;\n  let simulatorName = null;\n  if (findOptions && findOptions.simulator) {\n    const parsedSimulatorName = findOptions.simulator.match(/(.*)? (?:\\((\\d+\\.\\d+)?\\))$/);\n    if (parsedSimulatorName && parsedSimulatorName[2] !== undefined) {\n      simulatorVersion = parsedSimulatorName[2];\n      simulatorName = parsedSimulatorName[1];\n    } else {\n      simulatorName = findOptions.simulator;\n    }\n  }\n  let match;\n  let fallbackMatch;\n  for (const versionDescriptor in devices) {\n    const device = devices[versionDescriptor];\n    let version = versionDescriptor;\n    if (/^com\\.apple\\.CoreSimulator\\.SimRuntime\\./g.test(version)) {\n      // Transform \"com.apple.CoreSimulator.SimRuntime.iOS-12-2\" into \"iOS 12.2\"\n      version = version.replace(/^com\\.apple\\.CoreSimulator\\.SimRuntime\\.([^-]+)-([^-]+)-([^-]+)$/g, '$1 $2.$3');\n    }\n\n    // Making sure the version of the simulator is an iOS or tvOS (Removes Apple Watch, etc)\n    if (!version.includes('iOS')) {\n      continue;\n    }\n    if (simulatorVersion && !version.endsWith(simulatorVersion)) {\n      continue;\n    }\n    for (const i in device) {\n      const simulator = device[i];\n      // Skipping non-available simulator\n      if (simulator.availability !== '(available)' &&\n      // @ts-ignore verify isAvailable parameter\n      simulator.isAvailable !== 'YES' && simulator.isAvailable !== true) {\n        continue;\n      }\n      const booted = simulator.state === 'Booted';\n      const lastBootedAt = simulator.lastBootedAt;\n      const simulatorDescriptor = {\n        udid: simulator.udid,\n        name: simulator.name,\n        booted,\n        version\n      };\n      if (findOptions && findOptions.udid) {\n        if (simulator.udid === findOptions.udid) {\n          return simulatorDescriptor;\n        }\n      } else {\n        if (booted && simulatorName === null) {\n          return simulatorDescriptor;\n        }\n        if (simulator.name === simulatorName && !match) {\n          match = simulatorDescriptor;\n        }\n        // If no match found, use first available simulator that was booted before\n        if (!!lastBootedAt && !match) {\n          fallbackMatch = simulatorDescriptor;\n        }\n        // Keeps track of the first available simulator for use if we can't find one above.\n        if (simulatorName === null && !match) {\n          match = simulatorDescriptor;\n        }\n      }\n    }\n  }\n  return match ?? fallbackMatch ?? null;\n}\nvar _default = findMatchingSimulator;\nexports.default = _default;\n\n//# sourceMappingURL=findMatchingSimulator.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}