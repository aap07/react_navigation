{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport React from 'react';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport { requireNativeModule } from \"./requireNativeModule\";\nvar nativeComponentsCache = new Map();\nfunction requireCachedNativeComponent(viewName) {\n  var cachedNativeComponent = nativeComponentsCache.get(viewName);\n  if (!cachedNativeComponent) {\n    var nativeComponent = requireNativeComponent(viewName);\n    nativeComponentsCache.set(viewName, nativeComponent);\n    return nativeComponent;\n  }\n  return cachedNativeComponent;\n}\nexport function requireNativeViewManager(viewName) {\n  var viewManagersMetadata = NativeModules.NativeUnimoduleProxy.viewManagersMetadata;\n  var viewManagerConfig = viewManagersMetadata == null ? void 0 : viewManagersMetadata[viewName];\n  if (__DEV__ && !viewManagerConfig) {\n    var exportedViewManagerNames = Object.keys(viewManagersMetadata).join(', ');\n    console.warn(`The native view manager required by name (${viewName}) from NativeViewManagerAdapter isn't exported by expo-modules-core. Views of this type may not render correctly. Exported view managers: [${exportedViewManagerNames}].`);\n  }\n  var reactNativeViewName = `ViewManagerAdapter_${viewName}`;\n  var ReactNativeComponent = requireCachedNativeComponent(reactNativeViewName);\n  var NativeComponent = function (_React$PureComponent) {\n    _inherits(NativeComponent, _React$PureComponent);\n    var _super = _createSuper(NativeComponent);\n    function NativeComponent() {\n      var _this;\n      _classCallCheck(this, NativeComponent);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _super.call.apply(_super, [this].concat(args));\n      _this.nativeTag = null;\n      return _this;\n    }\n    _createClass(NativeComponent, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this.nativeTag = findNodeHandle(this);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return React.createElement(ReactNativeComponent, _objectSpread({}, this.props));\n      }\n    }]);\n    return NativeComponent;\n  }(React.PureComponent);\n  NativeComponent.displayName = viewName;\n  try {\n    var nativeModule = requireNativeModule(viewName);\n    var nativeViewPrototype = nativeModule.ViewPrototype;\n    if (nativeViewPrototype) {\n      Object.assign(NativeComponent.prototype, nativeViewPrototype);\n    }\n  } catch (_unused) {}\n  return NativeComponent;\n}","map":{"version":3,"names":["React","findNodeHandle","NativeModules","requireNativeComponent","requireNativeModule","nativeComponentsCache","Map","requireCachedNativeComponent","viewName","cachedNativeComponent","get","nativeComponent","set","requireNativeViewManager","viewManagersMetadata","NativeUnimoduleProxy","viewManagerConfig","__DEV__","exportedViewManagerNames","Object","keys","join","console","warn","reactNativeViewName","ReactNativeComponent","NativeComponent","_React$PureComponent","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","nativeTag","_createClass","key","value","componentDidMount","render","createElement","_objectSpread","props","PureComponent","displayName","nativeModule","nativeViewPrototype","ViewPrototype","assign","prototype","_unused"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\expo-modules-core\\src\\NativeViewManagerAdapter.native.tsx"],"sourcesContent":["import React from 'react';\nimport { findNodeHandle, NativeModules, requireNativeComponent, HostComponent } from 'react-native';\n\nimport { requireNativeModule } from './requireNativeModule';\n\n// To make the transition from React Native's `requireNativeComponent` to Expo's\n// `requireNativeViewManager` as easy as possible, `requireNativeViewManager` is a drop-in\n// replacement for `requireNativeComponent`.\n//\n// For each view manager, we create a wrapper component that accepts all of the props available to\n// the author of the universal module. This wrapper component splits the props into two sets: props\n// passed to React Native's View (ex: style, testID) and custom view props, which are passed to the\n// adapter view component in a prop called `proxiedProperties`.\n\n/**\n * A map that caches registered native components.\n */\nconst nativeComponentsCache = new Map<string, HostComponent<any>>();\n\n/**\n * Requires a React Native component from cache if possible. This prevents\n * \"Tried to register two views with the same name\" errors on fast refresh, but\n * also when there are multiple versions of the same package with native component.\n */\nfunction requireCachedNativeComponent<Props>(viewName: string): HostComponent<Props> {\n  const cachedNativeComponent = nativeComponentsCache.get(viewName);\n\n  if (!cachedNativeComponent) {\n    const nativeComponent = requireNativeComponent<Props>(viewName);\n    nativeComponentsCache.set(viewName, nativeComponent);\n    return nativeComponent;\n  }\n  return cachedNativeComponent;\n}\n\n/**\n * A drop-in replacement for `requireNativeComponent`.\n */\nexport function requireNativeViewManager<P>(viewName: string): React.ComponentType<P> {\n  const { viewManagersMetadata } = NativeModules.NativeUnimoduleProxy;\n  const viewManagerConfig = viewManagersMetadata?.[viewName];\n\n  if (__DEV__ && !viewManagerConfig) {\n    const exportedViewManagerNames = Object.keys(viewManagersMetadata).join(', ');\n    console.warn(\n      `The native view manager required by name (${viewName}) from NativeViewManagerAdapter isn't exported by expo-modules-core. Views of this type may not render correctly. Exported view managers: [${exportedViewManagerNames}].`\n    );\n  }\n\n  // Set up the React Native native component, which is an adapter to the universal module's view\n  // manager\n  const reactNativeViewName = `ViewManagerAdapter_${viewName}`;\n  const ReactNativeComponent = requireCachedNativeComponent(reactNativeViewName);\n\n  class NativeComponent extends React.PureComponent<P> {\n    static displayName = viewName;\n\n    // This will be accessed from native when the prototype functions are called,\n    // in order to find the associated native view.\n    nativeTag: number | null = null;\n\n    componentDidMount(): void {\n      this.nativeTag = findNodeHandle(this);\n    }\n\n    render(): React.ReactNode {\n      return <ReactNativeComponent {...this.props} />;\n    }\n  }\n\n  try {\n    const nativeModule = requireNativeModule(viewName);\n    const nativeViewPrototype = nativeModule.ViewPrototype;\n\n    if (nativeViewPrototype) {\n      // Assign native view functions to the component prototype so they can be accessed from the ref.\n      Object.assign(NativeComponent.prototype, nativeViewPrototype);\n    }\n  } catch {\n    // `requireNativeModule` may throw an error when the native module cannot be found.\n    // In some tests we don't mock the entire modules, but we do want to mock native views. For now,\n    // until we still have to support the legacy modules proxy and don't have better ways to mock,\n    // let's just gracefully skip assigning the prototype functions.\n    // See: https://github.com/expo/expo/blob/main/packages/expo-modules-core/src/__tests__/NativeViewManagerAdapter-test.native.tsx\n  }\n\n  return NativeComponent;\n}\n"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,cAAA;AAAA,OAAAC,aAAA;AAAA,SACcC,sBAAsB;AAE9D,SAASC,mBAAmB;AAc5B,IAAMC,qBAAqB,GAAG,IAAIC,GAAG,EAA8B;AAOnE,SAASC,4BAA4BA,CAAQC,QAAgB;EAC3D,IAAMC,qBAAqB,GAAGJ,qBAAqB,CAACK,GAAG,CAACF,QAAQ,CAAC;EAEjE,IAAI,CAACC,qBAAqB,EAAE;IAC1B,IAAME,eAAe,GAAGR,sBAAsB,CAAQK,QAAQ,CAAC;IAC/DH,qBAAqB,CAACO,GAAG,CAACJ,QAAQ,EAAEG,eAAe,CAAC;IACpD,OAAOA,eAAe;;EAExB,OAAOF,qBAAqB;AAC9B;AAKA,OAAM,SAAUI,wBAAwBA,CAAIL,QAAgB;EAC1D,IAAQM,oBAAoB,GAAKZ,aAAa,CAACa,oBAAoB,CAA3DD,oBAAoB;EAC5B,IAAME,iBAAiB,GAAGF,oBAAoB,oBAApBA,oBAAoB,CAAGN,QAAQ,CAAC;EAE1D,IAAIS,OAAO,IAAI,CAACD,iBAAiB,EAAE;IACjC,IAAME,wBAAwB,GAAGC,MAAM,CAACC,IAAI,CAACN,oBAAoB,CAAC,CAACO,IAAI,CAAC,IAAI,CAAC;IAC7EC,OAAO,CAACC,IAAI,CACV,6CAA6Cf,QAAQ,8IAA8IU,wBAAwB,IAAI,CAChO;;EAKH,IAAMM,mBAAmB,GAAG,sBAAsBhB,QAAQ,EAAE;EAC5D,IAAMiB,oBAAoB,GAAGlB,4BAA4B,CAACiB,mBAAmB,CAAC;EAAC,IAEzEE,eAAgB,aAAAC,oBAAA;IAAAC,SAAA,CAAAF,eAAA,EAAAC,oBAAA;IAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,eAAA;IAAA,SAAAA,gBAAA;MAAA,IAAAK,KAAA;MAAAC,eAAA,OAAAN,eAAA;MAAA,SAAAO,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAAC,IAAA,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;QAAAF,IAAA,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;MAAA;MAAAP,KAAA,GAAAF,MAAA,CAAAU,IAAA,CAAAC,KAAA,CAAAX,MAAA,SAAAY,MAAA,CAAAL,IAAA;MAAAL,KAAA,CAKpBW,SAAS,GAAkB,IAAI;MAAA,OAAAX,KAAA;IAAA;IAAAY,YAAA,CAAAjB,eAAA;MAAAkB,GAAA;MAAAC,KAAA,EAE/B,SAAAC,kBAAA,EAAiB;QACf,IAAI,CAACJ,SAAS,GAAGzC,cAAc,CAAC,IAAI,CAAC;MACvC;IAAC;MAAA2C,GAAA;MAAAC,KAAA,EAED,SAAAE,OAAA,EAAM;QACJ,OAAO/C,KAAA,CAAAgD,aAAA,CAACvB,oBAAoB,EAAAwB,aAAA,KAAK,IAAI,CAACC,KAAK,EAAI;MACjD;IAAC;IAAA,OAAAxB,eAAA;EAAA,EAb2B1B,KAAK,CAACmD,aAAgB;EAA9CzB,eAAgB,CACb0B,WAAW,GAAG5C,QAAQ;EAe/B,IAAI;IACF,IAAM6C,YAAY,GAAGjD,mBAAmB,CAACI,QAAQ,CAAC;IAClD,IAAM8C,mBAAmB,GAAGD,YAAY,CAACE,aAAa;IAEtD,IAAID,mBAAmB,EAAE;MAEvBnC,MAAM,CAACqC,MAAM,CAAC9B,eAAe,CAAC+B,SAAS,EAAEH,mBAAmB,CAAC;;GAEhE,CAAC,OAAAI,OAAA,EAAM,C;EAQR,OAAOhC,eAAe;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}