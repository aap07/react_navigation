{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRequiresFullScreen = getRequiresFullScreen;\nexports.setRequiresFullScreen = setRequiresFullScreen;\nexports.withRequiresFullScreen = void 0;\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _versions() {\n  var data = require(\"../utils/versions\");\n  _versions = function _versions() {\n    return data;\n  };\n  return data;\n}\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n  _warnings = function _warnings() {\n    return data;\n  };\n  return data;\n}\nvar withRequiresFullScreen = (0, _iosPlugins().createInfoPlistPlugin)(setRequiresFullScreen, 'withRequiresFullScreen');\nexports.withRequiresFullScreen = withRequiresFullScreen;\nfunction getRequiresFullScreen(config) {\n  var _config$ios;\n  if ((_config$ios = config.ios) !== null && _config$ios !== void 0 && _config$ios.hasOwnProperty('requireFullScreen')) {\n    return !!config.ios.requireFullScreen;\n  } else {\n    if ((0, _versions().gteSdkVersion)(config, '43.0.0')) {\n      return false;\n    }\n    return true;\n  }\n}\nvar iPadInterfaceKey = 'UISupportedInterfaceOrientations~ipad';\nvar requiredIPadInterface = ['UIInterfaceOrientationPortrait', 'UIInterfaceOrientationPortraitUpsideDown', 'UIInterfaceOrientationLandscapeLeft', 'UIInterfaceOrientationLandscapeRight'];\nfunction isStringArray(value) {\n  return Array.isArray(value) && value.every(function (value) {\n    return typeof value === 'string';\n  });\n}\nfunction hasMinimumOrientations(masks) {\n  return requiredIPadInterface.every(function (mask) {\n    return masks.includes(mask);\n  });\n}\nfunction resolveExistingIpadInterfaceOrientations(interfaceOrientations) {\n  if (isStringArray(interfaceOrientations) && interfaceOrientations.length && !hasMinimumOrientations(interfaceOrientations)) {\n    var existingList = interfaceOrientations.join(', ');\n    (0, _warnings().addWarningIOS)('ios.requireFullScreen', `iPad multitasking requires all \\`${iPadInterfaceKey}\\` orientations to be defined in the Info.plist. The Info.plist currently defines values that are incompatible with multitasking, these will be overwritten to prevent submission failure. Existing: ${existingList}`);\n    return interfaceOrientations;\n  }\n  return [];\n}\nfunction setRequiresFullScreen(config, infoPlist) {\n  var requiresFullScreen = getRequiresFullScreen(config);\n  if (!requiresFullScreen) {\n    var existing = resolveExistingIpadInterfaceOrientations(infoPlist[iPadInterfaceKey]);\n    infoPlist[iPadInterfaceKey] = _toConsumableArray(new Set(existing.concat(requiredIPadInterface)));\n  }\n  return _objectSpread(_objectSpread({}, infoPlist), {}, {\n    UIRequiresFullScreen: requiresFullScreen\n  });\n}","map":{"version":3,"names":["_iosPlugins","data","require","_versions","_warnings","withRequiresFullScreen","createInfoPlistPlugin","setRequiresFullScreen","exports","getRequiresFullScreen","config","_config$ios","ios","hasOwnProperty","requireFullScreen","gteSdkVersion","iPadInterfaceKey","requiredIPadInterface","isStringArray","value","Array","isArray","every","hasMinimumOrientations","masks","mask","includes","resolveExistingIpadInterfaceOrientations","interfaceOrientations","length","existingList","join","addWarningIOS","infoPlist","requiresFullScreen","existing","_toConsumableArray","Set","concat","_objectSpread","UIRequiresFullScreen"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\ios\\RequiresFullScreen.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createInfoPlistPlugin } from '../plugins/ios-plugins';\nimport { gteSdkVersion } from '../utils/versions';\nimport { addWarningIOS } from '../utils/warnings';\nimport { InfoPlist } from './IosConfig.types';\n\nexport const withRequiresFullScreen = createInfoPlistPlugin(\n  setRequiresFullScreen,\n  'withRequiresFullScreen'\n);\n\n// NOTES: This is defaulted to `true` for now to match the behavior prior to SDK\n// 34, but will change to `false` in SDK +43.\nexport function getRequiresFullScreen(config: Pick<ExpoConfig, 'ios' | 'sdkVersion'>) {\n  // Yes, the property is called ios.requireFullScreen, without the s - not \"requires\"\n  // This is confusing indeed because the actual property name does have the s\n  if (config.ios?.hasOwnProperty('requireFullScreen')) {\n    return !!config.ios.requireFullScreen;\n  } else {\n    // In SDK 43, the `requireFullScreen` default has been changed to false.\n    if (\n      gteSdkVersion(config, '43.0.0')\n      // TODO: Uncomment after SDK 43 is released.\n      // || !config.sdkVersion\n    ) {\n      return false;\n    }\n    return true;\n  }\n}\n\nconst iPadInterfaceKey = 'UISupportedInterfaceOrientations~ipad';\n\nconst requiredIPadInterface = [\n  'UIInterfaceOrientationPortrait',\n  'UIInterfaceOrientationPortraitUpsideDown',\n  'UIInterfaceOrientationLandscapeLeft',\n  'UIInterfaceOrientationLandscapeRight',\n];\n\nfunction isStringArray(value: any): value is string[] {\n  return Array.isArray(value) && value.every((value) => typeof value === 'string');\n}\n\nfunction hasMinimumOrientations(masks: string[]): boolean {\n  return requiredIPadInterface.every((mask) => masks.includes(mask));\n}\n\n/**\n * Require full screen being disabled requires all ipad interfaces to to be added,\n * otherwise submissions to the iOS App Store will fail.\n *\n * ERROR ITMS-90474: \"Invalid Bundle. iPad Multitasking support requires these orientations: 'UIInterfaceOrientationPortrait,UIInterfaceOrientationPortraitUpsideDown,UIInterfaceOrientationLandscapeLeft,UIInterfaceOrientationLandscapeRight'. Found 'UIInterfaceOrientationPortrait,UIInterfaceOrientationPortraitUpsideDown' in bundle 'com.bacon.app'.\"\n *\n * @param interfaceOrientations\n * @returns\n */\nfunction resolveExistingIpadInterfaceOrientations(interfaceOrientations: any): string[] {\n  if (\n    // Ensure type.\n    isStringArray(interfaceOrientations) &&\n    // Don't warn if it's an empty array, this is invalid regardless.\n    interfaceOrientations.length &&\n    // Check if the minimum requirements are met.\n    !hasMinimumOrientations(interfaceOrientations)\n  ) {\n    const existingList = interfaceOrientations!.join(', ');\n    addWarningIOS(\n      'ios.requireFullScreen',\n      `iPad multitasking requires all \\`${iPadInterfaceKey}\\` orientations to be defined in the Info.plist. The Info.plist currently defines values that are incompatible with multitasking, these will be overwritten to prevent submission failure. Existing: ${existingList}`\n    );\n    return interfaceOrientations;\n  }\n  return [];\n}\n\n// Whether requires full screen on iPad\nexport function setRequiresFullScreen(\n  config: Pick<ExpoConfig, 'ios'>,\n  infoPlist: InfoPlist\n): InfoPlist {\n  const requiresFullScreen = getRequiresFullScreen(config);\n  if (!requiresFullScreen) {\n    const existing = resolveExistingIpadInterfaceOrientations(infoPlist[iPadInterfaceKey]);\n\n    // There currently exists no mechanism to safely undo this feature besides `npx expo prebuild --clear`,\n    // this seems ok though because anyone using `UISupportedInterfaceOrientations~ipad` probably\n    // wants them to be defined to this value anyways. This is also the default value used in the Xcode iOS template.\n\n    // Merge any previous interfaces with the required interfaces.\n    infoPlist[iPadInterfaceKey] = [...new Set(existing.concat(requiredIPadInterface))];\n  }\n\n  return {\n    ...infoPlist,\n    UIRequiresFullScreen: requiresFullScreen,\n  };\n}\n"],"mappings":";;;;;;;;;;;;AAEA,SAAAA,YAAA;EAAA,IAAAC,IAAA,GAAAC,OAAA;EAAAF,WAAA,YAAAA,YAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAE,UAAA;EAAA,IAAAF,IAAA,GAAAC,OAAA;EAAAC,SAAA,YAAAA,UAAA;IAAA,OAAAF,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAG,UAAA;EAAA,IAAAH,IAAA,GAAAC,OAAA;EAAAE,SAAA,YAAAA,UAAA;IAAA,OAAAH,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAGO,IAAMI,sBAAsB,GAAG,IAAAL,WAAA,GAAAM,qBAAqB,EACzDC,qBAAqB,EACrB,wBAAwB,CACzB;AAGDC,OAAA,CAAAH,sBAAA,GAAAA,sBAAA;AACO,SAASI,qBAAqBA,CAACC,MAA8C,EAAE;EAAA,IAAAC,WAAA;EAGpF,KAAAA,WAAA,GAAID,MAAM,CAACE,GAAG,cAAAD,WAAA,eAAVA,WAAA,CAAYE,cAAc,CAAC,mBAAmB,CAAC,EAAE;IACnD,OAAO,CAAC,CAACH,MAAM,CAACE,GAAG,CAACE,iBAAiB;EACvC,CAAC,MAAM;IAEL,IACE,IAAAX,SAAA,GAAAY,aAAa,EAACL,MAAM,EAAE,QAAQ,GAG9B;MACA,OAAO,KAAK;IACd;IACA,OAAO,IAAI;EACb;AACF;AAEA,IAAMM,gBAAgB,GAAG,uCAAuC;AAEhE,IAAMC,qBAAqB,GAAG,CAC5B,gCAAgC,EAChC,0CAA0C,EAC1C,qCAAqC,EACrC,sCAAsC,CACvC;AAED,SAASC,aAAaA,CAACC,KAAU,EAAqB;EACpD,OAAOC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC,IAAIA,KAAK,CAACG,KAAK,CAAE,UAAAH,KAAK;IAAA,OAAK,OAAOA,KAAK,KAAK,QAAQ;EAAA,EAAC;AAClF;AAEA,SAASI,sBAAsBA,CAACC,KAAe,EAAW;EACxD,OAAOP,qBAAqB,CAACK,KAAK,CAAE,UAAAG,IAAI;IAAA,OAAKD,KAAK,CAACE,QAAQ,CAACD,IAAI,CAAC;EAAA,EAAC;AACpE;AAWA,SAASE,wCAAwCA,CAACC,qBAA0B,EAAY;EACtF,IAEEV,aAAa,CAACU,qBAAqB,CAAC,IAEpCA,qBAAqB,CAACC,MAAM,IAE5B,CAACN,sBAAsB,CAACK,qBAAqB,CAAC,EAC9C;IACA,IAAME,YAAY,GAAGF,qBAAqB,CAAEG,IAAI,CAAC,IAAI,CAAC;IACtD,IAAA3B,SAAA,GAAA4B,aAAa,EACX,uBAAuB,EACtB,oCAAmChB,gBAAiB,wMAAuMc,YAAa,EAAC,CAC3Q;IACD,OAAOF,qBAAqB;EAC9B;EACA,OAAO,EAAE;AACX;AAGO,SAASrB,qBAAqBA,CACnCG,MAA+B,EAC/BuB,SAAoB,EACT;EACX,IAAMC,kBAAkB,GAAGzB,qBAAqB,CAACC,MAAM,CAAC;EACxD,IAAI,CAACwB,kBAAkB,EAAE;IACvB,IAAMC,QAAQ,GAAGR,wCAAwC,CAACM,SAAS,CAACjB,gBAAgB,CAAC,CAAC;IAOtFiB,SAAS,CAACjB,gBAAgB,CAAC,GAAAoB,kBAAA,CAAO,IAAIC,GAAG,CAACF,QAAQ,CAACG,MAAM,CAACrB,qBAAqB,CAAC,CAAC,CAAC;EACpF;EAEA,OAAAsB,aAAA,CAAAA,aAAA,KACKN,SAAS;IACZO,oBAAoB,EAAEN;EAAA;AAE1B"},"metadata":{},"sourceType":"script","externalDependencies":[]}