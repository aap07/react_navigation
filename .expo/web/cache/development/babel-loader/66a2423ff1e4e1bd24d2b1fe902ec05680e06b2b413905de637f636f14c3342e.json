{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar _require = require('util'),\n  promisify = _require.promisify;\nvar path = require('path');\nvar childProcess = require('child_process');\nvar fs = require('fs');\nvar isWsl = require('is-wsl');\nvar pAccess = promisify(fs.access);\nvar pExecFile = promisify(childProcess.execFile);\nvar localXdgOpenPath = path.join(__dirname, 'xdg-open');\nvar wslToWindowsPath = function () {\n  var _ref = _asyncToGenerator(function* (path) {\n    var _yield$pExecFile = yield pExecFile('wslpath', ['-w', path]),\n      stdout = _yield$pExecFile.stdout;\n    return stdout.trim();\n  });\n  return function wslToWindowsPath(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nmodule.exports = function () {\n  var _ref2 = _asyncToGenerator(function* (target, options) {\n    if (typeof target !== 'string') {\n      throw new TypeError('Expected a `target`');\n    }\n    options = _objectSpread({\n      wait: false,\n      background: false\n    }, options);\n    var command;\n    var appArguments = [];\n    var cliArguments = [];\n    var childProcessOptions = {};\n    if (Array.isArray(options.app)) {\n      appArguments = options.app.slice(1);\n      options.app = options.app[0];\n    }\n    if (process.platform === 'darwin') {\n      command = 'open';\n      if (options.wait) {\n        cliArguments.push('--wait-apps');\n      }\n      if (options.background) {\n        cliArguments.push('--background');\n      }\n      if (options.app) {\n        cliArguments.push('-a', options.app);\n      }\n    } else if (process.platform === 'win32' || isWsl) {\n      command = 'cmd' + (isWsl ? '.exe' : '');\n      cliArguments.push('/c', 'start', '\"\"', '/b');\n      target = target.replace(/&/g, '^&');\n      if (options.wait) {\n        cliArguments.push('/wait');\n      }\n      if (options.app) {\n        if (isWsl && options.app.startsWith('/mnt/')) {\n          var windowsPath = yield wslToWindowsPath(options.app);\n          options.app = windowsPath;\n        }\n        cliArguments.push(options.app);\n      }\n      if (appArguments.length > 0) {\n        cliArguments.push.apply(cliArguments, _toConsumableArray(appArguments));\n      }\n    } else {\n      if (options.app) {\n        command = options.app;\n      } else {\n        var isBundled = !__dirname || __dirname === '/';\n        var exeLocalXdgOpen = false;\n        try {\n          yield pAccess(localXdgOpenPath, fs.constants.X_OK);\n          exeLocalXdgOpen = true;\n        } catch (error) {}\n        var useSystemXdgOpen = process.versions.electron || process.platform === 'android' || isBundled || !exeLocalXdgOpen;\n        command = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;\n      }\n      if (appArguments.length > 0) {\n        cliArguments.push.apply(cliArguments, _toConsumableArray(appArguments));\n      }\n      if (!options.wait) {\n        childProcessOptions.stdio = 'ignore';\n        childProcessOptions.detached = true;\n      }\n    }\n    cliArguments.push(target);\n    if (process.platform === 'darwin' && appArguments.length > 0) {\n      cliArguments.push.apply(cliArguments, ['--args'].concat(_toConsumableArray(appArguments)));\n    }\n    var subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n    if (options.wait) {\n      return new Promise(function (resolve, reject) {\n        subprocess.once('error', reject);\n        subprocess.once('close', function (exitCode) {\n          if (exitCode > 0) {\n            reject(new Error(`Exited with code ${exitCode}`));\n            return;\n          }\n          resolve(subprocess);\n        });\n      });\n    }\n    subprocess.unref();\n    return subprocess;\n  });\n  return function (_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["_toConsumableArray","require","_defineProperty","_asyncToGenerator","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","_require","promisify","path","childProcess","fs","isWsl","pAccess","access","pExecFile","execFile","localXdgOpenPath","join","__dirname","wslToWindowsPath","_ref","_yield$pExecFile","stdout","trim","_x","module","exports","_ref2","target","options","TypeError","wait","background","command","appArguments","cliArguments","childProcessOptions","Array","isArray","app","slice","process","platform","replace","startsWith","windowsPath","isBundled","exeLocalXdgOpen","constants","X_OK","error","useSystemXdgOpen","versions","electron","stdio","detached","concat","subprocess","spawn","Promise","resolve","reject","once","exitCode","Error","unref","_x2","_x3"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-tools/node_modules/open/index.js"],"sourcesContent":["'use strict';\nconst {promisify} = require('util');\nconst path = require('path');\nconst childProcess = require('child_process');\nconst fs = require('fs');\nconst isWsl = require('is-wsl');\n\nconst pAccess = promisify(fs.access);\nconst pExecFile = promisify(childProcess.execFile);\n\n// Path to included `xdg-open`\nconst localXdgOpenPath = path.join(__dirname, 'xdg-open');\n\n// Convert a path from WSL format to Windows format:\n// `/mnt/c/Program Files/Example/MyApp.exe` â†’ `C:\\Program Files\\Example\\MyApp.exe`\nconst wslToWindowsPath = async path => {\n\tconst {stdout} = await pExecFile('wslpath', ['-w', path]);\n\treturn stdout.trim();\n};\n\nmodule.exports = async (target, options) => {\n\tif (typeof target !== 'string') {\n\t\tthrow new TypeError('Expected a `target`');\n\t}\n\n\toptions = {\n\t\twait: false,\n\t\tbackground: false,\n\t\t...options\n\t};\n\n\tlet command;\n\tlet appArguments = [];\n\tconst cliArguments = [];\n\tconst childProcessOptions = {};\n\n\tif (Array.isArray(options.app)) {\n\t\tappArguments = options.app.slice(1);\n\t\toptions.app = options.app[0];\n\t}\n\n\tif (process.platform === 'darwin') {\n\t\tcommand = 'open';\n\n\t\tif (options.wait) {\n\t\t\tcliArguments.push('--wait-apps');\n\t\t}\n\n\t\tif (options.background) {\n\t\t\tcliArguments.push('--background');\n\t\t}\n\n\t\tif (options.app) {\n\t\t\tcliArguments.push('-a', options.app);\n\t\t}\n\t} else if (process.platform === 'win32' || isWsl) {\n\t\tcommand = 'cmd' + (isWsl ? '.exe' : '');\n\t\tcliArguments.push('/c', 'start', '\"\"', '/b');\n\t\ttarget = target.replace(/&/g, '^&');\n\n\t\tif (options.wait) {\n\t\t\tcliArguments.push('/wait');\n\t\t}\n\n\t\tif (options.app) {\n\t\t\tif (isWsl && options.app.startsWith('/mnt/')) {\n\t\t\t\tconst windowsPath = await wslToWindowsPath(options.app);\n\t\t\t\toptions.app = windowsPath;\n\t\t\t}\n\n\t\t\tcliArguments.push(options.app);\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tcliArguments.push(...appArguments);\n\t\t}\n\t} else {\n\t\tif (options.app) {\n\t\t\tcommand = options.app;\n\t\t} else {\n\t\t\t// When bundled by Webpack, there's no actual package file path and no local `xdg-open`.\n\t\t\tconst isBundled = !__dirname || __dirname === '/';\n\n\t\t\t// Check if local `xdg-open` exists and is executable.\n\t\t\tlet exeLocalXdgOpen = false;\n\t\t\ttry {\n\t\t\t\tawait pAccess(localXdgOpenPath, fs.constants.X_OK);\n\t\t\t\texeLocalXdgOpen = true;\n\t\t\t} catch (error) {}\n\n\t\t\tconst useSystemXdgOpen = process.versions.electron ||\n\t\t\t\tprocess.platform === 'android' || isBundled || !exeLocalXdgOpen;\n\t\t\tcommand = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tcliArguments.push(...appArguments);\n\t\t}\n\n\t\tif (!options.wait) {\n\t\t\t// `xdg-open` will block the process unless stdio is ignored\n\t\t\t// and it's detached from the parent even if it's unref'd.\n\t\t\tchildProcessOptions.stdio = 'ignore';\n\t\t\tchildProcessOptions.detached = true;\n\t\t}\n\t}\n\n\tcliArguments.push(target);\n\n\tif (process.platform === 'darwin' && appArguments.length > 0) {\n\t\tcliArguments.push('--args', ...appArguments);\n\t}\n\n\tconst subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n\n\tif (options.wait) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsubprocess.once('error', reject);\n\n\t\t\tsubprocess.once('close', exitCode => {\n\t\t\t\tif (exitCode > 0) {\n\t\t\t\t\treject(new Error(`Exited with code ${exitCode}`));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresolve(subprocess);\n\t\t\t});\n\t\t});\n\t}\n\n\tsubprocess.unref();\n\n\treturn subprocess;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}