{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.installComponent = exports.getUserAndroidPath = exports.getBestHypervisor = exports.getAndroidSdkRootInstallation = exports.enableWHPX = exports.enableHAXM = exports.enableAMDH = exports.createAVD = void 0;\nfunction _fsExtra() {\n  var data = require(\"fs-extra\");\n  _fsExtra = function _fsExtra() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = require(\"path\");\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nvar _executeWinCommand = require(\"./executeWinCommand\");\nvar _processorType = require(\"./processorType\");\nvar getUserAndroidPath = function getUserAndroidPath() {\n  return (0, _path().join)(process.env.LOCALAPPDATA || '', 'Android');\n};\nexports.getUserAndroidPath = getUserAndroidPath;\nvar getAndroidSdkRootInstallation = function getAndroidSdkRootInstallation() {\n  var env = process.env.ANDROID_SDK_ROOT || process.env.ANDROID_HOME;\n  var installPath = env ? env : (0, _path().join)(getUserAndroidPath(), 'Sdk');\n  if ((0, _fsExtra().pathExistsSync)(installPath)) {\n    return installPath;\n  } else {\n    return '';\n  }\n};\nexports.getAndroidSdkRootInstallation = getAndroidSdkRootInstallation;\nvar installComponent = function installComponent(component, androidSdkRoot) {\n  return new Promise(function (done, error) {\n    var _child$stdout, _child$stderr;\n    var sdkmanager = (0, _path().join)(androidSdkRoot, 'tools', 'bin', 'sdkmanager.bat');\n    var command = `\"${sdkmanager}\" --sdk_root=\"${androidSdkRoot}\" \"${component}\"`;\n    var child = (0, _executeWinCommand.executeCommand)(command);\n    var stderr = '';\n    (_child$stdout = child.stdout) === null || _child$stdout === void 0 ? void 0 : _child$stdout.on('data', function (data) {\n      if (data.includes('(y/N)')) {\n        var _child$stdin;\n        (_child$stdin = child.stdin) === null || _child$stdin === void 0 ? void 0 : _child$stdin.write('y\\n');\n      }\n    });\n    (_child$stderr = child.stderr) === null || _child$stderr === void 0 ? void 0 : _child$stderr.on('data', function (data) {\n      stderr += data.toString('utf-8');\n    });\n    child.on('close', function (exitStatus) {\n      if (exitStatus === 0) {\n        done(undefined);\n      } else {\n        error({\n          stderr: stderr\n        });\n      }\n    });\n    child.on('error', error);\n  });\n};\nexports.installComponent = installComponent;\nvar parseHypervisor = function parseHypervisor(status, customHypervisor) {\n  if (status.includes('is not installed, but Windows Hypervisor Platform is available.')) {\n    return {\n      hypervisor: 'WHPX',\n      installed: false\n    };\n  }\n  if (/WHPX \\((\\d|\\.)+\\) is installed and usable\\./.test(status)) {\n    return {\n      hypervisor: 'WHPX',\n      installed: true\n    };\n  }\n  if (/is installed and usable\\./.test(status)) {\n    return {\n      hypervisor: customHypervisor,\n      installed: true\n    };\n  }\n  if (status.includes(\"Your CPU: 'AuthenticAMD'\")) {\n    return {\n      hypervisor: customHypervisor,\n      installed: false\n    };\n  }\n  if (status.includes('is not installed on this machine')) {\n    return {\n      hypervisor: 'none',\n      installed: false\n    };\n  }\n  return null;\n};\nvar getEmulatorAccelOutputInformation = function () {\n  var _ref = _asyncToGenerator(function* (androidSDKRoot) {\n    try {\n      var _yield = yield (0, _executeWinCommand.executeCommand)(`\"${(0, _path().join)(androidSDKRoot, 'emulator', 'emulator-check.exe')}\" accel`),\n        stdout = _yield.stdout;\n      return stdout;\n    } catch (e) {\n      var _stdout = e.stdout;\n      return _stdout;\n    }\n  });\n  return function getEmulatorAccelOutputInformation(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar createAVD = function () {\n  var _ref2 = _asyncToGenerator(function* (androidSDKRoot, name, device, image) {\n    try {\n      var abi = image.includes('x86_64') ? 'x86_64' : 'x86';\n      var tag = image.includes('google_apis') ? 'google_apis' : 'generic';\n      var avdmanager = (0, _path().join)(androidSDKRoot, 'tools', 'bin', 'avdmanager.bat');\n      var _yield2 = yield (0, _executeWinCommand.executeCommand)(`${avdmanager} -s create avd --force --name \"${name}\" --device \"${device}\" --package \"${image}\" --tag \"${tag}\" --abi \"${abi}\"`),\n        stdout = _yield2.stdout;\n      var configPath = (0, _path().join)(process.env.HOMEPATH || '', '.android', 'avd', `${name}.avd`, 'config.ini');\n      var content = yield (0, _fsExtra().readFile)(configPath, 'utf-8');\n      var updatedContent = content.replace(/Sdk\\\\system-images/g, 'system-images');\n      yield (0, _fsExtra().writeFile)(configPath, updatedContent, 'utf-8');\n      return stdout;\n    } catch (e) {\n      var stderr = e.stderr;\n      return stderr;\n    }\n  });\n  return function createAVD(_x2, _x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexports.createAVD = createAVD;\nvar getBestHypervisor = function () {\n  var _ref3 = _asyncToGenerator(function* (androidSDKRoot) {\n    var customHypervisor = (0, _processorType.getProcessorType)() === 'Intel' ? 'HAXM' : 'AMDH';\n    var stdout = yield getEmulatorAccelOutputInformation(androidSDKRoot);\n    var lines = stdout.split('\\n');\n    for (var line of lines) {\n      var hypervisor = parseHypervisor(line, customHypervisor);\n      if (hypervisor) {\n        return hypervisor;\n      }\n    }\n    return {\n      hypervisor: 'none',\n      installed: false\n    };\n  });\n  return function getBestHypervisor(_x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexports.getBestHypervisor = getBestHypervisor;\nvar enableWHPX = function enableWHPX() {\n  return (0, _executeWinCommand.executeCommand)('DISM /Quiet /NoRestart /Online /Enable-Feature /All /FeatureName:Microsoft-Hyper-V /FeatureName:HypervisorPlatform', true);\n};\nexports.enableWHPX = enableWHPX;\nvar enableHAXM = function () {\n  var _ref4 = _asyncToGenerator(function* (androidSdkInstallPath) {\n    yield installComponent('extras;intel;Hardware_Accelerated_Execution_Manager', androidSdkInstallPath);\n    yield (0, _executeWinCommand.executeCommand)((0, _path().join)(androidSdkInstallPath, 'Sdk', 'extras', 'intel', 'Hardware_Accelerated_Execution_Manager', 'silent_install.bat'));\n  });\n  return function enableHAXM(_x7) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexports.enableHAXM = enableHAXM;\nvar enableAMDH = function () {\n  var _ref5 = _asyncToGenerator(function* (androidSdkInstallPath) {\n    yield installComponent('extras;google;Android_Emulator_Hypervisor_Driver', androidSdkInstallPath);\n    yield (0, _executeWinCommand.executeCommand)((0, _path().join)(androidSdkInstallPath, 'Sdk', 'extras', 'google', 'Android_Emulator_Hypervisor_Driver', 'silent_install.bat'));\n  });\n  return function enableAMDH(_x8) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexports.enableAMDH = enableAMDH;","map":{"version":3,"names":["_asyncToGenerator","require","Object","defineProperty","exports","value","installComponent","getUserAndroidPath","getBestHypervisor","getAndroidSdkRootInstallation","enableWHPX","enableHAXM","enableAMDH","createAVD","_fsExtra","data","_path","_executeWinCommand","_processorType","join","process","env","LOCALAPPDATA","ANDROID_SDK_ROOT","ANDROID_HOME","installPath","pathExistsSync","component","androidSdkRoot","Promise","done","error","_child$stdout","_child$stderr","sdkmanager","command","child","executeCommand","stderr","stdout","on","includes","_child$stdin","stdin","write","toString","exitStatus","undefined","parseHypervisor","status","customHypervisor","hypervisor","installed","test","getEmulatorAccelOutputInformation","_ref","androidSDKRoot","_yield","e","_x","apply","arguments","_ref2","name","device","image","abi","tag","avdmanager","_yield2","configPath","HOMEPATH","content","readFile","updatedContent","replace","writeFile","_x2","_x3","_x4","_x5","_ref3","getProcessorType","lines","split","line","_x6","_ref4","androidSdkInstallPath","_x7","_ref5","_x8"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/build/tools/windows/androidWinHelpers.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.installComponent = exports.getUserAndroidPath = exports.getBestHypervisor = exports.getAndroidSdkRootInstallation = exports.enableWHPX = exports.enableHAXM = exports.enableAMDH = exports.createAVD = void 0;\nfunction _fsExtra() {\n  const data = require(\"fs-extra\");\n  _fsExtra = function () {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  const data = require(\"path\");\n  _path = function () {\n    return data;\n  };\n  return data;\n}\nvar _executeWinCommand = require(\"./executeWinCommand\");\nvar _processorType = require(\"./processorType\");\n/**\n * Returns the path to where all Android related things should be installed\n * locally to the user.\n */\nconst getUserAndroidPath = () => {\n  return (0, _path().join)(process.env.LOCALAPPDATA || '', 'Android');\n};\n\n/**\n * Deals with ANDROID_HOME, ANDROID_SDK_ROOT or generates a new one\n */\nexports.getUserAndroidPath = getUserAndroidPath;\nconst getAndroidSdkRootInstallation = () => {\n  const env = process.env.ANDROID_SDK_ROOT || process.env.ANDROID_HOME;\n  const installPath = env ?\n  // Happens if previous installations or not fully completed\n  env :\n  // All Android zip files have a root folder, using `Android` as the common place\n  (0, _path().join)(getUserAndroidPath(), 'Sdk');\n  if ((0, _fsExtra().pathExistsSync)(installPath)) {\n    return installPath;\n  } else {\n    return '';\n  }\n};\n\n/**\n * Installs an Android component (e.g.: `platform-tools`, `emulator`)\n * using the `sdkmanager` tool and automatically accepting the licenses.\n */\nexports.getAndroidSdkRootInstallation = getAndroidSdkRootInstallation;\nconst installComponent = (component, androidSdkRoot) => {\n  return new Promise((done, error) => {\n    var _child$stdout, _child$stderr;\n    const sdkmanager = (0, _path().join)(androidSdkRoot, 'tools', 'bin', 'sdkmanager.bat');\n    const command = `\"${sdkmanager}\" --sdk_root=\"${androidSdkRoot}\" \"${component}\"`;\n    const child = (0, _executeWinCommand.executeCommand)(command);\n    let stderr = '';\n    (_child$stdout = child.stdout) === null || _child$stdout === void 0 ? void 0 : _child$stdout.on('data', data => {\n      if (data.includes('(y/N)')) {\n        var _child$stdin;\n        (_child$stdin = child.stdin) === null || _child$stdin === void 0 ? void 0 : _child$stdin.write('y\\n');\n      }\n    });\n    (_child$stderr = child.stderr) === null || _child$stderr === void 0 ? void 0 : _child$stderr.on('data', data => {\n      stderr += data.toString('utf-8');\n    });\n    child.on('close', exitStatus => {\n      if (exitStatus === 0) {\n        done(undefined);\n      } else {\n        error({\n          stderr\n        });\n      }\n    });\n    child.on('error', error);\n  });\n};\n\n/**\n * For the given custom Hypervisor and the output of `emulator-check accel`\n * returns the preferred Hypervisor to use and its installation status.\n * The recommendation order is:\n * 1. WHPX\n * 2. HAXM if Intel\n * 3. AMDH if AMD\n */\nexports.installComponent = installComponent;\nconst parseHypervisor = (status, customHypervisor) => {\n  /**\n   * Messages:\n   * Android Emulator requires an Intel processor with VT-x and NX support.  Your CPU: 'AuthenticAMD'\n   * HAXM is not installed, but Windows Hypervisor Platform is available.\n   * WHPX (10.0.19041) is installed and usable.\n   * * This message outputs for WHPX and when the AMD Hypervisor is installed\n   * HAXM version 6.2.1 (4) is installed and usable.\n   * HAXM is not installed on this machine\n   */\n\n  if (status.includes('is not installed, but Windows Hypervisor Platform is available.')) {\n    return {\n      hypervisor: 'WHPX',\n      installed: false\n    };\n  }\n  if (/WHPX \\((\\d|\\.)+\\) is installed and usable\\./.test(status)) {\n    return {\n      hypervisor: 'WHPX',\n      installed: true\n    };\n  }\n  if (/is installed and usable\\./.test(status)) {\n    return {\n      hypervisor: customHypervisor,\n      installed: true\n    };\n  }\n  if (status.includes(\"Your CPU: 'AuthenticAMD'\")) {\n    return {\n      hypervisor: customHypervisor,\n      installed: false\n    };\n  }\n  if (status.includes('is not installed on this machine')) {\n    return {\n      hypervisor: 'none',\n      installed: false\n    };\n  }\n  return null;\n};\nconst getEmulatorAccelOutputInformation = async androidSDKRoot => {\n  /**\n   * The output of the following command is something like:\n   *\n   * ```\n   * accel:\n   * 0\n   * WHPX (10.0.19041) is installed and usable.\n   * accel\n   * ```\n   *\n   * If it fails it will still output to stdout with a similar format:\n   *\n   * ```\n   * accel:\n   * 1\n   * Android Emulator does not support nested virtualization.  Your VM host: 'Microsoft Hv' (Hyper-V)\n   * accel\n   * ```\n   *\n   */\n\n  try {\n    const {\n      stdout\n    } = await (0, _executeWinCommand.executeCommand)(`\"${(0, _path().join)(androidSDKRoot, 'emulator', 'emulator-check.exe')}\" accel`);\n    return stdout;\n  } catch (e) {\n    const {\n      stdout\n    } = e;\n    return stdout;\n  }\n};\n\n/**\n * Creates a new Android Virtual Device in the default folder with the\n * name, device and system image passed by parameter.\n */\nconst createAVD = async (androidSDKRoot, name, device, image) => {\n  try {\n    const abi = image.includes('x86_64') ? 'x86_64' : 'x86';\n    const tag = image.includes('google_apis') ? 'google_apis' : 'generic';\n    const avdmanager = (0, _path().join)(androidSDKRoot, 'tools', 'bin', 'avdmanager.bat');\n    const {\n      stdout\n    } = await (0, _executeWinCommand.executeCommand)(`${avdmanager} -s create avd --force --name \"${name}\" --device \"${device}\" --package \"${image}\" --tag \"${tag}\" --abi \"${abi}\"`);\n\n    // For some reason `image.sysdir.1` in `config.ini` points to the wrong location and needs to be updated\n    const configPath = (0, _path().join)(process.env.HOMEPATH || '', '.android', 'avd', `${name}.avd`, 'config.ini');\n    const content = await (0, _fsExtra().readFile)(configPath, 'utf-8');\n    const updatedContent = content.replace(/Sdk\\\\system-images/g, 'system-images');\n    await (0, _fsExtra().writeFile)(configPath, updatedContent, 'utf-8');\n    return stdout;\n  } catch (e) {\n    const {\n      stderr\n    } = e;\n    return stderr;\n  }\n};\n\n/**\n * Returns what hypervisor should be installed for the Android emulator\n * using [Microsoft's official\n * documentation](https://docs.microsoft.com/en-us/xamarin/android/get-started/installation/android-emulator/hardware-acceleration?pivots=windows)\n * as a reference.\n */\nexports.createAVD = createAVD;\nconst getBestHypervisor = async androidSDKRoot => {\n  const customHypervisor = (0, _processorType.getProcessorType)() === 'Intel' ? 'HAXM' : 'AMDH';\n  const stdout = await getEmulatorAccelOutputInformation(androidSDKRoot);\n  const lines = stdout.split('\\n');\n  for (const line of lines) {\n    const hypervisor = parseHypervisor(line, customHypervisor);\n    if (hypervisor) {\n      return hypervisor;\n    }\n  }\n\n  // Couldn't identify the best one to run so not doing anything\n  return {\n    hypervisor: 'none',\n    installed: false\n  };\n};\n\n/**\n * Enables the Windows HypervisorPlatform and Hyper-V features.\n * Will prompt the User Account Control (UAC)\n */\nexports.getBestHypervisor = getBestHypervisor;\nconst enableWHPX = () => {\n  return (0, _executeWinCommand.executeCommand)('DISM /Quiet /NoRestart /Online /Enable-Feature /All /FeatureName:Microsoft-Hyper-V /FeatureName:HypervisorPlatform', true);\n};\n\n/**\n * Installs and enables the [HAXM](https://github.com/intel/haxm)\n * version available through the Android SDK manager.\n * @param androidSdkInstallPath The path to the Android SDK installation\n */\nexports.enableWHPX = enableWHPX;\nconst enableHAXM = async androidSdkInstallPath => {\n  await installComponent('extras;intel;Hardware_Accelerated_Execution_Manager', androidSdkInstallPath);\n  await (0, _executeWinCommand.executeCommand)((0, _path().join)(androidSdkInstallPath, 'Sdk', 'extras', 'intel', 'Hardware_Accelerated_Execution_Manager', 'silent_install.bat'));\n};\n\n/**\n * Installs and enables the\n * [Hypervisor Driver for AMD Processors](https://androidstudio.googleblog.com/2019/10/android-emulator-hypervisor-driver-for.html)\n * version available through the Android SDK manager.\n * @param androidSdkInstallPath The path to the Android SDK installation\n */\nexports.enableHAXM = enableHAXM;\nconst enableAMDH = async androidSdkInstallPath => {\n  await installComponent('extras;google;Android_Emulator_Hypervisor_Driver', androidSdkInstallPath);\n  await (0, _executeWinCommand.executeCommand)((0, _path().join)(androidSdkInstallPath, 'Sdk', 'extras', 'google', 'Android_Emulator_Hypervisor_Driver', 'silent_install.bat'));\n};\nexports.enableAMDH = enableAMDH;\n\n//# sourceMappingURL=androidWinHelpers.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}