{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sortDefaultIdToBeginningAsync = sortDefaultIdToBeginningAsync;\nexports.resolveCertificateSigningIdentityAsync = resolveCertificateSigningIdentityAsync;\nexports.selectDevelopmentTeamAsync = selectDevelopmentTeamAsync;\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar Log = _interopRequireWildcard(require(\"../../../log\"));\nvar _errors = require(\"../../../utils/errors\");\nvar _interactive = require(\"../../../utils/interactive\");\nvar _link = require(\"../../../utils/link\");\nvar _prompts = require(\"../../../utils/prompts\");\nvar Security = _interopRequireWildcard(require(\"./Security\"));\nvar _settings = require(\"./settings\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction sortDefaultIdToBeginningAsync(_x) {\n  return _sortDefaultIdToBeginningAsync.apply(this, arguments);\n}\nfunction _sortDefaultIdToBeginningAsync() {\n  _sortDefaultIdToBeginningAsync = _asyncToGenerator(function* (identities) {\n    var lastSelected = yield (0, _settings).getLastDeveloperCodeSigningIdAsync();\n    if (lastSelected) {\n      var iterations = 0;\n      while (identities[0].signingCertificateId !== lastSelected && iterations < identities.length) {\n        identities.push(identities.shift());\n        iterations++;\n      }\n    }\n    return [identities, lastSelected];\n  });\n  return _sortDefaultIdToBeginningAsync.apply(this, arguments);\n}\nfunction assertCodeSigningSetup() {\n  Log.log(`\\u203A Your computer requires some additional setup before you can build onto physical iOS devices.\\n  ${_chalk.default.bold((0, _link).learnMore(\"https://expo.fyi/setup-xcode-signing\"))}`);\n  throw new _errors.CommandError(\"No code signing certificates are available to use.\");\n}\nfunction resolveCertificateSigningIdentityAsync(_x2) {\n  return _resolveCertificateSigningIdentityAsync.apply(this, arguments);\n}\nfunction _resolveCertificateSigningIdentityAsync() {\n  _resolveCertificateSigningIdentityAsync = _asyncToGenerator(function* (ids) {\n    if (!ids.length) {\n      assertCodeSigningSetup();\n    }\n    if (ids.length === 1 || !(0, _interactive).isInteractive()) {\n      return Security.resolveCertificateSigningInfoAsync(ids[0]);\n    }\n    var _yield$sortDefaultIdT = yield sortDefaultIdToBeginningAsync(yield Security.resolveIdentitiesAsync(ids)),\n      _yield$sortDefaultIdT2 = _slicedToArray(_yield$sortDefaultIdT, 2),\n      identities = _yield$sortDefaultIdT2[0],\n      preferred = _yield$sortDefaultIdT2[1];\n    var selected = yield selectDevelopmentTeamAsync(identities, preferred);\n    yield (0, _settings).setLastDeveloperCodeSigningIdAsync(selected.signingCertificateId);\n    return selected;\n  });\n  return _resolveCertificateSigningIdentityAsync.apply(this, arguments);\n}\nfunction selectDevelopmentTeamAsync(_x3, _x4) {\n  return _selectDevelopmentTeamAsync.apply(this, arguments);\n}\nfunction _selectDevelopmentTeamAsync() {\n  _selectDevelopmentTeamAsync = _asyncToGenerator(function* (identities, preferredId) {\n    var index = yield (0, _prompts).selectAsync(\"Development team for signing the app\", identities.map(function (value, i) {\n      var format = value.signingCertificateId === preferredId ? _chalk.default.bold : function (message) {\n        return message;\n      };\n      return {\n        title: format([value.appleTeamName, `(${value.appleTeamId}) -`, value.codeSigningInfo].join(\" \")),\n        value: i\n      };\n    }));\n    return identities[index];\n  });\n  return _selectDevelopmentTeamAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_slicedToArray","require","_asyncToGenerator","sortDefaultIdToBeginningAsync","resolveCertificateSigningIdentityAsync","selectDevelopmentTeamAsync","_chalk","_interopRequireDefault","Log","_interopRequireWildcard","_errors","_interactive","_link","_prompts","Security","_settings","_x","_sortDefaultIdToBeginningAsync","apply","arguments","identities","lastSelected","getLastDeveloperCodeSigningIdAsync","iterations","signingCertificateId","length","push","shift","assertCodeSigningSetup","log","default","bold","learnMore","CommandError","_x2","_resolveCertificateSigningIdentityAsync","ids","isInteractive","resolveCertificateSigningInfoAsync","_yield$sortDefaultIdT","resolveIdentitiesAsync","_yield$sortDefaultIdT2","preferred","selected","setLastDeveloperCodeSigningIdAsync","_x3","_x4","_selectDevelopmentTeamAsync","preferredId","index","selectAsync","map","value","i","format","message","title","appleTeamName","appleTeamId","codeSigningInfo","join"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\run\\ios\\codeSigning\\resolveCertificateSigningIdentity.ts"],"sourcesContent":["import chalk from 'chalk';\n\nimport * as Log from '../../../log';\nimport { CommandError } from '../../../utils/errors';\nimport { isInteractive } from '../../../utils/interactive';\nimport { learnMore } from '../../../utils/link';\nimport { selectAsync } from '../../../utils/prompts';\nimport * as Security from './Security';\nimport { getLastDeveloperCodeSigningIdAsync, setLastDeveloperCodeSigningIdAsync } from './settings';\n\n/**\n * Sort the code signing items so the last selected item (user's default) is the first suggested.\n */\nexport async function sortDefaultIdToBeginningAsync(\n  identities: Security.CertificateSigningInfo[]\n): Promise<[Security.CertificateSigningInfo[], string | null]> {\n  const lastSelected = await getLastDeveloperCodeSigningIdAsync();\n\n  if (lastSelected) {\n    let iterations = 0;\n    while (identities[0].signingCertificateId !== lastSelected && iterations < identities.length) {\n      identities.push(identities.shift()!);\n      iterations++;\n    }\n  }\n  return [identities, lastSelected];\n}\n\n/**\n * Assert that the computer needs code signing setup.\n * This links to an FYI page that was user tested internally.\n */\nfunction assertCodeSigningSetup(): never {\n  // TODO: We can probably do this too automatically.\n  Log.log(\n    `\\u203A Your computer requires some additional setup before you can build onto physical iOS devices.\\n  ${chalk.bold(\n      learnMore('https://expo.fyi/setup-xcode-signing')\n    )}`\n  );\n\n  throw new CommandError('No code signing certificates are available to use.');\n}\n\n/**\n * Resolve the best certificate signing identity from a given list of IDs.\n * - If no IDs: Assert that the user has to setup code signing.\n * - If one ID: Return the first ID.\n * - If multiple IDs: Ask the user to select one, then store the value to be suggested first next time (since users generally use the same ID).\n */\nexport async function resolveCertificateSigningIdentityAsync(\n  ids: string[]\n): Promise<Security.CertificateSigningInfo> {\n  // The user has no valid code signing identities.\n  if (!ids.length) {\n    assertCodeSigningSetup();\n  }\n\n  //  One ID available ü§ù Program is not interactive\n  //\n  //     using the the first available option\n  if (ids.length === 1 || !isInteractive()) {\n    // This method is cheaper than `resolveIdentitiesAsync` and checking the\n    // cached user preference so we should use this as early as possible.\n    return Security.resolveCertificateSigningInfoAsync(ids[0]);\n  }\n\n  // Get identities and sort by the one that the user is most likely to choose.\n  const [identities, preferred] = await sortDefaultIdToBeginningAsync(\n    await Security.resolveIdentitiesAsync(ids)\n  );\n\n  const selected = await selectDevelopmentTeamAsync(identities, preferred);\n\n  // Store the last used value and suggest it as the first value\n  // next time the user has to select a code signing identity.\n  await setLastDeveloperCodeSigningIdAsync(selected.signingCertificateId);\n\n  return selected;\n}\n\n/** Prompt the user to select a development team, highlighting the preferred value based on the user history. */\nexport async function selectDevelopmentTeamAsync(\n  identities: Security.CertificateSigningInfo[],\n  preferredId: string | null\n): Promise<Security.CertificateSigningInfo> {\n  const index = await selectAsync(\n    'Development team for signing the app',\n    identities.map((value, i) => {\n      const format =\n        value.signingCertificateId === preferredId ? chalk.bold : (message: string) => message;\n      return {\n        // Formatted like: `650 Industries, Inc. (A1BCDEF234) - Apple Development: Evan Bacon (AA00AABB0A)`\n        title: format(\n          [value.appleTeamName, `(${value.appleTeamId}) -`, value.codeSigningInfo].join(' ')\n        ),\n        value: i,\n      };\n    })\n  );\n\n  return identities[index];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}