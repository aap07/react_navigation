{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createGeneratedHeaderComment = createGeneratedHeaderComment;\nexports.createHash = createHash;\nexports.mergeContents = mergeContents;\nexports.removeContents = removeContents;\nexports.removeGeneratedContents = removeGeneratedContents;\nfunction _crypto() {\n  var data = _interopRequireDefault(require(\"crypto\"));\n  _crypto = function _crypto() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getGeneratedSectionIndexes(src, tag) {\n  var contents = src.split('\\n');\n  var start = contents.findIndex(function (line) {\n    return line.includes(`@generated begin ${tag}`);\n  });\n  var end = contents.findIndex(function (line) {\n    return line.includes(`@generated end ${tag}`);\n  });\n  return {\n    contents: contents,\n    start: start,\n    end: end\n  };\n}\nfunction mergeContents(_ref) {\n  var src = _ref.src,\n    newSrc = _ref.newSrc,\n    tag = _ref.tag,\n    anchor = _ref.anchor,\n    offset = _ref.offset,\n    comment = _ref.comment;\n  var header = createGeneratedHeaderComment(newSrc, tag, comment);\n  if (!src.includes(header)) {\n    var sanitizedTarget = removeGeneratedContents(src, tag);\n    return {\n      contents: addLines(sanitizedTarget !== null && sanitizedTarget !== void 0 ? sanitizedTarget : src, anchor, offset, [header].concat(_toConsumableArray(newSrc.split('\\n')), [`${comment} @generated end ${tag}`])),\n      didMerge: true,\n      didClear: !!sanitizedTarget\n    };\n  }\n  return {\n    contents: src,\n    didClear: false,\n    didMerge: false\n  };\n}\nfunction removeContents(_ref2) {\n  var src = _ref2.src,\n    tag = _ref2.tag;\n  var sanitizedTarget = removeGeneratedContents(src, tag);\n  return {\n    contents: sanitizedTarget !== null && sanitizedTarget !== void 0 ? sanitizedTarget : src,\n    didMerge: false,\n    didClear: !!sanitizedTarget\n  };\n}\nfunction addLines(content, find, offset, toAdd) {\n  var lines = content.split('\\n');\n  var lineIndex = lines.findIndex(function (line) {\n    return line.match(find);\n  });\n  if (lineIndex < 0) {\n    var error = new Error(`Failed to match \"${find}\" in contents:\\n${content}`);\n    error.code = 'ERR_NO_MATCH';\n    throw error;\n  }\n  for (var newLine of toAdd) {\n    lines.splice(lineIndex + offset, 0, newLine);\n    lineIndex++;\n  }\n  return lines.join('\\n');\n}\nfunction removeGeneratedContents(src, tag) {\n  var _getGeneratedSectionI = getGeneratedSectionIndexes(src, tag),\n    contents = _getGeneratedSectionI.contents,\n    start = _getGeneratedSectionI.start,\n    end = _getGeneratedSectionI.end;\n  if (start > -1 && end > -1 && start < end) {\n    contents.splice(start, end - start + 1);\n    return contents.join('\\n');\n  }\n  return null;\n}\nfunction createGeneratedHeaderComment(contents, tag, comment) {\n  var hashKey = createHash(contents);\n  return `${comment} @generated begin ${tag} - expo prebuild (DO NOT MODIFY) ${hashKey}`;\n}\nfunction createHash(src) {\n  var hash = _crypto().default.createHash('sha1').update(src).digest('hex');\n  return `sync-${hash}`;\n}","map":{"version":3,"names":["_crypto","data","_interopRequireDefault","require","obj","__esModule","default","getGeneratedSectionIndexes","src","tag","contents","split","start","findIndex","line","includes","end","mergeContents","_ref","newSrc","anchor","offset","comment","header","createGeneratedHeaderComment","sanitizedTarget","removeGeneratedContents","addLines","concat","_toConsumableArray","didMerge","didClear","removeContents","_ref2","content","find","toAdd","lines","lineIndex","match","error","Error","code","newLine","splice","join","_getGeneratedSectionI","hashKey","createHash","hash","update","digest"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\utils\\generateCode.ts"],"sourcesContent":["/**\n * Get line indexes for the generated section of a file.\n *\n * @param src\n */\nimport crypto from 'crypto';\n\nfunction getGeneratedSectionIndexes(\n  src: string,\n  tag: string\n): { contents: string[]; start: number; end: number } {\n  const contents = src.split('\\n');\n  const start = contents.findIndex((line) => line.includes(`@generated begin ${tag}`));\n  const end = contents.findIndex((line) => line.includes(`@generated end ${tag}`));\n\n  return { contents, start, end };\n}\n\nexport type MergeResults = {\n  contents: string;\n  didClear: boolean;\n  didMerge: boolean;\n};\n\n/**\n * Merge the contents of two files together and add a generated header.\n *\n * @param src contents of the original file\n * @param newSrc new contents to merge into the original file\n * @param identifier used to update and remove merges\n * @param anchor regex to where the merge should begin\n * @param offset line offset to start merging at (<1 for behind the anchor)\n * @param comment comment style `//` or `#`\n */\nexport function mergeContents({\n  src,\n  newSrc,\n  tag,\n  anchor,\n  offset,\n  comment,\n}: {\n  src: string;\n  newSrc: string;\n  tag: string;\n  anchor: string | RegExp;\n  offset: number;\n  comment: string;\n}): MergeResults {\n  const header = createGeneratedHeaderComment(newSrc, tag, comment);\n  if (!src.includes(header)) {\n    // Ensure the old generated contents are removed.\n    const sanitizedTarget = removeGeneratedContents(src, tag);\n    return {\n      contents: addLines(sanitizedTarget ?? src, anchor, offset, [\n        header,\n        ...newSrc.split('\\n'),\n        `${comment} @generated end ${tag}`,\n      ]),\n      didMerge: true,\n      didClear: !!sanitizedTarget,\n    };\n  }\n  return { contents: src, didClear: false, didMerge: false };\n}\n\nexport function removeContents({ src, tag }: { src: string; tag: string }): MergeResults {\n  // Ensure the old generated contents are removed.\n  const sanitizedTarget = removeGeneratedContents(src, tag);\n  return {\n    contents: sanitizedTarget ?? src,\n    didMerge: false,\n    didClear: !!sanitizedTarget,\n  };\n}\n\nfunction addLines(content: string, find: string | RegExp, offset: number, toAdd: string[]) {\n  const lines = content.split('\\n');\n\n  let lineIndex = lines.findIndex((line) => line.match(find));\n  if (lineIndex < 0) {\n    const error = new Error(`Failed to match \"${find}\" in contents:\\n${content}`);\n    // @ts-ignore\n    error.code = 'ERR_NO_MATCH';\n    throw error;\n  }\n  for (const newLine of toAdd) {\n    lines.splice(lineIndex + offset, 0, newLine);\n    lineIndex++;\n  }\n\n  return lines.join('\\n');\n}\n\n/**\n * Removes the generated section from a file, returns null when nothing can be removed.\n * This sways heavily towards not removing lines unless it's certain that modifications were not made manually.\n *\n * @param src\n */\nexport function removeGeneratedContents(src: string, tag: string): string | null {\n  const { contents, start, end } = getGeneratedSectionIndexes(src, tag);\n  if (start > -1 && end > -1 && start < end) {\n    contents.splice(start, end - start + 1);\n    // TODO: We could in theory check that the contents we're removing match the hash used in the header,\n    // this would ensure that we don't accidentally remove lines that someone added or removed from the generated section.\n    return contents.join('\\n');\n  }\n  return null;\n}\n\nexport function createGeneratedHeaderComment(\n  contents: string,\n  tag: string,\n  comment: string\n): string {\n  const hashKey = createHash(contents);\n\n  // Everything after the `${tag} ` is unversioned and can be freely modified without breaking changes.\n  return `${comment} @generated begin ${tag} - expo prebuild (DO NOT MODIFY) ${hashKey}`;\n}\n\nexport function createHash(src: string): string {\n  // this doesn't need to be secure, the shorter the better.\n  const hash = crypto.createHash('sha1').update(src).digest('hex');\n  return `sync-${hash}`;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}