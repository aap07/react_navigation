{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMultiRuleTransformer = createMultiRuleTransformer;\nexports.loaders = void 0;\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function _chalk() {\n    return data;\n  };\n  return data;\n}\nfunction _debug() {\n  var data = _interopRequireDefault(require(\"debug\"));\n  _debug = function _debug() {\n    return data;\n  };\n  return data;\n}\nfunction _resolveFrom() {\n  var data = _interopRequireDefault(require(\"resolve-from\"));\n  _resolveFrom = function _resolveFrom() {\n    return data;\n  };\n  return data;\n}\nfunction _generateFunctionMap() {\n  var data = require(\"./generateFunctionMap\");\n  _generateFunctionMap = function _generateFunctionMap() {\n    return data;\n  };\n  return data;\n}\nfunction _getBabelConfig() {\n  var data = require(\"./getBabelConfig\");\n  _getBabelConfig = function _getBabelConfig() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = (0, _debug().default)('expo:metro:exotic-babel-transformer');\nvar babelCore;\nfunction getBabelCoreFromProject(projectRoot) {\n  if (babelCore) return babelCore;\n  babelCore = require((0, _resolveFrom().default)(projectRoot, '@babel/core'));\n  return babelCore;\n}\nvar babelParser;\nfunction getBabelParserFromProject(projectRoot) {\n  if (babelParser) return babelParser;\n  babelParser = require((0, _resolveFrom().default)(projectRoot, '@babel/parser'));\n  return babelParser;\n}\nfunction sucrase(args, _ref) {\n  var transforms = _ref.transforms;\n  var src = args.src,\n    filename = args.filename,\n    dev = args.options.dev;\n  var _require = require('sucrase'),\n    transform = _require.transform;\n  var results = transform(src, {\n    filePath: filename,\n    production: !dev,\n    transforms: transforms\n  });\n  return {\n    code: results.code,\n    functionMap: null\n  };\n}\nvar getExpensiveSucraseTransforms = function getExpensiveSucraseTransforms(filename) {\n  return ['jsx', 'imports', /\\.tsx?$/.test(filename) ? 'typescript' : 'flow'];\n};\nfunction parseAst(projectRoot, sourceCode) {\n  var babylon = getBabelParserFromProject(projectRoot);\n  return babylon.parse(sourceCode, {\n    sourceType: 'unambiguous'\n  });\n}\nfunction createMultiRuleTransformer(_ref2) {\n  var getRuleType = _ref2.getRuleType,\n    rules = _ref2.rules;\n  return function transform(args) {\n    var filename = args.filename,\n      options = args.options;\n    var OLD_BABEL_ENV = process.env.BABEL_ENV;\n    process.env.BABEL_ENV = options !== null && options !== void 0 && options.dev ? 'development' : process.env.BABEL_ENV || 'production';\n    try {\n      var ruleType = getRuleType(args);\n      for (var rule of rules) {\n        if (rule.type && rule.type !== ruleType) {\n          continue;\n        }\n        var isMatched = typeof rule.test === 'function' ? rule.test(args) : rule.test.test(args.filename);\n        if (isMatched) {\n          var results = rule.transform(args);\n          results._ruleName = rule.name;\n          if (results.code && !results.ast) {\n            results.ast = parseAst(options === null || options === void 0 ? void 0 : options.projectRoot, results.code);\n          }\n          return results;\n        }\n      }\n      throw new Error('no loader rule to handle file: ' + filename);\n    } finally {\n      if (OLD_BABEL_ENV) {\n        process.env.BABEL_ENV = OLD_BABEL_ENV;\n      }\n    }\n  };\n}\nfunction app(args) {\n  debug('app:', args.filename);\n  var filename = args.filename,\n    options = args.options,\n    src = args.src,\n    plugins = args.plugins;\n  var babelConfig = _objectSpread(_objectSpread({\n    sourceType: 'unambiguous'\n  }, (0, _getBabelConfig().getBabelConfig)(filename, options, plugins)), {}, {\n    caller: {\n      name: 'metro',\n      platform: options.platform\n    },\n    ast: true\n  });\n  Object.defineProperty(babelConfig.caller, 'onWarning', {\n    enumerable: false,\n    writable: false,\n    value: babelConfig.caller.onWarning = function (msg) {\n      console.warn(_chalk().default.bold.yellow`warn ` + args.filename);\n      console.warn(msg);\n    }\n  });\n  var _getBabelCoreFromProj = getBabelCoreFromProject(options.projectRoot),\n    parseSync = _getBabelCoreFromProj.parseSync,\n    transformFromAstSync = _getBabelCoreFromProj.transformFromAstSync;\n  var sourceAst = parseSync(src, babelConfig);\n  if (!sourceAst) return {\n    ast: null\n  };\n  var result = transformFromAstSync(sourceAst, src, babelConfig);\n  var functionMap = (0, _generateFunctionMap().generateFunctionMap)(sourceAst, {\n    filename: filename\n  });\n  if (!result) {\n    return {\n      ast: null,\n      functionMap: functionMap\n    };\n  }\n  return {\n    ast: result.ast,\n    functionMap: functionMap\n  };\n}\nvar loaders = {\n  app: app,\n  reactNativeModule: function reactNativeModule(args) {\n    if (args.filename.includes('react-native/Libraries/Events/EventPolyfill.js')) {\n      return app(args);\n    }\n    debug('rn:', args.filename);\n    return sucrase(args, {\n      transforms: ['jsx', 'flow', 'imports']\n    });\n  },\n  expoModule: function expoModule(args) {\n    debug('expo:', args.filename);\n    return sucrase(args, {\n      transforms: ['imports', /(expo-processing|expo\\/vector-icons)/.test(args.filename) && 'jsx', /(expo-asset-utils)/.test(args.filename) && 'flow'].filter(Boolean)\n    });\n  },\n  untranspiledModule: function untranspiledModule(args) {\n    debug('known issues:', args.filename);\n    return sucrase(args, {\n      transforms: getExpensiveSucraseTransforms(args.filename)\n    });\n  },\n  passthroughModule: function passthroughModule(args) {\n    var filename = args.filename,\n      options = args.options,\n      src = args.src;\n    debug('passthrough:', filename);\n    var ast = parseAst(options.projectRoot, src);\n    var functionMap = (0, _generateFunctionMap().generateFunctionMap)(ast, {\n      filename: filename\n    });\n    return {\n      code: src,\n      functionMap: functionMap,\n      ast: ast\n    };\n  }\n};\nexports.loaders = loaders;","map":{"version":3,"names":["_chalk","data","_interopRequireDefault","require","_debug","_resolveFrom","_generateFunctionMap","_getBabelConfig","obj","__esModule","default","debug","babelCore","getBabelCoreFromProject","projectRoot","babelParser","getBabelParserFromProject","sucrase","args","_ref","transforms","src","filename","dev","options","_require","transform","results","filePath","production","code","functionMap","getExpensiveSucraseTransforms","test","parseAst","sourceCode","babylon","parse","sourceType","createMultiRuleTransformer","_ref2","getRuleType","rules","OLD_BABEL_ENV","process","env","BABEL_ENV","ruleType","rule","type","isMatched","_ruleName","name","ast","Error","app","plugins","babelConfig","_objectSpread","getBabelConfig","caller","platform","Object","defineProperty","enumerable","writable","value","onWarning","msg","console","warn","bold","yellow","_getBabelCoreFromProj","parseSync","transformFromAstSync","sourceAst","result","generateFunctionMap","loaders","reactNativeModule","includes","expoModule","filter","Boolean","untranspiledModule","passthroughModule","exports"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\metro-config\\src\\transformer\\createMultiRuleTransformer.ts"],"sourcesContent":["// Copyright 2021-present 650 Industries (Expo). All rights reserved.\n\nimport chalk from 'chalk';\nimport Debug from 'debug';\nimport type { BabelTransformer, BabelTransformerArgs } from 'metro-babel-transformer';\nimport resolveFrom from 'resolve-from';\n\nimport { generateFunctionMap } from './generateFunctionMap';\nimport { getBabelConfig } from './getBabelConfig';\n\nconst debug = Debug('expo:metro:exotic-babel-transformer');\n\nlet babelCore: typeof import('@babel/core') | undefined;\n\nfunction getBabelCoreFromProject(projectRoot: string) {\n  if (babelCore) return babelCore;\n  babelCore = require(resolveFrom(projectRoot, '@babel/core'));\n  return babelCore!;\n}\n\nlet babelParser: typeof import('@babel/parser') | undefined;\n\nfunction getBabelParserFromProject(projectRoot: string) {\n  if (babelParser) return babelParser;\n  babelParser = require(resolveFrom(projectRoot, '@babel/parser'));\n  return babelParser!;\n}\n\nfunction sucrase(\n  args: BabelTransformerArgs,\n  {\n    transforms,\n  }: {\n    transforms: string[];\n  }\n): Partial<ReturnType<BabelTransformer['transform']>> {\n  const {\n    src,\n    filename,\n    options: { dev },\n  } = args;\n  const { transform } = require('sucrase');\n\n  const results = transform(src, {\n    filePath: filename,\n    production: !dev,\n    transforms,\n  });\n\n  return {\n    code: results.code,\n    functionMap: null,\n  };\n}\n\nconst getExpensiveSucraseTransforms = (filename: string) => [\n  'jsx',\n  'imports',\n  /\\.tsx?$/.test(filename) ? 'typescript' : 'flow',\n];\n\nfunction parseAst(projectRoot: string, sourceCode: string) {\n  const babylon = getBabelParserFromProject(projectRoot);\n\n  return babylon.parse(sourceCode, {\n    sourceType: 'unambiguous',\n  });\n}\n\nexport type Rule = {\n  warn?: boolean;\n  type?: 'module' | 'app';\n  name?: string;\n  test: ((args: BabelTransformerArgs) => boolean) | RegExp;\n  transform: BabelTransformer['transform'];\n};\n\n/** Create a transformer that emulates Webpack's loader system. */\nexport function createMultiRuleTransformer({\n  getRuleType,\n  rules,\n}: {\n  getRuleType: (args: BabelTransformerArgs) => string;\n  rules: Rule[];\n}): BabelTransformer['transform'] {\n  // const warnings: string[] = [];\n  return function transform(args: BabelTransformerArgs) {\n    const { filename, options } = args;\n    const OLD_BABEL_ENV = process.env.BABEL_ENV;\n    process.env.BABEL_ENV = options?.dev ? 'development' : process.env.BABEL_ENV || 'production';\n\n    try {\n      const ruleType = getRuleType(args);\n\n      for (const rule of rules) {\n        // optimization for checking node modules\n        if (rule.type && rule.type !== ruleType) {\n          continue;\n        }\n\n        const isMatched =\n          typeof rule.test === 'function' ? rule.test(args) : rule.test.test(args.filename);\n        if (isMatched) {\n          const results = rule.transform(args);\n          // @ts-ignore: Add extra property for testing\n          results._ruleName = rule.name;\n          // Perform a basic parse if none exists, this enables us to control the output, but only if it changed.\n          if (results.code && !results.ast) {\n            // Parse AST with babel otherwise Metro transformer will throw away the returned results.\n            results.ast = parseAst(options?.projectRoot, results.code);\n          }\n\n          // TODO: Suboptimal warnings\n          // if (rule.warn) {\n          //   const matchName =\n          //     filename.match(/node_modules\\/((:?@[\\w\\d-]+\\/[\\w\\d-]+)|(:?[\\w\\d-]+))\\/?/)?.[1] ??\n          //     filename;\n          //   if (matchName && !warnings.includes(matchName)) {\n          //     warnings.push(matchName);\n          //     console.warn(chalk.yellow.bold`warn `, matchName);\n          //     console.warn(\n          //       chalk.yellow`untranspiled module is potentially causing bundler slowdown, using modules that support commonjs will make your dev server much faster.`\n          //     );\n          //   }\n          // }\n\n          return results;\n        }\n      }\n      throw new Error('no loader rule to handle file: ' + filename);\n    } finally {\n      if (OLD_BABEL_ENV) {\n        process.env.BABEL_ENV = OLD_BABEL_ENV;\n      }\n    }\n  };\n}\n\nfunction app(args: BabelTransformerArgs) {\n  debug('app:', args.filename);\n\n  const { filename, options, src, plugins } = args;\n  const babelConfig = {\n    // ES modules require sourceType='module' but OSS may not always want that\n    sourceType: 'unambiguous',\n    ...getBabelConfig(filename, options, plugins),\n    // Variables that are exposed to the user's babel preset.\n    caller: {\n      name: 'metro',\n\n      platform: options.platform,\n    },\n    ast: true,\n  };\n\n  // Surface a warning function so babel linters can be used.\n  Object.defineProperty(babelConfig.caller, 'onWarning', {\n    enumerable: false,\n    writable: false,\n    value: (babelConfig.caller.onWarning = function (msg: any) {\n      // Format the file path first so users know where the warning came from.\n      console.warn(chalk.bold.yellow`warn ` + args.filename);\n      console.warn(msg);\n    }),\n  });\n\n  const { parseSync, transformFromAstSync } = getBabelCoreFromProject(options.projectRoot);\n  const sourceAst = parseSync(src, babelConfig);\n\n  // Should never happen.\n  if (!sourceAst) return { ast: null };\n\n  const result = transformFromAstSync(sourceAst, src, babelConfig);\n\n  // TODO: Disable by default\n  const functionMap = generateFunctionMap(sourceAst, { filename });\n  // The result from `transformFromAstSync` can be null (if the file is ignored)\n  if (!result) {\n    return { ast: null, functionMap };\n  }\n\n  return { ast: result.ast, functionMap };\n}\n\nexport const loaders: Record<string, (args: BabelTransformerArgs) => any> = {\n  // Perform the standard, and most expensive transpilation sequence.\n  app,\n\n  // Transpile react-native with sucrase.\n  reactNativeModule(args) {\n    // Special file needs full transpilation.\n    if (args.filename.includes('react-native/Libraries/Events/EventPolyfill.js')) {\n      // Match React Native modules which use non-standard flow features, convert them using babel (most expensive).\n      return app(args);\n    }\n\n    debug('rn:', args.filename);\n    return sucrase(args, {\n      transforms: ['jsx', 'flow', 'imports'],\n    });\n  },\n\n  // Transpile expo modules with sucrase.\n  expoModule(args) {\n    debug('expo:', args.filename);\n    // TODO: Fix all expo packages\n    return sucrase(args, {\n      transforms: [\n        'imports',\n        // TODO: fix expo-processing, expo/vector-icons\n        /(expo-processing|expo\\/vector-icons)/.test(args.filename) && 'jsx',\n        // TODO: fix expo-asset-utils\n        /(expo-asset-utils)/.test(args.filename) && 'flow',\n      ].filter(Boolean) as string[],\n    });\n  },\n\n  // Transpile known community modules with the most expensive sucrase\n  untranspiledModule(args) {\n    debug('known issues:', args.filename);\n    return sucrase(args, {\n      transforms: getExpensiveSucraseTransforms(args.filename),\n    });\n  },\n\n  // Pass all modules through without transpiling them.\n  passthroughModule(args) {\n    const { filename, options, src } = args;\n    debug('passthrough:', filename);\n\n    // Perform a basic ast parse, this doesn't matter since the worker will parse and ignore anyways.\n    const ast = parseAst(options.projectRoot, src);\n\n    // TODO: Disable by default\n    const functionMap = generateFunctionMap(ast, { filename });\n\n    return {\n      code: src,\n      functionMap,\n      ast,\n    };\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}