{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _assert = _interopRequireDefault(require(\"assert\"));\nvar _url = require(\"url\");\nvar Log = _interopRequireWildcard(require(\"../../log\"));\nvar _ip = require(\"../../utils/ip\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar debug = require(\"debug\")(\"expo:start:server:urlCreator\");\nvar UrlCreator = function () {\n  function UrlCreator(defaults, bundlerInfo) {\n    _classCallCheck(this, UrlCreator);\n    this.defaults = defaults;\n    this.bundlerInfo = bundlerInfo;\n  }\n  _createClass(UrlCreator, [{\n    key: \"constructLoadingUrl\",\n    value: function constructLoadingUrl(options, platform) {\n      var url = new _url.URL(\"_expo/loading\", this.constructUrl(_objectSpread({\n        scheme: \"http\"\n      }, options)));\n      if (platform) {\n        url.search = new URLSearchParams({\n          platform: platform\n        }).toString();\n      }\n      var loadingUrl = url.toString();\n      debug(`Loading URL: ${loadingUrl}`);\n      return loadingUrl;\n    }\n  }, {\n    key: \"constructDevClientUrl\",\n    value: function constructDevClientUrl(options) {\n      var ref;\n      var protocol = (options == null ? void 0 : options.scheme) || ((ref = this.defaults) == null ? void 0 : ref.scheme);\n      if (!protocol || [\"http\", \"https\"].includes(protocol.toLowerCase())) {\n        return null;\n      }\n      var manifestUrl = this.constructUrl(_objectSpread(_objectSpread({}, options), {}, {\n        scheme: \"http\"\n      }));\n      var devClientUrl = `${protocol}://expo-development-client/?url=${encodeURIComponent(manifestUrl)}`;\n      debug(`Dev client URL: ${devClientUrl} -- manifestUrl: ${manifestUrl} -- %O`, options);\n      return devClientUrl;\n    }\n  }, {\n    key: \"constructUrl\",\n    value: function constructUrl(options) {\n      var urlComponents = this.getUrlComponents(_objectSpread(_objectSpread({}, this.defaults), options));\n      var url = joinUrlComponents(urlComponents);\n      debug(`URL: ${url}`);\n      return url;\n    }\n  }, {\n    key: \"getTunnelUrlComponents\",\n    value: function getTunnelUrlComponents(options) {\n      var _bundlerInfo, ref;\n      var tunnelUrl = (ref = (_bundlerInfo = this.bundlerInfo).getTunnelUrl) == null ? void 0 : ref.call(_bundlerInfo);\n      if (!tunnelUrl) {\n        return null;\n      }\n      var parsed = new _url.URL(tunnelUrl);\n      var _scheme;\n      return {\n        port: parsed.port,\n        hostname: parsed.hostname,\n        protocol: (_scheme = options.scheme) != null ? _scheme : \"http\"\n      };\n    }\n  }, {\n    key: \"getUrlComponents\",\n    value: function getUrlComponents(options) {\n      var proxyURL = getProxyUrl();\n      if (proxyURL) {\n        return getUrlComponentsFromProxyUrl(options, proxyURL);\n      }\n      if (options.hostType === \"tunnel\") {\n        var components = this.getTunnelUrlComponents(options);\n        if (components) {\n          return components;\n        }\n        Log.warn(\"Tunnel URL not found (it might not be ready yet), falling back to LAN URL.\");\n      } else if (options.hostType === \"localhost\" && !options.hostname) {\n        options.hostname = \"localhost\";\n      }\n      var _scheme;\n      return {\n        hostname: getDefaultHostname(options),\n        port: this.bundlerInfo.port.toString(),\n        protocol: (_scheme = options.scheme) != null ? _scheme : \"http\"\n      };\n    }\n  }]);\n  return UrlCreator;\n}();\nexports.UrlCreator = UrlCreator;\nfunction getUrlComponentsFromProxyUrl(options, url) {\n  var parsedProxyUrl = new _url.URL(url);\n  var _scheme;\n  var protocol = (_scheme = options.scheme) != null ? _scheme : \"http\";\n  if (parsedProxyUrl.protocol === \"https:\") {\n    if (protocol === \"http\") {\n      protocol = \"https\";\n    }\n    if (!parsedProxyUrl.port) {\n      parsedProxyUrl.port = \"443\";\n    }\n  }\n  return {\n    port: parsedProxyUrl.port,\n    hostname: parsedProxyUrl.hostname,\n    protocol: protocol\n  };\n}\nfunction getDefaultHostname(options) {\n  if (process.env.REACT_NATIVE_PACKAGER_HOSTNAME) {\n    return process.env.REACT_NATIVE_PACKAGER_HOSTNAME.trim();\n  } else if (options.hostname === \"localhost\") {\n    return \"127.0.0.1\";\n  }\n  return options.hostname || (0, _ip).getIpAddress();\n}\nfunction joinUrlComponents(_ref) {\n  var protocol = _ref.protocol,\n    hostname = _ref.hostname,\n    port = _ref.port;\n  (0, _assert).default(hostname, \"hostname cannot be inferred.\");\n  var validProtocol = protocol ? `${protocol}://` : \"\";\n  var url = `${validProtocol}${hostname}`;\n  if (port) {\n    return url + `:${port}`;\n  }\n  return url;\n}\nfunction getProxyUrl() {\n  return process.env.EXPO_PACKAGER_PROXY_URL;\n}","map":{"version":3,"names":["_defineProperty","require","_classCallCheck","_createClass","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","_assert","_interopRequireDefault","_url","Log","_interopRequireWildcard","_ip","debug","UrlCreator","defaults","bundlerInfo","key","value","constructLoadingUrl","options","platform","url","URL","constructUrl","scheme","search","URLSearchParams","toString","loadingUrl","constructDevClientUrl","ref","protocol","includes","toLowerCase","manifestUrl","devClientUrl","encodeURIComponent","urlComponents","getUrlComponents","joinUrlComponents","getTunnelUrlComponents","_bundlerInfo","tunnelUrl","getTunnelUrl","call","parsed","_scheme","port","hostname","proxyURL","getProxyUrl","getUrlComponentsFromProxyUrl","hostType","components","warn","getDefaultHostname","parsedProxyUrl","process","env","REACT_NATIVE_PACKAGER_HOSTNAME","trim","getIpAddress","_ref","default","validProtocol","EXPO_PACKAGER_PROXY_URL"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\UrlCreator.ts"],"sourcesContent":["import assert from 'assert';\nimport { URL } from 'url';\n\nimport * as Log from '../../log';\nimport { getIpAddress } from '../../utils/ip';\n\nconst debug = require('debug')('expo:start:server:urlCreator') as typeof console.log;\n\nexport interface CreateURLOptions {\n  /** URL scheme to use when opening apps in custom runtimes. */\n  scheme?: string | null;\n  /** Type of dev server host to use. */\n  hostType?: 'localhost' | 'lan' | 'tunnel';\n  /** Requested hostname. */\n  hostname?: string | null;\n}\n\ninterface UrlComponents {\n  port: string;\n  hostname: string;\n  protocol: string;\n}\nexport class UrlCreator {\n  constructor(\n    public defaults: CreateURLOptions | undefined,\n    private bundlerInfo: { port: number; getTunnelUrl?: () => string | null }\n  ) {}\n\n  /**\n   * Return a URL for the \"loading\" interstitial page that is used to disambiguate which\n   * native runtime to open the dev server with.\n   *\n   * @param options options for creating the URL\n   * @param platform when opening the URL from the CLI to a connected device we can specify the platform as a query parameter, otherwise it will be inferred from the unsafe user agent sniffing.\n   *\n   * @returns URL like `http://localhost:8081/_expo/loading?platform=ios`\n   * @returns URL like `http://localhost:8081/_expo/loading` when no platform is provided.\n   */\n  public constructLoadingUrl(options: CreateURLOptions, platform: string | null): string {\n    const url = new URL('_expo/loading', this.constructUrl({ scheme: 'http', ...options }));\n    if (platform) {\n      url.search = new URLSearchParams({ platform }).toString();\n    }\n    const loadingUrl = url.toString();\n    debug(`Loading URL: ${loadingUrl}`);\n    return loadingUrl;\n  }\n\n  /** Create a URI for launching in a native dev client. Returns `null` when no `scheme` can be resolved. */\n  public constructDevClientUrl(options?: CreateURLOptions): null | string {\n    const protocol = options?.scheme || this.defaults?.scheme;\n\n    if (\n      !protocol ||\n      // Prohibit the use of http(s) in dev client URIs since they'll never be valid.\n      ['http', 'https'].includes(protocol.toLowerCase())\n    ) {\n      return null;\n    }\n\n    const manifestUrl = this.constructUrl({ ...options, scheme: 'http' });\n    const devClientUrl = `${protocol}://expo-development-client/?url=${encodeURIComponent(\n      manifestUrl\n    )}`;\n    debug(`Dev client URL: ${devClientUrl} -- manifestUrl: ${manifestUrl} -- %O`, options);\n    return devClientUrl;\n  }\n\n  /** Create a generic URL. */\n  public constructUrl(options?: Partial<CreateURLOptions> | null): string {\n    const urlComponents = this.getUrlComponents({\n      ...this.defaults,\n      ...options,\n    });\n    const url = joinUrlComponents(urlComponents);\n    debug(`URL: ${url}`);\n    return url;\n  }\n\n  /** Get the URL components from the Ngrok server URL. */\n  private getTunnelUrlComponents(options: Pick<CreateURLOptions, 'scheme'>): UrlComponents | null {\n    const tunnelUrl = this.bundlerInfo.getTunnelUrl?.();\n    if (!tunnelUrl) {\n      return null;\n    }\n    const parsed = new URL(tunnelUrl);\n    return {\n      port: parsed.port,\n      hostname: parsed.hostname,\n      protocol: options.scheme ?? 'http',\n    };\n  }\n\n  private getUrlComponents(options: CreateURLOptions): UrlComponents {\n    // Proxy comes first.\n    const proxyURL = getProxyUrl();\n    if (proxyURL) {\n      return getUrlComponentsFromProxyUrl(options, proxyURL);\n    }\n\n    // Ngrok.\n    if (options.hostType === 'tunnel') {\n      const components = this.getTunnelUrlComponents(options);\n      if (components) {\n        return components;\n      }\n      Log.warn('Tunnel URL not found (it might not be ready yet), falling back to LAN URL.');\n    } else if (options.hostType === 'localhost' && !options.hostname) {\n      options.hostname = 'localhost';\n    }\n\n    return {\n      hostname: getDefaultHostname(options),\n      port: this.bundlerInfo.port.toString(),\n      protocol: options.scheme ?? 'http',\n    };\n  }\n}\n\nfunction getUrlComponentsFromProxyUrl(\n  options: Pick<CreateURLOptions, 'scheme'>,\n  url: string\n): UrlComponents {\n  const parsedProxyUrl = new URL(url);\n  let protocol = options.scheme ?? 'http';\n  if (parsedProxyUrl.protocol === 'https:') {\n    if (protocol === 'http') {\n      protocol = 'https';\n    }\n    if (!parsedProxyUrl.port) {\n      parsedProxyUrl.port = '443';\n    }\n  }\n  return {\n    port: parsedProxyUrl.port,\n    hostname: parsedProxyUrl.hostname,\n    protocol,\n  };\n}\n\nfunction getDefaultHostname(options: Pick<CreateURLOptions, 'hostname'>) {\n  // TODO: Drop REACT_NATIVE_PACKAGER_HOSTNAME\n  if (process.env.REACT_NATIVE_PACKAGER_HOSTNAME) {\n    return process.env.REACT_NATIVE_PACKAGER_HOSTNAME.trim();\n  } else if (options.hostname === 'localhost') {\n    // Restrict the use of `localhost`\n    // TODO: Note why we do this.\n    return '127.0.0.1';\n  }\n\n  return options.hostname || getIpAddress();\n}\n\nfunction joinUrlComponents({ protocol, hostname, port }: Partial<UrlComponents>): string {\n  assert(hostname, 'hostname cannot be inferred.');\n  const validProtocol = protocol ? `${protocol}://` : '';\n\n  const url = `${validProtocol}${hostname}`;\n\n  if (port) {\n    return url + `:${port}`;\n  }\n\n  return url;\n}\n\n/** @deprecated */\nfunction getProxyUrl(): string | undefined {\n  return process.env.EXPO_PACKAGER_PROXY_URL;\n}\n\n// TODO: Drop the undocumented env variables:\n// REACT_NATIVE_PACKAGER_HOSTNAME\n// EXPO_PACKAGER_PROXY_URL\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}