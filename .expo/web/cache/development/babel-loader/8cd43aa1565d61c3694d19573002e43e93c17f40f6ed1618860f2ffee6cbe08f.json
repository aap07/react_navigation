{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _require = require(\"../Utils\"),\n  createAliasResolver = _require.createAliasResolver,\n  getModules = _require.getModules;\nvar _require2 = require(\"./StructCollector\"),\n  StructCollector = _require2.StructCollector;\nvar _require3 = require(\"./header/serializeStruct\"),\n  serializeStruct = _require3.serializeStruct;\nvar _require4 = require(\"./serializeMethod\"),\n  serializeMethod = _require4.serializeMethod;\nvar _require5 = require(\"./source/serializeModule\"),\n  serializeModuleSource = _require5.serializeModuleSource;\nvar ModuleDeclarationTemplate = function ModuleDeclarationTemplate(_ref) {\n  var hasteModuleName = _ref.hasteModuleName,\n    structDeclarations = _ref.structDeclarations,\n    protocolMethods = _ref.protocolMethods;\n  return `${structDeclarations}\n@protocol ${hasteModuleName}Spec <RCTBridgeModule, RCTTurboModule>\n\n${protocolMethods}\n\n@end\nnamespace facebook {\n  namespace react {\n    /**\n     * ObjC++ class for module '${hasteModuleName}'\n     */\n    class JSI_EXPORT ${hasteModuleName}SpecJSI : public ObjCTurboModule {\n    public:\n      ${hasteModuleName}SpecJSI(const ObjCTurboModule::InitParams &params);\n    };\n  } // namespace react\n} // namespace facebook`;\n};\nvar HeaderFileTemplate = function HeaderFileTemplate(_ref2) {\n  var moduleDeclarations = _ref2.moduleDeclarations,\n    structInlineMethods = _ref2.structInlineMethods,\n    assumeNonnull = _ref2.assumeNonnull;\n  return `/**\n * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).\n *\n * Do not edit this file as changes may cause incorrect behavior and will be lost\n * once the code is regenerated.\n *\n * ${'@'}generated by codegen project: GenerateModuleObjCpp\n *\n * We create an umbrella header (and corresponding implementation) here since\n * Cxx compilation in BUCK has a limitation: source-code producing genrule()s\n * must have a single output. More files => more genrule()s => slower builds.\n */\n\n#ifndef __cplusplus\n#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.\n#endif\n#import <Foundation/Foundation.h>\n#import <RCTRequired/RCTRequired.h>\n#import <RCTTypeSafety/RCTConvertHelpers.h>\n#import <RCTTypeSafety/RCTTypedModuleConstants.h>\n#import <React/RCTBridgeModule.h>\n#import <React/RCTCxxConvert.h>\n#import <React/RCTManagedPointer.h>\n#import <ReactCommon/RCTTurboModule.h>\n#import <optional>\n#import <vector>\n\n` + (assumeNonnull ? '\\nNS_ASSUME_NONNULL_BEGIN\\n' : '') + moduleDeclarations + '\\n' + structInlineMethods + (assumeNonnull ? '\\nNS_ASSUME_NONNULL_END\\n' : '\\n');\n};\nvar SourceFileTemplate = function SourceFileTemplate(_ref3) {\n  var headerFileName = _ref3.headerFileName,\n    moduleImplementations = _ref3.moduleImplementations;\n  return `/**\n * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).\n *\n * Do not edit this file as changes may cause incorrect behavior and will be lost\n * once the code is regenerated.\n *\n * ${'@'}generated by codegen project: GenerateModuleObjCpp\n *\n * We create an umbrella header (and corresponding implementation) here since\n * Cxx compilation in BUCK has a limitation: source-code producing genrule()s\n * must have a single output. More files => more genrule()s => slower builds.\n */\n\n#import \"${headerFileName}\"\n\n${moduleImplementations}\n`;\n};\nmodule.exports = {\n  generate: function generate(libraryName, schema, packageName, assumeNonnull) {\n    var nativeModules = getModules(schema);\n    var moduleDeclarations = [];\n    var structInlineMethods = [];\n    var moduleImplementations = [];\n    var hasteModuleNames = Object.keys(nativeModules).sort();\n    var _loop = function _loop(hasteModuleName) {\n      var _nativeModules$hasteM = nativeModules[hasteModuleName],\n        aliasMap = _nativeModules$hasteM.aliasMap,\n        excludedPlatforms = _nativeModules$hasteM.excludedPlatforms,\n        properties = _nativeModules$hasteM.spec.properties;\n      if (excludedPlatforms != null && excludedPlatforms.includes('iOS')) {\n        return 1;\n      }\n      var resolveAlias = createAliasResolver(aliasMap);\n      var structCollector = new StructCollector();\n      var methodSerializations = [];\n      var serializeProperty = function serializeProperty(property) {\n        methodSerializations.push.apply(methodSerializations, _toConsumableArray(serializeMethod(hasteModuleName, property, structCollector, resolveAlias)));\n      };\n      properties.filter(function (property) {\n        return property.name !== 'getConstants';\n      }).forEach(serializeProperty);\n      properties.filter(function (property) {\n        return property.name === 'getConstants';\n      }).forEach(serializeProperty);\n      var generatedStructs = structCollector.getAllStructs();\n      var structStrs = [];\n      var methodStrs = [];\n      for (var struct of generatedStructs) {\n        var _serializeStruct = serializeStruct(hasteModuleName, struct),\n          methods = _serializeStruct.methods,\n          declaration = _serializeStruct.declaration;\n        structStrs.push(declaration);\n        methodStrs.push(methods);\n      }\n      moduleDeclarations.push(ModuleDeclarationTemplate({\n        hasteModuleName: hasteModuleName,\n        structDeclarations: structStrs.join('\\n'),\n        protocolMethods: methodSerializations.map(function (_ref4) {\n          var protocolMethod = _ref4.protocolMethod;\n          return protocolMethod;\n        }).join('\\n')\n      }));\n      structInlineMethods.push(methodStrs.join('\\n'));\n      moduleImplementations.push(serializeModuleSource(hasteModuleName, generatedStructs, methodSerializations.filter(function (_ref5) {\n        var selector = _ref5.selector;\n        return selector !== '@selector(constantsToExport)';\n      })));\n    };\n    for (var hasteModuleName of hasteModuleNames) {\n      if (_loop(hasteModuleName)) continue;\n    }\n    var headerFileName = `${libraryName}.h`;\n    var headerFile = HeaderFileTemplate({\n      moduleDeclarations: moduleDeclarations.join('\\n'),\n      structInlineMethods: structInlineMethods.join('\\n'),\n      assumeNonnull: assumeNonnull\n    });\n    var sourceFileName = `${libraryName}-generated.mm`;\n    var sourceFile = SourceFileTemplate({\n      headerFileName: headerFileName,\n      moduleImplementations: moduleImplementations.join('\\n')\n    });\n    return new Map([[headerFileName, headerFile], [sourceFileName, sourceFile]]);\n  }\n};","map":{"version":3,"names":["_toConsumableArray","require","_require","createAliasResolver","getModules","_require2","StructCollector","_require3","serializeStruct","_require4","serializeMethod","_require5","serializeModuleSource","ModuleDeclarationTemplate","_ref","hasteModuleName","structDeclarations","protocolMethods","HeaderFileTemplate","_ref2","moduleDeclarations","structInlineMethods","assumeNonnull","SourceFileTemplate","_ref3","headerFileName","moduleImplementations","module","exports","generate","libraryName","schema","packageName","nativeModules","hasteModuleNames","Object","keys","sort","_loop","_nativeModules$hasteM","aliasMap","excludedPlatforms","properties","spec","includes","resolveAlias","structCollector","methodSerializations","serializeProperty","property","push","apply","filter","name","forEach","generatedStructs","getAllStructs","structStrs","methodStrs","struct","_serializeStruct","methods","declaration","join","map","_ref4","protocolMethod","_ref5","selector","headerFile","sourceFileName","sourceFile","Map"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native/codegen/lib/generators/modules/GenerateModuleObjCpp/index.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * @format\n */\n\n'use strict';\n\nconst _require = require('../Utils'),\n  createAliasResolver = _require.createAliasResolver,\n  getModules = _require.getModules;\nconst _require2 = require('./StructCollector'),\n  StructCollector = _require2.StructCollector;\nconst _require3 = require('./header/serializeStruct'),\n  serializeStruct = _require3.serializeStruct;\nconst _require4 = require('./serializeMethod'),\n  serializeMethod = _require4.serializeMethod;\nconst _require5 = require('./source/serializeModule'),\n  serializeModuleSource = _require5.serializeModuleSource;\nconst ModuleDeclarationTemplate = ({\n  hasteModuleName,\n  structDeclarations,\n  protocolMethods,\n}) => `${structDeclarations}\n@protocol ${hasteModuleName}Spec <RCTBridgeModule, RCTTurboModule>\n\n${protocolMethods}\n\n@end\nnamespace facebook {\n  namespace react {\n    /**\n     * ObjC++ class for module '${hasteModuleName}'\n     */\n    class JSI_EXPORT ${hasteModuleName}SpecJSI : public ObjCTurboModule {\n    public:\n      ${hasteModuleName}SpecJSI(const ObjCTurboModule::InitParams &params);\n    };\n  } // namespace react\n} // namespace facebook`;\nconst HeaderFileTemplate = ({\n  moduleDeclarations,\n  structInlineMethods,\n  assumeNonnull,\n}) =>\n  `/**\n * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).\n *\n * Do not edit this file as changes may cause incorrect behavior and will be lost\n * once the code is regenerated.\n *\n * ${'@'}generated by codegen project: GenerateModuleObjCpp\n *\n * We create an umbrella header (and corresponding implementation) here since\n * Cxx compilation in BUCK has a limitation: source-code producing genrule()s\n * must have a single output. More files => more genrule()s => slower builds.\n */\n\n#ifndef __cplusplus\n#error This file must be compiled as Obj-C++. If you are importing it, you must change your file extension to .mm.\n#endif\n#import <Foundation/Foundation.h>\n#import <RCTRequired/RCTRequired.h>\n#import <RCTTypeSafety/RCTConvertHelpers.h>\n#import <RCTTypeSafety/RCTTypedModuleConstants.h>\n#import <React/RCTBridgeModule.h>\n#import <React/RCTCxxConvert.h>\n#import <React/RCTManagedPointer.h>\n#import <ReactCommon/RCTTurboModule.h>\n#import <optional>\n#import <vector>\n\n` +\n  (assumeNonnull ? '\\nNS_ASSUME_NONNULL_BEGIN\\n' : '') +\n  moduleDeclarations +\n  '\\n' +\n  structInlineMethods +\n  (assumeNonnull ? '\\nNS_ASSUME_NONNULL_END\\n' : '\\n');\nconst SourceFileTemplate = ({headerFileName, moduleImplementations}) => `/**\n * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).\n *\n * Do not edit this file as changes may cause incorrect behavior and will be lost\n * once the code is regenerated.\n *\n * ${'@'}generated by codegen project: GenerateModuleObjCpp\n *\n * We create an umbrella header (and corresponding implementation) here since\n * Cxx compilation in BUCK has a limitation: source-code producing genrule()s\n * must have a single output. More files => more genrule()s => slower builds.\n */\n\n#import \"${headerFileName}\"\n\n${moduleImplementations}\n`;\nmodule.exports = {\n  generate(libraryName, schema, packageName, assumeNonnull) {\n    const nativeModules = getModules(schema);\n    const moduleDeclarations = [];\n    const structInlineMethods = [];\n    const moduleImplementations = [];\n    const hasteModuleNames = Object.keys(nativeModules).sort();\n    for (const hasteModuleName of hasteModuleNames) {\n      const _nativeModules$hasteM = nativeModules[hasteModuleName],\n        aliasMap = _nativeModules$hasteM.aliasMap,\n        excludedPlatforms = _nativeModules$hasteM.excludedPlatforms,\n        properties = _nativeModules$hasteM.spec.properties;\n      if (excludedPlatforms != null && excludedPlatforms.includes('iOS')) {\n        continue;\n      }\n      const resolveAlias = createAliasResolver(aliasMap);\n      const structCollector = new StructCollector();\n      const methodSerializations = [];\n      const serializeProperty = property => {\n        methodSerializations.push(\n          ...serializeMethod(\n            hasteModuleName,\n            property,\n            structCollector,\n            resolveAlias,\n          ),\n        );\n      };\n\n      /**\n       * Note: As we serialize NativeModule methods, we insert structs into\n       * StructCollector, as we encounter them.\n       */\n      properties\n        .filter(property => property.name !== 'getConstants')\n        .forEach(serializeProperty);\n      properties\n        .filter(property => property.name === 'getConstants')\n        .forEach(serializeProperty);\n      const generatedStructs = structCollector.getAllStructs();\n      const structStrs = [];\n      const methodStrs = [];\n      for (const struct of generatedStructs) {\n        const _serializeStruct = serializeStruct(hasteModuleName, struct),\n          methods = _serializeStruct.methods,\n          declaration = _serializeStruct.declaration;\n        structStrs.push(declaration);\n        methodStrs.push(methods);\n      }\n      moduleDeclarations.push(\n        ModuleDeclarationTemplate({\n          hasteModuleName: hasteModuleName,\n          structDeclarations: structStrs.join('\\n'),\n          protocolMethods: methodSerializations\n            .map(({protocolMethod}) => protocolMethod)\n            .join('\\n'),\n        }),\n      );\n      structInlineMethods.push(methodStrs.join('\\n'));\n      moduleImplementations.push(\n        serializeModuleSource(\n          hasteModuleName,\n          generatedStructs,\n          methodSerializations.filter(\n            ({selector}) => selector !== '@selector(constantsToExport)',\n          ),\n        ),\n      );\n    }\n    const headerFileName = `${libraryName}.h`;\n    const headerFile = HeaderFileTemplate({\n      moduleDeclarations: moduleDeclarations.join('\\n'),\n      structInlineMethods: structInlineMethods.join('\\n'),\n      assumeNonnull,\n    });\n    const sourceFileName = `${libraryName}-generated.mm`;\n    const sourceFile = SourceFileTemplate({\n      headerFileName,\n      moduleImplementations: moduleImplementations.join('\\n'),\n    });\n    return new Map([\n      [headerFileName, headerFile],\n      [sourceFileName, sourceFile],\n    ]);\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}