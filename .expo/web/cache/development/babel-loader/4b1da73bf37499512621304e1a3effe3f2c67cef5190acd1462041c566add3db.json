{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isModuleSymlinked = isModuleSymlinked;\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _resolveFrom = _interopRequireDefault(require(\"resolve-from\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction isModuleRootPathInNodeModulesFolder(moduleRootPath) {\n  var parentFolderName = _path.default.basename(_path.default.dirname(moduleRootPath));\n  return parentFolderName === \"node_modules\";\n}\nfunction isModuleSymlinked(projectRoot, _ref) {\n  var moduleId = _ref.moduleId,\n    isSilent = _ref.isSilent;\n  try {\n    var moduleRootPath = _path.default.dirname((0, _resolveFrom).default(projectRoot, `${moduleId}/package.json`));\n    return !isModuleRootPathInNodeModulesFolder(moduleRootPath);\n  } catch (error) {\n    if (!isSilent) {\n      throw error;\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["isModuleSymlinked","_path","_interopRequireDefault","require","_resolveFrom","isModuleRootPathInNodeModulesFolder","moduleRootPath","parentFolderName","default","basename","dirname","projectRoot","_ref","moduleId","isSilent","error"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\utils\\isModuleSymlinked.ts"],"sourcesContent":["import path from 'path';\nimport resolveFrom from 'resolve-from';\n\n/**\n * Return true if the parent folder for a given file path is named \"node_modules\".\n *\n * @example\n * isModuleRootPathInNodeModulesFolder('./foo/expo') -> false\n * isModuleRootPathInNodeModulesFolder('./node_modules/expo') -> true\n */\nfunction isModuleRootPathInNodeModulesFolder(moduleRootPath: string): boolean {\n  const parentFolderName = path.basename(path.dirname(moduleRootPath));\n  return parentFolderName === 'node_modules';\n}\n\n/**\n * Given a node module name, and a project path, this method will:\n *\n * 1. Resolve the module path.\n * 2. Find the module root folder.\n * 3. Return true if the module root folder is in a folder named `node_modules`\n *\n * @param projectRoot\n * @param moduleId\n *\n * @example\n * isModuleSymlinked('./expo/apps/native-component-list', {\n *   moduleId: 'react-native'\n * })\n */\nexport function isModuleSymlinked(\n  projectRoot: string,\n  {\n    moduleId,\n    isSilent,\n  }: {\n    moduleId: string;\n    isSilent?: boolean;\n  }\n): boolean {\n  try {\n    const moduleRootPath = path.dirname(resolveFrom(projectRoot, `${moduleId}/package.json`));\n    return !isModuleRootPathInNodeModulesFolder(moduleRootPath);\n  } catch (error) {\n    if (!isSilent) {\n      throw error;\n    }\n    // Failed to resolve the package.json relative to the project, not sure what to do here.\n    // This is probably not possible due to node module resolution.\n    return false;\n  }\n}\n"],"mappings":"AAAA;;;;;QA8BgBA,iBAAiB,GAAjBA,iBAAiB;AA9BhB,IAAAC,KAAM,GAAAC,sBAAA,CAAAC,OAAA,CAAN,MAAM;AACC,IAAAC,YAAc,GAAAF,sBAAA,CAAAC,OAAA,CAAd,cAAc;;;;;;AAStC,SAASE,mCAAmCA,CAACC,cAAsB,EAAW;EAC5E,IAAMC,gBAAgB,GAAGN,KAAI,CAAAO,OAAA,CAACC,QAAQ,CAACR,KAAI,CAAAO,OAAA,CAACE,OAAO,CAACJ,cAAc,CAAC,CAAC;EACpE,OAAOC,gBAAgB,KAAK,cAAc;;AAkBrC,SAASP,iBAAiBA,CAC/BW,WAAmB,EAAAC,IAAA,EAQV;EAAA,IANPC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;IACRC,QAAQ,GAAAF,IAAA,CAARE,QAAQ;EAMV,IAAI;IACF,IAAMR,cAAc,GAAGL,KAAI,CAAAO,OAAA,CAACE,OAAO,CAAC,IAAAN,YAAW,EAAyCI,OAAzC,CAACG,WAAW,EAAG,GAAEE,QAAS,eAAc,CAAC,CAAC;IACzF,OAAO,CAACR,mCAAmC,CAACC,cAAc,CAAC;GAC5D,CAAC,OAAOS,KAAK,EAAE;IACd,IAAI,CAACD,QAAQ,EAAE;MACb,MAAMC,KAAK;;IAIb,OAAO,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}