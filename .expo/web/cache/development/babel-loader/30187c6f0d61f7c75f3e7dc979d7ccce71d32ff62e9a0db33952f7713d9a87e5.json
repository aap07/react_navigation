{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { Component } from 'react';\nvar TouchableNativeFeedback = function (_Component) {\n  _inherits(TouchableNativeFeedback, _Component);\n  var _super = _createSuper(TouchableNativeFeedback);\n  function TouchableNativeFeedback() {\n    _classCallCheck(this, TouchableNativeFeedback);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(TouchableNativeFeedback);\n}(Component);\nexport { TouchableNativeFeedback as default };","map":{"version":3,"names":["Component","TouchableNativeFeedback","_Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","default"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/react-native-gesture-handler/lib/typescript/components/touchables/TouchableNativeFeedback.android.d.ts"],"sourcesContent":["import { TouchableNativeFeedbackProps, ColorValue } from 'react-native';\nimport { Component } from 'react';\nimport { GenericTouchableProps } from './GenericTouchable';\nexport declare type TouchableNativeFeedbackExtraProps = {\n    borderless?: boolean;\n    rippleColor?: number | null;\n    rippleRadius?: number | null;\n    foreground?: boolean;\n};\n/**\n * TouchableNativeFeedback behaves slightly different than RN's TouchableNativeFeedback.\n * There's small difference with handling long press ripple since RN's implementation calls\n * ripple animation via bridge. This solution leaves all animations' handling for native components so\n * it follows native behaviours.\n */\nexport default class TouchableNativeFeedback extends Component<TouchableNativeFeedbackProps & GenericTouchableProps> {\n    static defaultProps: {\n        useForeground: boolean;\n        extraButtonProps: {\n            rippleColor: null;\n        };\n        delayLongPress: number;\n    };\n    static SelectableBackground: (rippleRadius?: number | undefined) => {\n        type: string;\n        attribute: string;\n        rippleRadius: number | undefined;\n    };\n    static SelectableBackgroundBorderless: (rippleRadius?: number | undefined) => {\n        type: string;\n        attribute: string;\n        rippleRadius: number | undefined;\n    };\n    static Ripple: (color: ColorValue, borderless: boolean, rippleRadius?: number | undefined) => {\n        type: string;\n        color: ColorValue;\n        borderless: boolean;\n        rippleRadius: number | undefined;\n    };\n    static canUseNativeForeground: () => boolean;\n    getExtraButtonProps(): TouchableNativeFeedbackExtraProps;\n    render(): JSX.Element;\n}\n"],"mappings":";;;;;;;AACA,SAASA,SAAS,QAAQ,OAAO;AAAC,IAcbC,uBAAuB,aAAAC,UAAA;EAAAC,SAAA,CAAAF,uBAAA,EAAAC,UAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,uBAAA;EAAA,SAAAA,wBAAA;IAAAK,eAAA,OAAAL,uBAAA;IAAA,OAAAG,MAAA,CAAAG,KAAA,OAAAC,SAAA;EAAA;EAAA,OAAAC,YAAA,CAAAR,uBAAA;AAAA,EAASD,SAAS;AAAA,SAAzCC,uBAAuB,IAAAS,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}