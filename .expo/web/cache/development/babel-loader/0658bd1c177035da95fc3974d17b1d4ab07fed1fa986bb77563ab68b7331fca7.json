{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setSplashInfoPlist = setSplashInfoPlist;\nexports.withIosSplashInfoPlist = void 0;\nfunction _configPlugins() {\n  var data = require(\"@expo/config-plugins\");\n  _configPlugins = function _configPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _debug() {\n  var data = _interopRequireDefault(require(\"debug\"));\n  _debug = function _debug() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = (0, _debug().default)('expo:prebuild-config:expo-splash-screen:ios:infoPlist');\nvar withIosSplashInfoPlist = function withIosSplashInfoPlist(config, splash) {\n  return (0, _configPlugins().withInfoPlist)(config, function (config) {\n    config.modResults = setSplashInfoPlist(config, config.modResults, splash);\n    return config;\n  });\n};\nexports.withIosSplashInfoPlist = withIosSplashInfoPlist;\nfunction setSplashInfoPlist(config, infoPlist, splash) {\n  var _splash$dark, _splash$dark2, _splash$dark3, _splash$dark4;\n  var isDarkModeEnabled = !!(splash !== null && splash !== void 0 && (_splash$dark = splash.dark) !== null && _splash$dark !== void 0 && _splash$dark.image || splash !== null && splash !== void 0 && (_splash$dark2 = splash.dark) !== null && _splash$dark2 !== void 0 && _splash$dark2.tabletImage || splash !== null && splash !== void 0 && (_splash$dark3 = splash.dark) !== null && _splash$dark3 !== void 0 && _splash$dark3.backgroundColor || splash !== null && splash !== void 0 && (_splash$dark4 = splash.dark) !== null && _splash$dark4 !== void 0 && _splash$dark4.tabletBackgroundColor);\n  debug(`isDarkModeEnabled: `, isDarkModeEnabled);\n  if (isDarkModeEnabled) {\n    var _config$ios$userInter, _config$ios;\n    var existing = (_config$ios$userInter = (_config$ios = config.ios) === null || _config$ios === void 0 ? void 0 : _config$ios.userInterfaceStyle) !== null && _config$ios$userInter !== void 0 ? _config$ios$userInter : config.userInterfaceStyle;\n    if (existing && existing !== 'automatic') {\n      _configPlugins().WarningAggregator.addWarningIOS('userInterfaceStyle', 'The existing `userInterfaceStyle` property is preventing splash screen from working properly. Please remove it or disable dark mode splash screens.');\n    }\n    infoPlist.UIUserInterfaceStyle = 'Automatic';\n  } else {}\n  if (splash) {\n    infoPlist.UILaunchStoryboardName = 'SplashScreen';\n  } else {\n    debug(`Disabling UILaunchStoryboardName`);\n    delete infoPlist.UILaunchStoryboardName;\n  }\n  return infoPlist;\n}","map":{"version":3,"names":["_configPlugins","data","require","_debug","_interopRequireDefault","obj","__esModule","default","debug","withIosSplashInfoPlist","config","splash","withInfoPlist","modResults","setSplashInfoPlist","exports","infoPlist","_splash$dark","_splash$dark2","_splash$dark3","_splash$dark4","isDarkModeEnabled","dark","image","tabletImage","backgroundColor","tabletBackgroundColor","_config$ios$userInter","_config$ios","existing","ios","userInterfaceStyle","WarningAggregator","addWarningIOS","UIUserInterfaceStyle","UILaunchStoryboardName"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\prebuild-config\\src\\plugins\\unversioned\\expo-splash-screen\\withIosSplashInfoPlist.ts"],"sourcesContent":["import { ConfigPlugin, InfoPlist, WarningAggregator, withInfoPlist } from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\nimport Debug from 'debug';\n\nimport { IOSSplashConfig } from './getIosSplashConfig';\n\nconst debug = Debug('expo:prebuild-config:expo-splash-screen:ios:infoPlist');\n\nexport const withIosSplashInfoPlist: ConfigPlugin<IOSSplashConfig> = (config, splash) => {\n  return withInfoPlist(config, (config) => {\n    config.modResults = setSplashInfoPlist(config, config.modResults, splash);\n    return config;\n  });\n};\n\nexport function setSplashInfoPlist(\n  config: ExpoConfig,\n  infoPlist: InfoPlist,\n  splash: IOSSplashConfig\n): InfoPlist {\n  const isDarkModeEnabled = !!(\n    splash?.dark?.image ||\n    splash?.dark?.tabletImage ||\n    splash?.dark?.backgroundColor ||\n    splash?.dark?.tabletBackgroundColor\n  );\n  debug(`isDarkModeEnabled: `, isDarkModeEnabled);\n\n  if (isDarkModeEnabled) {\n    // IOSConfig.UserInterfaceStyle.getUserInterfaceStyle(config);\n    // Determine if the user manually defined the userInterfaceStyle incorrectly\n    const existing = config.ios?.userInterfaceStyle ?? config.userInterfaceStyle;\n    // Add a warning to prevent the dark mode splash screen from not being shown -- this was learned the hard way.\n    if (existing && existing !== 'automatic') {\n      WarningAggregator.addWarningIOS(\n        'userInterfaceStyle',\n        'The existing `userInterfaceStyle` property is preventing splash screen from working properly. Please remove it or disable dark mode splash screens.'\n      );\n    }\n    // assigning it to auto anyways, but this is fragile because the order of operations matter now\n    infoPlist.UIUserInterfaceStyle = 'Automatic';\n  } else {\n    // NOTE(brentvatne): Commented out this line because it causes https://github.com/expo/expo-cli/issues/3935\n    // We should revisit this approach.\n    // delete infoPlist.UIUserInterfaceStyle;\n  }\n\n  if (splash) {\n    // TODO: What to do here ??\n    infoPlist.UILaunchStoryboardName = 'SplashScreen';\n  } else {\n    debug(`Disabling UILaunchStoryboardName`);\n    delete infoPlist.UILaunchStoryboardName;\n  }\n\n  return infoPlist;\n}\n"],"mappings":";;;;;;;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA,GAAAC,OAAA;EAAAF,cAAA,YAAAA,eAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAEA,SAAAE,OAAA;EAAA,IAAAF,IAAA,GAAAG,sBAAA,CAAAF,OAAA;EAAAC,MAAA,YAAAA,OAAA;IAAA,OAAAF,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAA0B,SAAAG,uBAAAC,GAAA;EAAA,OAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA;IAAAE,OAAA,EAAAF;EAAA;AAAA;AAI1B,IAAMG,KAAK,GAAG,IAAAL,MAAA,GAAAI,OAAK,EAAC,uDAAuD,CAAC;AAErE,IAAME,sBAAqD,GAAG,SAAxDA,sBAAqDA,CAAIC,MAAM,EAAEC,MAAM,EAAK;EACvF,OAAO,IAAAX,cAAA,GAAAY,aAAa,EAACF,MAAM,EAAG,UAAAA,MAAM,EAAK;IACvCA,MAAM,CAACG,UAAU,GAAGC,kBAAkB,CAACJ,MAAM,EAAEA,MAAM,CAACG,UAAU,EAAEF,MAAM,CAAC;IACzE,OAAOD,MAAM;EACf,CAAC,CAAC;AACJ,CAAC;AAACK,OAAA,CAAAN,sBAAA,GAAAA,sBAAA;AAEK,SAASK,kBAAkBA,CAChCJ,MAAkB,EAClBM,SAAoB,EACpBL,MAAuB,EACZ;EAAA,IAAAM,YAAA,EAAAC,aAAA,EAAAC,aAAA,EAAAC,aAAA;EACX,IAAMC,iBAAiB,GAAG,CAAC,EACzBV,MAAM,aAANA,MAAM,gBAAAM,YAAA,GAANN,MAAM,CAAEW,IAAI,cAAAL,YAAA,eAAZA,YAAA,CAAcM,KAAK,IACnBZ,MAAM,aAANA,MAAM,gBAAAO,aAAA,GAANP,MAAM,CAAEW,IAAI,cAAAJ,aAAA,eAAZA,aAAA,CAAcM,WAAW,IACzBb,MAAM,aAANA,MAAM,gBAAAQ,aAAA,GAANR,MAAM,CAAEW,IAAI,cAAAH,aAAA,eAAZA,aAAA,CAAcM,eAAe,IAC7Bd,MAAM,aAANA,MAAM,gBAAAS,aAAA,GAANT,MAAM,CAAEW,IAAI,cAAAF,aAAA,eAAZA,aAAA,CAAcM,qBAAqB,CACpC;EACDlB,KAAK,CAAE,qBAAoB,EAAEa,iBAAiB,CAAC;EAE/C,IAAIA,iBAAiB,EAAE;IAAA,IAAAM,qBAAA,EAAAC,WAAA;IAGrB,IAAMC,QAAQ,IAAAF,qBAAA,IAAAC,WAAA,GAAGlB,MAAM,CAACoB,GAAG,cAAAF,WAAA,uBAAVA,WAAA,CAAYG,kBAAkB,cAAAJ,qBAAA,cAAAA,qBAAA,GAAIjB,MAAM,CAACqB,kBAAkB;IAE5E,IAAIF,QAAQ,IAAIA,QAAQ,KAAK,WAAW,EAAE;MACxC7B,cAAA,GAAAgC,iBAAiB,CAACC,aAAa,CAC7B,oBAAoB,EACpB,qJAAqJ,CACtJ;IACH;IAEAjB,SAAS,CAACkB,oBAAoB,GAAG,WAAW;EAC9C,CAAC,MAAM,CAGL;EAGF,IAAIvB,MAAM,EAAE;IAEVK,SAAS,CAACmB,sBAAsB,GAAG,cAAc;EACnD,CAAC,MAAM;IACL3B,KAAK,CAAE,kCAAiC,CAAC;IACzC,OAAOQ,SAAS,CAACmB,sBAAsB;EACzC;EAEA,OAAOnB,SAAS;AAClB"},"metadata":{},"sourceType":"script","externalDependencies":[]}