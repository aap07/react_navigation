{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parsePlatformHeader = parsePlatformHeader;\nexports.resolvePlatformFromUserAgentHeader = resolvePlatformFromUserAgentHeader;\nexports.assertMissingRuntimePlatform = assertMissingRuntimePlatform;\nexports.assertRuntimePlatform = assertRuntimePlatform;\nvar _url = require(\"url\");\nvar _errors = require(\"../../../utils/errors\");\nvar debug = require(\"debug\")(\"expo:start:server:middleware:resolvePlatform\");\nfunction parsePlatformHeader(req) {\n  var ref;\n  var url = (0, _url).parse(req.url, true);\n  var platform = ((ref = url.query) == null ? void 0 : ref.platform) || req.headers[\"expo-platform\"] || req.headers[\"exponent-platform\"];\n  var ref1;\n  return (ref1 = Array.isArray(platform) ? platform[0] : platform) != null ? ref1 : null;\n}\nfunction resolvePlatformFromUserAgentHeader(req) {\n  var platform = null;\n  var userAgent = req.headers[\"user-agent\"];\n  if (userAgent == null ? void 0 : userAgent.match(/Android/i)) {\n    platform = \"android\";\n  }\n  if (userAgent == null ? void 0 : userAgent.match(/iPhone|iPad/i)) {\n    platform = \"ios\";\n  }\n  debug(`Resolved platform ${platform} from user-agent header: ${userAgent}`);\n  return platform;\n}\nfunction assertMissingRuntimePlatform(platform) {\n  if (!platform) {\n    throw new _errors.CommandError(\"PLATFORM_HEADER\", `Must specify \"expo-platform\" header or \"platform\" query parameter`);\n  }\n}\nfunction assertRuntimePlatform(platform) {\n  var stringifiedPlatform = String(platform);\n  if (![\"android\", \"ios\", \"web\"].includes(stringifiedPlatform)) {\n    throw new _errors.CommandError(\"PLATFORM_HEADER\", `platform must be \"android\", \"ios\", or \"web\". Received: \"${platform}\"`);\n  }\n}","map":{"version":3,"names":["parsePlatformHeader","resolvePlatformFromUserAgentHeader","assertMissingRuntimePlatform","assertRuntimePlatform","_url","require","_errors","debug","req","ref","url","parse","platform","query","headers","ref1","Array","isArray","userAgent","match","CommandError","stringifiedPlatform","String","includes"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\middleware\\resolvePlatform.ts"],"sourcesContent":["import { parse } from 'url';\n\nimport { CommandError } from '../../../utils/errors';\nimport { ServerRequest } from './server.types';\n\nconst debug = require('debug')(\n  'expo:start:server:middleware:resolvePlatform'\n) as typeof console.log;\n\n/** Supported platforms */\nexport type RuntimePlatform = 'ios' | 'android';\n\n/**\n * Extract the runtime platform from the server request.\n * 1. Query param `platform`: `?platform=ios`\n * 2. Header `expo-platform`: `'expo-platform': ios`\n * 3. Legacy header `exponent-platform`: `'exponent-platform': ios`\n *\n * Returns first item in the case of an array.\n */\nexport function parsePlatformHeader(req: ServerRequest): string | null {\n  const url = parse(req.url!, /* parseQueryString */ true);\n  const platform =\n    url.query?.platform || req.headers['expo-platform'] || req.headers['exponent-platform'];\n  return (Array.isArray(platform) ? platform[0] : platform) ?? null;\n}\n\n/** Guess the platform from the user-agent header. */\nexport function resolvePlatformFromUserAgentHeader(req: ServerRequest): string | null {\n  let platform = null;\n  const userAgent = req.headers['user-agent'];\n  if (userAgent?.match(/Android/i)) {\n    platform = 'android';\n  }\n  if (userAgent?.match(/iPhone|iPad/i)) {\n    platform = 'ios';\n  }\n  debug(`Resolved platform ${platform} from user-agent header: ${userAgent}`);\n  return platform;\n}\n\n/** Assert if the runtime platform is not included. */\nexport function assertMissingRuntimePlatform(platform?: any): asserts platform {\n  if (!platform) {\n    throw new CommandError(\n      'PLATFORM_HEADER',\n      `Must specify \"expo-platform\" header or \"platform\" query parameter`\n    );\n  }\n}\n\n/** Assert if the runtime platform is not correct. */\nexport function assertRuntimePlatform(platform: string): asserts platform is RuntimePlatform {\n  const stringifiedPlatform = String(platform);\n  if (!['android', 'ios', 'web'].includes(stringifiedPlatform)) {\n    throw new CommandError(\n      'PLATFORM_HEADER',\n      `platform must be \"android\", \"ios\", or \"web\". Received: \"${platform}\"`\n    );\n  }\n}\n"],"mappings":"AAAA;;;;;QAoBgBA,mBAAmB,GAAnBA,mBAAmB;QAQnBC,kCAAkC,GAAlCA,kCAAkC;QAclCC,4BAA4B,GAA5BA,4BAA4B;QAU5BC,qBAAqB,GAArBA,qBAAqB;AApDf,IAAAC,IAAK,GAAAC,OAAA,CAAL,KAAK;AAEE,IAAAC,OAAuB,GAAAD,OAAA;AAGpD,IAAME,KAAK,GAAGF,OAAO,CAAC,OAAO,CAAC,CAC5B,8CAA8C,CAC/C;AAaM,SAASL,mBAAmBA,CAACQ,GAAkB,EAAiB;MAGnEC,GAAS;EAFX,IAAMC,GAAG,GAAG,IAAAN,IAAK,EAAuCO,KAAvC,CAACH,GAAG,CAACE,GAAG,EAA0B,IAAI,CAAC;EACxD,IAAME,QAAQ,GACZ,EAAAH,GAAS,GAATC,GAAG,CAACG,KAAK,SAAU,GAAnB,MAAmB,GAAnBJ,GAAS,CAAEG,QAAQ,KAAIJ,GAAG,CAACM,OAAO,CAAC,eAAe,CAAC,IAAIN,GAAG,CAACM,OAAO,CAAC,mBAAmB,CAAC;MAClFC,IAAkD;EAAzD,OAAO,CAAAA,IAAkD,GAAjDC,KAAK,CAACC,OAAO,CAACL,QAAQ,CAAC,GAAGA,QAAQ,CAAC,CAAC,CAAC,GAAGA,QAAQ,YAAjDG,IAAkD,GAAI,IAAI;;AAI5D,SAASd,kCAAkCA,CAACO,GAAkB,EAAiB;EACpF,IAAII,QAAQ,GAAG,IAAI;EACnB,IAAMM,SAAS,GAAGV,GAAG,CAACM,OAAO,CAAC,YAAY,CAAC;EAC3C,IAAII,SAAS,QAAO,GAAhB,MAAgB,GAAhBA,SAAS,CAAEC,KAAK,YAAY,EAAE;IAChCP,QAAQ,GAAG,SAAS;;EAEtB,IAAIM,SAAS,QAAO,GAAhB,MAAgB,GAAhBA,SAAS,CAAEC,KAAK,gBAAgB,EAAE;IACpCP,QAAQ,GAAG,KAAK;;EAElBL,KAAK,CAAE,qBAAoBK,QAAS,4BAA2BM,SAAU,EAAC,CAAC;EAC3E,OAAON,QAAQ;;AAIV,SAASV,4BAA4BA,CAACU,QAAc,EAAoB;EAC7E,IAAI,CAACA,QAAQ,EAAE;IACb,MAAM,IAAIN,OAAY,CAAAc,YAAA,CACpB,iBAAiB,EAChB,mEAAkE,CACpE;;;AAKE,SAASjB,qBAAqBA,CAACS,QAAgB,EAAuC;EAC3F,IAAMS,mBAAmB,GAAGC,MAAM,CAACV,QAAQ,CAAC;EAC5C,IAAI,CAAC,CAAC,SAAS,EAAE,KAAK,EAAE,KAAK,CAAC,CAACW,QAAQ,CAACF,mBAAmB,CAAC,EAAE;IAC5D,MAAM,IAAIf,OAAY,CAAAc,YAAA,CACpB,iBAAiB,EAChB,2DAA0DR,QAAS,GAAE,CACvE"},"metadata":{},"sourceType":"script","externalDependencies":[]}