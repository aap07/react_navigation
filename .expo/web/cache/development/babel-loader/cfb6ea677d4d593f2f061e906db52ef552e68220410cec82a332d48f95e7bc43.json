{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/cli/node_modules/type-fest/source/conditional-except.d.ts"],"sourcesContent":["import {Except} from './except';\nimport {ConditionalKeys} from './conditional-keys';\n\n/**\nExclude keys from a shape that matches the given `Condition`.\n\nThis is useful when you want to create a new type with a specific set of keys from a shape. For example, you might want to exclude all the primitive properties from a class and form a new shape containing everything but the primitive properties.\n\n@example\n```\nimport {Primitive, ConditionalExcept} from 'type-fest';\n\nclass Awesome {\n\tname: string;\n\tsuccesses: number;\n\tfailures: bigint;\n\n\trun() {}\n}\n\ntype ExceptPrimitivesFromAwesome = ConditionalExcept<Awesome, Primitive>;\n//=> {run: () => void}\n```\n\n@example\n```\nimport {ConditionalExcept} from 'type-fest';\n\ninterface Example {\n\ta: string;\n\tb: string | number;\n\tc: () => void;\n\td: {};\n}\n\ntype NonStringKeysOnly = ConditionalExcept<Example, string>;\n//=> {b: string | number; c: () => void; d: {}}\n```\n*/\nexport type ConditionalExcept<Base, Condition> = Except<\n\tBase,\n\tConditionalKeys<Base, Condition>\n>;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}