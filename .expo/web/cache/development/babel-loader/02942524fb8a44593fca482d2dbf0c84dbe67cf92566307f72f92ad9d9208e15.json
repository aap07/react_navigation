{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/config-plugins/build/plugins/createBaseMod.d.ts"],"sourcesContent":["import { ConfigPlugin, ExportedConfig, ExportedConfigWithProps, ModPlatform } from '../Plugin.types';\nimport { BaseModOptions } from './withMod';\nexport type ForwardedBaseModOptions = Partial<Pick<BaseModOptions, 'saveToInternal' | 'skipEmptyMod'>>;\nexport type BaseModProviderMethods<ModType, Props extends ForwardedBaseModOptions = ForwardedBaseModOptions> = {\n    getFilePath: (config: ExportedConfigWithProps<ModType>, props: Props) => Promise<string> | string;\n    read: (filePath: string, config: ExportedConfigWithProps<ModType>, props: Props) => Promise<ModType> | ModType;\n    write: (filePath: string, config: ExportedConfigWithProps<ModType>, props: Props) => Promise<void> | void;\n    /**\n     * If the mod supports introspection, and avoids making any filesystem modifications during compilation.\n     * By enabling, this mod, and all of its descendants will be run in introspection mode.\n     * This should only be used for static files like JSON or XML, and not for application files that require regexes,\n     * or complex static files that require other files to be generated like Xcode `.pbxproj`.\n     */\n    isIntrospective?: boolean;\n};\nexport type CreateBaseModProps<ModType, Props extends ForwardedBaseModOptions = ForwardedBaseModOptions> = {\n    methodName: string;\n    platform: ModPlatform;\n    modName: string;\n} & BaseModProviderMethods<ModType, Props>;\nexport declare function createBaseMod<ModType, Props extends ForwardedBaseModOptions = ForwardedBaseModOptions>({ methodName, platform, modName, getFilePath, read, write, isIntrospective, }: CreateBaseModProps<ModType, Props>): ConfigPlugin<Props | void>;\nexport declare function assertModResults(results: any, platformName: string, modName: string): any;\nexport declare function createPlatformBaseMod<ModType, Props extends ForwardedBaseModOptions = ForwardedBaseModOptions>({ modName, ...props }: Omit<CreateBaseModProps<ModType, Props>, 'methodName'>): ConfigPlugin<void | Props>;\n/** A TS wrapper for creating provides */\nexport declare function provider<ModType, Props extends ForwardedBaseModOptions = ForwardedBaseModOptions>(props: BaseModProviderMethods<ModType, Props>): BaseModProviderMethods<ModType, Props>;\n/** Plugin to create and append base mods from file providers */\nexport declare function withGeneratedBaseMods<ModName extends string>(config: ExportedConfig, { platform, providers, ...props }: ForwardedBaseModOptions & {\n    /** Officially supports `'ios' | 'android'` (`ModPlatform`). Arbitrary strings are supported for adding out-of-tree platforms. */\n    platform: ModPlatform & string;\n    providers: Partial<Record<ModName, BaseModProviderMethods<any, any>>>;\n}): ExportedConfig;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}