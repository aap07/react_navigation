{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBuildConfigurationFromXcScheme = getBuildConfigurationFromXcScheme;\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function _cliTools() {\n    return data;\n  };\n  return data;\n}\nfunction _fastXmlParser() {\n  var data = require(\"fast-xml-parser\");\n  _fastXmlParser = function _fastXmlParser() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar xmlParser = new (_fastXmlParser().XMLParser)({\n  ignoreAttributes: false\n});\nfunction getBuildConfigurationFromXcScheme(scheme, configuration, sourceDir) {\n  try {\n    var xcProject = _fs().default.readdirSync(sourceDir).find(function (dir) {\n      return dir.includes('.xcodeproj');\n    });\n    if (xcProject) {\n      var xmlScheme = _fs().default.readFileSync(_path().default.join(sourceDir, xcProject, 'xcshareddata', 'xcschemes', `${scheme}.xcscheme`), {\n        encoding: 'utf-8'\n      });\n      var _xmlParser$parse = xmlParser.parse(xmlScheme),\n        Scheme = _xmlParser$parse.Scheme;\n      return Scheme.LaunchAction['@_buildConfiguration'];\n    }\n  } catch (_unused) {\n    throw new (_cliTools().CLIError)(`Could not find scheme ${scheme}. Please make sure the schema you want to run exists.`);\n  }\n  return configuration;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","getBuildConfigurationFromXcScheme","_cliTools","data","require","_fastXmlParser","_fs","_interopRequireDefault","_path","obj","__esModule","default","xmlParser","XMLParser","ignoreAttributes","scheme","configuration","sourceDir","xcProject","readdirSync","find","dir","includes","xmlScheme","readFileSync","join","encoding","_xmlParser$parse","parse","Scheme","LaunchAction","_unused","CLIError"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-platform-ios/build/tools/getBuildConfigurationFromXcScheme.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBuildConfigurationFromXcScheme = getBuildConfigurationFromXcScheme;\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function () {\n    return data;\n  };\n  return data;\n}\nfunction _fastXmlParser() {\n  const data = require(\"fast-xml-parser\");\n  _fastXmlParser = function () {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n  _fs = function () {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n  _path = function () {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nconst xmlParser = new (_fastXmlParser().XMLParser)({\n  ignoreAttributes: false\n});\nfunction getBuildConfigurationFromXcScheme(scheme, configuration, sourceDir) {\n  try {\n    const xcProject = _fs().default.readdirSync(sourceDir).find(dir => dir.includes('.xcodeproj'));\n    if (xcProject) {\n      const xmlScheme = _fs().default.readFileSync(_path().default.join(sourceDir, xcProject, 'xcshareddata', 'xcschemes', `${scheme}.xcscheme`), {\n        encoding: 'utf-8'\n      });\n      const {\n        Scheme\n      } = xmlParser.parse(xmlScheme);\n      return Scheme.LaunchAction['@_buildConfiguration'];\n    }\n  } catch {\n    throw new (_cliTools().CLIError)(`Could not find scheme ${scheme}. Please make sure the schema you want to run exists.`);\n  }\n  return configuration;\n}\n\n//# sourceMappingURL=getBuildConfigurationFromXcScheme.ts.map"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,iCAAiC,GAAGA,iCAAiC;AAC7E,SAASC,SAASA,CAAA,EAAG;EACnB,IAAMC,IAAI,GAAGC,OAAO,CAAC,mCAAmC,CAAC;EACzDF,SAAS,GAAG,SAAAA,UAAA,EAAY;IACtB,OAAOC,IAAI;EACb,CAAC;EACD,OAAOA,IAAI;AACb;AACA,SAASE,cAAcA,CAAA,EAAG;EACxB,IAAMF,IAAI,GAAGC,OAAO,CAAC,iBAAiB,CAAC;EACvCC,cAAc,GAAG,SAAAA,eAAA,EAAY;IAC3B,OAAOF,IAAI;EACb,CAAC;EACD,OAAOA,IAAI;AACb;AACA,SAASG,GAAGA,CAAA,EAAG;EACb,IAAMH,IAAI,GAAGI,sBAAsB,CAACH,OAAO,CAAC,IAAI,CAAC,CAAC;EAClDE,GAAG,GAAG,SAAAA,IAAA,EAAY;IAChB,OAAOH,IAAI;EACb,CAAC;EACD,OAAOA,IAAI;AACb;AACA,SAASK,KAAKA,CAAA,EAAG;EACf,IAAML,IAAI,GAAGI,sBAAsB,CAACH,OAAO,CAAC,MAAM,CAAC,CAAC;EACpDI,KAAK,GAAG,SAAAA,MAAA,EAAY;IAClB,OAAOL,IAAI;EACb,CAAC;EACD,OAAOA,IAAI;AACb;AACA,SAASI,sBAAsBA,CAACE,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEE,OAAO,EAAEF;EAAI,CAAC;AAAE;AAC9F,IAAMG,SAAS,GAAG,KAAKP,cAAc,CAAC,CAAC,CAACQ,SAAS,EAAE;EACjDC,gBAAgB,EAAE;AACpB,CAAC,CAAC;AACF,SAASb,iCAAiCA,CAACc,MAAM,EAAEC,aAAa,EAAEC,SAAS,EAAE;EAC3E,IAAI;IACF,IAAMC,SAAS,GAAGZ,GAAG,CAAC,CAAC,CAACK,OAAO,CAACQ,WAAW,CAACF,SAAS,CAAC,CAACG,IAAI,CAAC,UAAAC,GAAG;MAAA,OAAIA,GAAG,CAACC,QAAQ,CAAC,YAAY,CAAC;IAAA,EAAC;IAC9F,IAAIJ,SAAS,EAAE;MACb,IAAMK,SAAS,GAAGjB,GAAG,CAAC,CAAC,CAACK,OAAO,CAACa,YAAY,CAAChB,KAAK,CAAC,CAAC,CAACG,OAAO,CAACc,IAAI,CAACR,SAAS,EAAEC,SAAS,EAAE,cAAc,EAAE,WAAW,EAAG,GAAEH,MAAO,WAAU,CAAC,EAAE;QAC1IW,QAAQ,EAAE;MACZ,CAAC,CAAC;MACF,IAAAC,gBAAA,GAEIf,SAAS,CAACgB,KAAK,CAACL,SAAS,CAAC;QAD5BM,MAAM,GAAAF,gBAAA,CAANE,MAAM;MAER,OAAOA,MAAM,CAACC,YAAY,CAAC,sBAAsB,CAAC;IACpD;EACF,CAAC,CAAC,OAAAC,OAAA,EAAM;IACN,MAAM,KAAK7B,SAAS,CAAC,CAAC,CAAC8B,QAAQ,EAAG,yBAAwBjB,MAAO,uDAAsD,CAAC;EAC1H;EACA,OAAOC,aAAa;AACtB"},"metadata":{},"sourceType":"script","externalDependencies":[]}