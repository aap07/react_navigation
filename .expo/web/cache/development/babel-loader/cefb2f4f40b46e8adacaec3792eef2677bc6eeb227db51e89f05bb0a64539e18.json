{"ast":null,"code":"'use strict';\n\nfunction resolveEnd(end, offset, reqSpace, onError) {\n  var comment = '';\n  if (end) {\n    var hasSpace = false;\n    var sep = '';\n    for (var token of end) {\n      var source = token.source,\n        type = token.type;\n      switch (type) {\n        case 'space':\n          hasSpace = true;\n          break;\n        case 'comment':\n          {\n            if (reqSpace && !hasSpace) onError(token, 'MISSING_CHAR', 'Comments must be separated from other tokens by white space characters');\n            var cb = source.substring(1) || ' ';\n            if (!comment) comment = cb;else comment += sep + cb;\n            sep = '';\n            break;\n          }\n        case 'newline':\n          if (comment) sep += source;\n          hasSpace = true;\n          break;\n        default:\n          onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${type} at node end`);\n      }\n      offset += source.length;\n    }\n  }\n  return {\n    comment: comment,\n    offset: offset\n  };\n}\nexports.resolveEnd = resolveEnd;","map":{"version":3,"names":["resolveEnd","end","offset","reqSpace","onError","comment","hasSpace","sep","token","source","type","cb","substring","length","exports"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/dist/compose/resolve-end.js"],"sourcesContent":["'use strict';\n\nfunction resolveEnd(end, offset, reqSpace, onError) {\n    let comment = '';\n    if (end) {\n        let hasSpace = false;\n        let sep = '';\n        for (const token of end) {\n            const { source, type } = token;\n            switch (type) {\n                case 'space':\n                    hasSpace = true;\n                    break;\n                case 'comment': {\n                    if (reqSpace && !hasSpace)\n                        onError(token, 'MISSING_CHAR', 'Comments must be separated from other tokens by white space characters');\n                    const cb = source.substring(1) || ' ';\n                    if (!comment)\n                        comment = cb;\n                    else\n                        comment += sep + cb;\n                    sep = '';\n                    break;\n                }\n                case 'newline':\n                    if (comment)\n                        sep += source;\n                    hasSpace = true;\n                    break;\n                default:\n                    onError(token, 'UNEXPECTED_TOKEN', `Unexpected ${type} at node end`);\n            }\n            offset += source.length;\n        }\n    }\n    return { comment, offset };\n}\n\nexports.resolveEnd = resolveEnd;\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,UAAUA,CAACC,GAAG,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EAChD,IAAIC,OAAO,GAAG,EAAE;EAChB,IAAIJ,GAAG,EAAE;IACL,IAAIK,QAAQ,GAAG,KAAK;IACpB,IAAIC,GAAG,GAAG,EAAE;IACZ,KAAK,IAAMC,KAAK,IAAIP,GAAG,EAAE;MACrB,IAAQQ,MAAM,GAAWD,KAAK,CAAtBC,MAAM;QAAEC,IAAI,GAAKF,KAAK,CAAdE,IAAI;MACpB,QAAQA,IAAI;QACR,KAAK,OAAO;UACRJ,QAAQ,GAAG,IAAI;UACf;QACJ,KAAK,SAAS;UAAE;YACZ,IAAIH,QAAQ,IAAI,CAACG,QAAQ,EACrBF,OAAO,CAACI,KAAK,EAAE,cAAc,EAAE,wEAAwE,CAAC;YAC5G,IAAMG,EAAE,GAAGF,MAAM,CAACG,SAAS,CAAC,CAAC,CAAC,IAAI,GAAG;YACrC,IAAI,CAACP,OAAO,EACRA,OAAO,GAAGM,EAAE,CAAC,KAEbN,OAAO,IAAIE,GAAG,GAAGI,EAAE;YACvBJ,GAAG,GAAG,EAAE;YACR;UACJ;QACA,KAAK,SAAS;UACV,IAAIF,OAAO,EACPE,GAAG,IAAIE,MAAM;UACjBH,QAAQ,GAAG,IAAI;UACf;QACJ;UACIF,OAAO,CAACI,KAAK,EAAE,kBAAkB,EAAG,cAAaE,IAAK,cAAa,CAAC;MAC5E;MACAR,MAAM,IAAIO,MAAM,CAACI,MAAM;IAC3B;EACJ;EACA,OAAO;IAAER,OAAO,EAAPA,OAAO;IAAEH,MAAM,EAANA;EAAO,CAAC;AAC9B;AAEAY,OAAO,CAACd,UAAU,GAAGA,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}