{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar debug_1 = tslib_1.__importDefault(require(\"debug\"));\nvar mkdirp_1 = require(\"mkdirp\");\nvar fs_1 = require(\"fs\");\nvar constants_1 = require(\"./constants\");\nvar utils_1 = require(\"./utils\");\nvar certificate_authority_1 = require(\"./certificate-authority\");\nvar debug = debug_1.default('devcert:certificates');\nfunction generateDomainCertificate(domain) {\n  return tslib_1.__awaiter(this, void 0, void 0, function* () {\n    mkdirp_1.sync(constants_1.pathForDomain(domain));\n    debug(`Generating private key for ${domain}`);\n    var domainKeyPath = constants_1.pathForDomain(domain, 'private-key.key');\n    generateKey(domainKeyPath);\n    debug(`Generating certificate signing request for ${domain}`);\n    var csrFile = constants_1.pathForDomain(domain, `certificate-signing-request.csr`);\n    constants_1.withDomainSigningRequestConfig(domain, function (configpath) {\n      utils_1.openssl(['req', '-new', '-config', configpath, '-key', domainKeyPath, '-out', csrFile]);\n    });\n    debug(`Generating certificate for ${domain} from signing request and signing with root CA`);\n    var domainCertPath = constants_1.pathForDomain(domain, `certificate.crt`);\n    yield certificate_authority_1.withCertificateAuthorityCredentials(function (_ref) {\n      var caKeyPath = _ref.caKeyPath,\n        caCertPath = _ref.caCertPath;\n      constants_1.withDomainCertificateConfig(domain, function (domainCertConfigPath) {\n        utils_1.openssl(['ca', '-config', domainCertConfigPath, '-in', csrFile, '-out', domainCertPath, '-keyfile', caKeyPath, '-cert', caCertPath, '-days', '825', '-batch']);\n      });\n    });\n  });\n}\nexports.default = generateDomainCertificate;\nfunction generateKey(filename) {\n  debug(`generateKey: ${filename}`);\n  utils_1.openssl(['genrsa', '-out', filename, '2048']);\n  fs_1.chmodSync(filename, 400);\n}\nexports.generateKey = generateKey;","map":{"version":3,"names":["debug_1","tslib_1","__importDefault","require","mkdirp_1","fs_1","constants_1","utils_1","certificate_authority_1","debug","default","generateDomainCertificate","domain","sync","pathForDomain","domainKeyPath","generateKey","csrFile","withDomainSigningRequestConfig","configpath","openssl","domainCertPath","withCertificateAuthorityCredentials","_ref","caKeyPath","caCertPath","withDomainCertificateConfig","domainCertConfigPath","exports","filename","chmodSync"],"sources":["\\Users\\evanbacon\\Documents\\GitHub\\devcert\\certificates.ts"],"sourcesContent":["// import path from 'path';\nimport createDebug from 'debug';\nimport { sync as mkdirp } from 'mkdirp';\nimport { chmodSync as chmod } from 'fs';\nimport { pathForDomain, withDomainSigningRequestConfig, withDomainCertificateConfig } from './constants';\nimport { openssl } from './utils';\nimport { withCertificateAuthorityCredentials } from './certificate-authority';\n\nconst debug = createDebug('devcert:certificates');\n\n/**\n * Generate a domain certificate signed by the devcert root CA. Domain\n * certificates are cached in their own directories under\n * CONFIG_ROOT/domains/<domain>, and reused on subsequent requests. Because the\n * individual domain certificates are signed by the devcert root CA (which was\n * added to the OS/browser trust stores), they are trusted.\n */\nexport default async function generateDomainCertificate(domain: string): Promise<void> {\n  mkdirp(pathForDomain(domain));\n\n  debug(`Generating private key for ${ domain }`);\n  let domainKeyPath = pathForDomain(domain, 'private-key.key');\n  generateKey(domainKeyPath);\n\n  debug(`Generating certificate signing request for ${ domain }`);\n  let csrFile = pathForDomain(domain, `certificate-signing-request.csr`);\n  withDomainSigningRequestConfig(domain, (configpath) => {\n    openssl(['req', '-new', '-config', configpath, '-key', domainKeyPath, '-out', csrFile]);\n  });\n\n  debug(`Generating certificate for ${ domain } from signing request and signing with root CA`);\n  let domainCertPath = pathForDomain(domain, `certificate.crt`);\n\n  await withCertificateAuthorityCredentials(({ caKeyPath, caCertPath }) => {\n    withDomainCertificateConfig(domain, (domainCertConfigPath) => {\n      openssl(['ca', '-config', domainCertConfigPath, '-in', csrFile, '-out', domainCertPath, '-keyfile', caKeyPath, '-cert', caCertPath, '-days', '825', '-batch'])\n    });\n  });\n}\n\n// Generate a cryptographic key, used to sign certificates or certificate signing requests.\nexport function generateKey(filename: string): void {\n  debug(`generateKey: ${ filename }`);\n  openssl(['genrsa', '-out', filename, '2048']);\n  chmod(filename, 400);\n}"],"mappings":";;;;;;AACA,IAAAA,OAAA,GAAAC,OAAA,CAAAC,eAAA,CAAAC,OAAA;AACA,IAAAC,QAAA,GAAAD,OAAA;AACA,IAAAE,IAAA,GAAAF,OAAA;AACA,IAAAG,WAAA,GAAAH,OAAA;AACA,IAAAI,OAAA,GAAAJ,OAAA;AACA,IAAAK,uBAAA,GAAAL,OAAA;AAEA,IAAMM,KAAK,GAAGT,OAAA,CAAAU,OAAW,CAAC,sBAAsB,CAAC;AASjD,SAAAC,0BAAwDC,MAAc;;IACpER,QAAA,CAAAS,IAAM,CAACP,WAAA,CAAAQ,aAAa,CAACF,MAAM,CAAC,CAAC;IAE7BH,KAAK,CAAC,8BAA+BG,MAAO,EAAE,CAAC;IAC/C,IAAIG,aAAa,GAAGT,WAAA,CAAAQ,aAAa,CAACF,MAAM,EAAE,iBAAiB,CAAC;IAC5DI,WAAW,CAACD,aAAa,CAAC;IAE1BN,KAAK,CAAC,8CAA+CG,MAAO,EAAE,CAAC;IAC/D,IAAIK,OAAO,GAAGX,WAAA,CAAAQ,aAAa,CAACF,MAAM,EAAE,iCAAiC,CAAC;IACtEN,WAAA,CAAAY,8BAA8B,CAACN,MAAM,EAAE,UAACO,UAAU,EAAI;MACpDZ,OAAA,CAAAa,OAAO,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,SAAS,EAAED,UAAU,EAAE,MAAM,EAAEJ,aAAa,EAAE,MAAM,EAAEE,OAAO,CAAC,CAAC;IACzF,CAAC,CAAC;IAEFR,KAAK,CAAC,8BAA+BG,MAAO,gDAAgD,CAAC;IAC7F,IAAIS,cAAc,GAAGf,WAAA,CAAAQ,aAAa,CAACF,MAAM,EAAE,iBAAiB,CAAC;IAE7D,MAAMJ,uBAAA,CAAAc,mCAAmC,CAAC,UAAAC,IAAA,EAA8B;MAAA,IAA3BC,SAAS,GAAAD,IAAA,CAATC,SAAS;QAAEC,UAAU,GAAAF,IAAA,CAAVE,UAAU;MAChEnB,WAAA,CAAAoB,2BAA2B,CAACd,MAAM,EAAE,UAACe,oBAAoB,EAAI;QAC3DpB,OAAA,CAAAa,OAAO,CAAC,CAAC,IAAI,EAAE,SAAS,EAAEO,oBAAoB,EAAE,KAAK,EAAEV,OAAO,EAAE,MAAM,EAAEI,cAAc,EAAE,UAAU,EAAEG,SAAS,EAAE,OAAO,EAAEC,UAAU,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;MAChK,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;;AArBDG,OAAA,CAAAlB,OAAA,GAAAC,yBAAA;AAwBA,SAAAK,YAA4Ba,QAAgB;EAC1CpB,KAAK,CAAC,gBAAiBoB,QAAS,EAAE,CAAC;EACnCtB,OAAA,CAAAa,OAAO,CAAC,CAAC,QAAQ,EAAE,MAAM,EAAES,QAAQ,EAAE,MAAM,CAAC,CAAC;EAC7CxB,IAAA,CAAAyB,SAAK,CAACD,QAAQ,EAAE,GAAG,CAAC;AACtB;AAJAD,OAAA,CAAAZ,WAAA,GAAAA,WAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}