{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getVersionedNativeModulesAsync = getVersionedNativeModulesAsync;\nvar _jsonFile = _interopRequireDefault(require(\"@expo/json-file\"));\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _resolveFrom = _interopRequireDefault(require(\"resolve-from\"));\nvar _getNativeModuleVersions = require(\"../../../api/getNativeModuleVersions\");\nvar Log = _interopRequireWildcard(require(\"../../../log\"));\nvar _env = require(\"../../../utils/env\");\nvar _errors = require(\"../../../utils/errors\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar debug = require(\"debug\")(\"expo:doctor:dependencies:bundledNativeModules\");\nfunction getVersionedNativeModulesAsync(_x, _x2) {\n  return _getVersionedNativeModulesAsync.apply(this, arguments);\n}\nfunction _getVersionedNativeModulesAsync() {\n  _getVersionedNativeModulesAsync = _asyncToGenerator(function* (projectRoot, sdkVersion) {\n    if (sdkVersion !== \"UNVERSIONED\" && !_env.env.EXPO_OFFLINE) {\n      try {\n        debug(\"Fetching bundled native modules from the server...\");\n        return yield (0, _getNativeModuleVersions).getNativeModuleVersionsAsync(sdkVersion);\n      } catch (error) {\n        if (error instanceof _errors.CommandError && (error.code === \"OFFLINE\" || error.code === \"API\")) {\n          Log.warn(_chalk.default`Unable to reach well-known versions endpoint. Using local dependency map {bold expo/bundledNativeModules.json} for version validation`);\n        } else {\n          throw error;\n        }\n      }\n    }\n    debug(\"Fetching bundled native modules from the local JSON file...\");\n    return yield getBundledNativeModulesAsync(projectRoot);\n  });\n  return _getVersionedNativeModulesAsync.apply(this, arguments);\n}\nfunction getBundledNativeModulesAsync(_x3) {\n  return _getBundledNativeModulesAsync.apply(this, arguments);\n}\nfunction _getBundledNativeModulesAsync() {\n  _getBundledNativeModulesAsync = _asyncToGenerator(function* (projectRoot) {\n    var bundledNativeModulesPath = _resolveFrom.default.silent(projectRoot, \"expo/bundledNativeModules.json\");\n    if (!bundledNativeModulesPath) {\n      Log.log();\n      throw new _errors.CommandError(_chalk.default`The dependency map {bold expo/bundledNativeModules.json} cannot be found, please ensure you have the package \"{bold expo}\" installed in your project.`);\n    }\n    return yield _jsonFile.default.readAsync(bundledNativeModulesPath);\n  });\n  return _getBundledNativeModulesAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","getVersionedNativeModulesAsync","_jsonFile","_interopRequireDefault","_chalk","_resolveFrom","_getNativeModuleVersions","Log","_interopRequireWildcard","_env","_errors","debug","_x","_x2","_getVersionedNativeModulesAsync","apply","arguments","projectRoot","sdkVersion","env","EXPO_OFFLINE","getNativeModuleVersionsAsync","error","CommandError","code","warn","default","getBundledNativeModulesAsync","_x3","_getBundledNativeModulesAsync","bundledNativeModulesPath","silent","log","readAsync"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\doctor\\dependencies\\bundledNativeModules.ts"],"sourcesContent":["import JsonFile from '@expo/json-file';\nimport chalk from 'chalk';\nimport resolveFrom from 'resolve-from';\n\nimport { getNativeModuleVersionsAsync } from '../../../api/getNativeModuleVersions';\nimport * as Log from '../../../log';\nimport { env } from '../../../utils/env';\nimport { CommandError } from '../../../utils/errors';\n\nconst debug = require('debug')(\n  'expo:doctor:dependencies:bundledNativeModules'\n) as typeof console.log;\n\nexport type BundledNativeModules = Record<string, string>;\n\n/**\n * Gets the bundledNativeModules.json for a given SDK version:\n * - Tries to fetch the data from the /sdks/:sdkVersion/native-modules API endpoint.\n * - If the data is missing on the server (it can happen for SDKs that are yet fully released)\n *    or there's a downtime, reads the local .json file from the \"expo\" package.\n * - For UNVERSIONED, returns the local .json file contents.\n */\nexport async function getVersionedNativeModulesAsync(\n  projectRoot: string,\n  sdkVersion: string\n): Promise<BundledNativeModules> {\n  if (sdkVersion !== 'UNVERSIONED' && !env.EXPO_OFFLINE) {\n    try {\n      debug('Fetching bundled native modules from the server...');\n      return await getNativeModuleVersionsAsync(sdkVersion);\n    } catch (error: any) {\n      if (error instanceof CommandError && (error.code === 'OFFLINE' || error.code === 'API')) {\n        Log.warn(\n          chalk`Unable to reach well-known versions endpoint. Using local dependency map {bold expo/bundledNativeModules.json} for version validation`\n        );\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  debug('Fetching bundled native modules from the local JSON file...');\n  return await getBundledNativeModulesAsync(projectRoot);\n}\n\n/**\n * Get the legacy static `bundledNativeModules.json` file\n * that's shipped with the version of `expo` that the project has installed.\n */\nasync function getBundledNativeModulesAsync(projectRoot: string): Promise<BundledNativeModules> {\n  // TODO: Revisit now that this code is in the `expo` package.\n  const bundledNativeModulesPath = resolveFrom.silent(\n    projectRoot,\n    'expo/bundledNativeModules.json'\n  );\n  if (!bundledNativeModulesPath) {\n    Log.log();\n    throw new CommandError(\n      chalk`The dependency map {bold expo/bundledNativeModules.json} cannot be found, please ensure you have the package \"{bold expo}\" installed in your project.`\n    );\n  }\n  return await JsonFile.readAsync<BundledNativeModules>(bundledNativeModulesPath);\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,iBAAA,GAAAC,OAAA;;;;QAsBsBC,8BAA8B,GAA9BA,8BAA8B;AAtB/B,IAAAC,SAAiB,GAAAC,sBAAA,CAAAH,OAAA,CAAjB,iBAAiB;AACpB,IAAAI,MAAO,GAAAD,sBAAA,CAAAH,OAAA,CAAP,OAAO;AACD,IAAAK,YAAc,GAAAF,sBAAA,CAAAH,OAAA,CAAd,cAAc;AAEO,IAAAM,wBAAsC,GAAAN,OAAA;AACvE,IAAAO,GAAG,GAAAC,uBAAA,CAAAR,OAAA,eAAoB,EAApB;AACK,IAAAS,IAAoB,GAAAT,OAAA;AACX,IAAAU,OAAuB,GAAAV,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEpD,IAAMW,KAAK,GAAGX,OAAO,CAAC,OAAO,CAAC,CAC5B,+CAA+C,CAChD;AAAuB,SAWFC,8BAA8BA,CAAAW,EAAA,EAAAC,GAAA;EAAA,OAAAC,+BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,gCAAA;EAAAA,+BAAA,GAAAf,iBAAA,CAA7C,WACLkB,WAAmB,EACnBC,UAAkB,EACa;IAC/B,IAAIA,UAAU,KAAK,aAAa,IAAI,CAACT,IAAG,CAAAU,GAAA,CAACC,YAAY,EAAE;MACrD,IAAI;QACFT,KAAK,CAAC,oDAAoD,CAAC;QAC3D,aAAa,IAAAL,wBAA4B,EAAYe,4BAAZ,CAACH,UAAU,CAAC;OACtD,CAAC,OAAOI,KAAK,EAAO;QACnB,IAAIA,KAAK,YAAYZ,OAAY,CAAAa,YAAA,KAAKD,KAAK,CAACE,IAAI,KAAK,SAAS,IAAIF,KAAK,CAACE,IAAI,KAAK,KAAK,CAAC,EAAE;UACvFjB,GAAG,CAACkB,IAAI,CACNrB,MAAK,CAAAsB,OAAC,uIAAsI,CAC7I;SACF,MAAM;UACL,MAAMJ,KAAK;;;;IAKjBX,KAAK,CAAC,6DAA6D,CAAC;IACpE,aAAagB,4BAA4B,CAACV,WAAW,CAAC;GACvD;EAAA,OAAAH,+BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAMcW,4BAA4BA,CAAAC,GAAA;EAAA,OAAAC,6BAAA,CAAAd,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAa,8BAAA;EAAAA,6BAAA,GAAA9B,iBAAA,CAA3C,WAA4CkB,WAAmB,EAAiC;IAE9F,IAAMa,wBAAwB,GAAGzB,YAAW,CAAAqB,OAAA,CAACK,MAAM,CACjDd,WAAW,EACX,gCAAgC,CACjC;IACD,IAAI,CAACa,wBAAwB,EAAE;MAC7BvB,GAAG,CAACyB,GAAG,EAAE;MACT,MAAM,IAAItB,OAAY,CAAAa,YAAA,CACpBnB,MAAK,CAAAsB,OAAC,uJAAsJ,CAC7J;;IAEH,aAAaxB,SAAQ,CAAAwB,OAAA,CAACO,SAAS,CAAuBH,wBAAwB,CAAC;GAChF;EAAA,OAAAD,6BAAA,CAAAd,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}