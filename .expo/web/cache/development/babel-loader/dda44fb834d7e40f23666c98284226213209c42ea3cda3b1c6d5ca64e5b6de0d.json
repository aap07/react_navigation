{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.applyPlugin = applyPlugin;\nexports.getGoogleServicesFilePath = getGoogleServicesFilePath;\nexports.setClassPath = setClassPath;\nexports.setGoogleServicesFile = setGoogleServicesFile;\nexports.withGoogleServicesFile = exports.withClassPath = exports.withApplyPlugin = void 0;\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _withDangerousMod() {\n  var data = require(\"../plugins/withDangerousMod\");\n  _withDangerousMod = function _withDangerousMod() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = require(\"../utils/fs\");\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n  _warnings = function _warnings() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar DEFAULT_TARGET_PATH = './android/app/google-services.json';\nvar googleServicesClassPath = 'com.google.gms:google-services';\nvar googleServicesPlugin = 'com.google.gms.google-services';\nvar googleServicesVersion = '4.3.3';\nvar withClassPath = function withClassPath(config) {\n  return (0, _androidPlugins().withProjectBuildGradle)(config, function (config) {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setClassPath(config, config.modResults.contents);\n    } else {\n      (0, _warnings().addWarningAndroid)('android.googleServicesFile', `Cannot automatically configure project build.gradle if it's not groovy`);\n    }\n    return config;\n  });\n};\nexports.withClassPath = withClassPath;\nvar withApplyPlugin = function withApplyPlugin(config) {\n  return (0, _androidPlugins().withAppBuildGradle)(config, function (config) {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = applyPlugin(config, config.modResults.contents);\n    } else {\n      (0, _warnings().addWarningAndroid)('android.googleServicesFile', `Cannot automatically configure app build.gradle if it's not groovy`);\n    }\n    return config;\n  });\n};\nexports.withApplyPlugin = withApplyPlugin;\nvar withGoogleServicesFile = function withGoogleServicesFile(config) {\n  return (0, _withDangerousMod().withDangerousMod)(config, ['android', function () {\n    var _ref = _asyncToGenerator(function* (config) {\n      yield setGoogleServicesFile(config, config.modRequest.projectRoot);\n      return config;\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }()]);\n};\nexports.withGoogleServicesFile = withGoogleServicesFile;\nfunction getGoogleServicesFilePath(config) {\n  var _config$android$googl, _config$android;\n  return (_config$android$googl = (_config$android = config.android) === null || _config$android === void 0 ? void 0 : _config$android.googleServicesFile) !== null && _config$android$googl !== void 0 ? _config$android$googl : null;\n}\nfunction setGoogleServicesFile(_x2, _x3) {\n  return _setGoogleServicesFile.apply(this, arguments);\n}\nfunction _setGoogleServicesFile() {\n  _setGoogleServicesFile = _asyncToGenerator(function* (config, projectRoot) {\n    var targetPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_TARGET_PATH;\n    var partialSourcePath = getGoogleServicesFilePath(config);\n    if (!partialSourcePath) {\n      return false;\n    }\n    var completeSourcePath = _path().default.resolve(projectRoot, partialSourcePath);\n    var destinationPath = _path().default.resolve(projectRoot, targetPath);\n    try {\n      yield (0, _fs().copyFilePathToPathAsync)(completeSourcePath, destinationPath);\n    } catch (e) {\n      console.log(e);\n      throw new Error(`Cannot copy google-services.json from ${completeSourcePath} to ${destinationPath}. Please make sure the source and destination paths exist.`);\n    }\n    return true;\n  });\n  return _setGoogleServicesFile.apply(this, arguments);\n}\nfunction setClassPath(config, buildGradle) {\n  var googleServicesFile = getGoogleServicesFilePath(config);\n  if (!googleServicesFile) {\n    return buildGradle;\n  }\n  if (buildGradle.includes(googleServicesClassPath)) {\n    return buildGradle;\n  }\n  return buildGradle.replace(/dependencies\\s?{/, `dependencies {\n        classpath '${googleServicesClassPath}:${googleServicesVersion}'`);\n}\nfunction applyPlugin(config, appBuildGradle) {\n  var googleServicesFile = getGoogleServicesFilePath(config);\n  if (!googleServicesFile) {\n    return appBuildGradle;\n  }\n  var pattern = new RegExp(`apply\\\\s+plugin:\\\\s+['\"]${googleServicesPlugin}['\"]`);\n  if (appBuildGradle.match(pattern)) {\n    return appBuildGradle;\n  }\n  return appBuildGradle + `\\napply plugin: '${googleServicesPlugin}'`;\n}","map":{"version":3,"names":["_path","data","_interopRequireDefault","require","_androidPlugins","_withDangerousMod","_fs","_warnings","obj","__esModule","default","DEFAULT_TARGET_PATH","googleServicesClassPath","googleServicesPlugin","googleServicesVersion","withClassPath","config","withProjectBuildGradle","modResults","language","contents","setClassPath","addWarningAndroid","exports","withApplyPlugin","withAppBuildGradle","applyPlugin","withGoogleServicesFile","withDangerousMod","_ref","_asyncToGenerator","setGoogleServicesFile","modRequest","projectRoot","_x","apply","arguments","getGoogleServicesFilePath","_config$android$googl","_config$android","android","googleServicesFile","_x2","_x3","_setGoogleServicesFile","targetPath","length","undefined","partialSourcePath","completeSourcePath","resolve","destinationPath","copyFilePathToPathAsync","e","console","log","Error","buildGradle","includes","replace","appBuildGradle","pattern","RegExp","match"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\android\\GoogleServices.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport path from 'path';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAppBuildGradle, withProjectBuildGradle } from '../plugins/android-plugins';\nimport { withDangerousMod } from '../plugins/withDangerousMod';\nimport { copyFilePathToPathAsync } from '../utils/fs';\nimport { addWarningAndroid } from '../utils/warnings';\n\nconst DEFAULT_TARGET_PATH = './android/app/google-services.json';\n\nconst googleServicesClassPath = 'com.google.gms:google-services';\nconst googleServicesPlugin = 'com.google.gms.google-services';\n\n// NOTE(brentvatne): This may be annoying to keep up to date...\nconst googleServicesVersion = '4.3.3';\n\nexport const withClassPath: ConfigPlugin = (config) => {\n  return withProjectBuildGradle(config, (config) => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setClassPath(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'android.googleServicesFile',\n        `Cannot automatically configure project build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\nexport const withApplyPlugin: ConfigPlugin = (config) => {\n  return withAppBuildGradle(config, (config) => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = applyPlugin(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'android.googleServicesFile',\n        `Cannot automatically configure app build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\n/**\n * Add `google-services.json` to project\n */\nexport const withGoogleServicesFile: ConfigPlugin = (config) => {\n  return withDangerousMod(config, [\n    'android',\n    async (config) => {\n      await setGoogleServicesFile(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport function getGoogleServicesFilePath(config: Pick<ExpoConfig, 'android'>) {\n  return config.android?.googleServicesFile ?? null;\n}\n\nexport async function setGoogleServicesFile(\n  config: Pick<ExpoConfig, 'android'>,\n  projectRoot: string,\n  targetPath: string = DEFAULT_TARGET_PATH\n) {\n  const partialSourcePath = getGoogleServicesFilePath(config);\n  if (!partialSourcePath) {\n    return false;\n  }\n\n  const completeSourcePath = path.resolve(projectRoot, partialSourcePath);\n  const destinationPath = path.resolve(projectRoot, targetPath);\n\n  try {\n    await copyFilePathToPathAsync(completeSourcePath, destinationPath);\n  } catch (e) {\n    console.log(e);\n    throw new Error(\n      `Cannot copy google-services.json from ${completeSourcePath} to ${destinationPath}. Please make sure the source and destination paths exist.`\n    );\n  }\n  return true;\n}\n\n/**\n * Adding the Google Services plugin\n * NOTE(brentvatne): string replacement is a fragile approach! we need a\n * better solution than this.\n */\nexport function setClassPath(config: Pick<ExpoConfig, 'android'>, buildGradle: string) {\n  const googleServicesFile = getGoogleServicesFilePath(config);\n  if (!googleServicesFile) {\n    return buildGradle;\n  }\n\n  if (buildGradle.includes(googleServicesClassPath)) {\n    return buildGradle;\n  }\n\n  //\n  return buildGradle.replace(\n    /dependencies\\s?{/,\n    `dependencies {\n        classpath '${googleServicesClassPath}:${googleServicesVersion}'`\n  );\n}\n\nexport function applyPlugin(config: Pick<ExpoConfig, 'android'>, appBuildGradle: string) {\n  const googleServicesFile = getGoogleServicesFilePath(config);\n  if (!googleServicesFile) {\n    return appBuildGradle;\n  }\n\n  // Make sure the project does not have the plugin already\n  const pattern = new RegExp(`apply\\\\s+plugin:\\\\s+['\"]${googleServicesPlugin}['\"]`);\n  if (appBuildGradle.match(pattern)) {\n    return appBuildGradle;\n  }\n\n  // Add it to the end of the file\n  return appBuildGradle + `\\napply plugin: '${googleServicesPlugin}'`;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}