{"ast":null,"code":"'use strict';\n\nvar RNCodegen = require(\"../../generators/RNCodegen.js\");\nvar fs = require('fs');\nvar mkdirp = require('mkdirp');\nvar args = process.argv.slice(2);\nif (args.length < 3) {\n  throw new Error(`Expected to receive path to schema, library name, output directory and module spec name. Received ${args.join(', ')}`);\n}\nvar schemaPath = args[0];\nvar libraryName = args[1];\nvar outputDirectory = args[2];\nvar packageName = args[3];\nvar assumeNonnull = args[4] === 'true' || args[4] === 'True';\nvar schemaText = fs.readFileSync(schemaPath, 'utf-8');\nif (schemaText == null) {\n  throw new Error(`Can't find schema at ${schemaPath}`);\n}\nmkdirp.sync(outputDirectory);\nvar schema;\ntry {\n  schema = JSON.parse(schemaText);\n} catch (err) {\n  throw new Error(`Can't parse schema to JSON. ${schemaPath}`);\n}\nRNCodegen.generate({\n  libraryName: libraryName,\n  schema: schema,\n  outputDirectory: outputDirectory,\n  packageName: packageName,\n  assumeNonnull: assumeNonnull\n}, {\n  generators: ['descriptors', 'events', 'props', 'states', 'tests', 'shadow-nodes', 'modulesAndroid', 'modulesCxx', 'modulesIOS']\n});","map":{"version":3,"names":["RNCodegen","require","fs","mkdirp","args","process","argv","slice","length","Error","join","schemaPath","libraryName","outputDirectory","packageName","assumeNonnull","schemaText","readFileSync","sync","schema","JSON","parse","err","generate","generators"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native/codegen/lib/cli/generators/generate-all.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * @format\n */\n\n/**\n * This generates all possible outputs by executing all available generators.\n */\n\n'use strict';\n\nconst RNCodegen = require('../../generators/RNCodegen.js');\nconst fs = require('fs');\nconst mkdirp = require('mkdirp');\nconst args = process.argv.slice(2);\nif (args.length < 3) {\n  throw new Error(\n    `Expected to receive path to schema, library name, output directory and module spec name. Received ${args.join(\n      ', ',\n    )}`,\n  );\n}\nconst schemaPath = args[0];\nconst libraryName = args[1];\nconst outputDirectory = args[2];\nconst packageName = args[3];\nconst assumeNonnull = args[4] === 'true' || args[4] === 'True';\nconst schemaText = fs.readFileSync(schemaPath, 'utf-8');\nif (schemaText == null) {\n  throw new Error(`Can't find schema at ${schemaPath}`);\n}\nmkdirp.sync(outputDirectory);\nlet schema;\ntry {\n  schema = JSON.parse(schemaText);\n} catch (err) {\n  throw new Error(`Can't parse schema to JSON. ${schemaPath}`);\n}\nRNCodegen.generate(\n  {\n    libraryName,\n    schema,\n    outputDirectory,\n    packageName,\n    assumeNonnull,\n  },\n  {\n    generators: [\n      'descriptors',\n      'events',\n      'props',\n      'states',\n      'tests',\n      'shadow-nodes',\n      'modulesAndroid',\n      'modulesCxx',\n      'modulesIOS',\n    ],\n  },\n);\n"],"mappings":"AAcA,YAAY;;AAEZ,IAAMA,SAAS,GAAGC,OAAO,gCAAgC,CAAC;AAC1D,IAAMC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;AACxB,IAAME,MAAM,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAChC,IAAMG,IAAI,GAAGC,OAAO,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC;AAClC,IAAIH,IAAI,CAACI,MAAM,GAAG,CAAC,EAAE;EACnB,MAAM,IAAIC,KAAK,CACZ,qGAAoGL,IAAI,CAACM,IAAI,CAC5G,IACF,CAAE,EACJ,CAAC;AACH;AACA,IAAMC,UAAU,GAAGP,IAAI,CAAC,CAAC,CAAC;AAC1B,IAAMQ,WAAW,GAAGR,IAAI,CAAC,CAAC,CAAC;AAC3B,IAAMS,eAAe,GAAGT,IAAI,CAAC,CAAC,CAAC;AAC/B,IAAMU,WAAW,GAAGV,IAAI,CAAC,CAAC,CAAC;AAC3B,IAAMW,aAAa,GAAGX,IAAI,CAAC,CAAC,CAAC,KAAK,MAAM,IAAIA,IAAI,CAAC,CAAC,CAAC,KAAK,MAAM;AAC9D,IAAMY,UAAU,GAAGd,EAAE,CAACe,YAAY,CAACN,UAAU,EAAE,OAAO,CAAC;AACvD,IAAIK,UAAU,IAAI,IAAI,EAAE;EACtB,MAAM,IAAIP,KAAK,CAAE,wBAAuBE,UAAW,EAAC,CAAC;AACvD;AACAR,MAAM,CAACe,IAAI,CAACL,eAAe,CAAC;AAC5B,IAAIM,MAAM;AACV,IAAI;EACFA,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC;AACjC,CAAC,CAAC,OAAOM,GAAG,EAAE;EACZ,MAAM,IAAIb,KAAK,CAAE,+BAA8BE,UAAW,EAAC,CAAC;AAC9D;AACAX,SAAS,CAACuB,QAAQ,CAChB;EACEX,WAAW,EAAXA,WAAW;EACXO,MAAM,EAANA,MAAM;EACNN,eAAe,EAAfA,eAAe;EACfC,WAAW,EAAXA,WAAW;EACXC,aAAa,EAAbA;AACF,CAAC,EACD;EACES,UAAU,EAAE,CACV,aAAa,EACb,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,OAAO,EACP,cAAc,EACd,gBAAgB,EAChB,YAAY,EACZ,YAAY;AAEhB,CACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}