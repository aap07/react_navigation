{"ast":null,"code":"import DiscreteGestureHandler from \"./DiscreteGestureHandler\";","map":{"version":3,"names":["DiscreteGestureHandler"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/react-native-gesture-handler/lib/typescript/web_hammer/TapGestureHandler.d.ts"],"sourcesContent":["import DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { HammerInputExt } from './GestureHandler';\ndeclare class TapGestureHandler extends DiscreteGestureHandler {\n    private _shouldFireEndEvent;\n    private _timer;\n    private _multiTapTimer;\n    get name(): string;\n    get NativeGestureClass(): TapRecognizerStatic;\n    get maxDelayMs(): any;\n    simulateCancelEvent(inputData: HammerInputExt): void;\n    onGestureActivated(ev: HammerInputExt): void;\n    onSuccessfulTap: (ev: HammerInputExt) => void;\n    onRawEvent(ev: HammerInput): void;\n    getHammerConfig(): {\n        event: string;\n        taps: any;\n        interval: any;\n        time: any;\n        pointers: number | undefined;\n    };\n    updateGestureConfig({ shouldCancelWhenOutside, maxDeltaX, maxDeltaY, numberOfTaps, minDurationMs, maxDelayMs, maxDurationMs, maxDist, minPointers, maxPointers, ...props }: {\n        [x: string]: any;\n        shouldCancelWhenOutside?: boolean | undefined;\n        maxDeltaX?: number | undefined;\n        maxDeltaY?: number | undefined;\n        numberOfTaps?: number | undefined;\n        minDurationMs?: number | undefined;\n        maxDelayMs?: number | undefined;\n        maxDurationMs?: number | undefined;\n        maxDist?: number | undefined;\n        minPointers?: number | undefined;\n        maxPointers?: number | undefined;\n    }): Partial<{\n        enabled: boolean;\n        minPointers: number;\n        maxPointers: number;\n        minDist: number;\n        minDistSq: number;\n        minVelocity: number;\n        minVelocitySq: number;\n        maxDist: number;\n        maxDistSq: number;\n        failOffsetXStart: number;\n        failOffsetYStart: number;\n        failOffsetXEnd: number;\n        failOffsetYEnd: number;\n        activeOffsetXStart: number;\n        activeOffsetXEnd: number;\n        activeOffsetYStart: number;\n        activeOffsetYEnd: number;\n        waitFor: any[] | null;\n        simultaneousHandlers: any[] | null;\n    }>;\n    onGestureEnded(...props: any): void;\n    onWaitingEnded(_gesture: any): void;\n}\nexport default TapGestureHandler;\n"],"mappings":"AAAA,OAAOA,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}