{"ast":null,"code":"import { ContinousBaseGesture } from \"./gesture\";","map":{"version":3,"names":["ContinousBaseGesture"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/react-native-gesture-handler/lib/typescript/handlers/gestures/panGesture.d.ts"],"sourcesContent":["import { BaseGestureConfig, ContinousBaseGesture } from './gesture';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\nimport { PanGestureConfig, PanGestureHandlerEventPayload } from '../PanGestureHandler';\nexport declare type PanGestureChangeEventPayload = {\n    changeX: number;\n    changeY: number;\n};\nexport declare class PanGesture extends ContinousBaseGesture<PanGestureHandlerEventPayload, PanGestureChangeEventPayload> {\n    config: BaseGestureConfig & PanGestureConfig;\n    constructor();\n    activeOffsetY(offset: number | number[]): this;\n    activeOffsetX(offset: number | number[]): this;\n    failOffsetY(offset: number | number[]): this;\n    failOffsetX(offset: number | number[]): this;\n    minPointers(minPointers: number): this;\n    maxPointers(maxPointers: number): this;\n    minDistance(distance: number): this;\n    minVelocity(velocity: number): this;\n    minVelocityX(velocity: number): this;\n    minVelocityY(velocity: number): this;\n    averageTouches(value: boolean): this;\n    enableTrackpadTwoFingerGesture(value: boolean): this;\n    activateAfterLongPress(duration: number): this;\n    onChange(callback: (event: GestureUpdateEvent<PanGestureHandlerEventPayload & PanGestureChangeEventPayload>) => void): this;\n}\nexport declare type PanGestureType = InstanceType<typeof PanGesture>;\n"],"mappings":"AAAA,SAA4BA,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}