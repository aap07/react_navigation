{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport VelocityTracker from \"./VelocityTracker\";\nvar MAX_POINTERS = 20;\nvar PointerTracker = function () {\n  function PointerTracker() {\n    _classCallCheck(this, PointerTracker);\n    this.velocityTracker = new VelocityTracker();\n    this.trackedPointers = new Map();\n    this.touchEventsIds = new Map();\n    this.cachedAverages = {\n      x: 0,\n      y: 0\n    };\n    this.lastMovedPointerId = NaN;\n    for (var i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n  _createClass(PointerTracker, [{\n    key: \"addToTracker\",\n    value: function addToTracker(event) {\n      if (this.trackedPointers.has(event.pointerId)) {\n        return;\n      }\n      this.lastMovedPointerId = event.pointerId;\n      var newElement = {\n        lastX: event.x,\n        lastY: event.y,\n        timeStamp: event.time,\n        velocityX: 0,\n        velocityY: 0\n      };\n      this.trackedPointers.set(event.pointerId, newElement);\n      this.mapTouchEventId(event.pointerId);\n      this.cachedAverages = {\n        x: this.getLastAvgX(),\n        y: this.getLastAvgY()\n      };\n    }\n  }, {\n    key: \"removeFromTracker\",\n    value: function removeFromTracker(pointerId) {\n      this.trackedPointers.delete(pointerId);\n      this.removeMappedTouchId(pointerId);\n    }\n  }, {\n    key: \"track\",\n    value: function track(event) {\n      var element = this.trackedPointers.get(event.pointerId);\n      if (!element) {\n        return;\n      }\n      this.lastMovedPointerId = event.pointerId;\n      this.velocityTracker.add(event);\n      var _this$velocityTracker = this.velocityTracker.getVelocity(),\n        _this$velocityTracker2 = _slicedToArray(_this$velocityTracker, 2),\n        velocityX = _this$velocityTracker2[0],\n        velocityY = _this$velocityTracker2[1];\n      element.velocityX = velocityX;\n      element.velocityY = velocityY;\n      element.lastX = event.x;\n      element.lastY = event.y;\n      this.trackedPointers.set(event.pointerId, element);\n      var avgX = this.getLastAvgX();\n      var avgY = this.getLastAvgY();\n      this.cachedAverages = {\n        x: avgX,\n        y: avgY\n      };\n    }\n  }, {\n    key: \"mapTouchEventId\",\n    value: function mapTouchEventId(id) {\n      for (var _ref of this.touchEventsIds) {\n        var _ref2 = _slicedToArray(_ref, 2);\n        var mappedId = _ref2[0];\n        var touchId = _ref2[1];\n        if (isNaN(touchId)) {\n          this.touchEventsIds.set(mappedId, id);\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"removeMappedTouchId\",\n    value: function removeMappedTouchId(id) {\n      var mappedId = this.getMappedTouchEventId(id);\n      if (!isNaN(mappedId)) {\n        this.touchEventsIds.set(mappedId, NaN);\n      }\n    }\n  }, {\n    key: \"getMappedTouchEventId\",\n    value: function getMappedTouchEventId(touchEventId) {\n      for (var _ref3 of this.touchEventsIds.entries()) {\n        var _ref4 = _slicedToArray(_ref3, 2);\n        var key = _ref4[0];\n        var value = _ref4[1];\n        if (value === touchEventId) {\n          return key;\n        }\n      }\n      return NaN;\n    }\n  }, {\n    key: \"getVelocityX\",\n    value: function getVelocityX(pointerId) {\n      var _this$trackedPointers;\n      return (_this$trackedPointers = this.trackedPointers.get(pointerId)) == null ? void 0 : _this$trackedPointers.velocityX;\n    }\n  }, {\n    key: \"getVelocityY\",\n    value: function getVelocityY(pointerId) {\n      var _this$trackedPointers2;\n      return (_this$trackedPointers2 = this.trackedPointers.get(pointerId)) == null ? void 0 : _this$trackedPointers2.velocityY;\n    }\n  }, {\n    key: \"getLastX\",\n    value: function getLastX(pointerId) {\n      if (pointerId !== undefined) {\n        var _this$trackedPointers3;\n        return (_this$trackedPointers3 = this.trackedPointers.get(pointerId)) == null ? void 0 : _this$trackedPointers3.lastX;\n      } else {\n        var _this$trackedPointers4;\n        return (_this$trackedPointers4 = this.trackedPointers.get(this.lastMovedPointerId)) == null ? void 0 : _this$trackedPointers4.lastX;\n      }\n    }\n  }, {\n    key: \"getLastY\",\n    value: function getLastY(pointerId) {\n      if (pointerId !== undefined) {\n        var _this$trackedPointers5;\n        return (_this$trackedPointers5 = this.trackedPointers.get(pointerId)) == null ? void 0 : _this$trackedPointers5.lastY;\n      } else {\n        var _this$trackedPointers6;\n        return (_this$trackedPointers6 = this.trackedPointers.get(this.lastMovedPointerId)) == null ? void 0 : _this$trackedPointers6.lastY;\n      }\n    }\n  }, {\n    key: \"getLastAvgX\",\n    value: function getLastAvgX() {\n      var avgX = this.getSumX() / this.trackedPointers.size;\n      return isNaN(avgX) ? this.cachedAverages.x : avgX;\n    }\n  }, {\n    key: \"getLastAvgY\",\n    value: function getLastAvgY() {\n      var avgY = this.getSumY() / this.trackedPointers.size;\n      return isNaN(avgY) ? this.cachedAverages.y : avgY;\n    }\n  }, {\n    key: \"getSumX\",\n    value: function getSumX(ignoredPointer) {\n      var sumX = 0;\n      this.trackedPointers.forEach(function (value, key) {\n        if (key !== ignoredPointer) {\n          sumX += value.lastX;\n        }\n      });\n      return sumX;\n    }\n  }, {\n    key: \"getSumY\",\n    value: function getSumY(ignoredPointer) {\n      var sumY = 0;\n      this.trackedPointers.forEach(function (value, key) {\n        if (key !== ignoredPointer) {\n          sumY += value.lastY;\n        }\n      });\n      return sumY;\n    }\n  }, {\n    key: \"getTrackedPointersCount\",\n    value: function getTrackedPointersCount() {\n      return this.trackedPointers.size;\n    }\n  }, {\n    key: \"getTrackedPointersID\",\n    value: function getTrackedPointersID() {\n      var keys = [];\n      this.trackedPointers.forEach(function (_value, key) {\n        keys.push(key);\n      });\n      return keys;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData() {\n      return this.trackedPointers;\n    }\n  }, {\n    key: \"resetTracker\",\n    value: function resetTracker() {\n      this.velocityTracker.reset();\n      this.trackedPointers.clear();\n      this.lastMovedPointerId = NaN;\n      for (var i = 0; i < MAX_POINTERS; ++i) {\n        this.touchEventsIds.set(i, NaN);\n      }\n    }\n  }], [{\n    key: \"shareCommonPointers\",\n    value: function shareCommonPointers(stPointers, ndPointers) {\n      return stPointers.some(function (pointerId) {\n        return ndPointers.includes(pointerId);\n      });\n    }\n  }]);\n  return PointerTracker;\n}();\nexport { PointerTracker as default };","map":{"version":3,"names":["VelocityTracker","MAX_POINTERS","PointerTracker","_classCallCheck","velocityTracker","trackedPointers","Map","touchEventsIds","cachedAverages","x","y","lastMovedPointerId","NaN","i","set","_createClass","key","value","addToTracker","event","has","pointerId","newElement","lastX","lastY","timeStamp","time","velocityX","velocityY","mapTouchEventId","getLastAvgX","getLastAvgY","removeFromTracker","delete","removeMappedTouchId","track","element","get","add","_this$velocityTracker","getVelocity","_this$velocityTracker2","_slicedToArray","avgX","avgY","id","_ref","_ref2","mappedId","touchId","isNaN","getMappedTouchEventId","touchEventId","_ref3","entries","_ref4","getVelocityX","_this$trackedPointers","getVelocityY","_this$trackedPointers2","getLastX","undefined","_this$trackedPointers3","_this$trackedPointers4","getLastY","_this$trackedPointers5","_this$trackedPointers6","getSumX","size","getSumY","ignoredPointer","sumX","forEach","sumY","getTrackedPointersCount","getTrackedPointersID","keys","_value","push","getData","resetTracker","reset","clear","shareCommonPointers","stPointers","ndPointers","some","includes","default"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/react-native-gesture-handler/src/web/tools/PointerTracker.ts"],"sourcesContent":["import { AdaptedEvent } from '../interfaces';\nimport VelocityTracker from './VelocityTracker';\n\nexport interface TrackerElement {\n  lastX: number;\n  lastY: number;\n\n  timeStamp: number;\n\n  velocityX: number;\n  velocityY: number;\n}\n\nconst MAX_POINTERS = 20;\n\nexport default class PointerTracker {\n  private velocityTracker = new VelocityTracker();\n  private trackedPointers: Map<number, TrackerElement> = new Map<\n    number,\n    TrackerElement\n  >();\n\n  private touchEventsIds: Map<number, number> = new Map<number, number>();\n\n  private lastMovedPointerId: number;\n\n  private cachedAverages: { x: number; y: number } = { x: 0, y: 0 };\n\n  public constructor() {\n    this.lastMovedPointerId = NaN;\n\n    for (let i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n\n  public addToTracker(event: AdaptedEvent): void {\n    if (this.trackedPointers.has(event.pointerId)) {\n      return;\n    }\n\n    this.lastMovedPointerId = event.pointerId;\n\n    const newElement: TrackerElement = {\n      lastX: event.x,\n      lastY: event.y,\n      timeStamp: event.time,\n      velocityX: 0,\n      velocityY: 0,\n    };\n\n    this.trackedPointers.set(event.pointerId, newElement);\n    this.mapTouchEventId(event.pointerId);\n\n    this.cachedAverages = {\n      x: this.getLastAvgX(),\n      y: this.getLastAvgY(),\n    };\n  }\n\n  public removeFromTracker(pointerId: number): void {\n    this.trackedPointers.delete(pointerId);\n    this.removeMappedTouchId(pointerId);\n  }\n\n  public track(event: AdaptedEvent): void {\n    const element: TrackerElement = this.trackedPointers.get(\n      event.pointerId\n    ) as TrackerElement;\n\n    if (!element) {\n      return;\n    }\n\n    this.lastMovedPointerId = event.pointerId;\n\n    this.velocityTracker.add(event);\n    const [velocityX, velocityY] = this.velocityTracker.getVelocity();\n\n    element.velocityX = velocityX;\n    element.velocityY = velocityY;\n\n    element.lastX = event.x;\n    element.lastY = event.y;\n\n    this.trackedPointers.set(event.pointerId, element);\n\n    const avgX: number = this.getLastAvgX();\n    const avgY: number = this.getLastAvgY();\n\n    this.cachedAverages = {\n      x: avgX,\n      y: avgY,\n    };\n  }\n\n  //Mapping TouchEvents ID\n  private mapTouchEventId(id: number): void {\n    for (const [mappedId, touchId] of this.touchEventsIds) {\n      if (isNaN(touchId)) {\n        this.touchEventsIds.set(mappedId, id);\n        break;\n      }\n    }\n  }\n\n  private removeMappedTouchId(id: number): void {\n    const mappedId: number = this.getMappedTouchEventId(id);\n    if (!isNaN(mappedId)) {\n      this.touchEventsIds.set(mappedId, NaN);\n    }\n  }\n\n  public getMappedTouchEventId(touchEventId: number): number {\n    for (const [key, value] of this.touchEventsIds.entries()) {\n      if (value === touchEventId) {\n        return key;\n      }\n    }\n\n    return NaN;\n  }\n\n  public getVelocityX(pointerId: number): number {\n    return this.trackedPointers.get(pointerId)?.velocityX as number;\n  }\n  public getVelocityY(pointerId: number): number {\n    return this.trackedPointers.get(pointerId)?.velocityY as number;\n  }\n\n  /**\n   * Returns X coordinate of last moved pointer\n   */\n  public getLastX(): number;\n\n  /**\n   *\n   * @param pointerId\n   * Returns X coordinate of given pointer\n   */\n  // eslint-disable-next-line @typescript-eslint/unified-signatures\n  public getLastX(pointerId: number): number;\n\n  public getLastX(pointerId?: number): number {\n    if (pointerId !== undefined) {\n      return this.trackedPointers.get(pointerId)?.lastX as number;\n    } else {\n      return this.trackedPointers.get(this.lastMovedPointerId)?.lastX as number;\n    }\n  }\n\n  /**\n   * Returns Y coordinate of last moved pointer\n   */\n  public getLastY(): number;\n\n  /**\n   *\n   * @param pointerId\n   * Returns Y coordinate of given pointer\n   */\n  // eslint-disable-next-line @typescript-eslint/unified-signatures\n  public getLastY(pointerId: number): number;\n\n  public getLastY(pointerId?: number): number {\n    if (pointerId !== undefined) {\n      return this.trackedPointers.get(pointerId)?.lastY as number;\n    } else {\n      return this.trackedPointers.get(this.lastMovedPointerId)?.lastY as number;\n    }\n  }\n\n  // Some handlers use these methods to send average values in native event.\n  // This may happen when pointers have already been removed from tracker (i.e. pointerup event).\n  // In situation when NaN would be sent as a response, we return cached value.\n  // That prevents handlers from crashing\n  public getLastAvgX(): number {\n    const avgX: number = this.getSumX() / this.trackedPointers.size;\n    return isNaN(avgX) ? this.cachedAverages.x : avgX;\n  }\n  public getLastAvgY(): number {\n    const avgY: number = this.getSumY() / this.trackedPointers.size;\n    return isNaN(avgY) ? this.cachedAverages.y : avgY;\n  }\n  public getSumX(ignoredPointer?: number): number {\n    let sumX = 0;\n\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sumX += value.lastX;\n      }\n    });\n\n    return sumX;\n  }\n  public getSumY(ignoredPointer?: number): number {\n    let sumY = 0;\n\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sumY += value.lastY;\n      }\n    });\n\n    return sumY;\n  }\n  public getTrackedPointersCount(): number {\n    return this.trackedPointers.size;\n  }\n  public getTrackedPointersID(): number[] {\n    const keys: number[] = [];\n\n    this.trackedPointers.forEach((_value, key) => {\n      keys.push(key);\n    });\n\n    return keys;\n  }\n\n  public getData(): Map<number, TrackerElement> {\n    return this.trackedPointers;\n  }\n\n  public resetTracker(): void {\n    this.velocityTracker.reset();\n    this.trackedPointers.clear();\n    this.lastMovedPointerId = NaN;\n\n    for (let i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n\n  public static shareCommonPointers(\n    stPointers: number[],\n    ndPointers: number[]\n  ): boolean {\n    return stPointers.some((pointerId) => ndPointers.includes(pointerId));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}