{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/dev-server/build/middleware/devServerMiddleware.d.ts"],"sourcesContent":["/// <reference types=\"expo__bunyan\" />\n/// <reference types=\"ws\" />\nimport Log from '@expo/bunyan';\nimport { Server as ConnectServer } from 'connect';\n/**\n * Extends the default `createDevServerMiddleware` and adds some Expo CLI-specific dev middleware\n * with exception for the manifest middleware which is currently in `xdl`.\n *\n * Adds:\n * - `/logs`: pipe runtime `console` logs to the `props.logger` object.\n * - `/inspector`: launch hermes inspector proxy in chrome.\n * - CORS support for remote devtools\n * - body parser middleware\n *\n * @param props.watchFolders array of directory paths to use with watchman\n * @param props.port port that the dev server will run on\n * @param props.logger bunyan instance that all runtime `console` logs will be piped through.\n *\n * @returns\n */\nexport declare function createDevServerMiddleware(projectRoot: string, { watchFolders, port, logger, }: {\n    watchFolders: readonly string[];\n    port: number;\n    logger: Log;\n}): {\n    logger: Log;\n    middleware: ConnectServer;\n    attachToServer: any;\n    debuggerProxyEndpoint: {\n        server: import(\"ws\").Server<import(\"ws\").WebSocket>;\n        isDebuggerConnected: () => boolean;\n    };\n    messageSocketEndpoint: {\n        server: import(\"ws\").Server<import(\"ws\").WebSocket>;\n        broadcast: (method: string, params?: Record<string, any> | undefined) => void;\n    };\n    eventsSocketEndpoint: {\n        server: import(\"ws\").Server<import(\"ws\").WebSocket>;\n        reportEvent: (event: any) => void;\n    };\n    websocketEndpoints: {\n        '/debugger-proxy': import(\"ws\").Server<import(\"ws\").WebSocket>;\n        '/message': import(\"ws\").Server<import(\"ws\").WebSocket>;\n        '/events': import(\"ws\").Server<import(\"ws\").WebSocket>;\n    };\n};\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}