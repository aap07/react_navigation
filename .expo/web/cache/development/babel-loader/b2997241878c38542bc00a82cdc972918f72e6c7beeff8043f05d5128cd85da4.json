{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/dist/public-api.d.ts"],"sourcesContent":["import { Composer } from './compose/composer.js';\nimport type { Reviver } from './doc/applyReviver.js';\nimport { Document, Replacer } from './doc/Document.js';\nimport type { Node, ParsedNode } from './nodes/Node.js';\nimport type { CreateNodeOptions, DocumentOptions, ParseOptions, SchemaOptions, ToJSOptions, ToStringOptions } from './options.js';\nexport interface EmptyStream extends Array<Document.Parsed>, ReturnType<Composer['streamInfo']> {\n    empty: true;\n}\n/**\n * Parse the input as a stream of YAML documents.\n *\n * Documents should be separated from each other by `...` or `---` marker lines.\n *\n * @returns If an empty `docs` array is returned, it will be of type\n *   EmptyStream and contain additional stream information. In\n *   TypeScript, you should use `'empty' in docs` as a type guard for it.\n */\nexport declare function parseAllDocuments<Contents extends Node = ParsedNode, Strict extends boolean = true>(source: string, options?: ParseOptions & DocumentOptions & SchemaOptions): Array<Contents extends ParsedNode ? Document.Parsed<Contents, Strict> : Document<Contents, Strict>> | EmptyStream;\n/** Parse an input string into a single YAML.Document */\nexport declare function parseDocument<Contents extends Node = ParsedNode, Strict extends boolean = true>(source: string, options?: ParseOptions & DocumentOptions & SchemaOptions): Contents extends ParsedNode ? Document.Parsed<Contents, Strict> : Document<Contents, Strict>;\n/**\n * Parse an input string into JavaScript.\n *\n * Only supports input consisting of a single YAML document; for multi-document\n * support you should use `YAML.parseAllDocuments`. May throw on error, and may\n * log warnings using `console.warn`.\n *\n * @param str - A string with YAML formatting.\n * @param reviver - A reviver function, as in `JSON.parse()`\n * @returns The value will match the type of the root value of the parsed YAML\n *   document, so Maps become objects, Sequences arrays, and scalars result in\n *   nulls, booleans, numbers and strings.\n */\nexport declare function parse(src: string, options?: ParseOptions & DocumentOptions & SchemaOptions & ToJSOptions): any;\nexport declare function parse(src: string, reviver: Reviver, options?: ParseOptions & DocumentOptions & SchemaOptions & ToJSOptions): any;\n/**\n * Stringify a value as a YAML document.\n *\n * @param replacer - A replacer array or function, as in `JSON.stringify()`\n * @returns Will always include `\\n` as the last character, as is expected of YAML documents.\n */\nexport declare function stringify(value: any, options?: DocumentOptions & SchemaOptions & ParseOptions & CreateNodeOptions & ToStringOptions): string;\nexport declare function stringify(value: any, replacer?: Replacer | null, options?: string | number | (DocumentOptions & SchemaOptions & ParseOptions & CreateNodeOptions & ToStringOptions)): string;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}