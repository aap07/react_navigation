{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport PwaManifestWebpackPlugin from \"./PwaManifestWebpackPlugin\";\nvar ExpoPwaManifestWebpackPlugin = function (_PwaManifestWebpackPl) {\n  _inherits(ExpoPwaManifestWebpackPlugin, _PwaManifestWebpackPl);\n  var _super = _createSuper(ExpoPwaManifestWebpackPlugin);\n  function ExpoPwaManifestWebpackPlugin() {\n    _classCallCheck(this, ExpoPwaManifestWebpackPlugin);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(ExpoPwaManifestWebpackPlugin);\n}(PwaManifestWebpackPlugin);\nexport { ExpoPwaManifestWebpackPlugin as default };","map":{"version":3,"names":["PwaManifestWebpackPlugin","ExpoPwaManifestWebpackPlugin","_PwaManifestWebpackPl","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","default"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/webpack-config/webpack/plugins/ExpoPwaManifestWebpackPlugin.d.ts"],"sourcesContent":["import type { ExpoConfig } from 'expo/config';\nimport PwaManifestWebpackPlugin, { PwaManifestOptions } from './PwaManifestWebpackPlugin';\nexport declare type ExpoPwaManifestOptions = PwaManifestOptions & {\n    /**\n     * The path to a template manifest.json.\n     */\n    template: string;\n};\nexport default class ExpoPwaManifestWebpackPlugin extends PwaManifestWebpackPlugin {\n    constructor(pwaOptions: ExpoPwaManifestOptions, config: ExpoConfig);\n}\n"],"mappings":";;;;;;;AACA,OAAOA,wBAAwB;AAA2D,IAOrEC,4BAA4B,aAAAC,qBAAA;EAAAC,SAAA,CAAAF,4BAAA,EAAAC,qBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,4BAAA;EAAA,SAAAA,6BAAA;IAAAK,eAAA,OAAAL,4BAAA;IAAA,OAAAG,MAAA,CAAAG,KAAA,OAAAC,SAAA;EAAA;EAAA,OAAAC,YAAA,CAAAR,4BAAA;AAAA,EAASD,wBAAwB;AAAA,SAA7DC,4BAA4B,IAAAS,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}