{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar kDone = Symbol('kDone');\nvar kRun = Symbol('kRun');\nvar Limiter = function () {\n  function Limiter(concurrency) {\n    var _this = this;\n    _classCallCheck(this, Limiter);\n    this[kDone] = function () {\n      _this.pending--;\n      _this[kRun]();\n    };\n    this.concurrency = concurrency || Infinity;\n    this.jobs = [];\n    this.pending = 0;\n  }\n  _createClass(Limiter, [{\n    key: \"add\",\n    value: function add(job) {\n      this.jobs.push(job);\n      this[kRun]();\n    }\n  }, {\n    key: kRun,\n    value: function value() {\n      if (this.pending === this.concurrency) return;\n      if (this.jobs.length) {\n        var job = this.jobs.shift();\n        this.pending++;\n        job(this[kDone]);\n      }\n    }\n  }]);\n  return Limiter;\n}();\nmodule.exports = Limiter;","map":{"version":3,"names":["_classCallCheck","require","_createClass","kDone","Symbol","kRun","Limiter","concurrency","_this","pending","Infinity","jobs","key","value","add","job","push","length","shift","module","exports"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/cli/node_modules/ws/lib/limiter.js"],"sourcesContent":["'use strict';\n\nconst kDone = Symbol('kDone');\nconst kRun = Symbol('kRun');\n\n/**\n * A very simple job queue with adjustable concurrency. Adapted from\n * https://github.com/STRML/async-limiter\n */\nclass Limiter {\n  /**\n   * Creates a new `Limiter`.\n   *\n   * @param {Number} [concurrency=Infinity] The maximum number of jobs allowed\n   *     to run concurrently\n   */\n  constructor(concurrency) {\n    this[kDone] = () => {\n      this.pending--;\n      this[kRun]();\n    };\n    this.concurrency = concurrency || Infinity;\n    this.jobs = [];\n    this.pending = 0;\n  }\n\n  /**\n   * Adds a job to the queue.\n   *\n   * @param {Function} job The job to run\n   * @public\n   */\n  add(job) {\n    this.jobs.push(job);\n    this[kRun]();\n  }\n\n  /**\n   * Removes a job from the queue and runs it if possible.\n   *\n   * @private\n   */\n  [kRun]() {\n    if (this.pending === this.concurrency) return;\n\n    if (this.jobs.length) {\n      const job = this.jobs.shift();\n\n      this.pending++;\n      job(this[kDone]);\n    }\n  }\n}\n\nmodule.exports = Limiter;\n"],"mappings":"AAAA,YAAY;;AAAC,IAAAA,eAAA,GAAAC,OAAA;AAAA,IAAAC,YAAA,GAAAD,OAAA;AAEb,IAAME,KAAK,GAAGC,MAAM,CAAC,OAAO,CAAC;AAC7B,IAAMC,IAAI,GAAGD,MAAM,CAAC,MAAM,CAAC;AAAC,IAMtBE,OAAO;EAOX,SAAAA,QAAYC,WAAW,EAAE;IAAA,IAAAC,KAAA;IAAAR,eAAA,OAAAM,OAAA;IACvB,IAAI,CAACH,KAAK,CAAC,GAAG,YAAM;MAClBK,KAAI,CAACC,OAAO,EAAE;MACdD,KAAI,CAACH,IAAI,CAAC,CAAC,CAAC;IACd,CAAC;IACD,IAAI,CAACE,WAAW,GAAGA,WAAW,IAAIG,QAAQ;IAC1C,IAAI,CAACC,IAAI,GAAG,EAAE;IACd,IAAI,CAACF,OAAO,GAAG,CAAC;EAClB;EAACP,YAAA,CAAAI,OAAA;IAAAM,GAAA;IAAAC,KAAA,EAQD,SAAAC,IAAIC,GAAG,EAAE;MACP,IAAI,CAACJ,IAAI,CAACK,IAAI,CAACD,GAAG,CAAC;MACnB,IAAI,CAACV,IAAI,CAAC,CAAC,CAAC;IACd;EAAC;IAAAO,GAAA,EAOAP,IAAI;IAAAQ,KAAA,EAAL,SAAAA,MAAA,EAAS;MACP,IAAI,IAAI,CAACJ,OAAO,KAAK,IAAI,CAACF,WAAW,EAAE;MAEvC,IAAI,IAAI,CAACI,IAAI,CAACM,MAAM,EAAE;QACpB,IAAMF,GAAG,GAAG,IAAI,CAACJ,IAAI,CAACO,KAAK,CAAC,CAAC;QAE7B,IAAI,CAACT,OAAO,EAAE;QACdM,GAAG,CAAC,IAAI,CAACZ,KAAK,CAAC,CAAC;MAClB;IACF;EAAC;EAAA,OAAAG,OAAA;AAAA;AAGHa,MAAM,CAACC,OAAO,GAAGd,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}