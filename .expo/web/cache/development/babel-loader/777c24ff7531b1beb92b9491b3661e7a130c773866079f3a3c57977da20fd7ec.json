{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertPackageNameToProjectName = exports.resolveModuleAsync = exports.generatePackageListAsync = void 0;\nvar fast_glob_1 = __importDefault(require(\"fast-glob\"));\nvar fs_extra_1 = __importDefault(require(\"fs-extra\"));\nvar path_1 = __importDefault(require(\"path\"));\nfunction generatePackageListAsync(_x, _x2, _x3) {\n  return _generatePackageListAsync.apply(this, arguments);\n}\nfunction _generatePackageListAsync() {\n  _generatePackageListAsync = _asyncToGenerator(function* (modules, targetPath, namespace) {\n    var generatedFileContent = yield generatePackageListFileContentAsync(modules, namespace);\n    yield fs_extra_1.default.outputFile(targetPath, generatedFileContent);\n  });\n  return _generatePackageListAsync.apply(this, arguments);\n}\nexports.generatePackageListAsync = generatePackageListAsync;\nfunction findGradleFilesAsync(_x4) {\n  return _findGradleFilesAsync.apply(this, arguments);\n}\nfunction _findGradleFilesAsync() {\n  _findGradleFilesAsync = _asyncToGenerator(function* (revision) {\n    var _revision$config;\n    var configGradlePaths = (_revision$config = revision.config) == null ? void 0 : _revision$config.androidGradlePaths();\n    if (configGradlePaths && configGradlePaths.length) {\n      return configGradlePaths;\n    }\n    var buildGradleFiles = yield (0, fast_glob_1.default)('*/build.gradle', {\n      cwd: revision.path,\n      ignore: ['**/node_modules/**']\n    });\n    return buildGradleFiles;\n  });\n  return _findGradleFilesAsync.apply(this, arguments);\n}\nfunction resolveModuleAsync(_x5, _x6) {\n  return _resolveModuleAsync.apply(this, arguments);\n}\nfunction _resolveModuleAsync() {\n  _resolveModuleAsync = _asyncToGenerator(function* (packageName, revision) {\n    var _revision$config$andr, _revision$config2, _revision$config$andr2, _revision$config3;\n    if (packageName === '@unimodules/react-native-adapter') {\n      return null;\n    }\n    var buildGradleFiles = yield findGradleFilesAsync(revision);\n    if (!buildGradleFiles.length) {\n      return null;\n    }\n    var projects = buildGradleFiles.map(function (buildGradleFile) {\n      var gradleFilePath = path_1.default.join(revision.path, buildGradleFile);\n      return {\n        name: convertPackageNameToProjectName(packageName, path_1.default.relative(revision.path, gradleFilePath)),\n        sourceDir: path_1.default.dirname(gradleFilePath)\n      };\n    });\n    var plugins = ((_revision$config$andr = (_revision$config2 = revision.config) == null ? void 0 : _revision$config2.androidGradlePlugins()) != null ? _revision$config$andr : []).map(function (_ref2) {\n      var id = _ref2.id,\n        group = _ref2.group,\n        sourceDir = _ref2.sourceDir;\n      return {\n        id: id,\n        group: group,\n        sourceDir: path_1.default.join(revision.path, sourceDir)\n      };\n    });\n    return _objectSpread(_objectSpread({\n      packageName: packageName,\n      projects: projects\n    }, plugins.length > 0 ? {\n      plugins: plugins\n    } : {}), {}, {\n      modules: (_revision$config$andr2 = (_revision$config3 = revision.config) == null ? void 0 : _revision$config3.androidModules()) != null ? _revision$config$andr2 : []\n    });\n  });\n  return _resolveModuleAsync.apply(this, arguments);\n}\nexports.resolveModuleAsync = resolveModuleAsync;\nfunction generatePackageListFileContentAsync(_x7, _x8) {\n  return _generatePackageListFileContentAsync.apply(this, arguments);\n}\nfunction _generatePackageListFileContentAsync() {\n  _generatePackageListFileContentAsync = _asyncToGenerator(function* (modules, namespace) {\n    var packagesClasses = yield findAndroidPackagesAsync(modules.filter(function (module) {\n      return module.packageName !== 'expo';\n    }));\n    var modulesClasses = yield findAndroidModules(modules);\n    return `package ${namespace};\n\nimport java.util.Arrays;\nimport java.util.List;\nimport expo.modules.core.interfaces.Package;\nimport expo.modules.kotlin.modules.Module;\nimport expo.modules.kotlin.ModulesProvider;\n\npublic class ExpoModulesPackageList implements ModulesProvider {\n  private static class LazyHolder {\n    static final List<Package> packagesList = Arrays.<Package>asList(\n${packagesClasses.map(function (packageClass) {\n      return `      new ${packageClass}()`;\n    }).join(',\\n')}\n    );\n\n    static final List<Class<? extends Module>> modulesList = Arrays.<Class<? extends Module>>asList(\n      ${modulesClasses.map(function (moduleClass) {\n      return `      ${moduleClass}.class`;\n    }).join(',\\n')}\n    );\n  }\n\n  public static List<Package> getPackageList() {\n    return LazyHolder.packagesList;\n  }\n\n  @Override\n  public List<Class<? extends Module>> getModulesList() {\n    return LazyHolder.modulesList;\n  }\n}\n`;\n  });\n  return _generatePackageListFileContentAsync.apply(this, arguments);\n}\nfunction findAndroidModules(modules) {\n  var _ref;\n  var modulesToProvide = modules.filter(function (module) {\n    return module.modules.length > 0;\n  });\n  var classNames = (_ref = []).concat.apply(_ref, _toConsumableArray(modulesToProvide.map(function (module) {\n    return module.modules;\n  })));\n  return classNames;\n}\nfunction findAndroidPackagesAsync(_x9) {\n  return _findAndroidPackagesAsync.apply(this, arguments);\n}\nfunction _findAndroidPackagesAsync() {\n  _findAndroidPackagesAsync = _asyncToGenerator(function* (modules) {\n    var classes = [];\n    var flattenedSourceDirList = [];\n    for (var module of modules) {\n      for (var project of module.projects) {\n        flattenedSourceDirList.push(project.sourceDir);\n      }\n    }\n    yield Promise.all(flattenedSourceDirList.map(function () {\n      var _ref3 = _asyncToGenerator(function* (sourceDir) {\n        var files = yield (0, fast_glob_1.default)('**/*Package.{java,kt}', {\n          cwd: sourceDir\n        });\n        for (var file of files) {\n          var fileContent = yield fs_extra_1.default.readFile(path_1.default.join(sourceDir, file), 'utf8');\n          var packageRegex = function () {\n            if (process.env.EXPO_SHOULD_USE_LEGACY_PACKAGE_INTERFACE) {\n              return /\\bimport\\s+org\\.unimodules\\.core\\.(interfaces\\.Package|BasePackage)\\b/;\n            } else {\n              return /\\bimport\\s+expo\\.modules\\.core\\.(interfaces\\.Package|BasePackage)\\b/;\n            }\n          }();\n          if (!packageRegex.test(fileContent)) {\n            continue;\n          }\n          var classPathMatches = fileContent.match(/^package ([\\w.]+)\\b/m);\n          if (classPathMatches) {\n            var basename = path_1.default.basename(file, path_1.default.extname(file));\n            classes.push(`${classPathMatches[1]}.${basename}`);\n          }\n        }\n      });\n      return function (_x10) {\n        return _ref3.apply(this, arguments);\n      };\n    }()));\n    return classes.sort();\n  });\n  return _findAndroidPackagesAsync.apply(this, arguments);\n}\nfunction convertPackageNameToProjectName(packageName, buildGradleFile) {\n  var name = packageName.replace(/^@/g, '').replace(/\\W+/g, '-');\n  var baseDir = path_1.default.dirname(buildGradleFile).replace(/\\//g, '-');\n  return baseDir === 'android' ? name : `${name}$${baseDir}`;\n}\nexports.convertPackageNameToProjectName = convertPackageNameToProjectName;","map":{"version":3,"names":["fast_glob_1","__importDefault","require","fs_extra_1","path_1","generatePackageListAsync","_x","_x2","_x3","_generatePackageListAsync","apply","arguments","_asyncToGenerator","modules","targetPath","namespace","generatedFileContent","generatePackageListFileContentAsync","default","outputFile","exports","findGradleFilesAsync","_x4","_findGradleFilesAsync","revision","_revision$config","configGradlePaths","config","androidGradlePaths","length","buildGradleFiles","cwd","path","ignore","resolveModuleAsync","_x5","_x6","_resolveModuleAsync","packageName","_revision$config$andr","_revision$config2","_revision$config$andr2","_revision$config3","projects","map","buildGradleFile","gradleFilePath","join","name","convertPackageNameToProjectName","relative","sourceDir","dirname","plugins","androidGradlePlugins","_ref2","id","group","_objectSpread","androidModules","_x7","_x8","_generatePackageListFileContentAsync","packagesClasses","findAndroidPackagesAsync","filter","module","modulesClasses","findAndroidModules","packageClass","moduleClass","_ref","modulesToProvide","classNames","concat","_toConsumableArray","_x9","_findAndroidPackagesAsync","classes","flattenedSourceDirList","project","push","Promise","all","_ref3","files","file","fileContent","readFile","packageRegex","process","env","EXPO_SHOULD_USE_LEGACY_PACKAGE_INTERFACE","test","classPathMatches","match","basename","extname","_x10","sort","replace","baseDir"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\expo-modules-autolinking\\src\\platforms\\android.ts"],"sourcesContent":["import glob from 'fast-glob';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { ModuleDescriptorAndroid, PackageRevision } from '../types';\n\n/**\n * Generates Java file that contains all autolinked packages.\n */\nexport async function generatePackageListAsync(\n  modules: ModuleDescriptorAndroid[],\n  targetPath: string,\n  namespace: string\n): Promise<void> {\n  const generatedFileContent = await generatePackageListFileContentAsync(modules, namespace);\n  await fs.outputFile(targetPath, generatedFileContent);\n}\n\nasync function findGradleFilesAsync(revision: PackageRevision): Promise<string[]> {\n  const configGradlePaths = revision.config?.androidGradlePaths();\n  if (configGradlePaths && configGradlePaths.length) {\n    return configGradlePaths;\n  }\n\n  const buildGradleFiles = await glob('*/build.gradle', {\n    cwd: revision.path,\n    ignore: ['**/node_modules/**'],\n  });\n\n  return buildGradleFiles;\n}\n\nexport async function resolveModuleAsync(\n  packageName: string,\n  revision: PackageRevision\n): Promise<ModuleDescriptorAndroid | null> {\n  // TODO: Relative source dir should be configurable through the module config.\n\n  // Don't link itself... :D\n  if (packageName === '@unimodules/react-native-adapter') {\n    return null;\n  }\n\n  const buildGradleFiles = await findGradleFilesAsync(revision);\n  // Just in case where the module doesn't have its own `build.gradle`.\n  if (!buildGradleFiles.length) {\n    return null;\n  }\n\n  const projects = buildGradleFiles.map((buildGradleFile) => {\n    const gradleFilePath = path.join(revision.path, buildGradleFile);\n    return {\n      name: convertPackageNameToProjectName(\n        packageName,\n        path.relative(revision.path, gradleFilePath)\n      ),\n      sourceDir: path.dirname(gradleFilePath),\n    };\n  });\n\n  const plugins = (revision.config?.androidGradlePlugins() ?? []).map(\n    ({ id, group, sourceDir }) => ({\n      id,\n      group,\n      sourceDir: path.join(revision.path, sourceDir),\n    })\n  );\n\n  return {\n    packageName,\n    projects,\n    ...(plugins.length > 0 ? { plugins } : {}),\n    modules: revision.config?.androidModules() ?? [],\n  };\n}\n\n/**\n * Generates the string to put into the generated package list.\n */\nasync function generatePackageListFileContentAsync(\n  modules: ModuleDescriptorAndroid[],\n  namespace: string\n): Promise<string> {\n  // TODO: Instead of ignoring `expo` here, make the package class paths configurable from `expo-module.config.json`.\n  const packagesClasses = await findAndroidPackagesAsync(\n    modules.filter((module) => module.packageName !== 'expo')\n  );\n\n  const modulesClasses = await findAndroidModules(modules);\n\n  return `package ${namespace};\n\nimport java.util.Arrays;\nimport java.util.List;\nimport expo.modules.core.interfaces.Package;\nimport expo.modules.kotlin.modules.Module;\nimport expo.modules.kotlin.ModulesProvider;\n\npublic class ExpoModulesPackageList implements ModulesProvider {\n  private static class LazyHolder {\n    static final List<Package> packagesList = Arrays.<Package>asList(\n${packagesClasses.map((packageClass) => `      new ${packageClass}()`).join(',\\n')}\n    );\n\n    static final List<Class<? extends Module>> modulesList = Arrays.<Class<? extends Module>>asList(\n      ${modulesClasses.map((moduleClass) => `      ${moduleClass}.class`).join(',\\n')}\n    );\n  }\n\n  public static List<Package> getPackageList() {\n    return LazyHolder.packagesList;\n  }\n\n  @Override\n  public List<Class<? extends Module>> getModulesList() {\n    return LazyHolder.modulesList;\n  }\n}\n`;\n}\n\nfunction findAndroidModules(modules: ModuleDescriptorAndroid[]): string[] {\n  const modulesToProvide = modules.filter((module) => module.modules.length > 0);\n  const classNames = ([] as string[]).concat(...modulesToProvide.map((module) => module.modules));\n  return classNames;\n}\n\nasync function findAndroidPackagesAsync(modules: ModuleDescriptorAndroid[]): Promise<string[]> {\n  const classes: string[] = [];\n\n  const flattenedSourceDirList: string[] = [];\n  for (const module of modules) {\n    for (const project of module.projects) {\n      flattenedSourceDirList.push(project.sourceDir);\n    }\n  }\n\n  await Promise.all(\n    flattenedSourceDirList.map(async (sourceDir) => {\n      const files = await glob('**/*Package.{java,kt}', {\n        cwd: sourceDir,\n      });\n\n      for (const file of files) {\n        const fileContent = await fs.readFile(path.join(sourceDir, file), 'utf8');\n\n        const packageRegex = (() => {\n          if (process.env.EXPO_SHOULD_USE_LEGACY_PACKAGE_INTERFACE) {\n            return /\\bimport\\s+org\\.unimodules\\.core\\.(interfaces\\.Package|BasePackage)\\b/;\n          } else {\n            return /\\bimport\\s+expo\\.modules\\.core\\.(interfaces\\.Package|BasePackage)\\b/;\n          }\n        })();\n\n        // Very naive check to skip non-expo packages\n        if (!packageRegex.test(fileContent)) {\n          continue;\n        }\n\n        const classPathMatches = fileContent.match(/^package ([\\w.]+)\\b/m);\n\n        if (classPathMatches) {\n          const basename = path.basename(file, path.extname(file));\n          classes.push(`${classPathMatches[1]}.${basename}`);\n        }\n      }\n    })\n  );\n  return classes.sort();\n}\n\n/**\n * Converts the package name and gradle file path to Android's project name.\n *   `$` to indicate subprojects\n *   `/` path will transform as `-`\n *\n * Example: `@expo/example` + `android/build.gradle` → `expo-example`\n *\n * Example: multiple projects\n *   - `expo-test` + `android/build.gradle` → `react-native-third-party`\n *   - `expo-test` + `subproject/build.gradle` → `react-native-third-party$subproject`\n */\nexport function convertPackageNameToProjectName(\n  packageName: string,\n  buildGradleFile: string\n): string {\n  const name = packageName.replace(/^@/g, '').replace(/\\W+/g, '-');\n  const baseDir = path.dirname(buildGradleFile).replace(/\\//g, '-');\n  return baseDir === 'android' ? name : `${name}$${baseDir}`;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}