{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getExpoSDKVersion = getExpoSDKVersion;\nfunction _jsonFile() {\n  var data = _interopRequireDefault(require(\"@expo/json-file\"));\n  _jsonFile = function _jsonFile() {\n    return data;\n  };\n  return data;\n}\nfunction _resolveFrom() {\n  var data = _interopRequireDefault(require(\"resolve-from\"));\n  _resolveFrom = function _resolveFrom() {\n    return data;\n  };\n  return data;\n}\nfunction _Errors() {\n  var data = require(\"./Errors\");\n  _Errors = function _Errors() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getExpoSDKVersion(projectRoot) {\n  var exp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _exp$sdkVersion;\n  return (_exp$sdkVersion = exp === null || exp === void 0 ? void 0 : exp.sdkVersion) !== null && _exp$sdkVersion !== void 0 ? _exp$sdkVersion : getExpoSDKVersionFromPackage(projectRoot);\n}\nfunction getExpoSDKVersionFromPackage(projectRoot) {\n  var packageJsonPath = _resolveFrom().default.silent(projectRoot, 'expo/package.json');\n  if (!packageJsonPath) {\n    throw new (_Errors().ConfigError)(`Cannot determine which native SDK version your project uses because the module \\`expo\\` is not installed. Please install it with \\`yarn add expo\\` and try again.`, 'MODULE_NOT_FOUND');\n  }\n  var expoPackageJson = _jsonFile().default.read(packageJsonPath, {\n    json5: true\n  });\n  var packageVersion = expoPackageJson.version;\n  if (!(typeof packageVersion === 'string')) {\n    throw new (_Errors().ConfigError)(`Cannot determine which native SDK version your project uses because the module \\`expo\\` has an invalid package.json (missing \\`version\\` field). Try reinstalling node modules and trying again.`, 'MODULE_NOT_FOUND');\n  }\n  var majorVersion = packageVersion.split('.').shift();\n  return `${majorVersion}.0.0`;\n}","map":{"version":3,"names":["_jsonFile","data","_interopRequireDefault","require","_resolveFrom","_Errors","obj","__esModule","default","getExpoSDKVersion","projectRoot","exp","arguments","length","undefined","_exp$sdkVersion","sdkVersion","getExpoSDKVersionFromPackage","packageJsonPath","silent","ConfigError","expoPackageJson","read","json5","packageVersion","version","majorVersion","split","shift"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config\\src\\getExpoSDKVersion.ts"],"sourcesContent":["import JsonFile from '@expo/json-file';\nimport resolveFrom from 'resolve-from';\n\nimport { ExpoConfig } from './Config.types';\nimport { ConfigError } from './Errors';\n\n/**\n * Resolve the Expo SDK Version either from the input Expo config or from the installed\n * version of the `expo` package.\n */\nexport function getExpoSDKVersion(\n  projectRoot: string,\n  exp: Pick<ExpoConfig, 'sdkVersion'> = {}\n): string {\n  return exp?.sdkVersion ?? getExpoSDKVersionFromPackage(projectRoot);\n}\n\n/**\n * Resolve the Expo SDK Version either from the input Expo config or from the installed\n * version of the `expo` package.\n */\nfunction getExpoSDKVersionFromPackage(projectRoot: string): string {\n  const packageJsonPath = resolveFrom.silent(projectRoot, 'expo/package.json');\n  if (!packageJsonPath) {\n    throw new ConfigError(\n      `Cannot determine which native SDK version your project uses because the module \\`expo\\` is not installed. Please install it with \\`yarn add expo\\` and try again.`,\n      'MODULE_NOT_FOUND'\n    );\n  }\n  const expoPackageJson = JsonFile.read(packageJsonPath, { json5: true });\n  const { version: packageVersion } = expoPackageJson;\n\n  if (!(typeof packageVersion === 'string')) {\n    // This is technically impossible.\n    throw new ConfigError(\n      `Cannot determine which native SDK version your project uses because the module \\`expo\\` has an invalid package.json (missing \\`version\\` field). Try reinstalling node modules and trying again.`,\n      'MODULE_NOT_FOUND'\n    );\n  }\n\n  const majorVersion = packageVersion.split('.').shift();\n  return `${majorVersion}.0.0`;\n}\n"],"mappings":";;;;;;AAAA,SAAAA,UAAA;EAAA,IAAAC,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAH,SAAA,YAAAA,UAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAG,aAAA;EAAA,IAAAH,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAC,YAAA,YAAAA,aAAA;IAAA,OAAAH,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAGA,SAAAI,QAAA;EAAA,IAAAJ,IAAA,GAAAE,OAAA;EAAAE,OAAA,YAAAA,QAAA;IAAA,OAAAJ,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAAuC,SAAAC,uBAAAI,GAAA;EAAA,OAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA;IAAAE,OAAA,EAAAF;EAAA;AAAA;AAMhC,SAASG,iBAAiBA,CAC/BC,WAAmB,EAEX;EAAA,IADRC,GAAmC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAChC,IAAAG,eAAA;EACR,QAAAA,eAAA,GAAOJ,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEK,UAAU,cAAAD,eAAA,cAAAA,eAAA,GAAIE,4BAA4B,CAACP,WAAW,CAAC;AACrE;AAMA,SAASO,4BAA4BA,CAACP,WAAmB,EAAU;EACjE,IAAMQ,eAAe,GAAGd,YAAA,GAAAI,OAAW,CAACW,MAAM,CAACT,WAAW,EAAE,mBAAmB,CAAC;EAC5E,IAAI,CAACQ,eAAe,EAAE;IACpB,MAAM,KAAIb,OAAA,GAAAe,WAAW,EAClB,mKAAkK,EACnK,kBAAkB,CACnB;EACH;EACA,IAAMC,eAAe,GAAGrB,SAAA,GAAAQ,OAAQ,CAACc,IAAI,CAACJ,eAAe,EAAE;IAAEK,KAAK,EAAE;EAAK,CAAC,CAAC;EACvE,IAAiBC,cAAA,GAAmBH,eAAe,CAA3CI,OAAO;EAEf,IAAI,EAAE,OAAOD,cAAc,KAAK,QAAQ,CAAC,EAAE;IAEzC,MAAM,KAAInB,OAAA,GAAAe,WAAW,EAClB,kMAAiM,EAClM,kBAAkB,CACnB;EACH;EAEA,IAAMM,YAAY,GAAGF,cAAc,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,KAAK,EAAE;EACtD,OAAQ,GAAEF,YAAa,MAAK;AAC9B"},"metadata":{},"sourceType":"script","externalDependencies":[]}