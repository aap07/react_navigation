{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ResponseContentType = void 0;\nvar _configPlugins = require(\"@expo/config-plugins\");\nvar _accepts = _interopRequireDefault(require(\"accepts\"));\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\nvar _formData = _interopRequireDefault(require(\"form-data\"));\nvar _structuredHeaders = require(\"structured-headers\");\nvar _userSettings = _interopRequireDefault(require(\"../../../api/user/UserSettings\"));\nvar _user = require(\"../../../api/user/user\");\nvar _rudderstackClient = require(\"../../../utils/analytics/rudderstackClient\");\nvar _codesigning = require(\"../../../utils/codesigning\");\nvar _errors = require(\"../../../utils/errors\");\nvar _url = require(\"../../../utils/url\");\nvar _manifestMiddleware = require(\"./ManifestMiddleware\");\nvar _resolvePlatform = require(\"./resolvePlatform\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = require(\"debug\")(\"expo:start:server:middleware:ExpoGoManifestHandlerMiddleware\");\nvar ResponseContentType;\nexports.ResponseContentType = ResponseContentType;\n(function (ResponseContentType) {\n  ResponseContentType[ResponseContentType[\"TEXT_PLAIN\"] = 0] = \"TEXT_PLAIN\";\n  ResponseContentType[ResponseContentType[\"APPLICATION_JSON\"] = 1] = \"APPLICATION_JSON\";\n  ResponseContentType[ResponseContentType[\"APPLICATION_EXPO_JSON\"] = 2] = \"APPLICATION_EXPO_JSON\";\n  ResponseContentType[ResponseContentType[\"MULTIPART_MIXED\"] = 3] = \"MULTIPART_MIXED\";\n})(ResponseContentType || (exports.ResponseContentType = ResponseContentType = {}));\nvar ExpoGoManifestHandlerMiddleware = function (_manifestMiddleware$M) {\n  _inherits(ExpoGoManifestHandlerMiddleware, _manifestMiddleware$M);\n  var _super = _createSuper(ExpoGoManifestHandlerMiddleware);\n  function ExpoGoManifestHandlerMiddleware() {\n    _classCallCheck(this, ExpoGoManifestHandlerMiddleware);\n    return _super.apply(this, arguments);\n  }\n  _createClass(ExpoGoManifestHandlerMiddleware, [{\n    key: \"getParsedHeaders\",\n    value: function getParsedHeaders(req) {\n      var platform = (0, _resolvePlatform).parsePlatformHeader(req);\n      if (!platform) {\n        debug(`No \"expo-platform\" header or \"platform\" query parameter specified. Falling back to \"ios\".`);\n        platform = \"ios\";\n      }\n      (0, _resolvePlatform).assertRuntimePlatform(platform);\n      var accept = (0, _accepts).default(req);\n      var acceptedType = accept.types([\"unknown/unknown\", \"multipart/mixed\", \"application/json\", \"application/expo+json\", \"text/plain\"]);\n      var responseContentType;\n      switch (acceptedType) {\n        case \"multipart/mixed\":\n          responseContentType = 3;\n          break;\n        case \"application/json\":\n          responseContentType = 1;\n          break;\n        case \"application/expo+json\":\n          responseContentType = 2;\n          break;\n        default:\n          responseContentType = 0;\n          break;\n      }\n      var expectSignature = req.headers[\"expo-expect-signature\"];\n      return {\n        responseContentType: responseContentType,\n        platform: platform,\n        expectSignature: expectSignature ? String(expectSignature) : null,\n        hostname: (0, _url).stripPort(req.headers[\"host\"])\n      };\n    }\n  }, {\n    key: \"getDefaultResponseHeaders\",\n    value: function getDefaultResponseHeaders() {\n      var headers = new Map();\n      headers.set(\"expo-protocol-version\", 0);\n      headers.set(\"expo-sfv-version\", 0);\n      headers.set(\"cache-control\", \"private, max-age=0\");\n      return headers;\n    }\n  }, {\n    key: \"_getManifestResponseAsync\",\n    value: function () {\n      var _getManifestResponseAsync2 = _asyncToGenerator(function* (requestOptions) {\n        var ref, ref1;\n        var _yield$this$_resolveP = yield this._resolveProjectSettingsAsync(requestOptions),\n          exp = _yield$this$_resolveP.exp,\n          hostUri = _yield$this$_resolveP.hostUri,\n          expoGoConfig = _yield$this$_resolveP.expoGoConfig,\n          bundleUrl = _yield$this$_resolveP.bundleUrl;\n        var _runtimeVersion;\n        var runtimeVersion = _configPlugins.Updates.getRuntimeVersion(_objectSpread(_objectSpread({}, exp), {}, {\n          runtimeVersion: (_runtimeVersion = exp.runtimeVersion) != null ? _runtimeVersion : {\n            policy: \"sdkVersion\"\n          }\n        }), requestOptions.platform);\n        if (!runtimeVersion) {\n          throw new _errors.CommandError(\"MANIFEST_MIDDLEWARE\", `Unable to determine runtime version for platform '${requestOptions.platform}'`);\n        }\n        var codeSigningInfo = yield (0, _codesigning).getCodeSigningInfoAsync(exp, requestOptions.expectSignature, this.options.privateKeyPath);\n        var easProjectId = (ref = exp.extra) == null ? void 0 : (ref1 = ref.eas) == null ? void 0 : ref1.projectId;\n        var scopeKey = yield ExpoGoManifestHandlerMiddleware.getScopeKeyAsync({\n          slug: exp.slug,\n          codeSigningInfo: codeSigningInfo\n        });\n        var expoUpdatesManifest = {\n          id: _crypto.default.randomUUID(),\n          createdAt: new Date().toISOString(),\n          runtimeVersion: runtimeVersion,\n          launchAsset: {\n            key: \"bundle\",\n            contentType: \"application/javascript\",\n            url: bundleUrl\n          },\n          assets: [],\n          metadata: {},\n          extra: {\n            eas: {\n              projectId: easProjectId != null ? easProjectId : undefined\n            },\n            expoClient: _objectSpread(_objectSpread({}, exp), {}, {\n              hostUri: hostUri\n            }),\n            expoGo: expoGoConfig,\n            scopeKey: scopeKey\n          }\n        };\n        var stringifiedManifest = JSON.stringify(expoUpdatesManifest);\n        var manifestPartHeaders = null;\n        var certificateChainBody = null;\n        if (codeSigningInfo) {\n          var signature = (0, _codesigning).signManifestString(stringifiedManifest, codeSigningInfo);\n          manifestPartHeaders = {\n            \"expo-signature\": (0, _structuredHeaders).serializeDictionary(convertToDictionaryItemsRepresentation({\n              keyid: codeSigningInfo.keyId,\n              sig: signature,\n              alg: \"rsa-v1_5-sha256\"\n            }))\n          };\n          certificateChainBody = codeSigningInfo.certificateChainForResponse.join(\"\\n\");\n        }\n        var headers = this.getDefaultResponseHeaders();\n        switch (requestOptions.responseContentType) {\n          case 3:\n            {\n              var form = this.getFormData({\n                stringifiedManifest: stringifiedManifest,\n                manifestPartHeaders: manifestPartHeaders,\n                certificateChainBody: certificateChainBody\n              });\n              headers.set(\"content-type\", `multipart/mixed; boundary=${form.getBoundary()}`);\n              return {\n                body: form.getBuffer().toString(),\n                version: runtimeVersion,\n                headers: headers\n              };\n            }\n          case 2:\n          case 1:\n          case 0:\n            {\n              headers.set(\"content-type\", ExpoGoManifestHandlerMiddleware.getContentTypeForResponseContentType(requestOptions.responseContentType));\n              if (manifestPartHeaders) {\n                Object.entries(manifestPartHeaders).forEach(function (_ref) {\n                  var _ref2 = _slicedToArray(_ref, 2),\n                    key = _ref2[0],\n                    value = _ref2[1];\n                  headers.set(key, value);\n                });\n              }\n              return {\n                body: stringifiedManifest,\n                version: runtimeVersion,\n                headers: headers\n              };\n            }\n        }\n      });\n      function _getManifestResponseAsync(_x) {\n        return _getManifestResponseAsync2.apply(this, arguments);\n      }\n      return _getManifestResponseAsync;\n    }()\n  }, {\n    key: \"getFormData\",\n    value: function getFormData(_ref3) {\n      var stringifiedManifest = _ref3.stringifiedManifest,\n        manifestPartHeaders = _ref3.manifestPartHeaders,\n        certificateChainBody = _ref3.certificateChainBody;\n      var form = new _formData.default();\n      form.append(\"manifest\", stringifiedManifest, {\n        contentType: \"application/json\",\n        header: _objectSpread({}, manifestPartHeaders)\n      });\n      if (certificateChainBody && certificateChainBody.length > 0) {\n        form.append(\"certificate_chain\", certificateChainBody, {\n          contentType: \"application/x-pem-file\"\n        });\n      }\n      return form;\n    }\n  }, {\n    key: \"trackManifest\",\n    value: function trackManifest(version) {\n      (0, _rudderstackClient).logEventAsync(\"Serve Expo Updates Manifest\", {\n        runtimeVersion: version\n      });\n    }\n  }], [{\n    key: \"getContentTypeForResponseContentType\",\n    value: function getContentTypeForResponseContentType(responseContentType) {\n      switch (responseContentType) {\n        case 3:\n          return \"multipart/mixed\";\n        case 2:\n          return \"application/expo+json\";\n        case 1:\n          return \"application/json\";\n        case 0:\n          return \"text/plain\";\n      }\n    }\n  }, {\n    key: \"getScopeKeyAsync\",\n    value: function () {\n      var _getScopeKeyAsync = _asyncToGenerator(function* (_ref4) {\n        var slug = _ref4.slug,\n          codeSigningInfo = _ref4.codeSigningInfo;\n        var scopeKeyFromCodeSigningInfo = codeSigningInfo == null ? void 0 : codeSigningInfo.scopeKey;\n        if (scopeKeyFromCodeSigningInfo) {\n          return scopeKeyFromCodeSigningInfo;\n        }\n        return yield getAnonymousScopeKeyAsync(slug);\n      });\n      function getScopeKeyAsync(_x2) {\n        return _getScopeKeyAsync.apply(this, arguments);\n      }\n      return getScopeKeyAsync;\n    }()\n  }]);\n  return ExpoGoManifestHandlerMiddleware;\n}(_manifestMiddleware.ManifestMiddleware);\nexports.ExpoGoManifestHandlerMiddleware = ExpoGoManifestHandlerMiddleware;\nfunction getAnonymousScopeKeyAsync(_x3) {\n  return _getAnonymousScopeKeyAsync.apply(this, arguments);\n}\nfunction _getAnonymousScopeKeyAsync() {\n  _getAnonymousScopeKeyAsync = _asyncToGenerator(function* (slug) {\n    var userAnonymousIdentifier = yield _userSettings.default.getAnonymousIdentifierAsync();\n    return `@${_user.ANONYMOUS_USERNAME}/${slug}-${userAnonymousIdentifier}`;\n  });\n  return _getAnonymousScopeKeyAsync.apply(this, arguments);\n}\nfunction convertToDictionaryItemsRepresentation(obj) {\n  return new Map(Object.entries(obj).map(function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n      k = _ref6[0],\n      v = _ref6[1];\n    return [k, [v, new Map()]];\n  }));\n}","map":{"version":3,"names":["_slicedToArray","require","_defineProperty","_asyncToGenerator","_classCallCheck","_createClass","_inherits","_possibleConstructorReturn","_getPrototypeOf","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","sham","Proxy","Boolean","prototype","valueOf","call","_configPlugins","_accepts","_interopRequireDefault","_crypto","_formData","_structuredHeaders","_userSettings","_user","_rudderstackClient","_codesigning","_errors","_url","_manifestMiddleware","_resolvePlatform","debug","ResponseContentType","exports","ExpoGoManifestHandlerMiddleware","_manifestMiddleware$M","_super","key","value","getParsedHeaders","req","platform","parsePlatformHeader","assertRuntimePlatform","accept","default","acceptedType","types","responseContentType","expectSignature","headers","String","hostname","stripPort","getDefaultResponseHeaders","Map","set","_getManifestResponseAsync2","requestOptions","ref","ref1","_yield$this$_resolveP","_resolveProjectSettingsAsync","exp","hostUri","expoGoConfig","bundleUrl","_runtimeVersion","runtimeVersion","Updates","getRuntimeVersion","policy","CommandError","codeSigningInfo","getCodeSigningInfoAsync","options","privateKeyPath","easProjectId","extra","eas","projectId","scopeKey","getScopeKeyAsync","slug","expoUpdatesManifest","id","randomUUID","createdAt","Date","toISOString","launchAsset","contentType","url","assets","metadata","undefined","expoClient","expoGo","stringifiedManifest","JSON","stringify","manifestPartHeaders","certificateChainBody","signature","signManifestString","serializeDictionary","convertToDictionaryItemsRepresentation","keyid","keyId","sig","alg","certificateChainForResponse","join","form","getFormData","getBoundary","body","getBuffer","toString","version","getContentTypeForResponseContentType","entries","_ref","_ref2","_getManifestResponseAsync","_x","_ref3","append","header","trackManifest","logEventAsync","_getScopeKeyAsync","_ref4","scopeKeyFromCodeSigningInfo","getAnonymousScopeKeyAsync","_x2","ManifestMiddleware","_x3","_getAnonymousScopeKeyAsync","userAnonymousIdentifier","getAnonymousIdentifierAsync","ANONYMOUS_USERNAME","obj","map","_ref5","_ref6","k","v"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\middleware\\ExpoGoManifestHandlerMiddleware.ts"],"sourcesContent":["import { ExpoUpdatesManifest } from '@expo/config';\nimport { Updates } from '@expo/config-plugins';\nimport accepts from 'accepts';\nimport crypto from 'crypto';\nimport FormData from 'form-data';\nimport { serializeDictionary, Dictionary } from 'structured-headers';\n\nimport UserSettings from '../../../api/user/UserSettings';\nimport { ANONYMOUS_USERNAME } from '../../../api/user/user';\nimport { logEventAsync } from '../../../utils/analytics/rudderstackClient';\nimport {\n  CodeSigningInfo,\n  getCodeSigningInfoAsync,\n  signManifestString,\n} from '../../../utils/codesigning';\nimport { CommandError } from '../../../utils/errors';\nimport { stripPort } from '../../../utils/url';\nimport { ManifestMiddleware, ManifestRequestInfo } from './ManifestMiddleware';\nimport { assertRuntimePlatform, parsePlatformHeader } from './resolvePlatform';\nimport { ServerHeaders, ServerRequest } from './server.types';\n\nconst debug = require('debug')('expo:start:server:middleware:ExpoGoManifestHandlerMiddleware');\n\nexport enum ResponseContentType {\n  TEXT_PLAIN,\n  APPLICATION_JSON,\n  APPLICATION_EXPO_JSON,\n  MULTIPART_MIXED,\n}\n\ninterface ExpoGoManifestRequestInfo extends ManifestRequestInfo {\n  responseContentType: ResponseContentType;\n  expectSignature: string | null;\n}\n\nexport class ExpoGoManifestHandlerMiddleware extends ManifestMiddleware<ExpoGoManifestRequestInfo> {\n  public getParsedHeaders(req: ServerRequest): ExpoGoManifestRequestInfo {\n    let platform = parsePlatformHeader(req);\n\n    if (!platform) {\n      debug(\n        `No \"expo-platform\" header or \"platform\" query parameter specified. Falling back to \"ios\".`\n      );\n      platform = 'ios';\n    }\n\n    assertRuntimePlatform(platform);\n\n    // Expo Updates clients explicitly accept \"multipart/mixed\" responses while browsers implicitly\n    // accept them with \"accept: */*\". To make it easier to debug manifest responses by visiting their\n    // URLs in a browser, we denote the response as \"text/plain\" if the user agent appears not to be\n    // an Expo Updates client.\n    const accept = accepts(req);\n    const acceptedType = accept.types([\n      'unknown/unknown',\n      'multipart/mixed',\n      'application/json',\n      'application/expo+json',\n      'text/plain',\n    ]);\n\n    let responseContentType;\n    switch (acceptedType) {\n      case 'multipart/mixed':\n        responseContentType = ResponseContentType.MULTIPART_MIXED;\n        break;\n      case 'application/json':\n        responseContentType = ResponseContentType.APPLICATION_JSON;\n        break;\n      case 'application/expo+json':\n        responseContentType = ResponseContentType.APPLICATION_EXPO_JSON;\n        break;\n      default:\n        responseContentType = ResponseContentType.TEXT_PLAIN;\n        break;\n    }\n\n    const expectSignature = req.headers['expo-expect-signature'];\n\n    return {\n      responseContentType,\n      platform,\n      expectSignature: expectSignature ? String(expectSignature) : null,\n      hostname: stripPort(req.headers['host']),\n    };\n  }\n\n  private getDefaultResponseHeaders(): ServerHeaders {\n    const headers = new Map<string, number | string | readonly string[]>();\n    // set required headers for Expo Updates manifest specification\n    headers.set('expo-protocol-version', 0);\n    headers.set('expo-sfv-version', 0);\n    headers.set('cache-control', 'private, max-age=0');\n    return headers;\n  }\n\n  public async _getManifestResponseAsync(requestOptions: ExpoGoManifestRequestInfo): Promise<{\n    body: string;\n    version: string;\n    headers: ServerHeaders;\n  }> {\n    const { exp, hostUri, expoGoConfig, bundleUrl } = await this._resolveProjectSettingsAsync(\n      requestOptions\n    );\n\n    const runtimeVersion = Updates.getRuntimeVersion(\n      { ...exp, runtimeVersion: exp.runtimeVersion ?? { policy: 'sdkVersion' } },\n      requestOptions.platform\n    );\n    if (!runtimeVersion) {\n      throw new CommandError(\n        'MANIFEST_MIDDLEWARE',\n        `Unable to determine runtime version for platform '${requestOptions.platform}'`\n      );\n    }\n\n    const codeSigningInfo = await getCodeSigningInfoAsync(\n      exp,\n      requestOptions.expectSignature,\n      this.options.privateKeyPath\n    );\n\n    const easProjectId = exp.extra?.eas?.projectId as string | undefined | null;\n    const scopeKey = await ExpoGoManifestHandlerMiddleware.getScopeKeyAsync({\n      slug: exp.slug,\n      codeSigningInfo,\n    });\n\n    const expoUpdatesManifest: ExpoUpdatesManifest = {\n      id: crypto.randomUUID(),\n      createdAt: new Date().toISOString(),\n      runtimeVersion,\n      launchAsset: {\n        key: 'bundle',\n        contentType: 'application/javascript',\n        url: bundleUrl,\n      },\n      assets: [], // assets are not used in development\n      metadata: {}, // required for the client to detect that this is an expo-updates manifest\n      extra: {\n        eas: {\n          projectId: easProjectId ?? undefined,\n        },\n        expoClient: {\n          ...exp,\n          hostUri,\n        },\n        expoGo: expoGoConfig,\n        scopeKey,\n      },\n    };\n\n    const stringifiedManifest = JSON.stringify(expoUpdatesManifest);\n\n    let manifestPartHeaders: { 'expo-signature': string } | null = null;\n    let certificateChainBody: string | null = null;\n    if (codeSigningInfo) {\n      const signature = signManifestString(stringifiedManifest, codeSigningInfo);\n      manifestPartHeaders = {\n        'expo-signature': serializeDictionary(\n          convertToDictionaryItemsRepresentation({\n            keyid: codeSigningInfo.keyId,\n            sig: signature,\n            alg: 'rsa-v1_5-sha256',\n          })\n        ),\n      };\n      certificateChainBody = codeSigningInfo.certificateChainForResponse.join('\\n');\n    }\n\n    const headers = this.getDefaultResponseHeaders();\n\n    switch (requestOptions.responseContentType) {\n      case ResponseContentType.MULTIPART_MIXED: {\n        const form = this.getFormData({\n          stringifiedManifest,\n          manifestPartHeaders,\n          certificateChainBody,\n        });\n        headers.set('content-type', `multipart/mixed; boundary=${form.getBoundary()}`);\n        return {\n          body: form.getBuffer().toString(),\n          version: runtimeVersion,\n          headers,\n        };\n      }\n      case ResponseContentType.APPLICATION_EXPO_JSON:\n      case ResponseContentType.APPLICATION_JSON:\n      case ResponseContentType.TEXT_PLAIN: {\n        headers.set(\n          'content-type',\n          ExpoGoManifestHandlerMiddleware.getContentTypeForResponseContentType(\n            requestOptions.responseContentType\n          )\n        );\n        if (manifestPartHeaders) {\n          Object.entries(manifestPartHeaders).forEach(([key, value]) => {\n            headers.set(key, value);\n          });\n        }\n\n        return {\n          body: stringifiedManifest,\n          version: runtimeVersion,\n          headers,\n        };\n      }\n    }\n  }\n\n  private static getContentTypeForResponseContentType(\n    responseContentType: ResponseContentType\n  ): string {\n    switch (responseContentType) {\n      case ResponseContentType.MULTIPART_MIXED:\n        return 'multipart/mixed';\n      case ResponseContentType.APPLICATION_EXPO_JSON:\n        return 'application/expo+json';\n      case ResponseContentType.APPLICATION_JSON:\n        return 'application/json';\n      case ResponseContentType.TEXT_PLAIN:\n        return 'text/plain';\n    }\n  }\n\n  private getFormData({\n    stringifiedManifest,\n    manifestPartHeaders,\n    certificateChainBody,\n  }: {\n    stringifiedManifest: string;\n    manifestPartHeaders: { 'expo-signature': string } | null;\n    certificateChainBody: string | null;\n  }): FormData {\n    const form = new FormData();\n    form.append('manifest', stringifiedManifest, {\n      contentType: 'application/json',\n      header: {\n        ...manifestPartHeaders,\n      },\n    });\n    if (certificateChainBody && certificateChainBody.length > 0) {\n      form.append('certificate_chain', certificateChainBody, {\n        contentType: 'application/x-pem-file',\n      });\n    }\n    return form;\n  }\n\n  protected trackManifest(version?: string) {\n    logEventAsync('Serve Expo Updates Manifest', {\n      runtimeVersion: version,\n    });\n  }\n\n  private static async getScopeKeyAsync({\n    slug,\n    codeSigningInfo,\n  }: {\n    slug: string;\n    codeSigningInfo: CodeSigningInfo | null;\n  }): Promise<string> {\n    const scopeKeyFromCodeSigningInfo = codeSigningInfo?.scopeKey;\n    if (scopeKeyFromCodeSigningInfo) {\n      return scopeKeyFromCodeSigningInfo;\n    }\n\n    // Log.warn(\n    //   env.EXPO_OFFLINE\n    //     ? 'Using anonymous scope key in manifest for offline mode.'\n    //     : 'Using anonymous scope key in manifest.'\n    // );\n    return await getAnonymousScopeKeyAsync(slug);\n  }\n}\n\nasync function getAnonymousScopeKeyAsync(slug: string): Promise<string> {\n  const userAnonymousIdentifier = await UserSettings.getAnonymousIdentifierAsync();\n  return `@${ANONYMOUS_USERNAME}/${slug}-${userAnonymousIdentifier}`;\n}\n\nfunction convertToDictionaryItemsRepresentation(obj: { [key: string]: string }): Dictionary {\n  return new Map(\n    Object.entries(obj).map(([k, v]) => {\n      return [k, [v, new Map()]];\n    })\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}