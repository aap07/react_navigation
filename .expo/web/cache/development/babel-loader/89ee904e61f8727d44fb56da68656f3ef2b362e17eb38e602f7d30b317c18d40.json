{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _excluded = [\"providers\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getIosModFileProviders = getIosModFileProviders;\nexports.withIosBaseMods = withIosBaseMods;\nfunction _jsonFile() {\n  var data = _interopRequireDefault(require(\"@expo/json-file\"));\n  _jsonFile = function _jsonFile() {\n    return data;\n  };\n  return data;\n}\nfunction _plist() {\n  var data = _interopRequireDefault(require(\"@expo/plist\"));\n  _plist = function _plist() {\n    return data;\n  };\n  return data;\n}\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n  _assert = function _assert() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireWildcard(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _xcode() {\n  var data = _interopRequireDefault(require(\"xcode\"));\n  _xcode = function _xcode() {\n    return data;\n  };\n  return data;\n}\nfunction _ios() {\n  var data = require(\"../ios\");\n  _ios = function _ios() {\n    return data;\n  };\n  return data;\n}\nfunction _Entitlements() {\n  var data = require(\"../ios/Entitlements\");\n  _Entitlements = function _Entitlements() {\n    return data;\n  };\n  return data;\n}\nfunction _Xcodeproj() {\n  var data = require(\"../ios/utils/Xcodeproj\");\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n  return data;\n}\nfunction _getInfoPlistPath() {\n  var data = require(\"../ios/utils/getInfoPlistPath\");\n  _getInfoPlistPath = function _getInfoPlistPath() {\n    return data;\n  };\n  return data;\n}\nfunction _modules() {\n  var data = require(\"../utils/modules\");\n  _modules = function _modules() {\n    return data;\n  };\n  return data;\n}\nfunction _sortObject() {\n  var data = require(\"../utils/sortObject\");\n  _sortObject = function _sortObject() {\n    return data;\n  };\n  return data;\n}\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n  _warnings = function _warnings() {\n    return data;\n  };\n  return data;\n}\nfunction _createBaseMod() {\n  var data = require(\"./createBaseMod\");\n  _createBaseMod = function _createBaseMod() {\n    return data;\n  };\n  return data;\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar _fs$promises = _fs().promises,\n  readFile = _fs$promises.readFile,\n  writeFile = _fs$promises.writeFile;\nfunction getEntitlementsPlistTemplate() {\n  return {};\n}\nfunction getInfoPlistTemplate() {\n  return {\n    CFBundleDevelopmentRegion: '$(DEVELOPMENT_LANGUAGE)',\n    CFBundleExecutable: '$(EXECUTABLE_NAME)',\n    CFBundleIdentifier: '$(PRODUCT_BUNDLE_IDENTIFIER)',\n    CFBundleName: '$(PRODUCT_NAME)',\n    CFBundlePackageType: '$(PRODUCT_BUNDLE_PACKAGE_TYPE)',\n    CFBundleInfoDictionaryVersion: '6.0',\n    CFBundleSignature: '????',\n    LSRequiresIPhoneOS: true,\n    NSAppTransportSecurity: {\n      NSAllowsArbitraryLoads: true,\n      NSExceptionDomains: {\n        localhost: {\n          NSExceptionAllowsInsecureHTTPLoads: true\n        }\n      }\n    },\n    UILaunchStoryboardName: 'SplashScreen',\n    UIRequiredDeviceCapabilities: ['armv7'],\n    UIViewControllerBasedStatusBarAppearance: false,\n    UIStatusBarStyle: 'UIStatusBarStyleDefault',\n    CADisableMinimumFrameDurationOnPhone: true\n  };\n}\nvar defaultProviders = {\n  dangerous: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath() {\n      return '';\n    },\n    read: function () {\n      var _read = _asyncToGenerator(function* () {\n        return {};\n      });\n      function read() {\n        return _read.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write = _asyncToGenerator(function* () {});\n      function write() {\n        return _write.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  appDelegate: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref) {\n      var projectRoot = _ref.modRequest.projectRoot;\n      return _ios().Paths.getAppDelegateFilePath(projectRoot);\n    },\n    read: function () {\n      var _read2 = _asyncToGenerator(function* (filePath) {\n        return _ios().Paths.getFileInfo(filePath);\n      });\n      function read(_x) {\n        return _read2.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write2 = _asyncToGenerator(function* (filePath, _ref2) {\n        var contents = _ref2.modResults.contents;\n        yield writeFile(filePath, contents);\n      });\n      function write(_x2, _x3) {\n        return _write2.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  expoPlist: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function getFilePath(_ref3) {\n      var _ref3$modRequest = _ref3.modRequest,\n        platformProjectRoot = _ref3$modRequest.platformProjectRoot,\n        projectName = _ref3$modRequest.projectName;\n      var supportingDirectory = _path().default.join(platformProjectRoot, projectName, 'Supporting');\n      return _path().default.resolve(supportingDirectory, 'Expo.plist');\n    },\n    read: function () {\n      var _read3 = _asyncToGenerator(function* (filePath, _ref4) {\n        var introspect = _ref4.modRequest.introspect;\n        try {\n          return _plist().default.parse(yield readFile(filePath, 'utf8'));\n        } catch (error) {\n          if (introspect) {\n            return {};\n          }\n          throw error;\n        }\n      });\n      function read(_x4, _x5) {\n        return _read3.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write3 = _asyncToGenerator(function* (filePath, _ref5) {\n        var modResults = _ref5.modResults,\n          introspect = _ref5.modRequest.introspect;\n        if (introspect) {\n          return;\n        }\n        yield writeFile(filePath, _plist().default.build((0, _sortObject().sortObject)(modResults)));\n      });\n      function write(_x6, _x7) {\n        return _write3.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  xcodeproj: (0, _createBaseMod().provider)({\n    getFilePath: function getFilePath(_ref6) {\n      var projectRoot = _ref6.modRequest.projectRoot;\n      return _ios().Paths.getPBXProjectPath(projectRoot);\n    },\n    read: function () {\n      var _read4 = _asyncToGenerator(function* (filePath) {\n        var project = _xcode().default.project(filePath);\n        project.parseSync();\n        return project;\n      });\n      function read(_x8) {\n        return _read4.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write4 = _asyncToGenerator(function* (filePath, _ref7) {\n        var modResults = _ref7.modResults;\n        yield writeFile(filePath, modResults.writeSync());\n      });\n      function write(_x9, _x10) {\n        return _write4.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  infoPlist: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function () {\n      var _getFilePath = _asyncToGenerator(function* (config) {\n        var project = null;\n        try {\n          project = (0, _Xcodeproj().getPbxproj)(config.modRequest.projectRoot);\n        } catch (_unused) {}\n        if (project) {\n          var infoPlistBuildProperty = (0, _getInfoPlistPath().getInfoPlistPathFromPbxproj)(project);\n          if (infoPlistBuildProperty) {\n            var infoPlistPath = _path().default.join(config.modRequest.platformProjectRoot, infoPlistBuildProperty);\n            if ((0, _modules().fileExists)(infoPlistPath)) {\n              return infoPlistPath;\n            }\n            (0, _warnings().addWarningIOS)('mods.ios.infoPlist', `Info.plist file linked to Xcode project does not exist: ${infoPlistPath}`);\n          } else {\n            (0, _warnings().addWarningIOS)('mods.ios.infoPlist', 'Failed to find Info.plist linked to Xcode project.');\n          }\n        }\n        try {\n          return yield _ios().Paths.getInfoPlistPath(config.modRequest.projectRoot);\n        } catch (error) {\n          if (config.modRequest.introspect) {\n            return '';\n          }\n          throw error;\n        }\n      });\n      function getFilePath(_x11) {\n        return _getFilePath.apply(this, arguments);\n      }\n      return getFilePath;\n    }(),\n    read: function () {\n      var _read5 = _asyncToGenerator(function* (filePath, config) {\n        if (!config.ios) config.ios = {};\n        if (!config.ios.infoPlist) config.ios.infoPlist = {};\n        var modResults;\n        try {\n          var contents = yield readFile(filePath, 'utf8');\n          (0, _assert().default)(contents, 'Info.plist is empty');\n          modResults = _plist().default.parse(contents);\n        } catch (error) {\n          if (!config.modRequest.introspect) {\n            throw error;\n          }\n          modResults = getInfoPlistTemplate();\n        }\n        config.ios.infoPlist = _objectSpread(_objectSpread({}, modResults || {}), config.ios.infoPlist);\n        return config.ios.infoPlist;\n      });\n      function read(_x12, _x13) {\n        return _read5.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write5 = _asyncToGenerator(function* (filePath, config) {\n        if (!config.ios) {\n          config.ios = {};\n        }\n        config.ios.infoPlist = config.modResults;\n        if (config.modRequest.introspect) {\n          return;\n        }\n        yield writeFile(filePath, _plist().default.build((0, _sortObject().sortObject)(config.modResults)));\n      });\n      function write(_x14, _x15) {\n        return _write5.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  entitlements: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function () {\n      var _getFilePath2 = _asyncToGenerator(function* (config) {\n        try {\n          var _Entitlements$getEnti;\n          (0, _Entitlements().ensureApplicationTargetEntitlementsFileConfigured)(config.modRequest.projectRoot);\n          return (_Entitlements$getEnti = _ios().Entitlements.getEntitlementsPath(config.modRequest.projectRoot)) !== null && _Entitlements$getEnti !== void 0 ? _Entitlements$getEnti : '';\n        } catch (error) {\n          if (config.modRequest.introspect) {\n            return '';\n          }\n          throw error;\n        }\n      });\n      function getFilePath(_x16) {\n        return _getFilePath2.apply(this, arguments);\n      }\n      return getFilePath;\n    }(),\n    read: function () {\n      var _read6 = _asyncToGenerator(function* (filePath, config) {\n        var modResults;\n        try {\n          if (!config.modRequest.ignoreExistingNativeFiles && _fs().default.existsSync(filePath)) {\n            var contents = yield readFile(filePath, 'utf8');\n            (0, _assert().default)(contents, 'Entitlements plist is empty');\n            modResults = _plist().default.parse(contents);\n          } else {\n            modResults = getEntitlementsPlistTemplate();\n          }\n        } catch (error) {\n          if (!config.modRequest.introspect) {\n            throw error;\n          }\n          modResults = getEntitlementsPlistTemplate();\n        }\n        if (!config.ios) config.ios = {};\n        if (!config.ios.entitlements) config.ios.entitlements = {};\n        config.ios.entitlements = _objectSpread(_objectSpread({}, modResults || {}), config.ios.entitlements);\n        return config.ios.entitlements;\n      });\n      function read(_x17, _x18) {\n        return _read6.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write6 = _asyncToGenerator(function* (filePath, config) {\n        if (!config.ios) {\n          config.ios = {};\n        }\n        config.ios.entitlements = config.modResults;\n        if (config.modRequest.introspect) {\n          return;\n        }\n        yield writeFile(filePath, _plist().default.build((0, _sortObject().sortObject)(config.modResults)));\n      });\n      function write(_x19, _x20) {\n        return _write6.apply(this, arguments);\n      }\n      return write;\n    }()\n  }),\n  podfileProperties: (0, _createBaseMod().provider)({\n    isIntrospective: true,\n    getFilePath: function getFilePath(_ref8) {\n      var platformProjectRoot = _ref8.modRequest.platformProjectRoot;\n      return _path().default.resolve(platformProjectRoot, 'Podfile.properties.json');\n    },\n    read: function () {\n      var _read7 = _asyncToGenerator(function* (filePath) {\n        var results = {};\n        try {\n          results = yield _jsonFile().default.readAsync(filePath);\n        } catch (_unused2) {}\n        return results;\n      });\n      function read(_x21) {\n        return _read7.apply(this, arguments);\n      }\n      return read;\n    }(),\n    write: function () {\n      var _write7 = _asyncToGenerator(function* (filePath, _ref9) {\n        var modResults = _ref9.modResults,\n          introspect = _ref9.modRequest.introspect;\n        if (introspect) {\n          return;\n        }\n        yield _jsonFile().default.writeAsync(filePath, modResults);\n      });\n      function write(_x22, _x23) {\n        return _write7.apply(this, arguments);\n      }\n      return write;\n    }()\n  })\n};\nfunction withIosBaseMods(config) {\n  var _ref10 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var providers = _ref10.providers,\n    props = _objectWithoutProperties(_ref10, _excluded);\n  return (0, _createBaseMod().withGeneratedBaseMods)(config, _objectSpread(_objectSpread({}, props), {}, {\n    platform: 'ios',\n    providers: providers !== null && providers !== void 0 ? providers : getIosModFileProviders()\n  }));\n}\nfunction getIosModFileProviders() {\n  return defaultProviders;\n}","map":{"version":3,"names":["_jsonFile","data","_interopRequireDefault","require","_plist","_assert","_fs","_interopRequireWildcard","_path","_xcode","_ios","_Entitlements","_Xcodeproj","_getInfoPlistPath","_modules","_sortObject","_warnings","_createBaseMod","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_fs$promises","promises","readFile","writeFile","getEntitlementsPlistTemplate","getInfoPlistTemplate","CFBundleDevelopmentRegion","CFBundleExecutable","CFBundleIdentifier","CFBundleName","CFBundlePackageType","CFBundleInfoDictionaryVersion","CFBundleSignature","LSRequiresIPhoneOS","NSAppTransportSecurity","NSAllowsArbitraryLoads","NSExceptionDomains","localhost","NSExceptionAllowsInsecureHTTPLoads","UILaunchStoryboardName","UIRequiredDeviceCapabilities","UIViewControllerBasedStatusBarAppearance","UIStatusBarStyle","CADisableMinimumFrameDurationOnPhone","defaultProviders","dangerous","provider","getFilePath","read","_read","_asyncToGenerator","apply","arguments","write","_write","appDelegate","_ref","projectRoot","modRequest","Paths","getAppDelegateFilePath","_read2","filePath","getFileInfo","_x","_write2","_ref2","contents","modResults","_x2","_x3","expoPlist","isIntrospective","_ref3","_ref3$modRequest","platformProjectRoot","projectName","supportingDirectory","join","resolve","_read3","_ref4","introspect","parse","error","_x4","_x5","_write3","_ref5","build","sortObject","_x6","_x7","xcodeproj","_ref6","getPBXProjectPath","_read4","project","parseSync","_x8","_write4","_ref7","writeSync","_x9","_x10","infoPlist","_getFilePath","config","getPbxproj","_unused","infoPlistBuildProperty","getInfoPlistPathFromPbxproj","infoPlistPath","fileExists","addWarningIOS","getInfoPlistPath","_x11","_read5","ios","_objectSpread","_x12","_x13","_write5","_x14","_x15","entitlements","_getFilePath2","_Entitlements$getEnti","ensureApplicationTargetEntitlementsFileConfigured","Entitlements","getEntitlementsPath","_x16","_read6","ignoreExistingNativeFiles","existsSync","_x17","_x18","_write6","_x19","_x20","podfileProperties","_ref8","_read7","results","readAsync","_unused2","_x21","_write7","_ref9","writeAsync","_x22","_x23","withIosBaseMods","_ref10","length","undefined","providers","props","_objectWithoutProperties","_excluded","withGeneratedBaseMods","platform","getIosModFileProviders"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\plugins\\withIosBaseMods.ts"],"sourcesContent":["import JsonFile, { JSONObject, JSONValue } from '@expo/json-file';\nimport plist from '@expo/plist';\nimport assert from 'assert';\nimport fs, { promises } from 'fs';\nimport path from 'path';\nimport xcode, { XcodeProject } from 'xcode';\n\nimport { ExportedConfig, ModConfig } from '../Plugin.types';\nimport { Entitlements, Paths } from '../ios';\nimport { ensureApplicationTargetEntitlementsFileConfigured } from '../ios/Entitlements';\nimport { InfoPlist } from '../ios/IosConfig.types';\nimport { getPbxproj } from '../ios/utils/Xcodeproj';\nimport { getInfoPlistPathFromPbxproj } from '../ios/utils/getInfoPlistPath';\nimport { fileExists } from '../utils/modules';\nimport { sortObject } from '../utils/sortObject';\nimport { addWarningIOS } from '../utils/warnings';\nimport { ForwardedBaseModOptions, provider, withGeneratedBaseMods } from './createBaseMod';\n\nconst { readFile, writeFile } = promises;\n\ntype IosModName = keyof Required<ModConfig>['ios'];\n\nfunction getEntitlementsPlistTemplate() {\n  // TODO: Fetch the versioned template file if possible\n  return {};\n}\n\nfunction getInfoPlistTemplate() {\n  // TODO: Fetch the versioned template file if possible\n  return {\n    CFBundleDevelopmentRegion: '$(DEVELOPMENT_LANGUAGE)',\n    CFBundleExecutable: '$(EXECUTABLE_NAME)',\n    CFBundleIdentifier: '$(PRODUCT_BUNDLE_IDENTIFIER)',\n    CFBundleName: '$(PRODUCT_NAME)',\n    CFBundlePackageType: '$(PRODUCT_BUNDLE_PACKAGE_TYPE)',\n    CFBundleInfoDictionaryVersion: '6.0',\n    CFBundleSignature: '????',\n    LSRequiresIPhoneOS: true,\n    NSAppTransportSecurity: {\n      NSAllowsArbitraryLoads: true,\n      NSExceptionDomains: {\n        localhost: {\n          NSExceptionAllowsInsecureHTTPLoads: true,\n        },\n      },\n    },\n    UILaunchStoryboardName: 'SplashScreen',\n    UIRequiredDeviceCapabilities: ['armv7'],\n    UIViewControllerBasedStatusBarAppearance: false,\n    UIStatusBarStyle: 'UIStatusBarStyleDefault',\n    CADisableMinimumFrameDurationOnPhone: true,\n  };\n}\n\nconst defaultProviders = {\n  dangerous: provider<unknown>({\n    getFilePath() {\n      return '';\n    },\n    async read() {\n      return {};\n    },\n    async write() {},\n  }),\n  // Append a rule to supply AppDelegate data to mods on `mods.ios.appDelegate`\n  appDelegate: provider<Paths.AppDelegateProjectFile>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      // TODO: Get application AppDelegate file from pbxproj.\n      return Paths.getAppDelegateFilePath(projectRoot);\n    },\n    async read(filePath) {\n      return Paths.getFileInfo(filePath);\n    },\n    async write(filePath: string, { modResults: { contents } }) {\n      await writeFile(filePath, contents);\n    },\n  }),\n  // Append a rule to supply Expo.plist data to mods on `mods.ios.expoPlist`\n  expoPlist: provider<JSONObject>({\n    isIntrospective: true,\n    getFilePath({ modRequest: { platformProjectRoot, projectName } }) {\n      const supportingDirectory = path.join(platformProjectRoot, projectName!, 'Supporting');\n      return path.resolve(supportingDirectory, 'Expo.plist');\n    },\n    async read(filePath, { modRequest: { introspect } }) {\n      try {\n        return plist.parse(await readFile(filePath, 'utf8'));\n      } catch (error) {\n        if (introspect) {\n          return {};\n        }\n        throw error;\n      }\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) {\n        return;\n      }\n      await writeFile(filePath, plist.build(sortObject(modResults)));\n    },\n  }),\n  // Append a rule to supply .xcodeproj data to mods on `mods.ios.xcodeproj`\n  xcodeproj: provider<XcodeProject>({\n    getFilePath({ modRequest: { projectRoot } }) {\n      return Paths.getPBXProjectPath(projectRoot);\n    },\n    async read(filePath) {\n      const project = xcode.project(filePath);\n      project.parseSync();\n      return project;\n    },\n    async write(filePath, { modResults }) {\n      await writeFile(filePath, modResults.writeSync());\n    },\n  }),\n  // Append a rule to supply Info.plist data to mods on `mods.ios.infoPlist`\n  infoPlist: provider<InfoPlist, ForwardedBaseModOptions>({\n    isIntrospective: true,\n    async getFilePath(config) {\n      let project: xcode.XcodeProject | null = null;\n      try {\n        project = getPbxproj(config.modRequest.projectRoot);\n      } catch {\n        // noop\n      }\n\n      // Only check / warn if a project actually exists, this'll provide\n      // more accurate warning messages for users in managed projects.\n      if (project) {\n        const infoPlistBuildProperty = getInfoPlistPathFromPbxproj(project);\n\n        if (infoPlistBuildProperty) {\n          //: [root]/myapp/ios/MyApp/Info.plist\n          const infoPlistPath = path.join(\n            //: myapp/ios\n            config.modRequest.platformProjectRoot,\n            //: MyApp/Info.plist\n            infoPlistBuildProperty\n          );\n          if (fileExists(infoPlistPath)) {\n            return infoPlistPath;\n          }\n          addWarningIOS(\n            'mods.ios.infoPlist',\n            `Info.plist file linked to Xcode project does not exist: ${infoPlistPath}`\n          );\n        } else {\n          addWarningIOS('mods.ios.infoPlist', 'Failed to find Info.plist linked to Xcode project.');\n        }\n      }\n      try {\n        // Fallback on glob...\n        return await Paths.getInfoPlistPath(config.modRequest.projectRoot);\n      } catch (error: any) {\n        if (config.modRequest.introspect) {\n          // fallback to an empty string in introspection mode.\n          return '';\n        }\n        throw error;\n      }\n    },\n    async read(filePath, config) {\n      // Apply all of the Info.plist values to the expo.ios.infoPlist object\n      // TODO: Remove this in favor of just overwriting the Info.plist with the Expo object. This will enable people to actually remove values.\n      if (!config.ios) config.ios = {};\n      if (!config.ios.infoPlist) config.ios.infoPlist = {};\n\n      let modResults: InfoPlist;\n      try {\n        const contents = await readFile(filePath, 'utf8');\n        assert(contents, 'Info.plist is empty');\n        modResults = plist.parse(contents) as InfoPlist;\n      } catch (error: any) {\n        // Throw errors in introspection mode.\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n        // Fallback to using the infoPlist object from the Expo config.\n        modResults = getInfoPlistTemplate();\n      }\n\n      config.ios.infoPlist = {\n        ...(modResults || {}),\n        ...config.ios.infoPlist,\n      };\n\n      return config.ios.infoPlist!;\n    },\n    async write(filePath, config) {\n      // Update the contents of the static infoPlist object\n      if (!config.ios) {\n        config.ios = {};\n      }\n      config.ios.infoPlist = config.modResults;\n\n      // Return early without writing, in introspection mode.\n      if (config.modRequest.introspect) {\n        return;\n      }\n\n      await writeFile(filePath, plist.build(sortObject(config.modResults)));\n    },\n  }),\n  // Append a rule to supply .entitlements data to mods on `mods.ios.entitlements`\n  entitlements: provider<JSONObject, ForwardedBaseModOptions>({\n    isIntrospective: true,\n\n    async getFilePath(config) {\n      try {\n        ensureApplicationTargetEntitlementsFileConfigured(config.modRequest.projectRoot);\n        return Entitlements.getEntitlementsPath(config.modRequest.projectRoot) ?? '';\n      } catch (error: any) {\n        if (config.modRequest.introspect) {\n          // fallback to an empty string in introspection mode.\n          return '';\n        }\n        throw error;\n      }\n    },\n\n    async read(filePath, config) {\n      let modResults: JSONObject;\n      try {\n        if (!config.modRequest.ignoreExistingNativeFiles && fs.existsSync(filePath)) {\n          const contents = await readFile(filePath, 'utf8');\n          assert(contents, 'Entitlements plist is empty');\n          modResults = plist.parse(contents);\n        } else {\n          modResults = getEntitlementsPlistTemplate();\n        }\n      } catch (error: any) {\n        // Throw errors in introspection mode.\n        if (!config.modRequest.introspect) {\n          throw error;\n        }\n        // Fallback to using the template file.\n        modResults = getEntitlementsPlistTemplate();\n      }\n\n      // Apply all of the .entitlements values to the expo.ios.entitlements object\n      // TODO: Remove this in favor of just overwriting the .entitlements with the Expo object. This will enable people to actually remove values.\n      if (!config.ios) config.ios = {};\n      if (!config.ios.entitlements) config.ios.entitlements = {};\n\n      config.ios.entitlements = {\n        ...(modResults || {}),\n        ...config.ios.entitlements,\n      };\n\n      return config.ios.entitlements!;\n    },\n\n    async write(filePath, config) {\n      // Update the contents of the static entitlements object\n      if (!config.ios) {\n        config.ios = {};\n      }\n      config.ios.entitlements = config.modResults;\n\n      // Return early without writing, in introspection mode.\n      if (config.modRequest.introspect) {\n        return;\n      }\n\n      await writeFile(filePath, plist.build(sortObject(config.modResults)));\n    },\n  }),\n\n  // Append a rule to supply Podfile.properties.json data to mods on `mods.ios.podfileProperties`\n  podfileProperties: provider<Record<string, JSONValue>>({\n    isIntrospective: true,\n\n    getFilePath({ modRequest: { platformProjectRoot } }) {\n      return path.resolve(platformProjectRoot, 'Podfile.properties.json');\n    },\n    async read(filePath) {\n      let results: Record<string, JSONValue> = {};\n      try {\n        results = await JsonFile.readAsync(filePath);\n      } catch {}\n      return results;\n    },\n    async write(filePath, { modResults, modRequest: { introspect } }) {\n      if (introspect) {\n        return;\n      }\n      await JsonFile.writeAsync(filePath, modResults);\n    },\n  }),\n};\n\ntype IosDefaultProviders = typeof defaultProviders;\n\nexport function withIosBaseMods(\n  config: ExportedConfig,\n  {\n    providers,\n    ...props\n  }: ForwardedBaseModOptions & { providers?: Partial<IosDefaultProviders> } = {}\n): ExportedConfig {\n  return withGeneratedBaseMods<IosModName>(config, {\n    ...props,\n    platform: 'ios',\n    providers: providers ?? getIosModFileProviders(),\n  });\n}\n\nexport function getIosModFileProviders() {\n  return defaultProviders;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}