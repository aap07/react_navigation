{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setSplashDrawableAsync = setSplashDrawableAsync;\nexports.withAndroidSplashDrawables = void 0;\nfunction _configPlugins() {\n  var data = require(\"@expo/config-plugins\");\n  _configPlugins = function _configPlugins() {\n    return data;\n  };\n  return data;\n}\nvar withAndroidSplashDrawables = function withAndroidSplashDrawables(config, splash) {\n  return (0, _configPlugins().withDangerousMod)(config, ['android', function () {\n    var _ref = _asyncToGenerator(function* (config) {\n      if (splash) {\n        yield setSplashDrawableAsync(splash, config.modRequest.projectRoot);\n      }\n      return config;\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }()]);\n};\nexports.withAndroidSplashDrawables = withAndroidSplashDrawables;\nfunction setSplashDrawableAsync(_x2, _x3) {\n  return _setSplashDrawableAsync.apply(this, arguments);\n}\nfunction _setSplashDrawableAsync() {\n  _setSplashDrawableAsync = _asyncToGenerator(function* (_ref2, projectRoot) {\n    var resizeMode = _ref2.resizeMode;\n    var filePath = yield _configPlugins().AndroidConfig.Paths.getResourceXMLPathAsync(projectRoot, {\n      name: 'splashscreen',\n      kind: 'drawable'\n    });\n    var xmlContent = {\n      'layer-list': {\n        $: {\n          'xmlns:android': 'http://schemas.android.com/apk/res/android'\n        },\n        item: [{\n          $: {\n            'android:drawable': '@color/splashscreen_background'\n          }\n        }, resizeMode === 'native' && {\n          bitmap: [{\n            $: {\n              'android:gravity': 'center',\n              'android:src': '@drawable/splashscreen_image'\n            }\n          }]\n        }].filter(Boolean)\n      }\n    };\n    yield _configPlugins().XML.writeXMLAsync({\n      path: filePath,\n      xml: xmlContent\n    });\n  });\n  return _setSplashDrawableAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_configPlugins","data","require","withAndroidSplashDrawables","config","splash","withDangerousMod","_ref","_asyncToGenerator","setSplashDrawableAsync","modRequest","projectRoot","_x","apply","arguments","exports","_x2","_x3","_setSplashDrawableAsync","_ref2","resizeMode","filePath","AndroidConfig","Paths","getResourceXMLPathAsync","name","kind","xmlContent","$","item","bitmap","filter","Boolean","XML","writeXMLAsync","path","xml"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\prebuild-config\\src\\plugins\\unversioned\\expo-splash-screen\\withAndroidSplashDrawables.ts"],"sourcesContent":["import { AndroidConfig, ConfigPlugin, withDangerousMod, XML } from '@expo/config-plugins';\n\nimport { SplashScreenConfig } from './getAndroidSplashConfig';\n\nexport const withAndroidSplashDrawables: ConfigPlugin<Pick<SplashScreenConfig, 'resizeMode'>> = (\n  config,\n  splash\n) => {\n  return withDangerousMod(config, [\n    'android',\n    async (config) => {\n      if (splash) {\n        await setSplashDrawableAsync(splash, config.modRequest.projectRoot);\n      }\n      return config;\n    },\n  ]);\n};\n\nexport async function setSplashDrawableAsync(\n  { resizeMode }: Pick<SplashScreenConfig, 'resizeMode'>,\n  projectRoot: string\n) {\n  const filePath = (await AndroidConfig.Paths.getResourceXMLPathAsync(projectRoot, {\n    name: 'splashscreen',\n    kind: 'drawable',\n  }))!;\n\n  // Nuke and rewrite the splashscreen.xml drawable\n  const xmlContent = {\n    'layer-list': {\n      $: {\n        'xmlns:android': 'http://schemas.android.com/apk/res/android',\n      },\n      item: [\n        {\n          $: {\n            // TODO: Ensure these keys don't get out of sync\n            'android:drawable': '@color/splashscreen_background',\n          },\n        },\n        // Only include the image if resizeMode native is in-use.\n        resizeMode === 'native' && {\n          bitmap: [\n            {\n              $: {\n                'android:gravity': 'center',\n                // TODO: Ensure these keys don't get out of sync\n                'android:src': '@drawable/splashscreen_image',\n              },\n            },\n          ],\n        },\n      ].filter(Boolean),\n    },\n  };\n  await XML.writeXMLAsync({ path: filePath, xml: xmlContent });\n}\n"],"mappings":";;;;;;;;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA,GAAAC,OAAA;EAAAF,cAAA,YAAAA,eAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAIO,IAAME,0BAAgF,GAAG,SAAnFA,0BAAgFA,CAC3FC,MAAM,EACNC,MAAM,EACH;EACH,OAAO,IAAAL,cAAA,GAAAM,gBAAgB,EAACF,MAAM,EAAE,CAC9B,SAAS;IAAA,IAAAG,IAAA,GAAAC,iBAAA,CACT,WAAOJ,MAAM,EAAK;MAChB,IAAIC,MAAM,EAAE;QACV,MAAMI,sBAAsB,CAACJ,MAAM,EAAED,MAAM,CAACM,UAAU,CAACC,WAAW,CAAC;MACrE;MACA,OAAOP,MAAM;IACf,CAAC;IAAA,iBAAAQ,EAAA;MAAA,OAAAL,IAAA,CAAAM,KAAA,OAAAC,SAAA;IAAA;EAAA,IACF,CAAC;AACJ,CAAC;AAACC,OAAA,CAAAZ,0BAAA,GAAAA,0BAAA;AAAA,SAEoBM,sBAAsBA,CAAAO,GAAA,EAAAC,GAAA;EAAA,OAAAC,uBAAA,CAAAL,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAI,wBAAA;EAAAA,uBAAA,GAAAV,iBAAA,CAArC,WAAAW,KAAA,EAELR,WAAmB,EACnB;IAAA,IAFES,UAAA,GAAAD,KAAA,CAAAC,UAAA;IAGF,IAAMC,QAAQ,SAAUrB,cAAA,GAAAsB,aAAa,CAACC,KAAK,CAACC,uBAAuB,CAACb,WAAW,EAAE;MAC/Ec,IAAI,EAAE,cAAc;MACpBC,IAAI,EAAE;IACR,CAAC,CAAG;IAGJ,IAAMC,UAAU,GAAG;MACjB,YAAY,EAAE;QACZC,CAAC,EAAE;UACD,eAAe,EAAE;QACnB,CAAC;QACDC,IAAI,EAAE,CACJ;UACED,CAAC,EAAE;YAED,kBAAkB,EAAE;UACtB;QACF,CAAC,EAEDR,UAAU,KAAK,QAAQ,IAAI;UACzBU,MAAM,EAAE,CACN;YACEF,CAAC,EAAE;cACD,iBAAiB,EAAE,QAAQ;cAE3B,aAAa,EAAE;YACjB;UACF,CAAC;QAEL,CAAC,CACF,CAACG,MAAM,CAACC,OAAO;MAClB;IACF,CAAC;IACD,MAAMhC,cAAA,GAAAiC,GAAG,CAACC,aAAa,CAAC;MAAEC,IAAI,EAAEd,QAAQ;MAAEe,GAAG,EAAET;IAAW,CAAC,CAAC;EAC9D;EAAA,OAAAT,uBAAA,CAAAL,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}