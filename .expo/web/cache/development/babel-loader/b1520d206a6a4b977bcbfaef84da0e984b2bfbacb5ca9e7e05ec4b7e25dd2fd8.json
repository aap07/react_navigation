{"ast":null,"code":"#!/usr/bin/env node\n\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.expoCustomize = void 0;\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _args = require(\"../utils/args\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar expoCustomize = function () {\n  var _ref = _asyncToGenerator(function* (argv) {\n    var args = (0, _args).assertWithOptionsArgs({\n      \"--help\": Boolean,\n      \"-h\": \"--help\"\n    }, {\n      argv: argv,\n      permissive: true\n    });\n    if (args[\"--help\"]) {\n      (0, _args).printHelp(`Generate static project files`, _chalk.default`npx expo customize {dim [files...] -- [options]}`, [_chalk.default`[files...]  List of files to generate`, _chalk.default`[options]   Options to pass to the install command`, `-h, --help  Usage info`].join(\"\\n\"));\n    }\n    var _require = require(\"./customizeAsync\"),\n      customizeAsync = _require.customizeAsync;\n    var _require2 = require(\"../utils/errors\"),\n      logCmdError = _require2.logCmdError;\n    var _require3 = require(\"./resolveOptions\"),\n      resolveArgsAsync = _require3.resolveArgsAsync;\n    var _yield$resolveArgsAsy = yield resolveArgsAsync(process.argv.slice(3)).catch(logCmdError),\n      variadic = _yield$resolveArgsAsy.variadic,\n      options = _yield$resolveArgsAsy.options,\n      extras = _yield$resolveArgsAsy.extras;\n    return customizeAsync(variadic, options, extras).catch(logCmdError);\n  });\n  return function expoCustomize(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexports.expoCustomize = expoCustomize;","map":{"version":3,"names":["_chalk","_interopRequireDefault","require","_args","expoCustomize","_ref","_asyncToGenerator","argv","args","assertWithOptionsArgs","Boolean","permissive","printHelp","default","join","_require","customizeAsync","_require2","logCmdError","_require3","resolveArgsAsync","_yield$resolveArgsAsy","process","slice","catch","variadic","options","extras","_x","apply","arguments"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\customize\\index.ts"],"sourcesContent":["#!/usr/bin/env node\nimport chalk from 'chalk';\n\nimport { Command } from '../../bin/cli';\nimport { assertWithOptionsArgs, printHelp } from '../utils/args';\n\nexport const expoCustomize: Command = async (argv) => {\n  const args = assertWithOptionsArgs(\n    {\n      // Other options are parsed manually.\n      '--help': Boolean,\n      // Aliases\n      '-h': '--help',\n    },\n    {\n      argv,\n      // Allow other options, we'll throw an error if unexpected values are passed.\n      permissive: true,\n    }\n  );\n\n  if (args['--help']) {\n    printHelp(\n      `Generate static project files`,\n      chalk`npx expo customize {dim [files...] -- [options]}`,\n      [\n        chalk`[files...]  List of files to generate`,\n        chalk`[options]   Options to pass to the install command`,\n        `-h, --help  Usage info`,\n      ].join('\\n')\n    );\n  }\n\n  // Load modules after the help prompt so `npx expo install -h` shows as fast as possible.\n  const { customizeAsync } = require('./customizeAsync') as typeof import('./customizeAsync');\n  const { logCmdError } = require('../utils/errors') as typeof import('../utils/errors');\n  const { resolveArgsAsync } = require('./resolveOptions') as typeof import('./resolveOptions');\n\n  const { variadic, options, extras } = await resolveArgsAsync(process.argv.slice(3)).catch(\n    logCmdError\n  );\n  return customizeAsync(variadic, options, extras).catch(logCmdError);\n};\n"],"mappings":"AAAA;;;;;;;;AACkB,IAAAA,MAAO,GAAAC,sBAAA,CAAAC,OAAA,CAAP,OAAO;AAGwB,IAAAC,KAAe,GAAAD,OAAA;;;;;;AAEzD,IAAME,aAAa;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAY,WAAOC,IAAI,EAAK;IACpD,IAAMC,IAAI,GAAG,IAAAL,KAAqB,EAYjCM,qBAZiC,CAChC;MAEE,QAAQ,EAAEC,OAAO;MAEjB,IAAI,EAAE;KACP,EACD;MACEH,IAAI,EAAJA,IAAI;MAEJI,UAAU,EAAE;KACb,CACF;IAED,IAAIH,IAAI,CAAC,QAAQ,CAAC,EAAE;MAClB,IAAAL,KAAS,EAQRS,SARQ,CACN,+BAA8B,EAC/BZ,MAAK,CAAAa,OAAC,kDAAiD,EACvD,CACEb,MAAK,CAAAa,OAAC,uCAAsC,EAC5Cb,MAAK,CAAAa,OAAC,oDAAmD,EACxD,wBAAuB,CACzB,CAACC,IAAI,CAAC,IAAI,CAAC,CACb;;IAIH,IAAAC,QAAA,GAA2Bb,OAAO,mBAAmB,CAAC;MAA9Cc,cAAc,GAAAD,QAAA,CAAdC,cAAc;IACtB,IAAAC,SAAA,GAAwBf,OAAO,kBAAkB,CAAC;MAA1CgB,WAAW,GAAAD,SAAA,CAAXC,WAAW;IACnB,IAAAC,SAAA,GAA6BjB,OAAO,mBAAmB,CAAC;MAAhDkB,gBAAgB,GAAAD,SAAA,CAAhBC,gBAAgB;IAExB,IAAAC,qBAAA,SAA4CD,gBAAgB,CAACE,OAAO,CAACf,IAAI,CAACgB,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,KAAK,CACvFN,WAAW,CACZ;MAFOO,QAAQ,GAAAJ,qBAAA,CAARI,QAAQ;MAAEC,OAAO,GAAAL,qBAAA,CAAPK,OAAO;MAAEC,MAAM,GAAAN,qBAAA,CAANM,MAAM;IAGjC,OAAOX,cAAc,CAACS,QAAQ,EAAEC,OAAO,EAAEC,MAAM,CAAC,CAACH,KAAK,CAACN,WAAW,CAAC;GACpE;EAAA,gBApCYd,aAAaA,CAAAwB,EAAA;IAAA,OAAAvB,IAAA,CAAAwB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAoCzB;QApCY1B,aAAa,GAAbA,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}