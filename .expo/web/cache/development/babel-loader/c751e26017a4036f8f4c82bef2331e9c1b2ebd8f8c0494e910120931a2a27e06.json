{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n  _execa = function _execa() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function _cliTools() {\n    return data;\n  };\n  return data;\n}\nvar _adb = _interopRequireDefault(require(\"./adb\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction tryInstallAppOnDevice(args, adbPath, device, androidProject, selectedTask) {\n  try {\n    var _ref, _ref2;\n    var _variantFromSelectedT, _variantFromSelectedT2;\n    var appName = androidProject.appName,\n      sourceDir = androidProject.sourceDir;\n    var defaultVariant = (args.mode || 'debug').toLowerCase();\n    var variantFromSelectedTask = selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.replace('install', '').split(/(?=[A-Z])/);\n    var variantPath = (_ref = variantFromSelectedTask === null || variantFromSelectedTask === void 0 ? void 0 : (_variantFromSelectedT = variantFromSelectedTask.join('/')) === null || _variantFromSelectedT === void 0 ? void 0 : _variantFromSelectedT.toLowerCase()) != null ? _ref : defaultVariant;\n    var variantAppName = (_ref2 = variantFromSelectedTask === null || variantFromSelectedTask === void 0 ? void 0 : (_variantFromSelectedT2 = variantFromSelectedTask.join('-')) === null || _variantFromSelectedT2 === void 0 ? void 0 : _variantFromSelectedT2.toLowerCase()) != null ? _ref2 : defaultVariant;\n    var pathToApk;\n    if (!args.binaryPath) {\n      var buildDirectory = `${sourceDir}/${appName}/build/outputs/apk/${variantPath}`;\n      var apkFile = getInstallApkName(appName, adbPath, variantAppName, device, buildDirectory);\n      pathToApk = `${buildDirectory}/${apkFile}`;\n    } else {\n      pathToApk = args.binaryPath;\n    }\n    var installArgs = ['-s', device, 'install', '-r', '-d'];\n    if (args.user !== undefined) {\n      installArgs.push('--user', `${args.user}`);\n    }\n    var adbArgs = [].concat(installArgs, [pathToApk]);\n    _cliTools().logger.info(`Installing the app on the device \"${device}\"...`);\n    _cliTools().logger.debug(`Running command \"cd android && adb ${adbArgs.join(' ')}\"`);\n    _execa().default.sync(adbPath, adbArgs, {\n      stdio: 'inherit'\n    });\n  } catch (error) {\n    throw new (_cliTools().CLIError)('Failed to install the app on the device.', error);\n  }\n}\nfunction getInstallApkName(appName, adbPath, variant, device, buildDirectory) {\n  var availableCPUs = _adb.default.getAvailableCPUs(adbPath, device);\n  for (var availableCPU of availableCPUs.concat('universal')) {\n    var _apkName = `${appName}-${availableCPU}-${variant}.apk`;\n    if (_fs().default.existsSync(`${buildDirectory}/${_apkName}`)) {\n      return _apkName;\n    }\n  }\n  var apkName = `${appName}-${variant}.apk`;\n  if (_fs().default.existsSync(`${buildDirectory}/${apkName}`)) {\n    return apkName;\n  }\n  throw new Error('Could not find the correct install APK file.');\n}\nvar _default = tryInstallAppOnDevice;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_execa","data","_interopRequireDefault","require","_fs","_cliTools","_adb","obj","__esModule","tryInstallAppOnDevice","args","adbPath","device","androidProject","selectedTask","_ref","_ref2","_variantFromSelectedT","_variantFromSelectedT2","appName","sourceDir","defaultVariant","mode","toLowerCase","variantFromSelectedTask","replace","split","variantPath","join","variantAppName","pathToApk","binaryPath","buildDirectory","apkFile","getInstallApkName","installArgs","user","undefined","push","adbArgs","concat","logger","info","debug","sync","stdio","error","CLIError","variant","availableCPUs","getAvailableCPUs","availableCPU","apkName","existsSync","Error","_default"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryInstallAppOnDevice.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _execa() {\n  const data = _interopRequireDefault(require(\"execa\"));\n  _execa = function () {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n  _fs = function () {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function () {\n    return data;\n  };\n  return data;\n}\nvar _adb = _interopRequireDefault(require(\"./adb\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction tryInstallAppOnDevice(args, adbPath, device, androidProject, selectedTask) {\n  try {\n    var _variantFromSelectedT, _variantFromSelectedT2;\n    // \"app\" is usually the default value for Android apps with only 1 app\n    const {\n      appName,\n      sourceDir\n    } = androidProject;\n    const defaultVariant = (args.mode || 'debug').toLowerCase();\n\n    // handle if selected task from interactive mode includes build flavour as well, eg. installProductionDebug should create ['production','debug'] array\n    const variantFromSelectedTask = selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.replace('install', '').split(/(?=[A-Z])/);\n\n    // create path to output file, eg. `production/debug`\n    const variantPath = (variantFromSelectedTask === null || variantFromSelectedTask === void 0 ? void 0 : (_variantFromSelectedT = variantFromSelectedTask.join('/')) === null || _variantFromSelectedT === void 0 ? void 0 : _variantFromSelectedT.toLowerCase()) ?? defaultVariant;\n    // create output file name, eg. `production-debug`\n    const variantAppName = (variantFromSelectedTask === null || variantFromSelectedTask === void 0 ? void 0 : (_variantFromSelectedT2 = variantFromSelectedTask.join('-')) === null || _variantFromSelectedT2 === void 0 ? void 0 : _variantFromSelectedT2.toLowerCase()) ?? defaultVariant;\n    let pathToApk;\n    if (!args.binaryPath) {\n      const buildDirectory = `${sourceDir}/${appName}/build/outputs/apk/${variantPath}`;\n      const apkFile = getInstallApkName(appName, adbPath, variantAppName, device, buildDirectory);\n      pathToApk = `${buildDirectory}/${apkFile}`;\n    } else {\n      pathToApk = args.binaryPath;\n    }\n    const installArgs = ['-s', device, 'install', '-r', '-d'];\n    if (args.user !== undefined) {\n      installArgs.push('--user', `${args.user}`);\n    }\n    const adbArgs = [...installArgs, pathToApk];\n    _cliTools().logger.info(`Installing the app on the device \"${device}\"...`);\n    _cliTools().logger.debug(`Running command \"cd android && adb ${adbArgs.join(' ')}\"`);\n    _execa().default.sync(adbPath, adbArgs, {\n      stdio: 'inherit'\n    });\n  } catch (error) {\n    throw new (_cliTools().CLIError)('Failed to install the app on the device.', error);\n  }\n}\nfunction getInstallApkName(appName, adbPath, variant, device, buildDirectory) {\n  const availableCPUs = _adb.default.getAvailableCPUs(adbPath, device);\n\n  // check if there is an apk file like app-armeabi-v7a-debug.apk\n  for (const availableCPU of availableCPUs.concat('universal')) {\n    const apkName = `${appName}-${availableCPU}-${variant}.apk`;\n    if (_fs().default.existsSync(`${buildDirectory}/${apkName}`)) {\n      return apkName;\n    }\n  }\n\n  // check if there is a default file like app-debug.apk\n  const apkName = `${appName}-${variant}.apk`;\n  if (_fs().default.existsSync(`${buildDirectory}/${apkName}`)) {\n    return apkName;\n  }\n  throw new Error('Could not find the correct install APK file.');\n}\nvar _default = tryInstallAppOnDevice;\nexports.default = _default;\n\n//# sourceMappingURL=tryInstallAppOnDevice.ts.map"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AACxB,SAASC,MAAMA,CAAA,EAAG;EAChB,IAAMC,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EACrDH,MAAM,GAAG,SAAAA,OAAA,EAAY;IACnB,OAAOC,IAAI;EACb,CAAC;EACD,OAAOA,IAAI;AACb;AACA,SAASG,GAAGA,CAAA,EAAG;EACb,IAAMH,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,IAAI,CAAC,CAAC;EAClDC,GAAG,GAAG,SAAAA,IAAA,EAAY;IAChB,OAAOH,IAAI;EACb,CAAC;EACD,OAAOA,IAAI;AACb;AACA,SAASI,SAASA,CAAA,EAAG;EACnB,IAAMJ,IAAI,GAAGE,OAAO,CAAC,mCAAmC,CAAC;EACzDE,SAAS,GAAG,SAAAA,UAAA,EAAY;IACtB,OAAOJ,IAAI;EACb,CAAC;EACD,OAAOA,IAAI;AACb;AACA,IAAIK,IAAI,GAAGJ,sBAAsB,CAACC,OAAO,QAAQ,CAAC,CAAC;AACnD,SAASD,sBAAsBA,CAACK,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAER,OAAO,EAAEQ;EAAI,CAAC;AAAE;AAC9F,SAASE,qBAAqBA,CAACC,IAAI,EAAEC,OAAO,EAAEC,MAAM,EAAEC,cAAc,EAAEC,YAAY,EAAE;EAClF,IAAI;IAAA,IAAAC,IAAA,EAAAC,KAAA;IACF,IAAIC,qBAAqB,EAAEC,sBAAsB;IAEjD,IACEC,OAAO,GAELN,cAAc,CAFhBM,OAAO;MACPC,SAAS,GACPP,cAAc,CADhBO,SAAS;IAEX,IAAMC,cAAc,GAAG,CAACX,IAAI,CAACY,IAAI,IAAI,OAAO,EAAEC,WAAW,CAAC,CAAC;IAG3D,IAAMC,uBAAuB,GAAGV,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,YAAY,CAACW,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAACC,KAAK,CAAC,WAAW,CAAC;IAGlJ,IAAMC,WAAW,IAAAZ,IAAA,GAAIS,uBAAuB,KAAK,IAAI,IAAIA,uBAAuB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,CAACP,qBAAqB,GAAGO,uBAAuB,CAACI,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,IAAIX,qBAAqB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,qBAAqB,CAACM,WAAW,CAAC,CAAC,YAAAR,IAAA,GAAKM,cAAc;IAEjR,IAAMQ,cAAc,IAAAb,KAAA,GAAIQ,uBAAuB,KAAK,IAAI,IAAIA,uBAAuB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,CAACN,sBAAsB,GAAGM,uBAAuB,CAACI,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,IAAIV,sBAAsB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,sBAAsB,CAACK,WAAW,CAAC,CAAC,YAAAP,KAAA,GAAKK,cAAc;IACvR,IAAIS,SAAS;IACb,IAAI,CAACpB,IAAI,CAACqB,UAAU,EAAE;MACpB,IAAMC,cAAc,GAAI,GAAEZ,SAAU,IAAGD,OAAQ,sBAAqBQ,WAAY,EAAC;MACjF,IAAMM,OAAO,GAAGC,iBAAiB,CAACf,OAAO,EAAER,OAAO,EAAEkB,cAAc,EAAEjB,MAAM,EAAEoB,cAAc,CAAC;MAC3FF,SAAS,GAAI,GAAEE,cAAe,IAAGC,OAAQ,EAAC;IAC5C,CAAC,MAAM;MACLH,SAAS,GAAGpB,IAAI,CAACqB,UAAU;IAC7B;IACA,IAAMI,WAAW,GAAG,CAAC,IAAI,EAAEvB,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,CAAC;IACzD,IAAIF,IAAI,CAAC0B,IAAI,KAAKC,SAAS,EAAE;MAC3BF,WAAW,CAACG,IAAI,CAAC,QAAQ,EAAG,GAAE5B,IAAI,CAAC0B,IAAK,EAAC,CAAC;IAC5C;IACA,IAAMG,OAAO,MAAAC,MAAA,CAAOL,WAAW,GAAEL,SAAS,EAAC;IAC3CzB,SAAS,CAAC,CAAC,CAACoC,MAAM,CAACC,IAAI,CAAE,qCAAoC9B,MAAO,MAAK,CAAC;IAC1EP,SAAS,CAAC,CAAC,CAACoC,MAAM,CAACE,KAAK,CAAE,sCAAqCJ,OAAO,CAACX,IAAI,CAAC,GAAG,CAAE,GAAE,CAAC;IACpF5B,MAAM,CAAC,CAAC,CAACD,OAAO,CAAC6C,IAAI,CAACjC,OAAO,EAAE4B,OAAO,EAAE;MACtCM,KAAK,EAAE;IACT,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,KAAKzC,SAAS,CAAC,CAAC,CAAC0C,QAAQ,EAAE,0CAA0C,EAAED,KAAK,CAAC;EACrF;AACF;AACA,SAASZ,iBAAiBA,CAACf,OAAO,EAAER,OAAO,EAAEqC,OAAO,EAAEpC,MAAM,EAAEoB,cAAc,EAAE;EAC5E,IAAMiB,aAAa,GAAG3C,IAAI,CAACP,OAAO,CAACmD,gBAAgB,CAACvC,OAAO,EAAEC,MAAM,CAAC;EAGpE,KAAK,IAAMuC,YAAY,IAAIF,aAAa,CAACT,MAAM,CAAC,WAAW,CAAC,EAAE;IAC5D,IAAMY,QAAO,GAAI,GAAEjC,OAAQ,IAAGgC,YAAa,IAAGH,OAAQ,MAAK;IAC3D,IAAI5C,GAAG,CAAC,CAAC,CAACL,OAAO,CAACsD,UAAU,CAAE,GAAErB,cAAe,IAAGoB,QAAQ,EAAC,CAAC,EAAE;MAC5D,OAAOA,QAAO;IAChB;EACF;EAGA,IAAMA,OAAO,GAAI,GAAEjC,OAAQ,IAAG6B,OAAQ,MAAK;EAC3C,IAAI5C,GAAG,CAAC,CAAC,CAACL,OAAO,CAACsD,UAAU,CAAE,GAAErB,cAAe,IAAGoB,OAAQ,EAAC,CAAC,EAAE;IAC5D,OAAOA,OAAO;EAChB;EACA,MAAM,IAAIE,KAAK,CAAC,8CAA8C,CAAC;AACjE;AACA,IAAIC,QAAQ,GAAG9C,qBAAqB;AACpCZ,OAAO,CAACE,OAAO,GAAGwD,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}