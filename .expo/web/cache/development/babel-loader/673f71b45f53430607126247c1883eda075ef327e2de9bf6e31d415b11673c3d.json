{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setSplashScreenLegacyMainActivity = setSplashScreenLegacyMainActivity;\nexports.withAndroidSplashLegacyMainActivity = void 0;\nfunction _configPlugins() {\n  var data = require(\"@expo/config-plugins\");\n  _configPlugins = function _configPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _codeMod() {\n  var data = require(\"@expo/config-plugins/build/android/codeMod\");\n  _codeMod = function _codeMod() {\n    return data;\n  };\n  return data;\n}\nfunction _generateCode() {\n  var data = require(\"@expo/config-plugins/build/utils/generateCode\");\n  _generateCode = function _generateCode() {\n    return data;\n  };\n  return data;\n}\nfunction _debug() {\n  var data = _interopRequireDefault(require(\"debug\"));\n  _debug = function _debug() {\n    return data;\n  };\n  return data;\n}\nfunction _getAndroidSplashConfig() {\n  var data = require(\"./getAndroidSplashConfig\");\n  _getAndroidSplashConfig = function _getAndroidSplashConfig() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = (0, _debug().default)('expo:prebuild-config:expo-splash-screen:android:mainActivity');\nvar SHOW_SPLASH_ID = 'expo-splash-screen-mainActivity-onCreate-show-splash';\nvar withAndroidSplashLegacyMainActivity = function withAndroidSplashLegacyMainActivity(config) {\n  return (0, _configPlugins().withMainActivity)(config, function (config) {\n    config.modResults.contents = setSplashScreenLegacyMainActivity(config, config.modResults.contents, config.modResults.language);\n    return config;\n  });\n};\nexports.withAndroidSplashLegacyMainActivity = withAndroidSplashLegacyMainActivity;\nfunction setSplashScreenLegacyMainActivity(config, mainActivity, language) {\n  var _config$androidStatus;\n  debug(`Modify with language: \"${language}\"`);\n  var splashConfig = (0, _getAndroidSplashConfig().getAndroidSplashConfig)(config);\n  if (!splashConfig) {\n    var mod = (0, _generateCode().removeContents)({\n      src: mainActivity,\n      tag: SHOW_SPLASH_ID\n    });\n    mainActivity = mod.contents;\n    if (mod.didClear) {\n      debug('Removed SplashScreen.show()');\n    }\n    return mainActivity;\n  }\n  var statusBarTranslucent = !!((_config$androidStatus = config.androidStatusBar) !== null && _config$androidStatus !== void 0 && _config$androidStatus.translucent);\n  var resizeMode = splashConfig.resizeMode;\n  var isJava = language === 'java';\n  var LE = isJava ? ';' : '';\n  mainActivity = (0, _codeMod().addImports)(mainActivity, ['expo.modules.splashscreen.SplashScreen', 'expo.modules.splashscreen.SplashScreenImageResizeMode', 'android.os.Bundle'], isJava);\n  if (!mainActivity.match(/(?<=^.*super\\.onCreate.*$)/m)) {\n    var onCreateBlock = isJava ? ['    @Override', '    protected void onCreate(Bundle savedInstanceState) {', '      super.onCreate(savedInstanceState);', '    }'] : ['    override fun onCreate(savedInstanceState: Bundle?) {', '      super.onCreate(savedInstanceState)', '    }'];\n    mainActivity = (0, _generateCode().mergeContents)({\n      src: mainActivity,\n      anchor: isJava ? /(?<=public\\s+class\\s+.*\\s+extends\\s+.*\\s+{.*$)/m : /(?<=class\\s+.*\\s+:\\s+.*\\s+{.*$)/m,\n      offset: 1,\n      comment: '//',\n      tag: 'expo-splash-screen-mainActivity-onCreate',\n      newSrc: onCreateBlock.join('\\n')\n    }).contents;\n  }\n  mainActivity = (0, _generateCode().removeContents)({\n    src: mainActivity,\n    tag: SHOW_SPLASH_ID\n  }).contents;\n  mainActivity = mainActivity.split('\\n').filter(function (line) {\n    return !/SplashScreen\\.show\\(this,\\s?SplashScreenImageResizeMode\\./.test(line);\n  }).join('\\n');\n  mainActivity = (0, _generateCode().mergeContents)({\n    src: mainActivity,\n    anchor: /(?<=^.*super\\.onCreate.*$)/m,\n    offset: 1,\n    comment: '//',\n    tag: SHOW_SPLASH_ID,\n    newSrc: `    SplashScreen.show(this, SplashScreenImageResizeMode.${resizeMode.toUpperCase()}, ReactRootView${isJava ? '.class' : '::class.java'}, ${statusBarTranslucent})${LE}`\n  }).contents;\n  return mainActivity;\n}","map":{"version":3,"names":["_configPlugins","data","require","_codeMod","_generateCode","_debug","_interopRequireDefault","_getAndroidSplashConfig","obj","__esModule","default","debug","SHOW_SPLASH_ID","withAndroidSplashLegacyMainActivity","config","withMainActivity","modResults","contents","setSplashScreenLegacyMainActivity","language","exports","mainActivity","_config$androidStatus","splashConfig","getAndroidSplashConfig","mod","removeContents","src","tag","didClear","statusBarTranslucent","androidStatusBar","translucent","resizeMode","isJava","LE","addImports","match","onCreateBlock","mergeContents","anchor","offset","comment","newSrc","join","split","filter","line","test","toUpperCase"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\prebuild-config\\src\\plugins\\unversioned\\expo-splash-screen\\withAndroidSplashLegacyMainActivity.ts"],"sourcesContent":["import { ConfigPlugin, withMainActivity } from '@expo/config-plugins';\nimport { addImports } from '@expo/config-plugins/build/android/codeMod';\nimport { mergeContents, removeContents } from '@expo/config-plugins/build/utils/generateCode';\nimport { ExpoConfig } from '@expo/config-types';\nimport Debug from 'debug';\n\nimport { getAndroidSplashConfig } from './getAndroidSplashConfig';\n\nconst debug = Debug('expo:prebuild-config:expo-splash-screen:android:mainActivity');\n\n// DO NOT CHANGE\nconst SHOW_SPLASH_ID = 'expo-splash-screen-mainActivity-onCreate-show-splash';\n\nexport const withAndroidSplashLegacyMainActivity: ConfigPlugin = (config) => {\n  return withMainActivity(config, (config) => {\n    config.modResults.contents = setSplashScreenLegacyMainActivity(\n      config,\n      config.modResults.contents,\n      config.modResults.language\n    );\n    return config;\n  });\n};\n\nexport function setSplashScreenLegacyMainActivity(\n  config: Pick<ExpoConfig, 'android' | 'androidStatusBar' | 'userInterfaceStyle'>,\n  mainActivity: string,\n  language: 'java' | 'kt'\n): string {\n  debug(`Modify with language: \"${language}\"`);\n  const splashConfig = getAndroidSplashConfig(config);\n\n  if (!splashConfig) {\n    // Remove our generated code safely...\n    const mod = removeContents({\n      src: mainActivity,\n      tag: SHOW_SPLASH_ID,\n    });\n\n    mainActivity = mod.contents;\n    if (mod.didClear) {\n      debug('Removed SplashScreen.show()');\n    }\n    return mainActivity;\n  }\n  // TODO: Translucent is weird\n  const statusBarTranslucent = !!config.androidStatusBar?.translucent;\n\n  const { resizeMode } = splashConfig;\n  const isJava = language === 'java';\n  const LE = isJava ? ';' : '';\n\n  mainActivity = addImports(\n    mainActivity,\n    [\n      'expo.modules.splashscreen.SplashScreen',\n      'expo.modules.splashscreen.SplashScreenImageResizeMode',\n      'android.os.Bundle',\n    ],\n    isJava\n  );\n\n  if (!mainActivity.match(/(?<=^.*super\\.onCreate.*$)/m)) {\n    const onCreateBlock = isJava\n      ? [\n          '    @Override',\n          '    protected void onCreate(Bundle savedInstanceState) {',\n          '      super.onCreate(savedInstanceState);',\n          '    }',\n        ]\n      : [\n          '    override fun onCreate(savedInstanceState: Bundle?) {',\n          '      super.onCreate(savedInstanceState)',\n          '    }',\n        ];\n\n    mainActivity = mergeContents({\n      src: mainActivity,\n      // insert just below super.onCreate\n      anchor: isJava\n        ? /(?<=public\\s+class\\s+.*\\s+extends\\s+.*\\s+{.*$)/m\n        : /(?<=class\\s+.*\\s+:\\s+.*\\s+{.*$)/m,\n      offset: 1,\n      comment: '//',\n      tag: 'expo-splash-screen-mainActivity-onCreate',\n      newSrc: onCreateBlock.join('\\n'),\n    }).contents;\n  }\n\n  // Remove our generated code safely...\n  mainActivity = removeContents({\n    src: mainActivity,\n    tag: SHOW_SPLASH_ID,\n  }).contents;\n\n  // Remove code from `@expo/configure-splash-screen`\n  mainActivity = mainActivity\n    .split('\\n')\n    .filter((line) => {\n      return !/SplashScreen\\.show\\(this,\\s?SplashScreenImageResizeMode\\./.test(line);\n    })\n    .join('\\n');\n\n  // Reapply generated code.\n  mainActivity = mergeContents({\n    src: mainActivity,\n    // insert just below super.onCreate\n    anchor: /(?<=^.*super\\.onCreate.*$)/m,\n    offset: 1,\n    comment: '//',\n    tag: SHOW_SPLASH_ID,\n    newSrc: `    SplashScreen.show(this, SplashScreenImageResizeMode.${resizeMode.toUpperCase()}, ReactRootView${\n      isJava ? '.class' : '::class.java'\n    }, ${statusBarTranslucent})${LE}`,\n  }).contents;\n\n  // TODO: Remove old `SplashScreen.show`\n\n  return mainActivity;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}