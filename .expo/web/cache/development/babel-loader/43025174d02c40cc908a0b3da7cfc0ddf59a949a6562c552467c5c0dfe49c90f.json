{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/config-plugins/build/utils/Updates.d.ts"],"sourcesContent":["import { Android, ExpoConfig, IOS } from '@expo/config-types';\nexport type ExpoConfigUpdates = Pick<ExpoConfig, 'sdkVersion' | 'owner' | 'runtimeVersion' | 'updates' | 'slug'>;\nexport declare function getExpoUpdatesPackageVersion(projectRoot: string): string | null;\nexport declare function getUpdateUrl(config: Pick<ExpoConfigUpdates, 'owner' | 'slug' | 'updates'>, username: string | null): string | null;\nexport declare function getAppVersion(config: Pick<ExpoConfig, 'version'>): string;\nexport declare function getNativeVersion(config: Pick<ExpoConfig, 'version'> & {\n    android?: Pick<Android, 'versionCode'>;\n    ios?: Pick<IOS, 'buildNumber'>;\n}, platform: 'android' | 'ios'): string;\n/**\n * Compute runtime version policies.\n * @return an expoConfig with only string valued platform specific runtime versions.\n */\nexport declare const withRuntimeVersion: (config: ExpoConfig) => ExpoConfig;\nexport declare function getRuntimeVersionNullable(...[config, platform]: Parameters<typeof getRuntimeVersion>): string | null;\nexport declare function getRuntimeVersion(config: Pick<ExpoConfig, 'version' | 'runtimeVersion' | 'sdkVersion'> & {\n    android?: Pick<Android, 'versionCode' | 'runtimeVersion'>;\n    ios?: Pick<IOS, 'buildNumber' | 'runtimeVersion'>;\n}, platform: 'android' | 'ios'): string | null;\nexport declare function getSDKVersion(config: Pick<ExpoConfigUpdates, 'sdkVersion'>): string | null;\nexport declare function getUpdatesEnabled(config: Pick<ExpoConfigUpdates, 'owner' | 'slug' | 'updates'>, username: string | null): boolean;\nexport declare function getUpdatesTimeout(config: Pick<ExpoConfigUpdates, 'updates'>): number;\nexport declare function getUpdatesCheckOnLaunch(config: Pick<ExpoConfigUpdates, 'updates'>, expoUpdatesPackageVersion?: string | null): 'NEVER' | 'ERROR_RECOVERY_ONLY' | 'ALWAYS' | 'WIFI_ONLY';\nexport declare function getUpdatesCodeSigningCertificate(projectRoot: string, config: Pick<ExpoConfigUpdates, 'updates'>): string | undefined;\nexport declare function getUpdatesCodeSigningMetadata(config: Pick<ExpoConfigUpdates, 'updates'>): NonNullable<ExpoConfigUpdates['updates']>['codeSigningMetadata'];\nexport declare function getUpdatesCodeSigningMetadataStringified(config: Pick<ExpoConfigUpdates, 'updates'>): string | undefined;\nexport declare function getUpdatesRequestHeaders(config: Pick<ExpoConfigUpdates, 'updates'>): NonNullable<ExpoConfigUpdates['updates']>['requestHeaders'];\nexport declare function getUpdatesRequestHeadersStringified(config: Pick<ExpoConfigUpdates, 'updates'>): string | undefined;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}