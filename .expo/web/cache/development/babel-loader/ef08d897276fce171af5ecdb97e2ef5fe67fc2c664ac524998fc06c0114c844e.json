{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBitcode = getBitcode;\nexports.setBitcode = setBitcode;\nexports.setBitcodeWithConfig = setBitcodeWithConfig;\nexports.withCustomBitcode = exports.withBitcode = void 0;\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n  _warnings = function _warnings() {\n    return data;\n  };\n  return data;\n}\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n  return data;\n}\nvar withBitcode = function withBitcode(config) {\n  return (0, _iosPlugins().withXcodeProject)(config, function () {\n    var _ref = _asyncToGenerator(function* (config) {\n      config.modResults = yield setBitcodeWithConfig(config, {\n        project: config.modResults\n      });\n      return config;\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};\nexports.withBitcode = withBitcode;\nvar withCustomBitcode = function withCustomBitcode(config, bitcode) {\n  return (0, _iosPlugins().withXcodeProject)(config, function () {\n    var _ref2 = _asyncToGenerator(function* (config) {\n      config.modResults = yield setBitcode(bitcode, {\n        project: config.modResults\n      });\n      return config;\n    });\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n};\nexports.withCustomBitcode = withCustomBitcode;\nfunction getBitcode(config) {\n  var _config$ios;\n  return (_config$ios = config.ios) === null || _config$ios === void 0 ? void 0 : _config$ios.bitcode;\n}\nfunction setBitcodeWithConfig(config, _ref3) {\n  var project = _ref3.project;\n  var bitcode = getBitcode(config);\n  return setBitcode(bitcode, {\n    project: project\n  });\n}\nfunction setBitcode(bitcode, _ref4) {\n  var project = _ref4.project;\n  var isDefaultBehavior = bitcode == null;\n  if (isDefaultBehavior) {\n    return project;\n  }\n  var targetName = typeof bitcode === 'string' ? bitcode : undefined;\n  var isBitcodeEnabled = !!bitcode;\n  if (targetName) {\n    var configs = Object.entries(project.pbxXCBuildConfigurationSection()).filter(_Xcodeproj().isNotComment);\n    var hasConfiguration = configs.find(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 2),\n        configuration = _ref6[1];\n      return configuration.name === targetName;\n    });\n    if (hasConfiguration) {\n      project.addBuildProperty('ENABLE_BITCODE', 'NO');\n    } else {\n      var names = _toConsumableArray(new Set(configs.map(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n          configuration = _ref8[1];\n        return `\"${configuration.name}\"`;\n      }))).sort();\n      (0, _warnings().addWarningIOS)('ios.bitcode', `No configuration named \"${targetName}\". Expected one of: ${names.join(', ')}.`);\n    }\n  }\n  project.addBuildProperty('ENABLE_BITCODE', isBitcodeEnabled ? 'YES' : 'NO', targetName);\n  return project;\n}","map":{"version":3,"names":["_iosPlugins","data","require","_warnings","_Xcodeproj","withBitcode","config","withXcodeProject","_ref","_asyncToGenerator","modResults","setBitcodeWithConfig","project","_x","apply","arguments","exports","withCustomBitcode","bitcode","_ref2","setBitcode","_x2","getBitcode","_config$ios","ios","_ref3","_ref4","isDefaultBehavior","targetName","undefined","isBitcodeEnabled","configs","Object","entries","pbxXCBuildConfigurationSection","filter","isNotComment","hasConfiguration","find","_ref5","_ref6","_slicedToArray","configuration","name","addBuildProperty","names","_toConsumableArray","Set","map","_ref7","_ref8","sort","addWarningIOS","join"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\ios\\Bitcode.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport { addWarningIOS } from '../utils/warnings';\nimport { isNotComment } from './utils/Xcodeproj';\n\ntype Bitcode = NonNullable<ExpoConfig['ios']>['bitcode'];\n\n/**\n * Plugin to set a bitcode preference for the Xcode project\n * based on the project's Expo config `ios.bitcode` value.\n */\nexport const withBitcode: ConfigPlugin = (config) => {\n  return withXcodeProject(config, async (config) => {\n    config.modResults = await setBitcodeWithConfig(config, {\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\n/**\n * Plugin to set a custom bitcode preference for the Xcode project.\n * Does not read from the Expo config `ios.bitcode`.\n *\n * @param bitcode custom bitcode setting.\n */\nexport const withCustomBitcode: ConfigPlugin<Bitcode> = (config, bitcode) => {\n  return withXcodeProject(config, async (config) => {\n    config.modResults = await setBitcode(bitcode, {\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\n/**\n * Get the bitcode preference from the Expo config.\n */\nexport function getBitcode(config: Pick<ExpoConfig, 'ios'>): Bitcode {\n  return config.ios?.bitcode;\n}\n\n/**\n * Enable or disable the `ENABLE_BITCODE` property of the project configurations.\n */\nexport function setBitcodeWithConfig(\n  config: Pick<ExpoConfig, 'ios'>,\n  { project }: { project: XcodeProject }\n): XcodeProject {\n  const bitcode = getBitcode(config);\n  return setBitcode(bitcode, { project });\n}\n\n/**\n * Enable or disable the `ENABLE_BITCODE` property.\n */\nexport function setBitcode(bitcode: Bitcode, { project }: { project: XcodeProject }): XcodeProject {\n  const isDefaultBehavior = bitcode == null;\n  // If the value is undefined, then do nothing.\n  if (isDefaultBehavior) {\n    return project;\n  }\n\n  const targetName = typeof bitcode === 'string' ? bitcode : undefined;\n  const isBitcodeEnabled = !!bitcode;\n  if (targetName) {\n    // Assert if missing\n    const configs = Object.entries(project.pbxXCBuildConfigurationSection()).filter(isNotComment);\n    const hasConfiguration = configs.find(([, configuration]) => configuration.name === targetName);\n    if (hasConfiguration) {\n      // If targetName is defined then disable bitcode everywhere.\n      project.addBuildProperty('ENABLE_BITCODE', 'NO');\n    } else {\n      const names = [\n        // Remove duplicates, wrap in double quotes, and sort alphabetically.\n        ...new Set(configs.map(([, configuration]) => `\"${configuration.name}\"`)),\n      ].sort();\n      addWarningIOS(\n        'ios.bitcode',\n        `No configuration named \"${targetName}\". Expected one of: ${names.join(', ')}.`\n      );\n    }\n  }\n\n  project.addBuildProperty('ENABLE_BITCODE', isBitcodeEnabled ? 'YES' : 'NO', targetName);\n\n  return project;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}