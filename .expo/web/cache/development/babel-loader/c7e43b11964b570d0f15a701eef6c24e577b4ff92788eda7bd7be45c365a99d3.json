{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.logPrettyItem = logPrettyItem;\nexports.getAppBinaryPath = getAppBinaryPath;\nexports.getEscapedPath = getEscapedPath;\nexports.extractEnvVariableFromBuild = extractEnvVariableFromBuild;\nexports.getProcessOptions = getProcessOptions;\nexports.getXcodeBuildArgsAsync = getXcodeBuildArgsAsync;\nexports.buildAsync = buildAsync;\nexports._assertXcodeBuildResults = _assertXcodeBuildResults;\nvar _xcpretty = require(\"@expo/xcpretty\");\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _childProcess = require(\"child_process\");\nvar _fs = _interopRequireDefault(require(\"fs\"));\nvar _os = _interopRequireDefault(require(\"os\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar Log = _interopRequireWildcard(require(\"../../log\"));\nvar _dir = require(\"../../utils/dir\");\nvar _env = require(\"../../utils/env\");\nvar _errors = require(\"../../utils/errors\");\nvar _terminal = require(\"../../utils/terminal\");\nvar _configureCodeSigning = require(\"./codeSigning/configureCodeSigning\");\nvar _simulatorCodeSigning = require(\"./codeSigning/simulatorCodeSigning\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction logPrettyItem(message) {\n  Log.log(_chalk.default`{whiteBright \\u203A} ${message}`);\n}\nfunction getAppBinaryPath(buildOutput) {\n  var CONFIGURATION_BUILD_DIR = extractEnvVariableFromBuild(buildOutput, \"CONFIGURATION_BUILD_DIR\").sort(function (a, b) {\n    return a.length - b.length;\n  });\n  var UNLOCALIZED_RESOURCES_FOLDER_PATH = extractEnvVariableFromBuild(buildOutput, \"UNLOCALIZED_RESOURCES_FOLDER_PATH\");\n  var binaryPath = _path.default.join(CONFIGURATION_BUILD_DIR[0], UNLOCALIZED_RESOURCES_FOLDER_PATH[UNLOCALIZED_RESOURCES_FOLDER_PATH.length - 1]);\n  return getEscapedPath(binaryPath);\n}\nfunction getEscapedPath(filePath) {\n  if (_fs.default.existsSync(filePath)) {\n    return filePath;\n  }\n  var unescapedPath = filePath.split(/\\\\ /).join(\" \");\n  if (_fs.default.existsSync(unescapedPath)) {\n    return unescapedPath;\n  }\n  throw new _errors.CommandError(\"XCODE_BUILD\", `Unexpected: Generated app at path \"${filePath}\" cannot be read, the app cannot be installed. Please report this and build onto a simulator.`);\n}\nfunction extractEnvVariableFromBuild(buildOutput, variableName) {\n  var reg = new RegExp(`export ${variableName}\\\\\\\\?=(.*)$`, \"mg\");\n  var matched = _toConsumableArray(buildOutput.matchAll(reg));\n  if (!matched || !matched.length) {\n    throw new _errors.CommandError(\"XCODE_BUILD\", `Malformed xcodebuild results: \"${variableName}\" variable was not generated in build output. Please report this issue and run your project with Xcode instead.`);\n  }\n  return matched.map(function (value) {\n    return value[1];\n  }).filter(Boolean);\n}\nfunction getProcessOptions(_ref) {\n  var packager = _ref.packager,\n    shouldSkipInitialBundling = _ref.shouldSkipInitialBundling,\n    terminal = _ref.terminal,\n    port = _ref.port;\n  var SKIP_BUNDLING = shouldSkipInitialBundling ? \"1\" : undefined;\n  if (packager) {\n    return {\n      env: _objectSpread(_objectSpread({}, process.env), {}, {\n        RCT_TERMINAL: terminal,\n        SKIP_BUNDLING: SKIP_BUNDLING,\n        RCT_METRO_PORT: port.toString()\n      })\n    };\n  }\n  return {\n    env: _objectSpread(_objectSpread({}, process.env), {}, {\n      RCT_TERMINAL: terminal,\n      SKIP_BUNDLING: SKIP_BUNDLING,\n      RCT_NO_LAUNCH_PACKAGER: \"true\"\n    })\n  };\n}\nfunction getXcodeBuildArgsAsync(_x) {\n  return _getXcodeBuildArgsAsync.apply(this, arguments);\n}\nfunction _getXcodeBuildArgsAsync() {\n  _getXcodeBuildArgsAsync = _asyncToGenerator(function* (props) {\n    var args = [props.xcodeProject.isWorkspace ? \"-workspace\" : \"-project\", props.xcodeProject.name, \"-configuration\", props.configuration, \"-scheme\", props.scheme, \"-destination\", `id=${props.device.udid}`];\n    if (!props.isSimulator || (0, _simulatorCodeSigning).simulatorBuildRequiresCodeSigning(props.projectRoot)) {\n      var developmentTeamId = yield (0, _configureCodeSigning).ensureDeviceIsCodeSignedForDeploymentAsync(props.projectRoot);\n      if (developmentTeamId) {\n        args.push(`DEVELOPMENT_TEAM=${developmentTeamId}`, \"-allowProvisioningUpdates\", \"-allowProvisioningDeviceRegistration\");\n      }\n    }\n    if (props.buildCache === false) {\n      args.push(\"clean\", \"build\");\n    }\n    return args;\n  });\n  return _getXcodeBuildArgsAsync.apply(this, arguments);\n}\nfunction spawnXcodeBuild(args, options, _ref2) {\n  var onData = _ref2.onData;\n  var buildProcess = (0, _childProcess).spawn(\"xcodebuild\", args, options);\n  var results = \"\";\n  var error = \"\";\n  buildProcess.stdout.on(\"data\", function (data) {\n    var stringData = data.toString();\n    results += stringData;\n    onData(stringData);\n  });\n  buildProcess.stderr.on(\"data\", function (data) {\n    var stringData = data instanceof Buffer ? data.toString() : data;\n    error += stringData;\n  });\n  return new Promise(function () {\n    var _ref3 = _asyncToGenerator(function* (resolve, reject) {\n      buildProcess.on(\"close\", function (code) {\n        resolve({\n          code: code,\n          results: results,\n          error: error\n        });\n      });\n    });\n    return function (_x2, _x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n}\nfunction spawnXcodeBuildWithFlush(_x4, _x5, _x6) {\n  return _spawnXcodeBuildWithFlush.apply(this, arguments);\n}\nfunction _spawnXcodeBuildWithFlush() {\n  _spawnXcodeBuildWithFlush = _asyncToGenerator(function* (args, options, _ref4) {\n    var onFlush = _ref4.onFlush;\n    var currentBuffer = \"\";\n    function flushBuffer() {\n      if (!currentBuffer) {\n        return;\n      }\n      var data = currentBuffer;\n      currentBuffer = \"\";\n      onFlush(data);\n    }\n    var data1 = yield spawnXcodeBuild(args, options, {\n      onData: function onData(stringData) {\n        currentBuffer += stringData;\n        if (currentBuffer.endsWith(_os.default.EOL)) {\n          flushBuffer();\n        }\n      }\n    });\n    flushBuffer();\n    return data1;\n  });\n  return _spawnXcodeBuildWithFlush.apply(this, arguments);\n}\nfunction spawnXcodeBuildWithFormat(_x7, _x8, _x9) {\n  return _spawnXcodeBuildWithFormat.apply(this, arguments);\n}\nfunction _spawnXcodeBuildWithFormat() {\n  _spawnXcodeBuildWithFormat = _asyncToGenerator(function* (args, options, _ref5) {\n    var projectRoot = _ref5.projectRoot,\n      xcodeProject = _ref5.xcodeProject;\n    Log.debug(`  xcodebuild ${args.join(\" \")}`);\n    logPrettyItem(_chalk.default.bold`Planning build`);\n    var formatter = _xcpretty.ExpoRunFormatter.create(projectRoot, {\n      xcodeProject: xcodeProject,\n      isDebug: _env.env.EXPO_DEBUG\n    });\n    var results = yield spawnXcodeBuildWithFlush(args, options, {\n      onFlush: function onFlush(data) {\n        for (var line of formatter.pipe(data)) {\n          Log.log(line);\n        }\n      }\n    });\n    Log.debug(`Exited with code: ${results.code}`);\n    if (results.code === null || results.code === 75) {\n      throw new _errors.AbortCommandError();\n    }\n    Log.log(formatter.getBuildSummary());\n    return _objectSpread(_objectSpread({}, results), {}, {\n      formatter: formatter\n    });\n  });\n  return _spawnXcodeBuildWithFormat.apply(this, arguments);\n}\nfunction buildAsync(_x10) {\n  return _buildAsync.apply(this, arguments);\n}\nfunction _buildAsync() {\n  _buildAsync = _asyncToGenerator(function* (props) {\n    var args = yield getXcodeBuildArgsAsync(props);\n    var projectRoot = props.projectRoot,\n      xcodeProject = props.xcodeProject,\n      shouldSkipInitialBundling = props.shouldSkipInitialBundling,\n      port = props.port;\n    var _yield$spawnXcodeBuil = yield spawnXcodeBuildWithFormat(args, getProcessOptions({\n        packager: false,\n        terminal: (0, _terminal).getUserTerminal(),\n        shouldSkipInitialBundling: shouldSkipInitialBundling,\n        port: port\n      }), {\n        projectRoot: projectRoot,\n        xcodeProject: xcodeProject\n      }),\n      code = _yield$spawnXcodeBuil.code,\n      results = _yield$spawnXcodeBuil.results,\n      formatter = _yield$spawnXcodeBuil.formatter,\n      error = _yield$spawnXcodeBuil.error;\n    var logFilePath = writeBuildLogs(projectRoot, results, error);\n    if (code !== 0) {\n      var wasErrorPresented = !!formatter.errors.length;\n      if (wasErrorPresented) {\n        throw new _errors.CommandError(`Failed to build iOS project. \"xcodebuild\" exited with error code ${code}.`);\n      }\n      _assertXcodeBuildResults(code, results, error, xcodeProject, logFilePath);\n    }\n    return results;\n  });\n  return _buildAsync.apply(this, arguments);\n}\nfunction _assertXcodeBuildResults(code, results, error, xcodeProject, logFilePath) {\n  var ref;\n  var errorTitle = `Failed to build iOS project. \"xcodebuild\" exited with error code ${code}.`;\n  var throwWithMessage = function throwWithMessage(message) {\n    throw new _errors.CommandError(`${errorTitle}\\nTo view more error logs, try building the app with Xcode directly, by opening ${xcodeProject.name}.\\n\\n` + message + `Build logs written to ${_chalk.default.underline(logFilePath)}`);\n  };\n  var localizedError = (ref = error.match(/NSLocalizedFailure = \"(.*)\"/)) == null ? void 0 : ref[1];\n  if (localizedError) {\n    throwWithMessage(_chalk.default.bold(localizedError) + \"\\n\\n\");\n  }\n  throwWithMessage(results + \"\\n\\n\" + error);\n}\nfunction writeBuildLogs(projectRoot, buildOutput, errorOutput) {\n  var _getErrorLogFilePath = getErrorLogFilePath(projectRoot),\n    _getErrorLogFilePath2 = _slicedToArray(_getErrorLogFilePath, 2),\n    logFilePath = _getErrorLogFilePath2[0],\n    errorFilePath = _getErrorLogFilePath2[1];\n  _fs.default.writeFileSync(logFilePath, buildOutput);\n  _fs.default.writeFileSync(errorFilePath, errorOutput);\n  return logFilePath;\n}\nfunction getErrorLogFilePath(projectRoot) {\n  var folder = _path.default.join(projectRoot, \".expo\");\n  (0, _dir).ensureDirectory(folder);\n  return [_path.default.join(folder, \"xcodebuild.log\"), _path.default.join(folder, \"xcodebuild-error.log\")];\n}","map":{"version":3,"names":["_slicedToArray","require","_asyncToGenerator","_defineProperty","_toConsumableArray","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","logPrettyItem","getAppBinaryPath","getEscapedPath","extractEnvVariableFromBuild","getProcessOptions","getXcodeBuildArgsAsync","buildAsync","_assertXcodeBuildResults","_xcpretty","_chalk","_interopRequireDefault","_childProcess","_fs","_os","_path","Log","_interopRequireWildcard","_dir","_env","_errors","_terminal","_configureCodeSigning","_simulatorCodeSigning","message","log","default","buildOutput","CONFIGURATION_BUILD_DIR","sort","a","b","UNLOCALIZED_RESOURCES_FOLDER_PATH","binaryPath","join","filePath","existsSync","unescapedPath","split","CommandError","variableName","reg","RegExp","matched","matchAll","map","value","Boolean","_ref","packager","shouldSkipInitialBundling","terminal","port","SKIP_BUNDLING","undefined","env","process","RCT_TERMINAL","RCT_METRO_PORT","toString","RCT_NO_LAUNCH_PACKAGER","_x","_getXcodeBuildArgsAsync","props","args","xcodeProject","isWorkspace","name","configuration","scheme","device","udid","isSimulator","simulatorBuildRequiresCodeSigning","projectRoot","developmentTeamId","ensureDeviceIsCodeSignedForDeploymentAsync","buildCache","spawnXcodeBuild","options","_ref2","onData","buildProcess","spawn","results","error","stdout","on","data","stringData","stderr","Buffer","Promise","_ref3","resolve","reject","code","_x2","_x3","spawnXcodeBuildWithFlush","_x4","_x5","_x6","_spawnXcodeBuildWithFlush","_ref4","onFlush","currentBuffer","flushBuffer","data1","endsWith","EOL","spawnXcodeBuildWithFormat","_x7","_x8","_x9","_spawnXcodeBuildWithFormat","_ref5","debug","bold","formatter","ExpoRunFormatter","create","isDebug","EXPO_DEBUG","line","pipe","AbortCommandError","getBuildSummary","_x10","_buildAsync","_yield$spawnXcodeBuil","getUserTerminal","logFilePath","writeBuildLogs","wasErrorPresented","errors","ref","errorTitle","throwWithMessage","underline","localizedError","match","errorOutput","_getErrorLogFilePath","getErrorLogFilePath","_getErrorLogFilePath2","errorFilePath","writeFileSync","folder","ensureDirectory"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\run\\ios\\XcodeBuild.ts"],"sourcesContent":["import { ExpoRunFormatter } from '@expo/xcpretty';\nimport chalk from 'chalk';\nimport { spawn, SpawnOptionsWithoutStdio } from 'child_process';\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\n\nimport * as Log from '../../log';\nimport { ensureDirectory } from '../../utils/dir';\nimport { env } from '../../utils/env';\nimport { AbortCommandError, CommandError } from '../../utils/errors';\nimport { getUserTerminal } from '../../utils/terminal';\nimport { BuildProps, ProjectInfo } from './XcodeBuild.types';\nimport { ensureDeviceIsCodeSignedForDeploymentAsync } from './codeSigning/configureCodeSigning';\nimport { simulatorBuildRequiresCodeSigning } from './codeSigning/simulatorCodeSigning';\nexport function logPrettyItem(message: string) {\n  Log.log(chalk`{whiteBright \\u203A} ${message}`);\n}\n\n/**\n *\n * @returns '/Users/evanbacon/Library/Developer/Xcode/DerivedData/myapp-gpgjqjodrxtervaufttwnsgimhrx/Build/Products/Debug-iphonesimulator/myapp.app'\n */\nexport function getAppBinaryPath(buildOutput: string) {\n  // Matches what's used in \"Bundle React Native code and images\" script.\n  // Requires that `-hideShellScriptEnvironment` is not included in the build command (extra logs).\n\n  // Like `\\=/Users/evanbacon/Library/Developer/Xcode/DerivedData/Exponent-anpuosnglkxokahjhfszejloqfvo/Build/Products/Debug-iphonesimulator`\n  const CONFIGURATION_BUILD_DIR = extractEnvVariableFromBuild(\n    buildOutput,\n    'CONFIGURATION_BUILD_DIR'\n  ).sort(\n    // Longer name means more suffixes, we want the shortest possible one to be first.\n    // Massive projects (like Expo Go) can sometimes print multiple different sets of environment variables.\n    // This can become an issue with some\n    (a, b) => a.length - b.length\n  );\n  // Like `Exponent.app`\n  const UNLOCALIZED_RESOURCES_FOLDER_PATH = extractEnvVariableFromBuild(\n    buildOutput,\n    'UNLOCALIZED_RESOURCES_FOLDER_PATH'\n  );\n\n  const binaryPath = path.join(\n    // Use the shortest defined env variable (usually there's just one).\n    CONFIGURATION_BUILD_DIR[0],\n    // Use the last defined env variable.\n    UNLOCALIZED_RESOURCES_FOLDER_PATH[UNLOCALIZED_RESOURCES_FOLDER_PATH.length - 1]\n  );\n\n  // If the app has a space in the name it'll fail because it isn't escaped properly by Xcode.\n  return getEscapedPath(binaryPath);\n}\n\nexport function getEscapedPath(filePath: string): string {\n  if (fs.existsSync(filePath)) {\n    return filePath;\n  }\n  const unescapedPath = filePath.split(/\\\\ /).join(' ');\n  if (fs.existsSync(unescapedPath)) {\n    return unescapedPath;\n  }\n  throw new CommandError(\n    'XCODE_BUILD',\n    `Unexpected: Generated app at path \"${filePath}\" cannot be read, the app cannot be installed. Please report this and build onto a simulator.`\n  );\n}\n\nexport function extractEnvVariableFromBuild(buildOutput: string, variableName: string) {\n  // Xcode can sometimes escape `=` with a backslash or put the value in quotes\n  const reg = new RegExp(`export ${variableName}\\\\\\\\?=(.*)$`, 'mg');\n  const matched = [...buildOutput.matchAll(reg)];\n\n  if (!matched || !matched.length) {\n    throw new CommandError(\n      'XCODE_BUILD',\n      `Malformed xcodebuild results: \"${variableName}\" variable was not generated in build output. Please report this issue and run your project with Xcode instead.`\n    );\n  }\n  return matched.map((value) => value[1]).filter(Boolean) as string[];\n}\n\nexport function getProcessOptions({\n  packager,\n  shouldSkipInitialBundling,\n  terminal,\n  port,\n}: {\n  packager: boolean;\n  shouldSkipInitialBundling?: boolean;\n  terminal: string | undefined;\n  port: number;\n}): SpawnOptionsWithoutStdio {\n  const SKIP_BUNDLING = shouldSkipInitialBundling ? '1' : undefined;\n  if (packager) {\n    return {\n      env: {\n        ...process.env,\n        RCT_TERMINAL: terminal,\n        SKIP_BUNDLING,\n        RCT_METRO_PORT: port.toString(),\n      },\n    };\n  }\n\n  return {\n    env: {\n      ...process.env,\n      RCT_TERMINAL: terminal,\n      SKIP_BUNDLING,\n      // Always skip launching the packager from a build script.\n      // The script is used for people building their project directly from Xcode.\n      // This essentially means \"› Running script 'Start Packager'\" does nothing.\n      RCT_NO_LAUNCH_PACKAGER: 'true',\n      // FORCE_BUNDLING: '0'\n    },\n  };\n}\n\nexport async function getXcodeBuildArgsAsync(\n  props: Pick<\n    BuildProps,\n    | 'buildCache'\n    | 'projectRoot'\n    | 'xcodeProject'\n    | 'configuration'\n    | 'scheme'\n    | 'device'\n    | 'isSimulator'\n  >\n): Promise<string[]> {\n  const args = [\n    props.xcodeProject.isWorkspace ? '-workspace' : '-project',\n    props.xcodeProject.name,\n    '-configuration',\n    props.configuration,\n    '-scheme',\n    props.scheme,\n    '-destination',\n    `id=${props.device.udid}`,\n  ];\n\n  if (!props.isSimulator || simulatorBuildRequiresCodeSigning(props.projectRoot)) {\n    const developmentTeamId = await ensureDeviceIsCodeSignedForDeploymentAsync(props.projectRoot);\n    if (developmentTeamId) {\n      args.push(\n        `DEVELOPMENT_TEAM=${developmentTeamId}`,\n        '-allowProvisioningUpdates',\n        '-allowProvisioningDeviceRegistration'\n      );\n    }\n  }\n\n  // Add last\n  if (props.buildCache === false) {\n    args.push(\n      // Will first clean the derived data folder.\n      'clean',\n      // Then build step must be added otherwise the process will simply clean and exit.\n      'build'\n    );\n  }\n  return args;\n}\n\nfunction spawnXcodeBuild(\n  args: string[],\n  options: SpawnOptionsWithoutStdio,\n  { onData }: { onData: (data: string) => void }\n): Promise<{ code: number | null; results: string; error: string }> {\n  const buildProcess = spawn('xcodebuild', args, options);\n\n  let results = '';\n  let error = '';\n\n  buildProcess.stdout.on('data', (data: Buffer) => {\n    const stringData = data.toString();\n    results += stringData;\n    onData(stringData);\n  });\n\n  buildProcess.stderr.on('data', (data: Buffer) => {\n    const stringData = data instanceof Buffer ? data.toString() : data;\n    error += stringData;\n  });\n\n  return new Promise(async (resolve, reject) => {\n    buildProcess.on('close', (code: number) => {\n      resolve({ code, results, error });\n    });\n  });\n}\n\nasync function spawnXcodeBuildWithFlush(\n  args: string[],\n  options: SpawnOptionsWithoutStdio,\n  { onFlush }: { onFlush: (data: string) => void }\n): Promise<{ code: number | null; results: string; error: string }> {\n  let currentBuffer = '';\n\n  // Data can be sent in chunks that would have no relevance to our regex\n  // this can cause massive slowdowns, so we need to ensure the data is complete before attempting to parse it.\n  function flushBuffer() {\n    if (!currentBuffer) {\n      return;\n    }\n\n    const data = currentBuffer;\n    // Reset buffer.\n    currentBuffer = '';\n    // Process data.\n    onFlush(data);\n  }\n\n  const data = await spawnXcodeBuild(args, options, {\n    onData(stringData) {\n      currentBuffer += stringData;\n      // Only flush the data if we have a full line.\n      if (currentBuffer.endsWith(os.EOL)) {\n        flushBuffer();\n      }\n    },\n  });\n\n  // Flush log data at the end just in case we missed something.\n  flushBuffer();\n  return data;\n}\n\nasync function spawnXcodeBuildWithFormat(\n  args: string[],\n  options: SpawnOptionsWithoutStdio,\n  { projectRoot, xcodeProject }: { projectRoot: string; xcodeProject: ProjectInfo }\n): Promise<{ code: number | null; results: string; error: string; formatter: ExpoRunFormatter }> {\n  Log.debug(`  xcodebuild ${args.join(' ')}`);\n\n  logPrettyItem(chalk.bold`Planning build`);\n\n  const formatter = ExpoRunFormatter.create(projectRoot, {\n    xcodeProject,\n    isDebug: env.EXPO_DEBUG,\n  });\n\n  const results = await spawnXcodeBuildWithFlush(args, options, {\n    onFlush(data) {\n      // Process data.\n      for (const line of formatter.pipe(data)) {\n        // Log parsed results.\n        Log.log(line);\n      }\n    },\n  });\n\n  Log.debug(`Exited with code: ${results.code}`);\n\n  if (\n    // User cancelled with ctrl-c\n    results.code === null ||\n    // Build interrupted\n    results.code === 75\n  ) {\n    throw new AbortCommandError();\n  }\n\n  Log.log(formatter.getBuildSummary());\n\n  return { ...results, formatter };\n}\n\nexport async function buildAsync(props: BuildProps): Promise<string> {\n  const args = await getXcodeBuildArgsAsync(props);\n\n  const { projectRoot, xcodeProject, shouldSkipInitialBundling, port } = props;\n\n  const { code, results, formatter, error } = await spawnXcodeBuildWithFormat(\n    args,\n    getProcessOptions({\n      packager: false,\n      terminal: getUserTerminal(),\n      shouldSkipInitialBundling,\n      port,\n    }),\n    {\n      projectRoot,\n      xcodeProject,\n    }\n  );\n\n  const logFilePath = writeBuildLogs(projectRoot, results, error);\n\n  if (code !== 0) {\n    // Determine if the logger found any errors;\n    const wasErrorPresented = !!formatter.errors.length;\n\n    if (wasErrorPresented) {\n      // This has a flaw, if the user is missing a file, and there is a script error, only the missing file error will be shown.\n      // They will only see the script error if they fix the missing file and rerun.\n      // The flaw can be fixed by catching script errors in the custom logger.\n      throw new CommandError(\n        `Failed to build iOS project. \"xcodebuild\" exited with error code ${code}.`\n      );\n    }\n\n    _assertXcodeBuildResults(code, results, error, xcodeProject, logFilePath);\n  }\n  return results;\n}\n\n// Exposed for testing.\nexport function _assertXcodeBuildResults(\n  code: number | null,\n  results: string,\n  error: string,\n  xcodeProject: { name: string },\n  logFilePath: string\n): void {\n  const errorTitle = `Failed to build iOS project. \"xcodebuild\" exited with error code ${code}.`;\n\n  const throwWithMessage = (message: string): never => {\n    throw new CommandError(\n      `${errorTitle}\\nTo view more error logs, try building the app with Xcode directly, by opening ${xcodeProject.name}.\\n\\n` +\n        message +\n        `Build logs written to ${chalk.underline(logFilePath)}`\n    );\n  };\n\n  const localizedError = error.match(/NSLocalizedFailure = \"(.*)\"/)?.[1];\n\n  if (localizedError) {\n    throwWithMessage(chalk.bold(localizedError) + '\\n\\n');\n  }\n  // Show all the log info because often times the error is coming from a shell script,\n  // that invoked a node script, that started metro, which threw an error.\n\n  throwWithMessage(results + '\\n\\n' + error);\n}\n\nfunction writeBuildLogs(projectRoot: string, buildOutput: string, errorOutput: string) {\n  const [logFilePath, errorFilePath] = getErrorLogFilePath(projectRoot);\n\n  fs.writeFileSync(logFilePath, buildOutput);\n  fs.writeFileSync(errorFilePath, errorOutput);\n  return logFilePath;\n}\n\nfunction getErrorLogFilePath(projectRoot: string): [string, string] {\n  const folder = path.join(projectRoot, '.expo');\n  ensureDirectory(folder);\n  return [path.join(folder, 'xcodebuild.log'), path.join(folder, 'xcodebuild-error.log')];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}