{"ast":null,"code":"'use strict';\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar LineCounter = _createClass(function LineCounter() {\n  var _this = this;\n  _classCallCheck(this, LineCounter);\n  this.lineStarts = [];\n  this.addNewLine = function (offset) {\n    return _this.lineStarts.push(offset);\n  };\n  this.linePos = function (offset) {\n    var low = 0;\n    var high = _this.lineStarts.length;\n    while (low < high) {\n      var mid = low + high >> 1;\n      if (_this.lineStarts[mid] < offset) low = mid + 1;else high = mid;\n    }\n    if (_this.lineStarts[low] === offset) return {\n      line: low + 1,\n      col: 1\n    };\n    if (low === 0) return {\n      line: 0,\n      col: offset\n    };\n    var start = _this.lineStarts[low - 1];\n    return {\n      line: low,\n      col: offset - start + 1\n    };\n  };\n});\nexports.LineCounter = LineCounter;","map":{"version":3,"names":["_createClass","require","_classCallCheck","LineCounter","_this","lineStarts","addNewLine","offset","push","linePos","low","high","length","mid","line","col","start","exports"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/dist/parse/line-counter.js"],"sourcesContent":["'use strict';\n\n/**\n * Tracks newlines during parsing in order to provide an efficient API for\n * determining the one-indexed `{ line, col }` position for any offset\n * within the input.\n */\nclass LineCounter {\n    constructor() {\n        this.lineStarts = [];\n        /**\n         * Should be called in ascending order. Otherwise, call\n         * `lineCounter.lineStarts.sort()` before calling `linePos()`.\n         */\n        this.addNewLine = (offset) => this.lineStarts.push(offset);\n        /**\n         * Performs a binary search and returns the 1-indexed { line, col }\n         * position of `offset`. If `line === 0`, `addNewLine` has never been\n         * called or `offset` is before the first known newline.\n         */\n        this.linePos = (offset) => {\n            let low = 0;\n            let high = this.lineStarts.length;\n            while (low < high) {\n                const mid = (low + high) >> 1; // Math.floor((low + high) / 2)\n                if (this.lineStarts[mid] < offset)\n                    low = mid + 1;\n                else\n                    high = mid;\n            }\n            if (this.lineStarts[low] === offset)\n                return { line: low + 1, col: 1 };\n            if (low === 0)\n                return { line: 0, col: offset };\n            const start = this.lineStarts[low - 1];\n            return { line: low, col: offset - start + 1 };\n        };\n    }\n}\n\nexports.LineCounter = LineCounter;\n"],"mappings":"AAAA,YAAY;AAAC,IAAAA,YAAA,GAAAC,OAAA;AAAA,IAAAC,eAAA,GAAAD,OAAA;AAAA,IAOPE,WAAW,GAAAH,YAAA,CACb,SAAAG,YAAA,EAAc;EAAA,IAAAC,KAAA;EAAAF,eAAA,OAAAC,WAAA;EACV,IAAI,CAACE,UAAU,GAAG,EAAE;EAKpB,IAAI,CAACC,UAAU,GAAG,UAACC,MAAM;IAAA,OAAKH,KAAI,CAACC,UAAU,CAACG,IAAI,CAACD,MAAM,CAAC;EAAA;EAM1D,IAAI,CAACE,OAAO,GAAG,UAACF,MAAM,EAAK;IACvB,IAAIG,GAAG,GAAG,CAAC;IACX,IAAIC,IAAI,GAAGP,KAAI,CAACC,UAAU,CAACO,MAAM;IACjC,OAAOF,GAAG,GAAGC,IAAI,EAAE;MACf,IAAME,GAAG,GAAIH,GAAG,GAAGC,IAAI,IAAK,CAAC;MAC7B,IAAIP,KAAI,CAACC,UAAU,CAACQ,GAAG,CAAC,GAAGN,MAAM,EAC7BG,GAAG,GAAGG,GAAG,GAAG,CAAC,CAAC,KAEdF,IAAI,GAAGE,GAAG;IAClB;IACA,IAAIT,KAAI,CAACC,UAAU,CAACK,GAAG,CAAC,KAAKH,MAAM,EAC/B,OAAO;MAAEO,IAAI,EAAEJ,GAAG,GAAG,CAAC;MAAEK,GAAG,EAAE;IAAE,CAAC;IACpC,IAAIL,GAAG,KAAK,CAAC,EACT,OAAO;MAAEI,IAAI,EAAE,CAAC;MAAEC,GAAG,EAAER;IAAO,CAAC;IACnC,IAAMS,KAAK,GAAGZ,KAAI,CAACC,UAAU,CAACK,GAAG,GAAG,CAAC,CAAC;IACtC,OAAO;MAAEI,IAAI,EAAEJ,GAAG;MAAEK,GAAG,EAAER,MAAM,GAAGS,KAAK,GAAG;IAAE,CAAC;EACjD,CAAC;AACL,CAAC;AAGLC,OAAO,CAACd,WAAW,GAAGA,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}