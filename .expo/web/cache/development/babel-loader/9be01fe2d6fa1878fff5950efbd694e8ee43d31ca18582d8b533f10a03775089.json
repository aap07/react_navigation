{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar fs_1 = require(\"fs\");\nvar debug_1 = tslib_1.__importDefault(require(\"debug\"));\nvar constants_1 = require(\"./constants\");\nvar platforms_1 = tslib_1.__importDefault(require(\"./platforms\"));\nvar utils_1 = require(\"./utils\");\nvar certificates_1 = require(\"./certificates\");\nvar debug = debug_1.default('devcert:certificate-authority');\nfunction installCertificateAuthority() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return tslib_1.__awaiter(this, void 0, void 0, function* () {\n    debug(`Uninstalling existing certificates, which will be void once any existing CA is gone`);\n    uninstall();\n    constants_1.ensureConfigDirs();\n    debug(`Making a temp working directory for files to copied in`);\n    var rootKeyPath = utils_1.mktmp();\n    debug(`Generating the OpenSSL configuration needed to setup the certificate authority`);\n    seedConfigFiles();\n    debug(`Generating a private key`);\n    certificates_1.generateKey(rootKeyPath);\n    debug(`Generating a CA certificate`);\n    utils_1.openssl(['req', '-new', '-x509', '-config', constants_1.caSelfSignConfig, '-key', rootKeyPath, '-out', constants_1.rootCACertPath, '-days', '825']);\n    debug('Saving certificate authority credentials');\n    yield saveCertificateAuthorityCredentials(rootKeyPath);\n    debug(`Adding the root certificate authority to trust stores`);\n    yield platforms_1.default.addToTrustStores(constants_1.rootCACertPath, options);\n  });\n}\nexports.default = installCertificateAuthority;\nfunction seedConfigFiles() {\n  fs_1.writeFileSync(constants_1.caVersionFile, '2');\n  fs_1.writeFileSync(constants_1.opensslDatabaseFilePath, '');\n  fs_1.writeFileSync(constants_1.opensslSerialFilePath, '01');\n}\nfunction withCertificateAuthorityCredentials(cb) {\n  return tslib_1.__awaiter(this, void 0, void 0, function* () {\n    debug(`Retrieving devcert's certificate authority credentials`);\n    var tmpCAKeyPath = utils_1.mktmp();\n    var caKey = yield platforms_1.default.readProtectedFile(constants_1.rootCAKeyPath);\n    fs_1.writeFileSync(tmpCAKeyPath, caKey);\n    yield cb({\n      caKeyPath: tmpCAKeyPath,\n      caCertPath: constants_1.rootCACertPath\n    });\n    fs_1.unlinkSync(tmpCAKeyPath);\n  });\n}\nexports.withCertificateAuthorityCredentials = withCertificateAuthorityCredentials;\nfunction saveCertificateAuthorityCredentials(keypath) {\n  return tslib_1.__awaiter(this, void 0, void 0, function* () {\n    debug(`Saving devcert's certificate authority credentials`);\n    var key = fs_1.readFileSync(keypath, 'utf-8');\n    yield platforms_1.default.writeProtectedFile(constants_1.rootCAKeyPath, key);\n  });\n}\nfunction certErrors() {\n  try {\n    utils_1.openssl(['x509', '-in', constants_1.rootCACertPath, '-noout']);\n    return '';\n  } catch (e) {\n    return e.toString();\n  }\n}\nfunction ensureCACertReadable() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return tslib_1.__awaiter(this, void 0, void 0, function* () {\n    if (!certErrors()) {\n      return;\n    }\n    try {\n      var caFileContents = yield platforms_1.default.readProtectedFile(constants_1.rootCACertPath);\n      platforms_1.default.deleteProtectedFiles(constants_1.rootCACertPath);\n      fs_1.writeFileSync(constants_1.rootCACertPath, caFileContents);\n    } catch (e) {\n      return installCertificateAuthority(options);\n    }\n    var remainingErrors = certErrors();\n    if (remainingErrors) {\n      return installCertificateAuthority(options);\n    }\n  });\n}\nexports.ensureCACertReadable = ensureCACertReadable;\nfunction uninstall() {\n  platforms_1.default.removeFromTrustStores(constants_1.rootCACertPath);\n  platforms_1.default.deleteProtectedFiles(constants_1.domainsDir);\n  platforms_1.default.deleteProtectedFiles(constants_1.rootCADir);\n  platforms_1.default.deleteProtectedFiles(constants_1.getLegacyConfigDir());\n}\nexports.uninstall = uninstall;","map":{"version":3,"names":["fs_1","require","debug_1","tslib_1","__importDefault","constants_1","platforms_1","utils_1","certificates_1","debug","default","installCertificateAuthority","options","arguments","length","undefined","uninstall","ensureConfigDirs","rootKeyPath","mktmp","seedConfigFiles","generateKey","openssl","caSelfSignConfig","rootCACertPath","saveCertificateAuthorityCredentials","addToTrustStores","exports","writeFileSync","caVersionFile","opensslDatabaseFilePath","opensslSerialFilePath","withCertificateAuthorityCredentials","cb","tmpCAKeyPath","caKey","readProtectedFile","rootCAKeyPath","caKeyPath","caCertPath","unlinkSync","keypath","key","readFileSync","writeProtectedFile","certErrors","e","toString","ensureCACertReadable","caFileContents","deleteProtectedFiles","remainingErrors","removeFromTrustStores","domainsDir","rootCADir","getLegacyConfigDir"],"sources":["\\Users\\evanbacon\\Documents\\GitHub\\devcert\\certificate-authority.ts"],"sourcesContent":["import {\n  unlinkSync as rm,\n  readFileSync as readFile,\n  writeFileSync as writeFile\n} from 'fs';\nimport createDebug from 'debug';\n\nimport {\n  domainsDir,\n  rootCADir,\n  ensureConfigDirs,\n  getLegacyConfigDir,\n  rootCAKeyPath,\n  rootCACertPath,\n  caSelfSignConfig,\n  opensslSerialFilePath,\n  opensslDatabaseFilePath,\n  caVersionFile\n} from './constants';\nimport currentPlatform from './platforms';\nimport { openssl, mktmp } from './utils';\nimport { generateKey } from './certificates';\nimport { Options } from './index';\n\nconst debug = createDebug('devcert:certificate-authority');\n\n/**\n * Install the once-per-machine trusted root CA. We'll use this CA to sign\n * per-app certs.\n */\nexport default async function installCertificateAuthority(options: Options = {}): Promise<void> {\n  debug(`Uninstalling existing certificates, which will be void once any existing CA is gone`);\n  uninstall();\n  ensureConfigDirs();\n\n  debug(`Making a temp working directory for files to copied in`);\n  let rootKeyPath = mktmp();\n\n  debug(`Generating the OpenSSL configuration needed to setup the certificate authority`);\n  seedConfigFiles();\n\n  debug(`Generating a private key`);\n  generateKey(rootKeyPath);\n\n  debug(`Generating a CA certificate`);\n  openssl(['req', '-new', '-x509', '-config', caSelfSignConfig, '-key', rootKeyPath, '-out', rootCACertPath, '-days', '825']);\n\n  debug('Saving certificate authority credentials');\n  await saveCertificateAuthorityCredentials(rootKeyPath);\n\n  debug(`Adding the root certificate authority to trust stores`);\n  await currentPlatform.addToTrustStores(rootCACertPath, options);\n}\n\n/**\n * Initializes the files OpenSSL needs to sign certificates as a certificate\n * authority, as well as our CA setup version\n */\nfunction seedConfigFiles() {\n  // This is v2 of the devcert certificate authority setup\n  writeFile(caVersionFile, '2');\n  // OpenSSL CA files\n  writeFile(opensslDatabaseFilePath, '');\n  writeFile(opensslSerialFilePath, '01');\n}\n\nexport async function withCertificateAuthorityCredentials(cb: ({ caKeyPath, caCertPath }: { caKeyPath: string, caCertPath: string }) => Promise<void> | void) {\n  debug(`Retrieving devcert's certificate authority credentials`);\n  let tmpCAKeyPath = mktmp();\n  let caKey = await currentPlatform.readProtectedFile(rootCAKeyPath);\n  writeFile(tmpCAKeyPath, caKey);\n  await cb({ caKeyPath: tmpCAKeyPath, caCertPath: rootCACertPath });\n  rm(tmpCAKeyPath);\n}\n\nasync function saveCertificateAuthorityCredentials(keypath: string) {\n  debug(`Saving devcert's certificate authority credentials`);\n  let key = readFile(keypath, 'utf-8');\n  await currentPlatform.writeProtectedFile(rootCAKeyPath, key);\n}\n\n\nfunction certErrors(): string {\n  try {\n    openssl(['x509', '-in', rootCACertPath, '-noout']);\n    return '';\n  } catch (e) {\n    return e.toString();\n  }\n}\n\n// This function helps to migrate from v1.0.x to >= v1.1.0.\n/**\n * Smoothly migrate the certificate storage from v1.0.x to >= v1.1.0.\n * In v1.1.0 there are new options for retrieving the CA cert directly,\n * to help third-party Node apps trust the root CA.\n * \n * If a v1.0.x cert already exists, then devcert has written it with\n * platform.writeProtectedFile(), so an unprivileged readFile cannot access it.\n * Pre-detect and remedy this; it should only happen once per installation.\n */\nexport async function ensureCACertReadable(options: Options = {}): Promise<void> {\n  if (!certErrors()) {\n    return;\n  }\n  /**\n   * on windows, writeProtectedFile left the cert encrypted on *nix, the cert\n   * has no read permissions either way, openssl will fail and that means we\n   * have to fix it\n   */\n  try {\n    const caFileContents = await currentPlatform.readProtectedFile(rootCACertPath);\n    currentPlatform.deleteProtectedFiles(rootCACertPath);\n    writeFile(rootCACertPath, caFileContents);\n  } catch (e) {\n    return installCertificateAuthority(options);\n  }\n  \n  // double check that we have a live one\n  const remainingErrors = certErrors();\n  if (remainingErrors) {\n    return installCertificateAuthority(options);\n  }\n}\n\n/**\n * Remove as much of the devcert files and state as we can. This is necessary\n * when generating a new root certificate, and should be available to API\n * consumers as well.\n * \n * Not all of it will be removable. If certutil is not installed, we'll leave\n * Firefox alone. We try to remove files with maximum permissions, and if that\n * fails, we'll silently fail.\n * \n * It's also possible that the command to untrust will not work, and we'll\n * silently fail that as well; with no existing certificates anymore, the\n * security exposure there is minimal.\n */\nexport function uninstall(): void {\n  currentPlatform.removeFromTrustStores(rootCACertPath);\n  currentPlatform.deleteProtectedFiles(domainsDir);\n  currentPlatform.deleteProtectedFiles(rootCADir);\n  currentPlatform.deleteProtectedFiles(getLegacyConfigDir());\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}