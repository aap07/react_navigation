{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createControlledEnvironment = createControlledEnvironment;\nexports.getFiles = getFiles;\nexports.isEnabled = isEnabled;\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function _chalk() {\n    return data;\n  };\n  return data;\n}\nfunction dotenv() {\n  var data = _interopRequireWildcard(require(\"dotenv\"));\n  dotenv = function dotenv() {\n    return data;\n  };\n  return data;\n}\nfunction _dotenvExpand() {\n  var data = require(\"dotenv-expand\");\n  _dotenvExpand = function _dotenvExpand() {\n    return data;\n  };\n  return data;\n}\nfunction fs() {\n  var data = _interopRequireWildcard(require(\"fs\"));\n  fs = function fs() {\n    return data;\n  };\n  return data;\n}\nfunction _getenv() {\n  var data = require(\"getenv\");\n  _getenv = function _getenv() {\n    return data;\n  };\n  return data;\n}\nfunction path() {\n  var data = _interopRequireWildcard(require(\"path\"));\n  path = function path() {\n    return data;\n  };\n  return data;\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = require('debug')('expo:env');\nfunction isEnabled() {\n  return !(0, _getenv().boolish)('EXPO_NO_DOTENV', false);\n}\nfunction createControlledEnvironment() {\n  var IS_DEBUG = require('debug').enabled('expo:env');\n  var userDefinedEnvironment = undefined;\n  var memo = undefined;\n  function _getForce(projectRoot) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!isEnabled()) {\n      debug(`Skipping .env files because EXPO_NO_DOTENV is defined`);\n      return {\n        env: {},\n        files: []\n      };\n    }\n    if (!userDefinedEnvironment) {\n      userDefinedEnvironment = _objectSpread({}, process.env);\n    }\n    var dotenvFiles = getFiles(process.env.NODE_ENV, options);\n    var loadedEnvFiles = [];\n    var parsed = {};\n    dotenvFiles.forEach(function (dotenvFile) {\n      var absoluteDotenvFile = path().resolve(projectRoot, dotenvFile);\n      if (!fs().existsSync(absoluteDotenvFile)) {\n        return;\n      }\n      try {\n        var results = (0, _dotenvExpand().expand)(dotenv().config({\n          debug: IS_DEBUG,\n          path: absoluteDotenvFile,\n          override: true\n        }));\n        if (results.parsed) {\n          loadedEnvFiles.push(absoluteDotenvFile);\n          debug(`Loaded environment variables from: ${absoluteDotenvFile}`);\n          for (var key of Object.keys(results.parsed || {})) {\n            var _userDefinedEnvironme;\n            if (typeof parsed[key] === 'undefined' && typeof ((_userDefinedEnvironme = userDefinedEnvironment) === null || _userDefinedEnvironme === void 0 ? void 0 : _userDefinedEnvironme[key]) === 'undefined') {\n              parsed[key] = results.parsed[key];\n            }\n          }\n        } else {\n          debug(`Failed to load environment variables from: ${absoluteDotenvFile}`);\n        }\n      } catch (error) {\n        if (error instanceof Error) {\n          console.error(`Failed to load environment variables from ${absoluteDotenvFile}: ${error.message}`);\n        } else {\n          throw error;\n        }\n      }\n    });\n    if (!loadedEnvFiles.length) {\n      debug(`No environment variables loaded from .env files.`);\n    }\n    return {\n      env: parsed,\n      files: loadedEnvFiles\n    };\n  }\n  function get(projectRoot) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!isEnabled()) {\n      debug(`Skipping .env files because EXPO_NO_DOTENV is defined`);\n      return {\n        env: {},\n        files: []\n      };\n    }\n    if (!options.force && memo) {\n      return memo;\n    }\n    memo = _getForce(projectRoot, options);\n    return memo;\n  }\n  function load(projectRoot) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!isEnabled()) {\n      debug(`Skipping .env files because EXPO_NO_DOTENV is defined`);\n      return process.env;\n    }\n    var envInfo = get(projectRoot, options);\n    if (!options.force) {\n      var keys = Object.keys(envInfo.env);\n      if (keys.length) {\n        console.log(_chalk().default.gray('env: load', envInfo.files.map(function (file) {\n          return path().basename(file);\n        }).join(' ')));\n        console.log(_chalk().default.gray('env: export', keys.join(' ')));\n      }\n    }\n    process.env = _objectSpread(_objectSpread({}, process.env), envInfo.env);\n    return process.env;\n  }\n  return {\n    load: load,\n    get: get,\n    _getForce: _getForce\n  };\n}\nfunction getFiles(mode) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref$silent = _ref.silent,\n    silent = _ref$silent === void 0 ? false : _ref$silent;\n  if (!isEnabled()) {\n    debug(`Skipping .env files because EXPO_NO_DOTENV is defined`);\n    return [];\n  }\n  if (!mode) {\n    if (silent) {\n      debug('NODE_ENV is not defined, proceeding without mode-specific .env');\n    } else {\n      console.error(_chalk().default.red('The NODE_ENV environment variable is required but was not specified. Ensure the project is bundled with Expo CLI or NODE_ENV is set.'));\n      console.error(_chalk().default.red('Proceeding without mode-specific .env'));\n    }\n  }\n  if (mode && !['development', 'test', 'production'].includes(mode)) {\n    throw new Error(`Environment variable \"NODE_ENV=${mode}\" is invalid. Valid values are \"development\", \"test\", and \"production`);\n  }\n  if (!mode) {\n    return [`.env.local`, '.env'];\n  }\n  var dotenvFiles = [`.env.${mode}.local`, mode !== 'test' && `.env.local`, `.env.${mode}`, '.env'].filter(Boolean);\n  return dotenvFiles;\n}","map":{"version":3,"names":["_chalk","data","_interopRequireDefault","require","dotenv","_interopRequireWildcard","_dotenvExpand","fs","_getenv","path","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","debug","isEnabled","boolish","createControlledEnvironment","IS_DEBUG","enabled","userDefinedEnvironment","undefined","memo","_getForce","projectRoot","options","arguments","length","env","files","_objectSpread","process","dotenvFiles","getFiles","NODE_ENV","loadedEnvFiles","parsed","forEach","dotenvFile","absoluteDotenvFile","resolve","existsSync","results","expand","config","override","push","keys","_userDefinedEnvironme","error","Error","console","message","force","load","envInfo","log","gray","map","file","basename","join","mode","_ref","_ref$silent","silent","red","includes","filter","Boolean"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\env\\src\\env.ts"],"sourcesContent":["/**\n * Copyright Â© 2023 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport chalk from 'chalk';\nimport * as dotenv from 'dotenv';\nimport { expand } from 'dotenv-expand';\nimport * as fs from 'fs';\nimport { boolish } from 'getenv';\nimport * as path from 'path';\n\ntype LoadOptions = {\n  silent?: boolean;\n  force?: boolean;\n};\n\nconst debug = require('debug')('expo:env') as typeof console.log;\n\nexport function isEnabled(): boolean {\n  return !boolish('EXPO_NO_DOTENV', false);\n}\n\nexport function createControlledEnvironment() {\n  const IS_DEBUG = require('debug').enabled('expo:env');\n\n  let userDefinedEnvironment: NodeJS.ProcessEnv | undefined = undefined;\n  let memo: { env: NodeJS.ProcessEnv; files: string[] } | undefined = undefined;\n\n  function _getForce(\n    projectRoot: string,\n    options: LoadOptions = {}\n  ): { env: Record<string, string | undefined>; files: string[] } {\n    if (!isEnabled()) {\n      debug(`Skipping .env files because EXPO_NO_DOTENV is defined`);\n      return { env: {}, files: [] };\n    }\n\n    if (!userDefinedEnvironment) {\n      userDefinedEnvironment = { ...process.env };\n    }\n\n    // https://github.com/bkeepers/dotenv#what-other-env-files-can-i-use\n    const dotenvFiles = getFiles(process.env.NODE_ENV, options);\n\n    const loadedEnvFiles: string[] = [];\n    const parsed: dotenv.DotenvParseOutput = {};\n\n    // Load environment variables from .env* files. Suppress warnings using silent\n    // if this file is missing. dotenv will never modify any environment variables\n    // that have already been set. Variable expansion is supported in .env files.\n    // https://github.com/motdotla/dotenv\n    // https://github.com/motdotla/dotenv-expand\n    dotenvFiles.forEach((dotenvFile) => {\n      const absoluteDotenvFile = path.resolve(projectRoot, dotenvFile);\n      if (!fs.existsSync(absoluteDotenvFile)) {\n        return;\n      }\n      try {\n        const results = expand(\n          dotenv.config({\n            debug: IS_DEBUG,\n            path: absoluteDotenvFile,\n            // We will handle overriding ourselves to allow for HMR.\n            override: true,\n          })\n        );\n        if (results.parsed) {\n          loadedEnvFiles.push(absoluteDotenvFile);\n          debug(`Loaded environment variables from: ${absoluteDotenvFile}`);\n\n          for (const key of Object.keys(results.parsed || {})) {\n            if (\n              typeof parsed[key] === 'undefined' &&\n              // Custom override logic to prevent overriding variables that\n              // were set before the CLI process began.\n              typeof userDefinedEnvironment?.[key] === 'undefined'\n            ) {\n              parsed[key] = results.parsed[key];\n            }\n          }\n        } else {\n          debug(`Failed to load environment variables from: ${absoluteDotenvFile}`);\n        }\n      } catch (error: unknown) {\n        if (error instanceof Error) {\n          console.error(\n            `Failed to load environment variables from ${absoluteDotenvFile}: ${error.message}`\n          );\n        } else {\n          throw error;\n        }\n      }\n    });\n\n    if (!loadedEnvFiles.length) {\n      debug(`No environment variables loaded from .env files.`);\n    }\n\n    return { env: parsed, files: loadedEnvFiles };\n  }\n\n  /** Get the environment variables without mutating the environment. This returns memoized values unless the `force` property is provided. */\n  function get(\n    projectRoot: string,\n    options: LoadOptions = {}\n  ): { env: Record<string, string | undefined>; files: string[] } {\n    if (!isEnabled()) {\n      debug(`Skipping .env files because EXPO_NO_DOTENV is defined`);\n      return { env: {}, files: [] };\n    }\n    if (!options.force && memo) {\n      return memo;\n    }\n    memo = _getForce(projectRoot, options);\n    return memo;\n  }\n\n  /** Load environment variables from .env files and mutate the current `process.env` with the results. */\n  function load(projectRoot: string, options: LoadOptions = {}) {\n    if (!isEnabled()) {\n      debug(`Skipping .env files because EXPO_NO_DOTENV is defined`);\n      return process.env;\n    }\n\n    const envInfo = get(projectRoot, options);\n\n    if (!options.force) {\n      const keys = Object.keys(envInfo.env);\n      if (keys.length) {\n        console.log(\n          chalk.gray('env: load', envInfo.files.map((file) => path.basename(file)).join(' '))\n        );\n        console.log(chalk.gray('env: export', keys.join(' ')));\n      }\n    }\n\n    process.env = { ...process.env, ...envInfo.env };\n    return process.env;\n  }\n\n  return {\n    load,\n    get,\n    _getForce,\n  };\n}\n\nexport function getFiles(\n  mode: string | undefined,\n  { silent = false }: Pick<LoadOptions, 'silent'> = {}\n): string[] {\n  if (!isEnabled()) {\n    debug(`Skipping .env files because EXPO_NO_DOTENV is defined`);\n    return [];\n  }\n\n  if (!mode) {\n    if (silent) {\n      debug('NODE_ENV is not defined, proceeding without mode-specific .env');\n    } else {\n      console.error(\n        chalk.red(\n          'The NODE_ENV environment variable is required but was not specified. Ensure the project is bundled with Expo CLI or NODE_ENV is set.'\n        )\n      );\n      console.error(chalk.red('Proceeding without mode-specific .env'));\n    }\n  }\n\n  if (mode && !['development', 'test', 'production'].includes(mode)) {\n    throw new Error(\n      `Environment variable \"NODE_ENV=${mode}\" is invalid. Valid values are \"development\", \"test\", and \"production`\n    );\n  }\n\n  if (!mode) {\n    // Support environments that don't respect NODE_ENV\n    return [`.env.local`, '.env'];\n  }\n  // https://github.com/bkeepers/dotenv#what-other-env-files-can-i-use\n  const dotenvFiles = [\n    `.env.${mode}.local`,\n    // Don't include `.env.local` for `test` environment\n    // since normally you expect tests to produce the same\n    // results for everyone\n    mode !== 'test' && `.env.local`,\n    `.env.${mode}`,\n    '.env',\n  ].filter(Boolean) as string[];\n\n  return dotenvFiles;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}