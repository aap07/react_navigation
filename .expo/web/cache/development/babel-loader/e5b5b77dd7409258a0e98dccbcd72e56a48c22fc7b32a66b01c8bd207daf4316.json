{"ast":null,"code":"#!/usr/bin/env node\n\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.expoRunAndroid = void 0;\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar Log = _interopRequireWildcard(require(\"../../log\"));\nvar _args = require(\"../../utils/args\");\nvar _errors = require(\"../../utils/errors\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar expoRunAndroid = function () {\n  var _ref = _asyncToGenerator(function* (argv) {\n    var rawArgsMap = {\n      \"--help\": Boolean,\n      \"--no-build-cache\": Boolean,\n      \"--no-install\": Boolean,\n      \"--no-bundler\": Boolean,\n      \"--variant\": String,\n      \"--port\": Number,\n      \"-p\": \"--port\",\n      \"-h\": \"--help\"\n    };\n    var args = (0, _args).assertWithOptionsArgs(rawArgsMap, {\n      argv: argv,\n      permissive: true\n    });\n    if (args[\"--help\"]) {\n      Log.exit(_chalk.default`\n  {bold Description}\n    Run the native Android app locally\n\n  {bold Usage}\n    $ npx expo run:android <dir>\n\n  {bold Options} \n    --no-build-cache       Clear the native build cache\n    --no-install           Skip installing dependencies\n    --no-bundler           Skip starting the bundler\n    --variant <name>       Build variant. {dim Default: debug}\n    -d, --device [device]  Device name to run the app on\n    -p, --port <port>      Port to start the dev server on. {dim Default: 8081}\n    -h, --help             Output usage information\n`, 0);\n    }\n    var _yield$Promise$resolv = yield Promise.resolve().then(function () {\n        return _interopRequireWildcard(require(\"../../utils/resolveArgs\"));\n      }),\n      resolveStringOrBooleanArgsAsync = _yield$Promise$resolv.resolveStringOrBooleanArgsAsync;\n    var parsed = yield resolveStringOrBooleanArgsAsync(argv != null ? argv : [], rawArgsMap, {\n      \"--device\": Boolean,\n      \"-d\": \"--device\"\n    }).catch(_errors.logCmdError);\n    var _yield$Promise$resolv2 = yield Promise.resolve().then(function () {\n        return _interopRequireWildcard(require(\"./runAndroidAsync\"));\n      }),\n      runAndroidAsync = _yield$Promise$resolv2.runAndroidAsync;\n    return runAndroidAsync(_path.default.resolve(parsed.projectRoot), {\n      buildCache: !args[\"--no-build-cache\"],\n      install: !args[\"--no-install\"],\n      bundler: !args[\"--no-bundler\"],\n      port: args[\"--port\"],\n      variant: args[\"--variant\"],\n      device: parsed.args[\"--device\"]\n    }).catch(_errors.logCmdError);\n  });\n  return function expoRunAndroid(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexports.expoRunAndroid = expoRunAndroid;","map":{"version":3,"names":["_chalk","_interopRequireDefault","require","_path","Log","_interopRequireWildcard","_args","_errors","expoRunAndroid","_ref","_asyncToGenerator","argv","rawArgsMap","Boolean","String","Number","args","assertWithOptionsArgs","permissive","exit","default","_yield$Promise$resolv","Promise","resolve","then","resolveStringOrBooleanArgsAsync","parsed","catch","logCmdError","_yield$Promise$resolv2","runAndroidAsync","projectRoot","buildCache","install","bundler","port","variant","device","_x","apply","arguments"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\run\\android\\index.ts"],"sourcesContent":["#!/usr/bin/env node\nimport arg from 'arg';\nimport chalk from 'chalk';\nimport path from 'path';\n\nimport { Command } from '../../../bin/cli';\nimport * as Log from '../../log';\nimport { assertWithOptionsArgs } from '../../utils/args';\nimport { logCmdError } from '../../utils/errors';\n\nexport const expoRunAndroid: Command = async (argv) => {\n  const rawArgsMap: arg.Spec = {\n    // Types\n    '--help': Boolean,\n    '--no-build-cache': Boolean,\n    '--no-install': Boolean,\n    '--no-bundler': Boolean,\n    '--variant': String,\n\n    '--port': Number,\n    // Aliases\n    '-p': '--port',\n\n    '-h': '--help',\n  };\n  const args = assertWithOptionsArgs(rawArgsMap, {\n    argv,\n\n    permissive: true,\n  });\n\n  // '-d' -> '--device': Boolean,\n\n  if (args['--help']) {\n    Log.exit(\n      chalk`\n  {bold Description}\n    Run the native Android app locally\n\n  {bold Usage}\n    $ npx expo run:android <dir>\n\n  {bold Options} \n    --no-build-cache       Clear the native build cache\n    --no-install           Skip installing dependencies\n    --no-bundler           Skip starting the bundler\n    --variant <name>       Build variant. {dim Default: debug}\n    -d, --device [device]  Device name to run the app on\n    -p, --port <port>      Port to start the dev server on. {dim Default: 8081}\n    -h, --help             Output usage information\n`,\n      0\n    );\n  }\n\n  const { resolveStringOrBooleanArgsAsync } = await import('../../utils/resolveArgs');\n  const parsed = await resolveStringOrBooleanArgsAsync(argv ?? [], rawArgsMap, {\n    '--device': Boolean,\n    '-d': '--device',\n  }).catch(logCmdError);\n\n  const { runAndroidAsync } = await import('./runAndroidAsync');\n\n  return runAndroidAsync(path.resolve(parsed.projectRoot), {\n    // Parsed options\n    buildCache: !args['--no-build-cache'],\n    install: !args['--no-install'],\n    bundler: !args['--no-bundler'],\n    port: args['--port'],\n    variant: args['--variant'],\n\n    // Custom parsed args\n    device: parsed.args['--device'],\n  }).catch(logCmdError);\n};\n"],"mappings":"AAAA;;;;;;;;AAEkB,IAAAA,MAAO,GAAAC,sBAAA,CAAAC,OAAA,CAAP,OAAO;AACR,IAAAC,KAAM,GAAAF,sBAAA,CAAAC,OAAA,CAAN,MAAM;AAGX,IAAAE,GAAG,GAAAC,uBAAA,CAAAH,OAAA,YAAiB,EAAjB;AACuB,IAAAI,KAAkB,GAAAJ,OAAA;AAC5B,IAAAK,OAAoB,GAAAL,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEzC,IAAMM,cAAc;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAY,WAAOC,IAAI,EAAK;IACrD,IAAMC,UAAU,GAAa;MAE3B,QAAQ,EAAEC,OAAO;MACjB,kBAAkB,EAAEA,OAAO;MAC3B,cAAc,EAAEA,OAAO;MACvB,cAAc,EAAEA,OAAO;MACvB,WAAW,EAAEC,MAAM;MAEnB,QAAQ,EAAEC,MAAM;MAEhB,IAAI,EAAE,QAAQ;MAEd,IAAI,EAAE;KACP;IACD,IAAMC,IAAI,GAAG,IAAAV,KAAqB,EAIhCW,qBAJgC,CAACL,UAAU,EAAE;MAC7CD,IAAI,EAAJA,IAAI;MAEJO,UAAU,EAAE;KACb,CAAC;IAIF,IAAIF,IAAI,CAAC,QAAQ,CAAC,EAAE;MAClBZ,GAAG,CAACe,IAAI,CACNnB,MAAK,CAAAoB,OAAC;;;;;;;;;;;;;;;AAeZ,CAAC,EACK,CAAC,CACF;;IAGH,IAAAC,qBAAA,SAAkDC,OAAA,CAAAC,OAAA,GAAAC,IAAA;wEAAgC;QAAC;MAA3EC,+BAA+B,GAAAJ,qBAAA,CAA/BI,+BAA+B;IACvC,IAAMC,MAAM,SAASD,+BAA+B,CAACd,IAAI,WAAJA,IAAI,GAAI,EAAE,EAAEC,UAAU,EAAE;MAC3E,UAAU,EAAEC,OAAO;MACnB,IAAI,EAAE;KACP,CAAC,CAACc,KAAK,CAACpB,OAAW,CAAAqB,WAAA,CAAC;IAErB,IAAAC,sBAAA,SAAkCP,OAAA,CAAAC,OAAA,GAAAC,IAAA;kEAA0B;QAAC;MAArDM,eAAe,GAAAD,sBAAA,CAAfC,eAAe;IAEvB,OAAOA,eAAe,CAAC3B,KAAI,CAAAiB,OAAA,CAACG,OAAO,CAACG,MAAM,CAACK,WAAW,CAAC,EAAE;MAEvDC,UAAU,EAAE,CAAChB,IAAI,CAAC,kBAAkB,CAAC;MACrCiB,OAAO,EAAE,CAACjB,IAAI,CAAC,cAAc,CAAC;MAC9BkB,OAAO,EAAE,CAAClB,IAAI,CAAC,cAAc,CAAC;MAC9BmB,IAAI,EAAEnB,IAAI,CAAC,QAAQ,CAAC;MACpBoB,OAAO,EAAEpB,IAAI,CAAC,WAAW,CAAC;MAG1BqB,MAAM,EAAEX,MAAM,CAACV,IAAI,CAAC,UAAU;KAC/B,CAAC,CAACW,KAAK,CAACpB,OAAW,CAAAqB,WAAA,CAAC;GACtB;EAAA,gBAhEYpB,cAAcA,CAAA8B,EAAA;IAAA,OAAA7B,IAAA,CAAA8B,KAAA,OAAAC,SAAA;EAAA;AAAA,GAgE1B;QAhEYhC,cAAc,GAAdA,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}