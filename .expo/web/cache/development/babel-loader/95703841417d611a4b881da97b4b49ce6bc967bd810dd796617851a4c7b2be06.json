{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTaskNames = getTaskNames;\nvar _toPascalCase = require(\"./toPascalCase\");\nvar _listAndroidTasks = require(\"./listAndroidTasks\");\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function _cliTools() {\n    return data;\n  };\n  return data;\n}\nfunction getTaskNames(appName) {\n  var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'debug';\n  var tasks = arguments.length > 2 ? arguments[2] : undefined;\n  var taskPrefix = arguments.length > 3 ? arguments[3] : undefined;\n  var sourceDir = arguments.length > 4 ? arguments[4] : undefined;\n  var appTasks = tasks && tasks.length ? tasks : [taskPrefix + (0, _toPascalCase.toPascalCase)(mode)];\n  if (!(tasks === null || tasks === void 0 ? void 0 : tasks.length) && taskPrefix === 'install') {\n    var actionableInstallTasks = (0, _listAndroidTasks.getGradleTasks)('install', sourceDir);\n    if (!actionableInstallTasks.find(function (t) {\n      return t.task.includes(appTasks[0]);\n    })) {\n      var installTasksForMode = actionableInstallTasks.filter(function (t) {\n        return t.task.toLowerCase().includes(mode);\n      });\n      if (!installTasksForMode.length) {\n        throw new (_cliTools().CLIError)(`Couldn't find \"${appTasks.map(function (taskName) {\n          return taskName.replace(taskPrefix, '');\n        }).join(', ')}\" build variant. Available variants are: ${actionableInstallTasks.map(function (t) {\n          return `\"${t.task.replace(taskPrefix, '')}\"`;\n        }).join(', ')}.`);\n      }\n      _cliTools().logger.warn(`Found multiple tasks for \"install\" command: ${installTasksForMode.map(function (t) {\n        return t.task;\n      }).join(', ')}.\\nSelecting first available: ${installTasksForMode[0].task}.`);\n      appTasks = [installTasksForMode[0].task];\n    }\n  }\n  return appName ? appTasks.map(function (command) {\n    return `${appName}:${command}`;\n  }) : appTasks;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","getTaskNames","_toPascalCase","require","_listAndroidTasks","_cliTools","data","appName","mode","arguments","length","undefined","tasks","taskPrefix","sourceDir","appTasks","toPascalCase","actionableInstallTasks","getGradleTasks","find","t","task","includes","installTasksForMode","filter","toLowerCase","CLIError","map","taskName","replace","join","logger","warn","command"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/getTaskNames.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTaskNames = getTaskNames;\nvar _toPascalCase = require(\"./toPascalCase\");\nvar _listAndroidTasks = require(\"./listAndroidTasks\");\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function () {\n    return data;\n  };\n  return data;\n}\nfunction getTaskNames(appName, mode = 'debug', tasks, taskPrefix, sourceDir) {\n  let appTasks = tasks && tasks.length ? tasks : [taskPrefix + (0, _toPascalCase.toPascalCase)(mode)];\n\n  // Check against build flavors for \"install\" task (\"assemble\" don't care about it so much and will build all)\n  if (!(tasks === null || tasks === void 0 ? void 0 : tasks.length) && taskPrefix === 'install') {\n    const actionableInstallTasks = (0, _listAndroidTasks.getGradleTasks)('install', sourceDir);\n    if (!actionableInstallTasks.find(t => t.task.includes(appTasks[0]))) {\n      const installTasksForMode = actionableInstallTasks.filter(t => t.task.toLowerCase().includes(mode));\n      if (!installTasksForMode.length) {\n        throw new (_cliTools().CLIError)(`Couldn't find \"${appTasks.map(taskName => taskName.replace(taskPrefix, '')).join(', ')}\" build variant. Available variants are: ${actionableInstallTasks.map(t => `\"${t.task.replace(taskPrefix, '')}\"`).join(', ')}.`);\n      }\n      _cliTools().logger.warn(`Found multiple tasks for \"install\" command: ${installTasksForMode.map(t => t.task).join(', ')}.\\nSelecting first available: ${installTasksForMode[0].task}.`);\n      appTasks = [installTasksForMode[0].task];\n    }\n  }\n  return appName ? appTasks.map(command => `${appName}:${command}`) : appTasks;\n}\n\n//# sourceMappingURL=getTaskNames.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}