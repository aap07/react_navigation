{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAccountUsername = getAccountUsername;\nfunction _getUserState() {\n  var data = require(\"./getUserState\");\n  _getUserState = function _getUserState() {\n    return data;\n  };\n  return data;\n}\nvar ANONYMOUS_USERNAME = 'anonymous';\nfunction getAccountUsername() {\n  var manifest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _getUserState$read$au;\n  var username = manifest.owner || process.env.EXPO_CLI_USERNAME || process.env.EAS_BUILD_USERNAME;\n  if (username) {\n    return username;\n  }\n  return ((_getUserState$read$au = (0, _getUserState().getUserState)().read().auth) === null || _getUserState$read$au === void 0 ? void 0 : _getUserState$read$au.username) || ANONYMOUS_USERNAME;\n}","map":{"version":3,"names":["_getUserState","data","require","ANONYMOUS_USERNAME","getAccountUsername","manifest","arguments","length","undefined","_getUserState$read$au","username","owner","process","env","EXPO_CLI_USERNAME","EAS_BUILD_USERNAME","getUserState","read","auth"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config\\src\\getAccountUsername.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { getUserState } from './getUserState';\n\nconst ANONYMOUS_USERNAME = 'anonymous';\n\n/**\n * Get the owner of the project from the manifest if specified, falling back to a bunch of different things\n * which may or may not be the owner of the project.\n *\n * @deprecated This may not actually be the owner of the project. Prefer to fetch the project owner using\n * the EAS project ID, falling back to the `owner` field.\n */\nexport function getAccountUsername(manifest: Pick<ExpoConfig, 'owner'> = {}): string {\n  // TODO: Must match what's generated in Expo Go.\n  const username =\n    manifest.owner || process.env.EXPO_CLI_USERNAME || process.env.EAS_BUILD_USERNAME;\n  if (username) {\n    return username;\n  }\n  // Statically get the username from the global user state.\n  return getUserState().read().auth?.username || ANONYMOUS_USERNAME;\n}\n"],"mappings":";;;;;;AAEA,SAAAA,cAAA;EAAA,IAAAC,IAAA,GAAAC,OAAA;EAAAF,aAAA,YAAAA,cAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAEA,IAAME,kBAAkB,GAAG,WAAW;AAS/B,SAASC,kBAAkBA,CAAA,EAAmD;EAAA,IAAlDC,QAAmC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAAU,IAAAG,qBAAA;EAEnF,IAAMC,QAAQ,GACZL,QAAQ,CAACM,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAIF,OAAO,CAACC,GAAG,CAACE,kBAAkB;EACnF,IAAIL,QAAQ,EAAE;IACZ,OAAOA,QAAQ;EACjB;EAEA,OAAO,EAAAD,qBAAA,OAAAT,aAAA,GAAAgB,YAAY,GAAE,CAACC,IAAI,EAAE,CAACC,IAAI,cAAAT,qBAAA,uBAA1BA,qBAAA,CAA4BC,QAAQ,KAAIP,kBAAkB;AACnE"},"metadata":{},"sourceType":"script","externalDependencies":[]}