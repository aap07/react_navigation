{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Config = void 0;\nexports.ensureBundleReactNativePhaseContainsConfigurationScript = ensureBundleReactNativePhaseContainsConfigurationScript;\nexports.getBundleReactNativePhase = getBundleReactNativePhase;\nexports.isPlistConfigurationSet = isPlistConfigurationSet;\nexports.isPlistConfigurationSynced = isPlistConfigurationSynced;\nexports.isPlistVersionConfigurationSynced = isPlistVersionConfigurationSynced;\nexports.isShellScriptBuildPhaseConfigured = isShellScriptBuildPhaseConfigured;\nexports.setUpdatesConfig = setUpdatesConfig;\nexports.setVersionsConfig = setVersionsConfig;\nexports.withUpdates = void 0;\nfunction path() {\n  var data = _interopRequireWildcard(require(\"path\"));\n  path = function path() {\n    return data;\n  };\n  return data;\n}\nfunction _resolveFrom() {\n  var data = _interopRequireDefault(require(\"resolve-from\"));\n  _resolveFrom = function _resolveFrom() {\n    return data;\n  };\n  return data;\n}\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _Updates() {\n  var data = require(\"../utils/Updates\");\n  _Updates = function _Updates() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nvar CREATE_MANIFEST_IOS_PATH = 'expo-updates/scripts/create-manifest-ios.sh';\nvar Config;\nexports.Config = Config;\n(function (Config) {\n  Config[\"ENABLED\"] = \"EXUpdatesEnabled\";\n  Config[\"CHECK_ON_LAUNCH\"] = \"EXUpdatesCheckOnLaunch\";\n  Config[\"LAUNCH_WAIT_MS\"] = \"EXUpdatesLaunchWaitMs\";\n  Config[\"RUNTIME_VERSION\"] = \"EXUpdatesRuntimeVersion\";\n  Config[\"SDK_VERSION\"] = \"EXUpdatesSDKVersion\";\n  Config[\"UPDATE_URL\"] = \"EXUpdatesURL\";\n  Config[\"RELEASE_CHANNEL\"] = \"EXUpdatesReleaseChannel\";\n  Config[\"UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY\"] = \"EXUpdatesRequestHeaders\";\n  Config[\"CODE_SIGNING_CERTIFICATE\"] = \"EXUpdatesCodeSigningCertificate\";\n  Config[\"CODE_SIGNING_METADATA\"] = \"EXUpdatesCodeSigningMetadata\";\n})(Config || (exports.Config = Config = {}));\nvar withUpdates = function withUpdates(config, _ref) {\n  var expoUsername = _ref.expoUsername;\n  return (0, _iosPlugins().withExpoPlist)(config, function (config) {\n    var projectRoot = config.modRequest.projectRoot;\n    var expoUpdatesPackageVersion = (0, _Updates().getExpoUpdatesPackageVersion)(projectRoot);\n    config.modResults = setUpdatesConfig(projectRoot, config, config.modResults, expoUsername, expoUpdatesPackageVersion);\n    return config;\n  });\n};\nexports.withUpdates = withUpdates;\nfunction setUpdatesConfig(projectRoot, config, expoPlist, username, expoUpdatesPackageVersion) {\n  var _objectSpread2;\n  var newExpoPlist = _objectSpread(_objectSpread({}, expoPlist), {}, (_objectSpread2 = {}, _defineProperty(_objectSpread2, Config.ENABLED, (0, _Updates().getUpdatesEnabled)(config, username)), _defineProperty(_objectSpread2, Config.CHECK_ON_LAUNCH, (0, _Updates().getUpdatesCheckOnLaunch)(config, expoUpdatesPackageVersion)), _defineProperty(_objectSpread2, Config.LAUNCH_WAIT_MS, (0, _Updates().getUpdatesTimeout)(config)), _objectSpread2));\n  var updateUrl = (0, _Updates().getUpdateUrl)(config, username);\n  if (updateUrl) {\n    newExpoPlist[Config.UPDATE_URL] = updateUrl;\n  } else {\n    delete newExpoPlist[Config.UPDATE_URL];\n  }\n  var codeSigningCertificate = (0, _Updates().getUpdatesCodeSigningCertificate)(projectRoot, config);\n  if (codeSigningCertificate) {\n    newExpoPlist[Config.CODE_SIGNING_CERTIFICATE] = codeSigningCertificate;\n  } else {\n    delete newExpoPlist[Config.CODE_SIGNING_CERTIFICATE];\n  }\n  var codeSigningMetadata = (0, _Updates().getUpdatesCodeSigningMetadata)(config);\n  if (codeSigningMetadata) {\n    newExpoPlist[Config.CODE_SIGNING_METADATA] = codeSigningMetadata;\n  } else {\n    delete newExpoPlist[Config.CODE_SIGNING_METADATA];\n  }\n  var requestHeaders = (0, _Updates().getUpdatesRequestHeaders)(config);\n  if (requestHeaders) {\n    newExpoPlist[Config.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY] = requestHeaders;\n  } else {\n    delete newExpoPlist[Config.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY];\n  }\n  return setVersionsConfig(config, newExpoPlist);\n}\nfunction setVersionsConfig(config, expoPlist) {\n  var newExpoPlist = _objectSpread({}, expoPlist);\n  var runtimeVersion = (0, _Updates().getRuntimeVersionNullable)(config, 'ios');\n  if (!runtimeVersion && expoPlist[Config.RUNTIME_VERSION]) {\n    throw new Error('A runtime version is set in your Expo.plist, but is missing from your app.json/app.config.js. Please either set runtimeVersion in your app.json/app.config.js or remove EXUpdatesRuntimeVersion from your Expo.plist.');\n  }\n  var sdkVersion = (0, _Updates().getSDKVersion)(config);\n  if (runtimeVersion) {\n    delete newExpoPlist[Config.SDK_VERSION];\n    newExpoPlist[Config.RUNTIME_VERSION] = runtimeVersion;\n  } else if (sdkVersion) {\n    delete newExpoPlist[Config.RUNTIME_VERSION];\n    newExpoPlist[Config.SDK_VERSION] = sdkVersion;\n  } else {\n    delete newExpoPlist[Config.SDK_VERSION];\n    delete newExpoPlist[Config.RUNTIME_VERSION];\n  }\n  return newExpoPlist;\n}\nfunction formatConfigurationScriptPath(projectRoot) {\n  var buildScriptPath = _resolveFrom().default.silent(projectRoot, CREATE_MANIFEST_IOS_PATH);\n  if (!buildScriptPath) {\n    throw new Error(\"Could not find the build script for iOS. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\");\n  }\n  var relativePath = path().relative(path().join(projectRoot, 'ios'), buildScriptPath);\n  return process.platform === 'win32' ? relativePath.replace(/\\\\/g, '/') : relativePath;\n}\nfunction getBundleReactNativePhase(project) {\n  var shellScriptBuildPhase = project.hash.project.objects.PBXShellScriptBuildPhase;\n  var bundleReactNative = Object.values(shellScriptBuildPhase).find(function (buildPhase) {\n    return buildPhase.name === '\"Bundle React Native code and images\"';\n  });\n  if (!bundleReactNative) {\n    throw new Error(`Couldn't find a build phase \"Bundle React Native code and images\"`);\n  }\n  return bundleReactNative;\n}\nfunction ensureBundleReactNativePhaseContainsConfigurationScript(projectRoot, project) {\n  var bundleReactNative = getBundleReactNativePhase(project);\n  var buildPhaseShellScriptPath = formatConfigurationScriptPath(projectRoot);\n  if (!isShellScriptBuildPhaseConfigured(projectRoot, project)) {\n    if (bundleReactNative.shellScript.includes(CREATE_MANIFEST_IOS_PATH)) {\n      bundleReactNative.shellScript = bundleReactNative.shellScript.replace(new RegExp(`(\\\\\\\\n)(\\\\.\\\\.)+/node_modules/${CREATE_MANIFEST_IOS_PATH}`), '');\n    }\n    bundleReactNative.shellScript = `${bundleReactNative.shellScript.replace(/\"$/, '')}${buildPhaseShellScriptPath}\\\\n\"`;\n  }\n  return project;\n}\nfunction isShellScriptBuildPhaseConfigured(projectRoot, project) {\n  var bundleReactNative = getBundleReactNativePhase(project);\n  var buildPhaseShellScriptPath = formatConfigurationScriptPath(projectRoot);\n  return bundleReactNative.shellScript.includes(buildPhaseShellScriptPath);\n}\nfunction isPlistConfigurationSet(expoPlist) {\n  return Boolean(expoPlist.EXUpdatesURL && (expoPlist.EXUpdatesSDKVersion || expoPlist.EXUpdatesRuntimeVersion));\n}\nfunction isPlistConfigurationSynced(projectRoot, config, expoPlist, username) {\n  return (0, _Updates().getUpdateUrl)(config, username) === expoPlist.EXUpdatesURL && (0, _Updates().getUpdatesEnabled)(config, username) === expoPlist.EXUpdatesEnabled && (0, _Updates().getUpdatesTimeout)(config) === expoPlist.EXUpdatesLaunchWaitMs && (0, _Updates().getUpdatesCheckOnLaunch)(config) === expoPlist.EXUpdatesCheckOnLaunch && (0, _Updates().getUpdatesCodeSigningCertificate)(projectRoot, config) === expoPlist.EXUpdatesCodeSigningCertificate && (0, _Updates().getUpdatesCodeSigningMetadata)(config) === expoPlist.EXUpdatesCodeSigningMetadata && isPlistVersionConfigurationSynced(config, expoPlist);\n}\nfunction isPlistVersionConfigurationSynced(config, expoPlist) {\n  var _expoPlist$EXUpdatesR, _expoPlist$EXUpdatesS;\n  var expectedRuntimeVersion = (0, _Updates().getRuntimeVersionNullable)(config, 'ios');\n  var expectedSdkVersion = (0, _Updates().getSDKVersion)(config);\n  var currentRuntimeVersion = (_expoPlist$EXUpdatesR = expoPlist.EXUpdatesRuntimeVersion) !== null && _expoPlist$EXUpdatesR !== void 0 ? _expoPlist$EXUpdatesR : null;\n  var currentSdkVersion = (_expoPlist$EXUpdatesS = expoPlist.EXUpdatesSDKVersion) !== null && _expoPlist$EXUpdatesS !== void 0 ? _expoPlist$EXUpdatesS : null;\n  if (expectedRuntimeVersion !== null) {\n    return currentRuntimeVersion === expectedRuntimeVersion && currentSdkVersion === null;\n  } else if (expectedSdkVersion !== null) {\n    return currentSdkVersion === expectedSdkVersion && currentRuntimeVersion === null;\n  } else {\n    return true;\n  }\n}","map":{"version":3,"names":["path","data","_interopRequireWildcard","require","_resolveFrom","_interopRequireDefault","_iosPlugins","_Updates","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","CREATE_MANIFEST_IOS_PATH","Config","exports","withUpdates","config","_ref","expoUsername","withExpoPlist","projectRoot","modRequest","expoUpdatesPackageVersion","getExpoUpdatesPackageVersion","modResults","setUpdatesConfig","expoPlist","username","_objectSpread2","newExpoPlist","_objectSpread","_defineProperty","ENABLED","getUpdatesEnabled","CHECK_ON_LAUNCH","getUpdatesCheckOnLaunch","LAUNCH_WAIT_MS","getUpdatesTimeout","updateUrl","getUpdateUrl","UPDATE_URL","codeSigningCertificate","getUpdatesCodeSigningCertificate","CODE_SIGNING_CERTIFICATE","codeSigningMetadata","getUpdatesCodeSigningMetadata","CODE_SIGNING_METADATA","requestHeaders","getUpdatesRequestHeaders","UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY","setVersionsConfig","runtimeVersion","getRuntimeVersionNullable","RUNTIME_VERSION","Error","sdkVersion","getSDKVersion","SDK_VERSION","formatConfigurationScriptPath","buildScriptPath","silent","relativePath","relative","join","process","platform","replace","getBundleReactNativePhase","project","shellScriptBuildPhase","hash","objects","PBXShellScriptBuildPhase","bundleReactNative","values","find","buildPhase","name","ensureBundleReactNativePhaseContainsConfigurationScript","buildPhaseShellScriptPath","isShellScriptBuildPhaseConfigured","shellScript","includes","RegExp","isPlistConfigurationSet","Boolean","EXUpdatesURL","EXUpdatesSDKVersion","EXUpdatesRuntimeVersion","isPlistConfigurationSynced","EXUpdatesEnabled","EXUpdatesLaunchWaitMs","EXUpdatesCheckOnLaunch","EXUpdatesCodeSigningCertificate","EXUpdatesCodeSigningMetadata","isPlistVersionConfigurationSynced","_expoPlist$EXUpdatesR","_expoPlist$EXUpdatesS","expectedRuntimeVersion","expectedSdkVersion","currentRuntimeVersion","currentSdkVersion"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\ios\\Updates.ts"],"sourcesContent":["import * as path from 'path';\nimport resolveFrom from 'resolve-from';\nimport xcode from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withExpoPlist } from '../plugins/ios-plugins';\nimport {\n  ExpoConfigUpdates,\n  getExpoUpdatesPackageVersion,\n  getRuntimeVersionNullable,\n  getSDKVersion,\n  getUpdatesCheckOnLaunch,\n  getUpdatesCodeSigningCertificate,\n  getUpdatesCodeSigningMetadata,\n  getUpdatesRequestHeaders,\n  getUpdatesEnabled,\n  getUpdatesTimeout,\n  getUpdateUrl,\n} from '../utils/Updates';\nimport { ExpoPlist } from './IosConfig.types';\n\nconst CREATE_MANIFEST_IOS_PATH = 'expo-updates/scripts/create-manifest-ios.sh';\n\nexport enum Config {\n  ENABLED = 'EXUpdatesEnabled',\n  CHECK_ON_LAUNCH = 'EXUpdatesCheckOnLaunch',\n  LAUNCH_WAIT_MS = 'EXUpdatesLaunchWaitMs',\n  RUNTIME_VERSION = 'EXUpdatesRuntimeVersion',\n  SDK_VERSION = 'EXUpdatesSDKVersion',\n  UPDATE_URL = 'EXUpdatesURL',\n  RELEASE_CHANNEL = 'EXUpdatesReleaseChannel',\n  UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY = 'EXUpdatesRequestHeaders',\n  CODE_SIGNING_CERTIFICATE = 'EXUpdatesCodeSigningCertificate',\n  CODE_SIGNING_METADATA = 'EXUpdatesCodeSigningMetadata',\n}\n\n// when making changes to this config plugin, ensure the same changes are also made in eas-cli and build-tools\n// Also ensure the docs are up-to-date: https://docs.expo.dev/bare/installing-updates/\n\nexport const withUpdates: ConfigPlugin<{ expoUsername: string | null }> = (\n  config,\n  { expoUsername }\n) => {\n  return withExpoPlist(config, (config) => {\n    const projectRoot = config.modRequest.projectRoot;\n    const expoUpdatesPackageVersion = getExpoUpdatesPackageVersion(projectRoot);\n    config.modResults = setUpdatesConfig(\n      projectRoot,\n      config,\n      config.modResults,\n      expoUsername,\n      expoUpdatesPackageVersion\n    );\n    return config;\n  });\n};\n\nexport function setUpdatesConfig(\n  projectRoot: string,\n  config: ExpoConfigUpdates,\n  expoPlist: ExpoPlist,\n  username: string | null,\n  expoUpdatesPackageVersion?: string | null\n): ExpoPlist {\n  const newExpoPlist = {\n    ...expoPlist,\n    [Config.ENABLED]: getUpdatesEnabled(config, username),\n    [Config.CHECK_ON_LAUNCH]: getUpdatesCheckOnLaunch(config, expoUpdatesPackageVersion),\n    [Config.LAUNCH_WAIT_MS]: getUpdatesTimeout(config),\n  };\n\n  const updateUrl = getUpdateUrl(config, username);\n  if (updateUrl) {\n    newExpoPlist[Config.UPDATE_URL] = updateUrl;\n  } else {\n    delete newExpoPlist[Config.UPDATE_URL];\n  }\n\n  const codeSigningCertificate = getUpdatesCodeSigningCertificate(projectRoot, config);\n  if (codeSigningCertificate) {\n    newExpoPlist[Config.CODE_SIGNING_CERTIFICATE] = codeSigningCertificate;\n  } else {\n    delete newExpoPlist[Config.CODE_SIGNING_CERTIFICATE];\n  }\n\n  const codeSigningMetadata = getUpdatesCodeSigningMetadata(config);\n  if (codeSigningMetadata) {\n    newExpoPlist[Config.CODE_SIGNING_METADATA] = codeSigningMetadata;\n  } else {\n    delete newExpoPlist[Config.CODE_SIGNING_METADATA];\n  }\n\n  const requestHeaders = getUpdatesRequestHeaders(config);\n  if (requestHeaders) {\n    newExpoPlist[Config.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY] = requestHeaders;\n  } else {\n    delete newExpoPlist[Config.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY];\n  }\n\n  return setVersionsConfig(config, newExpoPlist);\n}\n\nexport function setVersionsConfig(config: ExpoConfigUpdates, expoPlist: ExpoPlist): ExpoPlist {\n  const newExpoPlist = { ...expoPlist };\n\n  const runtimeVersion = getRuntimeVersionNullable(config, 'ios');\n  if (!runtimeVersion && expoPlist[Config.RUNTIME_VERSION]) {\n    throw new Error(\n      'A runtime version is set in your Expo.plist, but is missing from your app.json/app.config.js. Please either set runtimeVersion in your app.json/app.config.js or remove EXUpdatesRuntimeVersion from your Expo.plist.'\n    );\n  }\n  const sdkVersion = getSDKVersion(config);\n  if (runtimeVersion) {\n    delete newExpoPlist[Config.SDK_VERSION];\n    newExpoPlist[Config.RUNTIME_VERSION] = runtimeVersion;\n  } else if (sdkVersion) {\n    /**\n     * runtime version maybe null in projects using classic updates. In that\n     * case we use SDK version\n     */\n    delete newExpoPlist[Config.RUNTIME_VERSION];\n    newExpoPlist[Config.SDK_VERSION] = sdkVersion;\n  } else {\n    delete newExpoPlist[Config.SDK_VERSION];\n    delete newExpoPlist[Config.RUNTIME_VERSION];\n  }\n\n  return newExpoPlist;\n}\n\nfunction formatConfigurationScriptPath(projectRoot: string): string {\n  const buildScriptPath = resolveFrom.silent(projectRoot, CREATE_MANIFEST_IOS_PATH);\n\n  if (!buildScriptPath) {\n    throw new Error(\n      \"Could not find the build script for iOS. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\"\n    );\n  }\n\n  const relativePath = path.relative(path.join(projectRoot, 'ios'), buildScriptPath);\n  return process.platform === 'win32' ? relativePath.replace(/\\\\/g, '/') : relativePath;\n}\n\ninterface ShellScriptBuildPhase {\n  isa: 'PBXShellScriptBuildPhase';\n  name: string;\n  shellScript: string;\n  [key: string]: any;\n}\n\nexport function getBundleReactNativePhase(project: xcode.XcodeProject): ShellScriptBuildPhase {\n  const shellScriptBuildPhase = project.hash.project.objects.PBXShellScriptBuildPhase as Record<\n    string,\n    ShellScriptBuildPhase\n  >;\n  const bundleReactNative = Object.values(shellScriptBuildPhase).find(\n    (buildPhase) => buildPhase.name === '\"Bundle React Native code and images\"'\n  );\n\n  if (!bundleReactNative) {\n    throw new Error(`Couldn't find a build phase \"Bundle React Native code and images\"`);\n  }\n\n  return bundleReactNative;\n}\n\nexport function ensureBundleReactNativePhaseContainsConfigurationScript(\n  projectRoot: string,\n  project: xcode.XcodeProject\n): xcode.XcodeProject {\n  const bundleReactNative = getBundleReactNativePhase(project);\n  const buildPhaseShellScriptPath = formatConfigurationScriptPath(projectRoot);\n\n  if (!isShellScriptBuildPhaseConfigured(projectRoot, project)) {\n    // check if there's already another path to create-manifest-ios.sh\n    // this might be the case for monorepos\n    if (bundleReactNative.shellScript.includes(CREATE_MANIFEST_IOS_PATH)) {\n      bundleReactNative.shellScript = bundleReactNative.shellScript.replace(\n        new RegExp(`(\\\\\\\\n)(\\\\.\\\\.)+/node_modules/${CREATE_MANIFEST_IOS_PATH}`),\n        ''\n      );\n    }\n    bundleReactNative.shellScript = `${bundleReactNative.shellScript.replace(\n      /\"$/,\n      ''\n    )}${buildPhaseShellScriptPath}\\\\n\"`;\n  }\n  return project;\n}\n\nexport function isShellScriptBuildPhaseConfigured(\n  projectRoot: string,\n  project: xcode.XcodeProject\n): boolean {\n  const bundleReactNative = getBundleReactNativePhase(project);\n  const buildPhaseShellScriptPath = formatConfigurationScriptPath(projectRoot);\n  return bundleReactNative.shellScript.includes(buildPhaseShellScriptPath);\n}\n\nexport function isPlistConfigurationSet(expoPlist: ExpoPlist): boolean {\n  return Boolean(\n    expoPlist.EXUpdatesURL && (expoPlist.EXUpdatesSDKVersion || expoPlist.EXUpdatesRuntimeVersion)\n  );\n}\n\nexport function isPlistConfigurationSynced(\n  projectRoot: string,\n  config: ExpoConfigUpdates,\n  expoPlist: ExpoPlist,\n  username: string | null\n): boolean {\n  return (\n    getUpdateUrl(config, username) === expoPlist.EXUpdatesURL &&\n    getUpdatesEnabled(config, username) === expoPlist.EXUpdatesEnabled &&\n    getUpdatesTimeout(config) === expoPlist.EXUpdatesLaunchWaitMs &&\n    getUpdatesCheckOnLaunch(config) === expoPlist.EXUpdatesCheckOnLaunch &&\n    getUpdatesCodeSigningCertificate(projectRoot, config) ===\n      expoPlist.EXUpdatesCodeSigningCertificate &&\n    getUpdatesCodeSigningMetadata(config) === expoPlist.EXUpdatesCodeSigningMetadata &&\n    isPlistVersionConfigurationSynced(config, expoPlist)\n  );\n}\n\nexport function isPlistVersionConfigurationSynced(\n  config: Pick<ExpoConfigUpdates, 'sdkVersion' | 'runtimeVersion'>,\n  expoPlist: ExpoPlist\n): boolean {\n  const expectedRuntimeVersion = getRuntimeVersionNullable(config, 'ios');\n  const expectedSdkVersion = getSDKVersion(config);\n\n  const currentRuntimeVersion = expoPlist.EXUpdatesRuntimeVersion ?? null;\n  const currentSdkVersion = expoPlist.EXUpdatesSDKVersion ?? null;\n\n  if (expectedRuntimeVersion !== null) {\n    return currentRuntimeVersion === expectedRuntimeVersion && currentSdkVersion === null;\n  } else if (expectedSdkVersion !== null) {\n    return currentSdkVersion === expectedSdkVersion && currentRuntimeVersion === null;\n  } else {\n    return true;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}