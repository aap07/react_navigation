{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isNgrokClientError = isNgrokClientError;\nvar _externalModule = require(\"./ExternalModule\");\nvar NgrokResolver = function (_externalModule$Exter) {\n  _inherits(NgrokResolver, _externalModule$Exter);\n  var _super = _createSuper(NgrokResolver);\n  function NgrokResolver(projectRoot) {\n    _classCallCheck(this, NgrokResolver);\n    return _super.call(this, projectRoot, {\n      name: \"@expo/ngrok\",\n      versionRange: \"^4.1.0\"\n    }, function (packageName) {\n      return `The package ${packageName} is required to use tunnels, would you like to install it globally?`;\n    });\n  }\n  return _createClass(NgrokResolver);\n}(_externalModule.ExternalModule);\nexports.NgrokResolver = NgrokResolver;\nfunction isNgrokClientError(error) {\n  var ref;\n  return error == null ? void 0 : (ref = error.body) == null ? void 0 : ref.msg;\n}","map":{"version":3,"names":["_createClass","require","_classCallCheck","_inherits","_possibleConstructorReturn","_getPrototypeOf","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","isNgrokClientError","_externalModule","NgrokResolver","_externalModule$Exter","_super","projectRoot","name","versionRange","packageName","ExternalModule","error","ref","body","msg"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\doctor\\ngrok\\NgrokResolver.ts"],"sourcesContent":["import { ExternalModule } from './ExternalModule';\n\nexport interface NgrokClientError {\n  body: {\n    error_code: number;\n    status_code: number;\n    msg: string;\n    details: {\n      err: string;\n    };\n  };\n}\n\nexport interface NgrokOptions {\n  authtoken?: string;\n  port?: string | number | null;\n  host?: string;\n  httpauth?: string;\n  region?: string;\n  configPath?: string;\n\n  proto?: 'http' | 'tcp' | 'tls';\n  addr?: string;\n  inspect?: boolean;\n  auth?: string;\n  host_header?: string;\n  bind_tls?: true | false | 'both';\n  subdomain?: string;\n  hostname?: string;\n  crt?: string;\n  key?: string;\n  client_cas?: string;\n  remote_addr?: string;\n}\n\nexport interface NgrokInstance {\n  getActiveProcess(): { pid: number };\n  connect(\n    props: {\n      hostname?: string;\n      configPath: string;\n      onStatusChange: (status: string) => void;\n    } & NgrokOptions\n  ): Promise<string>;\n  kill(): Promise<void>;\n}\n\n/** Resolves the ngrok instance from local or globally installed package. */\nexport class NgrokResolver extends ExternalModule<NgrokInstance> {\n  constructor(projectRoot: string) {\n    super(\n      projectRoot,\n      {\n        name: '@expo/ngrok',\n        versionRange: '^4.1.0',\n      },\n      (packageName) =>\n        `The package ${packageName} is required to use tunnels, would you like to install it globally?`\n    );\n  }\n}\n\nexport function isNgrokClientError(error: any): error is NgrokClientError {\n  return error?.body?.msg;\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,YAAA,GAAAC,OAAA;AAAA,IAAAC,eAAA,GAAAD,OAAA;AAAA,IAAAE,SAAA,GAAAF,OAAA;AAAA,IAAAG,0BAAA,GAAAH,OAAA;AAAA,IAAAI,eAAA,GAAAJ,OAAA;AAAA,SAAAK,aAAAC,OAAA,QAAAC,yBAAA,GAAAC,yBAAA,oBAAAC,qBAAA,QAAAC,KAAA,GAAAN,eAAA,CAAAE,OAAA,GAAAK,MAAA,MAAAJ,yBAAA,QAAAK,SAAA,GAAAR,eAAA,OAAAS,WAAA,EAAAF,MAAA,GAAAG,OAAA,CAAAC,SAAA,CAAAL,KAAA,EAAAM,SAAA,EAAAJ,SAAA,YAAAD,MAAA,GAAAD,KAAA,CAAAO,KAAA,OAAAD,SAAA,YAAAb,0BAAA,OAAAQ,MAAA;AAAA,SAAAH,0BAAA,eAAAM,OAAA,qBAAAA,OAAA,CAAAC,SAAA,oBAAAD,OAAA,CAAAC,SAAA,CAAAG,IAAA,2BAAAC,KAAA,oCAAAC,OAAA,CAAAC,SAAA,CAAAC,OAAA,CAAAC,IAAA,CAAAT,OAAA,CAAAC,SAAA,CAAAK,OAAA,8CAAAI,CAAA;;;;QA8DgBC,kBAAkB,GAAlBA,kBAAkB;AA9DH,IAAAC,eAAkB,GAAA1B,OAAA;AAAA,IAgDpC2B,aAAa,aAAAC,qBAAA;EAAA1B,SAAA,CAAAyB,aAAA,EAAAC,qBAAA;EAAA,IAAAC,MAAA,GAAAxB,YAAA,CAAAsB,aAAA;EACxB,SAAAA,cAAYG,WAAmB,EAAE;IAAA7B,eAAA,OAAA0B,aAAA;IAAA,OAAAE,MAAA,CAAAN,IAAA,OAE7BO,WAAW,EACX;MACEC,IAAI,EAAE,aAAa;MACnBC,YAAY,EAAE;KACf,EACD,UAACC,WAAW;MAAA,OACT,eAAcA,WAAY,qEAAoE;IAAA;;EAEpG,OAAAlC,YAAA,CAAA4B,aAAA;AAAA,EAXgCD,eAAc,CAAAQ,cAAA;QAApCP,aAAa,GAAbA,aAAa;AAcnB,SAASF,kBAAkBA,CAACU,KAAU,EAA6B;MACjEC,GAAW;EAAlB,OAAOD,KAAK,QAAM,GAAX,MAAW,GAAX,CAAAC,GAAW,GAAXD,KAAK,CAAEE,IAAI,YAAX,MAAW,GAAXD,GAAW,CAAEE,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}