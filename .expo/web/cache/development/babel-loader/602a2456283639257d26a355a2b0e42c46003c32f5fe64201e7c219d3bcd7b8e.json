{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native/codegen/lib/generators/RNCodegen.d.ts"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport type { SchemaType } from '../CodegenSchema';\n\nexport type FilesOutput = Map<string, string>;\nexport type LibraryGeneratorFunction = (libraryName: string, schema: SchemaType, packageName: string | undefined, assumeNonnull: boolean) => FilesOutput;\nexport type SchemaGeneratorFunction = (schemas: { [key: string]: SchemaType }) => FilesOutput;\nexport type ViewGeneratorFunction = (libraryName: string, schema: SchemaType) => FilesOutput;\n\ntype LibraryGeneratorNames =\n    | 'generateComponentDescriptorH'\n    | 'generateComponentHObjCpp'\n    | 'generateEventEmitterCpp'\n    | 'generateEventEmitterH'\n    | 'generatePropsCpp'\n    | 'generatePropsH'\n    | 'generateStateCpp'\n    | 'generateStateH'\n    | 'generateModuleH'\n    | 'generateModuleCpp'\n    | 'generateModuleObjCpp'\n    | 'generateModuleJavaSpec'\n    | 'generateModuleJniCpp'\n    | 'generateModuleJniH'\n    | 'generatePropsJavaInterface'\n    | 'generatePropsJavaDelegate'\n    | 'generateTests'\n    | 'generateShadowNodeCpp'\n    | 'generateShadowNodeH'\n    ;\n\ntype SchemaGeneratorNames =\n    | 'generateThirdPartyFabricComponentsProviderObjCpp'\n    | 'generateThirdPartyFabricComponentsProviderH'\n    ;\n\ntype ViewGeneratorNames =\n    | 'generateViewConfigJs'\n    ;\n\nexport type AllGenerators =\n    & { readonly [key in LibraryGeneratorNames]: LibraryGeneratorFunction; }\n    & { readonly [key in SchemaGeneratorNames]: SchemaGeneratorFunction; }\n    & { readonly [key in ViewGeneratorNames]: ViewGeneratorFunction; }\n    ;\n\nexport type LibraryGenerators =\n    | 'componentsAndroid'\n    | 'componentsIOS'\n    | 'descriptors'\n    | 'events'\n    | 'props'\n    | 'states'\n    | 'tests'\n    | 'shadow-nodes'\n    | 'modulesAndroid'\n    | 'modulesCxx'\n    | 'modulesIOS'\n    ;\n\nexport type SchemaGenerators =\n    | 'providerIOS'\n    ;\n\nexport interface LibraryOptions {\n    libraryName: string;\n    schema: SchemaType;\n    outputDirectory: string;\n    packageName?: string | undefined;\n    assumeNonnull: boolean;\n}\n\nexport interface LibraryConfig {\n    generators: LibraryGenerators[];\n    test?: boolean | undefined;\n}\n\nexport interface SchemasOptions {\n    schemas: { [key: string]: SchemaType };\n    outputDirectory: string;\n}\n\nexport interface SchemasConfig {\n    generators: SchemaGenerators[];\n    test?: boolean | undefined;\n}\n\nexport declare const allGenerators: AllGenerators;\nexport declare const libraryGenerators: { readonly [key in LibraryGenerators]: LibraryGeneratorFunction };\nexport declare const schemaGenerators: { readonly [key in SchemaGenerators]: SchemaGeneratorFunction };\nexport declare function generate(options: LibraryOptions, config: LibraryConfig): boolean;\nexport declare function generateFromSchemas(options: SchemasOptions, config: SchemasConfig): boolean;\nexport declare function generateViewConfig(options: LibraryOptions): string;\n"],"mappings":""},"metadata":{},"sourceType":"script","externalDependencies":[]}