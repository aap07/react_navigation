{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"refreshControl\", \"waitFor\"],\n  _excluded2 = [\"waitFor\", \"refreshControl\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport RNScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport RNSwitch from \"react-native-web/dist/exports/Switch\";\nimport RNTextInput from \"react-native-web/dist/exports/TextInput\";\nimport RNDrawerLayoutAndroid from \"react-native-web/dist/exports/DrawerLayoutAndroid\";\nimport RNFlatList from \"react-native-web/dist/exports/FlatList\";\nimport RNRefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport createNativeWrapper from \"../handlers/createNativeWrapper\";\nimport { nativeViewProps } from \"../handlers/NativeViewGestureHandler\";\nimport { toArray } from \"../utils\";\nexport var RefreshControl = createNativeWrapper(RNRefreshControl, {\n  disallowInterruption: true,\n  shouldCancelWhenOutside: false\n});\nvar GHScrollView = createNativeWrapper(RNScrollView, {\n  disallowInterruption: true,\n  shouldCancelWhenOutside: false\n});\nexport var ScrollView = React.forwardRef(function (props, ref) {\n  var refreshControlGestureRef = React.useRef(null);\n  var refreshControl = props.refreshControl,\n    waitFor = props.waitFor,\n    rest = _objectWithoutProperties(props, _excluded);\n  return React.createElement(GHScrollView, _extends({}, rest, {\n    ref: ref,\n    waitFor: [].concat(_toConsumableArray(toArray(waitFor !== null && waitFor !== void 0 ? waitFor : [])), [refreshControlGestureRef]),\n    refreshControl: refreshControl ? React.cloneElement(refreshControl, {\n      ref: refreshControlGestureRef\n    }) : undefined\n  }));\n});\nexport var Switch = createNativeWrapper(RNSwitch, {\n  shouldCancelWhenOutside: false,\n  shouldActivateOnStart: true,\n  disallowInterruption: true\n});\nexport var TextInput = createNativeWrapper(RNTextInput);\nexport var DrawerLayoutAndroid = createNativeWrapper(RNDrawerLayoutAndroid, {\n  disallowInterruption: true\n});\nexport var FlatList = React.forwardRef(function (props, ref) {\n  var refreshControlGestureRef = React.useRef(null);\n  var waitFor = props.waitFor,\n    refreshControl = props.refreshControl,\n    rest = _objectWithoutProperties(props, _excluded2);\n  var flatListProps = {};\n  var scrollViewProps = {};\n  for (var _ref of Object.entries(rest)) {\n    var _ref2 = _slicedToArray(_ref, 2);\n    var propName = _ref2[0];\n    var value = _ref2[1];\n    if (nativeViewProps.includes(propName)) {\n      scrollViewProps[propName] = value;\n    } else {\n      flatListProps[propName] = value;\n    }\n  }\n  return React.createElement(RNFlatList, _extends({\n    ref: ref\n  }, flatListProps, {\n    renderScrollComponent: function renderScrollComponent(scrollProps) {\n      return React.createElement(ScrollView, _extends({}, scrollProps, scrollViewProps, {\n        waitFor: [].concat(_toConsumableArray(toArray(waitFor !== null && waitFor !== void 0 ? waitFor : [])), [refreshControlGestureRef])\n      }));\n    },\n    refreshControl: refreshControl ? React.cloneElement(refreshControl, {\n      ref: refreshControlGestureRef\n    }) : undefined\n  }));\n});","map":{"version":3,"names":["React","RNScrollView","RNSwitch","RNTextInput","RNDrawerLayoutAndroid","RNFlatList","RNRefreshControl","createNativeWrapper","nativeViewProps","toArray","RefreshControl","disallowInterruption","shouldCancelWhenOutside","GHScrollView","ScrollView","forwardRef","props","ref","refreshControlGestureRef","useRef","refreshControl","waitFor","rest","_objectWithoutProperties","_excluded","createElement","_extends","concat","_toConsumableArray","cloneElement","undefined","Switch","shouldActivateOnStart","TextInput","DrawerLayoutAndroid","FlatList","_excluded2","flatListProps","scrollViewProps","_ref","Object","entries","_ref2","_slicedToArray","propName","value","includes","renderScrollComponent","scrollProps"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\react-native-gesture-handler\\lib\\module\\components\\GestureComponents.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  PropsWithChildren,\n  ForwardedRef,\n  RefAttributes,\n  ReactElement,\n} from 'react';\nimport {\n  ScrollView as RNScrollView,\n  ScrollViewProps as RNScrollViewProps,\n  Switch as RNSwitch,\n  SwitchProps as RNSwitchProps,\n  TextInput as RNTextInput,\n  TextInputProps as RNTextInputProps,\n  DrawerLayoutAndroid as RNDrawerLayoutAndroid,\n  DrawerLayoutAndroidProps as RNDrawerLayoutAndroidProps,\n  FlatList as RNFlatList,\n  FlatListProps as RNFlatListProps,\n  RefreshControl as RNRefreshControl,\n} from 'react-native';\n\nimport createNativeWrapper from '../handlers/createNativeWrapper';\n\nimport {\n  NativeViewGestureHandlerProps,\n  nativeViewProps,\n} from '../handlers/NativeViewGestureHandler';\n\nimport { toArray } from '../utils';\n\nexport const RefreshControl = createNativeWrapper(RNRefreshControl, {\n  disallowInterruption: true,\n  shouldCancelWhenOutside: false,\n});\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type RefreshControl = typeof RefreshControl & RNRefreshControl;\n\nconst GHScrollView = createNativeWrapper<PropsWithChildren<RNScrollViewProps>>(\n  RNScrollView,\n  {\n    disallowInterruption: true,\n    shouldCancelWhenOutside: false,\n  }\n);\nexport const ScrollView = React.forwardRef<\n  RNScrollView,\n  RNScrollViewProps & NativeViewGestureHandlerProps\n>((props, ref) => {\n  const refreshControlGestureRef = React.useRef<RefreshControl>(null);\n  const { refreshControl, waitFor, ...rest } = props;\n\n  return (\n    <GHScrollView\n      {...rest}\n      // @ts-ignore `ref` exists on `GHScrollView`\n      ref={ref}\n      waitFor={[...toArray(waitFor ?? []), refreshControlGestureRef]}\n      // @ts-ignore we don't pass `refreshing` prop as we only want to override the ref\n      refreshControl={\n        refreshControl\n          ? React.cloneElement(refreshControl, {\n              // @ts-ignore for reasons unknown to me, `ref` doesn't exist on the type inferred by TS\n              ref: refreshControlGestureRef,\n            })\n          : undefined\n      }\n    />\n  );\n});\n// backward type compatibility with https://github.com/software-mansion/react-native-gesture-handler/blob/db78d3ca7d48e8ba57482d3fe9b0a15aa79d9932/react-native-gesture-handler.d.ts#L440-L457\n// include methods of wrapped components by creating an intersection type with the RN component instead of duplicating them.\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type ScrollView = typeof GHScrollView & RNScrollView;\n\nexport const Switch = createNativeWrapper<RNSwitchProps>(RNSwitch, {\n  shouldCancelWhenOutside: false,\n  shouldActivateOnStart: true,\n  disallowInterruption: true,\n});\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type Switch = typeof Switch & RNSwitch;\n\nexport const TextInput = createNativeWrapper<RNTextInputProps>(RNTextInput);\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type TextInput = typeof TextInput & RNTextInput;\n\nexport const DrawerLayoutAndroid = createNativeWrapper<\n  PropsWithChildren<RNDrawerLayoutAndroidProps>\n>(RNDrawerLayoutAndroid, { disallowInterruption: true });\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type DrawerLayoutAndroid = typeof DrawerLayoutAndroid &\n  RNDrawerLayoutAndroid;\n\nexport const FlatList = React.forwardRef((props, ref) => {\n  const refreshControlGestureRef = React.useRef<RefreshControl>(null);\n\n  const { waitFor, refreshControl, ...rest } = props;\n\n  const flatListProps = {};\n  const scrollViewProps = {};\n  for (const [propName, value] of Object.entries(rest)) {\n    // https://github.com/microsoft/TypeScript/issues/26255\n    if ((nativeViewProps as readonly string[]).includes(propName)) {\n      // @ts-ignore - this function cannot have generic type so we have to ignore this error\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      scrollViewProps[propName] = value;\n    } else {\n      // @ts-ignore - this function cannot have generic type so we have to ignore this error\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      flatListProps[propName] = value;\n    }\n  }\n\n  return (\n    // @ts-ignore - this function cannot have generic type so we have to ignore this error\n    <RNFlatList\n      ref={ref}\n      {...flatListProps}\n      renderScrollComponent={(scrollProps) => (\n        <ScrollView\n          {...{\n            ...scrollProps,\n            ...scrollViewProps,\n            waitFor: [...toArray(waitFor ?? []), refreshControlGestureRef],\n          }}\n        />\n      )}\n      // @ts-ignore we don't pass `refreshing` prop as we only want to override the ref\n      refreshControl={\n        refreshControl\n          ? React.cloneElement(refreshControl, {\n              // @ts-ignore for reasons unknown to me, `ref` doesn't exist on the type inferred by TS\n              ref: refreshControlGestureRef,\n            })\n          : undefined\n      }\n    />\n  );\n}) as <ItemT = any>(\n  props: PropsWithChildren<\n    RNFlatListProps<ItemT> &\n      RefAttributes<FlatList<ItemT>> &\n      NativeViewGestureHandlerProps\n  >,\n  ref: ForwardedRef<FlatList<ItemT>>\n) => ReactElement | null;\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type FlatList<ItemT = any> = typeof FlatList & RNFlatList<ItemT>;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}