{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _excluded = [\"ignoreStdio\"];\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nvar cross_spawn_1 = __importDefault(require(\"cross-spawn\"));\nfunction spawnAsync(command, args) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var stubError = new Error();\n  var callerStack = stubError.stack ? stubError.stack.replace(/^.*/, '    ...') : null;\n  var child;\n  var promise = new Promise(function (resolve, reject) {\n    var ignoreStdio = options.ignoreStdio,\n      nodeOptions = _objectWithoutProperties(options, _excluded);\n    child = (0, cross_spawn_1.default)(command, args, nodeOptions);\n    var stdout = '';\n    var stderr = '';\n    if (!ignoreStdio) {\n      if (child.stdout) {\n        child.stdout.on('data', function (data) {\n          stdout += data;\n        });\n      }\n      if (child.stderr) {\n        child.stderr.on('data', function (data) {\n          stderr += data;\n        });\n      }\n    }\n    var completionListener = function completionListener(code, signal) {\n      child.removeListener('error', errorListener);\n      var result = {\n        pid: child.pid,\n        output: [stdout, stderr],\n        stdout: stdout,\n        stderr: stderr,\n        status: code,\n        signal: signal\n      };\n      if (code !== 0) {\n        var argumentString = args && args.length > 0 ? ` ${args.join(' ')}` : '';\n        var error = signal ? new Error(`${command}${argumentString} exited with signal: ${signal}`) : new Error(`${command}${argumentString} exited with non-zero code: ${code}`);\n        if (error.stack && callerStack) {\n          error.stack += `\\n${callerStack}`;\n        }\n        Object.assign(error, result);\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    };\n    var errorListener = function errorListener(error) {\n      if (ignoreStdio) {\n        child.removeListener('exit', completionListener);\n      } else {\n        child.removeListener('close', completionListener);\n      }\n      Object.assign(error, {\n        pid: child.pid,\n        output: [stdout, stderr],\n        stdout: stdout,\n        stderr: stderr,\n        status: null,\n        signal: null\n      });\n      reject(error);\n    };\n    if (ignoreStdio) {\n      child.once('exit', completionListener);\n    } else {\n      child.once('close', completionListener);\n    }\n    child.once('error', errorListener);\n  });\n  promise.child = child;\n  return promise;\n}\nmodule.exports = spawnAsync;","map":{"version":3,"names":["cross_spawn_1","__importDefault","require","spawnAsync","command","args","options","arguments","length","undefined","stubError","Error","callerStack","stack","replace","child","promise","Promise","resolve","reject","ignoreStdio","nodeOptions","_objectWithoutProperties","_excluded","default","stdout","stderr","on","data","completionListener","code","signal","removeListener","errorListener","result","pid","output","status","argumentString","join","error","Object","assign","once","module","exports"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\dev-server\\node_modules\\@expo\\spawn-async\\src\\spawnAsync.ts"],"sourcesContent":["import { ChildProcess, SpawnOptions as NodeSpawnOptions } from 'child_process';\nimport spawn from 'cross-spawn';\n\nnamespace spawnAsync {\n  export interface SpawnOptions extends NodeSpawnOptions {\n    ignoreStdio?: boolean;\n  }\n\n  export interface SpawnPromise<T> extends Promise<T> {\n    child: ChildProcess;\n  }\n\n  export interface SpawnResult {\n    pid?: number;\n    output: string[];\n    stdout: string;\n    stderr: string;\n    status: number | null;\n    signal: string | null;\n  }\n}\n\nfunction spawnAsync(\n  command: string,\n  args?: ReadonlyArray<string>,\n  options: spawnAsync.SpawnOptions = {}\n): spawnAsync.SpawnPromise<spawnAsync.SpawnResult> {\n  const stubError = new Error();\n  const callerStack = stubError.stack ? stubError.stack.replace(/^.*/, '    ...') : null;\n\n  let child: ChildProcess;\n  let promise = new Promise((resolve, reject) => {\n    let { ignoreStdio, ...nodeOptions } = options;\n    // @ts-ignore: cross-spawn declares \"args\" to be a regular array instead of a read-only one\n    child = spawn(command, args, nodeOptions);\n    let stdout = '';\n    let stderr = '';\n\n    if (!ignoreStdio) {\n      if (child.stdout) {\n        child.stdout.on('data', (data) => {\n          stdout += data;\n        });\n      }\n\n      if (child.stderr) {\n        child.stderr.on('data', (data) => {\n          stderr += data;\n        });\n      }\n    }\n\n    let completionListener = (code: number | null, signal: string | null) => {\n      child.removeListener('error', errorListener);\n      let result: spawnAsync.SpawnResult = {\n        pid: child.pid,\n        output: [stdout, stderr],\n        stdout,\n        stderr,\n        status: code,\n        signal,\n      };\n      if (code !== 0) {\n        let argumentString = args && args.length > 0 ? ` ${args.join(' ')}` : '';\n        let error = signal\n          ? new Error(`${command}${argumentString} exited with signal: ${signal}`)\n          : new Error(`${command}${argumentString} exited with non-zero code: ${code}`);\n        if (error.stack && callerStack) {\n          error.stack += `\\n${callerStack}`;\n        }\n        Object.assign(error, result);\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    };\n\n    let errorListener = (error: Error) => {\n      if (ignoreStdio) {\n        child.removeListener('exit', completionListener);\n      } else {\n        child.removeListener('close', completionListener);\n      }\n      Object.assign(error, {\n        pid: child.pid,\n        output: [stdout, stderr],\n        stdout,\n        stderr,\n        status: null,\n        signal: null,\n      });\n      reject(error);\n    };\n\n    if (ignoreStdio) {\n      child.once('exit', completionListener);\n    } else {\n      child.once('close', completionListener);\n    }\n    child.once('error', errorListener);\n  }) as spawnAsync.SpawnPromise<spawnAsync.SpawnResult>;\n  // @ts-ignore: TypeScript isn't aware the Promise constructor argument runs synchronously and\n  // thinks `child` is not yet defined\n  promise.child = child;\n  return promise;\n}\n\nexport = spawnAsync;\n"],"mappings":";;;;;;;;;AACA,IAAAA,aAAA,GAAAC,eAAA,CAAAC,OAAA;AAqBA,SAASC,UAAUA,CACjBC,OAAe,EACfC,IAA4B,EACS;EAAA,IAArCC,OAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAmC,EAAE;EAErC,IAAMG,SAAS,GAAG,IAAIC,KAAK,EAAE;EAC7B,IAAMC,WAAW,GAAGF,SAAS,CAACG,KAAK,GAAGH,SAAS,CAACG,KAAK,CAACC,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,GAAG,IAAI;EAEtF,IAAIC,KAAmB;EACvB,IAAIC,OAAO,GAAG,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAI;IAC5C,IAAMC,WAAW,GAAqBd,OAAO,CAAvCc,WAAW;MAAKC,WAAW,GAAAC,wBAAA,CAAKhB,OAAO,EAAAiB,SAAA;IAE7CR,KAAK,GAAG,IAAAf,aAAA,CAAAwB,OAAK,EAACpB,OAAO,EAAEC,IAAI,EAAEgB,WAAW,CAAC;IACzC,IAAII,MAAM,GAAG,EAAE;IACf,IAAIC,MAAM,GAAG,EAAE;IAEf,IAAI,CAACN,WAAW,EAAE;MAChB,IAAIL,KAAK,CAACU,MAAM,EAAE;QAChBV,KAAK,CAACU,MAAM,CAACE,EAAE,CAAC,MAAM,EAAE,UAACC,IAAI,EAAI;UAC/BH,MAAM,IAAIG,IAAI;QAChB,CAAC,CAAC;;MAGJ,IAAIb,KAAK,CAACW,MAAM,EAAE;QAChBX,KAAK,CAACW,MAAM,CAACC,EAAE,CAAC,MAAM,EAAE,UAACC,IAAI,EAAI;UAC/BF,MAAM,IAAIE,IAAI;QAChB,CAAC,CAAC;;;IAIN,IAAIC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAIC,IAAmB,EAAEC,MAAqB,EAAI;MACtEhB,KAAK,CAACiB,cAAc,CAAC,OAAO,EAAEC,aAAa,CAAC;MAC5C,IAAIC,MAAM,GAA2B;QACnCC,GAAG,EAAEpB,KAAK,CAACoB,GAAG;QACdC,MAAM,EAAE,CAACX,MAAM,EAAEC,MAAM,CAAC;QACxBD,MAAM,EAANA,MAAM;QACNC,MAAM,EAANA,MAAM;QACNW,MAAM,EAAEP,IAAI;QACZC,MAAM,EAANA;OACD;MACD,IAAID,IAAI,KAAK,CAAC,EAAE;QACd,IAAIQ,cAAc,GAAGjC,IAAI,IAAIA,IAAI,CAACG,MAAM,GAAG,CAAC,GAAG,IAAIH,IAAI,CAACkC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE;QACxE,IAAIC,KAAK,GAAGT,MAAM,GACd,IAAIpB,KAAK,CAAC,GAAGP,OAAO,GAAGkC,cAAc,wBAAwBP,MAAM,EAAE,CAAC,GACtE,IAAIpB,KAAK,CAAC,GAAGP,OAAO,GAAGkC,cAAc,+BAA+BR,IAAI,EAAE,CAAC;QAC/E,IAAIU,KAAK,CAAC3B,KAAK,IAAID,WAAW,EAAE;UAC9B4B,KAAK,CAAC3B,KAAK,IAAI,KAAKD,WAAW,EAAE;;QAEnC6B,MAAM,CAACC,MAAM,CAACF,KAAK,EAAEN,MAAM,CAAC;QAC5Bf,MAAM,CAACqB,KAAK,CAAC;OACd,MAAM;QACLtB,OAAO,CAACgB,MAAM,CAAC;;IAEnB,CAAC;IAED,IAAID,aAAa,GAAG,SAAhBA,aAAaA,CAAIO,KAAY,EAAI;MACnC,IAAIpB,WAAW,EAAE;QACfL,KAAK,CAACiB,cAAc,CAAC,MAAM,EAAEH,kBAAkB,CAAC;OACjD,MAAM;QACLd,KAAK,CAACiB,cAAc,CAAC,OAAO,EAAEH,kBAAkB,CAAC;;MAEnDY,MAAM,CAACC,MAAM,CAACF,KAAK,EAAE;QACnBL,GAAG,EAAEpB,KAAK,CAACoB,GAAG;QACdC,MAAM,EAAE,CAACX,MAAM,EAAEC,MAAM,CAAC;QACxBD,MAAM,EAANA,MAAM;QACNC,MAAM,EAANA,MAAM;QACNW,MAAM,EAAE,IAAI;QACZN,MAAM,EAAE;OACT,CAAC;MACFZ,MAAM,CAACqB,KAAK,CAAC;IACf,CAAC;IAED,IAAIpB,WAAW,EAAE;MACfL,KAAK,CAAC4B,IAAI,CAAC,MAAM,EAAEd,kBAAkB,CAAC;KACvC,MAAM;MACLd,KAAK,CAAC4B,IAAI,CAAC,OAAO,EAAEd,kBAAkB,CAAC;;IAEzCd,KAAK,CAAC4B,IAAI,CAAC,OAAO,EAAEV,aAAa,CAAC;EACpC,CAAC,CAAoD;EAGrDjB,OAAO,CAACD,KAAK,GAAGA,KAAK;EACrB,OAAOC,OAAO;AAChB;AAEA4B,MAAA,CAAAC,OAAA,GAAS1C,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}