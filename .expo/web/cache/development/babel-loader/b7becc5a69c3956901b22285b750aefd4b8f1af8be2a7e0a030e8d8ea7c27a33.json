{"ast":null,"code":"import { Scalar } from \"../../nodes/Scalar.js\";\nimport { stringifyNumber } from \"../../stringify/stringifyNumber.js\";\nvar floatNaN = {\n  identify: function identify(value) {\n    return typeof value === 'number';\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  test: /^[-+]?\\.(?:inf|Inf|INF|nan|NaN|NAN)$/,\n  resolve: function resolve(str) {\n    return str.slice(-3).toLowerCase() === 'nan' ? NaN : str[0] === '-' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\n  },\n  stringify: stringifyNumber\n};\nvar floatExp = {\n  identify: function identify(value) {\n    return typeof value === 'number';\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  format: 'EXP',\n  test: /^[-+]?(?:[0-9][0-9_]*)?(?:\\.[0-9_]*)?[eE][-+]?[0-9]+$/,\n  resolve: function resolve(str) {\n    return parseFloat(str.replace(/_/g, ''));\n  },\n  stringify: function stringify(node) {\n    var num = Number(node.value);\n    return isFinite(num) ? num.toExponential() : stringifyNumber(node);\n  }\n};\nvar float = {\n  identify: function identify(value) {\n    return typeof value === 'number';\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  test: /^[-+]?(?:[0-9][0-9_]*)?\\.[0-9_]*$/,\n  resolve: function resolve(str) {\n    var node = new Scalar(parseFloat(str.replace(/_/g, '')));\n    var dot = str.indexOf('.');\n    if (dot !== -1) {\n      var f = str.substring(dot + 1).replace(/_/g, '');\n      if (f[f.length - 1] === '0') node.minFractionDigits = f.length;\n    }\n    return node;\n  },\n  stringify: stringifyNumber\n};\nexport { float, floatExp, floatNaN };","map":{"version":3,"names":["Scalar","stringifyNumber","floatNaN","identify","value","default","tag","test","resolve","str","slice","toLowerCase","NaN","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","stringify","floatExp","format","parseFloat","replace","node","num","isFinite","toExponential","float","dot","indexOf","f","substring","length","minFractionDigits"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/browser/dist/schema/yaml-1.1/float.js"],"sourcesContent":["import { Scalar } from '../../nodes/Scalar.js';\nimport { stringifyNumber } from '../../stringify/stringifyNumber.js';\n\nconst floatNaN = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^[-+]?\\.(?:inf|Inf|INF|nan|NaN|NAN)$/,\n    resolve: (str) => str.slice(-3).toLowerCase() === 'nan'\n        ? NaN\n        : str[0] === '-'\n            ? Number.NEGATIVE_INFINITY\n            : Number.POSITIVE_INFINITY,\n    stringify: stringifyNumber\n};\nconst floatExp = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    format: 'EXP',\n    test: /^[-+]?(?:[0-9][0-9_]*)?(?:\\.[0-9_]*)?[eE][-+]?[0-9]+$/,\n    resolve: (str) => parseFloat(str.replace(/_/g, '')),\n    stringify(node) {\n        const num = Number(node.value);\n        return isFinite(num) ? num.toExponential() : stringifyNumber(node);\n    }\n};\nconst float = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^[-+]?(?:[0-9][0-9_]*)?\\.[0-9_]*$/,\n    resolve(str) {\n        const node = new Scalar(parseFloat(str.replace(/_/g, '')));\n        const dot = str.indexOf('.');\n        if (dot !== -1) {\n            const f = str.substring(dot + 1).replace(/_/g, '');\n            if (f[f.length - 1] === '0')\n                node.minFractionDigits = f.length;\n        }\n        return node;\n    },\n    stringify: stringifyNumber\n};\n\nexport { float, floatExp, floatNaN };\n"],"mappings":"AAAA,SAASA,MAAM;AACf,SAASC,eAAe;AAExB,IAAMC,QAAQ,GAAG;EACbC,QAAQ,EAAE,SAAAA,SAAAC,KAAK;IAAA,OAAI,OAAOA,KAAK,KAAK,QAAQ;EAAA;EAC5CC,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,yBAAyB;EAC9BC,IAAI,EAAE,sCAAsC;EAC5CC,OAAO,EAAE,SAAAA,QAACC,GAAG;IAAA,OAAKA,GAAG,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,KAAK,KAAK,GACjDC,GAAG,GACHH,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,GACVI,MAAM,CAACC,iBAAiB,GACxBD,MAAM,CAACE,iBAAiB;EAAA;EAClCC,SAAS,EAAEf;AACf,CAAC;AACD,IAAMgB,QAAQ,GAAG;EACbd,QAAQ,EAAE,SAAAA,SAAAC,KAAK;IAAA,OAAI,OAAOA,KAAK,KAAK,QAAQ;EAAA;EAC5CC,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,yBAAyB;EAC9BY,MAAM,EAAE,KAAK;EACbX,IAAI,EAAE,uDAAuD;EAC7DC,OAAO,EAAE,SAAAA,QAACC,GAAG;IAAA,OAAKU,UAAU,CAACV,GAAG,CAACW,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;EAAA;EACnDJ,SAAS,WAAAA,UAACK,IAAI,EAAE;IACZ,IAAMC,GAAG,GAAGT,MAAM,CAACQ,IAAI,CAACjB,KAAK,CAAC;IAC9B,OAAOmB,QAAQ,CAACD,GAAG,CAAC,GAAGA,GAAG,CAACE,aAAa,CAAC,CAAC,GAAGvB,eAAe,CAACoB,IAAI,CAAC;EACtE;AACJ,CAAC;AACD,IAAMI,KAAK,GAAG;EACVtB,QAAQ,EAAE,SAAAA,SAAAC,KAAK;IAAA,OAAI,OAAOA,KAAK,KAAK,QAAQ;EAAA;EAC5CC,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,yBAAyB;EAC9BC,IAAI,EAAE,mCAAmC;EACzCC,OAAO,WAAAA,QAACC,GAAG,EAAE;IACT,IAAMY,IAAI,GAAG,IAAIrB,MAAM,CAACmB,UAAU,CAACV,GAAG,CAACW,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;IAC1D,IAAMM,GAAG,GAAGjB,GAAG,CAACkB,OAAO,CAAC,GAAG,CAAC;IAC5B,IAAID,GAAG,KAAK,CAAC,CAAC,EAAE;MACZ,IAAME,CAAC,GAAGnB,GAAG,CAACoB,SAAS,CAACH,GAAG,GAAG,CAAC,CAAC,CAACN,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;MAClD,IAAIQ,CAAC,CAACA,CAAC,CAACE,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EACvBT,IAAI,CAACU,iBAAiB,GAAGH,CAAC,CAACE,MAAM;IACzC;IACA,OAAOT,IAAI;EACf,CAAC;EACDL,SAAS,EAAEf;AACf,CAAC;AAED,SAASwB,KAAK,EAAER,QAAQ,EAAEf,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}