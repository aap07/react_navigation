{"ast":null,"code":"import { getAssetByID } from 'react-native/Libraries/Image/AssetRegistry';\nimport AssetSourceResolver from \"./AssetSourceResolver\";\nvar _customSourceTransformer;\nexport function setCustomSourceTransformer(transformer) {\n  _customSourceTransformer = transformer;\n}\nexport default function resolveAssetSource(source) {\n  if (typeof source === 'object') {\n    return source;\n  }\n  var asset = getAssetByID(source);\n  if (!asset) {\n    return undefined;\n  }\n  var resolver = new AssetSourceResolver('https://expo.dev', null, asset);\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\nObject.defineProperty(resolveAssetSource, 'setCustomSourceTransformer', {\n  get: function get() {\n    return setCustomSourceTransformer;\n  }\n});\nvar pickScale = AssetSourceResolver.pickScale;\nexport { pickScale };","map":{"version":3,"names":["getAssetByID","AssetSourceResolver","_customSourceTransformer","setCustomSourceTransformer","transformer","resolveAssetSource","source","asset","undefined","resolver","defaultAsset","Object","defineProperty","get","pickScale"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/expo-asset/src/resolveAssetSource.web.ts"],"sourcesContent":["import { getAssetByID } from 'react-native/Libraries/Image/AssetRegistry';\n\nimport AssetSourceResolver, { ResolvedAssetSource } from './AssetSourceResolver';\n\nlet _customSourceTransformer;\n\nexport function setCustomSourceTransformer(\n  transformer: (resolver: AssetSourceResolver) => ResolvedAssetSource\n): void {\n  _customSourceTransformer = transformer;\n}\n\n/**\n * `source` is either a number (opaque type returned by require('./foo.png'))\n * or an `ImageSource` like { uri: '<http location || file path>' }\n */\nexport default function resolveAssetSource(source: any): ResolvedAssetSource | undefined {\n  if (typeof source === 'object') {\n    return source;\n  }\n\n  const asset = getAssetByID(source);\n  if (!asset) {\n    return undefined;\n  }\n\n  const resolver = new AssetSourceResolver(\n    // Doesn't matter since this is removed on web\n    'https://expo.dev',\n    null,\n    asset\n  );\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\n\nObject.defineProperty(resolveAssetSource, 'setCustomSourceTransformer', {\n  get() {\n    return setCustomSourceTransformer;\n  },\n});\n\nexport const { pickScale } = AssetSourceResolver;\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,4CAA4C;AAEzE,OAAOC,mBAAmB;AAE1B,IAAIC,wBAAwB;AAE5B,OAAO,SAASC,0BAA0BA,CACxCC,WAAmE,EAC7D;EACNF,wBAAwB,GAAGE,WAAW;AACxC;AAMA,eAAe,SAASC,kBAAkBA,CAACC,MAAW,EAAmC;EACvF,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC9B,OAAOA,MAAM;EACf;EAEA,IAAMC,KAAK,GAAGP,YAAY,CAACM,MAAM,CAAC;EAClC,IAAI,CAACC,KAAK,EAAE;IACV,OAAOC,SAAS;EAClB;EAEA,IAAMC,QAAQ,GAAG,IAAIR,mBAAmB,CAEtC,kBAAkB,EAClB,IAAI,EACJM,KACF,CAAC;EACD,IAAIL,wBAAwB,EAAE;IAC5B,OAAOA,wBAAwB,CAACO,QAAQ,CAAC;EAC3C;EACA,OAAOA,QAAQ,CAACC,YAAY,CAAC,CAAC;AAChC;AAEAC,MAAM,CAACC,cAAc,CAACP,kBAAkB,EAAE,4BAA4B,EAAE;EACtEQ,GAAG,WAAAA,IAAA,EAAG;IACJ,OAAOV,0BAA0B;EACnC;AACF,CAAC,CAAC;AAEK,IAAQW,SAAS,GAAKb,mBAAmB,CAAjCa,SAAS;AAAyB,SAAAA,SAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}