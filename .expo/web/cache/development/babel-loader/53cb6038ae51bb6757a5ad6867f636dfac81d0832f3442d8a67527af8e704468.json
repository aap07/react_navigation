{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _config = require(\"@expo/config\");\nvar _assert = _interopRequireDefault(require(\"assert\"));\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _log = require(\"../../log\");\nvar _fileNotifier = require(\"../../utils/FileNotifier\");\nvar _rudderstackClient = require(\"../../utils/analytics/rudderstackClient\");\nvar _env = require(\"../../utils/env\");\nvar _typeScriptProjectPrerequisite = require(\"../doctor/typescript/TypeScriptProjectPrerequisite\");\nvar _commandsTable = require(\"../interface/commandsTable\");\nvar AndroidDebugBridge = _interopRequireWildcard(require(\"../platforms/android/adb\"));\nvar _resolveOptions = require(\"../resolveOptions\");\nvar _platformBundlers = require(\"./platformBundlers\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar _urlCreator;\nvar debug = require(\"debug\")(\"expo:start:server:devServerManager\");\nvar devServers = [];\nvar BUNDLERS = {\n  webpack: function webpack() {\n    return require(\"./webpack/WebpackBundlerDevServer\").WebpackBundlerDevServer;\n  },\n  metro: function metro() {\n    return require(\"./metro/MetroBundlerDevServer\").MetroBundlerDevServer;\n  }\n};\nvar DevServerManager = function () {\n  function DevServerManager(projectRoot, options) {\n    _classCallCheck(this, DevServerManager);\n    this.projectRoot = projectRoot;\n    this.options = options;\n    this.projectPrerequisites = [];\n    this.notifier = null;\n    this.notifier = this.watchBabelConfig();\n  }\n  _createClass(DevServerManager, [{\n    key: \"watchBabelConfig\",\n    value: function watchBabelConfig() {\n      var notifier = new _fileNotifier.FileNotifier(this.projectRoot, [\"./babel.config.js\", \"./babel.config.json\", \"./.babelrc.json\", \"./.babelrc\", \"./.babelrc.js\"], {\n        additionalWarning: _chalk.default` You may need to clear the bundler cache with the {bold --clear} flag for your changes to take effect.`\n      });\n      notifier.startObserving();\n      return notifier;\n    }\n  }, {\n    key: \"ensureProjectPrerequisiteAsync\",\n    value: function () {\n      var _ensureProjectPrerequisiteAsync = _asyncToGenerator(function* (PrerequisiteClass) {\n        var prerequisite1 = this.projectPrerequisites.find(function (prerequisite) {\n          return prerequisite instanceof PrerequisiteClass;\n        });\n        if (!prerequisite1) {\n          prerequisite1 = new PrerequisiteClass(this.projectRoot);\n          this.projectPrerequisites.push(prerequisite1);\n        }\n        return yield prerequisite1.assertAsync();\n      });\n      function ensureProjectPrerequisiteAsync(_x) {\n        return _ensureProjectPrerequisiteAsync.apply(this, arguments);\n      }\n      return ensureProjectPrerequisiteAsync;\n    }()\n  }, {\n    key: \"broadcastMessage\",\n    value: function broadcastMessage(method, params) {\n      devServers.forEach(function (server) {\n        server.broadcastMessage(method, params);\n      });\n    }\n  }, {\n    key: \"getNativeDevServerPort\",\n    value: function getNativeDevServerPort() {\n      var ref;\n      var server1 = devServers.find(function (server) {\n        return server.isTargetingNative();\n      });\n      var _port;\n      return (_port = (ref = server1 == null ? void 0 : server1.getInstance()) == null ? void 0 : ref.location.port) != null ? _port : null;\n    }\n  }, {\n    key: \"getWebDevServer\",\n    value: function getWebDevServer() {\n      var server2 = devServers.find(function (server) {\n        return server.isTargetingWeb();\n      });\n      return server2 != null ? server2 : null;\n    }\n  }, {\n    key: \"getDefaultDevServer\",\n    value: function getDefaultDevServer() {\n      var server3 = devServers.find(function (server) {\n        return server.isTargetingNative();\n      });\n      var defaultServer = server3 != null ? server3 : devServers[0];\n      (0, _assert).default(defaultServer, \"No dev servers are running\");\n      return defaultServer;\n    }\n  }, {\n    key: \"ensureWebDevServerRunningAsync\",\n    value: function () {\n      var _ensureWebDevServerRunningAsync = _asyncToGenerator(function* () {\n        var _devServers$filter = devServers.filter(function (server) {\n            return server.isTargetingWeb();\n          }),\n          _devServers$filter2 = _slicedToArray(_devServers$filter, 1),\n          server4 = _devServers$filter2[0];\n        if (server4) {\n          return;\n        }\n        var _getConfig = (0, _config).getConfig(this.projectRoot, {\n            skipPlugins: true,\n            skipSDKVersionRequirement: true\n          }),\n          exp = _getConfig.exp;\n        var bundler = (0, _platformBundlers).getPlatformBundlers(exp).web;\n        debug(`Starting ${bundler} dev server for web`);\n        return this.startAsync([{\n          type: bundler,\n          options: this.options\n        }]);\n      });\n      function ensureWebDevServerRunningAsync() {\n        return _ensureWebDevServerRunningAsync.apply(this, arguments);\n      }\n      return ensureWebDevServerRunningAsync;\n    }()\n  }, {\n    key: \"toggleRuntimeMode\",\n    value: function () {\n      var _toggleRuntimeMode = _asyncToGenerator(function* () {\n        var isUsingDevClient = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.options.devClient;\n        var nextMode = isUsingDevClient ? \"--dev-client\" : \"--go\";\n        _log.Log.log((0, _commandsTable).printItem(_chalk.default`Switching to {bold ${nextMode}}`));\n        var nextScheme = yield (0, _resolveOptions).resolveSchemeAsync(this.projectRoot, {\n          devClient: isUsingDevClient\n        });\n        this.options.location.scheme = nextScheme;\n        this.options.devClient = isUsingDevClient;\n        for (var devServer of devServers) {\n          devServer.isDevClient = isUsingDevClient;\n          var urlCreator = devServer.getUrlCreator();\n          var _defaults;\n          (_defaults = (_urlCreator = urlCreator).defaults) != null ? _defaults : _urlCreator.defaults = {};\n          urlCreator.defaults.scheme = nextScheme;\n        }\n        debug(`New runtime options (runtime: ${nextMode}):`, this.options);\n        return true;\n      });\n      function toggleRuntimeMode() {\n        return _toggleRuntimeMode.apply(this, arguments);\n      }\n      return toggleRuntimeMode;\n    }()\n  }, {\n    key: \"startAsync\",\n    value: function () {\n      var _startAsync = _asyncToGenerator(function* (startOptions) {\n        var _getConfig2 = (0, _config).getConfig(this.projectRoot, {\n            skipSDKVersionRequirement: true\n          }),\n          exp = _getConfig2.exp;\n        var _sdkVersion;\n        yield (0, _rudderstackClient).logEventAsync(\"Start Project\", {\n          sdkVersion: (_sdkVersion = exp.sdkVersion) != null ? _sdkVersion : null\n        });\n        var platformBundlers = (0, _platformBundlers).getPlatformBundlers(exp);\n        for (var _ref of startOptions) {\n          var type = _ref.type;\n          var options = _ref.options;\n          var BundlerDevServerClass = yield BUNDLERS[type]();\n          var server = new BundlerDevServerClass(this.projectRoot, platformBundlers, !!(options == null ? void 0 : options.devClient));\n          yield server.startAsync(options != null ? options : this.options);\n          devServers.push(server);\n        }\n        return exp;\n      });\n      function startAsync(_x2) {\n        return _startAsync.apply(this, arguments);\n      }\n      return startAsync;\n    }()\n  }, {\n    key: \"bootstrapTypeScriptAsync\",\n    value: function () {\n      var _bootstrapTypeScriptAsync = _asyncToGenerator(function* () {\n        var typescriptPrerequisite = yield this.ensureProjectPrerequisiteAsync(_typeScriptProjectPrerequisite.TypeScriptProjectPrerequisite);\n        if (_env.env.EXPO_NO_TYPESCRIPT_SETUP) {\n          return;\n        }\n        var server5 = devServers.find(function (server) {\n          return server.name === \"metro\";\n        });\n        if (!server5) {\n          return;\n        }\n        if (!typescriptPrerequisite) {\n          server5.waitForTypeScriptAsync().then(function () {\n            var _ref2 = _asyncToGenerator(function* (success) {\n              if (success) {\n                yield server5.startTypeScriptServices();\n              }\n            });\n            return function (_x3) {\n              return _ref2.apply(this, arguments);\n            };\n          }());\n        } else {\n          server5.startTypeScriptServices();\n        }\n      });\n      function bootstrapTypeScriptAsync() {\n        return _bootstrapTypeScriptAsync.apply(this, arguments);\n      }\n      return bootstrapTypeScriptAsync;\n    }()\n  }, {\n    key: \"watchEnvironmentVariables\",\n    value: function () {\n      var _watchEnvironmentVariables = _asyncToGenerator(function* () {\n        var ref;\n        yield (ref = devServers.find(function (server) {\n          return server.name === \"metro\";\n        })) == null ? void 0 : ref.watchEnvironmentVariables();\n      });\n      function watchEnvironmentVariables() {\n        return _watchEnvironmentVariables.apply(this, arguments);\n      }\n      return watchEnvironmentVariables;\n    }()\n  }, {\n    key: \"stopAsync\",\n    value: function () {\n      var _stopAsync = _asyncToGenerator(function* () {\n        var ref;\n        yield Promise.allSettled([(ref = this.notifier) == null ? void 0 : ref.stopObserving()].concat(_toConsumableArray(devServers.map(function (server) {\n          return server.stopAsync();\n        })), [AndroidDebugBridge.getServer().stopAsync()]));\n      });\n      function stopAsync() {\n        return _stopAsync.apply(this, arguments);\n      }\n      return stopAsync;\n    }()\n  }]);\n  return DevServerManager;\n}();\nexports.DevServerManager = DevServerManager;","map":{"version":3,"names":["_toConsumableArray","require","_slicedToArray","_asyncToGenerator","_classCallCheck","_createClass","_config","_assert","_interopRequireDefault","_chalk","_log","_fileNotifier","_rudderstackClient","_env","_typeScriptProjectPrerequisite","_commandsTable","AndroidDebugBridge","_interopRequireWildcard","_resolveOptions","_platformBundlers","_urlCreator","debug","devServers","BUNDLERS","webpack","WebpackBundlerDevServer","metro","MetroBundlerDevServer","DevServerManager","projectRoot","options","projectPrerequisites","notifier","watchBabelConfig","key","value","FileNotifier","additionalWarning","default","startObserving","_ensureProjectPrerequisiteAsync","PrerequisiteClass","prerequisite1","find","prerequisite","push","assertAsync","ensureProjectPrerequisiteAsync","_x","apply","arguments","broadcastMessage","method","params","forEach","server","getNativeDevServerPort","server1","isTargetingNative","_port","ref","getInstance","location","port","getWebDevServer","server2","isTargetingWeb","getDefaultDevServer","server3","defaultServer","_ensureWebDevServerRunningAsync","_devServers$filter","filter","_devServers$filter2","server4","_getConfig","getConfig","skipPlugins","skipSDKVersionRequirement","exp","bundler","getPlatformBundlers","web","startAsync","type","ensureWebDevServerRunningAsync","_toggleRuntimeMode","isUsingDevClient","length","undefined","devClient","nextMode","Log","log","printItem","nextScheme","resolveSchemeAsync","scheme","devServer","isDevClient","urlCreator","getUrlCreator","_defaults","defaults","toggleRuntimeMode","_startAsync","startOptions","_getConfig2","_sdkVersion","logEventAsync","sdkVersion","platformBundlers","_ref","BundlerDevServerClass","_x2","_bootstrapTypeScriptAsync","typescriptPrerequisite","TypeScriptProjectPrerequisite","env","EXPO_NO_TYPESCRIPT_SETUP","server5","name","waitForTypeScriptAsync","then","_ref2","success","startTypeScriptServices","_x3","bootstrapTypeScriptAsync","_watchEnvironmentVariables","watchEnvironmentVariables","_stopAsync","Promise","allSettled","stopObserving","concat","map","stopAsync","getServer"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\DevServerManager.ts"],"sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\nimport assert from 'assert';\nimport chalk from 'chalk';\n\nimport { Log } from '../../log';\nimport { FileNotifier } from '../../utils/FileNotifier';\nimport { logEventAsync } from '../../utils/analytics/rudderstackClient';\nimport { env } from '../../utils/env';\nimport { ProjectPrerequisite } from '../doctor/Prerequisite';\nimport { TypeScriptProjectPrerequisite } from '../doctor/typescript/TypeScriptProjectPrerequisite';\nimport { printItem } from '../interface/commandsTable';\nimport * as AndroidDebugBridge from '../platforms/android/adb';\nimport { resolveSchemeAsync } from '../resolveOptions';\nimport { BundlerDevServer, BundlerStartOptions } from './BundlerDevServer';\nimport { getPlatformBundlers } from './platformBundlers';\n\nconst debug = require('debug')('expo:start:server:devServerManager') as typeof console.log;\n\nexport type MultiBundlerStartOptions = {\n  type: keyof typeof BUNDLERS;\n  options?: BundlerStartOptions;\n}[];\n\nconst devServers: BundlerDevServer[] = [];\n\nconst BUNDLERS = {\n  webpack: () =>\n    require('./webpack/WebpackBundlerDevServer')\n      .WebpackBundlerDevServer as typeof import('./webpack/WebpackBundlerDevServer').WebpackBundlerDevServer,\n  metro: () =>\n    require('./metro/MetroBundlerDevServer')\n      .MetroBundlerDevServer as typeof import('./metro/MetroBundlerDevServer').MetroBundlerDevServer,\n};\n\n/** Manages interacting with multiple dev servers. */\nexport class DevServerManager {\n  private projectPrerequisites: ProjectPrerequisite<any, void>[] = [];\n\n  private notifier: FileNotifier | null = null;\n\n  constructor(\n    public projectRoot: string,\n    /** Keep track of the original CLI options for bundlers that are started interactively. */\n    public options: BundlerStartOptions\n  ) {\n    this.notifier = this.watchBabelConfig();\n  }\n\n  private watchBabelConfig() {\n    const notifier = new FileNotifier(\n      this.projectRoot,\n      [\n        './babel.config.js',\n        './babel.config.json',\n        './.babelrc.json',\n        './.babelrc',\n        './.babelrc.js',\n      ],\n      {\n        additionalWarning: chalk` You may need to clear the bundler cache with the {bold --clear} flag for your changes to take effect.`,\n      }\n    );\n\n    notifier.startObserving();\n\n    return notifier;\n  }\n\n  /** Lazily load and assert a project-level prerequisite. */\n  async ensureProjectPrerequisiteAsync(PrerequisiteClass: typeof ProjectPrerequisite<any, any>) {\n    let prerequisite = this.projectPrerequisites.find(\n      (prerequisite) => prerequisite instanceof PrerequisiteClass\n    );\n    if (!prerequisite) {\n      prerequisite = new PrerequisiteClass(this.projectRoot);\n      this.projectPrerequisites.push(prerequisite);\n    }\n    return await prerequisite.assertAsync();\n  }\n\n  /**\n   * Sends a message over web sockets to all connected devices,\n   * does nothing when the dev server is not running.\n   *\n   * @param method name of the command. In RN projects `reload`, and `devMenu` are available. In Expo Go, `sendDevCommand` is available.\n   * @param params extra event info to send over the socket.\n   */\n  broadcastMessage(method: 'reload' | 'devMenu' | 'sendDevCommand', params?: Record<string, any>) {\n    devServers.forEach((server) => {\n      server.broadcastMessage(method, params);\n    });\n  }\n\n  /** Get the port for the dev server (either Webpack or Metro) that is hosting code for React Native runtimes. */\n  getNativeDevServerPort() {\n    const server = devServers.find((server) => server.isTargetingNative());\n    return server?.getInstance()?.location.port ?? null;\n  }\n\n  /** Get the first server that targets web. */\n  getWebDevServer() {\n    const server = devServers.find((server) => server.isTargetingWeb());\n    return server ?? null;\n  }\n\n  getDefaultDevServer(): BundlerDevServer {\n    // Return the first native dev server otherwise return the first dev server.\n    const server = devServers.find((server) => server.isTargetingNative());\n    const defaultServer = server ?? devServers[0];\n    assert(defaultServer, 'No dev servers are running');\n    return defaultServer;\n  }\n\n  async ensureWebDevServerRunningAsync() {\n    const [server] = devServers.filter((server) => server.isTargetingWeb());\n    if (server) {\n      return;\n    }\n    const { exp } = getConfig(this.projectRoot, {\n      skipPlugins: true,\n      skipSDKVersionRequirement: true,\n    });\n    const bundler = getPlatformBundlers(exp).web;\n    debug(`Starting ${bundler} dev server for web`);\n    return this.startAsync([\n      {\n        type: bundler,\n        options: this.options,\n      },\n    ]);\n  }\n\n  /** Switch between Expo Go and Expo Dev Clients. */\n  async toggleRuntimeMode(isUsingDevClient: boolean = !this.options.devClient): Promise<boolean> {\n    const nextMode = isUsingDevClient ? '--dev-client' : '--go';\n    Log.log(printItem(chalk`Switching to {bold ${nextMode}}`));\n\n    const nextScheme = await resolveSchemeAsync(this.projectRoot, {\n      devClient: isUsingDevClient,\n      // NOTE: The custom `--scheme` argument is lost from this point on.\n    });\n\n    this.options.location.scheme = nextScheme;\n    this.options.devClient = isUsingDevClient;\n    for (const devServer of devServers) {\n      devServer.isDevClient = isUsingDevClient;\n      const urlCreator = devServer.getUrlCreator();\n      urlCreator.defaults ??= {};\n      urlCreator.defaults.scheme = nextScheme;\n    }\n\n    debug(`New runtime options (runtime: ${nextMode}):`, this.options);\n    return true;\n  }\n\n  /** Start all dev servers. */\n  async startAsync(startOptions: MultiBundlerStartOptions): Promise<ExpoConfig> {\n    const { exp } = getConfig(this.projectRoot, { skipSDKVersionRequirement: true });\n\n    await logEventAsync('Start Project', {\n      sdkVersion: exp.sdkVersion ?? null,\n    });\n\n    const platformBundlers = getPlatformBundlers(exp);\n\n    // Start all dev servers...\n    for (const { type, options } of startOptions) {\n      const BundlerDevServerClass = await BUNDLERS[type]();\n      const server = new BundlerDevServerClass(\n        this.projectRoot,\n        platformBundlers,\n        !!options?.devClient\n      );\n      await server.startAsync(options ?? this.options);\n      devServers.push(server);\n    }\n\n    return exp;\n  }\n\n  async bootstrapTypeScriptAsync() {\n    const typescriptPrerequisite = await this.ensureProjectPrerequisiteAsync(\n      TypeScriptProjectPrerequisite\n    );\n\n    if (env.EXPO_NO_TYPESCRIPT_SETUP) {\n      return;\n    }\n\n    // Optionally, wait for the user to add TypeScript during the\n    // development cycle.\n    const server = devServers.find((server) => server.name === 'metro');\n    if (!server) {\n      return;\n    }\n\n    if (!typescriptPrerequisite) {\n      server.waitForTypeScriptAsync().then(async (success) => {\n        if (success) {\n          await server.startTypeScriptServices();\n        }\n      });\n    } else {\n      server.startTypeScriptServices();\n    }\n  }\n\n  async watchEnvironmentVariables() {\n    await devServers.find((server) => server.name === 'metro')?.watchEnvironmentVariables();\n  }\n\n  /** Stop all servers including ADB. */\n  async stopAsync(): Promise<void> {\n    await Promise.allSettled([\n      this.notifier?.stopObserving(),\n      // Stop all dev servers\n      ...devServers.map((server) => server.stopAsync()),\n      // Stop ADB\n      AndroidDebugBridge.getServer().stopAsync(),\n    ]);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}