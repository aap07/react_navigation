{"ast":null,"code":"#!/usr/bin/env node\n\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.expoExport = void 0;\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _args = require(\"../utils/args\");\nvar _errors = require(\"../utils/errors\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar expoExport = function () {\n  var _ref = _asyncToGenerator(function* (argv) {\n    var args = (0, _args).assertArgs({\n      \"--help\": Boolean,\n      \"--clear\": Boolean,\n      \"--dump-assetmap\": Boolean,\n      \"--dev\": Boolean,\n      \"--dump-sourcemap\": Boolean,\n      \"--max-workers\": Number,\n      \"--output-dir\": String,\n      \"--platform\": [String],\n      \"--no-minify\": Boolean,\n      \"--experimental-bundle\": Boolean,\n      \"-h\": \"--help\",\n      \"-c\": \"--clear\",\n      \"-p\": \"--platform\",\n      \"--reset-cache\": \"--clear\"\n    }, argv);\n    if (args[\"--help\"]) {\n      (0, _args).printHelp(`Export the static files of the app for hosting it on a web server`, _chalk.default`npx expo export {dim <dir>}`, [_chalk.default`<dir>                      Directory of the Expo project. {dim Default: Current working directory}`, `--dev                      Configure static files for developing locally using a non-https server`, _chalk.default`--output-dir <dir>         The directory to export the static files to. {dim Default: dist}`, `--max-workers <number>     Maximum number of tasks to allow the bundler to spawn`, `--dump-assetmap            Dump the asset map for further processing`, `--dump-sourcemap           Dump the source map for debugging the JS bundle`, _chalk.default`-p, --platform <platform>  Options: android, ios, web, all. {dim Default: all}`, `--no-minify                Prevent minifying source`, `-c, --clear                Clear the bundler cache`, `-h, --help                 Usage info`].join(\"\\n\"));\n    }\n    var projectRoot = (0, _args).getProjectRoot(args);\n    var _yield$Promise$resolv = yield Promise.resolve().then(function () {\n        return _interopRequireWildcard(require(\"./resolveOptions\"));\n      }),\n      resolveOptionsAsync = _yield$Promise$resolv.resolveOptionsAsync;\n    var options = yield resolveOptionsAsync(projectRoot, args).catch(_errors.logCmdError);\n    var _yield$Promise$resolv2 = yield Promise.resolve().then(function () {\n        return _interopRequireWildcard(require(\"./exportAsync\"));\n      }),\n      exportAsync = _yield$Promise$resolv2.exportAsync;\n    return exportAsync(projectRoot, options).catch(_errors.logCmdError);\n  });\n  return function expoExport(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexports.expoExport = expoExport;","map":{"version":3,"names":["_chalk","_interopRequireDefault","require","_args","_errors","expoExport","_ref","_asyncToGenerator","argv","args","assertArgs","Boolean","Number","String","printHelp","default","join","projectRoot","getProjectRoot","_yield$Promise$resolv","Promise","resolve","then","resolveOptionsAsync","options","catch","logCmdError","_yield$Promise$resolv2","exportAsync","_x","apply","arguments"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\export\\index.ts"],"sourcesContent":["#!/usr/bin/env node\nimport chalk from 'chalk';\n\nimport { Command } from '../../bin/cli';\nimport { assertArgs, getProjectRoot, printHelp } from '../utils/args';\nimport { logCmdError } from '../utils/errors';\n\nexport const expoExport: Command = async (argv) => {\n  const args = assertArgs(\n    {\n      // Types\n      '--help': Boolean,\n      '--clear': Boolean,\n      '--dump-assetmap': Boolean,\n      '--dev': Boolean,\n      '--dump-sourcemap': Boolean,\n      '--max-workers': Number,\n      '--output-dir': String,\n      '--platform': [String],\n      '--no-minify': Boolean,\n\n      // Hack: This is added because EAS CLI always includes the flag.\n      // If supplied, we'll do nothing with the value, but at least the process won't crash.\n      // Note that we also don't show this value in the `--help` prompt since we don't want people to use it.\n      '--experimental-bundle': Boolean,\n\n      // Aliases\n      '-h': '--help',\n      // '-s': '--dump-sourcemap',\n      // '-d': '--dump-assetmap',\n      '-c': '--clear',\n      '-p': '--platform',\n      // Interop with Metro docs and RedBox errors.\n      '--reset-cache': '--clear',\n    },\n    argv\n  );\n\n  if (args['--help']) {\n    printHelp(\n      `Export the static files of the app for hosting it on a web server`,\n      chalk`npx expo export {dim <dir>}`,\n      [\n        chalk`<dir>                      Directory of the Expo project. {dim Default: Current working directory}`,\n        `--dev                      Configure static files for developing locally using a non-https server`,\n        chalk`--output-dir <dir>         The directory to export the static files to. {dim Default: dist}`,\n        `--max-workers <number>     Maximum number of tasks to allow the bundler to spawn`,\n        `--dump-assetmap            Dump the asset map for further processing`,\n        `--dump-sourcemap           Dump the source map for debugging the JS bundle`,\n        chalk`-p, --platform <platform>  Options: android, ios, web, all. {dim Default: all}`,\n        `--no-minify                Prevent minifying source`,\n        `-c, --clear                Clear the bundler cache`,\n        `-h, --help                 Usage info`,\n      ].join('\\n')\n    );\n  }\n\n  const projectRoot = getProjectRoot(args);\n  const { resolveOptionsAsync } = await import('./resolveOptions');\n  const options = await resolveOptionsAsync(projectRoot, args).catch(logCmdError);\n\n  const { exportAsync } = await import('./exportAsync');\n  return exportAsync(projectRoot, options).catch(logCmdError);\n};\n"],"mappings":"AAAA;;;;;;;;AACkB,IAAAA,MAAO,GAAAC,sBAAA,CAAAC,OAAA,CAAP,OAAO;AAG6B,IAAAC,KAAe,GAAAD,OAAA;AACzC,IAAAE,OAAiB,GAAAF,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEtC,IAAMG,UAAU;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAY,WAAOC,IAAI,EAAK;IACjD,IAAMC,IAAI,GAAG,IAAAN,KAAU,EA4BtBO,UA5BsB,CACrB;MAEE,QAAQ,EAAEC,OAAO;MACjB,SAAS,EAAEA,OAAO;MAClB,iBAAiB,EAAEA,OAAO;MAC1B,OAAO,EAAEA,OAAO;MAChB,kBAAkB,EAAEA,OAAO;MAC3B,eAAe,EAAEC,MAAM;MACvB,cAAc,EAAEC,MAAM;MACtB,YAAY,EAAE,CAACA,MAAM,CAAC;MACtB,aAAa,EAAEF,OAAO;MAKtB,uBAAuB,EAAEA,OAAO;MAGhC,IAAI,EAAE,QAAQ;MAGd,IAAI,EAAE,SAAS;MACf,IAAI,EAAE,YAAY;MAElB,eAAe,EAAE;KAClB,EACDH,IAAI,CACL;IAED,IAAIC,IAAI,CAAC,QAAQ,CAAC,EAAE;MAClB,IAAAN,KAAS,EAeRW,SAfQ,CACN,mEAAkE,EACnEd,MAAK,CAAAe,OAAC,6BAA4B,EAClC,CACEf,MAAK,CAAAe,OAAC,oGAAmG,EACxG,mGAAkG,EACnGf,MAAK,CAAAe,OAAC,6FAA4F,EACjG,kFAAiF,EACjF,sEAAqE,EACrE,4EAA2E,EAC5Ef,MAAK,CAAAe,OAAC,gFAA+E,EACpF,qDAAoD,EACpD,oDAAmD,EACnD,uCAAsC,CACxC,CAACC,IAAI,CAAC,IAAI,CAAC,CACb;;IAGH,IAAMC,WAAW,GAAG,IAAAd,KAAc,EAAMe,cAAN,CAACT,IAAI,CAAC;IACxC,IAAAU,qBAAA,SAAsCC,OAAA,CAAAC,OAAA,GAAAC,IAAA;iEAAyB;QAAC;MAAxDC,mBAAmB,GAAAJ,qBAAA,CAAnBI,mBAAmB;IAC3B,IAAMC,OAAO,SAASD,mBAAmB,CAACN,WAAW,EAAER,IAAI,CAAC,CAACgB,KAAK,CAACrB,OAAW,CAAAsB,WAAA,CAAC;IAE/E,IAAAC,sBAAA,SAA8BP,OAAA,CAAAC,OAAA,GAAAC,IAAA;8DAAsB;QAAC;MAA7CM,WAAW,GAAAD,sBAAA,CAAXC,WAAW;IACnB,OAAOA,WAAW,CAACX,WAAW,EAAEO,OAAO,CAAC,CAACC,KAAK,CAACrB,OAAW,CAAAsB,WAAA,CAAC;GAC5D;EAAA,gBAxDYrB,UAAUA,CAAAwB,EAAA;IAAA,OAAAvB,IAAA,CAAAwB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAwDtB;QAxDY1B,UAAU,GAAVA,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}