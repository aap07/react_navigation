{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@react-navigation\\native\\src\\__mocks__\\window.tsx"],"sourcesContent":["const location = new URL('', 'http://example.com');\n\nlet listeners: (() => void)[] = [];\nlet entries = [{ state: null, href: location.href }];\nlet index = 0;\n\nlet currentState: any = null;\n\nconst history = {\n  get state() {\n    return currentState;\n  },\n\n  pushState(state: any, _: string, path: string) {\n    Object.assign(location, new URL(path, location.origin));\n\n    currentState = state;\n    entries = entries.slice(0, index + 1);\n    entries.push({ state, href: location.href });\n    index = entries.length - 1;\n  },\n\n  replaceState(state: any, _: string, path: string) {\n    Object.assign(location, new URL(path, location.origin));\n\n    currentState = state;\n    entries[index] = { state, href: location.href };\n  },\n\n  go(n: number) {\n    setTimeout(() => {\n      if (\n        (n > 0 && n < entries.length - index) ||\n        (n < 0 && Math.abs(n) <= index)\n      ) {\n        index += n;\n        const entry = entries[index];\n        Object.assign(location, new URL(entry.href));\n        currentState = entry.state;\n        listeners.forEach((cb) => cb());\n      }\n    }, 0);\n  },\n\n  back() {\n    this.go(-1);\n  },\n\n  forward() {\n    this.go(1);\n  },\n};\n\nconst addEventListener = (type: 'popstate', listener: () => void) => {\n  if (type === 'popstate') {\n    listeners.push(listener);\n  }\n};\n\nconst removeEventListener = (type: 'popstate', listener: () => void) => {\n  if (type === 'popstate') {\n    listeners = listeners.filter((cb) => cb !== listener);\n  }\n};\n\nconst window = {\n  document: { title: '' },\n  location,\n  history,\n  addEventListener,\n  removeEventListener,\n  get window() {\n    return window;\n  },\n};\n\nexport default window;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}