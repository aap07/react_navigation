{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _excluded = [\"mods\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.compileModsAsync = compileModsAsync;\nexports.evalModsAsync = evalModsAsync;\nexports.withDefaultBaseMods = withDefaultBaseMods;\nexports.withIntrospectionBaseMods = withIntrospectionBaseMods;\nfunction _debug() {\n  var data = _interopRequireDefault(require(\"debug\"));\n  _debug = function _debug() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _Xcodeproj() {\n  var data = require(\"../ios/utils/Xcodeproj\");\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n  return data;\n}\nfunction _errors() {\n  var data = require(\"../utils/errors\");\n  _errors = function _errors() {\n    return data;\n  };\n  return data;\n}\nfunction Warnings() {\n  var data = _interopRequireWildcard(require(\"../utils/warnings\"));\n  Warnings = function Warnings() {\n    return data;\n  };\n  return data;\n}\nfunction _createBaseMod() {\n  var data = require(\"./createBaseMod\");\n  _createBaseMod = function _createBaseMod() {\n    return data;\n  };\n  return data;\n}\nfunction _withAndroidBaseMods() {\n  var data = require(\"./withAndroidBaseMods\");\n  _withAndroidBaseMods = function _withAndroidBaseMods() {\n    return data;\n  };\n  return data;\n}\nfunction _withIosBaseMods() {\n  var data = require(\"./withIosBaseMods\");\n  _withIosBaseMods = function _withIosBaseMods() {\n    return data;\n  };\n  return data;\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = (0, _debug().default)('expo:config-plugins:mod-compiler');\nfunction withDefaultBaseMods(config) {\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  config = (0, _withIosBaseMods().withIosBaseMods)(config, props);\n  config = (0, _withAndroidBaseMods().withAndroidBaseMods)(config, props);\n  return config;\n}\nfunction withIntrospectionBaseMods(config) {\n  var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  config = (0, _withIosBaseMods().withIosBaseMods)(config, _objectSpread({\n    saveToInternal: true,\n    skipEmptyMod: false\n  }, props));\n  config = (0, _withAndroidBaseMods().withAndroidBaseMods)(config, _objectSpread({\n    saveToInternal: true,\n    skipEmptyMod: false\n  }, props));\n  if (config.mods) {\n    for (var platform of Object.keys(config.mods)) {\n      for (var key of Object.keys(config.mods[platform] || {})) {\n        var _config$mods$platform, _config$mods$platform2;\n        if (!((_config$mods$platform = config.mods[platform]) !== null && _config$mods$platform !== void 0 && (_config$mods$platform2 = _config$mods$platform[key]) !== null && _config$mods$platform2 !== void 0 && _config$mods$platform2.isIntrospective)) {\n          var _config$mods$platform3;\n          debug(`removing non-idempotent mod: ${platform}.${key}`);\n          (_config$mods$platform3 = config.mods[platform]) === null || _config$mods$platform3 === void 0 ? true : delete _config$mods$platform3[key];\n        }\n      }\n    }\n  }\n  return config;\n}\nfunction compileModsAsync(_x, _x2) {\n  return _compileModsAsync.apply(this, arguments);\n}\nfunction _compileModsAsync() {\n  _compileModsAsync = _asyncToGenerator(function* (config, props) {\n    if (props.introspect === true) {\n      config = withIntrospectionBaseMods(config);\n    } else {\n      config = withDefaultBaseMods(config);\n    }\n    return yield evalModsAsync(config, props);\n  });\n  return _compileModsAsync.apply(this, arguments);\n}\nfunction sortMods(commands, order) {\n  var allKeys = commands.map(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 1),\n      key = _ref2[0];\n    return key;\n  });\n  var completeOrder = _toConsumableArray(new Set([].concat(_toConsumableArray(order), _toConsumableArray(allKeys))));\n  var sorted = [];\n  var _loop = function _loop() {\n    var group = completeOrder.shift();\n    var commandSet = commands.find(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 1),\n        key = _ref4[0];\n      return key === group;\n    });\n    if (commandSet) {\n      sorted.push(commandSet);\n    }\n  };\n  while (completeOrder.length) {\n    _loop();\n  }\n  return sorted;\n}\nfunction getRawClone(_ref5) {\n  var mods = _ref5.mods,\n    config = _objectWithoutProperties(_ref5, _excluded);\n  return Object.freeze(JSON.parse(JSON.stringify(config)));\n}\nvar orders = {\n  ios: ['dangerous', 'xcodeproj']\n};\nfunction evalModsAsync(_x3, _x4) {\n  return _evalModsAsync.apply(this, arguments);\n}\nfunction _evalModsAsync() {\n  _evalModsAsync = _asyncToGenerator(function* (config, _ref6) {\n    var projectRoot = _ref6.projectRoot,\n      introspect = _ref6.introspect,\n      platforms = _ref6.platforms,\n      assertMissingModProviders = _ref6.assertMissingModProviders,\n      _ref6$ignoreExistingN = _ref6.ignoreExistingNativeFiles,\n      ignoreExistingNativeFiles = _ref6$ignoreExistingN === void 0 ? false : _ref6$ignoreExistingN;\n    var modRawConfig = getRawClone(config);\n    for (var _ref7 of Object.entries((_config$mods = config.mods) !== null && _config$mods !== void 0 ? _config$mods : {})) {\n      var _ref8 = _slicedToArray(_ref7, 2);\n      var platformName = _ref8[0];\n      var platform = _ref8[1];\n      var _config$mods;\n      if (platforms && !platforms.includes(platformName)) {\n        debug(`skip platform: ${platformName}`);\n        continue;\n      }\n      var entries = Object.entries(platform);\n      if (entries.length) {\n        var _orders$platformName;\n        entries = sortMods(entries, (_orders$platformName = orders[platformName]) !== null && _orders$platformName !== void 0 ? _orders$platformName : ['dangerous']);\n        debug(`run in order: ${entries.map(function (_ref9) {\n          var _ref10 = _slicedToArray(_ref9, 1),\n            name = _ref10[0];\n          return name;\n        }).join(', ')}`);\n        var platformProjectRoot = _path().default.join(projectRoot, platformName);\n        var projectName = platformName === 'ios' ? (0, _Xcodeproj().getHackyProjectName)(projectRoot, config) : undefined;\n        for (var _ref11 of entries) {\n          var _ref12 = _slicedToArray(_ref11, 2);\n          var modName = _ref12[0];\n          var mod = _ref12[1];\n          var modRequest = {\n            projectRoot: projectRoot,\n            projectName: projectName,\n            platformProjectRoot: platformProjectRoot,\n            platform: platformName,\n            modName: modName,\n            introspect: !!introspect,\n            ignoreExistingNativeFiles: ignoreExistingNativeFiles\n          };\n          if (!mod.isProvider) {\n            var errorMessage = `Initial base modifier for \"${platformName}.${modName}\" is not a provider and therefore will not provide modResults to child mods`;\n            if (assertMissingModProviders !== false) {\n              throw new (_errors().PluginError)(errorMessage, 'MISSING_PROVIDER');\n            } else {\n              Warnings().addWarningForPlatform(platformName, `${platformName}.${modName}`, `Skipping: Initial base modifier for \"${platformName}.${modName}\" is not a provider and therefore will not provide modResults to child mods. This may be due to an outdated version of Expo CLI.`);\n              continue;\n            }\n          }\n          var results = yield mod(_objectSpread(_objectSpread({}, config), {}, {\n            modResults: null,\n            modRequest: modRequest,\n            modRawConfig: modRawConfig\n          }));\n          config = (0, _createBaseMod().assertModResults)(results, platformName, modName);\n          delete config.modResults;\n          delete config.modRequest;\n          delete config.modRawConfig;\n        }\n      }\n    }\n    return config;\n  });\n  return _evalModsAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_debug","data","_interopRequireDefault","require","_path","_Xcodeproj","_errors","Warnings","_interopRequireWildcard","_createBaseMod","_withAndroidBaseMods","_withIosBaseMods","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","debug","withDefaultBaseMods","config","props","arguments","length","undefined","withIosBaseMods","withAndroidBaseMods","withIntrospectionBaseMods","_objectSpread","saveToInternal","skipEmptyMod","mods","platform","keys","_config$mods$platform","_config$mods$platform2","isIntrospective","_config$mods$platform3","compileModsAsync","_x","_x2","_compileModsAsync","apply","_asyncToGenerator","introspect","evalModsAsync","sortMods","commands","order","allKeys","map","_ref","_ref2","_slicedToArray","completeOrder","_toConsumableArray","Set","concat","sorted","_loop","group","shift","commandSet","find","_ref3","_ref4","push","getRawClone","_ref5","_objectWithoutProperties","_excluded","freeze","JSON","parse","stringify","orders","ios","_x3","_x4","_evalModsAsync","_ref6","projectRoot","platforms","assertMissingModProviders","_ref6$ignoreExistingN","ignoreExistingNativeFiles","modRawConfig","_ref7","entries","_config$mods","_ref8","platformName","includes","_orders$platformName","_ref9","_ref10","name","join","platformProjectRoot","projectName","getHackyProjectName","_ref11","_ref12","modName","mod","modRequest","isProvider","errorMessage","PluginError","addWarningForPlatform","results","modResults","assertModResults"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\plugins\\mod-compiler.ts"],"sourcesContent":["import Debug from 'debug';\nimport path from 'path';\n\nimport { ExportedConfig, Mod, ModConfig, ModPlatform } from '../Plugin.types';\nimport { getHackyProjectName } from '../ios/utils/Xcodeproj';\nimport { PluginError } from '../utils/errors';\nimport * as Warnings from '../utils/warnings';\nimport { assertModResults, ForwardedBaseModOptions } from './createBaseMod';\nimport { withAndroidBaseMods } from './withAndroidBaseMods';\nimport { withIosBaseMods } from './withIosBaseMods';\n\nconst debug = Debug('expo:config-plugins:mod-compiler');\n\nexport function withDefaultBaseMods(\n  config: ExportedConfig,\n  props: ForwardedBaseModOptions = {}\n): ExportedConfig {\n  config = withIosBaseMods(config, props);\n  config = withAndroidBaseMods(config, props);\n  return config;\n}\n\n/**\n * Get a prebuild config that safely evaluates mods without persisting any changes to the file system.\n * Currently this only supports infoPlist, entitlements, androidManifest, strings, gradleProperties, and expoPlist mods.\n * This plugin should be evaluated directly:\n */\nexport function withIntrospectionBaseMods(\n  config: ExportedConfig,\n  props: ForwardedBaseModOptions = {}\n): ExportedConfig {\n  config = withIosBaseMods(config, {\n    saveToInternal: true,\n    // This writing optimization can be skipped since we never write in introspection mode.\n    // Including empty mods will ensure that all mods get introspected.\n    skipEmptyMod: false,\n    ...props,\n  });\n  config = withAndroidBaseMods(config, {\n    saveToInternal: true,\n    skipEmptyMod: false,\n    ...props,\n  });\n\n  if (config.mods) {\n    // Remove all mods that don't have an introspection base mod, for instance `dangerous` mods.\n    for (const platform of Object.keys(config.mods) as ModPlatform[]) {\n      // const platformPreserve = preserve[platform];\n      for (const key of Object.keys(config.mods[platform] || {})) {\n        // @ts-ignore\n        if (!config.mods[platform]?.[key]?.isIntrospective) {\n          debug(`removing non-idempotent mod: ${platform}.${key}`);\n          // @ts-ignore\n          delete config.mods[platform]?.[key];\n        }\n      }\n    }\n  }\n\n  return config;\n}\n\n/**\n *\n * @param projectRoot\n * @param config\n */\nexport async function compileModsAsync(\n  config: ExportedConfig,\n  props: {\n    projectRoot: string;\n    platforms?: ModPlatform[];\n    introspect?: boolean;\n    assertMissingModProviders?: boolean;\n    ignoreExistingNativeFiles?: boolean;\n  }\n): Promise<ExportedConfig> {\n  if (props.introspect === true) {\n    config = withIntrospectionBaseMods(config);\n  } else {\n    config = withDefaultBaseMods(config);\n  }\n  return await evalModsAsync(config, props);\n}\n\nfunction sortMods(commands: [string, any][], order: string[]): [string, any][] {\n  const allKeys = commands.map(([key]) => key);\n  const completeOrder = [...new Set([...order, ...allKeys])];\n  const sorted: [string, any][] = [];\n  while (completeOrder.length) {\n    const group = completeOrder.shift()!;\n    const commandSet = commands.find(([key]) => key === group);\n    if (commandSet) {\n      sorted.push(commandSet);\n    }\n  }\n  return sorted;\n}\n\nfunction getRawClone({ mods, ...config }: ExportedConfig) {\n  // Configs should be fully serializable, so we can clone them without worrying about\n  // the mods.\n  return Object.freeze(JSON.parse(JSON.stringify(config)));\n}\n\nconst orders: Record<string, string[]> = {\n  ios: [\n    // dangerous runs first\n    'dangerous',\n    // run the XcodeProject mod second because many plugins attempt to read from it.\n    'xcodeproj',\n  ],\n};\n/**\n * A generic plugin compiler.\n *\n * @param config\n */\nexport async function evalModsAsync(\n  config: ExportedConfig,\n  {\n    projectRoot,\n    introspect,\n    platforms,\n    assertMissingModProviders,\n    ignoreExistingNativeFiles = false,\n  }: {\n    projectRoot: string;\n    introspect?: boolean;\n    platforms?: ModPlatform[];\n    /**\n     * Throw errors when mods are missing providers.\n     * @default true\n     */\n    assertMissingModProviders?: boolean;\n    /** Ignore any existing native files, only use the generated prebuild results. */\n    ignoreExistingNativeFiles?: boolean;\n  }\n): Promise<ExportedConfig> {\n  const modRawConfig = getRawClone(config);\n  for (const [platformName, platform] of Object.entries(config.mods ?? ({} as ModConfig))) {\n    if (platforms && !platforms.includes(platformName as any)) {\n      debug(`skip platform: ${platformName}`);\n      continue;\n    }\n\n    let entries = Object.entries(platform);\n    if (entries.length) {\n      // Move dangerous item to the first position if it exists, this ensures that all dangerous code runs first.\n      entries = sortMods(entries, orders[platformName] ?? ['dangerous']);\n      debug(`run in order: ${entries.map(([name]) => name).join(', ')}`);\n      const platformProjectRoot = path.join(projectRoot, platformName);\n      const projectName =\n        platformName === 'ios' ? getHackyProjectName(projectRoot, config) : undefined;\n\n      for (const [modName, mod] of entries) {\n        const modRequest = {\n          projectRoot,\n          projectName,\n          platformProjectRoot,\n          platform: platformName as ModPlatform,\n          modName,\n          introspect: !!introspect,\n          ignoreExistingNativeFiles,\n        };\n\n        if (!(mod as Mod).isProvider) {\n          // In strict mode, throw an error.\n          const errorMessage = `Initial base modifier for \"${platformName}.${modName}\" is not a provider and therefore will not provide modResults to child mods`;\n          if (assertMissingModProviders !== false) {\n            throw new PluginError(errorMessage, 'MISSING_PROVIDER');\n          } else {\n            Warnings.addWarningForPlatform(\n              platformName as ModPlatform,\n              `${platformName}.${modName}`,\n              `Skipping: Initial base modifier for \"${platformName}.${modName}\" is not a provider and therefore will not provide modResults to child mods. This may be due to an outdated version of Expo CLI.`\n            );\n            // In loose mode, just skip the mod entirely.\n            continue;\n          }\n        }\n\n        const results = await (mod as Mod)({\n          ...config,\n          modResults: null,\n          modRequest,\n          modRawConfig,\n        });\n\n        // Sanity check to help locate non compliant mods.\n        config = assertModResults(results, platformName, modName);\n        // @ts-ignore: `modResults` is added for modifications\n        delete config.modResults;\n        // @ts-ignore: `modRequest` is added for modifications\n        delete config.modRequest;\n        // @ts-ignore: `modRawConfig` is added for modifications\n        delete config.modRawConfig;\n      }\n    }\n  }\n\n  return config;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}