{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/webpack-config/webpack/env/paths.d.ts"],"sourcesContent":["import { Environment, FilePaths, InputEnvironment } from '../types';\n/**\n * Sync method for getting default paths used throughout the Webpack config.\n * This is useful for Next.js which doesn't support async Webpack configs.\n *\n * @param projectRoot\n * @category env\n */\nexport declare function getPaths(projectRoot: string, env?: Pick<InputEnvironment, 'platform'>): FilePaths;\n/**\n * Async method for getting default paths used throughout the Webpack config.\n *\n * @param projectRoot\n * @category env\n */\nexport declare function getPathsAsync(projectRoot: string, env?: Pick<InputEnvironment, 'platform'>): Promise<FilePaths>;\n/**\n * Get paths dictating where the app is served regardless of the current Webpack mode.\n *\n * @param projectRoot\n * @category env\n */\nexport declare function getServedPath(projectRoot: string): string;\n/**\n * Get paths dictating where the app is served. In development mode this returns default values.\n *\n * @param env\n * @category env\n */\nexport declare function getPublicPaths(env: Pick<Environment, 'mode' | 'projectRoot'>): {\n    /**\n     * Webpack uses `publicPath` to determine where the app is being served from.\n     * It requires a trailing slash, or the file assets will get an incorrect path.\n     * In development, we always serve from the root. This makes config easier.\n     */\n    publicPath: string;\n    /**\n     * `publicUrl` is just like `publicPath`, but we will provide it to our app\n     * as %WEB_PUBLIC_URL% in `index.html` and `process.env.WEB_PUBLIC_URL` in JavaScript.\n     * Omit trailing slash as %WEB_PUBLIC_URL%/xyz looks better than %WEB_PUBLIC_URL%xyz.\n     */\n    publicUrl: string;\n};\n/**\n * Get the output folder path. Defaults to `web-build`.\n *\n * @param projectRoot\n * @category env\n */\nexport declare function getProductionPath(projectRoot: string): string;\n/**\n * Get an absolute path relative to the project root while accounting for remote paths (`https://`).\n *\n * @param projectRoot\n * @category env\n */\nexport declare function getAbsolute(projectRoot: string, ...pathComponents: string[]): string;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}