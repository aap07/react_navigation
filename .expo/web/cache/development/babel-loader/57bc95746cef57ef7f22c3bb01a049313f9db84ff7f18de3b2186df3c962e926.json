{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/config-plugins/build/plugins/withMod.d.ts"],"sourcesContent":["import { ExportedConfig, Mod, ModPlatform } from '../Plugin.types';\nexport type BaseModOptions = {\n    /** Officially supports `'ios' | 'android'` (`ModPlatform`). Arbitrary strings are supported for adding out-of-tree platforms. */\n    platform: ModPlatform & string;\n    mod: string;\n    isProvider?: boolean;\n    skipEmptyMod?: boolean;\n    saveToInternal?: boolean;\n    /**\n     * If the mod supports introspection, and avoids making any filesystem modifications during compilation.\n     * By enabling, this mod, and all of its descendants will be run in introspection mode.\n     * This should only be used for static files like JSON or XML, and not for application files that require regexes,\n     * or complex static files that require other files to be generated like Xcode `.pbxproj`.\n     */\n    isIntrospective?: boolean;\n};\n/**\n * Plugin to intercept execution of a given `mod` with the given `action`.\n * If an action was already set on the given `config` config for `mod`, then it\n * will be provided to the `action` as `nextMod` when it's evaluated, otherwise\n * `nextMod` will be an identity function.\n *\n * @param config exported config\n * @param platform platform to target (ios or android)\n * @param mod name of the platform function to intercept\n * @param skipEmptyMod should skip running the action if there is no existing mod to intercept\n * @param saveToInternal should save the results to `_internal.modResults`, only enable this when the results are pure JSON.\n * @param isProvider should provide data up to the other mods.\n * @param action method to run on the mod when the config is compiled\n */\nexport declare function withBaseMod<T>(config: ExportedConfig, { platform, mod, action, skipEmptyMod, isProvider, isIntrospective, saveToInternal, }: BaseModOptions & {\n    action: Mod<T>;\n}): ExportedConfig;\n/**\n * Plugin to extend a mod function in the plugins config.\n *\n * @param config exported config\n * @param platform platform to target (ios or android)\n * @param mod name of the platform function to extend\n * @param action method to run on the mod when the config is compiled\n */\nexport declare function withMod<T>(config: ExportedConfig, { platform, mod, action, }: {\n    platform: ModPlatform;\n    mod: string;\n    action: Mod<T>;\n}): ExportedConfig;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}