{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _config = require(\"@expo/config\");\nvar _updateDevelopmentSession = require(\"../../api/updateDevelopmentSession\");\nvar _user = require(\"../../api/user/user\");\nvar _env = require(\"../../utils/env\");\nvar ProjectDevices = _interopRequireWildcard(require(\"../project/devices\"));\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar debug = require(\"debug\")(\"expo:start:server:developmentSession\");\nvar UPDATE_FREQUENCY = 20 * 1000;\nfunction isAuthenticatedAsync() {\n  return _isAuthenticatedAsync.apply(this, arguments);\n}\nfunction _isAuthenticatedAsync() {\n  _isAuthenticatedAsync = _asyncToGenerator(function* () {\n    return !!(yield (0, _user).getUserAsync().catch(function () {\n      return null;\n    }));\n  });\n  return _isAuthenticatedAsync.apply(this, arguments);\n}\nvar DevelopmentSession = function () {\n  function DevelopmentSession(projectRoot, url, onError) {\n    _classCallCheck(this, DevelopmentSession);\n    this.projectRoot = projectRoot;\n    this.url = url;\n    this.onError = onError;\n    this.timeout = null;\n  }\n  _createClass(DevelopmentSession, [{\n    key: \"startAsync\",\n    value: function () {\n      var _startAsync = _asyncToGenerator(function* (_ref) {\n        var _this = this;\n        var _ref$exp = _ref.exp,\n          exp = _ref$exp === void 0 ? (0, _config).getConfig(this.projectRoot).exp : _ref$exp,\n          runtime = _ref.runtime;\n        try {\n          if (_env.env.EXPO_OFFLINE) {\n            debug(\"This project will not be suggested in Expo Go or Dev Clients because Expo CLI is running in offline-mode.\");\n            this.stopNotifying();\n            return;\n          }\n          var deviceIds = yield this.getDeviceInstallationIdsAsync();\n          if (!(yield isAuthenticatedAsync()) && !(deviceIds == null ? void 0 : deviceIds.length)) {\n            debug(\"Development session will not ping because the user is not authenticated and there are no devices.\");\n            this.stopNotifying();\n            return;\n          }\n          if (this.url) {\n            debug(`Development session ping (runtime: ${runtime}, url: ${this.url})`);\n            yield (0, _updateDevelopmentSession).updateDevelopmentSessionAsync({\n              url: this.url,\n              runtime: runtime,\n              exp: exp,\n              deviceIds: deviceIds\n            });\n          }\n          this.stopNotifying();\n          this.timeout = setTimeout(function () {\n            return _this.startAsync({\n              exp: exp,\n              runtime: runtime\n            });\n          }, UPDATE_FREQUENCY);\n        } catch (error) {\n          debug(`Error updating development session API: ${error}`);\n          this.stopNotifying();\n          this.onError(error);\n        }\n      });\n      function startAsync(_x) {\n        return _startAsync.apply(this, arguments);\n      }\n      return startAsync;\n    }()\n  }, {\n    key: \"getDeviceInstallationIdsAsync\",\n    value: function () {\n      var _getDeviceInstallationIdsAsync = _asyncToGenerator(function* () {\n        var _yield$ProjectDevices = yield ProjectDevices.getDevicesInfoAsync(this.projectRoot),\n          devices = _yield$ProjectDevices.devices;\n        return devices.map(function (_ref2) {\n          var installationId = _ref2.installationId;\n          return installationId;\n        });\n      });\n      function getDeviceInstallationIdsAsync() {\n        return _getDeviceInstallationIdsAsync.apply(this, arguments);\n      }\n      return getDeviceInstallationIdsAsync;\n    }()\n  }, {\n    key: \"stopNotifying\",\n    value: function stopNotifying() {\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n      }\n      this.timeout = null;\n    }\n  }, {\n    key: \"closeAsync\",\n    value: function () {\n      var _closeAsync = _asyncToGenerator(function* () {\n        this.stopNotifying();\n        var deviceIds = yield this.getDeviceInstallationIdsAsync();\n        if (!(yield isAuthenticatedAsync()) && !(deviceIds == null ? void 0 : deviceIds.length)) {\n          return;\n        }\n        if (this.url) {\n          yield (0, _updateDevelopmentSession).closeDevelopmentSessionAsync({\n            url: this.url,\n            deviceIds: deviceIds\n          });\n        }\n      });\n      function closeAsync() {\n        return _closeAsync.apply(this, arguments);\n      }\n      return closeAsync;\n    }()\n  }]);\n  return DevelopmentSession;\n}();\nexports.DevelopmentSession = DevelopmentSession;","map":{"version":3,"names":["_classCallCheck","require","_createClass","_asyncToGenerator","_config","_updateDevelopmentSession","_user","_env","ProjectDevices","_interopRequireWildcard","debug","UPDATE_FREQUENCY","isAuthenticatedAsync","_isAuthenticatedAsync","apply","arguments","getUserAsync","catch","DevelopmentSession","projectRoot","url","onError","timeout","key","value","_startAsync","_ref","_this","_ref$exp","exp","getConfig","runtime","env","EXPO_OFFLINE","stopNotifying","deviceIds","getDeviceInstallationIdsAsync","length","updateDevelopmentSessionAsync","setTimeout","startAsync","error","_x","_getDeviceInstallationIdsAsync","_yield$ProjectDevices","getDevicesInfoAsync","devices","map","_ref2","installationId","clearTimeout","_closeAsync","closeDevelopmentSessionAsync","closeAsync"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\DevelopmentSession.ts"],"sourcesContent":["import { ExpoConfig, getConfig } from '@expo/config';\n\nimport {\n  closeDevelopmentSessionAsync,\n  updateDevelopmentSessionAsync,\n} from '../../api/updateDevelopmentSession';\nimport { getUserAsync } from '../../api/user/user';\nimport { env } from '../../utils/env';\nimport * as ProjectDevices from '../project/devices';\n\nconst debug = require('debug')('expo:start:server:developmentSession') as typeof console.log;\n\nconst UPDATE_FREQUENCY = 20 * 1000; // 20 seconds\n\nasync function isAuthenticatedAsync(): Promise<boolean> {\n  return !!(await getUserAsync().catch(() => null));\n}\n\nexport class DevelopmentSession {\n  protected timeout: NodeJS.Timeout | null = null;\n\n  constructor(\n    /** Project root directory. */\n    private projectRoot: string,\n    /** Development Server URL. */\n    public url: string | null,\n    /** Catch any errors that may occur during the `startAsync` method. */\n    private onError: (error: Error) => void\n  ) {}\n\n  /**\n   * Notify the Expo servers that a project is running, this enables the Expo Go app\n   * and Dev Clients to offer a \"recently in development\" section for quick access.\n   *\n   * This method starts an interval that will continue to ping the servers until we stop it.\n   *\n   * @param projectRoot Project root folder, used for retrieving device installation IDs.\n   * @param props.exp Partial Expo config with values that will be used in the Expo Go app.\n   * @param props.runtime which runtime the app should be opened in. `native` for dev clients, `web` for web browsers.\n   */\n  public async startAsync({\n    exp = getConfig(this.projectRoot).exp,\n    runtime,\n  }: {\n    exp?: Pick<ExpoConfig, 'name' | 'description' | 'slug' | 'primaryColor'>;\n    runtime: 'native' | 'web';\n  }): Promise<void> {\n    try {\n      if (env.EXPO_OFFLINE) {\n        debug(\n          'This project will not be suggested in Expo Go or Dev Clients because Expo CLI is running in offline-mode.'\n        );\n        this.stopNotifying();\n        return;\n      }\n\n      const deviceIds = await this.getDeviceInstallationIdsAsync();\n\n      if (!(await isAuthenticatedAsync()) && !deviceIds?.length) {\n        debug(\n          'Development session will not ping because the user is not authenticated and there are no devices.'\n        );\n        this.stopNotifying();\n        return;\n      }\n\n      if (this.url) {\n        debug(`Development session ping (runtime: ${runtime}, url: ${this.url})`);\n\n        await updateDevelopmentSessionAsync({\n          url: this.url,\n          runtime,\n          exp,\n          deviceIds,\n        });\n      }\n\n      this.stopNotifying();\n\n      this.timeout = setTimeout(() => this.startAsync({ exp, runtime }), UPDATE_FREQUENCY);\n    } catch (error: any) {\n      debug(`Error updating development session API: ${error}`);\n      this.stopNotifying();\n      this.onError(error);\n    }\n  }\n\n  /** Get all recent devices for the project. */\n  private async getDeviceInstallationIdsAsync(): Promise<string[]> {\n    const { devices } = await ProjectDevices.getDevicesInfoAsync(this.projectRoot);\n    return devices.map(({ installationId }) => installationId);\n  }\n\n  /** Stop notifying the Expo servers that the development session is running. */\n  public stopNotifying() {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n    }\n    this.timeout = null;\n  }\n\n  public async closeAsync(): Promise<void> {\n    this.stopNotifying();\n\n    const deviceIds = await this.getDeviceInstallationIdsAsync();\n\n    if (!(await isAuthenticatedAsync()) && !deviceIds?.length) {\n      return;\n    }\n\n    if (this.url) {\n      await closeDevelopmentSessionAsync({\n        url: this.url,\n        deviceIds,\n      });\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}