{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nvar GestureHandler = _createClass(function GestureHandler() {\n  _classCallCheck(this, GestureHandler);\n});\nexport { GestureHandler as default };","map":{"version":3,"names":["GestureHandler","_createClass","_classCallCheck","default"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/react-native-gesture-handler/lib/typescript/web/handlers/GestureHandler.d.ts"],"sourcesContent":["import { State } from '../../State';\nimport { Config, AdaptedEvent, PointerType } from '../interfaces';\nimport EventManager from '../tools/EventManager';\nimport PointerTracker from '../tools/PointerTracker';\nexport default abstract class GestureHandler {\n    private lastSentState;\n    protected currentState: State;\n    protected shouldCancellWhenOutside: boolean;\n    protected hasCustomActivationCriteria: boolean;\n    protected enabled: boolean;\n    private ref;\n    private propsRef;\n    private handlerTag;\n    protected config: Config;\n    protected view: HTMLElement;\n    protected eventManagers: EventManager[];\n    protected tracker: PointerTracker;\n    protected activationIndex: number;\n    protected awaiting: boolean;\n    protected active: boolean;\n    protected shouldResetProgress: boolean;\n    protected pointerType: PointerType;\n    constructor();\n    protected init(ref: number, propsRef: React.RefObject<unknown>): void;\n    private setView;\n    private addEventManager;\n    protected onCancel(): void;\n    protected onReset(): void;\n    protected resetProgress(): void;\n    reset(): void;\n    moveToState(newState: State, sendIfDisabled?: boolean): void;\n    protected onStateChange(_newState: State, _oldState: State): void;\n    begin(): void;\n    /**\n     * @param {boolean} sendIfDisabled - Used when handler becomes disabled. With this flag orchestrator will be forced to send fail event\n     */\n    fail(sendIfDisabled?: boolean): void;\n    /**\n     * @param {boolean} sendIfDisabled - Used when handler becomes disabled. With this flag orchestrator will be forced to send cancel event\n     */\n    cancel(sendIfDisabled?: boolean): void;\n    activate(_force?: boolean): void;\n    end(): void;\n    isAwaiting(): boolean;\n    setAwaiting(value: boolean): void;\n    isActive(): boolean;\n    setActive(value: boolean): void;\n    getShouldResetProgress(): boolean;\n    setShouldResetProgress(value: boolean): void;\n    getActivationIndex(): number;\n    setActivationIndex(value: number): void;\n    shouldWaitForHandlerFailure(handler: GestureHandler): boolean;\n    shouldRequireToWaitForFailure(handler: GestureHandler): boolean;\n    shouldRecognizeSimultaneously(handler: GestureHandler): boolean;\n    shouldBeCancelledByOther(handler: GestureHandler): boolean;\n    protected onPointerDown(event: AdaptedEvent): void;\n    protected onPointerAdd(event: AdaptedEvent): void;\n    protected onPointerUp(event: AdaptedEvent): void;\n    protected onPointerRemove(event: AdaptedEvent): void;\n    protected onPointerMove(event: AdaptedEvent): void;\n    protected onPointerOut(event: AdaptedEvent): void;\n    protected onPointerEnter(event: AdaptedEvent): void;\n    protected onPointerCancel(event: AdaptedEvent): void;\n    protected onPointerOutOfBounds(event: AdaptedEvent): void;\n    private tryToSendMoveEvent;\n    sendTouchEvent(event: AdaptedEvent): void;\n    sendEvent: (newState: State, oldState: State) => void;\n    private transformEventData;\n    private transformTouchEvent;\n    private cancelTouches;\n    protected transformNativeEvent(): {};\n    updateGestureConfig({ enabled, ...props }: Config): void;\n    protected checkCustomActivationCriteria(criterias: string[]): void;\n    private validateHitSlops;\n    private checkHitSlop;\n    isPointerInBounds({ x, y }: {\n        x: number;\n        y: number;\n    }): boolean;\n    protected resetConfig(): void;\n    getTag(): number;\n    setTag(tag: number): void;\n    protected getConfig(): Config;\n    getShouldEnableGestureOnSetup(): boolean;\n    getView(): HTMLElement;\n    getEventManagers(): EventManager[];\n    getTracker(): PointerTracker;\n    getTrackedPointersID(): number[];\n    getState(): State;\n    isEnabled(): boolean;\n    private isFinished;\n    protected setShouldCancelWhenOutside(shouldCancel: boolean): void;\n    protected getShouldCancelWhenOutside(): boolean;\n    getPointerType(): PointerType;\n}\n"],"mappings":";;IAI8BA,cAAc,GAAAC,YAAA,UAAAD,eAAA;EAAAE,eAAA,OAAAF,cAAA;AAAA;AAAA,SAAdA,cAAc,IAAAG,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}