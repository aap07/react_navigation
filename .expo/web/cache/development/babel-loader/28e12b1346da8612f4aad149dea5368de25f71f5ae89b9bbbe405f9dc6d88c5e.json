{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/dist/options.d.ts"],"sourcesContent":["import type { Reviver } from './doc/applyReviver.js';\nimport type { Directives } from './doc/directives.js';\nimport type { LogLevelId } from './log.js';\nimport type { ParsedNode } from './nodes/Node.js';\nimport type { Pair } from './nodes/Pair.js';\nimport type { Scalar } from './nodes/Scalar.js';\nimport type { LineCounter } from './parse/line-counter.js';\nimport type { Schema } from './schema/Schema.js';\nimport type { Tags } from './schema/tags.js';\nimport type { CollectionTag, ScalarTag } from './schema/types.js';\nexport type ParseOptions = {\n    /**\n     * Whether integers should be parsed into BigInt rather than number values.\n     *\n     * Default: `false`\n     *\n     * https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/BigInt\n     */\n    intAsBigInt?: boolean;\n    /**\n     * Include a `srcToken` value on each parsed `Node`, containing the CST token\n     * that was composed into this node.\n     *\n     * Default: `false`\n     */\n    keepSourceTokens?: boolean;\n    /**\n     * If set, newlines will be tracked, to allow for `lineCounter.linePos(offset)`\n     * to provide the `{ line, col }` positions within the input.\n     */\n    lineCounter?: LineCounter;\n    /**\n     * Include line/col position & node type directly in parse errors.\n     *\n     * Default: `true`\n     */\n    prettyErrors?: boolean;\n    /**\n     * Detect and report errors that are required by the YAML 1.2 spec,\n     * but are caused by unambiguous content.\n     *\n     * Default: `true`\n     */\n    strict?: boolean;\n    /**\n     * YAML requires map keys to be unique. By default, this is checked by\n     * comparing scalar values with `===`; deep equality is not checked for\n     * aliases or collections. If merge keys are enabled by the schema,\n     * multiple `<<` keys are allowed.\n     *\n     * Set `false` to disable, or provide your own comparator function to\n     * customise. The comparator will be passed two `ParsedNode` values, and\n     * is expected to return a `boolean` indicating their equality.\n     *\n     * Default: `true`\n     */\n    uniqueKeys?: boolean | ((a: ParsedNode, b: ParsedNode) => boolean);\n};\nexport type DocumentOptions = {\n    /**\n     * @internal\n     * Used internally by Composer. If set and includes an explicit version,\n     * that overrides the `version` option.\n     */\n    _directives?: Directives;\n    /**\n     * Control the logging level during parsing\n     *\n     * Default: `'warn'`\n     */\n    logLevel?: LogLevelId;\n    /**\n     * The YAML version used by documents without a `%YAML` directive.\n     *\n     * Default: `\"1.2\"`\n     */\n    version?: '1.1' | '1.2' | 'next';\n};\nexport type SchemaOptions = {\n    /**\n     * When parsing, warn about compatibility issues with the given schema.\n     * When stringifying, use scalar styles that are parsed correctly\n     * by the `compat` schema as well as the actual schema.\n     *\n     * Default: `null`\n     */\n    compat?: string | Tags | null;\n    /**\n     * Array of additional tags to include in the schema, or a function that may\n     * modify the schema's base tag array.\n     */\n    customTags?: Tags | ((tags: Tags) => Tags) | null;\n    /**\n     * Enable support for `<<` merge keys.\n     *\n     * Default: `false` for YAML 1.2, `true` for earlier versions\n     */\n    merge?: boolean;\n    /**\n     * When using the `'core'` schema, support parsing values with these\n     * explicit YAML 1.1 tags:\n     *\n     * `!!binary`, `!!omap`, `!!pairs`, `!!set`, `!!timestamp`.\n     *\n     * Default `true`\n     */\n    resolveKnownTags?: boolean;\n    /**\n     * The base schema to use.\n     *\n     * The core library has built-in support for the following:\n     * - `'failsafe'`: A minimal schema that parses all scalars as strings\n     * - `'core'`: The YAML 1.2 core schema\n     * - `'json'`: The YAML 1.2 JSON schema, with minimal rules for JSON compatibility\n     * - `'yaml-1.1'`: The YAML 1.1 schema\n     *\n     * If using another (custom) schema, the `customTags` array needs to\n     * fully define the schema's tags.\n     *\n     * Default: `'core'` for YAML 1.2, `'yaml-1.1'` for earlier versions\n     */\n    schema?: string | Schema;\n    /**\n     * When adding to or stringifying a map, sort the entries.\n     * If `true`, sort by comparing key values with `<`.\n     * Does not affect item order when parsing.\n     *\n     * Default: `false`\n     */\n    sortMapEntries?: boolean | ((a: Pair, b: Pair) => number);\n    /**\n     * Override default values for `toString()` options.\n     */\n    toStringDefaults?: ToStringOptions;\n};\nexport type CreateNodeOptions = {\n    /**\n     * During node construction, use anchors and aliases to keep strictly equal\n     * non-null objects as equivalent in YAML.\n     *\n     * Default: `true`\n     */\n    aliasDuplicateObjects?: boolean;\n    /**\n     * Default prefix for anchors.\n     *\n     * Default: `'a'`, resulting in anchors `a1`, `a2`, etc.\n     */\n    anchorPrefix?: string;\n    /** Force the top-level collection node to use flow style. */\n    flow?: boolean;\n    /**\n     * Keep `undefined` object values when creating mappings, rather than\n     * discarding them.\n     *\n     * Default: `false`\n     */\n    keepUndefined?: boolean | null;\n    onTagObj?: (tagObj: ScalarTag | CollectionTag) => void;\n    /**\n     * Specify the top-level collection type, e.g. `\"!!omap\"`. Note that this\n     * requires the corresponding tag to be available in this document's schema.\n     */\n    tag?: string;\n};\nexport type ToJSOptions = {\n    /**\n     * Use Map rather than Object to represent mappings.\n     *\n     * Default: `false`\n     */\n    mapAsMap?: boolean;\n    /**\n     * Prevent exponential entity expansion attacks by limiting data aliasing count;\n     * set to `-1` to disable checks; `0` disallows all alias nodes.\n     *\n     * Default: `100`\n     */\n    maxAliasCount?: number;\n    /**\n     * If defined, called with the resolved `value` and reference `count` for\n     * each anchor in the document.\n     */\n    onAnchor?: (value: unknown, count: number) => void;\n    /**\n     * Optional function that may filter or modify the output JS value\n     *\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse#using_the_reviver_parameter\n     */\n    reviver?: Reviver;\n};\nexport type ToStringOptions = {\n    /**\n     * Use block quote styles for scalar values where applicable.\n     * Set to `false` to disable block quotes completely.\n     *\n     * Default: `true`\n     */\n    blockQuote?: boolean | 'folded' | 'literal';\n    /**\n     * Enforce `'block'` or `'flow'` style on maps and sequences.\n     * Empty collections will always be stringified as `{}` or `[]`.\n     *\n     * Default: `'any'`, allowing each node to set its style separately\n     * with its `flow: boolean` (default `false`) property.\n     */\n    collectionStyle?: 'any' | 'block' | 'flow';\n    /**\n     * Comment stringifier.\n     * Output should be valid for the current schema.\n     *\n     * By default, empty comment lines are left empty,\n     * lines consisting of a single space are replaced by `#`,\n     * and all other lines are prefixed with a `#`.\n     */\n    commentString?: (comment: string) => string;\n    /**\n     * The default type of string literal used to stringify implicit key values.\n     * Output may use other types if required to fully represent the value.\n     *\n     * If `null`, the value of `defaultStringType` is used.\n     *\n     * Default: `null`\n     */\n    defaultKeyType?: Scalar.Type | null;\n    /**\n     * The default type of string literal used to stringify values in general.\n     * Output may use other types if required to fully represent the value.\n     *\n     * Default: `'PLAIN'`\n     */\n    defaultStringType?: Scalar.Type;\n    /**\n     * Include directives in the output.\n     *\n     * - If `true`, at least the document-start marker `---` is always included.\n     *   This does not force the `%YAML` directive to be included. To do that,\n     *   set `doc.directives.yaml.explicit = true`.\n     * - If `false`, no directives or marker is ever included. If using the `%TAG`\n     *   directive, you are expected to include it manually in the stream before\n     *   its use.\n     * - If `null`, directives and marker may be included if required.\n     *\n     * Default: `null`\n     */\n    directives?: boolean | null;\n    /**\n     * Restrict double-quoted strings to use JSON-compatible syntax.\n     *\n     * Default: `false`\n     */\n    doubleQuotedAsJSON?: boolean;\n    /**\n     * Minimum length for double-quoted strings to use multiple lines to\n     * represent the value. Ignored if `doubleQuotedAsJSON` is set.\n     *\n     * Default: `40`\n     */\n    doubleQuotedMinMultiLineLength?: number;\n    /**\n     * String representation for `false`.\n     * With the core schema, use `'false'`, `'False'`, or `'FALSE'`.\n     *\n     * Default: `'false'`\n     */\n    falseStr?: string;\n    /**\n     * When true, a single space of padding will be added inside the delimiters\n     * of non-empty single-line flow collections.\n     *\n     * Default: `true`\n     */\n    flowCollectionPadding?: boolean;\n    /**\n     * The number of spaces to use when indenting code.\n     *\n     * Default: `2`\n     */\n    indent?: number;\n    /**\n     * Whether block sequences should be indented.\n     *\n     * Default: `true`\n     */\n    indentSeq?: boolean;\n    /**\n     * Maximum line width (set to `0` to disable folding).\n     *\n     * This is a soft limit, as only double-quoted semantics allow for inserting\n     * a line break in the middle of a word, as well as being influenced by the\n     * `minContentWidth` option.\n     *\n     * Default: `80`\n     */\n    lineWidth?: number;\n    /**\n     * Minimum line width for highly-indented content (set to `0` to disable).\n     *\n     * Default: `20`\n     */\n    minContentWidth?: number;\n    /**\n     * String representation for `null`.\n     * With the core schema, use `'null'`, `'Null'`, `'NULL'`, `'~'`, or an empty\n     * string `''`.\n     *\n     * Default: `'null'`\n     */\n    nullStr?: string;\n    /**\n     * Require keys to be scalars and to use implicit rather than explicit notation.\n     *\n     * Default: `false`\n     */\n    simpleKeys?: boolean;\n    /**\n     * Use 'single quote' rather than \"double quote\" where applicable.\n     * Set to `false` to disable single quotes completely.\n     *\n     * Default: `null`\n     */\n    singleQuote?: boolean | null;\n    /**\n     * String representation for `true`.\n     * With the core schema, use `'true'`, `'True'`, or `'TRUE'`.\n     *\n     * Default: `'true'`\n     */\n    trueStr?: string;\n    /**\n     * The anchor used by an alias must be defined before the alias node. As it's\n     * possible for the document to be modified manually, the order may be\n     * verified during stringification.\n     *\n     * Default: `'true'`\n     */\n    verifyAliasOrder?: boolean;\n};\n"],"mappings":""},"metadata":{},"sourceType":"script","externalDependencies":[]}