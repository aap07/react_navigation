{"ast":null,"code":"'use strict';\n\nvar _require = require(\"./CppHelpers\"),\n  convertDefaultTypeToString = _require.convertDefaultTypeToString,\n  getImports = _require.getImports;\nvar FileTemplate = function FileTemplate(_ref) {\n  var libraryName = _ref.libraryName,\n    imports = _ref.imports,\n    componentClasses = _ref.componentClasses;\n  return `\n/**\n * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).\n *\n * Do not edit this file as changes may cause incorrect behavior and will be lost\n * once the code is regenerated.\n *\n * ${'@'}generated by codegen project: GeneratePropsCpp.js\n */\n\n#include <react/renderer/components/${libraryName}/Props.h>\n${imports}\n\nnamespace facebook {\nnamespace react {\n\n${componentClasses}\n\n} // namespace react\n} // namespace facebook\n`;\n};\nvar ComponentTemplate = function ComponentTemplate(_ref2) {\n  var className = _ref2.className,\n    extendClasses = _ref2.extendClasses,\n    props = _ref2.props;\n  return `\n${className}::${className}(\n    const PropsParserContext &context,\n    const ${className} &sourceProps,\n    const RawProps &rawProps):${extendClasses}\n\n    ${props}\n      {}\n`.trim();\n};\nfunction generatePropsString(componentName, component) {\n  return component.props.map(function (prop) {\n    var defaultValue = convertDefaultTypeToString(componentName, prop);\n    return `${prop.name}(convertRawProp(context, rawProps, \"${prop.name}\", sourceProps.${prop.name}, {${defaultValue}}))`;\n  }).join(',\\n' + '    ');\n}\nfunction getClassExtendString(component) {\n  var extendString = ' ' + component.extendsProps.map(function (extendProps) {\n    switch (extendProps.type) {\n      case 'ReactNativeBuiltInType':\n        switch (extendProps.knownTypeName) {\n          case 'ReactNativeCoreViewProps':\n            return 'ViewProps(context, sourceProps, rawProps)';\n          default:\n            extendProps.knownTypeName;\n            throw new Error('Invalid knownTypeName');\n        }\n      default:\n        extendProps.type;\n        throw new Error('Invalid extended type');\n    }\n  }).join(', ') + `${component.props.length > 0 ? ',' : ''}`;\n  return extendString;\n}\nmodule.exports = {\n  generate: function generate(libraryName, schema, packageName) {\n    var assumeNonnull = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var fileName = 'Props.cpp';\n    var allImports = new Set(['#include <react/renderer/core/propsConversions.h>', '#include <react/renderer/core/PropsParserContext.h>']);\n    var componentProps = Object.keys(schema.modules).map(function (moduleName) {\n      var module = schema.modules[moduleName];\n      if (module.type !== 'Component') {\n        return;\n      }\n      var components = module.components;\n      if (components == null) {\n        return null;\n      }\n      return Object.keys(components).map(function (componentName) {\n        var component = components[componentName];\n        var newName = `${componentName}Props`;\n        var propsString = generatePropsString(componentName, component);\n        var extendString = getClassExtendString(component);\n        var imports = getImports(component.props);\n        imports.forEach(allImports.add, allImports);\n        var replacedTemplate = ComponentTemplate({\n          className: newName,\n          extendClasses: extendString,\n          props: propsString\n        });\n        return replacedTemplate;\n      }).join('\\n');\n    }).filter(Boolean).join('\\n');\n    var replacedTemplate = FileTemplate({\n      componentClasses: componentProps,\n      libraryName: libraryName,\n      imports: Array.from(allImports).sort().join('\\n').trim()\n    });\n    return new Map([[fileName, replacedTemplate]]);\n  }\n};","map":{"version":3,"names":["_require","require","convertDefaultTypeToString","getImports","FileTemplate","_ref","libraryName","imports","componentClasses","ComponentTemplate","_ref2","className","extendClasses","props","trim","generatePropsString","componentName","component","map","prop","defaultValue","name","join","getClassExtendString","extendString","extendsProps","extendProps","type","knownTypeName","Error","length","module","exports","generate","schema","packageName","assumeNonnull","arguments","undefined","fileName","allImports","Set","componentProps","Object","keys","modules","moduleName","components","newName","propsString","forEach","add","replacedTemplate","filter","Boolean","Array","from","sort","Map"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native/codegen/lib/generators/components/GeneratePropsCpp.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * @format\n */\n\n'use strict';\n\nconst _require = require('./CppHelpers'),\n  convertDefaultTypeToString = _require.convertDefaultTypeToString,\n  getImports = _require.getImports;\n\n// File path -> contents\n\nconst FileTemplate = ({libraryName, imports, componentClasses}) => `\n/**\n * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).\n *\n * Do not edit this file as changes may cause incorrect behavior and will be lost\n * once the code is regenerated.\n *\n * ${'@'}generated by codegen project: GeneratePropsCpp.js\n */\n\n#include <react/renderer/components/${libraryName}/Props.h>\n${imports}\n\nnamespace facebook {\nnamespace react {\n\n${componentClasses}\n\n} // namespace react\n} // namespace facebook\n`;\nconst ComponentTemplate = ({className, extendClasses, props}) =>\n  `\n${className}::${className}(\n    const PropsParserContext &context,\n    const ${className} &sourceProps,\n    const RawProps &rawProps):${extendClasses}\n\n    ${props}\n      {}\n`.trim();\nfunction generatePropsString(componentName, component) {\n  return component.props\n    .map(prop => {\n      const defaultValue = convertDefaultTypeToString(componentName, prop);\n      return `${prop.name}(convertRawProp(context, rawProps, \"${prop.name}\", sourceProps.${prop.name}, {${defaultValue}}))`;\n    })\n    .join(',\\n' + '    ');\n}\nfunction getClassExtendString(component) {\n  const extendString =\n    ' ' +\n    component.extendsProps\n      .map(extendProps => {\n        switch (extendProps.type) {\n          case 'ReactNativeBuiltInType':\n            switch (extendProps.knownTypeName) {\n              case 'ReactNativeCoreViewProps':\n                return 'ViewProps(context, sourceProps, rawProps)';\n              default:\n                extendProps.knownTypeName;\n                throw new Error('Invalid knownTypeName');\n            }\n          default:\n            extendProps.type;\n            throw new Error('Invalid extended type');\n        }\n      })\n      .join(', ') +\n    `${component.props.length > 0 ? ',' : ''}`;\n  return extendString;\n}\nmodule.exports = {\n  generate(libraryName, schema, packageName, assumeNonnull = false) {\n    const fileName = 'Props.cpp';\n    const allImports = new Set([\n      '#include <react/renderer/core/propsConversions.h>',\n      '#include <react/renderer/core/PropsParserContext.h>',\n    ]);\n    const componentProps = Object.keys(schema.modules)\n      .map(moduleName => {\n        const module = schema.modules[moduleName];\n        if (module.type !== 'Component') {\n          return;\n        }\n        const components = module.components;\n        // No components in this module\n        if (components == null) {\n          return null;\n        }\n        return Object.keys(components)\n          .map(componentName => {\n            const component = components[componentName];\n            const newName = `${componentName}Props`;\n            const propsString = generatePropsString(componentName, component);\n            const extendString = getClassExtendString(component);\n            const imports = getImports(component.props);\n            // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n            imports.forEach(allImports.add, allImports);\n            const replacedTemplate = ComponentTemplate({\n              className: newName,\n              extendClasses: extendString,\n              props: propsString,\n            });\n            return replacedTemplate;\n          })\n          .join('\\n');\n      })\n      .filter(Boolean)\n      .join('\\n');\n    const replacedTemplate = FileTemplate({\n      componentClasses: componentProps,\n      libraryName,\n      imports: Array.from(allImports).sort().join('\\n').trim(),\n    });\n    return new Map([[fileName, replacedTemplate]]);\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}