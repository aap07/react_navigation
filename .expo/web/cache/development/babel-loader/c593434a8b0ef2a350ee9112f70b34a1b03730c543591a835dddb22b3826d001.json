{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.exportEmbedAsync = exportEmbedAsync;\nvar _instantiateMetro = require(\"../../start/server/metro/instantiateMetro\");\nvar _resolveFromProject = require(\"../../start/server/metro/resolveFromProject\");\nvar _nodeEnv = require(\"../../utils/nodeEnv\");\nfunction exportEmbedAsync(_x, _x2) {\n  return _exportEmbedAsync.apply(this, arguments);\n}\nfunction _exportEmbedAsync() {\n  _exportEmbedAsync = _asyncToGenerator(function* (projectRoot, options) {\n    (0, _nodeEnv).setNodeEnv(options.dev ? \"development\" : \"production\");\n    require(\"@expo/env\").load(projectRoot);\n    var _yield$loadMetroConfi = yield (0, _instantiateMetro).loadMetroConfigAsync(projectRoot, {\n        maxWorkers: options.maxWorkers,\n        resetCache: options.resetCache,\n        config: options.config\n      }),\n      config = _yield$loadMetroConfi.config;\n    var buildBundleWithConfig = (0, _resolveFromProject).importCliBuildBundleWithConfigFromProject(projectRoot);\n    yield buildBundleWithConfig(options, config);\n  });\n  return _exportEmbedAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","exportEmbedAsync","_instantiateMetro","_resolveFromProject","_nodeEnv","_x","_x2","_exportEmbedAsync","apply","arguments","projectRoot","options","setNodeEnv","dev","load","_yield$loadMetroConfi","loadMetroConfigAsync","maxWorkers","resetCache","config","buildBundleWithConfig","importCliBuildBundleWithConfigFromProject"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\export\\embed\\exportEmbedAsync.ts"],"sourcesContent":["import { loadMetroConfigAsync } from '../../start/server/metro/instantiateMetro';\nimport { importCliBuildBundleWithConfigFromProject } from '../../start/server/metro/resolveFromProject';\nimport { setNodeEnv } from '../../utils/nodeEnv';\nimport { Options } from './resolveOptions';\n\nexport async function exportEmbedAsync(projectRoot: string, options: Options) {\n  setNodeEnv(options.dev ? 'development' : 'production');\n  require('@expo/env').load(projectRoot);\n\n  const { config } = await loadMetroConfigAsync(projectRoot, {\n    maxWorkers: options.maxWorkers,\n    resetCache: options.resetCache,\n    config: options.config,\n  });\n\n  const buildBundleWithConfig = importCliBuildBundleWithConfigFromProject(projectRoot);\n\n  // Import the internal `buildBundleWithConfig()` function from `react-native` for the purpose\n  // of exporting with `@expo/metro-config` and other defaults like a resolved project entry.\n  await buildBundleWithConfig(options, config);\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,iBAAA,GAAAC,OAAA;;;;QAKsBC,gBAAgB,GAAhBA,gBAAgB;AALD,IAAAC,iBAA2C,GAAAF,OAAA;AACtB,IAAAG,mBAA6C,GAAAH,OAAA;AAC5E,IAAAI,QAAqB,GAAAJ,OAAA;AAAA,SAG1BC,gBAAgBA,CAAAI,EAAA,EAAAC,GAAA;EAAA,OAAAC,iBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,kBAAA;EAAAA,iBAAA,GAAAR,iBAAA,CAA/B,WAAgCW,WAAmB,EAAEC,OAAgB,EAAE;IAC5E,IAAAP,QAAU,EAA4CQ,UAA5C,CAACD,OAAO,CAACE,GAAG,GAAG,aAAa,GAAG,YAAY,CAAC;IACtDb,OAAO,CAAC,WAAW,CAAC,CAACc,IAAI,CAACJ,WAAW,CAAC;IAEtC,IAAAK,qBAAA,SAAyB,IAAAb,iBAAoB,EAI3Cc,oBAJ2C,CAACN,WAAW,EAAE;QACzDO,UAAU,EAAEN,OAAO,CAACM,UAAU;QAC9BC,UAAU,EAAEP,OAAO,CAACO,UAAU;QAC9BC,MAAM,EAAER,OAAO,CAACQ;OACjB,CAAC;MAJMA,MAAM,GAAAJ,qBAAA,CAANI,MAAM;IAMd,IAAMC,qBAAqB,GAAG,IAAAjB,mBAAyC,EAAakB,yCAAb,CAACX,WAAW,CAAC;IAIpF,MAAMU,qBAAqB,CAACT,OAAO,EAAEQ,MAAM,CAAC;GAC7C;EAAA,OAAAZ,iBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}