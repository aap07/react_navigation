{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getGoogleServicesFile = getGoogleServicesFile;\nexports.getGoogleSignInReversedClientId = getGoogleSignInReversedClientId;\nexports.setGoogleConfig = setGoogleConfig;\nexports.setGoogleServicesFile = setGoogleServicesFile;\nexports.setGoogleSignInReversedClientId = setGoogleSignInReversedClientId;\nexports.withGoogleServicesFile = exports.withGoogle = void 0;\nfunction _plist() {\n  var data = _interopRequireDefault(require(\"@expo/plist\"));\n  _plist = function _plist() {\n    return data;\n  };\n  return data;\n}\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n  _assert = function _assert() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _Paths() {\n  var data = require(\"./Paths\");\n  _Paths = function _Paths() {\n    return data;\n  };\n  return data;\n}\nfunction _Scheme() {\n  var data = require(\"./Scheme\");\n  _Scheme = function _Scheme() {\n    return data;\n  };\n  return data;\n}\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar withGoogle = function withGoogle(config) {\n  return (0, _iosPlugins().withInfoPlist)(config, function (config) {\n    config.modResults = setGoogleConfig(config, config.modResults, config.modRequest);\n    return config;\n  });\n};\nexports.withGoogle = withGoogle;\nvar withGoogleServicesFile = function withGoogleServicesFile(config) {\n  return (0, _iosPlugins().withXcodeProject)(config, function (config) {\n    config.modResults = setGoogleServicesFile(config, {\n      projectRoot: config.modRequest.projectRoot,\n      project: config.modResults\n    });\n    return config;\n  });\n};\nexports.withGoogleServicesFile = withGoogleServicesFile;\nfunction readGoogleServicesInfoPlist(relativePath, _ref) {\n  var projectRoot = _ref.projectRoot;\n  var googleServiceFilePath = _path().default.resolve(projectRoot, relativePath);\n  var contents = _fs().default.readFileSync(googleServiceFilePath, 'utf8');\n  (0, _assert().default)(contents, 'GoogleService-Info.plist is empty');\n  return _plist().default.parse(contents);\n}\nfunction getGoogleSignInReversedClientId(config, modRequest) {\n  var _infoPlist$REVERSED_C;\n  var googleServicesFileRelativePath = getGoogleServicesFile(config);\n  if (googleServicesFileRelativePath === null) {\n    return null;\n  }\n  var infoPlist = readGoogleServicesInfoPlist(googleServicesFileRelativePath, modRequest);\n  return (_infoPlist$REVERSED_C = infoPlist.REVERSED_CLIENT_ID) !== null && _infoPlist$REVERSED_C !== void 0 ? _infoPlist$REVERSED_C : null;\n}\nfunction getGoogleServicesFile(config) {\n  var _config$ios$googleSer, _config$ios;\n  return (_config$ios$googleSer = (_config$ios = config.ios) === null || _config$ios === void 0 ? void 0 : _config$ios.googleServicesFile) !== null && _config$ios$googleSer !== void 0 ? _config$ios$googleSer : null;\n}\nfunction setGoogleSignInReversedClientId(config, infoPlist, modRequest) {\n  var reversedClientId = getGoogleSignInReversedClientId(config, modRequest);\n  if (reversedClientId === null) {\n    return infoPlist;\n  }\n  return (0, _Scheme().appendScheme)(reversedClientId, infoPlist);\n}\nfunction setGoogleConfig(config, infoPlist, modRequest) {\n  infoPlist = setGoogleSignInReversedClientId(config, infoPlist, modRequest);\n  return infoPlist;\n}\nfunction setGoogleServicesFile(config, _ref2) {\n  var projectRoot = _ref2.projectRoot,\n    project = _ref2.project;\n  var googleServicesFileRelativePath = getGoogleServicesFile(config);\n  if (googleServicesFileRelativePath === null) {\n    return project;\n  }\n  var googleServiceFilePath = _path().default.resolve(projectRoot, googleServicesFileRelativePath);\n  _fs().default.copyFileSync(googleServiceFilePath, _path().default.join((0, _Paths().getSourceRoot)(projectRoot), 'GoogleService-Info.plist'));\n  var projectName = (0, _Xcodeproj().getProjectName)(projectRoot);\n  var plistFilePath = `${projectName}/GoogleService-Info.plist`;\n  if (!project.hasFile(plistFilePath)) {\n    project = (0, _Xcodeproj().addResourceFileToGroup)({\n      filepath: plistFilePath,\n      groupName: projectName,\n      project: project,\n      isBuildFile: true,\n      verbose: true\n    });\n  }\n  return project;\n}","map":{"version":3,"names":["_plist","data","_interopRequireDefault","require","_assert","_fs","_path","_iosPlugins","_Paths","_Scheme","_Xcodeproj","obj","__esModule","default","withGoogle","config","withInfoPlist","modResults","setGoogleConfig","modRequest","exports","withGoogleServicesFile","withXcodeProject","setGoogleServicesFile","projectRoot","project","readGoogleServicesInfoPlist","relativePath","_ref","googleServiceFilePath","resolve","contents","readFileSync","parse","getGoogleSignInReversedClientId","_infoPlist$REVERSED_C","googleServicesFileRelativePath","getGoogleServicesFile","infoPlist","REVERSED_CLIENT_ID","_config$ios$googleSer","_config$ios","ios","googleServicesFile","setGoogleSignInReversedClientId","reversedClientId","appendScheme","_ref2","copyFileSync","join","getSourceRoot","projectName","getProjectName","plistFilePath","hasFile","addResourceFileToGroup","filepath","groupName","isBuildFile","verbose"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\ios\\Google.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport plist from '@expo/plist';\nimport assert from 'assert';\nimport fs from 'fs';\nimport path from 'path';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin, ModProps } from '../Plugin.types';\nimport { withInfoPlist, withXcodeProject } from '../plugins/ios-plugins';\nimport { InfoPlist } from './IosConfig.types';\nimport { getSourceRoot } from './Paths';\nimport { appendScheme } from './Scheme';\nimport { addResourceFileToGroup, getProjectName } from './utils/Xcodeproj';\n\nexport const withGoogle: ConfigPlugin = (config) => {\n  return withInfoPlist(config, (config) => {\n    config.modResults = setGoogleConfig(config, config.modResults, config.modRequest);\n    return config;\n  });\n};\n\nexport const withGoogleServicesFile: ConfigPlugin = (config) => {\n  return withXcodeProject(config, (config) => {\n    config.modResults = setGoogleServicesFile(config, {\n      projectRoot: config.modRequest.projectRoot,\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\nfunction readGoogleServicesInfoPlist(\n  relativePath: string,\n  { projectRoot }: { projectRoot: string }\n) {\n  const googleServiceFilePath = path.resolve(projectRoot, relativePath);\n  const contents = fs.readFileSync(googleServiceFilePath, 'utf8');\n  assert(contents, 'GoogleService-Info.plist is empty');\n  return plist.parse(contents);\n}\n\nexport function getGoogleSignInReversedClientId(\n  config: Pick<ExpoConfig, 'ios'>,\n  modRequest: Pick<ModProps<InfoPlist>, 'projectRoot'>\n): string | null {\n  const googleServicesFileRelativePath = getGoogleServicesFile(config);\n  if (googleServicesFileRelativePath === null) {\n    return null;\n  }\n\n  const infoPlist = readGoogleServicesInfoPlist(googleServicesFileRelativePath, modRequest);\n\n  return infoPlist.REVERSED_CLIENT_ID ?? null;\n}\n\nexport function getGoogleServicesFile(config: Pick<ExpoConfig, 'ios'>) {\n  return config.ios?.googleServicesFile ?? null;\n}\n\nexport function setGoogleSignInReversedClientId(\n  config: Pick<ExpoConfig, 'ios'>,\n  infoPlist: InfoPlist,\n  modRequest: Pick<ModProps<InfoPlist>, 'projectRoot'>\n): InfoPlist {\n  const reversedClientId = getGoogleSignInReversedClientId(config, modRequest);\n\n  if (reversedClientId === null) {\n    return infoPlist;\n  }\n\n  return appendScheme(reversedClientId, infoPlist);\n}\n\nexport function setGoogleConfig(\n  config: Pick<ExpoConfig, 'ios'>,\n  infoPlist: InfoPlist,\n  modRequest: ModProps<InfoPlist>\n): InfoPlist {\n  infoPlist = setGoogleSignInReversedClientId(config, infoPlist, modRequest);\n  return infoPlist;\n}\n\nexport function setGoogleServicesFile(\n  config: Pick<ExpoConfig, 'ios'>,\n  { projectRoot, project }: { project: XcodeProject; projectRoot: string }\n): XcodeProject {\n  const googleServicesFileRelativePath = getGoogleServicesFile(config);\n  if (googleServicesFileRelativePath === null) {\n    return project;\n  }\n\n  const googleServiceFilePath = path.resolve(projectRoot, googleServicesFileRelativePath);\n  fs.copyFileSync(\n    googleServiceFilePath,\n    path.join(getSourceRoot(projectRoot), 'GoogleService-Info.plist')\n  );\n\n  const projectName = getProjectName(projectRoot);\n  const plistFilePath = `${projectName}/GoogleService-Info.plist`;\n  if (!project.hasFile(plistFilePath)) {\n    project = addResourceFileToGroup({\n      filepath: plistFilePath,\n      groupName: projectName,\n      project,\n      isBuildFile: true,\n      verbose: true,\n    });\n  }\n  return project;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}