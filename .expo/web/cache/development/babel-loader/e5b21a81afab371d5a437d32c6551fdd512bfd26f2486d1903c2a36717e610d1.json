{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ensureSimulatorAppRunningAsync = ensureSimulatorAppRunningAsync;\nvar osascript = _interopRequireWildcard(require(\"@expo/osascript\"));\nvar _spawnAsync = _interopRequireDefault(require(\"@expo/spawn-async\"));\nvar Log = _interopRequireWildcard(require(\"../../../log\"));\nvar _delay = require(\"../../../utils/delay\");\nvar _errors = require(\"../../../utils/errors\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction ensureSimulatorAppRunningAsync(_x) {\n  return _ensureSimulatorAppRunningAsync.apply(this, arguments);\n}\nfunction _ensureSimulatorAppRunningAsync() {\n  _ensureSimulatorAppRunningAsync = _asyncToGenerator(function* (device) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      maxWaitTime = _ref.maxWaitTime;\n    if (yield isSimulatorAppRunningAsync()) {\n      return;\n    }\n    Log.log(`\\u203A Opening the iOS simulator, this might take a moment.`);\n    yield openSimulatorAppAsync(device);\n    if (!(yield waitForSimulatorAppToStart({\n      maxWaitTime: maxWaitTime\n    }))) {\n      throw new _errors.CommandError(\"SIMULATOR_TIMEOUT\", `Simulator app did not open fast enough. Try opening Simulator first, then running your app.`);\n    }\n  });\n  return _ensureSimulatorAppRunningAsync.apply(this, arguments);\n}\nfunction waitForSimulatorAppToStart() {\n  return _waitForSimulatorAppToStart.apply(this, arguments);\n}\nfunction _waitForSimulatorAppToStart() {\n  _waitForSimulatorAppToStart = _asyncToGenerator(function* () {\n    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      maxWaitTime = _ref2.maxWaitTime;\n    return (0, _delay).waitForActionAsync({\n      interval: 50,\n      maxWaitTime: maxWaitTime,\n      action: isSimulatorAppRunningAsync\n    });\n  });\n  return _waitForSimulatorAppToStart.apply(this, arguments);\n}\nfunction isSimulatorAppRunningAsync() {\n  return _isSimulatorAppRunningAsync.apply(this, arguments);\n}\nfunction _isSimulatorAppRunningAsync() {\n  _isSimulatorAppRunningAsync = _asyncToGenerator(function* () {\n    try {\n      var zeroMeansNo = (yield osascript.execAsync('tell app \"System Events\" to count processes whose name is \"Simulator\"')).trim();\n      if (zeroMeansNo === \"0\") {\n        return false;\n      }\n    } catch (error) {\n      if (error.message.includes(\"Application isn\\u2019t running\")) {\n        return false;\n      }\n      throw error;\n    }\n    return true;\n  });\n  return _isSimulatorAppRunningAsync.apply(this, arguments);\n}\nfunction openSimulatorAppAsync(_x2) {\n  return _openSimulatorAppAsync.apply(this, arguments);\n}\nfunction _openSimulatorAppAsync() {\n  _openSimulatorAppAsync = _asyncToGenerator(function* (device) {\n    var args = [\"-a\", \"Simulator\"];\n    if (device.udid) {\n      args.push(\"--args\", \"-CurrentDeviceUDID\", device.udid);\n    }\n    yield (0, _spawnAsync).default(\"open\", args);\n  });\n  return _openSimulatorAppAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","ensureSimulatorAppRunningAsync","osascript","_interopRequireWildcard","_spawnAsync","_interopRequireDefault","Log","_delay","_errors","_x","_ensureSimulatorAppRunningAsync","apply","arguments","device","_ref","length","undefined","maxWaitTime","isSimulatorAppRunningAsync","log","openSimulatorAppAsync","waitForSimulatorAppToStart","CommandError","_waitForSimulatorAppToStart","_ref2","waitForActionAsync","interval","action","_isSimulatorAppRunningAsync","zeroMeansNo","execAsync","trim","error","message","includes","_x2","_openSimulatorAppAsync","args","udid","push","default"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\platforms\\ios\\ensureSimulatorAppRunning.ts"],"sourcesContent":["import * as osascript from '@expo/osascript';\nimport spawnAsync from '@expo/spawn-async';\n\nimport * as Log from '../../../log';\nimport { waitForActionAsync } from '../../../utils/delay';\nimport { CommandError } from '../../../utils/errors';\nimport { Device } from './simctl';\n\n/** Open the Simulator.app and return when the system registers it as 'open'. */\nexport async function ensureSimulatorAppRunningAsync(\n  device: Partial<Pick<Device, 'udid'>>,\n  {\n    maxWaitTime,\n  }: {\n    maxWaitTime?: number;\n  } = {}\n): Promise<void> {\n  if (await isSimulatorAppRunningAsync()) {\n    return;\n  }\n\n  Log.log(`\\u203A Opening the iOS simulator, this might take a moment.`);\n\n  // In theory this would ensure the correct simulator is booted as well.\n  // This isn't theory though, this is Xcode.\n  await openSimulatorAppAsync(device);\n\n  if (!(await waitForSimulatorAppToStart({ maxWaitTime }))) {\n    throw new CommandError(\n      'SIMULATOR_TIMEOUT',\n      `Simulator app did not open fast enough. Try opening Simulator first, then running your app.`\n    );\n  }\n}\n\nasync function waitForSimulatorAppToStart({\n  maxWaitTime,\n}: { maxWaitTime?: number } = {}): Promise<boolean> {\n  return waitForActionAsync<boolean>({\n    interval: 50,\n    maxWaitTime,\n    action: isSimulatorAppRunningAsync,\n  });\n}\n\n// I think the app can be open while no simulators are booted.\nasync function isSimulatorAppRunningAsync(): Promise<boolean> {\n  try {\n    const zeroMeansNo = (\n      await osascript.execAsync(\n        'tell app \"System Events\" to count processes whose name is \"Simulator\"'\n      )\n    ).trim();\n    if (zeroMeansNo === '0') {\n      return false;\n    }\n  } catch (error: any) {\n    if (error.message.includes('Application isnâ€™t running')) {\n      return false;\n    }\n    throw error;\n  }\n\n  return true;\n}\n\nasync function openSimulatorAppAsync(device: { udid?: string }) {\n  const args = ['-a', 'Simulator'];\n  if (device.udid) {\n    // This has no effect if the app is already running.\n    args.push('--args', '-CurrentDeviceUDID', device.udid);\n  }\n  await spawnAsync('open', args);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}