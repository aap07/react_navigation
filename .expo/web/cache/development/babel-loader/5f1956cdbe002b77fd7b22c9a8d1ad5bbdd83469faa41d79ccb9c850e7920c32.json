{"ast":null,"code":"import { Collection } from \"../nodes/Collection.js\";\nimport { isNode, isPair } from \"../nodes/identity.js\";\nimport { stringify } from \"./stringify.js\";\nimport { lineComment, indentComment } from \"./stringifyComment.js\";\nfunction stringifyCollection(collection, ctx, options) {\n  var _ctx$inFlow;\n  var flow = (_ctx$inFlow = ctx.inFlow) != null ? _ctx$inFlow : collection.flow;\n  var stringify = flow ? stringifyFlowCollection : stringifyBlockCollection;\n  return stringify(collection, ctx, options);\n}\nfunction stringifyBlockCollection(_ref, ctx, _ref2) {\n  var comment = _ref.comment,\n    items = _ref.items;\n  var blockItemPrefix = _ref2.blockItemPrefix,\n    flowChars = _ref2.flowChars,\n    itemIndent = _ref2.itemIndent,\n    onChompKeep = _ref2.onChompKeep,\n    onComment = _ref2.onComment;\n  var indent = ctx.indent,\n    commentString = ctx.options.commentString;\n  var itemCtx = Object.assign({}, ctx, {\n    indent: itemIndent,\n    type: null\n  });\n  var chompKeep = false;\n  var lines = [];\n  var _loop = function _loop() {\n    var item = items[i];\n    var comment = null;\n    if (isNode(item)) {\n      if (!chompKeep && item.spaceBefore) lines.push('');\n      addCommentBefore(ctx, lines, item.commentBefore, chompKeep);\n      if (item.comment) comment = item.comment;\n    } else if (isPair(item)) {\n      var ik = isNode(item.key) ? item.key : null;\n      if (ik) {\n        if (!chompKeep && ik.spaceBefore) lines.push('');\n        addCommentBefore(ctx, lines, ik.commentBefore, chompKeep);\n      }\n    }\n    chompKeep = false;\n    var str = stringify(item, itemCtx, function () {\n      return comment = null;\n    }, function () {\n      return chompKeep = true;\n    });\n    if (comment) str += lineComment(str, itemIndent, commentString(comment));\n    if (chompKeep && comment) chompKeep = false;\n    lines.push(blockItemPrefix + str);\n  };\n  for (var i = 0; i < items.length; ++i) {\n    _loop();\n  }\n  var str;\n  if (lines.length === 0) {\n    str = flowChars.start + flowChars.end;\n  } else {\n    str = lines[0];\n    for (var _i = 1; _i < lines.length; ++_i) {\n      var line = lines[_i];\n      str += line ? `\\n${indent}${line}` : '\\n';\n    }\n  }\n  if (comment) {\n    str += '\\n' + indentComment(commentString(comment), indent);\n    if (onComment) onComment();\n  } else if (chompKeep && onChompKeep) onChompKeep();\n  return str;\n}\nfunction stringifyFlowCollection(_ref3, ctx, _ref4) {\n  var comment = _ref3.comment,\n    items = _ref3.items;\n  var flowChars = _ref4.flowChars,\n    itemIndent = _ref4.itemIndent,\n    onComment = _ref4.onComment;\n  var indent = ctx.indent,\n    indentStep = ctx.indentStep,\n    fcPadding = ctx.flowCollectionPadding,\n    commentString = ctx.options.commentString;\n  itemIndent += indentStep;\n  var itemCtx = Object.assign({}, ctx, {\n    indent: itemIndent,\n    inFlow: true,\n    type: null\n  });\n  var reqNewline = false;\n  var linesAtValue = 0;\n  var lines = [];\n  var _loop2 = function _loop2() {\n    var item = items[i];\n    var comment = null;\n    if (isNode(item)) {\n      if (item.spaceBefore) lines.push('');\n      addCommentBefore(ctx, lines, item.commentBefore, false);\n      if (item.comment) comment = item.comment;\n    } else if (isPair(item)) {\n      var ik = isNode(item.key) ? item.key : null;\n      if (ik) {\n        if (ik.spaceBefore) lines.push('');\n        addCommentBefore(ctx, lines, ik.commentBefore, false);\n        if (ik.comment) reqNewline = true;\n      }\n      var iv = isNode(item.value) ? item.value : null;\n      if (iv) {\n        if (iv.comment) comment = iv.comment;\n        if (iv.commentBefore) reqNewline = true;\n      } else if (item.value == null && ik != null && ik.comment) {\n        comment = ik.comment;\n      }\n    }\n    if (comment) reqNewline = true;\n    var str = stringify(item, itemCtx, function () {\n      return comment = null;\n    });\n    if (i < items.length - 1) str += ',';\n    if (comment) str += lineComment(str, itemIndent, commentString(comment));\n    if (!reqNewline && (lines.length > linesAtValue || str.includes('\\n'))) reqNewline = true;\n    lines.push(str);\n    linesAtValue = lines.length;\n  };\n  for (var i = 0; i < items.length; ++i) {\n    _loop2();\n  }\n  var str;\n  var start = flowChars.start,\n    end = flowChars.end;\n  if (lines.length === 0) {\n    str = start + end;\n  } else {\n    if (!reqNewline) {\n      var len = lines.reduce(function (sum, line) {\n        return sum + line.length + 2;\n      }, 2);\n      reqNewline = len > Collection.maxFlowStringSingleLineLength;\n    }\n    if (reqNewline) {\n      str = start;\n      for (var line of lines) str += line ? `\\n${indentStep}${indent}${line}` : '\\n';\n      str += `\\n${indent}${end}`;\n    } else {\n      str = `${start}${fcPadding}${lines.join(' ')}${fcPadding}${end}`;\n    }\n  }\n  if (comment) {\n    str += lineComment(str, indent, commentString(comment));\n    if (onComment) onComment();\n  }\n  return str;\n}\nfunction addCommentBefore(_ref5, lines, comment, chompKeep) {\n  var indent = _ref5.indent,\n    commentString = _ref5.options.commentString;\n  if (comment && chompKeep) comment = comment.replace(/^\\n+/, '');\n  if (comment) {\n    var ic = indentComment(commentString(comment), indent);\n    lines.push(ic.trimStart());\n  }\n}\nexport { stringifyCollection };","map":{"version":3,"names":["Collection","isNode","isPair","stringify","lineComment","indentComment","stringifyCollection","collection","ctx","options","_ctx$inFlow","flow","inFlow","stringifyFlowCollection","stringifyBlockCollection","_ref","_ref2","comment","items","blockItemPrefix","flowChars","itemIndent","onChompKeep","onComment","indent","commentString","itemCtx","Object","assign","type","chompKeep","lines","_loop","item","i","spaceBefore","push","addCommentBefore","commentBefore","ik","key","str","length","start","end","line","_ref3","_ref4","indentStep","fcPadding","flowCollectionPadding","reqNewline","linesAtValue","_loop2","iv","value","includes","len","reduce","sum","maxFlowStringSingleLineLength","join","_ref5","replace","ic","trimStart"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/browser/dist/stringify/stringifyCollection.js"],"sourcesContent":["import { Collection } from '../nodes/Collection.js';\nimport { isNode, isPair } from '../nodes/identity.js';\nimport { stringify } from './stringify.js';\nimport { lineComment, indentComment } from './stringifyComment.js';\n\nfunction stringifyCollection(collection, ctx, options) {\n    const flow = ctx.inFlow ?? collection.flow;\n    const stringify = flow ? stringifyFlowCollection : stringifyBlockCollection;\n    return stringify(collection, ctx, options);\n}\nfunction stringifyBlockCollection({ comment, items }, ctx, { blockItemPrefix, flowChars, itemIndent, onChompKeep, onComment }) {\n    const { indent, options: { commentString } } = ctx;\n    const itemCtx = Object.assign({}, ctx, { indent: itemIndent, type: null });\n    let chompKeep = false; // flag for the preceding node's status\n    const lines = [];\n    for (let i = 0; i < items.length; ++i) {\n        const item = items[i];\n        let comment = null;\n        if (isNode(item)) {\n            if (!chompKeep && item.spaceBefore)\n                lines.push('');\n            addCommentBefore(ctx, lines, item.commentBefore, chompKeep);\n            if (item.comment)\n                comment = item.comment;\n        }\n        else if (isPair(item)) {\n            const ik = isNode(item.key) ? item.key : null;\n            if (ik) {\n                if (!chompKeep && ik.spaceBefore)\n                    lines.push('');\n                addCommentBefore(ctx, lines, ik.commentBefore, chompKeep);\n            }\n        }\n        chompKeep = false;\n        let str = stringify(item, itemCtx, () => (comment = null), () => (chompKeep = true));\n        if (comment)\n            str += lineComment(str, itemIndent, commentString(comment));\n        if (chompKeep && comment)\n            chompKeep = false;\n        lines.push(blockItemPrefix + str);\n    }\n    let str;\n    if (lines.length === 0) {\n        str = flowChars.start + flowChars.end;\n    }\n    else {\n        str = lines[0];\n        for (let i = 1; i < lines.length; ++i) {\n            const line = lines[i];\n            str += line ? `\\n${indent}${line}` : '\\n';\n        }\n    }\n    if (comment) {\n        str += '\\n' + indentComment(commentString(comment), indent);\n        if (onComment)\n            onComment();\n    }\n    else if (chompKeep && onChompKeep)\n        onChompKeep();\n    return str;\n}\nfunction stringifyFlowCollection({ comment, items }, ctx, { flowChars, itemIndent, onComment }) {\n    const { indent, indentStep, flowCollectionPadding: fcPadding, options: { commentString } } = ctx;\n    itemIndent += indentStep;\n    const itemCtx = Object.assign({}, ctx, {\n        indent: itemIndent,\n        inFlow: true,\n        type: null\n    });\n    let reqNewline = false;\n    let linesAtValue = 0;\n    const lines = [];\n    for (let i = 0; i < items.length; ++i) {\n        const item = items[i];\n        let comment = null;\n        if (isNode(item)) {\n            if (item.spaceBefore)\n                lines.push('');\n            addCommentBefore(ctx, lines, item.commentBefore, false);\n            if (item.comment)\n                comment = item.comment;\n        }\n        else if (isPair(item)) {\n            const ik = isNode(item.key) ? item.key : null;\n            if (ik) {\n                if (ik.spaceBefore)\n                    lines.push('');\n                addCommentBefore(ctx, lines, ik.commentBefore, false);\n                if (ik.comment)\n                    reqNewline = true;\n            }\n            const iv = isNode(item.value) ? item.value : null;\n            if (iv) {\n                if (iv.comment)\n                    comment = iv.comment;\n                if (iv.commentBefore)\n                    reqNewline = true;\n            }\n            else if (item.value == null && ik?.comment) {\n                comment = ik.comment;\n            }\n        }\n        if (comment)\n            reqNewline = true;\n        let str = stringify(item, itemCtx, () => (comment = null));\n        if (i < items.length - 1)\n            str += ',';\n        if (comment)\n            str += lineComment(str, itemIndent, commentString(comment));\n        if (!reqNewline && (lines.length > linesAtValue || str.includes('\\n')))\n            reqNewline = true;\n        lines.push(str);\n        linesAtValue = lines.length;\n    }\n    let str;\n    const { start, end } = flowChars;\n    if (lines.length === 0) {\n        str = start + end;\n    }\n    else {\n        if (!reqNewline) {\n            const len = lines.reduce((sum, line) => sum + line.length + 2, 2);\n            reqNewline = len > Collection.maxFlowStringSingleLineLength;\n        }\n        if (reqNewline) {\n            str = start;\n            for (const line of lines)\n                str += line ? `\\n${indentStep}${indent}${line}` : '\\n';\n            str += `\\n${indent}${end}`;\n        }\n        else {\n            str = `${start}${fcPadding}${lines.join(' ')}${fcPadding}${end}`;\n        }\n    }\n    if (comment) {\n        str += lineComment(str, indent, commentString(comment));\n        if (onComment)\n            onComment();\n    }\n    return str;\n}\nfunction addCommentBefore({ indent, options: { commentString } }, lines, comment, chompKeep) {\n    if (comment && chompKeep)\n        comment = comment.replace(/^\\n+/, '');\n    if (comment) {\n        const ic = indentComment(commentString(comment), indent);\n        lines.push(ic.trimStart()); // Avoid double indent on first line\n    }\n}\n\nexport { stringifyCollection };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}