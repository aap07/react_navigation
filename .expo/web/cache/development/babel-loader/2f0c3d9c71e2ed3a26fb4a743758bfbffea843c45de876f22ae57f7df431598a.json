{"ast":null,"code":"import { getConfigForPWA } from \"./Manifest\";\nexport { getConfigForPWA };\nexport { getSafariStartupImageConfig, getSafariIconConfig, getFaviconIconConfig, getChromeIconConfig } from \"./Manifest\";\nexport { IconOptions, ProjectOptions, HTMLOutput, PWAConfig } from \"./Manifest.types\";","map":{"version":3,"names":["getConfigForPWA","getSafariStartupImageConfig","getSafariIconConfig","getFaviconIconConfig","getChromeIconConfig","IconOptions","ProjectOptions","HTMLOutput","PWAConfig"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/expo-pwa/build/index.d.ts"],"sourcesContent":["import type { ExpoConfig } from 'expo/config';\nimport { getConfigForPWA } from './Manifest';\nimport { HTMLOutput, IconOptions, Manifest, ProjectOptions } from './Manifest.types';\n/**\n * Joins a url protocol + host to path segments, falls back to path.join\n * if result is not a valid url.\n */\nexport declare function joinUrlPath(publicPath: string, ...toJoin: string[]): string;\nexport declare function generateAsync(type: string, options: ProjectOptions, icon: IconOptions): Promise<HTMLOutput[]>;\nexport declare function generateSplashAsync({ projectRoot, publicPath }: ProjectOptions, icon: IconOptions): Promise<HTMLOutput[]>;\nexport declare function generateAppleIconAsync({ projectRoot, publicPath }: ProjectOptions, icon: IconOptions, { sizes }: {\n    sizes?: number[];\n}): Promise<HTMLOutput[]>;\nexport declare function generateChromeIconAsync({ projectRoot, publicPath }: ProjectOptions, icon: IconOptions, { sizes }: {\n    sizes?: number[];\n}): Promise<HTMLOutput[]>;\nexport declare function generateFaviconAsync({ projectRoot, publicPath }: ProjectOptions, icon: IconOptions): Promise<HTMLOutput[]>;\nexport declare function generateManifestAsync(options: ProjectOptions, configPath?: string, config?: ExpoConfig): Promise<HTMLOutput[]>;\nexport declare function generateManifestJson({ projectRoot }: Partial<ProjectOptions>, config?: ExpoConfig): Manifest;\nexport { getConfigForPWA };\nexport { getSafariStartupImageConfig, getSafariIconConfig, getFaviconIconConfig, getChromeIconConfig, } from './Manifest';\nexport { IconOptions, ProjectOptions, HTMLOutput, PWAConfig } from './Manifest.types';\n"],"mappings":"AACA,SAASA,eAAe;AAkBxB,SAASA,eAAe;AACxB,SAASC,2BAA2B,EAAEC,mBAAmB,EAAEC,oBAAoB,EAAEC,mBAAmB;AACpG,SAASC,WAAW,EAAEC,cAAc,EAAEC,UAAU,EAAEC,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}