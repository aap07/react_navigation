{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatDeviceChoice = formatDeviceChoice;\nexports.promptDeviceAsync = promptDeviceAsync;\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _prompts = _interopRequireDefault(require(\"../../../utils/prompts\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction isConnectedDevice(item) {\n  return \"deviceType\" in item;\n}\nfunction isSimControlDevice(item) {\n  return \"state\" in item;\n}\nfunction formatDeviceChoice(item) {\n  var isConnected = isConnectedDevice(item) && item.deviceType === \"device\";\n  var isActive = isSimControlDevice(item) && item.state === \"Booted\";\n  var symbol = isConnected ? item.connectionType === \"Network\" ? \"\\uD83C\\uDF10 \" : \"\\uD83D\\uDD0C \" : \"\";\n  var format = isActive ? _chalk.default.bold : function (text) {\n    return text;\n  };\n  return {\n    title: `${symbol}${format(item.name)}${item.osVersion ? _chalk.default.dim(` (${item.osVersion})`) : \"\"}`,\n    value: item.udid\n  };\n}\nfunction promptDeviceAsync(_x) {\n  return _promptDeviceAsync.apply(this, arguments);\n}\nfunction _promptDeviceAsync() {\n  _promptDeviceAsync = _asyncToGenerator(function* (devices) {\n    var _yield$default = yield (0, _prompts).default({\n        type: \"autocomplete\",\n        name: \"value\",\n        limit: 11,\n        message: \"Select a device\",\n        choices: devices.map(function (item) {\n          return formatDeviceChoice(item);\n        }),\n        suggest: function suggest(input, choices) {\n          var regex = new RegExp(input, \"i\");\n          return choices.filter(function (choice) {\n            return regex.test(choice.title);\n          });\n        }\n      }),\n      value = _yield$default.value;\n    return devices.find(function (device) {\n      return device.udid === value;\n    });\n  });\n  return _promptDeviceAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","formatDeviceChoice","promptDeviceAsync","_chalk","_interopRequireDefault","_prompts","isConnectedDevice","item","isSimControlDevice","isConnected","deviceType","isActive","state","symbol","connectionType","format","default","bold","text","title","name","osVersion","dim","value","udid","_x","_promptDeviceAsync","apply","arguments","devices","_yield$default","type","limit","message","choices","map","suggest","input","regex","RegExp","filter","choice","test","find","device"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\run\\ios\\options\\promptDevice.ts"],"sourcesContent":["import chalk from 'chalk';\n\nimport * as SimControl from '../../../start/platforms/ios/simctl';\nimport prompt from '../../../utils/prompts';\nimport { ConnectedDevice } from '../appleDevice/AppleDevice';\n\ntype AnyDevice = SimControl.Device | ConnectedDevice;\n\nfunction isConnectedDevice(item: AnyDevice): item is ConnectedDevice {\n  return 'deviceType' in item;\n}\n\nfunction isSimControlDevice(item: AnyDevice): item is SimControl.Device {\n  return 'state' in item;\n}\n\n/** Format a device for the prompt list. Exposed for testing. */\nexport function formatDeviceChoice(item: AnyDevice): { title: string; value: string } {\n  const isConnected = isConnectedDevice(item) && item.deviceType === 'device';\n  const isActive = isSimControlDevice(item) && item.state === 'Booted';\n  const symbol = isConnected ? (item.connectionType === 'Network' ? '🌐 ' : '🔌 ') : '';\n  const format = isActive ? chalk.bold : (text: string) => text;\n  return {\n    title: `${symbol}${format(item.name)}${\n      item.osVersion ? chalk.dim(` (${item.osVersion})`) : ''\n    }`,\n    value: item.udid,\n  };\n}\n\n/** Prompt to select a device from a searchable list of devices. */\nexport async function promptDeviceAsync(devices: AnyDevice[]): Promise<AnyDevice> {\n  // --device with no props after\n  const { value } = await prompt({\n    type: 'autocomplete',\n    name: 'value',\n    limit: 11,\n    message: 'Select a device',\n    choices: devices.map((item) => formatDeviceChoice(item)),\n    suggest: (input: any, choices: any) => {\n      const regex = new RegExp(input, 'i');\n      return choices.filter((choice: any) => regex.test(choice.title));\n    },\n  });\n  return devices.find((device) => device.udid === value)!;\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,iBAAA,GAAAC,OAAA;;;;QAiBgBC,kBAAkB,GAAlBA,kBAAkB;QAcZC,iBAAiB,GAAjBA,iBAAiB;AA/BrB,IAAAC,MAAO,GAAAC,sBAAA,CAAAJ,OAAA,CAAP,OAAO;AAGN,IAAAK,QAAwB,GAAAD,sBAAA,CAAAJ,OAAA;;;;;;AAK3C,SAASM,iBAAiBA,CAACC,IAAe,EAA2B;EACnE,OAAO,YAAY,IAAIA,IAAI;;AAG7B,SAASC,kBAAkBA,CAACD,IAAe,EAA6B;EACtE,OAAO,OAAO,IAAIA,IAAI;;AAIjB,SAASN,kBAAkBA,CAACM,IAAe,EAAoC;EACpF,IAAME,WAAW,GAAGH,iBAAiB,CAACC,IAAI,CAAC,IAAIA,IAAI,CAACG,UAAU,KAAK,QAAQ;EAC3E,IAAMC,QAAQ,GAAGH,kBAAkB,CAACD,IAAI,CAAC,IAAIA,IAAI,CAACK,KAAK,KAAK,QAAQ;EACpE,IAAMC,MAAM,GAAGJ,WAAW,GAAIF,IAAI,CAACO,cAAc,KAAK,SAAS,GAAG,eAAI,GAAM,eAAI,GAAI,EAAE;EACnF,IAAMC,MAAM,GAAGJ,QAAQ,GAAGR,MAAK,CAAAa,OAAA,CAACC,IAAI,GAAG,UAACC,IAAY;IAAA,OAAKA,IAAI;EAAA;EAC7D,OAAO;IACLC,KAAK,EAAG,GAAEN,MAAO,GAAEE,MAAM,CAACR,IAAI,CAACa,IAAI,CAAE,GACnCb,IAAI,CAACc,SAAS,GAAGlB,MAAK,CAAAa,OAAA,CAACM,GAAG,CAAE,KAAIf,IAAI,CAACc,SAAU,GAAE,CAAC,GAAG,EACtD,EAAC;IACFE,KAAK,EAAEhB,IAAI,CAACiB;GACb;;AACF,SAGqBtB,iBAAiBA,CAAAuB,EAAA;EAAA,OAAAC,kBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,mBAAA;EAAAA,kBAAA,GAAA3B,iBAAA,CAAhC,WAAiC8B,OAAoB,EAAsB;IAEhF,IAAAC,cAAA,SAAwB,IAAAzB,QAAM,EAU5BW,OAV4B,CAAC;QAC7Be,IAAI,EAAE,cAAc;QACpBX,IAAI,EAAE,OAAO;QACbY,KAAK,EAAE,EAAE;QACTC,OAAO,EAAE,iBAAiB;QAC1BC,OAAO,EAAEL,OAAO,CAACM,GAAG,CAAC,UAAC5B,IAAI;UAAA,OAAKN,kBAAkB,CAACM,IAAI,CAAC;QAAA,EAAC;QACxD6B,OAAO,EAAE,SAAAA,QAACC,KAAU,EAAEH,OAAY,EAAK;UACrC,IAAMI,KAAK,GAAG,IAAIC,MAAM,CAACF,KAAK,EAAE,GAAG,CAAC;UACpC,OAAOH,OAAO,CAACM,MAAM,CAAC,UAACC,MAAW;YAAA,OAAKH,KAAK,CAACI,IAAI,CAACD,MAAM,CAACtB,KAAK,CAAC;UAAA,EAAC;;OAEnE,CAAC;MAVMI,KAAK,GAAAO,cAAA,CAALP,KAAK;IAWb,OAAOM,OAAO,CAACc,IAAI,CAAC,UAACC,MAAM;MAAA,OAAKA,MAAM,CAACpB,IAAI,KAAKD,KAAK;IAAA,EAAC;GACvD;EAAA,OAAAG,kBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}