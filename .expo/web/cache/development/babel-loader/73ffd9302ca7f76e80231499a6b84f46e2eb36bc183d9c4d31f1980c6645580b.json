{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _child_process() {\n  var data = require(\"child_process\");\n  _child_process = function _child_process() {\n    return data;\n  };\n  return data;\n}\nfunction _os() {\n  var data = _interopRequireDefault(require(\"os\"));\n  _os = function _os() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function _cliTools() {\n    return data;\n  };\n  return data;\n}\nvar _listIOSDevices = _interopRequireDefault(require(\"../../tools/listIOSDevices\"));\nvar _getSimulators = _interopRequireDefault(require(\"../../tools/getSimulators\"));\nfunction _prompts() {\n  var data = _interopRequireDefault(require(\"prompts\"));\n  _prompts = function _prompts() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction logIOS(_x, _x2, _x3) {\n  return _logIOS.apply(this, arguments);\n}\nfunction _logIOS() {\n  _logIOS = _asyncToGenerator(function* (_argv, _ctx, args) {\n    var simulators = (0, _getSimulators.default)();\n    var bootedSimulators = Object.keys(simulators.devices).map(function (key) {\n      return simulators.devices[key];\n    }).reduce(function (acc, val) {\n      return acc.concat(val);\n    }, []).filter(function (_ref) {\n      var state = _ref.state;\n      return state === 'Booted';\n    });\n    var devices = yield (0, _listIOSDevices.default)();\n    var availableSimulators = devices.filter(function (_ref2) {\n      var type = _ref2.type,\n        isAvailable = _ref2.isAvailable;\n      return type === 'simulator' && isAvailable;\n    });\n    var bootedAndAvailableSimulators = bootedSimulators.map(function (booted) {\n      var available = availableSimulators.find(function (_ref3) {\n        var udid = _ref3.udid;\n        return udid === booted.udid;\n      });\n      return _objectSpread(_objectSpread({}, available), booted);\n    });\n    if (bootedAndAvailableSimulators.length === 0) {\n      _cliTools().logger.error('No active iOS device found');\n      return;\n    }\n    if (args.interactive && bootedAndAvailableSimulators.length > 1) {\n      var _yield = yield (0, _prompts().default)({\n          type: 'select',\n          name: 'udid',\n          message: 'Select iOS simulators to tail logs from',\n          choices: bootedAndAvailableSimulators.map(function (simulator) {\n            return {\n              title: simulator.name,\n              value: simulator.udid\n            };\n          })\n        }),\n        udid = _yield.udid;\n      tailDeviceLogs(udid);\n    } else {\n      tailDeviceLogs(bootedAndAvailableSimulators[0].udid);\n    }\n  });\n  return _logIOS.apply(this, arguments);\n}\nfunction tailDeviceLogs(udid) {\n  var logDir = _path().default.join(_os().default.homedir(), 'Library', 'Logs', 'CoreSimulator', udid, 'asl');\n  var log = (0, _child_process().spawnSync)('syslog', ['-w', '-F', 'std', '-d', logDir], {\n    stdio: 'inherit'\n  });\n  if (log.error !== null) {\n    throw log.error;\n  }\n}\nvar _default = {\n  name: 'log-ios',\n  description: 'starts iOS device syslog tail',\n  func: logIOS,\n  options: [{\n    name: '--interactive',\n    description: 'Explicitly select simulator to tail logs from. By default it will tail logs from the first booted and available simulator.'\n  }]\n};\nexports.default = _default;","map":{"version":3,"names":["_defineProperty","require","_asyncToGenerator","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","exports","value","default","_child_process","data","_os","_interopRequireDefault","_path","_cliTools","_listIOSDevices","_getSimulators","_prompts","obj","__esModule","logIOS","_x","_x2","_x3","_logIOS","_argv","_ctx","args","simulators","bootedSimulators","devices","map","key","reduce","acc","val","concat","_ref","state","availableSimulators","_ref2","type","isAvailable","bootedAndAvailableSimulators","booted","available","find","_ref3","udid","logger","error","interactive","_yield","name","message","choices","simulator","title","tailDeviceLogs","logDir","join","homedir","log","spawnSync","stdio","_default","description","func","options"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-platform-ios/build/commands/logIOS/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _child_process() {\n  const data = require(\"child_process\");\n  _child_process = function () {\n    return data;\n  };\n  return data;\n}\nfunction _os() {\n  const data = _interopRequireDefault(require(\"os\"));\n  _os = function () {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n  _path = function () {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function () {\n    return data;\n  };\n  return data;\n}\nvar _listIOSDevices = _interopRequireDefault(require(\"../../tools/listIOSDevices\"));\nvar _getSimulators = _interopRequireDefault(require(\"../../tools/getSimulators\"));\nfunction _prompts() {\n  const data = _interopRequireDefault(require(\"prompts\"));\n  _prompts = function () {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nasync function logIOS(_argv, _ctx, args) {\n  // Here we're using two command because first command `xcrun simctl list --json devices` outputs `state` but doesn't return `available`. But second command `xcrun xcdevice list` outputs `available` but doesn't output `state`. So we need to connect outputs of both commands.\n  const simulators = (0, _getSimulators.default)();\n  const bootedSimulators = Object.keys(simulators.devices).map(key => simulators.devices[key]).reduce((acc, val) => acc.concat(val), []).filter(({\n    state\n  }) => state === 'Booted');\n  const devices = await (0, _listIOSDevices.default)();\n  const availableSimulators = devices.filter(({\n    type,\n    isAvailable\n  }) => type === 'simulator' && isAvailable);\n  const bootedAndAvailableSimulators = bootedSimulators.map(booted => {\n    const available = availableSimulators.find(({\n      udid\n    }) => udid === booted.udid);\n    return {\n      ...available,\n      ...booted\n    };\n  });\n  if (bootedAndAvailableSimulators.length === 0) {\n    _cliTools().logger.error('No active iOS device found');\n    return;\n  }\n  if (args.interactive && bootedAndAvailableSimulators.length > 1) {\n    const {\n      udid\n    } = await (0, _prompts().default)({\n      type: 'select',\n      name: 'udid',\n      message: 'Select iOS simulators to tail logs from',\n      choices: bootedAndAvailableSimulators.map(simulator => ({\n        title: simulator.name,\n        value: simulator.udid\n      }))\n    });\n    tailDeviceLogs(udid);\n  } else {\n    tailDeviceLogs(bootedAndAvailableSimulators[0].udid);\n  }\n}\nfunction tailDeviceLogs(udid) {\n  const logDir = _path().default.join(_os().default.homedir(), 'Library', 'Logs', 'CoreSimulator', udid, 'asl');\n  const log = (0, _child_process().spawnSync)('syslog', ['-w', '-F', 'std', '-d', logDir], {\n    stdio: 'inherit'\n  });\n  if (log.error !== null) {\n    throw log.error;\n  }\n}\nvar _default = {\n  name: 'log-ios',\n  description: 'starts iOS device syslog tail',\n  func: logIOS,\n  options: [{\n    name: '--interactive',\n    description: 'Explicitly select simulator to tail logs from. By default it will tail logs from the first booted and available simulator.'\n  }]\n};\nexports.default = _default;\n\n//# sourceMappingURL=index.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}