{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n  _execa = function _execa() {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function _cliTools() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction tryLaunchAppOnDevice(device, packageName, adbPath, args) {\n  var appId = args.appId,\n    appIdSuffix = args.appIdSuffix;\n  var packageNameWithSuffix = [appId || packageName, appIdSuffix].filter(Boolean).join('.');\n  var activityToLaunch = args.mainActivity.includes('.') ? args.mainActivity : [packageName, args.mainActivity].filter(Boolean).join('.');\n  try {\n    var adbArgs = ['shell', 'am', 'start', '-n', `${packageNameWithSuffix}/${activityToLaunch}`, '-a', 'android.intent.action.MAIN', '-c', 'android.intent.category.LAUNCHER'];\n    if (device) {\n      adbArgs.unshift('-s', device);\n      _cliTools().logger.info(`Starting the app on \"${device}\"...`);\n    } else {\n      _cliTools().logger.info('Starting the app...');\n    }\n    _cliTools().logger.debug(`Running command \"${adbPath} ${adbArgs.join(' ')}\"`);\n    _execa().default.sync(adbPath, adbArgs, {\n      stdio: 'inherit'\n    });\n  } catch (error) {\n    throw new (_cliTools().CLIError)('Failed to start the app.', error);\n  }\n}\nvar _default = tryLaunchAppOnDevice;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_execa","data","_interopRequireDefault","require","_cliTools","obj","__esModule","tryLaunchAppOnDevice","device","packageName","adbPath","args","appId","appIdSuffix","packageNameWithSuffix","filter","Boolean","join","activityToLaunch","mainActivity","includes","adbArgs","unshift","logger","info","debug","sync","stdio","error","CLIError","_default"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchAppOnDevice.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _execa() {\n  const data = _interopRequireDefault(require(\"execa\"));\n  _execa = function () {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function () {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction tryLaunchAppOnDevice(device, packageName, adbPath, args) {\n  const {\n    appId,\n    appIdSuffix\n  } = args;\n  const packageNameWithSuffix = [appId || packageName, appIdSuffix].filter(Boolean).join('.');\n  const activityToLaunch = args.mainActivity.includes('.') ? args.mainActivity : [packageName, args.mainActivity].filter(Boolean).join('.');\n  try {\n    // Here we're using the same flags as Android Studio to launch the app\n    const adbArgs = ['shell', 'am', 'start', '-n', `${packageNameWithSuffix}/${activityToLaunch}`, '-a', 'android.intent.action.MAIN', '-c', 'android.intent.category.LAUNCHER'];\n    if (device) {\n      adbArgs.unshift('-s', device);\n      _cliTools().logger.info(`Starting the app on \"${device}\"...`);\n    } else {\n      _cliTools().logger.info('Starting the app...');\n    }\n    _cliTools().logger.debug(`Running command \"${adbPath} ${adbArgs.join(' ')}\"`);\n    _execa().default.sync(adbPath, adbArgs, {\n      stdio: 'inherit'\n    });\n  } catch (error) {\n    throw new (_cliTools().CLIError)('Failed to start the app.', error);\n  }\n}\nvar _default = tryLaunchAppOnDevice;\nexports.default = _default;\n\n//# sourceMappingURL=tryLaunchAppOnDevice.ts.map"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AACxB,SAASC,MAAMA,CAAA,EAAG;EAChB,IAAMC,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;EACrDH,MAAM,GAAG,SAAAA,OAAA,EAAY;IACnB,OAAOC,IAAI;EACb,CAAC;EACD,OAAOA,IAAI;AACb;AACA,SAASG,SAASA,CAAA,EAAG;EACnB,IAAMH,IAAI,GAAGE,OAAO,CAAC,mCAAmC,CAAC;EACzDC,SAAS,GAAG,SAAAA,UAAA,EAAY;IACtB,OAAOH,IAAI;EACb,CAAC;EACD,OAAOA,IAAI;AACb;AACA,SAASC,sBAAsBA,CAACG,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEN,OAAO,EAAEM;EAAI,CAAC;AAAE;AAS9F,SAASE,oBAAoBA,CAACC,MAAM,EAAEC,WAAW,EAAEC,OAAO,EAAEC,IAAI,EAAE;EAChE,IACEC,KAAK,GAEHD,IAAI,CAFNC,KAAK;IACLC,WAAW,GACTF,IAAI,CADNE,WAAW;EAEb,IAAMC,qBAAqB,GAAG,CAACF,KAAK,IAAIH,WAAW,EAAEI,WAAW,CAAC,CAACE,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EAC3F,IAAMC,gBAAgB,GAAGP,IAAI,CAACQ,YAAY,CAACC,QAAQ,CAAC,GAAG,CAAC,GAAGT,IAAI,CAACQ,YAAY,GAAG,CAACV,WAAW,EAAEE,IAAI,CAACQ,YAAY,CAAC,CAACJ,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EACzI,IAAI;IAEF,IAAMI,OAAO,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAG,GAAEP,qBAAsB,IAAGI,gBAAiB,EAAC,EAAE,IAAI,EAAE,4BAA4B,EAAE,IAAI,EAAE,kCAAkC,CAAC;IAC5K,IAAIV,MAAM,EAAE;MACVa,OAAO,CAACC,OAAO,CAAC,IAAI,EAAEd,MAAM,CAAC;MAC7BJ,SAAS,CAAC,CAAC,CAACmB,MAAM,CAACC,IAAI,CAAE,wBAAuBhB,MAAO,MAAK,CAAC;IAC/D,CAAC,MAAM;MACLJ,SAAS,CAAC,CAAC,CAACmB,MAAM,CAACC,IAAI,CAAC,qBAAqB,CAAC;IAChD;IACApB,SAAS,CAAC,CAAC,CAACmB,MAAM,CAACE,KAAK,CAAE,oBAAmBf,OAAQ,IAAGW,OAAO,CAACJ,IAAI,CAAC,GAAG,CAAE,GAAE,CAAC;IAC7EjB,MAAM,CAAC,CAAC,CAACD,OAAO,CAAC2B,IAAI,CAAChB,OAAO,EAAEW,OAAO,EAAE;MACtCM,KAAK,EAAE;IACT,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,KAAKxB,SAAS,CAAC,CAAC,CAACyB,QAAQ,EAAE,0BAA0B,EAAED,KAAK,CAAC;EACrE;AACF;AACA,IAAIE,QAAQ,GAAGvB,oBAAoB;AACnCV,OAAO,CAACE,OAAO,GAAG+B,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}