{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reactNativePlatformResolver = reactNativePlatformResolver;\nfunction reactNativePlatformResolver(platformImplementations) {\n  return function (context, moduleName, platform) {\n    var modifiedModuleName = moduleName;\n    if (platform != null && platformImplementations[platform]) {\n      if (moduleName === 'react-native') {\n        modifiedModuleName = platformImplementations[platform];\n      } else if (moduleName.startsWith('react-native/')) {\n        modifiedModuleName = `${platformImplementations[platform]}/${modifiedModuleName.slice('react-native/'.length)}`;\n      }\n    }\n    return context.resolveRequest(context, modifiedModuleName, platform);\n  };\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","reactNativePlatformResolver","platformImplementations","context","moduleName","platform","modifiedModuleName","startsWith","slice","length","resolveRequest"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-plugin-metro/build/tools/metroPlatformResolver.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reactNativePlatformResolver = reactNativePlatformResolver;\n/**\n * This is an implementation of a metro resolveRequest option which will remap react-native imports\n * to different npm packages based on the platform requested.  This allows a single metro instance/config\n * to produce bundles for multiple out of tree platforms at a time.\n *\n * @param platformImplementations\n * A map of platform to npm package that implements that platform\n *\n * Ex:\n * {\n *    windows: 'react-native-windows'\n *    macos: 'react-native-macos'\n * }\n */\n\nfunction reactNativePlatformResolver(platformImplementations) {\n  return (context, moduleName, platform) => {\n    let modifiedModuleName = moduleName;\n    if (platform != null && platformImplementations[platform]) {\n      if (moduleName === 'react-native') {\n        modifiedModuleName = platformImplementations[platform];\n      } else if (moduleName.startsWith('react-native/')) {\n        modifiedModuleName = `${platformImplementations[platform]}/${modifiedModuleName.slice('react-native/'.length)}`;\n      }\n    }\n    return context.resolveRequest(context, modifiedModuleName, platform);\n  };\n}\n\n//# sourceMappingURL=metroPlatformResolver.ts.map"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,2BAA2B,GAAGA,2BAA2B;AAgBjE,SAASA,2BAA2BA,CAACC,uBAAuB,EAAE;EAC5D,OAAO,UAACC,OAAO,EAAEC,UAAU,EAAEC,QAAQ,EAAK;IACxC,IAAIC,kBAAkB,GAAGF,UAAU;IACnC,IAAIC,QAAQ,IAAI,IAAI,IAAIH,uBAAuB,CAACG,QAAQ,CAAC,EAAE;MACzD,IAAID,UAAU,KAAK,cAAc,EAAE;QACjCE,kBAAkB,GAAGJ,uBAAuB,CAACG,QAAQ,CAAC;MACxD,CAAC,MAAM,IAAID,UAAU,CAACG,UAAU,CAAC,eAAe,CAAC,EAAE;QACjDD,kBAAkB,GAAI,GAAEJ,uBAAuB,CAACG,QAAQ,CAAE,IAAGC,kBAAkB,CAACE,KAAK,CAAC,eAAe,CAACC,MAAM,CAAE,EAAC;MACjH;IACF;IACA,OAAON,OAAO,CAACO,cAAc,CAACP,OAAO,EAAEG,kBAAkB,EAAED,QAAQ,CAAC;EACtE,CAAC;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}