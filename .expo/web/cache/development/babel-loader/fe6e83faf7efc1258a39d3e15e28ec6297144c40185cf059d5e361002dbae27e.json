{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/xcpretty/build/Matchers.d.ts"],"sourcesContent":["export declare const Matchers: {\n    /**\n     * @regex Captured groups\n     * `$1` filePath\n     * `$2` fileName\n     */\n    ANALYZE_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` target\n     * `$2` project\n     * `$3` configuration\n     */\n    BUILD_TARGET_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` target\n     * `$2` project\n     * `$3` configuration\n     */\n    AGGREGATE_TARGET_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` target\n     * `$2` project\n     * `$3` configuration\n     */\n    ANALYZE_TARGET_MATCHER: RegExp;\n    CHECK_DEPENDENCIES_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` command path\n     * `$2` arguments\n     */\n    SHELL_COMMAND_MATCHER: RegExp;\n    /**\n     * @regex Nothing returned here for now\n     */\n    CLEAN_REMOVE_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` target\n     * `$2` project\n     * `$3` configuration\n     */\n    CLEAN_TARGET_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` = file\n     * `$2` fileName (e.g. Exponent.app)\n     * `$3` target (e.g. ABI39_0_0EXAdsFacebook)\n     * `$4` project (e.g. ABI39_0_0)\n     */\n    CODESIGN_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` = file\n     */\n    CODESIGN_FRAMEWORK_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` type\n     * `$2` filePath\n     * `$3` fileName (e.g. KWNull.m)\n     * `$4` target (e.g. ABI39_0_0EXAdsFacebook)\n     * `$5` project (e.g. ABI39_0_0)\n     *\n     * The order of extensions is important in order to make alternation greedier.\n     */\n    COMPILE_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` compiler_command\n     * `$2` filePath\n     */\n    COMPILE_COMMAND_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` filePath\n     * `$2` fileName (e.g. MainMenu.xib)\n     */\n    COMPILE_XIB_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` filePath\n     * `$2` fileName (e.g. Main.storyboard)\n     */\n    COMPILE_STORYBOARD_MATCHER: RegExp;\n    /**\n     * `$1` type of copy\n     * `$2` file path 1\n     * `$3` file path 2\n     * `$4` target\n     * `$5` project\n     */\n    ANY_COPY_MATCHER: RegExp;\n    /**\n     * `CompileSwiftSources normal x86_64 com.apple.xcode.tools.swift.compiler (in target 'expo-dev-menu-interface' from project 'Pods')`\n     */\n    COMPILE_SWIFT_SOURCES_MATCHER: RegExp;\n    /**\n     * `EmitSwiftModule normal x86_64 (in target 'expo-dev-menu-interface' from project 'Pods')`\n     */\n    EMIT_SWIFT_MODULE_MATCHER: RegExp;\n    EXECUTED_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` = whole message.\n     *\n     * `remark: Incremental compilation has been disabled: it is not compatible with whole module optimization`\n     */\n    REMARK_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` = file\n     * `$2` = test_suite\n     * `$3` = test_case\n     * `$4` = reason\n     */\n    FAILING_TEST_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` = file\n     * `$2` = reason\n     */\n    UI_FAILING_TEST_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     */\n    RESTARTING_TESTS_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` = dsym\n     */\n    GENERATE_DSYM_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` = library\n     */\n    LIBTOOL_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` = targetName\n     * `$2` = build_variants (normal, profile, debug)\n     * `$3` = architecture\n     */\n    LINKING_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` = suite\n     * `$2` = test_case\n     * `$3` = time\n     */\n    TEST_CASE_PASSED_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` = suite\n     * `$2` = test_case\n     */\n    TEST_CASE_STARTED_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` = suite\n     * `$2` = test_case\n     */\n    TEST_CASE_PENDING_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` = suite\n     * `$2` = test_case\n     * `$3` = time\n     */\n    TEST_CASE_MEASURED_MATCHER: RegExp;\n    PHASE_SUCCESS_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` = script_name\n     */\n    PHASE_SCRIPT_EXECUTION_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` = file\n     * `$1` = target\n     * `$1` = project\n     */\n    PROCESS_PCH_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` filePath\n     */\n    PROCESS_PCH_COMMAND_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` = file\n     */\n    PREPROCESS_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` = file\n     */\n    PBXCP_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` = file\n     */\n    PROCESS_INFO_PLIST_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` = suite\n     * `$2` = time\n     */\n    TESTS_RUN_COMPLETION_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` = suite\n     * `$2` = time\n     */\n    TEST_SUITE_STARTED_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` test suite name\n     */\n    TEST_SUITE_START_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` fileName\n     */\n    TIFFUTIL_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` filePath\n     * `$2` fileName\n     */\n    TOUCH_MATCHER: RegExp;\n    /**\n     * @regex Captured groups\n     * `$1` filePath\n     */\n    WRITE_FILE_MATCHER: RegExp;\n    WRITE_AUXILIARY_FILES: RegExp;\n    Warnings: {\n        /**\n         * @regex Captured groups\n         * `$1` = filePath\n         * `$2` = fileName\n         * `$3` = reason\n         */\n        COMPILE_WARNING_MATCHER: RegExp;\n        COMPILE_WARNING_INLINE_MATCHER: RegExp;\n        /**\n         * @regex Captured groups\n         * `$1` = ld prefix\n         * `$2` = warning message\n         */\n        LD_WARNING_MATCHER: RegExp;\n        /**\n         * @regex Captured groups\n         * `$1` = whole warning\n         */\n        GENERIC_WARNING_MATCHER: RegExp;\n        /**\n         * @regex Captured groups\n         * `$1` = filePath\n         */\n        MISSING_FILE_COMPILER_WARNING_MATCHER: RegExp;\n        /**\n         * @regex Captured groups\n         * `$1` filePath\n         * `$2` fileName\n         */\n        VERSION_MISMATCH: RegExp;\n        /**\n         * @regex Captured groups\n         */\n        MISSING_ARCHITECTURE: RegExp;\n        /**\n         * @regex Captured groups\n         * `$1` buildPhase\n         * `$2` filePath\n         * `$3` target\n         * `$4` project\n         */\n        SKIPPING_DUPLICATE_FILE: RegExp;\n        /**\n         * @regex Captured groups\n         * `$1` reservedFileDescription (Info.plist or entitlements)\n         * `$2` filePath\n         * `$3` target\n         * `$4` project\n         */\n        TARGETS_FILE_INCLUDED: RegExp;\n        /**\n         * @regex Captured groups\n         * `$1` = whole warning\n         */\n        WILL_NOT_BE_CODE_SIGNED_MATCHER: RegExp;\n        /**\n         * @regex Captured groups\n         * `$1` = whole warning\n         */\n        LINKER_METHOD_OVERRIDE: RegExp;\n    };\n    Errors: {\n        /**\n         * @regex Captured groups\n         * `$1` = whole error\n         */\n        CLANG_ERROR_MATCHER: RegExp;\n        /**\n         * @regex Captured groups\n         * `$1` = whole error\n         */\n        CHECK_DEPENDENCIES_ERRORS_MATCHER: RegExp;\n        /**\n         * @regex Captured groups\n         * `$0` = whole error\n         * `$1` = profile name\n         * `$2` = entitlement name\n         * `$3` = entitlement type <capability|entitlement>\n         * `$4` = native target\n         * `$5` = native project\n         */\n        UNSUPPORTED_ENTITLEMENT_MATCHER: RegExp;\n        /**\n         * @regex Captured groups\n         * `$1` = whole error\n         */\n        PROVISIONING_PROFILE_REQUIRED_MATCHER: RegExp;\n        /**\n         * @regex Captured groups\n         * `$1` = whole error\n         */\n        NO_CERTIFICATE_MATCHER: RegExp;\n        /**\n         * @regex Captured groups\n         * `$1` = filePath\n         * `$2` = fileName\n         * `$3` = reason\n         */\n        COMPILE_ERROR_MATCHER: RegExp;\n        COMPILE_ERROR_INLINE_MATCHER: RegExp;\n        /**\n         * @regex Captured groups\n         * `$1` cursor (with whitespaces and tildes)\n         */\n        CURSOR_MATCHER: RegExp;\n        /**\n         * @regex Captured groups\n         * `$1` = whole error.\n         *\n         * Appears to be related to the installation of files on the connected device\n         */\n        RSYNC_ERROR_MATCHER: RegExp;\n        /**\n         * @regex Captured groups\n         * `$1` = whole error.\n         * it varies a lot, not sure if it makes sense to catch everything separately\n         */\n        FATAL_ERROR_MATCHER: RegExp;\n        /**\n         * @regex Captured groups\n         * `$1` = whole error.\n         * `$2` = file path\n         */\n        FILE_MISSING_ERROR_MATCHER: RegExp;\n        /**\n         * @regex Captured groups\n         * `$1` = whole error\n         */\n        LD_ERROR_MATCHER: RegExp;\n        /**\n         * @regex Captured groups\n         * `$1` file path\n         */\n        LINKER_DUPLICATE_SYMBOLS_LOCATION_MATCHER: RegExp;\n        /**\n         * @regex Captured groups\n         * `$1` reason\n         */\n        LINKER_DUPLICATE_SYMBOLS_MATCHER: RegExp;\n        /**\n         * @regex Captured groups\n         * `$1` symbol location\n         */\n        LINKER_UNDEFINED_SYMBOL_LOCATION_MATCHER: RegExp;\n        /**\n         * @regex Captured groups\n         * `$1` reason\n         */\n        LINKER_UNDEFINED_SYMBOLS_MATCHER: RegExp;\n        /**\n         * @regex Captured groups\n         * `$1` reason\n         */\n        PODS_ERROR_MATCHER: RegExp;\n        /**\n         * @regex Captured groups\n         * `$1` = reference\n         */\n        SYMBOL_REFERENCED_FROM_MATCHER: RegExp;\n        /**\n         * @regex Captured groups\n         * `$1` = error reason\n         */\n        MODULE_INCLUDES_ERROR_MATCHER: RegExp;\n    };\n};\n"],"mappings":""},"metadata":{},"sourceType":"script","externalDependencies":[]}