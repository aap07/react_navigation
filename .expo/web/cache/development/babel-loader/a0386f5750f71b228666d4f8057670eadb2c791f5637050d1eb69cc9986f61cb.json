{"ast":null,"code":"import DraggingGestureHandler from \"./DraggingGestureHandler\";","map":{"version":3,"names":["DraggingGestureHandler"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/react-native-gesture-handler/lib/typescript/web_hammer/PanGestureHandler.d.ts"],"sourcesContent":["import { EventMap } from './constants';\nimport DraggingGestureHandler from './DraggingGestureHandler';\nimport { State } from '../State';\nimport { Config, HammerInputExt } from './GestureHandler';\ndeclare class PanGestureHandler extends DraggingGestureHandler {\n    get name(): string;\n    get NativeGestureClass(): PanRecognizerStatic;\n    getHammerConfig(): {\n        direction: number;\n        pointers: number | undefined;\n    };\n    getState(type: keyof typeof EventMap): State;\n    getDirection(): number;\n    getConfig(): Partial<{\n        enabled: boolean;\n        minPointers: number;\n        maxPointers: number;\n        minDist: number;\n        minDistSq: number;\n        minVelocity: number;\n        minVelocitySq: number;\n        maxDist: number;\n        maxDistSq: number;\n        failOffsetXStart: number;\n        failOffsetYStart: number;\n        failOffsetXEnd: number;\n        failOffsetYEnd: number;\n        activeOffsetXStart: number;\n        activeOffsetXEnd: number;\n        activeOffsetYStart: number;\n        activeOffsetYEnd: number;\n        waitFor: any[] | null;\n        simultaneousHandlers: any[] | null;\n    }>;\n    shouldFailUnderCustomCriteria({ deltaX, deltaY }: HammerInputExt, criteria: any): boolean;\n    shouldActivateUnderCustomCriteria({ deltaX, deltaY, velocity }: any, criteria: any): boolean;\n    shouldMultiFingerPanFail({ pointerLength, scale, deltaRotation, }: {\n        deltaRotation: number;\n        pointerLength: number;\n        scale: number;\n    }): boolean;\n    updateHasCustomActivationCriteria(criteria: Config & {\n        minVelocityX?: number;\n        minVelocityY?: number;\n    }): boolean;\n    isGestureEnabledForEvent(props: any, _recognizer: any, inputData: HammerInputExt & {\n        deltaRotation: number;\n    }): {\n        failed: boolean;\n        success?: undefined;\n    } | {\n        success: boolean;\n        failed?: undefined;\n    };\n}\nexport default PanGestureHandler;\n"],"mappings":"AACA,OAAOA,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}