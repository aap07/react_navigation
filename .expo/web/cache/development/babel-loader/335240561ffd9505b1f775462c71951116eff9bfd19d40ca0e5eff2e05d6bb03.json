{"ast":null,"code":"#!/usr/bin/env node\nvar program = require('commander');\nvar Analytics = require('.').default;\nvar pkg = require(\"./package\");\nvar toObject = function toObject(str) {\n  return JSON.parse(str);\n};\nprogram.version(pkg.version).option('-w, --writeKey <key>', 'the write key to use').option('-h, --host <host>', 'the API hostname to use').option('-t, --type <type>', 'the message type').option('-u, --userId <id>', 'the user id to send the event as').option('-a, --anonymousId <id>', 'the anonymous user id to send the event as').option('-c, --context <context>', 'additional context for the event (JSON-encoded)', toObject).option('-i, --integrations <integrations>', 'additional integrations for the event (JSON-encoded)', toObject).option('-e, --event <event>', 'the event name to send with the event').option('-p, --properties <properties>', 'the event properties to send (JSON-encoded)', toObject).option('-n, --name <name>', 'name of the screen or page to send with the message').option('-t, --traits <traits>', 'the identify/group traits to send (JSON-encoded)', toObject).option('-g, --groupId <groupId>', 'the group id').option('-pid, --previousId <previousId>', 'the previous id').parse(process.argv);\nif (program.args.length !== 0) {\n  program.help();\n}\nvar writeKey = program.writeKey;\nvar host = program.host;\nvar type = program.type;\nvar userId = program.userId;\nvar anonymousId = program.anonymousId;\nvar context = program.context;\nvar integrations = program.integrations;\nvar event = program.event;\nvar properties = program.properties;\nvar name = program.name;\nvar traits = program.traits;\nvar groupId = program.groupId;\nvar previousId = program.previousId;\nvar run = function run(method, args) {\n  var analytics = new Analytics(writeKey, host, {\n    flushAt: 1\n  });\n  analytics[method](args, function (err) {\n    if (err) {\n      console.error(err.stack);\n      process.exit(1);\n    }\n  });\n};\nswitch (type) {\n  case 'track':\n    run('track', {\n      event: event,\n      properties: properties,\n      userId: userId,\n      anonymousId: anonymousId,\n      context: context,\n      integrations: integrations\n    });\n    break;\n  case 'page':\n    run('page', {\n      name: name,\n      properties: properties,\n      userId: userId,\n      anonymousId: anonymousId,\n      context: context,\n      integrations: integrations\n    });\n    break;\n  case 'screen':\n    run('screen', {\n      name: name,\n      properties: properties,\n      userId: userId,\n      anonymousId: anonymousId,\n      context: context,\n      integrations: integrations\n    });\n    break;\n  case 'identify':\n    run('identify', {\n      traits: traits,\n      userId: userId,\n      anonymousId: anonymousId,\n      context: context,\n      integrations: integrations\n    });\n    break;\n  case 'group':\n    run('group', {\n      groupId: groupId,\n      traits: traits,\n      userId: userId,\n      anonymousId: anonymousId,\n      context: context,\n      integrations: integrations\n    });\n    break;\n  case 'alias':\n    run('alias', {\n      previousId: previousId,\n      userId: userId,\n      anonymousId: anonymousId,\n      context: context,\n      integrations: integrations\n    });\n    break;\n  default:\n    console.error('invalid type:', type);\n    process.exit(1);\n}","map":{"version":3,"names":["program","require","Analytics","default","pkg","toObject","str","JSON","parse","version","option","process","argv","args","length","help","writeKey","host","type","userId","anonymousId","context","integrations","event","properties","name","traits","groupId","previousId","run","method","analytics","flushAt","err","console","error","stack","exit"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/rudder-sdk-node/cli.js"],"sourcesContent":["#!/usr/bin/env node\n\nconst program = require('commander');\n\nconst Analytics = require('.').default;\nconst pkg = require('./package');\n\nconst toObject = (str) => JSON.parse(str);\n\n// node cli.js -w \"write-key\" -h \"http://localhost\" -t \"identify\" -u 'id\nprogram\n  .version(pkg.version)\n  .option('-w, --writeKey <key>', 'the write key to use')\n  .option('-h, --host <host>', 'the API hostname to use')\n  .option('-t, --type <type>', 'the message type')\n\n  .option('-u, --userId <id>', 'the user id to send the event as')\n  .option('-a, --anonymousId <id>', 'the anonymous user id to send the event as')\n  .option('-c, --context <context>', 'additional context for the event (JSON-encoded)', toObject)\n  .option(\n    '-i, --integrations <integrations>',\n    'additional integrations for the event (JSON-encoded)',\n    toObject\n  )\n\n  .option('-e, --event <event>', 'the event name to send with the event')\n  .option('-p, --properties <properties>', 'the event properties to send (JSON-encoded)', toObject)\n\n  .option('-n, --name <name>', 'name of the screen or page to send with the message')\n  .option('-t, --traits <traits>', 'the identify/group traits to send (JSON-encoded)', toObject)\n  .option('-g, --groupId <groupId>', 'the group id')\n  .option('-pid, --previousId <previousId>', 'the previous id')\n\n  .parse(process.argv);\n\nif (program.args.length !== 0) {\n  program.help();\n}\n\nconst writeKey = program.writeKey;\nconst host = program.host;\nconst type = program.type;\n\nconst userId = program.userId;\nconst anonymousId = program.anonymousId;\nconst context = program.context;\nconst integrations = program.integrations;\n\nconst event = program.event;\nconst properties = program.properties;\nconst name = program.name;\nconst traits = program.traits;\nconst groupId = program.groupId;\nconst previousId = program.previousId;\n\nconst run = (method, args) => {\n  const analytics = new Analytics(writeKey, host, { flushAt: 1 });\n  analytics[method](args, (err) => {\n    if (err) {\n      console.error(err.stack);\n      process.exit(1);\n    }\n  });\n};\n\nswitch (type) {\n  case 'track':\n    run('track', {\n      event,\n      properties,\n      userId,\n      anonymousId,\n      context,\n      integrations,\n    });\n    break;\n  case 'page':\n    run('page', {\n      name,\n      properties,\n      userId,\n      anonymousId,\n      context,\n      integrations,\n    });\n    break;\n  case 'screen':\n    run('screen', {\n      name,\n      properties,\n      userId,\n      anonymousId,\n      context,\n      integrations,\n    });\n    break;\n  case 'identify':\n    run('identify', {\n      traits,\n      userId,\n      anonymousId,\n      context,\n      integrations,\n    });\n    break;\n  case 'group':\n    run('group', {\n      groupId,\n      traits,\n      userId,\n      anonymousId,\n      context,\n      integrations,\n    });\n    break;\n  case 'alias':\n    run('alias', {\n      previousId,\n      userId,\n      anonymousId,\n      context,\n      integrations,\n    });\n    break;\n  default:\n    console.error('invalid type:', type);\n    process.exit(1);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}