{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport ModifyJsonWebpackPlugin from \"./ModifyJsonWebpackPlugin\";\nvar ChromeIconsWebpackPlugin = function (_ModifyJsonWebpackPlu) {\n  _inherits(ChromeIconsWebpackPlugin, _ModifyJsonWebpackPlu);\n  var _super = _createSuper(ChromeIconsWebpackPlugin);\n  function ChromeIconsWebpackPlugin() {\n    _classCallCheck(this, ChromeIconsWebpackPlugin);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(ChromeIconsWebpackPlugin);\n}(ModifyJsonWebpackPlugin);\nexport { ChromeIconsWebpackPlugin as default };","map":{"version":3,"names":["ModifyJsonWebpackPlugin","ChromeIconsWebpackPlugin","_ModifyJsonWebpackPlu","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","default"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/webpack-config/webpack/plugins/ChromeIconsWebpackPlugin.d.ts"],"sourcesContent":["import { IconOptions, ProjectOptions } from 'expo-pwa';\nimport { Compilation, Compiler } from 'webpack';\nimport { BeforeEmitOptions } from './JsonWebpackPlugin';\nimport ModifyJsonWebpackPlugin from './ModifyJsonWebpackPlugin';\nexport declare type Options = {\n    source: string;\n    outputPath?: string;\n    backgroundColor?: string;\n    resizeMode?: 'contain' | 'cover';\n};\nexport default class ChromeIconsWebpackPlugin extends ModifyJsonWebpackPlugin {\n    private options;\n    private icon;\n    constructor(options: ProjectOptions, icon: IconOptions | null);\n    modifyAsync(compiler: Compiler, compilation: Compilation, data: BeforeEmitOptions): Promise<BeforeEmitOptions>;\n}\n"],"mappings":";;;;;;;AAGA,OAAOA,uBAAuB;AAAkC,IAO3CC,wBAAwB,aAAAC,qBAAA;EAAAC,SAAA,CAAAF,wBAAA,EAAAC,qBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,wBAAA;EAAA,SAAAA,yBAAA;IAAAK,eAAA,OAAAL,wBAAA;IAAA,OAAAG,MAAA,CAAAG,KAAA,OAAAC,SAAA;EAAA;EAAA,OAAAC,YAAA,CAAAR,wBAAA;AAAA,EAASD,uBAAuB;AAAA,SAAxDC,wBAAwB,IAAAS,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}