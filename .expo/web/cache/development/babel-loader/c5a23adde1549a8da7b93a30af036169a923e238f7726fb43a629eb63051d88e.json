{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatGradleArguments = formatGradleArguments;\nexports.assembleAsync = assembleAsync;\nexports.installAsync = installAsync;\nexports.spawnGradleAsync = spawnGradleAsync;\nvar _spawnAsync = _interopRequireDefault(require(\"@expo/spawn-async\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _env = require(\"../../../utils/env\");\nvar _errors = require(\"../../../utils/errors\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = require(\"debug\")(\"expo:start:platforms:android:gradle\");\nfunction upperFirst(name) {\n  return name.charAt(0).toUpperCase() + name.slice(1);\n}\nfunction formatGradleArguments(cmd, _ref) {\n  var appName = _ref.appName,\n    variant = _ref.variant,\n    _ref$tasks = _ref.tasks,\n    tasks = _ref$tasks === void 0 ? [cmd + upperFirst(variant)] : _ref$tasks;\n  return appName ? tasks.map(function (task) {\n    return `${appName}:${task}`;\n  }) : tasks;\n}\nfunction resolveGradleWPath(androidProjectPath) {\n  return _path.default.join(androidProjectPath, process.platform === \"win32\" ? \"gradlew.bat\" : \"gradlew\");\n}\nfunction getPortArg(port) {\n  return `-PreactNativeDevServerPort=${port}`;\n}\nfunction assembleAsync(_x, _x2) {\n  return _assembleAsync.apply(this, arguments);\n}\nfunction _assembleAsync() {\n  _assembleAsync = _asyncToGenerator(function* (androidProjectPath, _ref2) {\n    var variant = _ref2.variant,\n      port = _ref2.port,\n      appName = _ref2.appName,\n      buildCache = _ref2.buildCache;\n    var task = formatGradleArguments(\"assemble\", {\n      variant: variant,\n      appName: appName\n    });\n    var args = [].concat(_toConsumableArray(task), [\"-x\", \"lint\", \"-x\", \"test\", \"--configure-on-demand\"]);\n    if (buildCache) args.push(\"--build-cache\");\n    if (_env.env.EXPO_PROFILE) args.push(\"--profile\");\n    return yield spawnGradleAsync(androidProjectPath, {\n      port: port,\n      args: args\n    });\n  });\n  return _assembleAsync.apply(this, arguments);\n}\nfunction installAsync(_x3, _x4) {\n  return _installAsync.apply(this, arguments);\n}\nfunction _installAsync() {\n  _installAsync = _asyncToGenerator(function* (androidProjectPath, _ref3) {\n    var variant = _ref3.variant,\n      appName = _ref3.appName,\n      port = _ref3.port;\n    var args = formatGradleArguments(\"install\", {\n      variant: variant,\n      appName: appName\n    });\n    return yield spawnGradleAsync(androidProjectPath, {\n      port: port,\n      args: args\n    });\n  });\n  return _installAsync.apply(this, arguments);\n}\nfunction spawnGradleAsync(_x5, _x6) {\n  return _spawnGradleAsync.apply(this, arguments);\n}\nfunction _spawnGradleAsync() {\n  _spawnGradleAsync = _asyncToGenerator(function* (projectRoot, _ref4) {\n    var port = _ref4.port,\n      args = _ref4.args;\n    var gradlew = resolveGradleWPath(projectRoot);\n    if (port != null) args.push(getPortArg(port));\n    debug(`  ${gradlew} ${args.join(\" \")}`);\n    try {\n      return yield (0, _spawnAsync).default(gradlew, args, {\n        cwd: projectRoot,\n        stdio: \"inherit\"\n      });\n    } catch (error) {\n      if (error.status === 130) {\n        throw new _errors.AbortCommandError();\n      }\n      throw error;\n    }\n  });\n  return _spawnGradleAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_toConsumableArray","require","_asyncToGenerator","formatGradleArguments","assembleAsync","installAsync","spawnGradleAsync","_spawnAsync","_interopRequireDefault","_path","_env","_errors","debug","upperFirst","name","charAt","toUpperCase","slice","cmd","_ref","appName","variant","_ref$tasks","tasks","map","task","resolveGradleWPath","androidProjectPath","default","join","process","platform","getPortArg","port","_x","_x2","_assembleAsync","apply","arguments","_ref2","buildCache","args","concat","push","env","EXPO_PROFILE","_x3","_x4","_installAsync","_ref3","_x5","_x6","_spawnGradleAsync","projectRoot","_ref4","gradlew","cwd","stdio","error","status","AbortCommandError"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\platforms\\android\\gradle.ts"],"sourcesContent":["import spawnAsync, { SpawnResult } from '@expo/spawn-async';\nimport path from 'path';\n\nimport { env } from '../../../utils/env';\nimport { AbortCommandError } from '../../../utils/errors';\n\nconst debug = require('debug')('expo:start:platforms:android:gradle') as typeof console.log;\n\nfunction upperFirst(name: string) {\n  return name.charAt(0).toUpperCase() + name.slice(1);\n}\n\n/** Format gradle assemble arguments. Exposed for testing.  */\nexport function formatGradleArguments(\n  cmd: 'assemble' | 'install',\n  {\n    appName,\n    variant,\n    tasks = [cmd + upperFirst(variant)],\n  }: { tasks?: string[]; variant: string; appName: string }\n): string[] {\n  return appName ? tasks.map((task) => `${appName}:${task}`) : tasks;\n}\n\nfunction resolveGradleWPath(androidProjectPath: string): string {\n  return path.join(androidProjectPath, process.platform === 'win32' ? 'gradlew.bat' : 'gradlew');\n}\n\nfunction getPortArg(port: number): string {\n  return `-PreactNativeDevServerPort=${port}`;\n}\n\n/**\n * Build the Android project using Gradle.\n *\n * @param androidProjectPath - Path to the Android project like `projectRoot/android`.\n * @param props.variant - Variant to install.\n * @param props.appName - Name of the 'app' folder, this appears to always be `app`.\n * @param props.port - Dev server port to pass to the install command.\n * @param props.buildCache - Should use the `--build-cache` flag, enabling the [Gradle build cache](https://docs.gradle.org/current/userguide/build_cache.html).\n * @returns - A promise resolving to spawn results.\n */\nexport async function assembleAsync(\n  androidProjectPath: string,\n  {\n    variant,\n    port,\n    appName,\n    buildCache,\n  }: {\n    variant: string;\n    port?: number;\n    appName: string;\n    buildCache?: boolean;\n  }\n): Promise<SpawnResult> {\n  const task = formatGradleArguments('assemble', { variant, appName });\n  const args = [\n    ...task,\n    // ignore linting errors\n    '-x',\n    'lint',\n    // ignore tests\n    '-x',\n    'test',\n    '--configure-on-demand',\n  ];\n\n  if (buildCache) args.push('--build-cache');\n\n  // Generate a profile under `/android/app/build/reports/profile`\n  if (env.EXPO_PROFILE) args.push('--profile');\n\n  return await spawnGradleAsync(androidProjectPath, { port, args });\n}\n\n/**\n * Install an app on device or emulator using `gradlew install`.\n *\n * @param androidProjectPath - Path to the Android project like `projectRoot/android`.\n * @param props.variant - Variant to install.\n * @param props.appName - Name of the 'app' folder, this appears to always be `app`.\n * @param props.port - Dev server port to pass to the install command.\n * @returns - A promise resolving to spawn results.\n */\nexport async function installAsync(\n  androidProjectPath: string,\n  {\n    variant,\n    appName,\n    port,\n  }: {\n    variant: string;\n    appName: string;\n    port?: number;\n  }\n): Promise<SpawnResult> {\n  const args = formatGradleArguments('install', { variant, appName });\n  return await spawnGradleAsync(androidProjectPath, { port, args });\n}\n\nexport async function spawnGradleAsync(\n  projectRoot: string,\n  { port, args }: { port?: number; args: string[] }\n): Promise<SpawnResult> {\n  const gradlew = resolveGradleWPath(projectRoot);\n  if (port != null) args.push(getPortArg(port));\n  debug(`  ${gradlew} ${args.join(' ')}`);\n  try {\n    return await spawnAsync(gradlew, args, {\n      cwd: projectRoot,\n      stdio: 'inherit',\n    });\n  } catch (error: any) {\n    // User aborted the command with ctrl-c\n    if (error.status === 130) {\n      // Fail silently\n      throw new AbortCommandError();\n    }\n    throw error;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}