{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAndroidProject = getAndroidProject;\nexports.getPackageName = getPackageName;\nexports.parseNamespaceFromBuildGradleFile = parseNamespaceFromBuildGradleFile;\nexports.parsePackageNameFromAndroidManifestFile = parsePackageNameFromAndroidManifestFile;\nexports.validatePackageName = validatePackageName;\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function _cliTools() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function _chalk() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getAndroidProject(config) {\n  var androidProject = config.project.android;\n  if (!androidProject) {\n    throw new (_cliTools().CLIError)(`\n      Android project not found. Are you sure this is a React Native project?\n      If your Android files are located in a non-standard location (e.g. not inside 'android' folder), consider setting\n      \\`project.android.sourceDir\\` option to point to a new location.\n    `);\n  }\n  return androidProject;\n}\nfunction discoverPackageName(manifestPath, buildGradlePath) {\n  if (manifestPath) {\n    var androidManifest = _fs().default.readFileSync(manifestPath, 'utf8');\n    var packageNameFromManifest = parsePackageNameFromAndroidManifestFile(androidManifest);\n    if (packageNameFromManifest) {\n      return packageNameFromManifest;\n    }\n  }\n  if (buildGradlePath) {\n    var buildGradle = _fs().default.readFileSync(buildGradlePath, 'utf8');\n    var namespace = parseNamespaceFromBuildGradleFile(buildGradle);\n    if (namespace) {\n      return namespace;\n    }\n  }\n  throw new (_cliTools().CLIError)(`Failed to build the app: No package name found. \n    We couldn't parse the namespace from neither your build.gradle[.kts] file at ${_chalk().default.underline.dim(`${buildGradlePath}`)} \n    nor your package in the AndroidManifest at ${_chalk().default.underline.dim(`${manifestPath}`)}\n    `);\n}\nfunction getPackageName(manifestPath, buildGradlePath) {\n  var packageName = discoverPackageName(manifestPath, buildGradlePath);\n  if (!validatePackageName(packageName)) {\n    _cliTools().logger.warn(`Invalid application's package name \"${_chalk().default.bgRed(packageName)}\" in either 'AndroidManifest.xml' or 'build.gradle'. Read guidelines for setting the package name here: ${_chalk().default.underline.dim('https://developer.android.com/studio/build/application-id')}`);\n  }\n  return packageName;\n}\nfunction parsePackageNameFromAndroidManifestFile(androidManifest) {\n  var matchArray = androidManifest.match(/package=\"(.+?)\"/);\n  if (matchArray && matchArray.length > 0) {\n    return matchArray[1];\n  } else {\n    return null;\n  }\n}\nfunction parseNamespaceFromBuildGradleFile(buildGradle) {\n  var matchArray = buildGradle.match(/namespace\\s*[=]*\\s*[\"'](.+?)[\"']/);\n  if (matchArray && matchArray.length > 0) {\n    return matchArray[1];\n  } else {\n    return null;\n  }\n}\nfunction validatePackageName(packageName) {\n  return /^[a-z][a-z0-9_]*(\\.[a-z][a-z0-9_]*)+$/i.test(packageName);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","getAndroidProject","getPackageName","parseNamespaceFromBuildGradleFile","parsePackageNameFromAndroidManifestFile","validatePackageName","_cliTools","data","require","_fs","_interopRequireDefault","_chalk","obj","__esModule","default","config","androidProject","project","android","CLIError","discoverPackageName","manifestPath","buildGradlePath","androidManifest","readFileSync","packageNameFromManifest","buildGradle","namespace","underline","dim","packageName","logger","warn","bgRed","matchArray","match","length","test"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-platform-android/build/config/getAndroidProject.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAndroidProject = getAndroidProject;\nexports.getPackageName = getPackageName;\nexports.parseNamespaceFromBuildGradleFile = parseNamespaceFromBuildGradleFile;\nexports.parsePackageNameFromAndroidManifestFile = parsePackageNameFromAndroidManifestFile;\nexports.validatePackageName = validatePackageName;\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function () {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n  _fs = function () {\n    return data;\n  };\n  return data;\n}\nfunction _chalk() {\n  const data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function () {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction getAndroidProject(config) {\n  const androidProject = config.project.android;\n  if (!androidProject) {\n    throw new (_cliTools().CLIError)(`\n      Android project not found. Are you sure this is a React Native project?\n      If your Android files are located in a non-standard location (e.g. not inside 'android' folder), consider setting\n      \\`project.android.sourceDir\\` option to point to a new location.\n    `);\n  }\n  return androidProject;\n}\n\n/**\n * Util function to discover the package name from either the Manifest file or the build.gradle file.\n * @param manifestPath The path to the AndroidManifest.xml\n * @param buildGradlePath The path to the build.gradle[.kts] file.\n */\nfunction discoverPackageName(manifestPath, buildGradlePath) {\n  if (manifestPath) {\n    const androidManifest = _fs().default.readFileSync(manifestPath, 'utf8');\n    const packageNameFromManifest = parsePackageNameFromAndroidManifestFile(androidManifest);\n    // We got the package from the AndroidManifest.xml\n    if (packageNameFromManifest) {\n      return packageNameFromManifest;\n    }\n  }\n  if (buildGradlePath) {\n    // We didn't get the package from the AndroidManifest.xml,\n    // so we'll try to get it from the build.gradle[.kts] file\n    // via the namespace field.\n    const buildGradle = _fs().default.readFileSync(buildGradlePath, 'utf8');\n    const namespace = parseNamespaceFromBuildGradleFile(buildGradle);\n    if (namespace) {\n      return namespace;\n    }\n  }\n  throw new (_cliTools().CLIError)(`Failed to build the app: No package name found. \n    We couldn't parse the namespace from neither your build.gradle[.kts] file at ${_chalk().default.underline.dim(`${buildGradlePath}`)} \n    nor your package in the AndroidManifest at ${_chalk().default.underline.dim(`${manifestPath}`)}\n    `);\n}\n\n/**\n * Get the package name/namespace of the running React Native app\n * @param manifestPath The path to the AndroidManifest.xml\n * @param buildGradlePath The path to the build.gradle[.kts] file.\n */\nfunction getPackageName(manifestPath, buildGradlePath) {\n  let packageName = discoverPackageName(manifestPath, buildGradlePath);\n  if (!validatePackageName(packageName)) {\n    _cliTools().logger.warn(`Invalid application's package name \"${_chalk().default.bgRed(packageName)}\" in either 'AndroidManifest.xml' or 'build.gradle'. Read guidelines for setting the package name here: ${_chalk().default.underline.dim('https://developer.android.com/studio/build/application-id')}`);\n  }\n  return packageName;\n}\nfunction parsePackageNameFromAndroidManifestFile(androidManifest) {\n  const matchArray = androidManifest.match(/package=\"(.+?)\"/);\n  if (matchArray && matchArray.length > 0) {\n    return matchArray[1];\n  } else {\n    return null;\n  }\n}\nfunction parseNamespaceFromBuildGradleFile(buildGradle) {\n  // search for namespace = inside the build.gradle file via regex\n  const matchArray = buildGradle.match(/namespace\\s*[=]*\\s*[\"'](.+?)[\"']/);\n  if (matchArray && matchArray.length > 0) {\n    return matchArray[1];\n  } else {\n    return null;\n  }\n}\n\n// Validates that the package name is correct\nfunction validatePackageName(packageName) {\n  return /^[a-z][a-z0-9_]*(\\.[a-z][a-z0-9_]*)+$/i.test(packageName);\n}\n\n//# sourceMappingURL=getAndroidProject.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}