{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveOptionsAsync = resolveOptionsAsync;\nexports.resolveSchemeAsync = resolveSchemeAsync;\nexports.resolveHostType = resolveHostType;\nexports.resolvePortsAsync = resolvePortsAsync;\nvar _assert = _interopRequireDefault(require(\"assert\"));\nvar _getDevClientProperties = require(\"../utils/analytics/getDevClientProperties\");\nvar _errors = require(\"../utils/errors\");\nvar _port = require(\"../utils/port\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction resolveOptionsAsync(_x, _x2) {\n  return _resolveOptionsAsync.apply(this, arguments);\n}\nfunction _resolveOptionsAsync() {\n  _resolveOptionsAsync = _asyncToGenerator(function* (projectRoot, args) {\n    var forceManifestType = args[\"--force-manifest-type\"];\n    if (forceManifestType) {\n      _assert.default.match(forceManifestType, /^(classic|expo-updates)$/);\n    }\n    if (args[\"--dev-client\"] && args[\"--go\"]) {\n      throw new _errors.CommandError(\"BAD_ARGS\", \"Cannot use both --dev-client and --go together.\");\n    }\n    var host = resolveHostType({\n      host: args[\"--host\"],\n      offline: args[\"--offline\"],\n      lan: args[\"--lan\"],\n      localhost: args[\"--localhost\"],\n      tunnel: args[\"--tunnel\"]\n    });\n    var isUserDefinedDevClient = !!args[\"--dev-client\"] || (args[\"--go\"] == null ? false : !args[\"--go\"]);\n    var isAutoDevClient = args[\"--dev-client\"] == null && args[\"--go\"] == null && (0, _getDevClientProperties).hasDirectDevClientDependency(projectRoot);\n    var isDevClient = isAutoDevClient || isUserDefinedDevClient;\n    var scheme = yield resolveSchemeAsync(projectRoot, {\n      scheme: args[\"--scheme\"],\n      devClient: isDevClient\n    });\n    var ref;\n    return {\n      forceManifestType: forceManifestType,\n      privateKeyPath: (ref = args[\"--private-key-path\"]) != null ? ref : null,\n      android: !!args[\"--android\"],\n      web: !!args[\"--web\"],\n      ios: !!args[\"--ios\"],\n      offline: !!args[\"--offline\"],\n      clear: !!args[\"--clear\"],\n      dev: !args[\"--no-dev\"],\n      https: !!args[\"--https\"],\n      maxWorkers: args[\"--max-workers\"],\n      port: args[\"--port\"],\n      minify: !!args[\"--minify\"],\n      devClient: isDevClient,\n      scheme: scheme,\n      host: host\n    };\n  });\n  return _resolveOptionsAsync.apply(this, arguments);\n}\nfunction resolveSchemeAsync(_x3, _x4) {\n  return _resolveSchemeAsync.apply(this, arguments);\n}\nfunction _resolveSchemeAsync() {\n  _resolveSchemeAsync = _asyncToGenerator(function* (projectRoot, options) {\n    var resolveFrom = require(\"resolve-from\");\n    var isDevClientPackageInstalled = function () {\n      try {\n        resolveFrom(projectRoot, \"expo-dev-launcher\");\n        return true;\n      } catch (_unused) {\n        return false;\n      }\n    }();\n    if (typeof options.scheme === \"string\") {\n      var _scheme;\n      return (_scheme = options.scheme) != null ? _scheme : null;\n    } else if (options.devClient || isDevClientPackageInstalled) {\n      var _require = require(\"../utils/scheme\"),\n        getOptionalDevClientSchemeAsync = _require.getOptionalDevClientSchemeAsync;\n      return yield getOptionalDevClientSchemeAsync(projectRoot);\n    } else {\n      return null;\n    }\n  });\n  return _resolveSchemeAsync.apply(this, arguments);\n}\nfunction resolveHostType(options) {\n  if ([options.offline, options.host, options.lan, options.localhost, options.tunnel].filter(function (i) {\n    return i;\n  }).length > 1) {\n    throw new _errors.CommandError(\"BAD_ARGS\", \"Specify at most one of: --offline, --host, --tunnel, --lan, --localhost\");\n  }\n  if (options.offline) {\n    return \"lan\";\n  } else if (options.host) {\n    _assert.default.match(options.host, /^(lan|tunnel|localhost)$/);\n    return options.host;\n  } else if (options.tunnel) {\n    return \"tunnel\";\n  } else if (options.lan) {\n    return \"lan\";\n  } else if (options.localhost) {\n    return \"localhost\";\n  }\n  return \"lan\";\n}\nfunction resolvePortsAsync(_x5, _x6, _x7) {\n  return _resolvePortsAsync.apply(this, arguments);\n}\nfunction _resolvePortsAsync() {\n  _resolvePortsAsync = _asyncToGenerator(function* (projectRoot, options, settings) {\n    var multiBundlerSettings = {};\n    if (settings.webOnly) {\n      var webpackPort = yield (0, _port).resolvePortAsync(projectRoot, {\n        defaultPort: options.port,\n        fallbackPort: 19006\n      });\n      if (!webpackPort) {\n        throw new _errors.AbortCommandError();\n      }\n      multiBundlerSettings.webpackPort = webpackPort;\n    } else {\n      var fallbackPort = process.env.RCT_METRO_PORT ? parseInt(process.env.RCT_METRO_PORT, 10) : 8081;\n      var metroPort = yield (0, _port).resolvePortAsync(projectRoot, {\n        defaultPort: options.port,\n        fallbackPort: fallbackPort\n      });\n      if (!metroPort) {\n        throw new _errors.AbortCommandError();\n      }\n      multiBundlerSettings.metroPort = metroPort;\n    }\n    return multiBundlerSettings;\n  });\n  return _resolvePortsAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","resolveOptionsAsync","resolveSchemeAsync","resolveHostType","resolvePortsAsync","_assert","_interopRequireDefault","_getDevClientProperties","_errors","_port","_x","_x2","_resolveOptionsAsync","apply","arguments","projectRoot","args","forceManifestType","default","match","CommandError","host","offline","lan","localhost","tunnel","isUserDefinedDevClient","isAutoDevClient","hasDirectDevClientDependency","isDevClient","scheme","devClient","ref","privateKeyPath","android","web","ios","clear","dev","https","maxWorkers","port","minify","_x3","_x4","_resolveSchemeAsync","options","resolveFrom","isDevClientPackageInstalled","_unused","_scheme","_require","getOptionalDevClientSchemeAsync","filter","i","length","_x5","_x6","_x7","_resolvePortsAsync","settings","multiBundlerSettings","webOnly","webpackPort","resolvePortAsync","defaultPort","fallbackPort","AbortCommandError","process","env","RCT_METRO_PORT","parseInt","metroPort"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\resolveOptions.ts"],"sourcesContent":["import assert from 'assert';\n\nimport { hasDirectDevClientDependency } from '../utils/analytics/getDevClientProperties';\nimport { AbortCommandError, CommandError } from '../utils/errors';\nimport { resolvePortAsync } from '../utils/port';\n\nexport type Options = {\n  forceManifestType: 'classic' | 'expo-updates';\n  privateKeyPath: string | null;\n  android: boolean;\n  web: boolean;\n  ios: boolean;\n  offline: boolean;\n  clear: boolean;\n  dev: boolean;\n  https: boolean;\n  maxWorkers: number;\n  port: number;\n  /** Should instruct the bundler to create minified bundles. */\n  minify: boolean;\n  devClient: boolean;\n  scheme: string | null;\n  host: 'localhost' | 'lan' | 'tunnel';\n};\n\nexport async function resolveOptionsAsync(projectRoot: string, args: any): Promise<Options> {\n  const forceManifestType = args['--force-manifest-type'];\n  if (forceManifestType) {\n    assert.match(forceManifestType, /^(classic|expo-updates)$/);\n  }\n  if (args['--dev-client'] && args['--go']) {\n    throw new CommandError('BAD_ARGS', 'Cannot use both --dev-client and --go together.');\n  }\n  const host = resolveHostType({\n    host: args['--host'],\n    offline: args['--offline'],\n    lan: args['--lan'],\n    localhost: args['--localhost'],\n    tunnel: args['--tunnel'],\n  });\n\n  // User can force the default target by passing either `--dev-client` or `--go`. They can also\n  // swap between them during development by pressing `s`.\n  const isUserDefinedDevClient =\n    !!args['--dev-client'] || (args['--go'] == null ? false : !args['--go']);\n\n  // If the user didn't specify `--dev-client` or `--go` we check if they have the dev client package\n  // in their package.json.\n  const isAutoDevClient =\n    args['--dev-client'] == null &&\n    args['--go'] == null &&\n    hasDirectDevClientDependency(projectRoot);\n\n  const isDevClient = isAutoDevClient || isUserDefinedDevClient;\n\n  const scheme = await resolveSchemeAsync(projectRoot, {\n    scheme: args['--scheme'],\n    devClient: isDevClient,\n  });\n\n  return {\n    forceManifestType,\n    privateKeyPath: args['--private-key-path'] ?? null,\n\n    android: !!args['--android'],\n    web: !!args['--web'],\n    ios: !!args['--ios'],\n    offline: !!args['--offline'],\n\n    clear: !!args['--clear'],\n    dev: !args['--no-dev'],\n    https: !!args['--https'],\n    maxWorkers: args['--max-workers'],\n    port: args['--port'],\n    minify: !!args['--minify'],\n\n    devClient: isDevClient,\n\n    scheme,\n    host,\n  };\n}\n\nexport async function resolveSchemeAsync(\n  projectRoot: string,\n  options: { scheme?: string; devClient?: boolean }\n): Promise<string | null> {\n  const resolveFrom = require('resolve-from') as typeof import('resolve-from');\n\n  const isDevClientPackageInstalled = (() => {\n    try {\n      // we check if `expo-dev-launcher` is installed instead of `expo-dev-client`\n      // because someone could install only launcher.\n      resolveFrom(projectRoot, 'expo-dev-launcher');\n      return true;\n    } catch {\n      return false;\n    }\n  })();\n\n  if (typeof options.scheme === 'string') {\n    // Use the custom scheme\n    return options.scheme ?? null;\n  } else if (options.devClient || isDevClientPackageInstalled) {\n    const { getOptionalDevClientSchemeAsync } =\n      require('../utils/scheme') as typeof import('../utils/scheme');\n    // Attempt to find the scheme or warn the user how to setup a custom scheme\n    return await getOptionalDevClientSchemeAsync(projectRoot);\n  } else {\n    // Ensure this is reset when users don't use `--scheme`, `--dev-client` and don't have the `expo-dev-client` package installed.\n    return null;\n  }\n}\n\n/** Resolve and assert host type options. */\nexport function resolveHostType(options: {\n  host?: string;\n  offline?: boolean;\n  lan?: boolean;\n  localhost?: boolean;\n  tunnel?: boolean;\n}): 'lan' | 'tunnel' | 'localhost' {\n  if (\n    [options.offline, options.host, options.lan, options.localhost, options.tunnel].filter((i) => i)\n      .length > 1\n  ) {\n    throw new CommandError(\n      'BAD_ARGS',\n      'Specify at most one of: --offline, --host, --tunnel, --lan, --localhost'\n    );\n  }\n\n  if (options.offline) {\n    // Force `lan` in offline mode.\n    return 'lan';\n  } else if (options.host) {\n    assert.match(options.host, /^(lan|tunnel|localhost)$/);\n    return options.host as 'lan' | 'tunnel' | 'localhost';\n  } else if (options.tunnel) {\n    return 'tunnel';\n  } else if (options.lan) {\n    return 'lan';\n  } else if (options.localhost) {\n    return 'localhost';\n  }\n  return 'lan';\n}\n\n/** Resolve the port options for all supported bundlers. */\nexport async function resolvePortsAsync(\n  projectRoot: string,\n  options: Partial<Pick<Options, 'port' | 'devClient'>>,\n  settings: { webOnly?: boolean }\n) {\n  const multiBundlerSettings: { webpackPort?: number; metroPort?: number } = {};\n\n  if (settings.webOnly) {\n    const webpackPort = await resolvePortAsync(projectRoot, {\n      defaultPort: options.port,\n      // Default web port\n      fallbackPort: 19006,\n    });\n    if (!webpackPort) {\n      throw new AbortCommandError();\n    }\n    multiBundlerSettings.webpackPort = webpackPort;\n  } else {\n    const fallbackPort = process.env.RCT_METRO_PORT\n      ? parseInt(process.env.RCT_METRO_PORT, 10)\n      : 8081;\n    const metroPort = await resolvePortAsync(projectRoot, {\n      defaultPort: options.port,\n      fallbackPort,\n    });\n    if (!metroPort) {\n      throw new AbortCommandError();\n    }\n    multiBundlerSettings.metroPort = metroPort;\n  }\n\n  return multiBundlerSettings;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}