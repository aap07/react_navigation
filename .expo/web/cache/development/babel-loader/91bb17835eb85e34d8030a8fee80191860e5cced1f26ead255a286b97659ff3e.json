{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/config-plugins/build/ios/BundleIdentifier.d.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { ConfigPlugin } from '../Plugin.types';\nimport { InfoPlist } from './IosConfig.types';\nexport declare const withBundleIdentifier: ConfigPlugin<{\n    bundleIdentifier?: string;\n}>;\ndeclare function getBundleIdentifier(config: Pick<ExpoConfig, 'ios'>): string | null;\n/**\n * In Turtle v1 we set the bundleIdentifier directly on Info.plist rather\n * than in pbxproj\n */\ndeclare function setBundleIdentifier(config: ExpoConfig, infoPlist: InfoPlist): InfoPlist;\n/**\n * Gets the bundle identifier defined in the Xcode project found in the project directory.\n *\n * A bundle identifier is stored as a value in XCBuildConfiguration entry.\n * Those entries exist for every pair (build target, build configuration).\n * Unless target name is passed, the first target defined in the pbxproj is used\n * (to keep compatibility with the inaccurate legacy implementation of this function).\n * The build configuration is usually 'Release' or 'Debug'. However, it could be any arbitrary string.\n * Defaults to 'Release'.\n *\n * @param {string} projectRoot Path to project root containing the ios directory\n * @param {string} targetName Target name\n * @param {string} buildConfiguration Build configuration. Defaults to 'Release'.\n * @returns {string | null} bundle identifier of the Xcode project or null if the project is not configured\n */\ndeclare function getBundleIdentifierFromPbxproj(projectRoot: string, { targetName, buildConfiguration, }?: {\n    targetName?: string;\n    buildConfiguration?: string;\n}): string | null;\n/**\n * Updates the bundle identifier for a given pbxproj\n *\n * @param {string} pbxprojPath Path to pbxproj file\n * @param {string} bundleIdentifier Bundle identifier to set in the pbxproj\n * @param {boolean} [updateProductName=true]  Whether to update PRODUCT_NAME\n */\ndeclare function updateBundleIdentifierForPbxproj(pbxprojPath: string, bundleIdentifier: string, updateProductName?: boolean): void;\n/**\n * Updates the bundle identifier for pbx projects inside the ios directory of the given project root\n *\n * @param {string} projectRoot Path to project root containing the ios directory\n * @param {string} bundleIdentifier Desired bundle identifier\n * @param {boolean} [updateProductName=true]  Whether to update PRODUCT_NAME\n */\ndeclare function setBundleIdentifierForPbxproj(projectRoot: string, bundleIdentifier: string, updateProductName?: boolean): void;\ndeclare function resetAllPlistBundleIdentifiers(projectRoot: string): void;\ndeclare function resetPlistBundleIdentifier(plistPath: string): void;\nexport { getBundleIdentifier, setBundleIdentifier, getBundleIdentifierFromPbxproj, updateBundleIdentifierForPbxproj, setBundleIdentifierForPbxproj, resetAllPlistBundleIdentifiers, resetPlistBundleIdentifier, };\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}