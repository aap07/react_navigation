{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { Asset } from 'expo-asset';\nimport Constants from 'expo-constants';\nimport { CodedError } from 'expo-modules-core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ExpoFontLoader from \"./ExpoFontLoader\";\nvar isInClient = Constants.appOwnership === 'expo';\nvar isInIOSStandalone = Constants.appOwnership === 'standalone' && Platform.OS === 'ios';\nexport function fontFamilyNeedsScoping(name) {\n  return (isInClient || isInIOSStandalone) && !Constants.systemFonts.includes(name) && name !== 'System' && !name.includes(Constants.sessionId);\n}\nexport function getAssetForSource(source) {\n  if (source instanceof Asset) {\n    return source;\n  }\n  if (typeof source === 'string') {\n    return Asset.fromURI(source);\n  } else if (typeof source === 'number') {\n    return Asset.fromModule(source);\n  } else if (typeof source === 'object' && typeof source.uri !== 'undefined') {\n    return getAssetForSource(source.uri);\n  }\n  return source;\n}\nexport function loadSingleFontAsync(_x, _x2) {\n  return _loadSingleFontAsync.apply(this, arguments);\n}\nfunction _loadSingleFontAsync() {\n  _loadSingleFontAsync = _asyncToGenerator(function* (name, input) {\n    var asset = input;\n    if (!asset.downloadAsync) {\n      throw new CodedError(`ERR_FONT_SOURCE`, '`loadSingleFontAsync` expected resource of type `Asset` from expo-asset on native');\n    }\n    yield asset.downloadAsync();\n    if (!asset.downloaded) {\n      throw new CodedError(`ERR_DOWNLOAD`, `Failed to download asset for font \"${name}\"`);\n    }\n    yield ExpoFontLoader.loadAsync(getNativeFontName(name), asset.localUri);\n  });\n  return _loadSingleFontAsync.apply(this, arguments);\n}\nexport function getNativeFontName(name) {\n  if (fontFamilyNeedsScoping(name)) {\n    return `${Constants.sessionId}-${name}`;\n  } else {\n    return name;\n  }\n}","map":{"version":3,"names":["Asset","Constants","CodedError","Platform","ExpoFontLoader","isInClient","appOwnership","isInIOSStandalone","OS","fontFamilyNeedsScoping","name","systemFonts","includes","sessionId","getAssetForSource","source","fromURI","fromModule","uri","loadSingleFontAsync","_x","_x2","_loadSingleFontAsync","apply","arguments","_asyncToGenerator","input","asset","downloadAsync","downloaded","loadAsync","getNativeFontName","localUri"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\expo-font\\src\\FontLoader.ts"],"sourcesContent":["import { Asset } from 'expo-asset';\nimport Constants from 'expo-constants';\nimport { CodedError } from 'expo-modules-core';\nimport { Platform } from 'react-native';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontResource, FontSource } from './Font.types';\n\nconst isInClient = Constants.appOwnership === 'expo';\nconst isInIOSStandalone = Constants.appOwnership === 'standalone' && Platform.OS === 'ios';\n\nexport function fontFamilyNeedsScoping(name: string): boolean {\n  return (\n    (isInClient || isInIOSStandalone) &&\n    !Constants.systemFonts.includes(name) &&\n    name !== 'System' &&\n    !name.includes(Constants.sessionId)\n  );\n}\n\nexport function getAssetForSource(source: FontSource): Asset | FontResource {\n  if (source instanceof Asset) {\n    return source;\n  }\n\n  if (typeof source === 'string') {\n    return Asset.fromURI(source);\n  } else if (typeof source === 'number') {\n    return Asset.fromModule(source);\n  } else if (typeof source === 'object' && typeof source.uri !== 'undefined') {\n    return getAssetForSource(source.uri);\n  }\n\n  // @ts-ignore Error: Type 'string' is not assignable to type 'Asset'\n  // We can't have a string here, we would have thrown an error if !isWeb\n  // or returned Asset.fromModule if isWeb.\n  return source;\n}\n\nexport async function loadSingleFontAsync(\n  name: string,\n  input: Asset | FontResource\n): Promise<void> {\n  const asset = input as Asset;\n  if (!asset.downloadAsync) {\n    throw new CodedError(\n      `ERR_FONT_SOURCE`,\n      '`loadSingleFontAsync` expected resource of type `Asset` from expo-asset on native'\n    );\n  }\n\n  await asset.downloadAsync();\n  if (!asset.downloaded) {\n    throw new CodedError(`ERR_DOWNLOAD`, `Failed to download asset for font \"${name}\"`);\n  }\n  await ExpoFontLoader.loadAsync(getNativeFontName(name), asset.localUri);\n}\n\nexport function getNativeFontName(name: string): string {\n  if (fontFamilyNeedsScoping(name)) {\n    return `${Constants.sessionId}-${name}`;\n  } else {\n    return name;\n  }\n}\n"],"mappings":";AAAA,SAASA,KAAK,QAAQ,YAAY;AAClC,OAAOC,SAAS,MAAM,gBAAgB;AACtC,SAASC,UAAU,QAAQ,mBAAmB;AAAC,OAAAC,QAAA;AAG/C,OAAOC,cAAc;AAGrB,IAAMC,UAAU,GAAGJ,SAAS,CAACK,YAAY,KAAK,MAAM;AACpD,IAAMC,iBAAiB,GAAGN,SAAS,CAACK,YAAY,KAAK,YAAY,IAAIH,QAAQ,CAACK,EAAE,KAAK,KAAK;AAE1F,OAAM,SAAUC,sBAAsBA,CAACC,IAAY;EACjD,OACE,CAACL,UAAU,IAAIE,iBAAiB,KAChC,CAACN,SAAS,CAACU,WAAW,CAACC,QAAQ,CAACF,IAAI,CAAC,IACrCA,IAAI,KAAK,QAAQ,IACjB,CAACA,IAAI,CAACE,QAAQ,CAACX,SAAS,CAACY,SAAS,CAAC;AAEvC;AAEA,OAAM,SAAUC,iBAAiBA,CAACC,MAAkB;EAClD,IAAIA,MAAM,YAAYf,KAAK,EAAE;IAC3B,OAAOe,MAAM;;EAGf,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC9B,OAAOf,KAAK,CAACgB,OAAO,CAACD,MAAM,CAAC;GAC7B,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IACrC,OAAOf,KAAK,CAACiB,UAAU,CAACF,MAAM,CAAC;GAChC,MAAM,IAAI,OAAOA,MAAM,KAAK,QAAQ,IAAI,OAAOA,MAAM,CAACG,GAAG,KAAK,WAAW,EAAE;IAC1E,OAAOJ,iBAAiB,CAACC,MAAM,CAACG,GAAG,CAAC;;EAMtC,OAAOH,MAAM;AACf;AAEA,gBAAsBI,mBAAmBA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,oBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAiBxC,SAAAF,qBAAA;EAAAA,oBAAA,GAAAG,iBAAA,CAjBM,WACLf,IAAY,EACZgB,KAA2B;IAE3B,IAAMC,KAAK,GAAGD,KAAc;IAC5B,IAAI,CAACC,KAAK,CAACC,aAAa,EAAE;MACxB,MAAM,IAAI1B,UAAU,CAClB,iBAAiB,EACjB,mFAAmF,CACpF;;IAGH,MAAMyB,KAAK,CAACC,aAAa,EAAE;IAC3B,IAAI,CAACD,KAAK,CAACE,UAAU,EAAE;MACrB,MAAM,IAAI3B,UAAU,CAAC,cAAc,EAAE,sCAAsCQ,IAAI,GAAG,CAAC;;IAErF,MAAMN,cAAc,CAAC0B,SAAS,CAACC,iBAAiB,CAACrB,IAAI,CAAC,EAAEiB,KAAK,CAACK,QAAQ,CAAC;EACzE,CAAC;EAAA,OAAAV,oBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAED,OAAM,SAAUO,iBAAiBA,CAACrB,IAAY;EAC5C,IAAID,sBAAsB,CAACC,IAAI,CAAC,EAAE;IAChC,OAAO,GAAGT,SAAS,CAACY,SAAS,IAAIH,IAAI,EAAE;GACxC,MAAM;IACL,OAAOA,IAAI;;AAEf"},"metadata":{},"sourceType":"module","externalDependencies":[]}