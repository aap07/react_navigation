{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _toArray = require(\"@babel/runtime/helpers/toArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveGradleProps = resolveGradleProps;\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _errors = require(\"../../utils/errors\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction assertVariant(variant) {\n  if (variant && typeof variant !== \"string\") {\n    throw new _errors.CommandError(\"BAD_ARGS\", \"--variant must be a string\");\n  }\n  return variant != null ? variant : \"debug\";\n}\nfunction resolveGradleProps(projectRoot, options) {\n  var _path$default;\n  var variant = assertVariant(options.variant);\n  var appName = \"app\";\n  var apkDirectory = _path.default.join(projectRoot, \"android\", appName, \"build\", \"outputs\", \"apk\");\n  var _variant$split$map = variant.split(/(?=[A-Z])/).map(function (v) {\n      return v.toLowerCase();\n    }),\n    _variant$split$map2 = _toArray(_variant$split$map),\n    buildType = _variant$split$map2[0],\n    flavors = _variant$split$map2.slice(1);\n  var apkVariantDirectory = (_path$default = _path.default).join.apply(_path$default, [apkDirectory].concat(_toConsumableArray(flavors), [buildType]));\n  return {\n    appName: appName,\n    buildType: buildType,\n    flavors: flavors,\n    apkVariantDirectory: apkVariantDirectory\n  };\n}","map":{"version":3,"names":["_toConsumableArray","require","_toArray","resolveGradleProps","_path","_interopRequireDefault","_errors","assertVariant","variant","CommandError","projectRoot","options","_path$default","appName","apkDirectory","default","join","_variant$split$map","split","map","v","toLowerCase","_variant$split$map2","buildType","flavors","slice","apkVariantDirectory","apply","concat"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\run\\android\\resolveGradleProps.ts"],"sourcesContent":["import path from 'path';\n\nimport { CommandError } from '../../utils/errors';\n\nexport type GradleProps = {\n  /** Directory for the APK based on the `variant`. */\n  apkVariantDirectory: string;\n  /** Name of the app, used in the `apkVariantDirectory`. */\n  appName: string;\n  /** First section of the provided `variant`, indicates the last part of the file name for the output APK. */\n  buildType: string;\n  /** Used to assemble the APK, also included in the output APK filename. */\n  flavors?: string[];\n};\n\nfunction assertVariant(variant?: string) {\n  if (variant && typeof variant !== 'string') {\n    throw new CommandError('BAD_ARGS', '--variant must be a string');\n  }\n  return variant ?? 'debug';\n}\n\nexport function resolveGradleProps(\n  projectRoot: string,\n  options: { variant?: string }\n): GradleProps {\n  const variant = assertVariant(options.variant);\n  // NOTE(EvanBacon): Why would this be different? Can we get the different name?\n  const appName = 'app';\n\n  const apkDirectory = path.join(projectRoot, 'android', appName, 'build', 'outputs', 'apk');\n\n  // buildDeveloperTrust -> build, developer, trust (where developer, and trust are flavors).\n  // This won't work for non-standard flavor names like \"myFlavor\" would be treated as \"my\", \"flavor\".\n  const [buildType, ...flavors] = variant.split(/(?=[A-Z])/).map((v) => v.toLowerCase());\n  const apkVariantDirectory = path.join(apkDirectory, ...flavors, buildType);\n\n  return {\n    appName,\n    buildType,\n    flavors,\n    apkVariantDirectory,\n  };\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,kBAAA,GAAAC,OAAA;AAAA,IAAAC,QAAA,GAAAD,OAAA;;;;QAsBgBE,kBAAkB,GAAlBA,kBAAkB;AAtBjB,IAAAC,KAAM,GAAAC,sBAAA,CAAAJ,OAAA,CAAN,MAAM;AAEM,IAAAK,OAAoB,GAAAL,OAAA;;;;;;AAajD,SAASM,aAAaA,CAACC,OAAgB,EAAE;EACvC,IAAIA,OAAO,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;IAC1C,MAAM,IAAIF,OAAY,CAAAG,YAAA,CAAC,UAAU,EAAE,4BAA4B,CAAC;;EAElE,OAAOD,OAAO,WAAPA,OAAO,GAAI,OAAO;;AAGpB,SAASL,kBAAkBA,CAChCO,WAAmB,EACnBC,OAA6B,EAChB;EAAA,IAAAC,aAAA;EACb,IAAMJ,OAAO,GAAGD,aAAa,CAACI,OAAO,CAACH,OAAO,CAAC;EAE9C,IAAMK,OAAO,GAAG,KAAK;EAErB,IAAMC,YAAY,GAAGV,KAAI,CAAAW,OAAA,CAACC,IAAI,CAACN,WAAW,EAAE,SAAS,EAAEG,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,KAAK,CAAC;EAI1F,IAAAI,kBAAA,GAAgCT,OAAO,CAACU,KAAK,aAAa,CAACC,GAAG,CAAC,UAACC,CAAC;MAAA,OAAKA,CAAC,CAACC,WAAW,EAAE;IAAA,EAAC;IAAAC,mBAAA,GAAApB,QAAA,CAAAe,kBAAA;IAA/EM,SAAS,GAAAD,mBAAA;IAAKE,OAAO,GAAAF,mBAAA,CAAAG,KAAA;EAC5B,IAAMC,mBAAmB,GAAG,CAAAd,aAAA,GAAAR,KAAI,CAAAW,OAAA,EAACC,IAAI,CAAAW,KAAA,CAAAf,aAAA,GAACE,YAAY,EAAAc,MAAA,CAAA5B,kBAAA,CAAKwB,OAAO,IAAED,SAAS,GAAC;EAE1E,OAAO;IACLV,OAAO,EAAPA,OAAO;IACPU,SAAS,EAATA,SAAS;IACTC,OAAO,EAAPA,OAAO;IACPE,mBAAmB,EAAnBA;GACD"},"metadata":{},"sourceType":"script","externalDependencies":[]}