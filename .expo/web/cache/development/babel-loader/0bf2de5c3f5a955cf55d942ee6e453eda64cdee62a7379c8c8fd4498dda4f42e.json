{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _plist = _interopRequireDefault(require(\"@expo/plist\"));\nvar _debug = _interopRequireDefault(require(\"debug\"));\nvar _net = require(\"net\");\nvar _errors = require(\"../../../../utils/errors\");\nvar _plist1 = require(\"../../../../utils/plist\");\nvar _usbmuxProtocol = require(\"../protocol/UsbmuxProtocol\");\nvar _serviceClient = require(\"./ServiceClient\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = (0, _debug).default(\"expo:apple-device:client:usbmuxd\");\nfunction isUsbmuxdConnectResponse(resp) {\n  return resp.MessageType === \"Result\" && resp.Number !== undefined;\n}\nfunction isUsbmuxdDeviceResponse(resp) {\n  return resp.DeviceList !== undefined;\n}\nfunction isUsbmuxdPairRecordResponse(resp) {\n  return resp.PairRecordData !== undefined;\n}\nvar UsbmuxdClient = function (_serviceClient$Servic) {\n  _inherits(UsbmuxdClient, _serviceClient$Servic);\n  var _super = _createSuper(UsbmuxdClient);\n  function UsbmuxdClient(socket) {\n    var _this;\n    _classCallCheck(this, UsbmuxdClient);\n    _this = _super.call(this, socket, new _usbmuxProtocol.UsbmuxProtocolClient(socket));\n    _this.socket = socket;\n    return _this;\n  }\n  _createClass(UsbmuxdClient, [{\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator(function* (device, port) {\n        debug(`connect: ${device.DeviceID} on port ${port}`);\n        debug(`connect:device: %O`, device);\n        var response = yield this.protocolClient.sendMessage({\n          messageType: \"Connect\",\n          extraFields: {\n            DeviceID: device.DeviceID,\n            PortNumber: htons(port)\n          }\n        });\n        debug(`connect:device:response: %O`, response);\n        if (isUsbmuxdConnectResponse(response) && response.Number === 0) {\n          return this.protocolClient.socket;\n        } else {\n          throw new _serviceClient.ResponseError(`There was an error connecting to the USB connected device (id: ${device.DeviceID}, port: ${port})`, response);\n        }\n      });\n      function connect(_x, _x2) {\n        return _connect.apply(this, arguments);\n      }\n      return connect;\n    }()\n  }, {\n    key: \"getDevices\",\n    value: function () {\n      var _getDevices = _asyncToGenerator(function* () {\n        debug(\"getDevices\");\n        var resp = yield this.protocolClient.sendMessage({\n          messageType: \"ListDevices\"\n        });\n        if (isUsbmuxdDeviceResponse(resp)) {\n          return resp.DeviceList;\n        } else {\n          throw new _serviceClient.ResponseError(\"Invalid response from getDevices\", resp);\n        }\n      });\n      function getDevices() {\n        return _getDevices.apply(this, arguments);\n      }\n      return getDevices;\n    }()\n  }, {\n    key: \"getDevice\",\n    value: function () {\n      var _getDevice = _asyncToGenerator(function* (udid) {\n        debug(`getDevice ${udid ? \"udid: \" + udid : \"\"}`);\n        var devices = yield this.getDevices();\n        if (!devices.length) {\n          throw new _errors.CommandError(\"APPLE_DEVICE_USBMUXD\", \"No devices found\");\n        }\n        if (!udid) {\n          return devices[0];\n        }\n        for (var device of devices) {\n          if (device.Properties && device.Properties.SerialNumber === udid) {\n            return device;\n          }\n        }\n        throw new _errors.CommandError(\"APPLE_DEVICE_USBMUXD\", `No device found (udid: ${udid})`);\n      });\n      function getDevice(_x3) {\n        return _getDevice.apply(this, arguments);\n      }\n      return getDevice;\n    }()\n  }, {\n    key: \"readPairRecord\",\n    value: function () {\n      var _readPairRecord = _asyncToGenerator(function* (udid) {\n        debug(`readPairRecord: ${udid}`);\n        var resp = yield this.protocolClient.sendMessage({\n          messageType: \"ReadPairRecord\",\n          extraFields: {\n            PairRecordID: udid\n          }\n        });\n        if (isUsbmuxdPairRecordResponse(resp)) {\n          var BPLIST_MAGIC = Buffer.from(\"bplist00\");\n          if (BPLIST_MAGIC.compare(resp.PairRecordData, 0, 8) === 0) {\n            debug(\"Binary plist pair record detected.\");\n            return (0, _plist1).parsePlistBuffer(resp.PairRecordData)[0];\n          } else {\n            return _plist.default.parse(resp.PairRecordData.toString());\n          }\n        } else {\n          throw new _serviceClient.ResponseError(`There was an error reading pair record for device (udid: ${udid})`, resp);\n        }\n      });\n      function readPairRecord(_x4) {\n        return _readPairRecord.apply(this, arguments);\n      }\n      return readPairRecord;\n    }()\n  }], [{\n    key: \"connectUsbmuxdSocket\",\n    value: function connectUsbmuxdSocket() {\n      debug(\"connectUsbmuxdSocket\");\n      if (process.platform === \"win32\") {\n        return (0, _net).connect({\n          port: 27015,\n          host: \"localhost\"\n        });\n      } else {\n        return (0, _net).connect({\n          path: \"/var/run/usbmuxd\"\n        });\n      }\n    }\n  }]);\n  return UsbmuxdClient;\n}(_serviceClient.ServiceClient);\nexports.UsbmuxdClient = UsbmuxdClient;\nfunction htons(n) {\n  return (n & 255) << 8 | n >> 8 & 255;\n}","map":{"version":3,"names":["_asyncToGenerator","require","_classCallCheck","_createClass","_inherits","_possibleConstructorReturn","_getPrototypeOf","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","_plist","_interopRequireDefault","_debug","_net","_errors","_plist1","_usbmuxProtocol","_serviceClient","debug","default","isUsbmuxdConnectResponse","resp","MessageType","Number","undefined","isUsbmuxdDeviceResponse","DeviceList","isUsbmuxdPairRecordResponse","PairRecordData","UsbmuxdClient","_serviceClient$Servic","_super","socket","_this","UsbmuxProtocolClient","key","value","_connect","device","port","DeviceID","response","protocolClient","sendMessage","messageType","extraFields","PortNumber","htons","ResponseError","connect","_x","_x2","_getDevices","getDevices","_getDevice","udid","devices","length","CommandError","Properties","SerialNumber","getDevice","_x3","_readPairRecord","PairRecordID","BPLIST_MAGIC","Buffer","from","compare","parsePlistBuffer","parse","toString","readPairRecord","_x4","connectUsbmuxdSocket","process","platform","host","path","ServiceClient","n"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\run\\ios\\appleDevice\\client\\UsbmuxdClient.ts"],"sourcesContent":["/**\n * Copyright (c) 2021 Expo, Inc.\n * Copyright (c) 2018 Drifty Co.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport plist from '@expo/plist';\nimport Debug from 'debug';\nimport { Socket, connect } from 'net';\n\nimport { CommandError } from '../../../../utils/errors';\nimport { parsePlistBuffer } from '../../../../utils/plist';\nimport { UsbmuxProtocolClient } from '../protocol/UsbmuxProtocol';\nimport { ResponseError, ServiceClient } from './ServiceClient';\n\nconst debug = Debug('expo:apple-device:client:usbmuxd');\n\nexport interface UsbmuxdDeviceProperties {\n  /** @example 'USB' */\n  ConnectionType: 'USB' | 'Network';\n  /** @example 7 */\n  DeviceID: number;\n  /** @example 339738624 */\n  LocationID?: number;\n  /** @example '00008101-001964A22629003A' */\n  SerialNumber: string;\n  /**\n   * Only available for USB connection.\n   * @example 480000000\n   */\n  ConnectionSpeed?: number;\n  /**\n   * Only available for USB connection.\n   * @example 4776\n   */\n  ProductID?: number;\n  /**\n   * Only available for USB connection.\n   * @example '00008101-001964A22629003A'\n   */\n  UDID?: string;\n  /**\n   * Only available for USB connection.\n   * @example '00008101001964A22629003A'\n   */\n  USBSerialNumber?: string;\n  /**\n   * Only available for Network connection.\n   * @example '08:c7:29:05:f2:30@fe80::ac7:29ff:fe05:f230-supportsRP._apple-mobdev2._tcp.local.'\n   */\n  EscapedFullServiceName?: string;\n  /**\n   * Only available for Network connection.\n   * @example 5\n   */\n  InterfaceIndex?: number;\n  /**\n   * Only available for Network connection.\n   */\n  NetworkAddress?: Buffer;\n}\n\nexport interface UsbmuxdDevice {\n  /** @example 7 */\n  DeviceID: number;\n  MessageType: 'Attached'; // TODO: what else?\n  Properties: UsbmuxdDeviceProperties;\n}\n\nexport interface UsbmuxdConnectResponse {\n  MessageType: 'Result';\n  Number: number;\n}\n\nexport interface UsbmuxdDeviceResponse {\n  DeviceList: UsbmuxdDevice[];\n}\n\nexport interface UsbmuxdPairRecordResponse {\n  PairRecordData: Buffer;\n}\n\nexport interface UsbmuxdPairRecord {\n  DeviceCertificate: Buffer;\n  EscrowBag: Buffer;\n  HostCertificate: Buffer;\n  HostID: string;\n  HostPrivateKey: Buffer;\n  RootCertificate: Buffer;\n  RootPrivateKey: Buffer;\n  SystemBUID: string;\n  WiFiMACAddress: string;\n}\n\nfunction isUsbmuxdConnectResponse(resp: any): resp is UsbmuxdConnectResponse {\n  return resp.MessageType === 'Result' && resp.Number !== undefined;\n}\n\nfunction isUsbmuxdDeviceResponse(resp: any): resp is UsbmuxdDeviceResponse {\n  return resp.DeviceList !== undefined;\n}\n\nfunction isUsbmuxdPairRecordResponse(resp: any): resp is UsbmuxdPairRecordResponse {\n  return resp.PairRecordData !== undefined;\n}\n\nexport class UsbmuxdClient extends ServiceClient<UsbmuxProtocolClient> {\n  constructor(public socket: Socket) {\n    super(socket, new UsbmuxProtocolClient(socket));\n  }\n\n  static connectUsbmuxdSocket(): Socket {\n    debug('connectUsbmuxdSocket');\n    if (process.platform === 'win32') {\n      return connect({ port: 27015, host: 'localhost' });\n    } else {\n      return connect({ path: '/var/run/usbmuxd' });\n    }\n  }\n\n  async connect(device: Pick<UsbmuxdDevice, 'DeviceID'>, port: number): Promise<Socket> {\n    debug(`connect: ${device.DeviceID} on port ${port}`);\n    debug(`connect:device: %O`, device);\n\n    const response = await this.protocolClient.sendMessage({\n      messageType: 'Connect',\n      extraFields: {\n        DeviceID: device.DeviceID,\n        PortNumber: htons(port),\n      },\n    });\n    debug(`connect:device:response: %O`, response);\n\n    if (isUsbmuxdConnectResponse(response) && response.Number === 0) {\n      return this.protocolClient.socket;\n    } else {\n      throw new ResponseError(\n        `There was an error connecting to the USB connected device (id: ${device.DeviceID}, port: ${port})`,\n        response\n      );\n    }\n  }\n\n  async getDevices(): Promise<UsbmuxdDevice[]> {\n    debug('getDevices');\n\n    const resp = await this.protocolClient.sendMessage({\n      messageType: 'ListDevices',\n    });\n\n    if (isUsbmuxdDeviceResponse(resp)) {\n      return resp.DeviceList;\n    } else {\n      throw new ResponseError('Invalid response from getDevices', resp);\n    }\n  }\n\n  async getDevice(udid?: string): Promise<UsbmuxdDevice> {\n    debug(`getDevice ${udid ? 'udid: ' + udid : ''}`);\n    const devices = await this.getDevices();\n\n    if (!devices.length) {\n      throw new CommandError('APPLE_DEVICE_USBMUXD', 'No devices found');\n    }\n\n    if (!udid) {\n      return devices[0];\n    }\n\n    for (const device of devices) {\n      if (device.Properties && device.Properties.SerialNumber === udid) {\n        return device;\n      }\n    }\n\n    throw new CommandError('APPLE_DEVICE_USBMUXD', `No device found (udid: ${udid})`);\n  }\n\n  async readPairRecord(udid: string): Promise<UsbmuxdPairRecord> {\n    debug(`readPairRecord: ${udid}`);\n\n    const resp = await this.protocolClient.sendMessage({\n      messageType: 'ReadPairRecord',\n      extraFields: { PairRecordID: udid },\n    });\n\n    if (isUsbmuxdPairRecordResponse(resp)) {\n      // the pair record can be created as a binary plist\n      const BPLIST_MAGIC = Buffer.from('bplist00');\n      if (BPLIST_MAGIC.compare(resp.PairRecordData, 0, 8) === 0) {\n        debug('Binary plist pair record detected.');\n        return parsePlistBuffer(resp.PairRecordData)[0];\n      } else {\n        // TODO: use parsePlistBuffer\n        return plist.parse(resp.PairRecordData.toString()) as any; // TODO: type guard\n      }\n    } else {\n      throw new ResponseError(\n        `There was an error reading pair record for device (udid: ${udid})`,\n        resp\n      );\n    }\n  }\n}\n\nfunction htons(n: number): number {\n  return ((n & 0xff) << 8) | ((n >> 8) & 0xff);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}