{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDevicesInfoAsync = getDevicesInfoAsync;\nexports.readDevicesInfoAsync = readDevicesInfoAsync;\nexports.setDevicesInfoAsync = setDevicesInfoAsync;\nexports.saveDevicesAsync = saveDevicesAsync;\nexports.DevicesFile = void 0;\nvar _dotExpo = require(\"./dotExpo\");\nvar debug = require(\"debug\")(\"expo:start:project:devices\");\nvar DEVICES_FILE_NAME = \"devices.json\";\nvar MILLISECONDS_IN_30_DAYS = 30 * 24 * 60 * 60 * 1000;\nvar DevicesFile = (0, _dotExpo).createTemporaryProjectFile(DEVICES_FILE_NAME, {\n  devices: []\n});\nexports.DevicesFile = DevicesFile;\nvar devicesInfo = null;\nfunction getDevicesInfoAsync(_x) {\n  return _getDevicesInfoAsync.apply(this, arguments);\n}\nfunction _getDevicesInfoAsync() {\n  _getDevicesInfoAsync = _asyncToGenerator(function* (projectRoot) {\n    if (devicesInfo) {\n      return devicesInfo;\n    }\n    return readDevicesInfoAsync(projectRoot);\n  });\n  return _getDevicesInfoAsync.apply(this, arguments);\n}\nfunction readDevicesInfoAsync(_x2) {\n  return _readDevicesInfoAsync.apply(this, arguments);\n}\nfunction _readDevicesInfoAsync() {\n  _readDevicesInfoAsync = _asyncToGenerator(function* (projectRoot) {\n    try {\n      devicesInfo = yield DevicesFile.readAsync(projectRoot);\n      var filteredDevices = filterOldDevices(devicesInfo.devices);\n      if (filteredDevices.length < devicesInfo.devices.length) {\n        devicesInfo = _objectSpread(_objectSpread({}, devicesInfo), {}, {\n          devices: filteredDevices\n        });\n        try {\n          yield setDevicesInfoAsync(projectRoot, devicesInfo);\n        } catch (_unused) {}\n      }\n      return devicesInfo;\n    } catch (_unused2) {\n      return yield DevicesFile.setAsync(projectRoot, {\n        devices: []\n      });\n    }\n  });\n  return _readDevicesInfoAsync.apply(this, arguments);\n}\nfunction setDevicesInfoAsync(_x3, _x4) {\n  return _setDevicesInfoAsync.apply(this, arguments);\n}\nfunction _setDevicesInfoAsync() {\n  _setDevicesInfoAsync = _asyncToGenerator(function* (projectRoot, json) {\n    devicesInfo = json;\n    return yield DevicesFile.setAsync(projectRoot, json);\n  });\n  return _setDevicesInfoAsync.apply(this, arguments);\n}\nfunction saveDevicesAsync(_x5, _x6) {\n  return _saveDevicesAsync.apply(this, arguments);\n}\nfunction _saveDevicesAsync() {\n  _saveDevicesAsync = _asyncToGenerator(function* (projectRoot, deviceIds) {\n    var currentTime = Date.now();\n    var newDeviceIds = typeof deviceIds === \"string\" ? [deviceIds] : deviceIds;\n    debug(`Saving devices: ${newDeviceIds}`);\n    var _yield$getDevicesInfo = yield getDevicesInfoAsync(projectRoot),\n      devices = _yield$getDevicesInfo.devices;\n    var newDevicesJson = devices.filter(function (device) {\n      return !newDeviceIds.includes(device.installationId);\n    }).concat(newDeviceIds.map(function (deviceId) {\n      return {\n        installationId: deviceId,\n        lastUsed: currentTime\n      };\n    }));\n    yield setDevicesInfoAsync(projectRoot, {\n      devices: filterOldDevices(newDevicesJson)\n    });\n  });\n  return _saveDevicesAsync.apply(this, arguments);\n}\nfunction filterOldDevices(devices) {\n  var currentTime = Date.now();\n  return devices.filter(function (device) {\n    return currentTime - device.lastUsed <= MILLISECONDS_IN_30_DAYS;\n  }).sort(function (a, b) {\n    return b.lastUsed - a.lastUsed;\n  }).slice(0, 10);\n}","map":{"version":3,"names":["_defineProperty","require","_asyncToGenerator","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","getDevicesInfoAsync","readDevicesInfoAsync","setDevicesInfoAsync","saveDevicesAsync","_dotExpo","debug","DEVICES_FILE_NAME","MILLISECONDS_IN_30_DAYS","DevicesFile","createTemporaryProjectFile","devices","devicesInfo","_x","_getDevicesInfoAsync","projectRoot","_x2","_readDevicesInfoAsync","readAsync","filteredDevices","filterOldDevices","_unused","_unused2","setAsync","_x3","_x4","_setDevicesInfoAsync","json","_x5","_x6","_saveDevicesAsync","deviceIds","currentTime","Date","now","newDeviceIds","_yield$getDevicesInfo","newDevicesJson","device","includes","installationId","concat","map","deviceId","lastUsed","sort","a","b","slice"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\project\\devices.ts"],"sourcesContent":["import { createTemporaryProjectFile } from './dotExpo';\n\nconst debug = require('debug')('expo:start:project:devices') as typeof console.log;\n\nexport type DeviceInfo = {\n  installationId: string;\n  lastUsed: number;\n};\n\nexport type DevicesInfo = {\n  devices: DeviceInfo[];\n};\n\nconst DEVICES_FILE_NAME = 'devices.json';\n\nconst MILLISECONDS_IN_30_DAYS = 30 * 24 * 60 * 60 * 1000;\n\nexport const DevicesFile = createTemporaryProjectFile<DevicesInfo>(DEVICES_FILE_NAME, {\n  devices: [],\n});\n\nlet devicesInfo: DevicesInfo | null = null;\n\nexport async function getDevicesInfoAsync(projectRoot: string): Promise<DevicesInfo> {\n  if (devicesInfo) {\n    return devicesInfo;\n  }\n  return readDevicesInfoAsync(projectRoot);\n}\n\nexport async function readDevicesInfoAsync(projectRoot: string): Promise<DevicesInfo> {\n  try {\n    devicesInfo = await DevicesFile.readAsync(projectRoot);\n\n    // if the file on disk has old devices, filter them out here before we use them\n    const filteredDevices = filterOldDevices(devicesInfo.devices);\n    if (filteredDevices.length < devicesInfo.devices.length) {\n      devicesInfo = {\n        ...devicesInfo,\n        devices: filteredDevices,\n      };\n      // save the newly filtered list for consistency\n      try {\n        await setDevicesInfoAsync(projectRoot, devicesInfo);\n      } catch {\n        // do nothing here, we'll just keep using the filtered list in memory for now\n      }\n    }\n\n    return devicesInfo;\n  } catch {\n    return await DevicesFile.setAsync(projectRoot, { devices: [] });\n  }\n}\n\nexport async function setDevicesInfoAsync(\n  projectRoot: string,\n  json: DevicesInfo\n): Promise<DevicesInfo> {\n  devicesInfo = json;\n  return await DevicesFile.setAsync(projectRoot, json);\n}\n\nexport async function saveDevicesAsync(\n  projectRoot: string,\n  deviceIds: string | string[]\n): Promise<void> {\n  const currentTime = Date.now();\n  const newDeviceIds = typeof deviceIds === 'string' ? [deviceIds] : deviceIds;\n\n  debug(`Saving devices: ${newDeviceIds}`);\n  const { devices } = await getDevicesInfoAsync(projectRoot);\n  const newDevicesJson = devices\n    .filter((device) => !newDeviceIds.includes(device.installationId))\n    .concat(newDeviceIds.map((deviceId) => ({ installationId: deviceId, lastUsed: currentTime })));\n  await setDevicesInfoAsync(projectRoot, { devices: filterOldDevices(newDevicesJson) });\n}\n\nfunction filterOldDevices(devices: DeviceInfo[]) {\n  const currentTime = Date.now();\n  return (\n    devices\n      // filter out any devices that haven't been used to open this project in 30 days\n      .filter((device) => currentTime - device.lastUsed <= MILLISECONDS_IN_30_DAYS)\n      // keep only the 10 most recently used devices\n      .sort((a, b) => b.lastUsed - a.lastUsed)\n      .slice(0, 10)\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}