{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAppRouterRelativeEntryPath = getAppRouterRelativeEntryPath;\nexports.getRouterDirectory = getRouterDirectory;\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _resolveFrom = _interopRequireDefault(require(\"resolve-from\"));\nvar _log = require(\"../../../log\");\nvar _dir = require(\"../../../utils/dir\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = require(\"debug\")(\"expo:start:server:metro:router\");\nfunction getAppRouterRelativeEntryPath(projectRoot) {\n  var routerDirectory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getRouterDirectory(projectRoot);\n  var ref;\n  var routerEntry = (ref = _resolveFrom.default.silent(projectRoot, \"expo-router/entry\")) != null ? ref : getFallbackEntryRoot(projectRoot);\n  if (!routerEntry) {\n    return undefined;\n  }\n  var appFolder = _path.default.join(projectRoot, routerDirectory);\n  var appRoot = _path.default.relative(_path.default.dirname(routerEntry), appFolder);\n  debug(\"routerEntry\", routerEntry, appFolder, appRoot);\n  return appRoot;\n}\nfunction getFallbackEntryRoot(projectRoot) {\n  var expoRoot = _resolveFrom.default.silent(projectRoot, \"expo/package.json\");\n  if (expoRoot) {\n    return _path.default.join(_path.default.dirname(_path.default.dirname(expoRoot)), \"expo-router/entry\");\n  }\n  return _path.default.join(projectRoot, \"node_modules/expo-router/entry\");\n}\nfunction getRouterDirectory(projectRoot) {\n  if ((0, _dir).directoryExistsSync(_path.default.join(projectRoot, \"src/app\"))) {\n    _log.Log.log(_chalk.default.gray(\"Using src/app as the root directory for Expo Router.\"));\n    return \"src/app\";\n  }\n  _log.Log.debug(\"Using app as the root directory for Expo Router.\");\n  return \"app\";\n}","map":{"version":3,"names":["getAppRouterRelativeEntryPath","getRouterDirectory","_chalk","_interopRequireDefault","require","_path","_resolveFrom","_log","_dir","debug","projectRoot","routerDirectory","arguments","length","undefined","ref","routerEntry","default","silent","getFallbackEntryRoot","appFolder","join","appRoot","relative","dirname","expoRoot","directoryExistsSync","Log","log","gray"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\metro\\router.ts"],"sourcesContent":["import chalk from 'chalk';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { Log } from '../../../log';\nimport { directoryExistsSync } from '../../../utils/dir';\n\nconst debug = require('debug')('expo:start:server:metro:router') as typeof console.log;\n\n/**\n * Get the relative path for requiring the `/app` folder relative to the `expo-router/entry` file.\n * This mechanism does require the server to restart after the `expo-router` package is installed.\n */\nexport function getAppRouterRelativeEntryPath(\n  projectRoot: string,\n  routerDirectory: string = getRouterDirectory(projectRoot)\n): string | undefined {\n  // Auto pick App entry\n  const routerEntry =\n    resolveFrom.silent(projectRoot, 'expo-router/entry') ?? getFallbackEntryRoot(projectRoot);\n  if (!routerEntry) {\n    return undefined;\n  }\n  // It doesn't matter if the app folder exists.\n  const appFolder = path.join(projectRoot, routerDirectory);\n  const appRoot = path.relative(path.dirname(routerEntry), appFolder);\n  debug('routerEntry', routerEntry, appFolder, appRoot);\n  return appRoot;\n}\n\n/** If the `expo-router` package is not installed, then use the `expo` package to determine where the node modules are relative to the project. */\nfunction getFallbackEntryRoot(projectRoot: string): string {\n  const expoRoot = resolveFrom.silent(projectRoot, 'expo/package.json');\n  if (expoRoot) {\n    return path.join(path.dirname(path.dirname(expoRoot)), 'expo-router/entry');\n  }\n  return path.join(projectRoot, 'node_modules/expo-router/entry');\n}\n\nexport function getRouterDirectory(projectRoot: string): string {\n  // more specific directories first\n  if (directoryExistsSync(path.join(projectRoot, 'src/app'))) {\n    Log.log(chalk.gray('Using src/app as the root directory for Expo Router.'));\n    return 'src/app';\n  }\n\n  Log.debug('Using app as the root directory for Expo Router.');\n  return 'app';\n}\n"],"mappings":"AAAA;;;;;QAagBA,6BAA6B,GAA7BA,6BAA6B;QA0B7BC,kBAAkB,GAAlBA,kBAAkB;AAvChB,IAAAC,MAAO,GAAAC,sBAAA,CAAAC,OAAA,CAAP,OAAO;AACR,IAAAC,KAAM,GAAAF,sBAAA,CAAAC,OAAA,CAAN,MAAM;AACC,IAAAE,YAAc,GAAAH,sBAAA,CAAAC,OAAA,CAAd,cAAc;AAElB,IAAAG,IAAc,GAAAH,OAAA;AACE,IAAAI,IAAoB,GAAAJ,OAAA;;;;;;AAExD,IAAMK,KAAK,GAAGL,OAAO,CAAC,OAAO,CAAC,CAAC,gCAAgC,CAAC;AAMzD,SAASJ,6BAA6BA,CAC3CU,WAAmB,EAEC;EAAA,IADpBC,eAAuB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGX,kBAAkB,CAACS,WAAW,CAAC;MAIvDK,GAAoD;EADtD,IAAMC,WAAW,GACf,CAAAD,GAAoD,GAApDT,YAAW,CAAAW,OAAA,CAACC,MAAM,CAACR,WAAW,EAAE,mBAAmB,CAAC,YAApDK,GAAoD,GAAII,oBAAoB,CAACT,WAAW,CAAC;EAC3F,IAAI,CAACM,WAAW,EAAE;IAChB,OAAOF,SAAS;;EAGlB,IAAMM,SAAS,GAAGf,KAAI,CAAAY,OAAA,CAACI,IAAI,CAACX,WAAW,EAAEC,eAAe,CAAC;EACzD,IAAMW,OAAO,GAAGjB,KAAI,CAAAY,OAAA,CAACM,QAAQ,CAAClB,KAAI,CAAAY,OAAA,CAACO,OAAO,CAACR,WAAW,CAAC,EAAEI,SAAS,CAAC;EACnEX,KAAK,CAAC,aAAa,EAAEO,WAAW,EAAEI,SAAS,EAAEE,OAAO,CAAC;EACrD,OAAOA,OAAO;;AAIhB,SAASH,oBAAoBA,CAACT,WAAmB,EAAU;EACzD,IAAMe,QAAQ,GAAGnB,YAAW,CAAAW,OAAA,CAACC,MAAM,CAACR,WAAW,EAAE,mBAAmB,CAAC;EACrE,IAAIe,QAAQ,EAAE;IACZ,OAAOpB,KAAI,CAAAY,OAAA,CAACI,IAAI,CAAChB,KAAI,CAAAY,OAAA,CAACO,OAAO,CAACnB,KAAI,CAAAY,OAAA,CAACO,OAAO,CAACC,QAAQ,CAAC,CAAC,EAAE,mBAAmB,CAAC;;EAE7E,OAAOpB,KAAI,CAAAY,OAAA,CAACI,IAAI,CAACX,WAAW,EAAE,gCAAgC,CAAC;;AAG1D,SAAST,kBAAkBA,CAACS,WAAmB,EAAU;EAE9D,IAAI,IAAAF,IAAmB,EAAmCkB,mBAAnC,CAACrB,KAAI,CAAAY,OAAA,CAACI,IAAI,CAACX,WAAW,EAAE,SAAS,CAAC,CAAC,EAAE;IAC1DH,IAAG,CAAAoB,GAAA,CAACC,GAAG,CAAC1B,MAAK,CAAAe,OAAA,CAACY,IAAI,CAAC,sDAAsD,CAAC,CAAC;IAC3E,OAAO,SAAS;;EAGlBtB,IAAG,CAAAoB,GAAA,CAAClB,KAAK,CAAC,kDAAkD,CAAC;EAC7D,OAAO,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}