{"ast":null,"code":"#!/usr/bin/env node\n\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.expoExportWeb = void 0;\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _args = require(\"../../utils/args\");\nvar _errors = require(\"../../utils/errors\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar expoExportWeb = function () {\n  var _ref = _asyncToGenerator(function* (argv) {\n    var args = (0, _args).assertArgs({\n      \"--help\": Boolean,\n      \"--clear\": Boolean,\n      \"--dev\": Boolean,\n      \"-h\": \"--help\",\n      \"-c\": \"--clear\"\n    }, argv);\n    if (args[\"--help\"]) {\n      (0, _args).printHelp(`Export the static files of the web app for hosting on a web server`, _chalk.default`npx expo export:web {dim <dir>}`, [_chalk.default`<dir>                         Directory of the Expo project. {dim Default: Current working directory}`, `--dev                         Bundle in development mode`, `-c, --clear                   Clear the bundler cache`, `-h, --help                    Usage info`].join(\"\\n\"));\n    }\n    var projectRoot = (0, _args).getProjectRoot(args);\n    var _yield$Promise$resolv = yield Promise.resolve().then(function () {\n        return _interopRequireWildcard(require(\"./resolveOptions\"));\n      }),\n      resolveOptionsAsync = _yield$Promise$resolv.resolveOptionsAsync;\n    var options = yield resolveOptionsAsync(args).catch(_errors.logCmdError);\n    var _yield$Promise$resolv2 = yield Promise.resolve().then(function () {\n        return _interopRequireWildcard(require(\"./exportWebAsync\"));\n      }),\n      exportWebAsync = _yield$Promise$resolv2.exportWebAsync;\n    return exportWebAsync(projectRoot, options).catch(_errors.logCmdError);\n  });\n  return function expoExportWeb(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexports.expoExportWeb = expoExportWeb;","map":{"version":3,"names":["_chalk","_interopRequireDefault","require","_args","_errors","expoExportWeb","_ref","_asyncToGenerator","argv","args","assertArgs","Boolean","printHelp","default","join","projectRoot","getProjectRoot","_yield$Promise$resolv","Promise","resolve","then","resolveOptionsAsync","options","catch","logCmdError","_yield$Promise$resolv2","exportWebAsync","_x","apply","arguments"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\export\\web\\index.ts"],"sourcesContent":["#!/usr/bin/env node\nimport chalk from 'chalk';\n\nimport { Command } from '../../../bin/cli';\nimport { assertArgs, getProjectRoot, printHelp } from '../../utils/args';\nimport { logCmdError } from '../../utils/errors';\n\nexport const expoExportWeb: Command = async (argv) => {\n  const args = assertArgs(\n    {\n      // Types\n      '--help': Boolean,\n      '--clear': Boolean,\n      '--dev': Boolean,\n      // Aliases\n      '-h': '--help',\n      '-c': '--clear',\n    },\n    argv\n  );\n\n  if (args['--help']) {\n    printHelp(\n      `Export the static files of the web app for hosting on a web server`,\n      chalk`npx expo export:web {dim <dir>}`,\n      [\n        chalk`<dir>                         Directory of the Expo project. {dim Default: Current working directory}`,\n        `--dev                         Bundle in development mode`,\n        `-c, --clear                   Clear the bundler cache`,\n        `-h, --help                    Usage info`,\n      ].join('\\n')\n    );\n  }\n\n  const projectRoot = getProjectRoot(args);\n  const { resolveOptionsAsync } = await import('./resolveOptions');\n  const options = await resolveOptionsAsync(args).catch(logCmdError);\n\n  const { exportWebAsync } = await import('./exportWebAsync');\n  return exportWebAsync(projectRoot, options).catch(logCmdError);\n};\n"],"mappings":"AAAA;;;;;;;;AACkB,IAAAA,MAAO,GAAAC,sBAAA,CAAAC,OAAA,CAAP,OAAO;AAG6B,IAAAC,KAAkB,GAAAD,OAAA;AAC5C,IAAAE,OAAoB,GAAAF,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEzC,IAAMG,aAAa;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAY,WAAOC,IAAI,EAAK;IACpD,IAAMC,IAAI,GAAG,IAAAN,KAAU,EAWtBO,UAXsB,CACrB;MAEE,QAAQ,EAAEC,OAAO;MACjB,SAAS,EAAEA,OAAO;MAClB,OAAO,EAAEA,OAAO;MAEhB,IAAI,EAAE,QAAQ;MACd,IAAI,EAAE;KACP,EACDH,IAAI,CACL;IAED,IAAIC,IAAI,CAAC,QAAQ,CAAC,EAAE;MAClB,IAAAN,KAAS,EASRS,SATQ,CACN,oEAAmE,EACpEZ,MAAK,CAAAa,OAAC,iCAAgC,EACtC,CACEb,MAAK,CAAAa,OAAC,uGAAsG,EAC3G,0DAAyD,EACzD,uDAAsD,EACtD,0CAAyC,CAC3C,CAACC,IAAI,CAAC,IAAI,CAAC,CACb;;IAGH,IAAMC,WAAW,GAAG,IAAAZ,KAAc,EAAMa,cAAN,CAACP,IAAI,CAAC;IACxC,IAAAQ,qBAAA,SAAsCC,OAAA,CAAAC,OAAA,GAAAC,IAAA;iEAAyB;QAAC;MAAxDC,mBAAmB,GAAAJ,qBAAA,CAAnBI,mBAAmB;IAC3B,IAAMC,OAAO,SAASD,mBAAmB,CAACZ,IAAI,CAAC,CAACc,KAAK,CAACnB,OAAW,CAAAoB,WAAA,CAAC;IAElE,IAAAC,sBAAA,SAAiCP,OAAA,CAAAC,OAAA,GAAAC,IAAA;iEAAyB;QAAC;MAAnDM,cAAc,GAAAD,sBAAA,CAAdC,cAAc;IACtB,OAAOA,cAAc,CAACX,WAAW,EAAEO,OAAO,CAAC,CAACC,KAAK,CAACnB,OAAW,CAAAoB,WAAA,CAAC;GAC/D;EAAA,gBAjCYnB,aAAaA,CAAAsB,EAAA;IAAA,OAAArB,IAAA,CAAAsB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAiCzB;QAjCYxB,aAAa,GAAbA,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}