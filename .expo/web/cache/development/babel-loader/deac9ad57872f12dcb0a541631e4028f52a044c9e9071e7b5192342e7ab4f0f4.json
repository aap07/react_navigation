{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/package-manager/build/node/BasePackageManager.d.ts"],"sourcesContent":["import { SpawnPromise, SpawnResult } from '@expo/spawn-async';\nimport { PackageManager, PackageManagerOptions } from '../PackageManager';\nimport { PendingSpawnPromise } from '../utils/spawn';\nexport declare abstract class BasePackageManager implements PackageManager {\n    readonly silent: boolean;\n    readonly log?: (...args: any) => void;\n    readonly options: PackageManagerOptions;\n    constructor({ silent, log, env, ...options }?: PackageManagerOptions);\n    /** Get the name of the package manager */\n    abstract readonly name: string;\n    /** Get the executable binary of the package manager */\n    abstract readonly bin: string;\n    /** Get the lockfile for this package manager */\n    abstract readonly lockFile: string;\n    /** Get the default environment variables used when running the package manager. */\n    protected getDefaultEnvironment(): Record<string, string>;\n    abstract addAsync(namesOrFlags: string[]): SpawnPromise<SpawnResult> | PendingSpawnPromise<SpawnResult>;\n    abstract addDevAsync(namesOrFlags: string[]): SpawnPromise<SpawnResult> | PendingSpawnPromise<SpawnResult>;\n    abstract addGlobalAsync(namesOrFlags: string[]): SpawnPromise<SpawnResult> | PendingSpawnPromise<SpawnResult>;\n    abstract removeAsync(namesOrFlags: string[]): SpawnPromise<SpawnResult> | PendingSpawnPromise<SpawnResult>;\n    abstract removeDevAsync(namesOrFlags: string[]): SpawnPromise<SpawnResult> | PendingSpawnPromise<SpawnResult>;\n    abstract removeGlobalAsync(namesOrFlags: string[]): SpawnPromise<SpawnResult> | PendingSpawnPromise<SpawnResult>;\n    abstract workspaceRoot(): PackageManager | null;\n    /** Ensure the CWD is set to a non-empty string */\n    protected ensureCwdDefined(method?: string): string;\n    runAsync(command: string[]): SpawnPromise<SpawnResult>;\n    versionAsync(): Promise<string>;\n    getConfigAsync(key: string): Promise<string>;\n    removeLockfileAsync(): Promise<void>;\n    installAsync(flags?: string[]): SpawnPromise<SpawnResult> | PendingSpawnPromise<SpawnResult>;\n    uninstallAsync(): Promise<void>;\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}