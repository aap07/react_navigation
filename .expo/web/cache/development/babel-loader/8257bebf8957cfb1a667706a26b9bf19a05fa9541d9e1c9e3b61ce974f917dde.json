{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/react-native-gesture-handler/lib/typescript/handlers/PanGestureHandler.d.ts"],"sourcesContent":["import { BaseGestureHandlerProps } from './gestureHandlerCommon';\nexport declare const panGestureHandlerProps: readonly [\"activeOffsetY\", \"activeOffsetX\", \"failOffsetY\", \"failOffsetX\", \"minDist\", \"minVelocity\", \"minVelocityX\", \"minVelocityY\", \"minPointers\", \"maxPointers\", \"avgTouches\", \"enableTrackpadTwoFingerGesture\", \"activateAfterLongPress\"];\nexport declare const panGestureHandlerCustomNativeProps: readonly [\"activeOffsetYStart\", \"activeOffsetYEnd\", \"activeOffsetXStart\", \"activeOffsetXEnd\", \"failOffsetYStart\", \"failOffsetYEnd\", \"failOffsetXStart\", \"failOffsetXEnd\"];\nexport declare type PanGestureHandlerEventPayload = {\n    /**\n     * X coordinate of the current position of the pointer (finger or a leading\n     * pointer when there are multiple fingers placed) relative to the view\n     * attached to the handler. Expressed in point units.\n     */\n    x: number;\n    /**\n     * Y coordinate of the current position of the pointer (finger or a leading\n     * pointer when there are multiple fingers placed) relative to the view\n     * attached to the handler. Expressed in point units.\n     */\n    y: number;\n    /**\n     * X coordinate of the current position of the pointer (finger or a leading\n     * pointer when there are multiple fingers placed) relative to the window.\n     * The value is expressed in point units. It is recommended to use it instead\n     * of `x` in cases when the original view can be transformed as an effect of\n     * the gesture.\n     */\n    absoluteX: number;\n    /**\n     * Y coordinate of the current position of the pointer (finger or a leading\n     * pointer when there are multiple fingers placed) relative to the window.\n     * The value is expressed in point units. It is recommended to use it instead\n     * of `y` in cases when the original view can be transformed as an\n     * effect of the gesture.\n     */\n    absoluteY: number;\n    /**\n     * Translation of the pan gesture along X axis accumulated over the time of\n     * the gesture. The value is expressed in the point units.\n     */\n    translationX: number;\n    /**\n     * Translation of the pan gesture along Y axis accumulated over the time of\n     * the gesture. The value is expressed in the point units.\n     */\n    translationY: number;\n    /**\n     * Velocity of the pan gesture along the X axis in the current moment. The\n     * value is expressed in point units per second.\n     */\n    velocityX: number;\n    /**\n     * Velocity of the pan gesture along the Y axis in the current moment. The\n     * value is expressed in point units per second.\n     */\n    velocityY: number;\n};\ninterface CommonPanProperties {\n    /**\n     * Minimum distance the finger (or multiple finger) need to travel before the\n     * handler activates. Expressed in points.\n     */\n    minDist?: number;\n    /**\n     * Android only.\n     */\n    avgTouches?: boolean;\n    /**\n     * Enables two-finger gestures on supported devices, for example iPads with\n     * trackpads. If not enabled the gesture will require click + drag, with\n     * enableTrackpadTwoFingerGesture swiping with two fingers will also trigger\n     * the gesture.\n     */\n    enableTrackpadTwoFingerGesture?: boolean;\n    /**\n     * A number of fingers that is required to be placed before handler can\n     * activate. Should be a higher or equal to 0 integer.\n     */\n    minPointers?: number;\n    /**\n     * When the given number of fingers is placed on the screen and handler hasn't\n     * yet activated it will fail recognizing the gesture. Should be a higher or\n     * equal to 0 integer.\n     */\n    maxPointers?: number;\n    minVelocity?: number;\n    minVelocityX?: number;\n    minVelocityY?: number;\n    activateAfterLongPress?: number;\n}\nexport interface PanGestureConfig extends CommonPanProperties {\n    activeOffsetYStart?: number;\n    activeOffsetYEnd?: number;\n    activeOffsetXStart?: number;\n    activeOffsetXEnd?: number;\n    failOffsetYStart?: number;\n    failOffsetYEnd?: number;\n    failOffsetXStart?: number;\n    failOffsetXEnd?: number;\n}\nexport interface PanGestureHandlerProps extends BaseGestureHandlerProps<PanGestureHandlerEventPayload>, CommonPanProperties {\n    /**\n     * Range along X axis (in points) where fingers travels without activation of\n     * handler. Moving outside of this range implies activation of handler. Range\n     * can be given as an array or a single number. If range is set as an array,\n     * first value must be lower or equal to 0, a the second one higher or equal\n     * to 0. If only one number `p` is given a range of `(-inf, p)` will be used\n     * if `p` is higher or equal to 0 and `(-p, inf)` otherwise.\n     */\n    activeOffsetY?: number | number[];\n    /**\n     * Range along X axis (in points) where fingers travels without activation of\n     * handler. Moving outside of this range implies activation of handler. Range\n     * can be given as an array or a single number. If range is set as an array,\n     * first value must be lower or equal to 0, a the second one higher or equal\n     * to 0. If only one number `p` is given a range of `(-inf, p)` will be used\n     * if `p` is higher or equal to 0 and `(-p, inf)` otherwise.\n     */\n    activeOffsetX?: number | number[];\n    /**\n     * When the finger moves outside this range (in points) along Y axis and\n     * handler hasn't yet activated it will fail recognizing the gesture. Range\n     * can be given as an array or a single number. If range is set as an array,\n     * first value must be lower or equal to 0, a the second one higher or equal\n     * to 0. If only one number `p` is given a range of `(-inf, p)` will be used\n     * if `p` is higher or equal to 0 and `(-p, inf)` otherwise.\n     */\n    failOffsetY?: number | number[];\n    /**\n     * When the finger moves outside this range (in points) along X axis and\n     * handler hasn't yet activated it will fail recognizing the gesture. Range\n     * can be given as an array or a single number. If range is set as an array,\n     * first value must be lower or equal to 0, a the second one higher or equal\n     * to 0. If only one number `p` is given a range of `(-inf, p)` will be used\n     * if `p` is higher or equal to 0 and `(-p, inf)` otherwise.\n     */\n    failOffsetX?: number | number[];\n}\nexport declare const panHandlerName = \"PanGestureHandler\";\nexport declare type PanGestureHandler = typeof PanGestureHandler;\nexport declare const PanGestureHandler: import(\"react\").ComponentType<PanGestureHandlerProps & import(\"react\").RefAttributes<any>>;\nexport declare function managePanProps(props: PanGestureHandlerProps): PanGestureHandlerProps & Partial<Record<\"activeOffsetXStart\" | \"activeOffsetXEnd\" | \"failOffsetXStart\" | \"failOffsetXEnd\" | \"activeOffsetYStart\" | \"activeOffsetYEnd\" | \"failOffsetYStart\" | \"failOffsetYEnd\", number>>;\nexport {};\n"],"mappings":"AA0IA"},"metadata":{},"sourceType":"module","externalDependencies":[]}