{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.disableResponseCache = disableResponseCache;\nvar _url = require(\"url\");\nvar Log = _interopRequireWildcard(require(\"../../../log\"));\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar ExpoMiddleware = function () {\n  function ExpoMiddleware(projectRoot, supportedPaths) {\n    _classCallCheck(this, ExpoMiddleware);\n    this.projectRoot = projectRoot;\n    this.supportedPaths = supportedPaths;\n  }\n  _createClass(ExpoMiddleware, [{\n    key: \"_shouldHandleRequest\",\n    value: function _shouldHandleRequest(req) {\n      if (!req.url) {\n        return false;\n      }\n      var parsed = (0, _url).parse(req.url);\n      if (!parsed.pathname) {\n        return false;\n      }\n      return this.supportedPaths.includes(parsed.pathname);\n    }\n  }, {\n    key: \"getHandler\",\n    value: function getHandler() {\n      var _this = this;\n      var internalMiddleware = function () {\n        var _ref = _asyncToGenerator(function* (req, res, next) {\n          try {\n            return yield _this.handleRequestAsync(req, res, next);\n          } catch (error) {\n            Log.exception(error);\n            res.statusCode = 500;\n            if (typeof error === \"object\" && error !== null) {\n              res.end(JSON.stringify({\n                error: error.toString()\n              }));\n            } else {\n              res.end(`Unexpected error: ${error}`);\n            }\n          }\n        });\n        return function internalMiddleware(_x, _x2, _x3) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n      var middleware = function () {\n        var _ref2 = _asyncToGenerator(function* (req, res, next) {\n          if (!_this._shouldHandleRequest(req)) {\n            return next();\n          }\n          return internalMiddleware(req, res, next);\n        });\n        return function middleware(_x4, _x5, _x6) {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n      middleware.internal = internalMiddleware;\n      return middleware;\n    }\n  }]);\n  return ExpoMiddleware;\n}();\nexports.ExpoMiddleware = ExpoMiddleware;\nfunction disableResponseCache(res) {\n  res.setHeader(\"Cache-Control\", \"private, no-cache, no-store, must-revalidate\");\n  res.setHeader(\"Expires\", \"-1\");\n  res.setHeader(\"Pragma\", \"no-cache\");\n  return res;\n}","map":{"version":3,"names":["_asyncToGenerator","require","_classCallCheck","_createClass","disableResponseCache","_url","Log","_interopRequireWildcard","ExpoMiddleware","projectRoot","supportedPaths","key","value","_shouldHandleRequest","req","url","parsed","parse","pathname","includes","getHandler","_this","internalMiddleware","_ref","res","next","handleRequestAsync","error","exception","statusCode","end","JSON","stringify","toString","_x","_x2","_x3","apply","arguments","middleware","_ref2","_x4","_x5","_x6","internal","setHeader"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\middleware\\ExpoMiddleware.ts"],"sourcesContent":["import { parse } from 'url';\n\nimport * as Log from '../../../log';\nimport { ServerNext, ServerRequest, ServerResponse } from './server.types';\n\n/** Base middleware creator for Expo dev servers. */\nexport abstract class ExpoMiddleware {\n  constructor(protected projectRoot: string, protected supportedPaths: string[]) {}\n\n  /**\n   * Returns true when the middleware should handle the incoming server request.\n   * Exposed for testing.\n   */\n  _shouldHandleRequest(req: ServerRequest): boolean {\n    if (!req.url) {\n      return false;\n    }\n    const parsed = parse(req.url);\n    // Strip the query params\n    if (!parsed.pathname) {\n      return false;\n    }\n\n    return this.supportedPaths.includes(parsed.pathname);\n  }\n\n  abstract handleRequestAsync(\n    req: ServerRequest,\n    res: ServerResponse,\n    next: ServerNext\n  ): Promise<void>;\n\n  /** Create a server middleware handler. */\n  public getHandler() {\n    const internalMiddleware = async (\n      req: ServerRequest,\n      res: ServerResponse,\n      next: ServerNext\n    ) => {\n      try {\n        return await this.handleRequestAsync(req, res, next);\n      } catch (error: any) {\n        Log.exception(error);\n        // 5xx = Server Error HTTP code\n        res.statusCode = 500;\n        if (typeof error === 'object' && error !== null) {\n          res.end(\n            JSON.stringify({\n              error: error.toString(),\n            })\n          );\n        } else {\n          res.end(`Unexpected error: ${error}`);\n        }\n      }\n    };\n    const middleware = async (req: ServerRequest, res: ServerResponse, next: ServerNext) => {\n      if (!this._shouldHandleRequest(req)) {\n        return next();\n      }\n      return internalMiddleware(req, res, next);\n    };\n\n    middleware.internal = internalMiddleware;\n\n    return middleware;\n  }\n}\n\nexport function disableResponseCache(res: ServerResponse): ServerResponse {\n  res.setHeader('Cache-Control', 'private, no-cache, no-store, must-revalidate');\n  res.setHeader('Expires', '-1');\n  res.setHeader('Pragma', 'no-cache');\n  return res;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}