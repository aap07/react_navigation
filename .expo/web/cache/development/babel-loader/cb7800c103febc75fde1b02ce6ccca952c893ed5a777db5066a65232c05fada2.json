{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.prebuildAsync = prebuildAsync;\nvar _installAsync = require(\"../install/installAsync\");\nvar _env = require(\"../utils/env\");\nvar _nodeEnv = require(\"../utils/nodeEnv\");\nvar _nodeModules = require(\"../utils/nodeModules\");\nvar _ora = require(\"../utils/ora\");\nvar _profile = require(\"../utils/profile\");\nvar _clearNativeFolder = require(\"./clearNativeFolder\");\nvar _configureProjectAsync = require(\"./configureProjectAsync\");\nvar _ensureConfigAsync = require(\"./ensureConfigAsync\");\nvar _resolveOptions = require(\"./resolveOptions\");\nvar _updateFromTemplate = require(\"./updateFromTemplate\");\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar debug = require(\"debug\")(\"expo:prebuild\");\nfunction prebuildAsync(_x, _x2) {\n  return _prebuildAsync.apply(this, arguments);\n}\nfunction _prebuildAsync() {\n  _prebuildAsync = _asyncToGenerator(function* (projectRoot, options) {\n    (0, _nodeEnv).setNodeEnv(\"development\");\n    require(\"@expo/env\").load(projectRoot);\n    if (options.clean) {\n      var _yield$Promise$resolv = yield Promise.resolve().then(function () {\n          return _interopRequireWildcard(require(\"../utils/git\"));\n        }),\n        maybeBailOnGitStatusAsync = _yield$Promise$resolv.maybeBailOnGitStatusAsync;\n      if (yield maybeBailOnGitStatusAsync()) {\n        return null;\n      }\n      yield (0, _clearNativeFolder).clearNativeFolder(projectRoot, options.platforms);\n    } else {\n      yield (0, _clearNativeFolder).promptToClearMalformedNativeProjectsAsync(projectRoot, options.platforms);\n    }\n    options.platforms = (0, _resolveOptions).ensureValidPlatforms(options.platforms);\n    (0, _resolveOptions).assertPlatforms(options.platforms);\n    var _yield$ensureConfigAs = yield (0, _ensureConfigAsync).ensureConfigAsync(projectRoot, {\n        platforms: options.platforms\n      }),\n      exp = _yield$ensureConfigAs.exp,\n      pkg = _yield$ensureConfigAs.pkg;\n    var _yield$updateFromTemp = yield (0, _updateFromTemplate).updateFromTemplateAsync(projectRoot, {\n        exp: exp,\n        pkg: pkg,\n        template: options.template != null ? (0, _resolveOptions).resolveTemplateOption(options.template) : undefined,\n        platforms: options.platforms,\n        skipDependencyUpdate: options.skipDependencyUpdate\n      }),\n      hasNewProjectFiles = _yield$updateFromTemp.hasNewProjectFiles,\n      needsPodInstall = _yield$updateFromTemp.needsPodInstall,\n      hasNewDependencies = _yield$updateFromTemp.hasNewDependencies;\n    if (options.install) {\n      var ref, ref1, ref2, ref3, ref4;\n      if (hasNewDependencies && ((ref = options.packageManager) == null ? void 0 : ref.npm)) {\n        yield (0, _nodeModules).clearNodeModulesAsync(projectRoot);\n      }\n      yield (0, _installAsync).installAsync([], {\n        npm: !!((ref1 = options.packageManager) == null ? void 0 : ref1.npm),\n        yarn: !!((ref2 = options.packageManager) == null ? void 0 : ref2.yarn),\n        pnpm: !!((ref3 = options.packageManager) == null ? void 0 : ref3.pnpm),\n        bun: !!((ref4 = options.packageManager) == null ? void 0 : ref4.bun),\n        silent: !(_env.env.EXPO_DEBUG || _env.env.CI)\n      });\n    }\n    var configSyncingStep = (0, _ora).logNewSection(\"Config syncing\");\n    try {\n      yield (0, _profile).profile(_configureProjectAsync.configureProjectAsync)(projectRoot, {\n        platforms: options.platforms\n      });\n      configSyncingStep.succeed(\"Config synced\");\n    } catch (error) {\n      configSyncingStep.fail(\"Config sync failed\");\n      throw error;\n    }\n    var podsInstalled = false;\n    if (options.platforms.includes(\"ios\") && options.install && needsPodInstall) {\n      var _yield$Promise$resolv2 = yield Promise.resolve().then(function () {\n          return _interopRequireWildcard(require(\"../utils/cocoapods\"));\n        }),\n        installCocoaPodsAsync = _yield$Promise$resolv2.installCocoaPodsAsync;\n      podsInstalled = yield installCocoaPodsAsync(projectRoot);\n    } else {\n      debug(\"Skipped pod install\");\n    }\n    return {\n      nodeInstall: !!options.install,\n      podInstall: !podsInstalled,\n      platforms: options.platforms,\n      hasNewProjectFiles: hasNewProjectFiles,\n      exp: exp\n    };\n  });\n  return _prebuildAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","prebuildAsync","_installAsync","_env","_nodeEnv","_nodeModules","_ora","_profile","_clearNativeFolder","_configureProjectAsync","_ensureConfigAsync","_resolveOptions","_updateFromTemplate","debug","_x","_x2","_prebuildAsync","apply","arguments","projectRoot","options","setNodeEnv","load","clean","_yield$Promise$resolv","Promise","resolve","then","maybeBailOnGitStatusAsync","clearNativeFolder","platforms","promptToClearMalformedNativeProjectsAsync","ensureValidPlatforms","assertPlatforms","_yield$ensureConfigAs","ensureConfigAsync","exp","pkg","_yield$updateFromTemp","updateFromTemplateAsync","template","resolveTemplateOption","undefined","skipDependencyUpdate","hasNewProjectFiles","needsPodInstall","hasNewDependencies","install","ref","ref1","ref2","ref3","ref4","packageManager","npm","clearNodeModulesAsync","installAsync","yarn","pnpm","bun","silent","env","EXPO_DEBUG","CI","configSyncingStep","logNewSection","profile","configureProjectAsync","succeed","error","fail","podsInstalled","includes","_yield$Promise$resolv2","installCocoaPodsAsync","nodeInstall","podInstall"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\prebuild\\prebuildAsync.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config';\nimport { ModPlatform } from '@expo/config-plugins';\n\nimport { installAsync } from '../install/installAsync';\nimport { env } from '../utils/env';\nimport { setNodeEnv } from '../utils/nodeEnv';\nimport { clearNodeModulesAsync } from '../utils/nodeModules';\nimport { logNewSection } from '../utils/ora';\nimport { profile } from '../utils/profile';\nimport { clearNativeFolder, promptToClearMalformedNativeProjectsAsync } from './clearNativeFolder';\nimport { configureProjectAsync } from './configureProjectAsync';\nimport { ensureConfigAsync } from './ensureConfigAsync';\nimport { assertPlatforms, ensureValidPlatforms, resolveTemplateOption } from './resolveOptions';\nimport { updateFromTemplateAsync } from './updateFromTemplate';\n\nconst debug = require('debug')('expo:prebuild') as typeof console.log;\n\nexport type PrebuildResults = {\n  /** Expo config. */\n  exp: ExpoConfig;\n  /** Indicates if the process created new files. */\n  hasNewProjectFiles: boolean;\n  /** The platforms that were prebuilt. */\n  platforms: ModPlatform[];\n  /** Indicates if pod install was run. */\n  podInstall: boolean;\n  /** Indicates if node modules were installed. */\n  nodeInstall: boolean;\n};\n\n/**\n * Entry point into the prebuild process, delegates to other helpers to perform various steps.\n *\n * 0. Attempt to clean the project folders.\n * 1. Create native projects (ios, android).\n * 2. Install node modules.\n * 3. Apply config to native projects.\n * 4. Install CocoaPods.\n */\nexport async function prebuildAsync(\n  projectRoot: string,\n  options: {\n    /** Should install node modules and cocoapods. */\n    install?: boolean;\n    /** List of platforms to prebuild. */\n    platforms: ModPlatform[];\n    /** Should delete the native folders before attempting to prebuild. */\n    clean?: boolean;\n    /** URL or file path to the prebuild template. */\n    template?: string;\n    /** Name of the node package manager to install with. */\n    packageManager?: {\n      npm?: boolean;\n      yarn?: boolean;\n      pnpm?: boolean;\n      bun?: boolean;\n    };\n    /** List of node modules to skip updating. */\n    skipDependencyUpdate?: string[];\n  }\n): Promise<PrebuildResults | null> {\n  setNodeEnv('development');\n  require('@expo/env').load(projectRoot);\n\n  if (options.clean) {\n    const { maybeBailOnGitStatusAsync } = await import('../utils/git');\n    // Clean the project folders...\n    if (await maybeBailOnGitStatusAsync()) {\n      return null;\n    }\n    // Clear the native folders before syncing\n    await clearNativeFolder(projectRoot, options.platforms);\n  } else {\n    // Check if the existing project folders are malformed.\n    await promptToClearMalformedNativeProjectsAsync(projectRoot, options.platforms);\n  }\n\n  // Warn if the project is attempting to prebuild an unsupported platform (iOS on Windows).\n  options.platforms = ensureValidPlatforms(options.platforms);\n  // Assert if no platforms are left over after filtering.\n  assertPlatforms(options.platforms);\n\n  // Get the Expo config, create it if missing.\n  const { exp, pkg } = await ensureConfigAsync(projectRoot, { platforms: options.platforms });\n\n  // Create native projects from template.\n  const { hasNewProjectFiles, needsPodInstall, hasNewDependencies } = await updateFromTemplateAsync(\n    projectRoot,\n    {\n      exp,\n      pkg,\n      template: options.template != null ? resolveTemplateOption(options.template) : undefined,\n      platforms: options.platforms,\n      skipDependencyUpdate: options.skipDependencyUpdate,\n    }\n  );\n\n  // Install node modules\n  if (options.install) {\n    if (hasNewDependencies && options.packageManager?.npm) {\n      await clearNodeModulesAsync(projectRoot);\n    }\n\n    await installAsync([], {\n      npm: !!options.packageManager?.npm,\n      yarn: !!options.packageManager?.yarn,\n      pnpm: !!options.packageManager?.pnpm,\n      bun: !!options.packageManager?.bun,\n      silent: !(env.EXPO_DEBUG || env.CI),\n    });\n  }\n\n  // Apply Expo config to native projects\n  const configSyncingStep = logNewSection('Config syncing');\n  try {\n    await profile(configureProjectAsync)(projectRoot, {\n      platforms: options.platforms,\n    });\n    configSyncingStep.succeed('Config synced');\n  } catch (error) {\n    configSyncingStep.fail('Config sync failed');\n    throw error;\n  }\n\n  // Install CocoaPods\n  let podsInstalled: boolean = false;\n  // err towards running pod install less because it's slow and users can easily run npx pod-install afterwards.\n  if (options.platforms.includes('ios') && options.install && needsPodInstall) {\n    const { installCocoaPodsAsync } = await import('../utils/cocoapods');\n\n    podsInstalled = await installCocoaPodsAsync(projectRoot);\n  } else {\n    debug('Skipped pod install');\n  }\n\n  return {\n    nodeInstall: !!options.install,\n    podInstall: !podsInstalled,\n    platforms: options.platforms,\n    hasNewProjectFiles,\n    exp,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}