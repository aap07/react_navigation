{"ast":null,"code":"\"use strict\";\n\nvar _toArray = require(\"@babel/runtime/helpers/toArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cloneTemplateAsync = cloneTemplateAsync;\nexports.resolveTemplateArgAsync = resolveTemplateArgAsync;\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _fs = _interopRequireDefault(require(\"fs\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _semver = _interopRequireDefault(require(\"semver\"));\nvar _client = require(\"../api/rest/client\");\nvar Log = _interopRequireWildcard(require(\"../log\"));\nvar _errors = require(\"../utils/errors\");\nvar _npm = require(\"../utils/npm\");\nvar _url = require(\"../utils/url\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar debug = require(\"debug\")(\"expo:prebuild:resolveTemplate\");\nfunction cloneTemplateAsync(_x) {\n  return _cloneTemplateAsync.apply(this, arguments);\n}\nfunction _cloneTemplateAsync() {\n  _cloneTemplateAsync = _asyncToGenerator(function* (_ref) {\n    var templateDirectory = _ref.templateDirectory,\n      template = _ref.template,\n      exp = _ref.exp,\n      ora = _ref.ora;\n    if (template) {\n      yield resolveTemplateArgAsync(templateDirectory, ora, exp.name, template);\n    } else {\n      var templatePackageName = yield getTemplateNpmPackageName(exp.sdkVersion);\n      yield (0, _npm).downloadAndExtractNpmModuleAsync(templatePackageName, {\n        cwd: templateDirectory,\n        name: exp.name\n      });\n    }\n  });\n  return _cloneTemplateAsync.apply(this, arguments);\n}\nfunction getTemplateNpmPackageName(sdkVersion) {\n  if (!sdkVersion || sdkVersion === \"UNVERSIONED\") {\n    Log.log(\"Using an unspecified Expo SDK version. The latest template will be used.\");\n    return `expo-template-bare-minimum@latest`;\n  }\n  return `expo-template-bare-minimum@sdk-${_semver.default.major(sdkVersion)}`;\n}\nfunction getRepoInfo(_x2, _x3) {\n  return _getRepoInfo.apply(this, arguments);\n}\nfunction _getRepoInfo() {\n  _getRepoInfo = _asyncToGenerator(function* (url, examplePath) {\n    var _url$pathname$split = url.pathname.split(\"/\"),\n      _url$pathname$split2 = _toArray(_url$pathname$split),\n      username = _url$pathname$split2[1],\n      name = _url$pathname$split2[2],\n      t = _url$pathname$split2[3],\n      _branch = _url$pathname$split2[4],\n      file = _url$pathname$split2.slice(5);\n    var filePath = examplePath ? examplePath.replace(/^\\//, \"\") : file.join(\"/\");\n    if (t === undefined) {\n      var infoResponse = yield (0, _client).fetchAsync(`https://api.github.com/repos/${username}/${name}`);\n      if (infoResponse.status !== 200) {\n        return;\n      }\n      var info = yield infoResponse.json();\n      return {\n        username: username,\n        name: name,\n        branch: info[\"default_branch\"],\n        filePath: filePath\n      };\n    }\n    var branch = examplePath ? `${_branch}/${file.join(\"/\")}`.replace(new RegExp(`/${filePath}|/$`), \"\") : _branch;\n    if (username && name && branch && t === \"tree\") {\n      return {\n        username: username,\n        name: name,\n        branch: branch,\n        filePath: filePath\n      };\n    }\n    return undefined;\n  });\n  return _getRepoInfo.apply(this, arguments);\n}\nfunction hasRepo(_ref2) {\n  var username = _ref2.username,\n    name = _ref2.name,\n    branch = _ref2.branch,\n    filePath = _ref2.filePath;\n  var contentsUrl = `https://api.github.com/repos/${username}/${name}/contents`;\n  var packagePath = `${filePath ? `/${filePath}` : \"\"}/package.json`;\n  return (0, _url).isUrlOk(contentsUrl + packagePath + `?ref=${branch}`);\n}\nfunction downloadAndExtractRepoAsync(_x4, _x5) {\n  return _downloadAndExtractRepoAsync.apply(this, arguments);\n}\nfunction _downloadAndExtractRepoAsync() {\n  _downloadAndExtractRepoAsync = _asyncToGenerator(function* (root, _ref3) {\n    var username = _ref3.username,\n      name = _ref3.name,\n      branch = _ref3.branch,\n      filePath = _ref3.filePath;\n    var projectName = _path.default.basename(root);\n    var strip = filePath ? filePath.split(\"/\").length + 1 : 1;\n    var url = `https://codeload.github.com/${username}/${name}/tar.gz/${branch}`;\n    debug(\"Downloading tarball from:\", url);\n    yield (0, _npm).extractNpmTarballFromUrlAsync(url, {\n      cwd: root,\n      name: projectName,\n      strip: strip,\n      fileList: [`${name}-${branch}${filePath ? `/${filePath}` : \"\"}`]\n    });\n  });\n  return _downloadAndExtractRepoAsync.apply(this, arguments);\n}\nfunction resolveTemplateArgAsync(_x6, _x7, _x8, _x9, _x10) {\n  return _resolveTemplateArgAsync.apply(this, arguments);\n}\nfunction _resolveTemplateArgAsync() {\n  _resolveTemplateArgAsync = _asyncToGenerator(function* (templateDirectory, oraInstance, appName, template, templatePath) {\n    var repoInfo;\n    if (template) {\n      var repoUrl;\n      try {\n        repoUrl = new URL(template);\n      } catch (error) {\n        if (error.code !== \"ERR_INVALID_URL\") {\n          oraInstance.fail(error);\n          throw error;\n        }\n      }\n      if (process.platform === \"win32\" && repoUrl && _path.default.isAbsolute(repoUrl.toString())) {\n        repoUrl = undefined;\n      }\n      if (!repoUrl) {\n        var _templatePath = _path.default.resolve(template);\n        if (!_fs.default.existsSync(_templatePath)) {\n          throw new _errors.CommandError(`template file does not exist: ${_templatePath}`);\n        }\n        yield (0, _npm).extractLocalNpmTarballAsync(_templatePath, {\n          cwd: templateDirectory,\n          name: appName\n        });\n        return templateDirectory;\n      }\n      if (repoUrl.origin !== \"https://github.com\") {\n        oraInstance.fail(`Invalid URL: ${_chalk.default.red(`\"${template}\"`)}. Only GitHub repositories are supported. Please use a GitHub URL and try again.`);\n        throw new _errors.AbortCommandError();\n      }\n      repoInfo = yield getRepoInfo(repoUrl, templatePath);\n      if (!repoInfo) {\n        oraInstance.fail(`Found invalid GitHub URL: ${_chalk.default.red(`\"${template}\"`)}. Please fix the URL and try again.`);\n        throw new _errors.AbortCommandError();\n      }\n      var found = yield hasRepo(repoInfo);\n      if (!found) {\n        oraInstance.fail(`Could not locate the repository for ${_chalk.default.red(`\"${template}\"`)}. Please check that the repository exists and try again.`);\n        throw new _errors.AbortCommandError();\n      }\n    }\n    if (repoInfo) {\n      oraInstance.text = _chalk.default.bold(`Downloading files from repo ${_chalk.default.cyan(template)}. This might take a moment.`);\n      yield downloadAndExtractRepoAsync(templateDirectory, repoInfo);\n    }\n    return true;\n  });\n  return _resolveTemplateArgAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_toArray","require","_asyncToGenerator","cloneTemplateAsync","resolveTemplateArgAsync","_chalk","_interopRequireDefault","_fs","_path","_semver","_client","Log","_interopRequireWildcard","_errors","_npm","_url","debug","_x","_cloneTemplateAsync","apply","arguments","_ref","templateDirectory","template","exp","ora","name","templatePackageName","getTemplateNpmPackageName","sdkVersion","downloadAndExtractNpmModuleAsync","cwd","log","default","major","getRepoInfo","_x2","_x3","_getRepoInfo","url","examplePath","_url$pathname$split","pathname","split","_url$pathname$split2","username","t","_branch","file","slice","filePath","replace","join","undefined","infoResponse","fetchAsync","status","info","json","branch","RegExp","hasRepo","_ref2","contentsUrl","packagePath","isUrlOk","downloadAndExtractRepoAsync","_x4","_x5","_downloadAndExtractRepoAsync","root","_ref3","projectName","basename","strip","length","extractNpmTarballFromUrlAsync","fileList","_x6","_x7","_x8","_x9","_x10","_resolveTemplateArgAsync","oraInstance","appName","templatePath","repoInfo","repoUrl","URL","error","code","fail","process","platform","isAbsolute","toString","resolve","existsSync","CommandError","extractLocalNpmTarballAsync","origin","red","AbortCommandError","found","text","bold","cyan"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\prebuild\\resolveTemplate.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport { Ora } from 'ora';\nimport path from 'path';\nimport semver from 'semver';\n\nimport { fetchAsync } from '../api/rest/client';\nimport * as Log from '../log';\nimport { AbortCommandError, CommandError } from '../utils/errors';\nimport {\n  downloadAndExtractNpmModuleAsync,\n  extractLocalNpmTarballAsync,\n  extractNpmTarballFromUrlAsync,\n} from '../utils/npm';\nimport { isUrlOk } from '../utils/url';\n\nconst debug = require('debug')('expo:prebuild:resolveTemplate') as typeof console.log;\n\ntype RepoInfo = {\n  username: string;\n  name: string;\n  branch: string;\n  filePath: string;\n};\n\nexport async function cloneTemplateAsync({\n  templateDirectory,\n  template,\n  exp,\n  ora,\n}: {\n  templateDirectory: string;\n  template?: string;\n  exp: Pick<ExpoConfig, 'name' | 'sdkVersion'>;\n  ora: Ora;\n}) {\n  if (template) {\n    await resolveTemplateArgAsync(templateDirectory, ora, exp.name, template);\n  } else {\n    const templatePackageName = await getTemplateNpmPackageName(exp.sdkVersion);\n    await downloadAndExtractNpmModuleAsync(templatePackageName, {\n      cwd: templateDirectory,\n      name: exp.name,\n    });\n  }\n}\n\n/** Given an `sdkVersion` like `44.0.0` return a fully qualified NPM package name like: `expo-template-bare-minimum@sdk-44` */\nfunction getTemplateNpmPackageName(sdkVersion?: string): string {\n  // When undefined or UNVERSIONED, we use the latest version.\n  if (!sdkVersion || sdkVersion === 'UNVERSIONED') {\n    Log.log('Using an unspecified Expo SDK version. The latest template will be used.');\n    return `expo-template-bare-minimum@latest`;\n  }\n  return `expo-template-bare-minimum@sdk-${semver.major(sdkVersion)}`;\n}\n\nasync function getRepoInfo(url: any, examplePath?: string): Promise<RepoInfo | undefined> {\n  const [, username, name, t, _branch, ...file] = url.pathname.split('/');\n  const filePath = examplePath ? examplePath.replace(/^\\//, '') : file.join('/');\n\n  // Support repos whose entire purpose is to be an example, e.g.\n  // https://github.com/:username/:my-cool-example-repo-name.\n  if (t === undefined) {\n    const infoResponse = await fetchAsync(`https://api.github.com/repos/${username}/${name}`);\n    if (infoResponse.status !== 200) {\n      return;\n    }\n    const info = await infoResponse.json();\n    return { username, name, branch: info['default_branch'], filePath };\n  }\n\n  // If examplePath is available, the branch name takes the entire path\n  const branch = examplePath\n    ? `${_branch}/${file.join('/')}`.replace(new RegExp(`/${filePath}|/$`), '')\n    : _branch;\n\n  if (username && name && branch && t === 'tree') {\n    return { username, name, branch, filePath };\n  }\n  return undefined;\n}\n\nfunction hasRepo({ username, name, branch, filePath }: RepoInfo) {\n  const contentsUrl = `https://api.github.com/repos/${username}/${name}/contents`;\n  const packagePath = `${filePath ? `/${filePath}` : ''}/package.json`;\n\n  return isUrlOk(contentsUrl + packagePath + `?ref=${branch}`);\n}\n\nasync function downloadAndExtractRepoAsync(\n  root: string,\n  { username, name, branch, filePath }: RepoInfo\n): Promise<void> {\n  const projectName = path.basename(root);\n\n  const strip = filePath ? filePath.split('/').length + 1 : 1;\n\n  const url = `https://codeload.github.com/${username}/${name}/tar.gz/${branch}`;\n  debug('Downloading tarball from:', url);\n  await extractNpmTarballFromUrlAsync(url, {\n    cwd: root,\n    name: projectName,\n    strip,\n    fileList: [`${name}-${branch}${filePath ? `/${filePath}` : ''}`],\n  });\n}\n\nexport async function resolveTemplateArgAsync(\n  templateDirectory: string,\n  oraInstance: Ora,\n  appName: string,\n  template: string,\n  templatePath?: string\n) {\n  let repoInfo: RepoInfo | undefined;\n\n  if (template) {\n    // @ts-ignore\n    let repoUrl: URL | undefined;\n\n    try {\n      // @ts-ignore\n      repoUrl = new URL(template);\n    } catch (error: any) {\n      if (error.code !== 'ERR_INVALID_URL') {\n        oraInstance.fail(error);\n        throw error;\n      }\n    }\n\n    // On Windows, we can actually create a URL from a local path\n    // Double-check if the created URL is not a path to avoid mixing up URLs and paths\n    if (process.platform === 'win32' && repoUrl && path.isAbsolute(repoUrl.toString())) {\n      repoUrl = undefined;\n    }\n\n    if (!repoUrl) {\n      const templatePath = path.resolve(template);\n      if (!fs.existsSync(templatePath)) {\n        throw new CommandError(`template file does not exist: ${templatePath}`);\n      }\n\n      await extractLocalNpmTarballAsync(templatePath, { cwd: templateDirectory, name: appName });\n      return templateDirectory;\n    }\n\n    if (repoUrl.origin !== 'https://github.com') {\n      oraInstance.fail(\n        `Invalid URL: ${chalk.red(\n          `\"${template}\"`\n        )}. Only GitHub repositories are supported. Please use a GitHub URL and try again.`\n      );\n      throw new AbortCommandError();\n    }\n\n    repoInfo = await getRepoInfo(repoUrl, templatePath);\n\n    if (!repoInfo) {\n      oraInstance.fail(\n        `Found invalid GitHub URL: ${chalk.red(`\"${template}\"`)}. Please fix the URL and try again.`\n      );\n      throw new AbortCommandError();\n    }\n\n    const found = await hasRepo(repoInfo);\n\n    if (!found) {\n      oraInstance.fail(\n        `Could not locate the repository for ${chalk.red(\n          `\"${template}\"`\n        )}. Please check that the repository exists and try again.`\n      );\n      throw new AbortCommandError();\n    }\n  }\n\n  if (repoInfo) {\n    oraInstance.text = chalk.bold(\n      `Downloading files from repo ${chalk.cyan(template)}. This might take a moment.`\n    );\n\n    await downloadAndExtractRepoAsync(templateDirectory, repoInfo);\n  }\n\n  return true;\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,QAAA,GAAAC,OAAA;AAAA,IAAAC,iBAAA,GAAAD,OAAA;;;;QA0BsBE,kBAAkB,GAAlBA,kBAAkB;QAmFlBC,uBAAuB,GAAvBA,uBAAuB;AA5G3B,IAAAC,MAAO,GAAAC,sBAAA,CAAAL,OAAA,CAAP,OAAO;AACV,IAAAM,GAAI,GAAAD,sBAAA,CAAAL,OAAA,CAAJ,IAAI;AAEF,IAAAO,KAAM,GAAAF,sBAAA,CAAAL,OAAA,CAAN,MAAM;AACJ,IAAAQ,OAAQ,GAAAH,sBAAA,CAAAL,OAAA,CAAR,QAAQ;AAEA,IAAAS,OAAoB,GAAAT,OAAA;AACnC,IAAAU,GAAG,GAAAC,uBAAA,CAAAX,OAAA,SAAc,EAAd;AACiC,IAAAY,OAAiB,GAAAZ,OAAA;AAK1D,IAAAa,IAAc,GAAAb,OAAA;AACG,IAAAc,IAAc,GAAAd,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEtC,IAAMe,KAAK,GAAGf,OAAO,CAAC,OAAO,CAAC,CAAC,+BAA+B,CAAC;AAAuB,SAShEE,kBAAkBA,CAAAc,EAAA;EAAA,OAAAC,mBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,oBAAA;EAAAA,mBAAA,GAAAhB,iBAAA,CAAjC,WAAAmB,IAAA,EAUJ;IAAA,IATDC,iBAAiB,GAAAD,IAAA,CAAjBC,iBAAiB;MACjBC,QAAQ,GAAAF,IAAA,CAARE,QAAQ;MACRC,GAAG,GAAAH,IAAA,CAAHG,GAAG;MACHC,GAAG,GAAAJ,IAAA,CAAHI,GAAG;IAOH,IAAIF,QAAQ,EAAE;MACZ,MAAMnB,uBAAuB,CAACkB,iBAAiB,EAAEG,GAAG,EAAED,GAAG,CAACE,IAAI,EAAEH,QAAQ,CAAC;KAC1E,MAAM;MACL,IAAMI,mBAAmB,SAASC,yBAAyB,CAACJ,GAAG,CAACK,UAAU,CAAC;MAC3E,MAAM,IAAAf,IAAgC,EAGpCgB,gCAHoC,CAACH,mBAAmB,EAAE;QAC1DI,GAAG,EAAET,iBAAiB;QACtBI,IAAI,EAAEF,GAAG,CAACE;OACX,CAAC;;GAEL;EAAA,OAAAR,mBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAGD,SAASQ,yBAAyBA,CAACC,UAAmB,EAAU;EAE9D,IAAI,CAACA,UAAU,IAAIA,UAAU,KAAK,aAAa,EAAE;IAC/ClB,GAAG,CAACqB,GAAG,CAAC,0EAA0E,CAAC;IACnF,OAAQ,mCAAkC;;EAE5C,OAAQ,kCAAiCvB,OAAM,CAAAwB,OAAA,CAACC,KAAK,CAACL,UAAU,CAAE,EAAC;;AACpE,SAEcM,WAAWA,CAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,YAAA,CAAAnB,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAkB,aAAA;EAAAA,YAAA,GAAApC,iBAAA,CAA1B,WAA2BqC,GAAQ,EAAEC,WAAoB,EAAiC;IACxF,IAAAC,mBAAA,GAAgDF,GAAG,CAACG,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC;MAAAC,oBAAA,GAAA5C,QAAA,CAAAyC,mBAAA;MAA9DI,QAAQ,GAAAD,oBAAA;MAAElB,IAAI,GAAAkB,oBAAA;MAAEE,CAAC,GAAAF,oBAAA;MAAEG,OAAO,GAAAH,oBAAA;MAAKI,IAAI,GAAAJ,oBAAA,CAAAK,KAAA;IAC5C,IAAMC,QAAQ,GAAGV,WAAW,GAAGA,WAAW,CAACW,OAAO,QAAQ,EAAE,CAAC,GAAGH,IAAI,CAACI,IAAI,CAAC,GAAG,CAAC;IAI9E,IAAIN,CAAC,KAAKO,SAAS,EAAE;MACnB,IAAMC,YAAY,SAAS,IAAA5C,OAAU,EAAoD6C,UAApD,CAAE,gCAA+BV,QAAS,IAAGnB,IAAK,EAAC,CAAC;MACzF,IAAI4B,YAAY,CAACE,MAAM,KAAK,GAAG,EAAE;QAC/B;;MAEF,IAAMC,IAAI,SAASH,YAAY,CAACI,IAAI,EAAE;MACtC,OAAO;QAAEb,QAAQ,EAARA,QAAQ;QAAEnB,IAAI,EAAJA,IAAI;QAAEiC,MAAM,EAAEF,IAAI,CAAC,gBAAgB,CAAC;QAAEP,QAAQ,EAARA;OAAU;;IAIrE,IAAMS,MAAM,GAAGnB,WAAW,GACrB,GAAEO,OAAQ,IAAGC,IAAI,CAACI,IAAI,CAAC,GAAG,CAAE,EAAC,CAACD,OAAO,CAAC,IAAIS,MAAM,CAAE,IAAGV,QAAS,KAAI,CAAC,EAAE,EAAE,CAAC,GACzEH,OAAO;IAEX,IAAIF,QAAQ,IAAInB,IAAI,IAAIiC,MAAM,IAAIb,CAAC,KAAK,MAAM,EAAE;MAC9C,OAAO;QAAED,QAAQ,EAARA,QAAQ;QAAEnB,IAAI,EAAJA,IAAI;QAAEiC,MAAM,EAANA,MAAM;QAAET,QAAQ,EAARA;OAAU;;IAE7C,OAAOG,SAAS;GACjB;EAAA,OAAAf,YAAA,CAAAnB,KAAA,OAAAC,SAAA;AAAA;AAED,SAASyC,OAAOA,CAAAC,KAAA,EAAiD;EAAA,IAA9CjB,QAAQ,GAAAiB,KAAA,CAARjB,QAAQ;IAAEnB,IAAI,GAAAoC,KAAA,CAAJpC,IAAI;IAAEiC,MAAM,GAAAG,KAAA,CAANH,MAAM;IAAET,QAAQ,GAAAY,KAAA,CAARZ,QAAQ;EACjD,IAAMa,WAAW,GAAI,gCAA+BlB,QAAS,IAAGnB,IAAK,WAAU;EAC/E,IAAMsC,WAAW,GAAI,GAAEd,QAAQ,GAAI,IAAGA,QAAS,EAAC,GAAG,EAAG,eAAc;EAEpE,OAAO,IAAAnC,IAAO,EAA8CkD,OAA9C,CAACF,WAAW,GAAGC,WAAW,GAAI,QAAOL,MAAO,EAAC,CAAC;;AAC7D,SAEcO,2BAA2BA,CAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,4BAAA,CAAAlD,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAiD,6BAAA;EAAAA,4BAAA,GAAAnE,iBAAA,CAA1C,WACEoE,IAAY,EAAAC,KAAA,EAEG;IAAA,IADb1B,QAAQ,GAAA0B,KAAA,CAAR1B,QAAQ;MAAEnB,IAAI,GAAA6C,KAAA,CAAJ7C,IAAI;MAAEiC,MAAM,GAAAY,KAAA,CAANZ,MAAM;MAAET,QAAQ,GAAAqB,KAAA,CAARrB,QAAQ;IAElC,IAAMsB,WAAW,GAAGhE,KAAI,CAAAyB,OAAA,CAACwC,QAAQ,CAACH,IAAI,CAAC;IAEvC,IAAMI,KAAK,GAAGxB,QAAQ,GAAGA,QAAQ,CAACP,KAAK,CAAC,GAAG,CAAC,CAACgC,MAAM,GAAG,CAAC,GAAG,CAAC;IAE3D,IAAMpC,GAAG,GAAI,+BAA8BM,QAAS,IAAGnB,IAAK,WAAUiC,MAAO,EAAC;IAC9E3C,KAAK,CAAC,2BAA2B,EAAEuB,GAAG,CAAC;IACvC,MAAM,IAAAzB,IAA6B,EAKjC8D,6BALiC,CAACrC,GAAG,EAAE;MACvCR,GAAG,EAAEuC,IAAI;MACT5C,IAAI,EAAE8C,WAAW;MACjBE,KAAK,EAALA,KAAK;MACLG,QAAQ,EAAE,CAAE,GAAEnD,IAAK,IAAGiC,MAAO,GAAET,QAAQ,GAAI,IAAGA,QAAS,EAAC,GAAG,EAAG,EAAC;KAChE,CAAC;GACH;EAAA,OAAAmB,4BAAA,CAAAlD,KAAA,OAAAC,SAAA;AAAA;AAAA,SAEqBhB,uBAAuBA,CAAA0E,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,IAAA;EAAA,OAAAC,wBAAA,CAAAhE,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAA+D,yBAAA;EAAAA,wBAAA,GAAAjF,iBAAA,CAAtC,WACLoB,iBAAyB,EACzB8D,WAAgB,EAChBC,OAAe,EACf9D,QAAgB,EAChB+D,YAAqB,EACrB;IACA,IAAIC,QAAQ;IAEZ,IAAIhE,QAAQ,EAAE;MAEZ,IAAIiE,OAAO;MAEX,IAAI;QAEFA,OAAO,GAAG,IAAIC,GAAG,CAAClE,QAAQ,CAAC;OAC5B,CAAC,OAAOmE,KAAK,EAAO;QACnB,IAAIA,KAAK,CAACC,IAAI,KAAK,iBAAiB,EAAE;UACpCP,WAAW,CAACQ,IAAI,CAACF,KAAK,CAAC;UACvB,MAAMA,KAAK;;;MAMf,IAAIG,OAAO,CAACC,QAAQ,KAAK,OAAO,IAAIN,OAAO,IAAIhF,KAAI,CAAAyB,OAAA,CAAC8D,UAAU,CAACP,OAAO,CAACQ,QAAQ,EAAE,CAAC,EAAE;QAClFR,OAAO,GAAGnC,SAAS;;MAGrB,IAAI,CAACmC,OAAO,EAAE;QACZ,IAAMF,aAAY,GAAG9E,KAAI,CAAAyB,OAAA,CAACgE,OAAO,CAAC1E,QAAQ,CAAC;QAC3C,IAAI,CAAChB,GAAE,CAAA0B,OAAA,CAACiE,UAAU,CAACZ,aAAY,CAAC,EAAE;UAChC,MAAM,IAAIzE,OAAY,CAAAsF,YAAA,CAAE,iCAAgCb,aAAa,EAAC,CAAC;;QAGzE,MAAM,IAAAxE,IAA2B,EAAyDsF,2BAAzD,CAACd,aAAY,EAAE;UAAEvD,GAAG,EAAET,iBAAiB;UAAEI,IAAI,EAAE2D;SAAS,CAAC;QAC1F,OAAO/D,iBAAiB;;MAG1B,IAAIkE,OAAO,CAACa,MAAM,KAAK,oBAAoB,EAAE;QAC3CjB,WAAW,CAACQ,IAAI,CACb,gBAAevF,MAAK,CAAA4B,OAAA,CAACqE,GAAG,CACtB,IAAG/E,QAAS,GAAE,CACf,kFAAiF,CACpF;QACD,MAAM,IAAIV,OAAiB,CAAA0F,iBAAA,EAAE;;MAG/BhB,QAAQ,SAASpD,WAAW,CAACqD,OAAO,EAAEF,YAAY,CAAC;MAEnD,IAAI,CAACC,QAAQ,EAAE;QACbH,WAAW,CAACQ,IAAI,CACb,6BAA4BvF,MAAK,CAAA4B,OAAA,CAACqE,GAAG,CAAE,IAAG/E,QAAS,GAAE,CAAE,qCAAoC,CAC7F;QACD,MAAM,IAAIV,OAAiB,CAAA0F,iBAAA,EAAE;;MAG/B,IAAMC,KAAK,SAAS3C,OAAO,CAAC0B,QAAQ,CAAC;MAErC,IAAI,CAACiB,KAAK,EAAE;QACVpB,WAAW,CAACQ,IAAI,CACb,uCAAsCvF,MAAK,CAAA4B,OAAA,CAACqE,GAAG,CAC7C,IAAG/E,QAAS,GAAE,CACf,0DAAyD,CAC5D;QACD,MAAM,IAAIV,OAAiB,CAAA0F,iBAAA,EAAE;;;IAIjC,IAAIhB,QAAQ,EAAE;MACZH,WAAW,CAACqB,IAAI,GAAGpG,MAAK,CAAA4B,OAAA,CAACyE,IAAI,CAC1B,+BAA8BrG,MAAK,CAAA4B,OAAA,CAAC0E,IAAI,CAACpF,QAAQ,CAAE,6BAA4B,CACjF;MAED,MAAM2C,2BAA2B,CAAC5C,iBAAiB,EAAEiE,QAAQ,CAAC;;IAGhE,OAAO,IAAI;GACZ;EAAA,OAAAJ,wBAAA,CAAAhE,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}