{"ast":null,"code":"var assert = require('assert');\nvar fs = require('fs');\nvar sudo = require(\"./\");\nvar exec = require('child_process').exec;\nfunction kill(end) {\n  if (process.platform === 'win32') return end();\n  exec('sudo -k', end);\n}\nfunction icns() {\n  if (process.platform !== 'darwin') return undefined;\n  var path = '/Applications/Electron.app/Contents/Resources/Electron.icns';\n  try {\n    fs.statSync(path);\n    return path;\n  } catch (error) {}\n  return undefined;\n}\nkill(function () {\n  var options = {\n    env: {\n      'SUDO_PROMPT_TEST_ENV': 'hello world'\n    },\n    icns: icns(),\n    name: 'Electron'\n  };\n  if (process.platform === 'win32') {\n    var command = 'echo %SUDO_PROMPT_TEST_ENV%';\n    var expected = 'hello world\\r\\n';\n  } else {\n    var command = 'echo \"$SUDO_PROMPT_TEST_ENV\"';\n    var expected = 'hello world\\n';\n  }\n  console.log('sudo.exec(' + JSON.stringify(command) + ', ' + JSON.stringify(options) + ')');\n  sudo.exec(command, options, function (error, stdout, stderr) {\n    console.log('error:', error);\n    console.log('stdout: ' + JSON.stringify(stdout));\n    console.log('stderr: ' + JSON.stringify(stderr));\n    assert(error === undefined || typeof error === 'object');\n    assert(stdout === undefined || typeof stdout === 'string');\n    assert(stderr === undefined || typeof stderr === 'string');\n    kill(function () {\n      if (error) throw error;\n      if (stdout !== expected) {\n        throw new Error('stdout != ' + JSON.stringify(expected));\n      }\n      if (stderr !== '') {\n        throw new Error('stderr != \"\"');\n      }\n      console.log('OK');\n    });\n  });\n});","map":{"version":3,"names":["assert","require","fs","sudo","exec","kill","end","process","platform","icns","undefined","path","statSync","error","options","env","name","command","expected","console","log","JSON","stringify","stdout","stderr","Error"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/sudo-prompt/test.js"],"sourcesContent":["var assert = require('assert');\nvar fs = require('fs');\nvar sudo = require('./');\nvar exec = require('child_process').exec;\n\nfunction kill(end) {\n  if (process.platform === 'win32') return end();\n  exec('sudo -k', end);\n}\n\nfunction icns() {\n  if (process.platform !== 'darwin') return undefined;\n  var path = '/Applications/Electron.app/Contents/Resources/Electron.icns';\n  try {\n    fs.statSync(path);\n    return path;\n  } catch (error) {}\n  return undefined;\n}\n\nkill(\n  function() {\n    var options = {\n      env: { 'SUDO_PROMPT_TEST_ENV': 'hello world' },\n      icns: icns(),\n      name: 'Electron'\n    };\n    if (process.platform === 'win32') {\n      var command = 'echo %SUDO_PROMPT_TEST_ENV%';\n      var expected = 'hello world\\r\\n';\n    } else {\n      // We use double quotes to tell echo to preserve internal space:\n      var command = 'echo \"$SUDO_PROMPT_TEST_ENV\"';\n      var expected = 'hello world\\n';\n    }\n    console.log(\n      'sudo.exec(' +\n        JSON.stringify(command) + ', ' +\n        JSON.stringify(options) +\n      ')'\n    );\n    sudo.exec(command, options,\n      function(error, stdout, stderr) {\n        console.log('error:', error);\n        console.log('stdout: ' + JSON.stringify(stdout));\n        console.log('stderr: ' + JSON.stringify(stderr));\n        assert(error === undefined || typeof error === 'object');\n        assert(stdout === undefined || typeof stdout === 'string');\n        assert(stderr === undefined || typeof stderr === 'string');\n        kill(\n          function() {\n            if (error) throw error;\n            if (stdout !== expected) {\n              throw new Error('stdout != ' + JSON.stringify(expected));\n            }\n            if (stderr !== '') {\n              throw new Error('stderr != \"\"');\n            }\n            console.log('OK');\n          }\n        );\n      }\n    );\n  }\n);\n"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC9B,IAAIC,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;AACtB,IAAIE,IAAI,GAAGF,OAAO,KAAK,CAAC;AACxB,IAAIG,IAAI,GAAGH,OAAO,CAAC,eAAe,CAAC,CAACG,IAAI;AAExC,SAASC,IAAIA,CAACC,GAAG,EAAE;EACjB,IAAIC,OAAO,CAACC,QAAQ,KAAK,OAAO,EAAE,OAAOF,GAAG,CAAC,CAAC;EAC9CF,IAAI,CAAC,SAAS,EAAEE,GAAG,CAAC;AACtB;AAEA,SAASG,IAAIA,CAAA,EAAG;EACd,IAAIF,OAAO,CAACC,QAAQ,KAAK,QAAQ,EAAE,OAAOE,SAAS;EACnD,IAAIC,IAAI,GAAG,6DAA6D;EACxE,IAAI;IACFT,EAAE,CAACU,QAAQ,CAACD,IAAI,CAAC;IACjB,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE,CAAC;EACjB,OAAOH,SAAS;AAClB;AAEAL,IAAI,CACF,YAAW;EACT,IAAIS,OAAO,GAAG;IACZC,GAAG,EAAE;MAAE,sBAAsB,EAAE;IAAc,CAAC;IAC9CN,IAAI,EAAEA,IAAI,CAAC,CAAC;IACZO,IAAI,EAAE;EACR,CAAC;EACD,IAAIT,OAAO,CAACC,QAAQ,KAAK,OAAO,EAAE;IAChC,IAAIS,OAAO,GAAG,6BAA6B;IAC3C,IAAIC,QAAQ,GAAG,iBAAiB;EAClC,CAAC,MAAM;IAEL,IAAID,OAAO,GAAG,8BAA8B;IAC5C,IAAIC,QAAQ,GAAG,eAAe;EAChC;EACAC,OAAO,CAACC,GAAG,CACT,YAAY,GACVC,IAAI,CAACC,SAAS,CAACL,OAAO,CAAC,GAAG,IAAI,GAC9BI,IAAI,CAACC,SAAS,CAACR,OAAO,CAAC,GACzB,GACF,CAAC;EACDX,IAAI,CAACC,IAAI,CAACa,OAAO,EAAEH,OAAO,EACxB,UAASD,KAAK,EAAEU,MAAM,EAAEC,MAAM,EAAE;IAC9BL,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEP,KAAK,CAAC;IAC5BM,OAAO,CAACC,GAAG,CAAC,UAAU,GAAGC,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC,CAAC;IAChDJ,OAAO,CAACC,GAAG,CAAC,UAAU,GAAGC,IAAI,CAACC,SAAS,CAACE,MAAM,CAAC,CAAC;IAChDxB,MAAM,CAACa,KAAK,KAAKH,SAAS,IAAI,OAAOG,KAAK,KAAK,QAAQ,CAAC;IACxDb,MAAM,CAACuB,MAAM,KAAKb,SAAS,IAAI,OAAOa,MAAM,KAAK,QAAQ,CAAC;IAC1DvB,MAAM,CAACwB,MAAM,KAAKd,SAAS,IAAI,OAAOc,MAAM,KAAK,QAAQ,CAAC;IAC1DnB,IAAI,CACF,YAAW;MACT,IAAIQ,KAAK,EAAE,MAAMA,KAAK;MACtB,IAAIU,MAAM,KAAKL,QAAQ,EAAE;QACvB,MAAM,IAAIO,KAAK,CAAC,YAAY,GAAGJ,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAAC,CAAC;MAC1D;MACA,IAAIM,MAAM,KAAK,EAAE,EAAE;QACjB,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;MACjC;MACAN,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;IACnB,CACF,CAAC;EACH,CACF,CAAC;AACH,CACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}