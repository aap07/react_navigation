{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withExtendedResolver = withExtendedResolver;\nexports.shouldAliasAssetRegistryForWeb = shouldAliasAssetRegistryForWeb;\nexports.withMetroMultiPlatformAsync = withMetroMultiPlatformAsync;\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _fs = _interopRequireDefault(require(\"fs\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _resolveFrom = _interopRequireDefault(require(\"resolve-from\"));\nvar _log = require(\"../../../log\");\nvar _fileNotifier = require(\"../../../utils/FileNotifier\");\nvar _env = require(\"../../../utils/env\");\nvar _exit = require(\"../../../utils/exit\");\nvar _interactive = require(\"../../../utils/interactive\");\nvar _link = require(\"../../../utils/link\");\nvar _loadTsConfigPaths = require(\"../../../utils/tsconfig/loadTsConfigPaths\");\nvar _resolveWithTsConfigPaths = require(\"../../../utils/tsconfig/resolveWithTsConfigPaths\");\nvar _webSupportProjectPrerequisite = require(\"../../doctor/web/WebSupportProjectPrerequisite\");\nvar _externals = require(\"./externals\");\nvar _metroErrors = require(\"./metroErrors\");\nvar _resolveFromProject = require(\"./resolveFromProject\");\nvar _router = require(\"./router\");\nvar _withMetroResolvers = require(\"./withMetroResolvers\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = require(\"debug\")(\"expo:start:server:metro:multi-platform\");\nfunction withWebPolyfills(config, projectRoot) {\n  var originalGetPolyfills = config.serializer.getPolyfills ? config.serializer.getPolyfills.bind(config.serializer) : function () {\n    return [];\n  };\n  var getPolyfills = function getPolyfills(ctx) {\n    if (ctx.platform === \"web\") {\n      return [_path.default.join(projectRoot, _externals.EXTERNAL_REQUIRE_POLYFILL)];\n    }\n    var polyfills = originalGetPolyfills(ctx);\n    return [].concat(_toConsumableArray(polyfills), [_externals.EXTERNAL_REQUIRE_NATIVE_POLYFILL]);\n  };\n  return _objectSpread(_objectSpread({}, config), {}, {\n    serializer: _objectSpread(_objectSpread({}, config.serializer), {}, {\n      getPolyfills: getPolyfills\n    })\n  });\n}\nfunction normalizeSlashes(p) {\n  return p.replace(/\\\\/g, \"/\");\n}\nfunction withExtendedResolver(config, _ref) {\n  var projectRoot = _ref.projectRoot,\n    tsconfig = _ref.tsconfig,\n    platforms = _ref.platforms,\n    isTsconfigPathsEnabled = _ref.isTsconfigPathsEnabled;\n  var assetRegistryPath = _fs.default.realpathSync(_path.default.resolve((0, _resolveFrom).default(projectRoot, \"react-native/Libraries/Image/AssetRegistry\")));\n  var isWebEnabled = platforms.includes(\"web\");\n  var _importMetroResolverF = (0, _resolveFromProject).importMetroResolverFromProject(projectRoot),\n    resolve = _importMetroResolverF.resolve;\n  var extraNodeModules = {};\n  var aliases = {\n    web: {\n      \"react-native\": \"react-native-web\"\n    }\n  };\n  if (isWebEnabled) {\n    extraNodeModules[\"web\"] = {\n      \"react-native\": _path.default.resolve(require.resolve(\"react-native-web/package.json\"), \"..\")\n    };\n  }\n  var preferredMainFields = {\n    web: [\"browser\", \"module\", \"main\"]\n  };\n  var _paths1;\n  var tsConfigResolve = (tsconfig == null ? void 0 : tsconfig.paths) ? _resolveWithTsConfigPaths.resolveWithTsConfigPaths.bind(_resolveWithTsConfigPaths.resolveWithTsConfigPaths, {\n    paths: (_paths1 = tsconfig.paths) != null ? _paths1 : {},\n    baseUrl: tsconfig.baseUrl\n  }) : null;\n  if (isTsconfigPathsEnabled && (0, _interactive).isInteractive()) {\n    var configWatcher = new _fileNotifier.FileNotifier(projectRoot, [\"./tsconfig.json\", \"./jsconfig.json\"]);\n    configWatcher.startObserving(function () {\n      debug(\"Reloading tsconfig.json\");\n      (0, _loadTsConfigPaths).loadTsConfigPathsAsync(projectRoot).then(function (tsConfigPaths) {\n        if ((tsConfigPaths == null ? void 0 : tsConfigPaths.paths) && !!Object.keys(tsConfigPaths.paths).length) {\n          debug(\"Enabling tsconfig.json paths support\");\n          var _paths;\n          tsConfigResolve = _resolveWithTsConfigPaths.resolveWithTsConfigPaths.bind(_resolveWithTsConfigPaths.resolveWithTsConfigPaths, {\n            paths: (_paths = tsConfigPaths.paths) != null ? _paths : {},\n            baseUrl: tsConfigPaths.baseUrl\n          });\n        } else {\n          debug(\"Disabling tsconfig.json paths support\");\n          tsConfigResolve = null;\n        }\n      });\n    });\n    (0, _exit).installExitHooks(function () {\n      configWatcher.stopObserving();\n    });\n  } else {\n    debug(\"Skipping tsconfig.json paths support\");\n  }\n  return (0, _withMetroResolvers).withMetroResolvers(config, projectRoot, [function (immutableContext, moduleName1, platform) {\n    var ref;\n    var context = _objectSpread({}, immutableContext);\n    var environment = (ref = context.customResolverOptions) == null ? void 0 : ref.environment;\n    var isNode = environment === \"node\";\n    if (isNode) {\n      var moduleId = (0, _externals).isNodeExternal(moduleName1);\n      if (moduleId) {\n        moduleName1 = (0, _externals).getNodeExternalModuleId(context.originModulePath, moduleId);\n        debug(`Redirecting Node.js external \"${moduleId}\" to \"${moduleName1}\"`);\n      }\n    }\n    if (platform && platform in aliases && aliases[platform][moduleName1]) {\n      moduleName1 = aliases[platform][moduleName1];\n    }\n    if (platform && platform in extraNodeModules) {\n      context.extraNodeModules = _objectSpread(_objectSpread({}, extraNodeModules[platform]), context.extraNodeModules);\n    }\n    if ((tsconfig == null ? void 0 : tsconfig.baseUrl) && isTsconfigPathsEnabled) {\n      context = _objectSpread(_objectSpread({}, context), {}, {\n        nodeModulesPaths: [].concat(_toConsumableArray(immutableContext.nodeModulesPaths), [tsconfig.baseUrl])\n      });\n    }\n    var mainFields = context.mainFields;\n    if (isNode) {\n      mainFields = [\"main\"];\n    } else if (_env.env.EXPO_METRO_NO_MAIN_FIELD_OVERRIDE) {\n      mainFields = context.mainFields;\n    } else if (platform && platform in preferredMainFields) {\n      mainFields = preferredMainFields[platform];\n    }\n    function doResolve(moduleName) {\n      return resolve(_objectSpread(_objectSpread({}, context), {}, {\n        preferNativePlatform: platform !== \"web\",\n        resolveRequest: undefined,\n        mainFields: mainFields,\n        getPackageMainPath: function getPackageMainPath(packageJsonPath) {\n          var package_ = context.moduleCache.getPackage(packageJsonPath);\n          return package_.getMain(mainFields);\n        }\n      }), moduleName, platform);\n    }\n    function optionalResolve(moduleName) {\n      try {\n        return doResolve(moduleName);\n      } catch (error) {\n        var isResolutionError = (0, _metroErrors).isFailedToResolveNameError(error) || (0, _metroErrors).isFailedToResolvePathError(error);\n        if (!isResolutionError) {\n          throw error;\n        }\n      }\n      return null;\n    }\n    var result = null;\n    if (tsConfigResolve) {\n      result = tsConfigResolve({\n        originModulePath: context.originModulePath,\n        moduleName: moduleName1\n      }, optionalResolve);\n    }\n    result != null ? result : result = doResolve(moduleName1);\n    if (result) {\n      if (shouldAliasAssetRegistryForWeb(platform, result)) {\n        result.filePath = assetRegistryPath;\n      }\n    }\n    return result;\n  }]);\n}\nfunction shouldAliasAssetRegistryForWeb(platform, result) {\n  return platform === \"web\" && (result == null ? void 0 : result.type) === \"sourceFile\" && typeof (result == null ? void 0 : result.filePath) === \"string\" && normalizeSlashes(result.filePath).endsWith(\"react-native-web/dist/modules/AssetRegistry/index.js\");\n}\nfunction withMetroMultiPlatformAsync(_x, _x2) {\n  return _withMetroMultiPlatformAsync.apply(this, arguments);\n}\nfunction _withMetroMultiPlatformAsync() {\n  _withMetroMultiPlatformAsync = _asyncToGenerator(function* (projectRoot, _ref2) {\n    var config = _ref2.config,\n      platformBundlers = _ref2.platformBundlers,\n      isTsconfigPathsEnabled = _ref2.isTsconfigPathsEnabled,\n      webOutput = _ref2.webOutput,\n      routerDirectory = _ref2.routerDirectory;\n    process.env.EXPO_ROUTER_APP_ROOT = (0, _router).getAppRouterRelativeEntryPath(projectRoot, routerDirectory);\n    var _EXPO_PUBLIC_PROJECT_ROOT;\n    process.env.EXPO_PUBLIC_PROJECT_ROOT = (_EXPO_PUBLIC_PROJECT_ROOT = process.env.EXPO_PUBLIC_PROJECT_ROOT) != null ? _EXPO_PUBLIC_PROJECT_ROOT : projectRoot;\n    if (webOutput === \"static\") {\n      process.env.EXPO_PUBLIC_USE_STATIC = \"1\";\n    }\n    config.transformer._expoRouterRootDirectory = process.env.EXPO_ROUTER_APP_ROOT;\n    config.transformer._expoRouterWebRendering = webOutput;\n    if (platformBundlers.web === \"metro\") {\n      yield new _webSupportProjectPrerequisite.WebSupportProjectPrerequisite(projectRoot).assertAsync();\n    } else if (!isTsconfigPathsEnabled) {\n      return config;\n    }\n    var tsconfig = null;\n    if (isTsconfigPathsEnabled) {\n      _log.Log.warn(_chalk.default.yellow`Experimental path aliases feature is enabled. ` + (0, _link).learnMore(\"https://docs.expo.dev/guides/typescript/#path-aliases\"));\n      tsconfig = yield (0, _loadTsConfigPaths).loadTsConfigPathsAsync(projectRoot);\n    }\n    yield (0, _externals).setupNodeExternals(projectRoot);\n    return withMetroMultiPlatform(projectRoot, {\n      config: config,\n      platformBundlers: platformBundlers,\n      tsconfig: tsconfig,\n      isTsconfigPathsEnabled: isTsconfigPathsEnabled\n    });\n  });\n  return _withMetroMultiPlatformAsync.apply(this, arguments);\n}\nfunction withMetroMultiPlatform(projectRoot, _ref3) {\n  var config = _ref3.config,\n    platformBundlers = _ref3.platformBundlers,\n    isTsconfigPathsEnabled = _ref3.isTsconfigPathsEnabled,\n    tsconfig = _ref3.tsconfig;\n  var expoConfigPlatforms = Object.entries(platformBundlers).filter(function (_ref4) {\n    var _ref5 = _slicedToArray(_ref4, 2),\n      bundler = _ref5[1];\n    return bundler === \"metro\";\n  }).map(function (_ref6) {\n    var _ref7 = _slicedToArray(_ref6, 1),\n      platform = _ref7[0];\n    return platform;\n  });\n  if (Array.isArray(config.resolver.platforms)) {\n    expoConfigPlatforms = _toConsumableArray(new Set(expoConfigPlatforms.concat(config.resolver.platforms)));\n  }\n  config.resolver.platforms = expoConfigPlatforms;\n  if (expoConfigPlatforms.includes(\"web\")) {\n    config = withWebPolyfills(config, projectRoot);\n  }\n  return withExtendedResolver(config, {\n    projectRoot: projectRoot,\n    tsconfig: tsconfig,\n    isTsconfigPathsEnabled: isTsconfigPathsEnabled,\n    platforms: expoConfigPlatforms\n  });\n}","map":{"version":3,"names":["_slicedToArray","require","_asyncToGenerator","_defineProperty","_toConsumableArray","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","withExtendedResolver","shouldAliasAssetRegistryForWeb","withMetroMultiPlatformAsync","_chalk","_interopRequireDefault","_fs","_path","_resolveFrom","_log","_fileNotifier","_env","_exit","_interactive","_link","_loadTsConfigPaths","_resolveWithTsConfigPaths","_webSupportProjectPrerequisite","_externals","_metroErrors","_resolveFromProject","_router","_withMetroResolvers","debug","withWebPolyfills","config","projectRoot","originalGetPolyfills","serializer","getPolyfills","bind","ctx","platform","default","join","EXTERNAL_REQUIRE_POLYFILL","polyfills","concat","EXTERNAL_REQUIRE_NATIVE_POLYFILL","normalizeSlashes","p","replace","_ref","tsconfig","platforms","isTsconfigPathsEnabled","assetRegistryPath","realpathSync","resolve","isWebEnabled","includes","_importMetroResolverF","importMetroResolverFromProject","extraNodeModules","aliases","web","preferredMainFields","_paths1","tsConfigResolve","paths","resolveWithTsConfigPaths","baseUrl","isInteractive","configWatcher","FileNotifier","startObserving","loadTsConfigPathsAsync","then","tsConfigPaths","_paths","installExitHooks","stopObserving","withMetroResolvers","immutableContext","moduleName1","ref","context","environment","customResolverOptions","isNode","moduleId","isNodeExternal","getNodeExternalModuleId","originModulePath","nodeModulesPaths","mainFields","env","EXPO_METRO_NO_MAIN_FIELD_OVERRIDE","doResolve","moduleName","preferNativePlatform","resolveRequest","undefined","getPackageMainPath","packageJsonPath","package_","moduleCache","getPackage","getMain","optionalResolve","error","isResolutionError","isFailedToResolveNameError","isFailedToResolvePathError","result","filePath","type","endsWith","_x","_x2","_withMetroMultiPlatformAsync","_ref2","platformBundlers","webOutput","routerDirectory","process","EXPO_ROUTER_APP_ROOT","getAppRouterRelativeEntryPath","_EXPO_PUBLIC_PROJECT_ROOT","EXPO_PUBLIC_PROJECT_ROOT","EXPO_PUBLIC_USE_STATIC","transformer","_expoRouterRootDirectory","_expoRouterWebRendering","WebSupportProjectPrerequisite","assertAsync","Log","warn","yellow","learnMore","setupNodeExternals","withMetroMultiPlatform","_ref3","expoConfigPlatforms","entries","_ref4","_ref5","bundler","map","_ref6","_ref7","Array","isArray","resolver","Set"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\metro\\withMetroMultiPlatform.ts"],"sourcesContent":["/**\n * Copyright © 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport { ConfigT } from 'metro-config';\nimport { Resolution, ResolutionContext } from 'metro-resolver';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { Log } from '../../../log';\nimport { FileNotifier } from '../../../utils/FileNotifier';\nimport { env } from '../../../utils/env';\nimport { installExitHooks } from '../../../utils/exit';\nimport { isInteractive } from '../../../utils/interactive';\nimport { learnMore } from '../../../utils/link';\nimport { loadTsConfigPathsAsync, TsConfigPaths } from '../../../utils/tsconfig/loadTsConfigPaths';\nimport { resolveWithTsConfigPaths } from '../../../utils/tsconfig/resolveWithTsConfigPaths';\nimport { WebSupportProjectPrerequisite } from '../../doctor/web/WebSupportProjectPrerequisite';\nimport { PlatformBundlers } from '../platformBundlers';\nimport {\n  EXTERNAL_REQUIRE_NATIVE_POLYFILL,\n  EXTERNAL_REQUIRE_POLYFILL,\n  getNodeExternalModuleId,\n  isNodeExternal,\n  setupNodeExternals,\n} from './externals';\nimport { isFailedToResolveNameError, isFailedToResolvePathError } from './metroErrors';\nimport { importMetroResolverFromProject } from './resolveFromProject';\nimport { getAppRouterRelativeEntryPath } from './router';\nimport { withMetroResolvers } from './withMetroResolvers';\n\ntype Mutable<T> = { -readonly [K in keyof T]: T[K] };\n\nconst debug = require('debug')('expo:start:server:metro:multi-platform') as typeof console.log;\n\nfunction withWebPolyfills(config: ConfigT, projectRoot: string): ConfigT {\n  const originalGetPolyfills = config.serializer.getPolyfills\n    ? config.serializer.getPolyfills.bind(config.serializer)\n    : () => [];\n\n  const getPolyfills = (ctx: { platform: string | null }): readonly string[] => {\n    if (ctx.platform === 'web') {\n      return [\n        // NOTE: We might need this for all platforms\n        path.join(projectRoot, EXTERNAL_REQUIRE_POLYFILL),\n        // TODO: runtime polyfills, i.e. Fast Refresh, error overlay, React Dev Tools...\n      ];\n    }\n    // Generally uses `rn-get-polyfills`\n    const polyfills = originalGetPolyfills(ctx);\n\n    return [...polyfills, EXTERNAL_REQUIRE_NATIVE_POLYFILL];\n  };\n\n  return {\n    ...config,\n    serializer: {\n      ...config.serializer,\n      getPolyfills,\n    },\n  };\n}\n\nfunction normalizeSlashes(p: string) {\n  return p.replace(/\\\\/g, '/');\n}\n\n/**\n * Apply custom resolvers to do the following:\n * - Disable `.native.js` extensions on web.\n * - Alias `react-native` to `react-native-web` on web.\n * - Redirect `react-native-web/dist/modules/AssetRegistry/index.js` to `@react-native/assets/registry.js` on web.\n * - Add support for `tsconfig.json`/`jsconfig.json` aliases via `compilerOptions.paths`.\n */\nexport function withExtendedResolver(\n  config: ConfigT,\n  {\n    projectRoot,\n    tsconfig,\n    platforms,\n    isTsconfigPathsEnabled,\n  }: {\n    projectRoot: string;\n    tsconfig: TsConfigPaths | null;\n    platforms: string[];\n    isTsconfigPathsEnabled?: boolean;\n  }\n) {\n  // Get the `transformer.assetRegistryPath`\n  // this needs to be unified since you can't dynamically\n  // swap out the transformer based on platform.\n  const assetRegistryPath = fs.realpathSync(\n    // This is the native asset registry alias for native.\n    path.resolve(resolveFrom(projectRoot, 'react-native/Libraries/Image/AssetRegistry'))\n    // NOTE(EvanBacon): This is the newer import but it doesn't work in the expo/expo monorepo.\n    // path.resolve(resolveFrom(projectRoot, '@react-native/assets/registry.js'))\n  );\n\n  const isWebEnabled = platforms.includes('web');\n\n  const { resolve } = importMetroResolverFromProject(projectRoot);\n\n  const extraNodeModules: { [key: string]: Record<string, string> } = {};\n\n  const aliases: { [key: string]: Record<string, string> } = {\n    web: {\n      'react-native': 'react-native-web',\n    },\n  };\n\n  if (isWebEnabled) {\n    // Allow `react-native-web` to be optional when web is not enabled but path aliases is.\n    extraNodeModules['web'] = {\n      'react-native': path.resolve(require.resolve('react-native-web/package.json'), '..'),\n    };\n  }\n\n  const preferredMainFields: { [key: string]: string[] } = {\n    // Defaults from Expo Webpack. Most packages using `react-native` don't support web\n    // in the `react-native` field, so we should prefer the `browser` field.\n    // https://github.com/expo/router/issues/37\n    web: ['browser', 'module', 'main'],\n  };\n\n  let tsConfigResolve = tsconfig?.paths\n    ? resolveWithTsConfigPaths.bind(resolveWithTsConfigPaths, {\n        paths: tsconfig.paths ?? {},\n        baseUrl: tsconfig.baseUrl,\n      })\n    : null;\n\n  if (isTsconfigPathsEnabled && isInteractive()) {\n    // TODO: We should track all the files that used imports and invalidate them\n    // currently the user will need to save all the files that use imports to\n    // use the new aliases.\n    const configWatcher = new FileNotifier(projectRoot, ['./tsconfig.json', './jsconfig.json']);\n    configWatcher.startObserving(() => {\n      debug('Reloading tsconfig.json');\n      loadTsConfigPathsAsync(projectRoot).then((tsConfigPaths) => {\n        if (tsConfigPaths?.paths && !!Object.keys(tsConfigPaths.paths).length) {\n          debug('Enabling tsconfig.json paths support');\n          tsConfigResolve = resolveWithTsConfigPaths.bind(resolveWithTsConfigPaths, {\n            paths: tsConfigPaths.paths ?? {},\n            baseUrl: tsConfigPaths.baseUrl,\n          });\n        } else {\n          debug('Disabling tsconfig.json paths support');\n          tsConfigResolve = null;\n        }\n      });\n    });\n\n    // TODO: This probably prevents the process from exiting.\n    installExitHooks(() => {\n      configWatcher.stopObserving();\n    });\n  } else {\n    debug('Skipping tsconfig.json paths support');\n  }\n\n  return withMetroResolvers(config, projectRoot, [\n    // Add a resolver to alias the web asset resolver.\n    (immutableContext: ResolutionContext, moduleName: string, platform: string | null) => {\n      let context = {\n        ...immutableContext,\n      } as Mutable<ResolutionContext> & {\n        mainFields: string[];\n        customResolverOptions?: Record<string, string>;\n      };\n\n      const environment = context.customResolverOptions?.environment;\n      const isNode = environment === 'node';\n\n      // TODO: We need to prevent the require.context from including API routes as these use externals.\n      // Should be fine after async routes lands.\n      if (isNode) {\n        const moduleId = isNodeExternal(moduleName);\n        if (moduleId) {\n          moduleName = getNodeExternalModuleId(context.originModulePath, moduleId);\n          debug(`Redirecting Node.js external \"${moduleId}\" to \"${moduleName}\"`);\n        }\n      }\n\n      // Conditionally remap `react-native` to `react-native-web` on web in\n      // a way that doesn't require Babel to resolve the alias.\n      if (platform && platform in aliases && aliases[platform][moduleName]) {\n        moduleName = aliases[platform][moduleName];\n      }\n\n      // TODO: We may be able to remove this in the future, it's doing no harm\n      // by staying here.\n      // Conditionally remap `react-native` to `react-native-web`\n      if (platform && platform in extraNodeModules) {\n        context.extraNodeModules = {\n          ...extraNodeModules[platform],\n          ...context.extraNodeModules,\n        };\n      }\n\n      if (tsconfig?.baseUrl && isTsconfigPathsEnabled) {\n        context = {\n          ...context,\n          nodeModulesPaths: [\n            ...immutableContext.nodeModulesPaths,\n            // add last to ensure node modules are resolved first\n            tsconfig.baseUrl,\n          ],\n        };\n      }\n\n      let mainFields: string[] = context.mainFields;\n\n      if (isNode) {\n        // Node.js runtimes should only be importing main at the moment.\n        // This is a temporary fix until we can support the package.json exports.\n        mainFields = ['main'];\n      } else if (env.EXPO_METRO_NO_MAIN_FIELD_OVERRIDE) {\n        mainFields = context.mainFields;\n      } else if (platform && platform in preferredMainFields) {\n        mainFields = preferredMainFields[platform];\n      }\n      function doResolve(moduleName: string): Resolution | null {\n        return resolve(\n          {\n            ...context,\n            preferNativePlatform: platform !== 'web',\n            resolveRequest: undefined,\n\n            mainFields,\n\n            // Passing `mainFields` directly won't be considered (in certain version of Metro)\n            // we need to extend the `getPackageMainPath` directly to\n            // use platform specific `mainFields`.\n            // @ts-ignore\n            getPackageMainPath(packageJsonPath) {\n              // @ts-expect-error: mainFields is not on type\n              const package_ = context.moduleCache.getPackage(packageJsonPath);\n              return package_.getMain(mainFields);\n            },\n          },\n          moduleName,\n          platform\n        );\n      }\n\n      function optionalResolve(moduleName: string): Resolution | null {\n        try {\n          return doResolve(moduleName);\n        } catch (error) {\n          // If the error is directly related to a resolver not being able to resolve a module, then\n          // we can ignore the error and try the next resolver. Otherwise, we should throw the error.\n          const isResolutionError =\n            isFailedToResolveNameError(error) || isFailedToResolvePathError(error);\n          if (!isResolutionError) {\n            throw error;\n          }\n        }\n        return null;\n      }\n\n      let result: Resolution | null = null;\n\n      if (tsConfigResolve) {\n        result = tsConfigResolve(\n          {\n            originModulePath: context.originModulePath,\n            moduleName,\n          },\n          optionalResolve\n        );\n      }\n\n      result ??= doResolve(moduleName);\n\n      if (result) {\n        // Replace the web resolver with the original one.\n        // This is basically an alias for web-only.\n        if (shouldAliasAssetRegistryForWeb(platform, result)) {\n          // @ts-expect-error: `readonly` for some reason.\n          result.filePath = assetRegistryPath;\n        }\n      }\n      return result;\n    },\n  ]);\n}\n\n/** @returns `true` if the incoming resolution should be swapped on web. */\nexport function shouldAliasAssetRegistryForWeb(\n  platform: string | null,\n  result: Resolution\n): boolean {\n  return (\n    platform === 'web' &&\n    result?.type === 'sourceFile' &&\n    typeof result?.filePath === 'string' &&\n    normalizeSlashes(result.filePath).endsWith(\n      'react-native-web/dist/modules/AssetRegistry/index.js'\n    )\n  );\n}\n\n/** Add support for `react-native-web` and the Web platform. */\nexport async function withMetroMultiPlatformAsync(\n  projectRoot: string,\n  {\n    config,\n    platformBundlers,\n    isTsconfigPathsEnabled,\n    webOutput,\n    routerDirectory,\n  }: {\n    config: ConfigT;\n    isTsconfigPathsEnabled: boolean;\n    platformBundlers: PlatformBundlers;\n    webOutput?: 'single' | 'static';\n    routerDirectory: string;\n  }\n) {\n  // Auto pick app entry for router.\n  process.env.EXPO_ROUTER_APP_ROOT = getAppRouterRelativeEntryPath(projectRoot, routerDirectory);\n\n  // Required for @expo/metro-runtime to format paths in the web LogBox.\n  process.env.EXPO_PUBLIC_PROJECT_ROOT = process.env.EXPO_PUBLIC_PROJECT_ROOT ?? projectRoot;\n\n  if (webOutput === 'static') {\n    // Enable static rendering in runtime space.\n    process.env.EXPO_PUBLIC_USE_STATIC = '1';\n  }\n\n  // Ensure the cache is invalidated if these values change.\n  // @ts-expect-error\n  config.transformer._expoRouterRootDirectory = process.env.EXPO_ROUTER_APP_ROOT;\n  // @ts-expect-error\n  config.transformer._expoRouterWebRendering = webOutput;\n  // TODO: import mode\n\n  if (platformBundlers.web === 'metro') {\n    await new WebSupportProjectPrerequisite(projectRoot).assertAsync();\n  } else if (!isTsconfigPathsEnabled) {\n    // Bail out early for performance enhancements if no special features are enabled.\n    return config;\n  }\n\n  let tsconfig: null | TsConfigPaths = null;\n\n  if (isTsconfigPathsEnabled) {\n    Log.warn(\n      chalk.yellow`Experimental path aliases feature is enabled. ` +\n        learnMore('https://docs.expo.dev/guides/typescript/#path-aliases')\n    );\n    tsconfig = await loadTsConfigPathsAsync(projectRoot);\n  }\n\n  await setupNodeExternals(projectRoot);\n\n  return withMetroMultiPlatform(projectRoot, {\n    config,\n    platformBundlers,\n    tsconfig,\n    isTsconfigPathsEnabled,\n  });\n}\n\nfunction withMetroMultiPlatform(\n  projectRoot: string,\n  {\n    config,\n    platformBundlers,\n    isTsconfigPathsEnabled,\n    tsconfig,\n  }: {\n    config: ConfigT;\n    isTsconfigPathsEnabled: boolean;\n    platformBundlers: PlatformBundlers;\n    tsconfig: TsConfigPaths | null;\n  }\n) {\n  let expoConfigPlatforms = Object.entries(platformBundlers)\n    .filter(([, bundler]) => bundler === 'metro')\n    .map(([platform]) => platform);\n\n  if (Array.isArray(config.resolver.platforms)) {\n    expoConfigPlatforms = [...new Set(expoConfigPlatforms.concat(config.resolver.platforms))];\n  }\n\n  // @ts-expect-error: typed as `readonly`.\n  config.resolver.platforms = expoConfigPlatforms;\n\n  if (expoConfigPlatforms.includes('web')) {\n    config = withWebPolyfills(config, projectRoot);\n  }\n\n  return withExtendedResolver(config, {\n    projectRoot,\n    tsconfig,\n    isTsconfigPathsEnabled,\n    platforms: expoConfigPlatforms,\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}