{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _semver = _interopRequireDefault(require(\"semver\"));\nvar _getVersions = require(\"../../api/getVersions\");\nvar Log = _interopRequireWildcard(require(\"../../log\"));\nvar _downloadExpoGoAsync = require(\"../../utils/downloadExpoGoAsync\");\nvar _env = require(\"../../utils/env\");\nvar _errors = require(\"../../utils/errors\");\nvar _ora = require(\"../../utils/ora\");\nvar _prompts = require(\"../../utils/prompts\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar debug = require(\"debug\")(\"expo:utils:ExpoGoInstaller\");\nvar ExpoGoInstaller = function () {\n  function ExpoGoInstaller(platform, appId, sdkVersion) {\n    _classCallCheck(this, ExpoGoInstaller);\n    this.platform = platform;\n    this.appId = appId;\n    this.sdkVersion = sdkVersion;\n  }\n  _createClass(ExpoGoInstaller, [{\n    key: \"isClientOutdatedAsync\",\n    value: function () {\n      var _isClientOutdatedAsync = _asyncToGenerator(function* (device) {\n        var installedVersion = yield device.getAppVersionAsync(this.appId);\n        if (!installedVersion) {\n          return true;\n        }\n        var version = yield this._getExpectedClientVersionAsync();\n        debug(`Expected Expo Go version: ${version}, installed version: ${installedVersion}`);\n        return version ? !_semver.default.eq(installedVersion, version) : true;\n      });\n      function isClientOutdatedAsync(_x) {\n        return _isClientOutdatedAsync.apply(this, arguments);\n      }\n      return isClientOutdatedAsync;\n    }()\n  }, {\n    key: \"_getExpectedClientVersionAsync\",\n    value: function () {\n      var _getExpectedClientVersionAsync2 = _asyncToGenerator(function* () {\n        var ref, ref1;\n        var versions = yield (0, _getVersions).getVersionsAsync();\n        var specificVersion = versions == null ? void 0 : (ref = versions.sdkVersions) == null ? void 0 : (ref1 = ref[this.sdkVersion]) == null ? void 0 : ref1[`${this.platform}ClientVersion`];\n        var latestVersion = versions[`${this.platform}Version`];\n        var ref2;\n        return (ref2 = specificVersion != null ? specificVersion : latestVersion) != null ? ref2 : null;\n      });\n      function _getExpectedClientVersionAsync() {\n        return _getExpectedClientVersionAsync2.apply(this, arguments);\n      }\n      return _getExpectedClientVersionAsync;\n    }()\n  }, {\n    key: \"uninstallExpoGoIfOutdatedAsync\",\n    value: function () {\n      var _uninstallExpoGoIfOutdatedAsync = _asyncToGenerator(function* (deviceManager) {\n        var cacheId = `${this.platform}-${deviceManager.identifier}`;\n        if (ExpoGoInstaller.cache[cacheId]) {\n          debug(\"skipping subsequent upgrade check\");\n          return false;\n        }\n        ExpoGoInstaller.cache[cacheId] = true;\n        if (yield this.isClientOutdatedAsync(deviceManager)) {\n          if (this.sdkVersion === \"UNVERSIONED\") {\n            Log.log(`Skipping Expo Go upgrade check for UNVERSIONED project. Manually ensure the Expo Go app is built from source.`);\n            return false;\n          }\n          var confirm = yield (0, _prompts).confirmAsync({\n            initial: true,\n            message: `Expo Go on ${deviceManager.name} is outdated, would you like to upgrade?`\n          });\n          if (confirm) {\n            if (this.platform !== \"ios\") {\n              Log.log(`Uninstalling Expo Go from ${this.platform} device ${deviceManager.name}.`);\n              yield deviceManager.uninstallAppAsync(this.appId);\n            }\n            return true;\n          }\n        }\n        return false;\n      });\n      function uninstallExpoGoIfOutdatedAsync(_x2) {\n        return _uninstallExpoGoIfOutdatedAsync.apply(this, arguments);\n      }\n      return uninstallExpoGoIfOutdatedAsync;\n    }()\n  }, {\n    key: \"ensureAsync\",\n    value: function () {\n      var _ensureAsync = _asyncToGenerator(function* (deviceManager) {\n        var shouldInstall = !(yield deviceManager.isAppInstalledAsync(this.appId));\n        if (_env.env.EXPO_OFFLINE) {\n          if (!shouldInstall) {\n            Log.warn(`Skipping Expo Go version validation in offline mode`);\n            return false;\n          }\n          throw new _errors.CommandError(\"NO_EXPO_GO\", `Expo Go is not installed on device \"${deviceManager.name}\", while running in offline mode. Manually install Expo Go or run without --offline flag (or EXPO_OFFLINE environment variable).`);\n        }\n        if (!shouldInstall) {\n          shouldInstall = yield this.uninstallExpoGoIfOutdatedAsync(deviceManager);\n        }\n        if (shouldInstall) {\n          var binaryPath = yield (0, _downloadExpoGoAsync).downloadExpoGoAsync(this.platform, {\n            sdkVersion: this.sdkVersion\n          });\n          var ora = (0, _ora).logNewSection(`Installing Expo Go on ${deviceManager.name}`);\n          try {\n            yield deviceManager.installAppAsync(binaryPath);\n          } finally {\n            ora.stop();\n          }\n          return true;\n        }\n        return false;\n      });\n      function ensureAsync(_x3) {\n        return _ensureAsync.apply(this, arguments);\n      }\n      return ensureAsync;\n    }()\n  }]);\n  return ExpoGoInstaller;\n}();\nExpoGoInstaller.cache = {};\nexports.ExpoGoInstaller = ExpoGoInstaller;","map":{"version":3,"names":["_asyncToGenerator","require","_classCallCheck","_createClass","_semver","_interopRequireDefault","_getVersions","Log","_interopRequireWildcard","_downloadExpoGoAsync","_env","_errors","_ora","_prompts","debug","ExpoGoInstaller","platform","appId","sdkVersion","key","value","_isClientOutdatedAsync","device","installedVersion","getAppVersionAsync","version","_getExpectedClientVersionAsync","default","eq","isClientOutdatedAsync","_x","apply","arguments","_getExpectedClientVersionAsync2","ref","ref1","versions","getVersionsAsync","specificVersion","sdkVersions","latestVersion","ref2","_uninstallExpoGoIfOutdatedAsync","deviceManager","cacheId","identifier","cache","log","confirm","confirmAsync","initial","message","name","uninstallAppAsync","uninstallExpoGoIfOutdatedAsync","_x2","_ensureAsync","shouldInstall","isAppInstalledAsync","env","EXPO_OFFLINE","warn","CommandError","binaryPath","downloadExpoGoAsync","ora","logNewSection","installAppAsync","stop","ensureAsync","_x3"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\platforms\\ExpoGoInstaller.ts"],"sourcesContent":["import semver from 'semver';\n\nimport { getVersionsAsync } from '../../api/getVersions';\nimport * as Log from '../../log';\nimport { downloadExpoGoAsync } from '../../utils/downloadExpoGoAsync';\nimport { env } from '../../utils/env';\nimport { CommandError } from '../../utils/errors';\nimport { logNewSection } from '../../utils/ora';\nimport { confirmAsync } from '../../utils/prompts';\nimport type { DeviceManager } from './DeviceManager';\n\nconst debug = require('debug')('expo:utils:ExpoGoInstaller') as typeof console.log;\n\n/** Given a platform, appId, and sdkVersion, this module will ensure that Expo Go is up-to-date on the provided device. */\nexport class ExpoGoInstaller<IDevice> {\n  // Keep a list of [platform-deviceId] so we can prevent asking multiple times if a user wants to upgrade.\n  // This can prevent annoying interactions when they don't want to upgrade for whatever reason.\n  static cache: Record<string, boolean> = {};\n\n  constructor(\n    private platform: 'ios' | 'android',\n    // Ultimately this should be inlined since we know the platform.\n    private appId: string,\n    private sdkVersion?: string\n  ) {}\n\n  /** Returns true if the installed app matching the previously provided `appId` is outdated. */\n  async isClientOutdatedAsync(device: DeviceManager<IDevice>): Promise<boolean> {\n    const installedVersion = await device.getAppVersionAsync(this.appId);\n    if (!installedVersion) {\n      return true;\n    }\n    const version = await this._getExpectedClientVersionAsync();\n    debug(`Expected Expo Go version: ${version}, installed version: ${installedVersion}`);\n    return version ? !semver.eq(installedVersion, version) : true;\n  }\n\n  /** Returns the expected version of Expo Go given the project SDK Version. Exposed for testing. */\n  async _getExpectedClientVersionAsync(): Promise<string | null> {\n    const versions = await getVersionsAsync();\n    // Like `sdkVersions['44.0.0']['androidClientVersion'] = '1.0.0'`\n    const specificVersion =\n      versions?.sdkVersions?.[this.sdkVersion!]?.[`${this.platform}ClientVersion`];\n    const latestVersion = versions[`${this.platform}Version`];\n    return specificVersion ?? latestVersion ?? null;\n  }\n\n  /** Returns a boolean indicating if Expo Go should be installed. Returns `true` if the app was uninstalled. */\n  async uninstallExpoGoIfOutdatedAsync(deviceManager: DeviceManager<IDevice>): Promise<boolean> {\n    const cacheId = `${this.platform}-${deviceManager.identifier}`;\n\n    if (ExpoGoInstaller.cache[cacheId]) {\n      debug('skipping subsequent upgrade check');\n      return false;\n    }\n    ExpoGoInstaller.cache[cacheId] = true;\n\n    if (await this.isClientOutdatedAsync(deviceManager)) {\n      if (this.sdkVersion === 'UNVERSIONED') {\n        // This should only happen in the expo/expo repo, e.g. `apps/test-suite`\n        Log.log(\n          `Skipping Expo Go upgrade check for UNVERSIONED project. Manually ensure the Expo Go app is built from source.`\n        );\n        return false;\n      }\n\n      // Only prompt once per device, per run.\n      const confirm = await confirmAsync({\n        initial: true,\n        message: `Expo Go on ${deviceManager.name} is outdated, would you like to upgrade?`,\n      });\n      if (confirm) {\n        // Don't need to uninstall to update on iOS.\n        if (this.platform !== 'ios') {\n          Log.log(`Uninstalling Expo Go from ${this.platform} device ${deviceManager.name}.`);\n          await deviceManager.uninstallAppAsync(this.appId);\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** Check if a given device has Expo Go installed, if not then download and install it. */\n  async ensureAsync(deviceManager: DeviceManager<IDevice>): Promise<boolean> {\n    let shouldInstall = !(await deviceManager.isAppInstalledAsync(this.appId));\n\n    if (env.EXPO_OFFLINE) {\n      if (!shouldInstall) {\n        Log.warn(`Skipping Expo Go version validation in offline mode`);\n        return false;\n      }\n      throw new CommandError(\n        'NO_EXPO_GO',\n        `Expo Go is not installed on device \"${deviceManager.name}\", while running in offline mode. Manually install Expo Go or run without --offline flag (or EXPO_OFFLINE environment variable).`\n      );\n    }\n\n    if (!shouldInstall) {\n      shouldInstall = await this.uninstallExpoGoIfOutdatedAsync(deviceManager);\n    }\n\n    if (shouldInstall) {\n      // Download the Expo Go app from the Expo servers.\n      const binaryPath = await downloadExpoGoAsync(this.platform, { sdkVersion: this.sdkVersion });\n      // Install the app on the device.\n      const ora = logNewSection(`Installing Expo Go on ${deviceManager.name}`);\n      try {\n        await deviceManager.installAppAsync(binaryPath);\n      } finally {\n        ora.stop();\n      }\n      return true;\n    }\n    return false;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}