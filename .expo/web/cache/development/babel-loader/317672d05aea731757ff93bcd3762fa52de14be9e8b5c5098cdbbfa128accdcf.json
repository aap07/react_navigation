{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveXcodeProject = resolveXcodeProject;\nvar _glob = require(\"glob\");\nvar _errors = require(\"../../../utils/errors\");\nvar ignoredPaths = [\"**/@(Carthage|Pods|vendor|node_modules)/**\"];\nfunction findXcodeProjectPaths(projectRoot, extension) {\n  return (0, _glob).sync(`ios/*.${extension}`, {\n    absolute: true,\n    cwd: projectRoot,\n    ignore: ignoredPaths\n  });\n}\nfunction resolveXcodeProject(projectRoot) {\n  var paths = findXcodeProjectPaths(projectRoot, \"xcworkspace\");\n  if (paths.length) {\n    return {\n      name: paths[0],\n      isWorkspace: true\n    };\n  }\n  paths = findXcodeProjectPaths(projectRoot, \"xcodeproj\");\n  if (paths.length) {\n    return {\n      name: paths[0],\n      isWorkspace: false\n    };\n  }\n  throw new _errors.CommandError(\"IOS_MALFORMED\", `Xcode project not found in project: ${projectRoot}. You can generate a project with \\`npx expo prebuild\\``);\n}","map":{"version":3,"names":["resolveXcodeProject","_glob","require","_errors","ignoredPaths","findXcodeProjectPaths","projectRoot","extension","sync","absolute","cwd","ignore","paths","length","name","isWorkspace","CommandError"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\run\\ios\\options\\resolveXcodeProject.ts"],"sourcesContent":["import { sync as globSync } from 'glob';\n\nimport { CommandError } from '../../../utils/errors';\nimport { ProjectInfo } from '../XcodeBuild.types';\n\nconst ignoredPaths = ['**/@(Carthage|Pods|vendor|node_modules)/**'];\n\nfunction findXcodeProjectPaths(\n  projectRoot: string,\n  extension: 'xcworkspace' | 'xcodeproj'\n): string[] {\n  return globSync(`ios/*.${extension}`, {\n    absolute: true,\n    cwd: projectRoot,\n    ignore: ignoredPaths,\n  });\n}\n\n/** Return the path and type of Xcode project in the given folder. */\nexport function resolveXcodeProject(projectRoot: string): ProjectInfo {\n  let paths = findXcodeProjectPaths(projectRoot, 'xcworkspace');\n  if (paths.length) {\n    return {\n      // Use full path instead of relative project root so that warnings and errors contain full paths as well, this helps with filtering.\n      // Also helps keep things consistent in monorepos.\n      name: paths[0],\n      // name: path.relative(projectRoot, paths[0]),\n      isWorkspace: true,\n    };\n  }\n  paths = findXcodeProjectPaths(projectRoot, 'xcodeproj');\n  if (paths.length) {\n    return { name: paths[0], isWorkspace: false };\n  }\n  throw new CommandError(\n    'IOS_MALFORMED',\n    `Xcode project not found in project: ${projectRoot}. You can generate a project with \\`npx expo prebuild\\``\n  );\n}\n"],"mappings":"AAAA;;;;;QAmBgBA,mBAAmB,GAAnBA,mBAAmB;AAnBF,IAAAC,KAAM,GAAAC,OAAA,CAAN,MAAM;AAEV,IAAAC,OAAuB,GAAAD,OAAA;AAGpD,IAAME,YAAY,GAAG,CAAC,4CAA4C,CAAC;AAEnE,SAASC,qBAAqBA,CAC5BC,WAAmB,EACnBC,SAAsC,EAC5B;EACV,OAAO,IAAAN,KAAQ,EAIbO,IAJa,CAAE,SAAQD,SAAU,EAAC,EAAE;IACpCE,QAAQ,EAAE,IAAI;IACdC,GAAG,EAAEJ,WAAW;IAChBK,MAAM,EAAEP;GACT,CAAC;;AAIG,SAASJ,mBAAmBA,CAACM,WAAmB,EAAe;EACpE,IAAIM,KAAK,GAAGP,qBAAqB,CAACC,WAAW,EAAE,aAAa,CAAC;EAC7D,IAAIM,KAAK,CAACC,MAAM,EAAE;IAChB,OAAO;MAGLC,IAAI,EAAEF,KAAK,CAAC,CAAC,CAAC;MAEdG,WAAW,EAAE;KACd;;EAEHH,KAAK,GAAGP,qBAAqB,CAACC,WAAW,EAAE,WAAW,CAAC;EACvD,IAAIM,KAAK,CAACC,MAAM,EAAE;IAChB,OAAO;MAAEC,IAAI,EAAEF,KAAK,CAAC,CAAC,CAAC;MAAEG,WAAW,EAAE;KAAO;;EAE/C,MAAM,IAAIZ,OAAY,CAAAa,YAAA,CACpB,eAAe,EACd,uCAAsCV,WAAY,yDAAwD,CAC5G"},"metadata":{},"sourceType":"script","externalDependencies":[]}