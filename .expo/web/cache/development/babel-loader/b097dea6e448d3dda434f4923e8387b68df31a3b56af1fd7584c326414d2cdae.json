{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PodfileTracer = void 0;\nvar fs_1 = __importDefault(require(\"fs\"));\nvar path_1 = __importDefault(require(\"path\"));\nvar getFirstExternalSourceForPod_1 = require(\"./getFirstExternalSourceForPod\");\nvar getNodeModuleName_1 = require(\"./getNodeModuleName\");\nvar getPackageJsonForPath_1 = require(\"./getPackageJsonForPath\");\nvar parsePodfileLock_1 = require(\"./parsePodfileLock\");\nvar PodfileTracer = function () {\n  function PodfileTracer(props) {\n    _classCallCheck(this, PodfileTracer);\n    this.props = props;\n    this.getNodeModuleNameForTarget = memoize(this.getNodeModuleNameForTargetWithoutCache.bind(this));\n    this.getExternalSourceForPod = memoize(this.getExternalSourceForPodWithoutCache.bind(this));\n    this.memoizedGetPackageJsonAnyFilePathInModule = memoizeTrigger(this.getPackageJsonAnyFilePathInModuleWithoutCache.bind(this));\n  }\n  _createClass(PodfileTracer, [{\n    key: \"podfile\",\n    get: function get() {\n      return this.props.podfile || {};\n    }\n  }, {\n    key: \"getNodeModuleNameForTargetWithoutCache\",\n    value: function getNodeModuleNameForTargetWithoutCache(target) {\n      if (!target) {\n        return null;\n      }\n      if (target in knownPackages) {\n        return {\n          name: knownPackages[target],\n          isRootTarget: false\n        };\n      }\n      if (this.isRootTarget(target)) {\n        var pkg = this.getPackageJsonAnyFilePathInModule({\n          target: target,\n          filePath: this.props.projectRoot\n        });\n        return pkg ? {\n          name: pkg.name,\n          isRootTarget: true\n        } : null;\n      }\n      var source = this.getExternalSourceForPod(target);\n      if (!source) {\n        var parts = target.split('-');\n        if (!!parts[0] && parts.length > 1 && parts.every(function (s) {\n          return s === parts[0];\n        })) {\n          source = this.getExternalSourceForPod(parts[0]);\n        }\n      }\n      if (source === null || source === void 0 ? void 0 : source.source) {\n        var _pkg = this.getPackageJsonAnyFilePathInModule({\n          target: source.pod,\n          filePath: source.source\n        });\n        if (_pkg) {\n          return {\n            name: _pkg.name,\n            isRootTarget: false\n          };\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"isRootTarget\",\n    value: function isRootTarget(target) {\n      return this.props.rootTargetName && (target === this.props.rootTargetName || target === `Pods-${this.props.rootTargetName}`);\n    }\n  }, {\n    key: \"getNodeModuleName\",\n    value: function getNodeModuleName(filePath, target) {\n      var moduleName = getNodeModuleName_1.getNodeModuleName(filePath);\n      if (moduleName) {\n        return {\n          name: moduleName,\n          isRootTarget: false\n        };\n      } else if (!target) {\n        return null;\n      }\n      return this.getNodeModuleNameForTarget(target);\n    }\n  }, {\n    key: \"getExternalSourceForPodWithoutCache\",\n    value: function getExternalSourceForPodWithoutCache(pod) {\n      var _a, _b;\n      if (!pod) {\n        return null;\n      }\n      var results = getFirstExternalSourceForPod_1.getFirstExternalSourceForPod(this.podfile, {\n        name: pod\n      });\n      var filePath = (_b = (_a = results === null || results === void 0 ? void 0 : results.source[':podspec']) !== null && _a !== void 0 ? _a : results === null || results === void 0 ? void 0 : results.source[':path']) !== null && _b !== void 0 ? _b : null;\n      if (results && filePath) {\n        return {\n          pod: results.pod,\n          source: filePath\n        };\n      }\n      return null;\n    }\n  }, {\n    key: \"getPackageJsonAnyFilePathInModule\",\n    value: function getPackageJsonAnyFilePathInModule(props) {\n      return this.memoizedGetPackageJsonAnyFilePathInModule({\n        key: props.target,\n        args: [props.filePath]\n      });\n    }\n  }, {\n    key: \"getPackageJsonAnyFilePathInModuleWithoutCache\",\n    value: function getPackageJsonAnyFilePathInModuleWithoutCache(filePath) {\n      if (!this.props.projectRoot || !filePath) {\n        return null;\n      }\n      var nativeProjectRoot = path_1.default.join(this.props.projectRoot, 'ios');\n      try {\n        var rootLevelPkgJsonPath = path_1.default.join(nativeProjectRoot, 'package.json');\n        return require(rootLevelPkgJsonPath);\n      } catch (_unused) {\n        return getPackageJsonForPath_1.getPackageJsonForPath(path_1.default.join(nativeProjectRoot, filePath));\n      }\n    }\n  }], [{\n    key: \"create\",\n    value: function create(projectRoot) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        xcodeProject = _ref.xcodeProject;\n      var _a, _b;\n      var podfileLock = path_1.default.join(projectRoot, 'ios', 'Podfile.lock');\n      var podfileContents = fs_1.default.readFileSync(podfileLock, 'utf8');\n      var rootTargetName = ((_a = xcodeProject === null || xcodeProject === void 0 ? void 0 : xcodeProject.name.match(/.*\\/(.*)\\.\\w+/)) === null || _a === void 0 ? void 0 : _a[1]) || '';\n      var formatter = new PodfileTracer({\n        projectRoot: projectRoot,\n        rootTargetName: rootTargetName,\n        podfile: (_b = parsePodfileLock_1.parsePodfileLock(podfileContents)) !== null && _b !== void 0 ? _b : {}\n      });\n      return formatter;\n    }\n  }]);\n  return PodfileTracer;\n}();\nexports.PodfileTracer = PodfileTracer;\nfunction memoize(func) {\n  var cache = {};\n  return function (key) {\n    if (key in cache) {\n      return cache[key];\n    }\n    var result = func(key);\n    cache[key] = result;\n    return result;\n  };\n}\nfunction memoizeTrigger(func) {\n  var cache = {};\n  return function (_ref2) {\n    var key = _ref2.key,\n      args = _ref2.args;\n    if (key in cache) {\n      return cache[key];\n    }\n    var result = func.apply(void 0, _toConsumableArray(args));\n    cache[key] = result;\n    return result;\n  };\n}\nvar knownPackages = {\n  'React-Core-AccessibilityResources': 'react-native',\n  YogaKit: 'react-native',\n  'Flipper-DoubleConversion': 'react-native',\n  'Flipper-Folly': 'react-native',\n  'OpenSSL-Universal': 'react-native',\n  FlipperKit: 'react-native',\n  Flipper: 'react-native',\n  'Flipper-RSocket': 'react-native'\n};","map":{"version":3,"names":["fs_1","__importDefault","require","path_1","getFirstExternalSourceForPod_1","getNodeModuleName_1","getPackageJsonForPath_1","parsePodfileLock_1","PodfileTracer","props","_classCallCheck","getNodeModuleNameForTarget","memoize","getNodeModuleNameForTargetWithoutCache","bind","getExternalSourceForPod","getExternalSourceForPodWithoutCache","memoizedGetPackageJsonAnyFilePathInModule","memoizeTrigger","getPackageJsonAnyFilePathInModuleWithoutCache","_createClass","key","get","podfile","value","target","knownPackages","name","isRootTarget","pkg","getPackageJsonAnyFilePathInModule","filePath","projectRoot","source","parts","split","length","every","s","pod","rootTargetName","getNodeModuleName","moduleName","results","getFirstExternalSourceForPod","_b","_a","args","nativeProjectRoot","default","join","rootLevelPkgJsonPath","_unused","getPackageJsonForPath","create","_ref","arguments","undefined","xcodeProject","podfileLock","podfileContents","readFileSync","match","formatter","parsePodfileLock","exports","func","cache","result","_ref2","apply","_toConsumableArray","YogaKit","FlipperKit","Flipper"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\xcpretty\\src\\utils\\PodfileTracer.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport { getFirstExternalSourceForPod } from './getFirstExternalSourceForPod';\nimport { getNodeModuleName } from './getNodeModuleName';\nimport { getPackageJsonForPath } from './getPackageJsonForPath';\nimport { parsePodfileLock, PodfileLock } from './parsePodfileLock';\n\n/**\n * A utility for tracing dependencies from a Podfile.lock.\n */\nexport class PodfileTracer {\n  static create(projectRoot: string, { xcodeProject }: { xcodeProject?: { name: string } } = {}) {\n    const podfileLock = path.join(projectRoot, 'ios', 'Podfile.lock');\n    const podfileContents = fs.readFileSync(podfileLock, 'utf8');\n    const rootTargetName = xcodeProject?.name.match(/.*\\/(.*)\\.\\w+/)?.[1] || '';\n    const formatter = new PodfileTracer({\n      projectRoot,\n      rootTargetName,\n      podfile: parsePodfileLock(podfileContents) ?? {},\n    });\n\n    return formatter;\n  }\n\n  get podfile() {\n    return this.props.podfile || {};\n  }\n\n  constructor(\n    public props: {\n      projectRoot: string;\n      rootTargetName?: string;\n      podfile: PodfileLock;\n    }\n  ) {}\n\n  // Wrap the expensive method in a cache\n  getNodeModuleNameForTarget = memoize(this.getNodeModuleNameForTargetWithoutCache.bind(this));\n\n  getNodeModuleNameForTargetWithoutCache(\n    target: string\n  ): { name: string; isRootTarget: boolean } | null {\n    if (!target) {\n      return null;\n    }\n\n    // Check the list of known pods that are hardcoded into the system.\n    if (target in knownPackages) {\n      return { name: knownPackages[target], isRootTarget: false };\n    }\n\n    // Check if the target matches the root project.\n    if (this.isRootTarget(target)) {\n      // Get the root package.json\n      const pkg = this.getPackageJsonAnyFilePathInModule({\n        target,\n        filePath: this.props.projectRoot,\n      });\n      return pkg ? { name: pkg.name, isRootTarget: true } : null;\n    }\n\n    // Otherwise, start tracing for dependencies.\n\n    let source = this.getExternalSourceForPod(target);\n    if (!source) {\n      // Some modules are formatted incorrectly in Xcode like `EXUpdates-EXUpdates` or `EXConstants-EXConstants`\n      // here we'll attempt to split the value, ensure there's more than one copy, and that all copies are the same, then we'll check against that new value.\n      const parts = target.split('-');\n      if (!!parts[0] && parts.length > 1 && parts.every(s => s === parts[0])) {\n        source = this.getExternalSourceForPod(parts[0]);\n      }\n    }\n\n    if (source?.source) {\n      // Finally attempt to trace the podspec file.\n      const pkg = this.getPackageJsonAnyFilePathInModule({\n        target: source.pod,\n        filePath: source.source,\n      });\n      if (pkg) {\n        return { name: pkg.name, isRootTarget: false };\n      }\n    }\n\n    return null;\n  }\n\n  isRootTarget(target: string) {\n    return (\n      this.props.rootTargetName &&\n      (target === this.props.rootTargetName || target === `Pods-${this.props.rootTargetName}`)\n    );\n  }\n\n  getNodeModuleName(\n    filePath: string,\n    target?: string\n  ): { name: string; isRootTarget: boolean } | null {\n    const moduleName = getNodeModuleName(filePath);\n\n    if (moduleName) {\n      return { name: moduleName, isRootTarget: false };\n    } else if (!target) {\n      return null;\n    }\n\n    return this.getNodeModuleNameForTarget(target);\n  }\n\n  getExternalSourceForPod = memoize(this.getExternalSourceForPodWithoutCache.bind(this));\n\n  getExternalSourceForPodWithoutCache(pod?: string): { pod: string; source: string } | null {\n    if (!pod) {\n      return null;\n    }\n\n    const results = getFirstExternalSourceForPod(this.podfile, { name: pod });\n\n    // Keep tracing until we get to a development pod with a local file reference.\n    const filePath = results?.source[':podspec'] ?? results?.source[':path'] ?? null;\n\n    if (results && filePath) {\n      return { pod: results.pod, source: filePath };\n    }\n\n    return null;\n  }\n\n  private memoizedGetPackageJsonAnyFilePathInModule = memoizeTrigger(\n    this.getPackageJsonAnyFilePathInModuleWithoutCache.bind(this)\n  );\n\n  /** This can be a path like `/app/node_modules/expo-camera/ios` or `/app/node_modules/react-native-webrtc` depending on where the podspec is. */\n  getPackageJsonAnyFilePathInModule(props: { target: string; filePath: string }) {\n    return this.memoizedGetPackageJsonAnyFilePathInModule({\n      key: props.target,\n      args: [props.filePath],\n    });\n  }\n\n  getPackageJsonAnyFilePathInModuleWithoutCache(filePath: string): Record<string, any> | null {\n    if (!this.props.projectRoot || !filePath) {\n      return null;\n    }\n\n    const nativeProjectRoot = path.join(this.props.projectRoot, 'ios');\n    // In the case of the root level podspec file.\n    try {\n      const rootLevelPkgJsonPath = path.join(nativeProjectRoot, 'package.json');\n      return require(rootLevelPkgJsonPath);\n    } catch {\n      return getPackageJsonForPath(path.join(nativeProjectRoot, filePath));\n    }\n  }\n}\n\nfunction memoize<T extends (key: string) => any, Ret = ReturnType<T>>(func: T) {\n  const cache: Record<string, Ret> = {};\n  return function (key: string): Ret {\n    if (key in cache) {\n      return cache[key];\n    }\n    const result = func(key);\n    cache[key] = result;\n    return result;\n  };\n}\n\nfunction memoizeTrigger<\n  T extends (...args: any[]) => any,\n  Args = Parameters<T>,\n  Ret = ReturnType<T>\n>(func: T): (props: { key: string; args: Args }) => Ret {\n  const cache: Record<string, Ret> = {};\n  return function ({ key, args }: { key: string; args: Args }): Ret {\n    if (key in cache) {\n      return cache[key];\n    }\n    // @ts-ignore\n    const result = func(...args);\n    cache[key] = result;\n    return result;\n  };\n}\n\n// A list of packages that aren't linked through cocoapods directly.\nconst knownPackages: Record<string, string> = {\n  // Added to ReactCore as a `resource_bundle`\n  'React-Core-AccessibilityResources': 'react-native',\n  YogaKit: 'react-native',\n  // flipper\n  'Flipper-DoubleConversion': 'react-native',\n  'Flipper-Folly': 'react-native',\n  'OpenSSL-Universal': 'react-native',\n  FlipperKit: 'react-native',\n  Flipper: 'react-native',\n  'Flipper-RSocket': 'react-native',\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}