{"ast":null,"code":"import { map } from \"./common/map.js\";\nimport { nullTag } from \"./common/null.js\";\nimport { seq } from \"./common/seq.js\";\nimport { string } from \"./common/string.js\";\nimport { boolTag } from \"./core/bool.js\";\nimport { float, floatExp, floatNaN } from \"./core/float.js\";\nimport { int, intHex, intOct } from \"./core/int.js\";\nimport { schema } from \"./core/schema.js\";\nimport { schema as schema$1 } from \"./json/schema.js\";\nimport { binary } from \"./yaml-1.1/binary.js\";\nimport { omap } from \"./yaml-1.1/omap.js\";\nimport { pairs } from \"./yaml-1.1/pairs.js\";\nimport { schema as schema$2 } from \"./yaml-1.1/schema.js\";\nimport { set } from \"./yaml-1.1/set.js\";\nimport { timestamp, floatTime, intTime } from \"./yaml-1.1/timestamp.js\";\nvar schemas = new Map([['core', schema], ['failsafe', [map, seq, string]], ['json', schema$1], ['yaml11', schema$2], ['yaml-1.1', schema$2]]);\nvar tagsByName = {\n  binary: binary,\n  bool: boolTag,\n  float: float,\n  floatExp: floatExp,\n  floatNaN: floatNaN,\n  floatTime: floatTime,\n  int: int,\n  intHex: intHex,\n  intOct: intOct,\n  intTime: intTime,\n  map: map,\n  null: nullTag,\n  omap: omap,\n  pairs: pairs,\n  seq: seq,\n  set: set,\n  timestamp: timestamp\n};\nvar coreKnownTags = {\n  'tag:yaml.org,2002:binary': binary,\n  'tag:yaml.org,2002:omap': omap,\n  'tag:yaml.org,2002:pairs': pairs,\n  'tag:yaml.org,2002:set': set,\n  'tag:yaml.org,2002:timestamp': timestamp\n};\nfunction getTags(customTags, schemaName) {\n  var tags = schemas.get(schemaName);\n  if (!tags) {\n    if (Array.isArray(customTags)) tags = [];else {\n      var keys = Array.from(schemas.keys()).filter(function (key) {\n        return key !== 'yaml11';\n      }).map(function (key) {\n        return JSON.stringify(key);\n      }).join(', ');\n      throw new Error(`Unknown schema \"${schemaName}\"; use one of ${keys} or define customTags array`);\n    }\n  }\n  if (Array.isArray(customTags)) {\n    for (var tag of customTags) tags = tags.concat(tag);\n  } else if (typeof customTags === 'function') {\n    tags = customTags(tags.slice());\n  }\n  return tags.map(function (tag) {\n    if (typeof tag !== 'string') return tag;\n    var tagObj = tagsByName[tag];\n    if (tagObj) return tagObj;\n    var keys = Object.keys(tagsByName).map(function (key) {\n      return JSON.stringify(key);\n    }).join(', ');\n    throw new Error(`Unknown custom tag \"${tag}\"; use one of ${keys}`);\n  });\n}\nexport { coreKnownTags, getTags };","map":{"version":3,"names":["map","nullTag","seq","string","boolTag","float","floatExp","floatNaN","int","intHex","intOct","schema","schema$1","binary","omap","pairs","schema$2","set","timestamp","floatTime","intTime","schemas","Map","tagsByName","bool","null","coreKnownTags","getTags","customTags","schemaName","tags","get","Array","isArray","keys","from","filter","key","JSON","stringify","join","Error","tag","concat","slice","tagObj","Object"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/browser/dist/schema/tags.js"],"sourcesContent":["import { map } from './common/map.js';\nimport { nullTag } from './common/null.js';\nimport { seq } from './common/seq.js';\nimport { string } from './common/string.js';\nimport { boolTag } from './core/bool.js';\nimport { float, floatExp, floatNaN } from './core/float.js';\nimport { int, intHex, intOct } from './core/int.js';\nimport { schema } from './core/schema.js';\nimport { schema as schema$1 } from './json/schema.js';\nimport { binary } from './yaml-1.1/binary.js';\nimport { omap } from './yaml-1.1/omap.js';\nimport { pairs } from './yaml-1.1/pairs.js';\nimport { schema as schema$2 } from './yaml-1.1/schema.js';\nimport { set } from './yaml-1.1/set.js';\nimport { timestamp, floatTime, intTime } from './yaml-1.1/timestamp.js';\n\nconst schemas = new Map([\n    ['core', schema],\n    ['failsafe', [map, seq, string]],\n    ['json', schema$1],\n    ['yaml11', schema$2],\n    ['yaml-1.1', schema$2]\n]);\nconst tagsByName = {\n    binary,\n    bool: boolTag,\n    float,\n    floatExp,\n    floatNaN,\n    floatTime,\n    int,\n    intHex,\n    intOct,\n    intTime,\n    map,\n    null: nullTag,\n    omap,\n    pairs,\n    seq,\n    set,\n    timestamp\n};\nconst coreKnownTags = {\n    'tag:yaml.org,2002:binary': binary,\n    'tag:yaml.org,2002:omap': omap,\n    'tag:yaml.org,2002:pairs': pairs,\n    'tag:yaml.org,2002:set': set,\n    'tag:yaml.org,2002:timestamp': timestamp\n};\nfunction getTags(customTags, schemaName) {\n    let tags = schemas.get(schemaName);\n    if (!tags) {\n        if (Array.isArray(customTags))\n            tags = [];\n        else {\n            const keys = Array.from(schemas.keys())\n                .filter(key => key !== 'yaml11')\n                .map(key => JSON.stringify(key))\n                .join(', ');\n            throw new Error(`Unknown schema \"${schemaName}\"; use one of ${keys} or define customTags array`);\n        }\n    }\n    if (Array.isArray(customTags)) {\n        for (const tag of customTags)\n            tags = tags.concat(tag);\n    }\n    else if (typeof customTags === 'function') {\n        tags = customTags(tags.slice());\n    }\n    return tags.map(tag => {\n        if (typeof tag !== 'string')\n            return tag;\n        const tagObj = tagsByName[tag];\n        if (tagObj)\n            return tagObj;\n        const keys = Object.keys(tagsByName)\n            .map(key => JSON.stringify(key))\n            .join(', ');\n        throw new Error(`Unknown custom tag \"${tag}\"; use one of ${keys}`);\n    });\n}\n\nexport { coreKnownTags, getTags };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}