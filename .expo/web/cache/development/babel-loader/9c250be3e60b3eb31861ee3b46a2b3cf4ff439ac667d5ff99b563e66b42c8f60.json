{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _excluded = [\"install\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.runAndroidAsync = runAndroidAsync;\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _log = require(\"../../log\");\nvar _gradle = require(\"../../start/platforms/android/gradle\");\nvar _nodeEnv = require(\"../../utils/nodeEnv\");\nvar _port = require(\"../../utils/port\");\nvar _scheme = require(\"../../utils/scheme\");\nvar _ensureNativeProject = require(\"../ensureNativeProject\");\nvar _hints = require(\"../hints\");\nvar _startBundler = require(\"../startBundler\");\nvar _resolveInstallApkName = require(\"./resolveInstallApkName\");\nvar _resolveOptions = require(\"./resolveOptions\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = require(\"debug\")(\"expo:run:android\");\nfunction runAndroidAsync(_x, _x2) {\n  return _runAndroidAsync.apply(this, arguments);\n}\nfunction _runAndroidAsync() {\n  _runAndroidAsync = _asyncToGenerator(function* (projectRoot, _ref) {\n    var install = _ref.install,\n      options = _objectWithoutProperties(_ref, _excluded);\n    var ref;\n    (0, _nodeEnv).setNodeEnv(options.variant === \"release\" ? \"production\" : \"development\");\n    require(\"@expo/env\").load(projectRoot);\n    yield (0, _ensureNativeProject).ensureNativeProjectAsync(projectRoot, {\n      platform: \"android\",\n      install: install\n    });\n    var props = yield (0, _resolveOptions).resolveOptionsAsync(projectRoot, options);\n    debug(\"Package name: \" + props.packageName);\n    _log.Log.log(\"\\u203A Building app...\");\n    var androidProjectRoot = _path.default.join(projectRoot, \"android\");\n    yield (0, _gradle).assembleAsync(androidProjectRoot, {\n      variant: props.variant,\n      port: props.port,\n      appName: props.appName,\n      buildCache: props.buildCache\n    });\n    if (props.shouldStartBundler && !(yield (0, _port).ensurePortAvailabilityAsync(projectRoot, props))) {\n      props.shouldStartBundler = false;\n    }\n    var manager = yield (0, _startBundler).startBundlerAsync(projectRoot, {\n      port: props.port,\n      scheme: (ref = yield (0, _scheme).getSchemesForAndroidAsync(projectRoot)) == null ? void 0 : ref[0],\n      headless: !props.shouldStartBundler\n    });\n    yield installAppAsync(androidProjectRoot, props);\n    yield manager.getDefaultDevServer().openCustomRuntimeAsync(\"emulator\", {\n      applicationId: props.packageName\n    }, {\n      device: props.device.device\n    });\n    if (props.shouldStartBundler) {\n      (0, _hints).logProjectLogsLocation();\n    }\n  });\n  return _runAndroidAsync.apply(this, arguments);\n}\nfunction installAppAsync(_x3, _x4) {\n  return _installAppAsync.apply(this, arguments);\n}\nfunction _installAppAsync() {\n  _installAppAsync = _asyncToGenerator(function* (androidProjectRoot, props) {\n    var apkFile = yield (0, _resolveInstallApkName).resolveInstallApkNameAsync(props.device.device, props);\n    if (apkFile) {\n      var binaryPath = _path.default.join(props.apkVariantDirectory, apkFile);\n      debug(\"Installing:\", binaryPath);\n      yield props.device.installAppAsync(binaryPath);\n    } else {\n      _log.Log.log(\"\\u203A Failed to locate binary file, installing with Gradle...\");\n      var _variant, _appName;\n      yield (0, _gradle).installAsync(androidProjectRoot, {\n        variant: (_variant = props.variant) != null ? _variant : \"debug\",\n        appName: (_appName = props.appName) != null ? _appName : \"app\",\n        port: props.port\n      });\n    }\n  });\n  return _installAppAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_objectWithoutProperties","require","_asyncToGenerator","_excluded","runAndroidAsync","_path","_interopRequireDefault","_log","_gradle","_nodeEnv","_port","_scheme","_ensureNativeProject","_hints","_startBundler","_resolveInstallApkName","_resolveOptions","debug","_x","_x2","_runAndroidAsync","apply","arguments","projectRoot","_ref","install","options","ref","setNodeEnv","variant","load","ensureNativeProjectAsync","platform","props","resolveOptionsAsync","packageName","Log","log","androidProjectRoot","default","join","assembleAsync","port","appName","buildCache","shouldStartBundler","ensurePortAvailabilityAsync","manager","startBundlerAsync","scheme","getSchemesForAndroidAsync","headless","installAppAsync","getDefaultDevServer","openCustomRuntimeAsync","applicationId","device","logProjectLogsLocation","_x3","_x4","_installAppAsync","apkFile","resolveInstallApkNameAsync","binaryPath","apkVariantDirectory","_variant","_appName","installAsync"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\run\\android\\runAndroidAsync.ts"],"sourcesContent":["import path from 'path';\n\nimport { Log } from '../../log';\nimport { assembleAsync, installAsync } from '../../start/platforms/android/gradle';\nimport { setNodeEnv } from '../../utils/nodeEnv';\nimport { ensurePortAvailabilityAsync } from '../../utils/port';\nimport { getSchemesForAndroidAsync } from '../../utils/scheme';\nimport { ensureNativeProjectAsync } from '../ensureNativeProject';\nimport { logProjectLogsLocation } from '../hints';\nimport { startBundlerAsync } from '../startBundler';\nimport { resolveInstallApkNameAsync } from './resolveInstallApkName';\nimport { Options, ResolvedOptions, resolveOptionsAsync } from './resolveOptions';\n\nconst debug = require('debug')('expo:run:android');\n\nexport async function runAndroidAsync(projectRoot: string, { install, ...options }: Options) {\n  // NOTE: This is a guess, the developer can overwrite with `NODE_ENV`.\n  setNodeEnv(options.variant === 'release' ? 'production' : 'development');\n  require('@expo/env').load(projectRoot);\n\n  await ensureNativeProjectAsync(projectRoot, { platform: 'android', install });\n\n  const props = await resolveOptionsAsync(projectRoot, options);\n\n  debug('Package name: ' + props.packageName);\n  Log.log('› Building app...');\n\n  const androidProjectRoot = path.join(projectRoot, 'android');\n\n  await assembleAsync(androidProjectRoot, {\n    variant: props.variant,\n    port: props.port,\n    appName: props.appName,\n    buildCache: props.buildCache,\n  });\n\n  // Ensure the port hasn't become busy during the build.\n  if (props.shouldStartBundler && !(await ensurePortAvailabilityAsync(projectRoot, props))) {\n    props.shouldStartBundler = false;\n  }\n\n  const manager = await startBundlerAsync(projectRoot, {\n    port: props.port,\n    // If a scheme is specified then use that instead of the package name.\n    scheme: (await getSchemesForAndroidAsync(projectRoot))?.[0],\n    headless: !props.shouldStartBundler,\n  });\n\n  await installAppAsync(androidProjectRoot, props);\n\n  await manager.getDefaultDevServer().openCustomRuntimeAsync(\n    'emulator',\n    {\n      applicationId: props.packageName,\n    },\n    { device: props.device.device }\n  );\n\n  if (props.shouldStartBundler) {\n    logProjectLogsLocation();\n  }\n}\n\nasync function installAppAsync(androidProjectRoot: string, props: ResolvedOptions) {\n  // Find the APK file path\n  const apkFile = await resolveInstallApkNameAsync(props.device.device, props);\n\n  if (apkFile) {\n    // Attempt to install the APK from the file path\n    const binaryPath = path.join(props.apkVariantDirectory, apkFile);\n    debug('Installing:', binaryPath);\n    await props.device.installAppAsync(binaryPath);\n  } else {\n    // If we cannot resolve the APK file path then we can attempt to install using Gradle.\n    // This offers more advanced resolution that we may not have first class support for.\n    Log.log('› Failed to locate binary file, installing with Gradle...');\n    await installAsync(androidProjectRoot, {\n      variant: props.variant ?? 'debug',\n      appName: props.appName ?? 'app',\n      port: props.port,\n    });\n  }\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,wBAAA,GAAAC,OAAA;AAAA,IAAAC,iBAAA,GAAAD,OAAA;AAAA,IAAAE,SAAA;;;;QAesBC,eAAe,GAAfA,eAAe;AAfpB,IAAAC,KAAM,GAAAC,sBAAA,CAAAL,OAAA,CAAN,MAAM;AAEH,IAAAM,IAAW,GAAAN,OAAA;AACa,IAAAO,OAAsC,GAAAP,OAAA;AACvD,IAAAQ,QAAqB,GAAAR,OAAA;AACJ,IAAAS,KAAkB,GAAAT,OAAA;AACpB,IAAAU,OAAoB,GAAAV,OAAA;AACrB,IAAAW,oBAAwB,GAAAX,OAAA;AAC1B,IAAAY,MAAU,GAAAZ,OAAA;AACf,IAAAa,aAAiB,GAAAb,OAAA;AACR,IAAAc,sBAAyB,GAAAd,OAAA;AACN,IAAAe,eAAkB,GAAAf,OAAA;;;;;;AAEhF,IAAMgB,KAAK,GAAGhB,OAAO,CAAC,OAAO,CAAC,CAAC,kBAAkB,CAAC;AAAC,SAE7BG,eAAeA,CAAAc,EAAA,EAAAC,GAAA;EAAA,OAAAC,gBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,iBAAA;EAAAA,gBAAA,GAAAlB,iBAAA,CAA9B,WAA+BqB,WAAmB,EAAAC,IAAA,EAAoC;IAAA,IAAhCC,OAAO,GAAAD,IAAA,CAAPC,OAAO;MAAKC,OAAO,GAAA1B,wBAAA,CAAAwB,IAAA,EAAArB,SAAA;QA6BpEwB,GAA8C;IA3BxD,IAAAlB,QAAU,EAA8DmB,UAA9D,CAACF,OAAO,CAACG,OAAO,KAAK,SAAS,GAAG,YAAY,GAAG,aAAa,CAAC;IACxE5B,OAAO,CAAC,WAAW,CAAC,CAAC6B,IAAI,CAACP,WAAW,CAAC;IAEtC,MAAM,IAAAX,oBAAwB,EAA+CmB,wBAA/C,CAACR,WAAW,EAAE;MAAES,QAAQ,EAAE,SAAS;MAAEP,OAAO,EAAPA;KAAS,CAAC;IAE7E,IAAMQ,KAAK,SAAS,IAAAjB,eAAmB,EAAsBkB,mBAAtB,CAACX,WAAW,EAAEG,OAAO,CAAC;IAE7DT,KAAK,CAAC,gBAAgB,GAAGgB,KAAK,CAACE,WAAW,CAAC;IAC3C5B,IAAG,CAAA6B,GAAA,CAACC,GAAG,CAAC,wBAAqB,CAAC;IAE9B,IAAMC,kBAAkB,GAAGjC,KAAI,CAAAkC,OAAA,CAACC,IAAI,CAACjB,WAAW,EAAE,SAAS,CAAC;IAE5D,MAAM,IAAAf,OAAa,EAKjBiC,aALiB,CAACH,kBAAkB,EAAE;MACtCT,OAAO,EAAEI,KAAK,CAACJ,OAAO;MACtBa,IAAI,EAAET,KAAK,CAACS,IAAI;MAChBC,OAAO,EAAEV,KAAK,CAACU,OAAO;MACtBC,UAAU,EAAEX,KAAK,CAACW;KACnB,CAAC;IAGF,IAAIX,KAAK,CAACY,kBAAkB,IAAI,QAAQ,IAAAnC,KAA2B,EAAoBoC,2BAApB,CAACvB,WAAW,EAAEU,KAAK,CAAC,GAAG;MACxFA,KAAK,CAACY,kBAAkB,GAAG,KAAK;;IAGlC,IAAME,OAAO,SAAS,IAAAjC,aAAiB,EAKrCkC,iBALqC,CAACzB,WAAW,EAAE;MACnDmB,IAAI,EAAET,KAAK,CAACS,IAAI;MAEhBO,MAAM,EAAE,CAAAtB,GAA8C,SAAvC,IAAAhB,OAAyB,EAAauC,yBAAb,CAAC3B,WAAW,CAAC,SAAM,GAAnD,MAAmD,GAAnDI,GAA8C,CAAG,CAAC,CAAC;MAC3DwB,QAAQ,EAAE,CAAClB,KAAK,CAACY;KAClB,CAAC;IAEF,MAAMO,eAAe,CAACd,kBAAkB,EAAEL,KAAK,CAAC;IAEhD,MAAMc,OAAO,CAACM,mBAAmB,EAAE,CAACC,sBAAsB,CACxD,UAAU,EACV;MACEC,aAAa,EAAEtB,KAAK,CAACE;KACtB,EACD;MAAEqB,MAAM,EAAEvB,KAAK,CAACuB,MAAM,CAACA;KAAQ,CAChC;IAED,IAAIvB,KAAK,CAACY,kBAAkB,EAAE;MAC5B,IAAAhC,MAAsB,EAAE4C,sBAAF,EAAE;;GAE3B;EAAA,OAAArC,gBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAEc8B,eAAeA,CAAAM,GAAA,EAAAC,GAAA;EAAA,OAAAC,gBAAA,CAAAvC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAsC,iBAAA;EAAAA,gBAAA,GAAA1D,iBAAA,CAA9B,WAA+BoC,kBAA0B,EAAEL,KAAsB,EAAE;IAEjF,IAAM4B,OAAO,SAAS,IAAA9C,sBAA0B,EAA4B+C,0BAA5B,CAAC7B,KAAK,CAACuB,MAAM,CAACA,MAAM,EAAEvB,KAAK,CAAC;IAE5E,IAAI4B,OAAO,EAAE;MAEX,IAAME,UAAU,GAAG1D,KAAI,CAAAkC,OAAA,CAACC,IAAI,CAACP,KAAK,CAAC+B,mBAAmB,EAAEH,OAAO,CAAC;MAChE5C,KAAK,CAAC,aAAa,EAAE8C,UAAU,CAAC;MAChC,MAAM9B,KAAK,CAACuB,MAAM,CAACJ,eAAe,CAACW,UAAU,CAAC;KAC/C,MAAM;MAGLxD,IAAG,CAAA6B,GAAA,CAACC,GAAG,CAAC,gEAA2D,CAAC;UAEzD4B,QAAa,EACbC,QAAa;MAFxB,MAAM,IAAA1D,OAAY,EAIhB2D,YAJgB,CAAC7B,kBAAkB,EAAE;QACrCT,OAAO,EAAE,CAAAoC,QAAa,GAAbhC,KAAK,CAACJ,OAAO,YAAboC,QAAa,GAAI,OAAO;QACjCtB,OAAO,EAAE,CAAAuB,QAAa,GAAbjC,KAAK,CAACU,OAAO,YAAbuB,QAAa,GAAI,KAAK;QAC/BxB,IAAI,EAAET,KAAK,CAACS;OACb,CAAC;;GAEL;EAAA,OAAAkB,gBAAA,CAAAvC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}