{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ANDROID_RES_PATH = void 0;\nexports.configureAdaptiveIconAsync = configureAdaptiveIconAsync;\nexports.dpiValues = exports.createAdaptiveIconXmlString = void 0;\nexports.getAdaptiveIcon = getAdaptiveIcon;\nexports.getIcon = getIcon;\nexports.setIconAsync = setIconAsync;\nexports.setRoundIconManifest = setRoundIconManifest;\nexports.withAndroidIcons = void 0;\nfunction _configPlugins() {\n  var data = require(\"@expo/config-plugins\");\n  _configPlugins = function _configPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _imageUtils() {\n  var data = require(\"@expo/image-utils\");\n  _imageUtils = function _imageUtils() {\n    return data;\n  };\n  return data;\n}\nfunction _fsExtra() {\n  var data = _interopRequireDefault(require(\"fs-extra\"));\n  _fsExtra = function _fsExtra() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _withAndroidManifestIcons() {\n  var data = require(\"./withAndroidManifestIcons\");\n  _withAndroidManifestIcons = function _withAndroidManifestIcons() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar Colors = _configPlugins().AndroidConfig.Colors;\nvar dpiValues = {\n  mdpi: {\n    folderName: 'mipmap-mdpi',\n    scale: 1\n  },\n  hdpi: {\n    folderName: 'mipmap-hdpi',\n    scale: 1.5\n  },\n  xhdpi: {\n    folderName: 'mipmap-xhdpi',\n    scale: 2\n  },\n  xxhdpi: {\n    folderName: 'mipmap-xxhdpi',\n    scale: 3\n  },\n  xxxhdpi: {\n    folderName: 'mipmap-xxxhdpi',\n    scale: 4\n  }\n};\nexports.dpiValues = dpiValues;\nvar BASELINE_PIXEL_SIZE = 108;\nvar ANDROID_RES_PATH = 'android/app/src/main/res/';\nexports.ANDROID_RES_PATH = ANDROID_RES_PATH;\nvar MIPMAP_ANYDPI_V26 = 'mipmap-anydpi-v26';\nvar ICON_BACKGROUND = 'iconBackground';\nvar IC_LAUNCHER_PNG = 'ic_launcher.png';\nvar IC_LAUNCHER_ROUND_PNG = 'ic_launcher_round.png';\nvar IC_LAUNCHER_BACKGROUND_PNG = 'ic_launcher_background.png';\nvar IC_LAUNCHER_FOREGROUND_PNG = 'ic_launcher_foreground.png';\nvar IC_LAUNCHER_MONOCHROME_PNG = 'ic_launcher_monochrome.png';\nvar IC_LAUNCHER_XML = 'ic_launcher.xml';\nvar IC_LAUNCHER_ROUND_XML = 'ic_launcher_round.xml';\nvar withAndroidIcons = function withAndroidIcons(config) {\n  var _getAdaptiveIcon = getAdaptiveIcon(config),\n    foregroundImage = _getAdaptiveIcon.foregroundImage,\n    backgroundColor = _getAdaptiveIcon.backgroundColor,\n    backgroundImage = _getAdaptiveIcon.backgroundImage,\n    monochromeImage = _getAdaptiveIcon.monochromeImage;\n  var icon = foregroundImage !== null && foregroundImage !== void 0 ? foregroundImage : getIcon(config);\n  if (!icon) {\n    return config;\n  }\n  config = (0, _withAndroidManifestIcons().withAndroidManifestIcons)(config);\n  config = withAndroidAdaptiveIconColors(config, backgroundColor);\n  return (0, _configPlugins().withDangerousMod)(config, ['android', function () {\n    var _ref = _asyncToGenerator(function* (config) {\n      var _config$android;\n      yield setIconAsync(config.modRequest.projectRoot, {\n        icon: icon,\n        backgroundColor: backgroundColor,\n        backgroundImage: backgroundImage,\n        monochromeImage: monochromeImage,\n        isAdaptive: !!((_config$android = config.android) !== null && _config$android !== void 0 && _config$android.adaptiveIcon)\n      });\n      return config;\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }()]);\n};\nexports.withAndroidIcons = withAndroidIcons;\nfunction setRoundIconManifest(config, manifest) {\n  var _config$android2;\n  var isAdaptive = !!((_config$android2 = config.android) !== null && _config$android2 !== void 0 && _config$android2.adaptiveIcon);\n  var application = _configPlugins().AndroidConfig.Manifest.getMainApplicationOrThrow(manifest);\n  if (isAdaptive) {\n    application.$['android:roundIcon'] = '@mipmap/ic_launcher_round';\n  } else {\n    delete application.$['android:roundIcon'];\n  }\n  return manifest;\n}\nvar withAndroidAdaptiveIconColors = function withAndroidAdaptiveIconColors(config, backgroundColor) {\n  return (0, _configPlugins().withAndroidColors)(config, function (config) {\n    config.modResults = setBackgroundColor(backgroundColor !== null && backgroundColor !== void 0 ? backgroundColor : '#FFFFFF', config.modResults);\n    return config;\n  });\n};\nfunction getIcon(config) {\n  var _config$android3;\n  return ((_config$android3 = config.android) === null || _config$android3 === void 0 ? void 0 : _config$android3.icon) || config.icon || null;\n}\nfunction getAdaptiveIcon(config) {\n  var _config$android$adapt, _config$android4, _config$android4$adap, _config$android$adapt2, _config$android5, _config$android5$adap, _config$android$adapt3, _config$android6, _config$android6$adap, _config$android$adapt4, _config$android7, _config$android7$adap;\n  return {\n    foregroundImage: (_config$android$adapt = (_config$android4 = config.android) === null || _config$android4 === void 0 ? void 0 : (_config$android4$adap = _config$android4.adaptiveIcon) === null || _config$android4$adap === void 0 ? void 0 : _config$android4$adap.foregroundImage) !== null && _config$android$adapt !== void 0 ? _config$android$adapt : null,\n    backgroundColor: (_config$android$adapt2 = (_config$android5 = config.android) === null || _config$android5 === void 0 ? void 0 : (_config$android5$adap = _config$android5.adaptiveIcon) === null || _config$android5$adap === void 0 ? void 0 : _config$android5$adap.backgroundColor) !== null && _config$android$adapt2 !== void 0 ? _config$android$adapt2 : null,\n    backgroundImage: (_config$android$adapt3 = (_config$android6 = config.android) === null || _config$android6 === void 0 ? void 0 : (_config$android6$adap = _config$android6.adaptiveIcon) === null || _config$android6$adap === void 0 ? void 0 : _config$android6$adap.backgroundImage) !== null && _config$android$adapt3 !== void 0 ? _config$android$adapt3 : null,\n    monochromeImage: (_config$android$adapt4 = (_config$android7 = config.android) === null || _config$android7 === void 0 ? void 0 : (_config$android7$adap = _config$android7.adaptiveIcon) === null || _config$android7$adap === void 0 ? void 0 : _config$android7$adap.monochromeImage) !== null && _config$android$adapt4 !== void 0 ? _config$android$adapt4 : null\n  };\n}\nfunction setIconAsync(_x2, _x3) {\n  return _setIconAsync.apply(this, arguments);\n}\nfunction _setIconAsync() {\n  _setIconAsync = _asyncToGenerator(function* (projectRoot, _ref2) {\n    var icon = _ref2.icon,\n      backgroundColor = _ref2.backgroundColor,\n      backgroundImage = _ref2.backgroundImage,\n      monochromeImage = _ref2.monochromeImage,\n      isAdaptive = _ref2.isAdaptive;\n    if (!icon) {\n      return null;\n    }\n    yield configureLegacyIconAsync(projectRoot, icon, backgroundImage, backgroundColor);\n    if (isAdaptive) {\n      yield generateRoundIconAsync(projectRoot, icon, backgroundImage, backgroundColor);\n    } else {\n      yield deleteIconNamedAsync(projectRoot, IC_LAUNCHER_ROUND_PNG);\n    }\n    yield configureAdaptiveIconAsync(projectRoot, icon, backgroundImage, monochromeImage, isAdaptive);\n    return true;\n  });\n  return _setIconAsync.apply(this, arguments);\n}\nfunction configureLegacyIconAsync(_x4, _x5, _x6, _x7) {\n  return _configureLegacyIconAsync.apply(this, arguments);\n}\nfunction _configureLegacyIconAsync() {\n  _configureLegacyIconAsync = _asyncToGenerator(function* (projectRoot, icon, backgroundImage, backgroundColor) {\n    return generateMultiLayerImageAsync(projectRoot, {\n      icon: icon,\n      backgroundImage: backgroundImage,\n      backgroundColor: backgroundColor,\n      outputImageFileName: IC_LAUNCHER_PNG,\n      imageCacheFolder: 'android-standard-square',\n      backgroundImageCacheFolder: 'android-standard-square-background'\n    });\n  });\n  return _configureLegacyIconAsync.apply(this, arguments);\n}\nfunction generateRoundIconAsync(_x8, _x9, _x10, _x11) {\n  return _generateRoundIconAsync.apply(this, arguments);\n}\nfunction _generateRoundIconAsync() {\n  _generateRoundIconAsync = _asyncToGenerator(function* (projectRoot, icon, backgroundImage, backgroundColor) {\n    return generateMultiLayerImageAsync(projectRoot, {\n      icon: icon,\n      borderRadiusRatio: 0.5,\n      outputImageFileName: IC_LAUNCHER_ROUND_PNG,\n      backgroundImage: backgroundImage,\n      backgroundColor: backgroundColor,\n      imageCacheFolder: 'android-standard-circle',\n      backgroundImageCacheFolder: 'android-standard-round-background'\n    });\n  });\n  return _generateRoundIconAsync.apply(this, arguments);\n}\nfunction configureAdaptiveIconAsync(_x12, _x13, _x14, _x15, _x16) {\n  return _configureAdaptiveIconAsync.apply(this, arguments);\n}\nfunction _configureAdaptiveIconAsync() {\n  _configureAdaptiveIconAsync = _asyncToGenerator(function* (projectRoot, foregroundImage, backgroundImage, monochromeImage, isAdaptive) {\n    if (monochromeImage) {\n      yield generateMonochromeImageAsync(projectRoot, {\n        icon: monochromeImage,\n        imageCacheFolder: 'android-adaptive-monochrome',\n        outputImageFileName: IC_LAUNCHER_MONOCHROME_PNG\n      });\n    }\n    yield generateMultiLayerImageAsync(projectRoot, {\n      backgroundColor: 'transparent',\n      backgroundImage: backgroundImage,\n      backgroundImageCacheFolder: 'android-adaptive-background',\n      outputImageFileName: IC_LAUNCHER_FOREGROUND_PNG,\n      icon: foregroundImage,\n      imageCacheFolder: 'android-adaptive-foreground',\n      backgroundImageFileName: IC_LAUNCHER_BACKGROUND_PNG\n    });\n    var icLauncherXmlString = createAdaptiveIconXmlString(backgroundImage, monochromeImage);\n    yield createAdaptiveIconXmlFiles(projectRoot, icLauncherXmlString, isAdaptive);\n  });\n  return _configureAdaptiveIconAsync.apply(this, arguments);\n}\nfunction setBackgroundColor(backgroundColor, colors) {\n  return Colors.assignColorValue(colors, {\n    value: backgroundColor,\n    name: ICON_BACKGROUND\n  });\n}\nvar createAdaptiveIconXmlString = function createAdaptiveIconXmlString(backgroundImage, monochromeImage) {\n  var background = backgroundImage ? `@mipmap/ic_launcher_background` : `@color/iconBackground`;\n  var iconElements = [`<background android:drawable=\"${background}\"/>`, '<foreground android:drawable=\"@mipmap/ic_launcher_foreground\"/>'];\n  if (monochromeImage) {\n    iconElements.push('<monochrome android:drawable=\"@mipmap/ic_launcher_monochrome\"/>');\n  }\n  return `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<adaptive-icon xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    ${iconElements.join('\\n    ')}\n</adaptive-icon>`;\n};\nexports.createAdaptiveIconXmlString = createAdaptiveIconXmlString;\nfunction createAdaptiveIconXmlFiles(_x17, _x18, _x19) {\n  return _createAdaptiveIconXmlFiles.apply(this, arguments);\n}\nfunction _createAdaptiveIconXmlFiles() {\n  _createAdaptiveIconXmlFiles = _asyncToGenerator(function* (projectRoot, icLauncherXmlString, add) {\n    var anyDpiV26Directory = _path().default.resolve(projectRoot, ANDROID_RES_PATH, MIPMAP_ANYDPI_V26);\n    yield _fsExtra().default.ensureDir(anyDpiV26Directory);\n    var launcherPath = _path().default.resolve(anyDpiV26Directory, IC_LAUNCHER_XML);\n    var launcherRoundPath = _path().default.resolve(anyDpiV26Directory, IC_LAUNCHER_ROUND_XML);\n    if (add) {\n      yield Promise.all([_fsExtra().default.writeFile(launcherPath, icLauncherXmlString), _fsExtra().default.writeFile(launcherRoundPath, icLauncherXmlString)]);\n    } else {\n      yield Promise.all([launcherPath, launcherRoundPath].map(function () {\n        var _ref6 = _asyncToGenerator(function* (path) {\n          if (_fsExtra().default.existsSync(path)) {\n            return _fsExtra().default.remove(path);\n          }\n        });\n        return function (_x28) {\n          return _ref6.apply(this, arguments);\n        };\n      }()));\n    }\n  });\n  return _createAdaptiveIconXmlFiles.apply(this, arguments);\n}\nfunction generateMultiLayerImageAsync(_x20, _x21) {\n  return _generateMultiLayerImageAsync.apply(this, arguments);\n}\nfunction _generateMultiLayerImageAsync() {\n  _generateMultiLayerImageAsync = _asyncToGenerator(function* (projectRoot, _ref3) {\n    var icon = _ref3.icon,\n      backgroundColor = _ref3.backgroundColor,\n      backgroundImage = _ref3.backgroundImage,\n      imageCacheFolder = _ref3.imageCacheFolder,\n      backgroundImageCacheFolder = _ref3.backgroundImageCacheFolder,\n      borderRadiusRatio = _ref3.borderRadiusRatio,\n      outputImageFileName = _ref3.outputImageFileName,\n      backgroundImageFileName = _ref3.backgroundImageFileName;\n    yield iterateDpiValues(projectRoot, function () {\n      var _ref8 = _asyncToGenerator(function* (_ref7) {\n        var dpiFolder = _ref7.dpiFolder,\n          scale = _ref7.scale;\n        var iconLayer = yield generateIconAsync(projectRoot, {\n          cacheType: imageCacheFolder,\n          src: icon,\n          scale: scale,\n          backgroundColor: backgroundImage ? 'transparent' : backgroundColor !== null && backgroundColor !== void 0 ? backgroundColor : 'transparent',\n          borderRadiusRatio: borderRadiusRatio\n        });\n        if (backgroundImage) {\n          var backgroundLayer = yield generateIconAsync(projectRoot, {\n            cacheType: backgroundImageCacheFolder,\n            src: backgroundImage,\n            scale: scale,\n            backgroundColor: 'transparent',\n            borderRadiusRatio: borderRadiusRatio\n          });\n          if (backgroundImageFileName) {\n            yield _fsExtra().default.writeFile(_path().default.resolve(dpiFolder, backgroundImageFileName), backgroundLayer);\n          } else {\n            iconLayer = yield (0, _imageUtils().compositeImagesAsync)({\n              foreground: iconLayer,\n              background: backgroundLayer\n            });\n          }\n        } else if (backgroundImageFileName) {\n          yield deleteIconNamedAsync(projectRoot, backgroundImageFileName);\n        }\n        yield _fsExtra().default.ensureDir(dpiFolder);\n        yield _fsExtra().default.writeFile(_path().default.resolve(dpiFolder, outputImageFileName), iconLayer);\n      });\n      return function (_x29) {\n        return _ref8.apply(this, arguments);\n      };\n    }());\n  });\n  return _generateMultiLayerImageAsync.apply(this, arguments);\n}\nfunction generateMonochromeImageAsync(_x22, _x23) {\n  return _generateMonochromeImageAsync.apply(this, arguments);\n}\nfunction _generateMonochromeImageAsync() {\n  _generateMonochromeImageAsync = _asyncToGenerator(function* (projectRoot, _ref4) {\n    var icon = _ref4.icon,\n      imageCacheFolder = _ref4.imageCacheFolder,\n      outputImageFileName = _ref4.outputImageFileName;\n    yield iterateDpiValues(projectRoot, function () {\n      var _ref10 = _asyncToGenerator(function* (_ref9) {\n        var dpiFolder = _ref9.dpiFolder,\n          scale = _ref9.scale;\n        var monochromeIcon = yield generateIconAsync(projectRoot, {\n          cacheType: imageCacheFolder,\n          src: icon,\n          scale: scale,\n          backgroundColor: 'transparent'\n        });\n        yield _fsExtra().default.ensureDir(dpiFolder);\n        yield _fsExtra().default.writeFile(_path().default.resolve(dpiFolder, outputImageFileName), monochromeIcon);\n      });\n      return function (_x30) {\n        return _ref10.apply(this, arguments);\n      };\n    }());\n  });\n  return _generateMonochromeImageAsync.apply(this, arguments);\n}\nfunction iterateDpiValues(projectRoot, callback) {\n  return Promise.all(Object.values(dpiValues).map(function (value) {\n    return callback(_objectSpread({\n      dpiFolder: _path().default.resolve(projectRoot, ANDROID_RES_PATH, value.folderName)\n    }, value));\n  }));\n}\nfunction deleteIconNamedAsync(_x24, _x25) {\n  return _deleteIconNamedAsync.apply(this, arguments);\n}\nfunction _deleteIconNamedAsync() {\n  _deleteIconNamedAsync = _asyncToGenerator(function* (projectRoot, name) {\n    return iterateDpiValues(projectRoot, function (_ref11) {\n      var dpiFolder = _ref11.dpiFolder;\n      return _fsExtra().default.remove(_path().default.resolve(dpiFolder, name));\n    });\n  });\n  return _deleteIconNamedAsync.apply(this, arguments);\n}\nfunction generateIconAsync(_x26, _x27) {\n  return _generateIconAsync.apply(this, arguments);\n}\nfunction _generateIconAsync() {\n  _generateIconAsync = _asyncToGenerator(function* (projectRoot, _ref5) {\n    var cacheType = _ref5.cacheType,\n      src = _ref5.src,\n      scale = _ref5.scale,\n      backgroundColor = _ref5.backgroundColor,\n      borderRadiusRatio = _ref5.borderRadiusRatio;\n    var iconSizePx = BASELINE_PIXEL_SIZE * scale;\n    return (yield (0, _imageUtils().generateImageAsync)({\n      projectRoot: projectRoot,\n      cacheType: cacheType\n    }, {\n      src: src,\n      width: iconSizePx,\n      height: iconSizePx,\n      resizeMode: 'cover',\n      backgroundColor: backgroundColor,\n      borderRadius: borderRadiusRatio ? iconSizePx * borderRadiusRatio : undefined\n    })).source;\n  });\n  return _generateIconAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_configPlugins","data","require","_imageUtils","_fsExtra","_interopRequireDefault","_path","_withAndroidManifestIcons","obj","__esModule","default","Colors","AndroidConfig","dpiValues","mdpi","folderName","scale","hdpi","xhdpi","xxhdpi","xxxhdpi","exports","BASELINE_PIXEL_SIZE","ANDROID_RES_PATH","MIPMAP_ANYDPI_V26","ICON_BACKGROUND","IC_LAUNCHER_PNG","IC_LAUNCHER_ROUND_PNG","IC_LAUNCHER_BACKGROUND_PNG","IC_LAUNCHER_FOREGROUND_PNG","IC_LAUNCHER_MONOCHROME_PNG","IC_LAUNCHER_XML","IC_LAUNCHER_ROUND_XML","withAndroidIcons","config","_getAdaptiveIcon","getAdaptiveIcon","foregroundImage","backgroundColor","backgroundImage","monochromeImage","icon","getIcon","withAndroidManifestIcons","withAndroidAdaptiveIconColors","withDangerousMod","_ref","_asyncToGenerator","_config$android","setIconAsync","modRequest","projectRoot","isAdaptive","android","adaptiveIcon","_x","apply","arguments","setRoundIconManifest","manifest","_config$android2","application","Manifest","getMainApplicationOrThrow","$","withAndroidColors","modResults","setBackgroundColor","_config$android3","_config$android$adapt","_config$android4","_config$android4$adap","_config$android$adapt2","_config$android5","_config$android5$adap","_config$android$adapt3","_config$android6","_config$android6$adap","_config$android$adapt4","_config$android7","_config$android7$adap","_x2","_x3","_setIconAsync","_ref2","configureLegacyIconAsync","generateRoundIconAsync","deleteIconNamedAsync","configureAdaptiveIconAsync","_x4","_x5","_x6","_x7","_configureLegacyIconAsync","generateMultiLayerImageAsync","outputImageFileName","imageCacheFolder","backgroundImageCacheFolder","_x8","_x9","_x10","_x11","_generateRoundIconAsync","borderRadiusRatio","_x12","_x13","_x14","_x15","_x16","_configureAdaptiveIconAsync","generateMonochromeImageAsync","backgroundImageFileName","icLauncherXmlString","createAdaptiveIconXmlString","createAdaptiveIconXmlFiles","colors","assignColorValue","value","name","background","iconElements","push","join","_x17","_x18","_x19","_createAdaptiveIconXmlFiles","add","anyDpiV26Directory","resolve","ensureDir","launcherPath","launcherRoundPath","Promise","all","writeFile","map","_ref6","path","existsSync","remove","_x28","_x20","_x21","_generateMultiLayerImageAsync","_ref3","iterateDpiValues","_ref8","_ref7","dpiFolder","iconLayer","generateIconAsync","cacheType","src","backgroundLayer","compositeImagesAsync","foreground","_x29","_x22","_x23","_generateMonochromeImageAsync","_ref4","_ref10","_ref9","monochromeIcon","_x30","callback","Object","values","_objectSpread","_x24","_x25","_deleteIconNamedAsync","_ref11","_x26","_x27","_generateIconAsync","_ref5","iconSizePx","generateImageAsync","width","height","resizeMode","borderRadius","undefined","source"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\prebuild-config\\src\\plugins\\icons\\withAndroidIcons.ts"],"sourcesContent":["import {\n  AndroidConfig,\n  ConfigPlugin,\n  withAndroidColors,\n  withDangerousMod,\n} from '@expo/config-plugins';\nimport { ResourceXML } from '@expo/config-plugins/build/android/Resources';\nimport { ExpoConfig } from '@expo/config-types';\nimport { compositeImagesAsync, generateImageAsync } from '@expo/image-utils';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { withAndroidManifestIcons } from './withAndroidManifestIcons';\n\nconst { Colors } = AndroidConfig;\n\ntype DPIString = 'mdpi' | 'hdpi' | 'xhdpi' | 'xxhdpi' | 'xxxhdpi';\ntype dpiMap = Record<DPIString, { folderName: string; scale: number }>;\n\nexport const dpiValues: dpiMap = {\n  mdpi: { folderName: 'mipmap-mdpi', scale: 1 },\n  hdpi: { folderName: 'mipmap-hdpi', scale: 1.5 },\n  xhdpi: { folderName: 'mipmap-xhdpi', scale: 2 },\n  xxhdpi: { folderName: 'mipmap-xxhdpi', scale: 3 },\n  xxxhdpi: { folderName: 'mipmap-xxxhdpi', scale: 4 },\n};\nconst BASELINE_PIXEL_SIZE = 108;\nexport const ANDROID_RES_PATH = 'android/app/src/main/res/';\nconst MIPMAP_ANYDPI_V26 = 'mipmap-anydpi-v26';\nconst ICON_BACKGROUND = 'iconBackground';\nconst IC_LAUNCHER_PNG = 'ic_launcher.png';\nconst IC_LAUNCHER_ROUND_PNG = 'ic_launcher_round.png';\nconst IC_LAUNCHER_BACKGROUND_PNG = 'ic_launcher_background.png';\nconst IC_LAUNCHER_FOREGROUND_PNG = 'ic_launcher_foreground.png';\nconst IC_LAUNCHER_MONOCHROME_PNG = 'ic_launcher_monochrome.png';\nconst IC_LAUNCHER_XML = 'ic_launcher.xml';\nconst IC_LAUNCHER_ROUND_XML = 'ic_launcher_round.xml';\n\nexport const withAndroidIcons: ConfigPlugin = (config) => {\n  const { foregroundImage, backgroundColor, backgroundImage, monochromeImage } =\n    getAdaptiveIcon(config);\n  const icon = foregroundImage ?? getIcon(config);\n\n  if (!icon) {\n    return config;\n  }\n\n  config = withAndroidManifestIcons(config);\n  // Apply colors.xml changes\n  config = withAndroidAdaptiveIconColors(config, backgroundColor);\n  return withDangerousMod(config, [\n    'android',\n    async (config) => {\n      await setIconAsync(config.modRequest.projectRoot, {\n        icon,\n        backgroundColor,\n        backgroundImage,\n        monochromeImage,\n        isAdaptive: !!config.android?.adaptiveIcon,\n      });\n      return config;\n    },\n  ]);\n};\n\nexport function setRoundIconManifest(\n  config: Pick<ExpoConfig, 'android'>,\n  manifest: AndroidConfig.Manifest.AndroidManifest\n): AndroidConfig.Manifest.AndroidManifest {\n  const isAdaptive = !!config.android?.adaptiveIcon;\n  const application = AndroidConfig.Manifest.getMainApplicationOrThrow(manifest);\n\n  if (isAdaptive) {\n    application.$['android:roundIcon'] = '@mipmap/ic_launcher_round';\n  } else {\n    delete application.$['android:roundIcon'];\n  }\n  return manifest;\n}\n\nconst withAndroidAdaptiveIconColors: ConfigPlugin<string | null> = (config, backgroundColor) => {\n  return withAndroidColors(config, (config) => {\n    config.modResults = setBackgroundColor(backgroundColor ?? '#FFFFFF', config.modResults);\n    return config;\n  });\n};\n\nexport function getIcon(config: ExpoConfig) {\n  return config.android?.icon || config.icon || null;\n}\n\nexport function getAdaptiveIcon(config: ExpoConfig) {\n  return {\n    foregroundImage: config.android?.adaptiveIcon?.foregroundImage ?? null,\n    backgroundColor: config.android?.adaptiveIcon?.backgroundColor ?? null,\n    backgroundImage: config.android?.adaptiveIcon?.backgroundImage ?? null,\n    monochromeImage: config.android?.adaptiveIcon?.monochromeImage ?? null,\n  };\n}\n\n/**\n * Resizes the user-provided icon to create a set of legacy icon files in\n * their respective \"mipmap\" directories for <= Android 7, and creates a set of adaptive\n * icon files for > Android 7 from the adaptive icon files (if provided).\n */\nexport async function setIconAsync(\n  projectRoot: string,\n  {\n    icon,\n    backgroundColor,\n    backgroundImage,\n    monochromeImage,\n    isAdaptive,\n  }: {\n    icon: string | null;\n    backgroundColor: string | null;\n    backgroundImage: string | null;\n    monochromeImage: string | null;\n    isAdaptive: boolean;\n  }\n) {\n  if (!icon) {\n    return null;\n  }\n\n  await configureLegacyIconAsync(projectRoot, icon, backgroundImage, backgroundColor);\n  if (isAdaptive) {\n    await generateRoundIconAsync(projectRoot, icon, backgroundImage, backgroundColor);\n  } else {\n    await deleteIconNamedAsync(projectRoot, IC_LAUNCHER_ROUND_PNG);\n  }\n  await configureAdaptiveIconAsync(projectRoot, icon, backgroundImage, monochromeImage, isAdaptive);\n\n  return true;\n}\n\n/**\n * Configures legacy icon files to be used on Android 7 and earlier. If adaptive icon configuration\n * was provided, we create a pseudo-adaptive icon by layering the provided files (or background\n * color if no backgroundImage is provided. If no backgroundImage and no backgroundColor are provided,\n * the background is set to transparent.)\n */\nasync function configureLegacyIconAsync(\n  projectRoot: string,\n  icon: string,\n  backgroundImage: string | null,\n  backgroundColor: string | null\n) {\n  return generateMultiLayerImageAsync(projectRoot, {\n    icon,\n    backgroundImage,\n    backgroundColor,\n    outputImageFileName: IC_LAUNCHER_PNG,\n    imageCacheFolder: 'android-standard-square',\n    backgroundImageCacheFolder: 'android-standard-square-background',\n  });\n}\n\nasync function generateRoundIconAsync(\n  projectRoot: string,\n  icon: string,\n  backgroundImage: string | null,\n  backgroundColor: string | null\n) {\n  return generateMultiLayerImageAsync(projectRoot, {\n    icon,\n    borderRadiusRatio: 0.5,\n    outputImageFileName: IC_LAUNCHER_ROUND_PNG,\n    backgroundImage,\n    backgroundColor,\n    imageCacheFolder: 'android-standard-circle',\n    backgroundImageCacheFolder: 'android-standard-round-background',\n  });\n}\n\n/**\n * Configures adaptive icon files to be used on Android 8 and up. A foreground image must be provided,\n * and will have a transparent background unless:\n * - A backgroundImage is provided, or\n * - A backgroundColor was specified\n */\nexport async function configureAdaptiveIconAsync(\n  projectRoot: string,\n  foregroundImage: string,\n  backgroundImage: string | null,\n  monochromeImage: string | null,\n  isAdaptive: boolean\n) {\n  if (monochromeImage) {\n    await generateMonochromeImageAsync(projectRoot, {\n      icon: monochromeImage,\n      imageCacheFolder: 'android-adaptive-monochrome',\n      outputImageFileName: IC_LAUNCHER_MONOCHROME_PNG,\n    });\n  }\n  await generateMultiLayerImageAsync(projectRoot, {\n    backgroundColor: 'transparent',\n    backgroundImage,\n    backgroundImageCacheFolder: 'android-adaptive-background',\n    outputImageFileName: IC_LAUNCHER_FOREGROUND_PNG,\n    icon: foregroundImage,\n    imageCacheFolder: 'android-adaptive-foreground',\n    backgroundImageFileName: IC_LAUNCHER_BACKGROUND_PNG,\n  });\n\n  // create ic_launcher.xml and ic_launcher_round.xml\n  const icLauncherXmlString = createAdaptiveIconXmlString(backgroundImage, monochromeImage);\n  await createAdaptiveIconXmlFiles(\n    projectRoot,\n    icLauncherXmlString,\n    // If the user only defined icon and not android.adaptiveIcon, then skip enabling the layering system\n    // this will scale the image down and present it uncropped.\n    isAdaptive\n  );\n}\n\nfunction setBackgroundColor(backgroundColor: string | null, colors: ResourceXML) {\n  return Colors.assignColorValue(colors, {\n    value: backgroundColor,\n    name: ICON_BACKGROUND,\n  });\n}\n\nexport const createAdaptiveIconXmlString = (\n  backgroundImage: string | null,\n  monochromeImage: string | null\n) => {\n  const background = backgroundImage ? `@mipmap/ic_launcher_background` : `@color/iconBackground`;\n\n  const iconElements: string[] = [\n    `<background android:drawable=\"${background}\"/>`,\n    '<foreground android:drawable=\"@mipmap/ic_launcher_foreground\"/>',\n  ];\n\n  if (monochromeImage) {\n    iconElements.push('<monochrome android:drawable=\"@mipmap/ic_launcher_monochrome\"/>');\n  }\n\n  return `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<adaptive-icon xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    ${iconElements.join('\\n    ')}\n</adaptive-icon>`;\n};\n\nasync function createAdaptiveIconXmlFiles(\n  projectRoot: string,\n  icLauncherXmlString: string,\n  add: boolean\n) {\n  const anyDpiV26Directory = path.resolve(projectRoot, ANDROID_RES_PATH, MIPMAP_ANYDPI_V26);\n  await fs.ensureDir(anyDpiV26Directory);\n  const launcherPath = path.resolve(anyDpiV26Directory, IC_LAUNCHER_XML);\n  const launcherRoundPath = path.resolve(anyDpiV26Directory, IC_LAUNCHER_ROUND_XML);\n  if (add) {\n    await Promise.all([\n      fs.writeFile(launcherPath, icLauncherXmlString),\n      fs.writeFile(launcherRoundPath, icLauncherXmlString),\n    ]);\n  } else {\n    // Remove the xml if the icon switches from adaptive to standard.\n    await Promise.all(\n      [launcherPath, launcherRoundPath].map(async (path) => {\n        if (fs.existsSync(path)) {\n          return fs.remove(path);\n        }\n      })\n    );\n  }\n}\n\nasync function generateMultiLayerImageAsync(\n  projectRoot: string,\n  {\n    icon,\n    backgroundColor,\n    backgroundImage,\n    imageCacheFolder,\n    backgroundImageCacheFolder,\n    borderRadiusRatio,\n    outputImageFileName,\n    backgroundImageFileName,\n  }: {\n    icon: string;\n    backgroundImage: string | null;\n    backgroundColor: string | null;\n    imageCacheFolder: string;\n    backgroundImageCacheFolder: string;\n    backgroundImageFileName?: string;\n    borderRadiusRatio?: number;\n    outputImageFileName: string;\n  }\n) {\n  await iterateDpiValues(projectRoot, async ({ dpiFolder, scale }) => {\n    let iconLayer = await generateIconAsync(projectRoot, {\n      cacheType: imageCacheFolder,\n      src: icon,\n      scale,\n      // backgroundImage overrides backgroundColor\n      backgroundColor: backgroundImage ? 'transparent' : backgroundColor ?? 'transparent',\n      borderRadiusRatio,\n    });\n\n    if (backgroundImage) {\n      const backgroundLayer = await generateIconAsync(projectRoot, {\n        cacheType: backgroundImageCacheFolder,\n        src: backgroundImage,\n        scale,\n        backgroundColor: 'transparent',\n        borderRadiusRatio,\n      });\n\n      if (backgroundImageFileName) {\n        await fs.writeFile(path.resolve(dpiFolder, backgroundImageFileName), backgroundLayer);\n      } else {\n        iconLayer = await compositeImagesAsync({\n          foreground: iconLayer,\n          background: backgroundLayer,\n        });\n      }\n    } else if (backgroundImageFileName) {\n      // Remove any instances of ic_launcher_background.png that are there from previous icons\n      await deleteIconNamedAsync(projectRoot, backgroundImageFileName);\n    }\n\n    await fs.ensureDir(dpiFolder);\n    await fs.writeFile(path.resolve(dpiFolder, outputImageFileName), iconLayer);\n  });\n}\n\nasync function generateMonochromeImageAsync(\n  projectRoot: string,\n  {\n    icon,\n    imageCacheFolder,\n    outputImageFileName,\n  }: { icon: string; imageCacheFolder: string; outputImageFileName: string }\n) {\n  await iterateDpiValues(projectRoot, async ({ dpiFolder, scale }) => {\n    const monochromeIcon = await generateIconAsync(projectRoot, {\n      cacheType: imageCacheFolder,\n      src: icon,\n      scale,\n      backgroundColor: 'transparent',\n    });\n    await fs.ensureDir(dpiFolder);\n    await fs.writeFile(path.resolve(dpiFolder, outputImageFileName), monochromeIcon);\n  });\n}\n\nfunction iterateDpiValues(\n  projectRoot: string,\n  callback: (value: { dpiFolder: string; folderName: string; scale: number }) => Promise<void>\n) {\n  return Promise.all(\n    Object.values(dpiValues).map((value) =>\n      callback({\n        dpiFolder: path.resolve(projectRoot, ANDROID_RES_PATH, value.folderName),\n        ...value,\n      })\n    )\n  );\n}\n\nasync function deleteIconNamedAsync(projectRoot: string, name: string) {\n  return iterateDpiValues(projectRoot, ({ dpiFolder }) => {\n    return fs.remove(path.resolve(dpiFolder, name));\n  });\n}\n\nasync function generateIconAsync(\n  projectRoot: string,\n  {\n    cacheType,\n    src,\n    scale,\n    backgroundColor,\n    borderRadiusRatio,\n  }: {\n    cacheType: string;\n    src: string;\n    scale: number;\n    backgroundColor: string;\n    borderRadiusRatio?: number;\n  }\n) {\n  const iconSizePx = BASELINE_PIXEL_SIZE * scale;\n\n  return (\n    await generateImageAsync(\n      { projectRoot, cacheType },\n      {\n        src,\n        width: iconSizePx,\n        height: iconSizePx,\n        resizeMode: 'cover',\n        backgroundColor,\n        borderRadius: borderRadiusRatio ? iconSizePx * borderRadiusRatio : undefined,\n      }\n    )\n  ).source;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}