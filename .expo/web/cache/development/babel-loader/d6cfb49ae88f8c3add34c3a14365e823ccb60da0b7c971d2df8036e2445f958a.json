{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLocales = getLocales;\nexports.getResolvedLocalesAsync = getResolvedLocalesAsync;\nexports.setLocalesAsync = setLocalesAsync;\nexports.withLocales = void 0;\nfunction _jsonFile() {\n  var data = _interopRequireDefault(require(\"@expo/json-file\"));\n  _jsonFile = function _jsonFile() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = require(\"path\");\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n  _warnings = function _warnings() {\n    return data;\n  };\n  return data;\n}\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar withLocales = function withLocales(config) {\n  return (0, _iosPlugins().withXcodeProject)(config, function () {\n    var _ref = _asyncToGenerator(function* (config) {\n      config.modResults = yield setLocalesAsync(config, {\n        projectRoot: config.modRequest.projectRoot,\n        project: config.modResults\n      });\n      return config;\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};\nexports.withLocales = withLocales;\nfunction getLocales(config) {\n  var _config$locales;\n  return (_config$locales = config.locales) !== null && _config$locales !== void 0 ? _config$locales : null;\n}\nfunction setLocalesAsync(_x2, _x3) {\n  return _setLocalesAsync.apply(this, arguments);\n}\nfunction _setLocalesAsync() {\n  _setLocalesAsync = _asyncToGenerator(function* (config, _ref2) {\n    var projectRoot = _ref2.projectRoot,\n      project = _ref2.project;\n    var locales = getLocales(config);\n    if (!locales) {\n      return project;\n    }\n    var localesMap = yield getResolvedLocalesAsync(projectRoot, locales);\n    var projectName = (0, _Xcodeproj().getProjectName)(projectRoot);\n    var supportingDirectory = (0, _path().join)(projectRoot, 'ios', projectName, 'Supporting');\n    var stringName = 'InfoPlist.strings';\n    for (var _ref3 of Object.entries(localesMap)) {\n      var _ref4 = _slicedToArray(_ref3, 2);\n      var lang = _ref4[0];\n      var localizationObj = _ref4[1];\n      var dir = (0, _path().join)(supportingDirectory, `${lang}.lproj`);\n      yield _fs().default.promises.mkdir(dir, {\n        recursive: true\n      });\n      var strings = (0, _path().join)(dir, stringName);\n      var buffer = [];\n      for (var _ref5 of Object.entries(localizationObj)) {\n        var _ref6 = _slicedToArray(_ref5, 2);\n        var plistKey = _ref6[0];\n        var localVersion = _ref6[1];\n        buffer.push(`${plistKey} = \"${localVersion}\";`);\n      }\n      yield _fs().default.promises.writeFile(strings, buffer.join('\\n'));\n      var groupName = `${projectName}/Supporting/${lang}.lproj`;\n      var group = (0, _Xcodeproj().ensureGroupRecursively)(project, groupName);\n      if (!(group !== null && group !== void 0 && group.children.some(function (_ref7) {\n        var comment = _ref7.comment;\n        return comment === stringName;\n      }))) {\n        project = (0, _Xcodeproj().addResourceFileToGroup)({\n          filepath: (0, _path().relative)(supportingDirectory, strings),\n          groupName: groupName,\n          project: project,\n          isBuildFile: true,\n          verbose: true\n        });\n      }\n    }\n    return project;\n  });\n  return _setLocalesAsync.apply(this, arguments);\n}\nfunction getResolvedLocalesAsync(_x4, _x5) {\n  return _getResolvedLocalesAsync.apply(this, arguments);\n}\nfunction _getResolvedLocalesAsync() {\n  _getResolvedLocalesAsync = _asyncToGenerator(function* (projectRoot, input) {\n    var locales = {};\n    for (var _ref8 of Object.entries(input)) {\n      var _ref9 = _slicedToArray(_ref8, 2);\n      var lang = _ref9[0];\n      var localeJsonPath = _ref9[1];\n      if (typeof localeJsonPath === 'string') {\n        try {\n          locales[lang] = yield _jsonFile().default.readAsync((0, _path().join)(projectRoot, localeJsonPath));\n        } catch (_unused) {\n          (0, _warnings().addWarningIOS)(`locales.${lang}`, `Failed to parse JSON of locale file for language: ${lang}`, 'https://docs.expo.dev/distribution/app-stores/#localizing-your-ios-app');\n        }\n      } else {\n        locales[lang] = localeJsonPath;\n      }\n    }\n    return locales;\n  });\n  return _getResolvedLocalesAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_jsonFile","data","_interopRequireDefault","require","_fs","_path","_iosPlugins","_warnings","_Xcodeproj","obj","__esModule","default","withLocales","config","withXcodeProject","_ref","_asyncToGenerator","modResults","setLocalesAsync","projectRoot","modRequest","project","_x","apply","arguments","exports","getLocales","_config$locales","locales","_x2","_x3","_setLocalesAsync","_ref2","localesMap","getResolvedLocalesAsync","projectName","getProjectName","supportingDirectory","join","stringName","_ref3","Object","entries","_ref4","_slicedToArray","lang","localizationObj","dir","promises","mkdir","recursive","strings","buffer","_ref5","_ref6","plistKey","localVersion","push","writeFile","groupName","group","ensureGroupRecursively","children","some","_ref7","comment","addResourceFileToGroup","filepath","relative","isBuildFile","verbose","_x4","_x5","_getResolvedLocalesAsync","input","_ref8","_ref9","localeJsonPath","readAsync","_unused","addWarningIOS"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\ios\\Locales.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport JsonFile from '@expo/json-file';\nimport fs from 'fs';\nimport { join, relative } from 'path';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport { addWarningIOS } from '../utils/warnings';\nimport { addResourceFileToGroup, ensureGroupRecursively, getProjectName } from './utils/Xcodeproj';\n\ntype LocaleJson = Record<string, string>;\ntype ResolvedLocalesJson = Record<string, LocaleJson>;\ntype ExpoConfigLocales = NonNullable<ExpoConfig['locales']>;\n\nexport const withLocales: ConfigPlugin = (config) => {\n  return withXcodeProject(config, async (config) => {\n    config.modResults = await setLocalesAsync(config, {\n      projectRoot: config.modRequest.projectRoot,\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\nexport function getLocales(\n  config: Pick<ExpoConfig, 'locales'>\n): Record<string, string | LocaleJson> | null {\n  return config.locales ?? null;\n}\n\nexport async function setLocalesAsync(\n  config: Pick<ExpoConfig, 'locales'>,\n  { projectRoot, project }: { projectRoot: string; project: XcodeProject }\n): Promise<XcodeProject> {\n  const locales = getLocales(config);\n  if (!locales) {\n    return project;\n  }\n  // possibly validate CFBundleAllowMixedLocalizations is enabled\n  const localesMap = await getResolvedLocalesAsync(projectRoot, locales);\n\n  const projectName = getProjectName(projectRoot);\n  const supportingDirectory = join(projectRoot, 'ios', projectName, 'Supporting');\n\n  // TODO: Should we delete all before running? Revisit after we land on a lock file.\n  const stringName = 'InfoPlist.strings';\n\n  for (const [lang, localizationObj] of Object.entries(localesMap)) {\n    const dir = join(supportingDirectory, `${lang}.lproj`);\n    // await fs.ensureDir(dir);\n    await fs.promises.mkdir(dir, { recursive: true });\n\n    const strings = join(dir, stringName);\n    const buffer = [];\n    for (const [plistKey, localVersion] of Object.entries(localizationObj)) {\n      buffer.push(`${plistKey} = \"${localVersion}\";`);\n    }\n    // Write the file to the file system.\n    await fs.promises.writeFile(strings, buffer.join('\\n'));\n\n    const groupName = `${projectName}/Supporting/${lang}.lproj`;\n    // deep find the correct folder\n    const group = ensureGroupRecursively(project, groupName);\n\n    // Ensure the file doesn't already exist\n    if (!group?.children.some(({ comment }) => comment === stringName)) {\n      // Only write the file if it doesn't already exist.\n      project = addResourceFileToGroup({\n        filepath: relative(supportingDirectory, strings),\n        groupName,\n        project,\n        isBuildFile: true,\n        verbose: true,\n      });\n    }\n  }\n\n  return project;\n}\n\nexport async function getResolvedLocalesAsync(\n  projectRoot: string,\n  input: ExpoConfigLocales\n): Promise<ResolvedLocalesJson> {\n  const locales: ResolvedLocalesJson = {};\n  for (const [lang, localeJsonPath] of Object.entries(input)) {\n    if (typeof localeJsonPath === 'string') {\n      try {\n        locales[lang] = await JsonFile.readAsync(join(projectRoot, localeJsonPath));\n      } catch {\n        // Add a warning when a json file cannot be parsed.\n        addWarningIOS(\n          `locales.${lang}`,\n          `Failed to parse JSON of locale file for language: ${lang}`,\n          'https://docs.expo.dev/distribution/app-stores/#localizing-your-ios-app'\n        );\n      }\n    } else {\n      // In the off chance that someone defined the locales json in the config, pass it directly to the object.\n      // We do this to make the types more elegant.\n      locales[lang] = localeJsonPath;\n    }\n  }\n\n  return locales;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}