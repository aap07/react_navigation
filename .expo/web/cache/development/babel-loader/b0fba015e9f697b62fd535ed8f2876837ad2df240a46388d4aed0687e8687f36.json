{"ast":null,"code":"'use strict';\n\nvar Scalar = require(\"../../nodes/Scalar.js\");\nvar stringifyNumber = require(\"../../stringify/stringifyNumber.js\");\nvar floatNaN = {\n  identify: function identify(value) {\n    return typeof value === 'number';\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  test: /^(?:[-+]?\\.(?:inf|Inf|INF|nan|NaN|NAN))$/,\n  resolve: function resolve(str) {\n    return str.slice(-3).toLowerCase() === 'nan' ? NaN : str[0] === '-' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\n  },\n  stringify: stringifyNumber.stringifyNumber\n};\nvar floatExp = {\n  identify: function identify(value) {\n    return typeof value === 'number';\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  format: 'EXP',\n  test: /^[-+]?(?:\\.[0-9]+|[0-9]+(?:\\.[0-9]*)?)[eE][-+]?[0-9]+$/,\n  resolve: function resolve(str) {\n    return parseFloat(str);\n  },\n  stringify: function stringify(node) {\n    var num = Number(node.value);\n    return isFinite(num) ? num.toExponential() : stringifyNumber.stringifyNumber(node);\n  }\n};\nvar float = {\n  identify: function identify(value) {\n    return typeof value === 'number';\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  test: /^[-+]?(?:\\.[0-9]+|[0-9]+\\.[0-9]*)$/,\n  resolve: function resolve(str) {\n    var node = new Scalar.Scalar(parseFloat(str));\n    var dot = str.indexOf('.');\n    if (dot !== -1 && str[str.length - 1] === '0') node.minFractionDigits = str.length - dot - 1;\n    return node;\n  },\n  stringify: stringifyNumber.stringifyNumber\n};\nexports.float = float;\nexports.floatExp = floatExp;\nexports.floatNaN = floatNaN;","map":{"version":3,"names":["Scalar","require","stringifyNumber","floatNaN","identify","value","default","tag","test","resolve","str","slice","toLowerCase","NaN","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","stringify","floatExp","format","parseFloat","node","num","isFinite","toExponential","float","dot","indexOf","length","minFractionDigits","exports"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/dist/schema/core/float.js"],"sourcesContent":["'use strict';\n\nvar Scalar = require('../../nodes/Scalar.js');\nvar stringifyNumber = require('../../stringify/stringifyNumber.js');\n\nconst floatNaN = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^(?:[-+]?\\.(?:inf|Inf|INF|nan|NaN|NAN))$/,\n    resolve: str => str.slice(-3).toLowerCase() === 'nan'\n        ? NaN\n        : str[0] === '-'\n            ? Number.NEGATIVE_INFINITY\n            : Number.POSITIVE_INFINITY,\n    stringify: stringifyNumber.stringifyNumber\n};\nconst floatExp = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    format: 'EXP',\n    test: /^[-+]?(?:\\.[0-9]+|[0-9]+(?:\\.[0-9]*)?)[eE][-+]?[0-9]+$/,\n    resolve: str => parseFloat(str),\n    stringify(node) {\n        const num = Number(node.value);\n        return isFinite(num) ? num.toExponential() : stringifyNumber.stringifyNumber(node);\n    }\n};\nconst float = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    test: /^[-+]?(?:\\.[0-9]+|[0-9]+\\.[0-9]*)$/,\n    resolve(str) {\n        const node = new Scalar.Scalar(parseFloat(str));\n        const dot = str.indexOf('.');\n        if (dot !== -1 && str[str.length - 1] === '0')\n            node.minFractionDigits = str.length - dot - 1;\n        return node;\n    },\n    stringify: stringifyNumber.stringifyNumber\n};\n\nexports.float = float;\nexports.floatExp = floatExp;\nexports.floatNaN = floatNaN;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,MAAM,GAAGC,OAAO,wBAAwB,CAAC;AAC7C,IAAIC,eAAe,GAAGD,OAAO,qCAAqC,CAAC;AAEnE,IAAME,QAAQ,GAAG;EACbC,QAAQ,EAAE,SAAAA,SAAAC,KAAK;IAAA,OAAI,OAAOA,KAAK,KAAK,QAAQ;EAAA;EAC5CC,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,yBAAyB;EAC9BC,IAAI,EAAE,0CAA0C;EAChDC,OAAO,EAAE,SAAAA,QAAAC,GAAG;IAAA,OAAIA,GAAG,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,KAAK,KAAK,GAC/CC,GAAG,GACHH,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,GACVI,MAAM,CAACC,iBAAiB,GACxBD,MAAM,CAACE,iBAAiB;EAAA;EAClCC,SAAS,EAAEf,eAAe,CAACA;AAC/B,CAAC;AACD,IAAMgB,QAAQ,GAAG;EACbd,QAAQ,EAAE,SAAAA,SAAAC,KAAK;IAAA,OAAI,OAAOA,KAAK,KAAK,QAAQ;EAAA;EAC5CC,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,yBAAyB;EAC9BY,MAAM,EAAE,KAAK;EACbX,IAAI,EAAE,wDAAwD;EAC9DC,OAAO,EAAE,SAAAA,QAAAC,GAAG;IAAA,OAAIU,UAAU,CAACV,GAAG,CAAC;EAAA;EAC/BO,SAAS,WAAAA,UAACI,IAAI,EAAE;IACZ,IAAMC,GAAG,GAAGR,MAAM,CAACO,IAAI,CAAChB,KAAK,CAAC;IAC9B,OAAOkB,QAAQ,CAACD,GAAG,CAAC,GAAGA,GAAG,CAACE,aAAa,CAAC,CAAC,GAAGtB,eAAe,CAACA,eAAe,CAACmB,IAAI,CAAC;EACtF;AACJ,CAAC;AACD,IAAMI,KAAK,GAAG;EACVrB,QAAQ,EAAE,SAAAA,SAAAC,KAAK;IAAA,OAAI,OAAOA,KAAK,KAAK,QAAQ;EAAA;EAC5CC,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,yBAAyB;EAC9BC,IAAI,EAAE,oCAAoC;EAC1CC,OAAO,WAAAA,QAACC,GAAG,EAAE;IACT,IAAMW,IAAI,GAAG,IAAIrB,MAAM,CAACA,MAAM,CAACoB,UAAU,CAACV,GAAG,CAAC,CAAC;IAC/C,IAAMgB,GAAG,GAAGhB,GAAG,CAACiB,OAAO,CAAC,GAAG,CAAC;IAC5B,IAAID,GAAG,KAAK,CAAC,CAAC,IAAIhB,GAAG,CAACA,GAAG,CAACkB,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EACzCP,IAAI,CAACQ,iBAAiB,GAAGnB,GAAG,CAACkB,MAAM,GAAGF,GAAG,GAAG,CAAC;IACjD,OAAOL,IAAI;EACf,CAAC;EACDJ,SAAS,EAAEf,eAAe,CAACA;AAC/B,CAAC;AAED4B,OAAO,CAACL,KAAK,GAAGA,KAAK;AACrBK,OAAO,CAACZ,QAAQ,GAAGA,QAAQ;AAC3BY,OAAO,CAAC3B,QAAQ,GAAGA,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}