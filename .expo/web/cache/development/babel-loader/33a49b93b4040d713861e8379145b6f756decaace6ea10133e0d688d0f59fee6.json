{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/config-plugins/build/ios/utils/Xcodeproj.d.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport xcode, { PBXFile, PBXGroup, PBXNativeTarget, PBXProject, XCBuildConfiguration, XCConfigurationList, XcodeProject } from 'xcode';\nexport type ProjectSectionEntry = [string, PBXProject];\nexport type NativeTargetSection = Record<string, PBXNativeTarget>;\nexport type NativeTargetSectionEntry = [string, PBXNativeTarget];\nexport type ConfigurationLists = Record<string, XCConfigurationList>;\nexport type ConfigurationListEntry = [string, XCConfigurationList];\nexport type ConfigurationSectionEntry = [string, XCBuildConfiguration];\nexport declare function getProjectName(projectRoot: string): string;\nexport declare function resolvePathOrProject(projectRootOrProject: string | XcodeProject): XcodeProject | null;\nexport declare function sanitizedName(name: string): string;\nexport declare function getHackyProjectName(projectRoot: string, config: ExpoConfig): string;\n/**\n * Add a resource file (ex: `SplashScreen.storyboard`, `Images.xcassets`) to an Xcode project.\n * This is akin to creating a new code file in Xcode with `⌘+n`.\n */\nexport declare function addResourceFileToGroup({ filepath, groupName, isBuildFile, project, verbose, targetUuid, }: {\n    filepath: string;\n    groupName: string;\n    isBuildFile?: boolean;\n    project: XcodeProject;\n    verbose?: boolean;\n    targetUuid?: string;\n}): XcodeProject;\n/**\n * Add a build source file (ex: `AppDelegate.m`, `ViewController.swift`) to an Xcode project.\n * This is akin to creating a new code file in Xcode with `⌘+n`.\n */\nexport declare function addBuildSourceFileToGroup({ filepath, groupName, project, verbose, targetUuid, }: {\n    filepath: string;\n    groupName: string;\n    project: XcodeProject;\n    verbose?: boolean;\n    targetUuid?: string;\n}): XcodeProject;\nexport declare function addFileToGroupAndLink({ filepath, groupName, project, verbose, addFileToProject, targetUuid, }: {\n    filepath: string;\n    groupName: string;\n    project: XcodeProject;\n    verbose?: boolean;\n    targetUuid?: string;\n    addFileToProject: (props: {\n        file: PBXFile;\n        project: XcodeProject;\n    }) => void;\n}): XcodeProject;\nexport declare function getApplicationNativeTarget({ project, projectName, }: {\n    project: XcodeProject;\n    projectName: string;\n}): {\n    uuid: string;\n    target: xcode.PBXNativeTarget;\n};\n/**\n * Add a framework to the default app native target.\n *\n * @param projectName Name of the PBX project.\n * @param framework String ending in `.framework`, i.e. `StoreKit.framework`\n */\nexport declare function addFramework({ project, projectName, framework, }: {\n    project: XcodeProject;\n    projectName: string;\n    framework: string;\n}): unknown;\nexport declare function ensureGroupRecursively(project: XcodeProject, filepath: string): PBXGroup | null;\n/**\n * Get the pbxproj for the given path\n */\nexport declare function getPbxproj(projectRoot: string): XcodeProject;\n/**\n * Get the productName for a project, if the name is using a variable `$(TARGET_NAME)`, then attempt to get the value of that variable.\n *\n * @param project\n */\nexport declare function getProductName(project: XcodeProject): string;\nexport declare function getProjectSection(project: XcodeProject): Record<string, xcode.PBXProject> & Record<string, string>;\nexport declare function getXCConfigurationListEntries(project: XcodeProject): ConfigurationListEntry[];\nexport declare function getBuildConfigurationsForListId(project: XcodeProject, configurationListId: string): ConfigurationSectionEntry[];\nexport declare function getBuildConfigurationForListIdAndName(project: XcodeProject, { configurationListId, buildConfiguration, }: {\n    configurationListId: string;\n    buildConfiguration: string;\n}): ConfigurationSectionEntry;\nexport declare function isBuildConfig([, sectionItem]: ConfigurationSectionEntry): boolean;\nexport declare function isNotTestHost([, sectionItem]: ConfigurationSectionEntry): boolean;\nexport declare function isNotComment([key]: ConfigurationSectionEntry | ProjectSectionEntry | ConfigurationListEntry | NativeTargetSectionEntry): boolean;\nexport declare function unquote(value: string): string;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}