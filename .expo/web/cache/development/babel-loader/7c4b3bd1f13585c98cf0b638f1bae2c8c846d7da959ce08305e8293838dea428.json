{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport RemoteLogging from \"./RemoteLogging\";\nexport function createRemoteConsole(originalConsole) {\n  var groupDepth = 0;\n  var enhancedConsole = Object.create(originalConsole);\n  _defineConsoleLogMethod('debug', 'info');\n  _defineConsoleLogMethod('log', 'info');\n  _defineConsoleLogMethod('info', 'info');\n  _defineConsoleLogMethod('warn', 'warn');\n  _defineConsoleLogMethod('error', 'error');\n  enhancedConsole.assert = function assert(condition) {\n    for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      data[_key - 1] = arguments[_key];\n    }\n    if (originalConsole.assert) {\n      originalConsole.assert.apply(originalConsole, [!!condition].concat(data));\n    }\n    if (condition) {\n      return;\n    }\n    var assertionMessage = 'Assertion failed';\n    if (!data.length) {\n      data.push(assertionMessage);\n    } else {\n      if (typeof data[0] !== 'string') {\n        data.unshift(assertionMessage);\n      } else {\n        data[0] = `${assertionMessage}: ${data[0]}`;\n      }\n    }\n    _enqueueRemoteLog('error', {}, data);\n  };\n  enhancedConsole.group = function group() {\n    for (var _len2 = arguments.length, data = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      data[_key2] = arguments[_key2];\n    }\n    if (originalConsole.group) {\n      originalConsole.group.apply(originalConsole, data);\n    }\n    _enqueueRemoteLog('info', {}, data);\n    groupDepth++;\n  };\n  enhancedConsole.groupCollapsed = function groupCollapsed() {\n    for (var _len3 = arguments.length, data = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      data[_key3] = arguments[_key3];\n    }\n    if (originalConsole.groupCollapsed) {\n      originalConsole.groupCollapsed.apply(originalConsole, data);\n    }\n    _enqueueRemoteLog('info', {\n      groupCollapsed: true\n    }, data);\n    groupDepth++;\n  };\n  enhancedConsole.groupEnd = function groupEnd() {\n    if (originalConsole.groupEnd) {\n      originalConsole.groupEnd();\n    }\n    if (groupDepth > 0) {\n      groupDepth--;\n    }\n    _enqueueRemoteLog('info', {\n      shouldHide: true\n    }, []);\n  };\n  function _defineConsoleLogMethod(name, level) {\n    enhancedConsole[name] = function __expoConsoleLog() {\n      var originalMethod = originalConsole[name];\n      for (var _len4 = arguments.length, data = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        data[_key4] = arguments[_key4];\n      }\n      if (typeof originalMethod === 'function') {\n        originalMethod.apply(originalConsole, data);\n      }\n      _enqueueRemoteLog(level, {}, data);\n    };\n  }\n  function _enqueueRemoteLog(level, additionalFields, data) {\n    RemoteLogging.enqueueRemoteLogAsync(level, _objectSpread({\n      groupDepth: groupDepth\n    }, additionalFields), data).catch(function (error) {\n      originalConsole.error(`There was a problem sending log messages to your development environment`, error);\n    });\n  }\n  return enhancedConsole;\n}","map":{"version":3,"names":["RemoteLogging","createRemoteConsole","originalConsole","groupDepth","enhancedConsole","Object","create","_defineConsoleLogMethod","assert","condition","_len","arguments","length","data","Array","_key","apply","concat","assertionMessage","push","unshift","_enqueueRemoteLog","group","_len2","_key2","groupCollapsed","_len3","_key3","groupEnd","shouldHide","name","level","__expoConsoleLog","originalMethod","_len4","_key4","additionalFields","enqueueRemoteLogAsync","_objectSpread","catch","error"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\expo\\src\\logs\\RemoteConsole.ts"],"sourcesContent":["import RemoteLogging, { LogEntryFields, LogLevel } from './RemoteLogging';\n\n/**\n * Creates a console object that delegates calls to the specified underlying console and also sends\n * the messages to the development environment over a remote connection.\n */\nexport function createRemoteConsole(originalConsole: Console): Console {\n  let groupDepth = 0;\n\n  const enhancedConsole: typeof originalConsole = Object.create(originalConsole);\n\n  // https://console.spec.whatwg.org/#debug\n  // Don't use a level below \"info\" because \"debug\" is intended for messages that shouldn't be shown\n  // to the developer\n  _defineConsoleLogMethod('debug', 'info');\n\n  // https://console.spec.whatwg.org/#log\n  _defineConsoleLogMethod('log', 'info');\n\n  // https://console.spec.whatwg.org/#info\n  _defineConsoleLogMethod('info', 'info');\n\n  // https://console.spec.whatwg.org/#warn\n  _defineConsoleLogMethod('warn', 'warn');\n\n  // https://console.spec.whatwg.org/#error\n  _defineConsoleLogMethod('error', 'error');\n\n  // https://console.spec.whatwg.org/#assert\n  enhancedConsole.assert = function assert(condition: unknown, ...data: unknown[]): void {\n    if (originalConsole.assert) {\n      // @ts-ignore\n      originalConsole.assert(!!condition, ...data);\n    }\n\n    if (condition) {\n      return;\n    }\n\n    const assertionMessage = 'Assertion failed';\n    if (!data.length) {\n      data.push(assertionMessage);\n    } else {\n      if (typeof data[0] !== 'string') {\n        data.unshift(assertionMessage);\n      } else {\n        data[0] = `${assertionMessage}: ${data[0]}`;\n      }\n    }\n\n    _enqueueRemoteLog('error', {}, data);\n  };\n\n  // https://console.spec.whatwg.org/#group\n  enhancedConsole.group = function group(...data: unknown[]): void {\n    if (originalConsole.group) {\n      // @ts-ignore\n      originalConsole.group(...data);\n    }\n\n    _enqueueRemoteLog('info', {}, data);\n    groupDepth++;\n  };\n\n  // https://console.spec.whatwg.org/#groupcollapsed\n  enhancedConsole.groupCollapsed = function groupCollapsed(...data: unknown[]): void {\n    if (originalConsole.groupCollapsed) {\n      // @ts-ignore\n      originalConsole.groupCollapsed(...data);\n    }\n\n    _enqueueRemoteLog('info', { groupCollapsed: true }, data);\n    groupDepth++;\n  };\n\n  // https://console.spec.whatwg.org/#groupend\n  enhancedConsole.groupEnd = function groupEnd(): void {\n    if (originalConsole.groupEnd) {\n      originalConsole.groupEnd();\n    }\n\n    if (groupDepth > 0) {\n      groupDepth--;\n    }\n\n    _enqueueRemoteLog('info', { shouldHide: true }, []);\n  };\n\n  /**\n   * Defines a method in the `console.log()` family on the enhanced console\n   * instance\n   */\n  function _defineConsoleLogMethod(name: keyof typeof console, level: LogLevel): void {\n    enhancedConsole[name] = function __expoConsoleLog(...data: unknown[]): void {\n      const originalMethod = originalConsole[name];\n      if (typeof originalMethod === 'function') {\n        originalMethod.apply(originalConsole, data);\n      }\n\n      _enqueueRemoteLog(level, {}, data);\n    };\n  }\n\n  /**\n   * Schedules the given log entry to be sent remotely in a safe way that handles all errors. This\n   * function is responsible for error handling because the console methods are synchronous but\n   * sending log messages is asynchronous, so this code (instead of the console methods) needs to be\n   * responsible for asynchronous errors.\n   */\n  function _enqueueRemoteLog(\n    level: LogLevel,\n    additionalFields: LogEntryFields,\n    data: unknown[]\n  ): void {\n    RemoteLogging.enqueueRemoteLogAsync(level, { groupDepth, ...additionalFields }, data).catch(\n      (error) => {\n        originalConsole.error(\n          `There was a problem sending log messages to your development environment`,\n          error\n        );\n      }\n    );\n  }\n\n  return enhancedConsole;\n}\n"],"mappings":";;;AAAA,OAAOA,aAA2C;AAMlD,OAAM,SAAUC,mBAAmBA,CAACC,eAAwB;EAC1D,IAAIC,UAAU,GAAG,CAAC;EAElB,IAAMC,eAAe,GAA2BC,MAAM,CAACC,MAAM,CAACJ,eAAe,CAAC;EAK9EK,uBAAuB,CAAC,OAAO,EAAE,MAAM,CAAC;EAGxCA,uBAAuB,CAAC,KAAK,EAAE,MAAM,CAAC;EAGtCA,uBAAuB,CAAC,MAAM,EAAE,MAAM,CAAC;EAGvCA,uBAAuB,CAAC,MAAM,EAAE,MAAM,CAAC;EAGvCA,uBAAuB,CAAC,OAAO,EAAE,OAAO,CAAC;EAGzCH,eAAe,CAACI,MAAM,GAAG,SAASA,MAAMA,CAACC,SAAkB,EAAoB;IAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAfC,IAAe,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAfF,IAAe,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;IAAA;IAC7E,IAAIb,eAAe,CAACM,MAAM,EAAE;MAE1BN,eAAe,CAACM,MAAM,CAAAQ,KAAA,CAAtBd,eAAe,GAAQ,CAAC,CAACO,SAAS,EAAAQ,MAAA,CAAKJ,IAAI,EAAC;;IAG9C,IAAIJ,SAAS,EAAE;MACb;;IAGF,IAAMS,gBAAgB,GAAG,kBAAkB;IAC3C,IAAI,CAACL,IAAI,CAACD,MAAM,EAAE;MAChBC,IAAI,CAACM,IAAI,CAACD,gBAAgB,CAAC;KAC5B,MAAM;MACL,IAAI,OAAOL,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;QAC/BA,IAAI,CAACO,OAAO,CAACF,gBAAgB,CAAC;OAC/B,MAAM;QACLL,IAAI,CAAC,CAAC,CAAC,GAAG,GAAGK,gBAAgB,KAAKL,IAAI,CAAC,CAAC,CAAC,EAAE;;;IAI/CQ,iBAAiB,CAAC,OAAO,EAAE,EAAE,EAAER,IAAI,CAAC;EACtC,CAAC;EAGDT,eAAe,CAACkB,KAAK,GAAG,SAASA,KAAKA,CAAA,EAAmB;IAAA,SAAAC,KAAA,GAAAZ,SAAA,CAAAC,MAAA,EAAfC,IAAe,OAAAC,KAAA,CAAAS,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAfX,IAAe,CAAAW,KAAA,IAAAb,SAAA,CAAAa,KAAA;IAAA;IACvD,IAAItB,eAAe,CAACoB,KAAK,EAAE;MAEzBpB,eAAe,CAACoB,KAAK,CAAAN,KAAA,CAArBd,eAAe,EAAUW,IAAI,CAAC;;IAGhCQ,iBAAiB,CAAC,MAAM,EAAE,EAAE,EAAER,IAAI,CAAC;IACnCV,UAAU,EAAE;EACd,CAAC;EAGDC,eAAe,CAACqB,cAAc,GAAG,SAASA,cAAcA,CAAA,EAAmB;IAAA,SAAAC,KAAA,GAAAf,SAAA,CAAAC,MAAA,EAAfC,IAAe,OAAAC,KAAA,CAAAY,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAfd,IAAe,CAAAc,KAAA,IAAAhB,SAAA,CAAAgB,KAAA;IAAA;IACzE,IAAIzB,eAAe,CAACuB,cAAc,EAAE;MAElCvB,eAAe,CAACuB,cAAc,CAAAT,KAAA,CAA9Bd,eAAe,EAAmBW,IAAI,CAAC;;IAGzCQ,iBAAiB,CAAC,MAAM,EAAE;MAAEI,cAAc,EAAE;IAAI,CAAE,EAAEZ,IAAI,CAAC;IACzDV,UAAU,EAAE;EACd,CAAC;EAGDC,eAAe,CAACwB,QAAQ,GAAG,SAASA,QAAQA,CAAA;IAC1C,IAAI1B,eAAe,CAAC0B,QAAQ,EAAE;MAC5B1B,eAAe,CAAC0B,QAAQ,EAAE;;IAG5B,IAAIzB,UAAU,GAAG,CAAC,EAAE;MAClBA,UAAU,EAAE;;IAGdkB,iBAAiB,CAAC,MAAM,EAAE;MAAEQ,UAAU,EAAE;IAAI,CAAE,EAAE,EAAE,CAAC;EACrD,CAAC;EAMD,SAAStB,uBAAuBA,CAACuB,IAA0B,EAAEC,KAAe;IAC1E3B,eAAe,CAAC0B,IAAI,CAAC,GAAG,SAASE,gBAAgBA,CAAA,EAAmB;MAClE,IAAMC,cAAc,GAAG/B,eAAe,CAAC4B,IAAI,CAAC;MAAC,SAAAI,KAAA,GAAAvB,SAAA,CAAAC,MAAA,EADMC,IAAe,OAAAC,KAAA,CAAAoB,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;QAAftB,IAAe,CAAAsB,KAAA,IAAAxB,SAAA,CAAAwB,KAAA;MAAA;MAElE,IAAI,OAAOF,cAAc,KAAK,UAAU,EAAE;QACxCA,cAAc,CAACjB,KAAK,CAACd,eAAe,EAAEW,IAAI,CAAC;;MAG7CQ,iBAAiB,CAACU,KAAK,EAAE,EAAE,EAAElB,IAAI,CAAC;IACpC,CAAC;EACH;EAQA,SAASQ,iBAAiBA,CACxBU,KAAe,EACfK,gBAAgC,EAChCvB,IAAe;IAEfb,aAAa,CAACqC,qBAAqB,CAACN,KAAK,EAAAO,aAAA;MAAInC,UAAU,EAAVA;IAAU,GAAKiC,gBAAgB,GAAIvB,IAAI,CAAC,CAAC0B,KAAK,CACzF,UAACC,KAAK,EAAI;MACRtC,eAAe,CAACsC,KAAK,CACnB,0EAA0E,EAC1EA,KAAK,CACN;IACH,CAAC,CACF;EACH;EAEA,OAAOpC,eAAe;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}