{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\expo-modules-core\\src\\NativeViewManagerAdapter.native.tsx"],"sourcesContent":["import React from 'react';\nimport { findNodeHandle, NativeModules, requireNativeComponent, HostComponent } from 'react-native';\n\nimport { requireNativeModule } from './requireNativeModule';\n\n// To make the transition from React Native's `requireNativeComponent` to Expo's\n// `requireNativeViewManager` as easy as possible, `requireNativeViewManager` is a drop-in\n// replacement for `requireNativeComponent`.\n//\n// For each view manager, we create a wrapper component that accepts all of the props available to\n// the author of the universal module. This wrapper component splits the props into two sets: props\n// passed to React Native's View (ex: style, testID) and custom view props, which are passed to the\n// adapter view component in a prop called `proxiedProperties`.\n\n/**\n * A map that caches registered native components.\n */\nconst nativeComponentsCache = new Map<string, HostComponent<any>>();\n\n/**\n * Requires a React Native component from cache if possible. This prevents\n * \"Tried to register two views with the same name\" errors on fast refresh, but\n * also when there are multiple versions of the same package with native component.\n */\nfunction requireCachedNativeComponent<Props>(viewName: string): HostComponent<Props> {\n  const cachedNativeComponent = nativeComponentsCache.get(viewName);\n\n  if (!cachedNativeComponent) {\n    const nativeComponent = requireNativeComponent<Props>(viewName);\n    nativeComponentsCache.set(viewName, nativeComponent);\n    return nativeComponent;\n  }\n  return cachedNativeComponent;\n}\n\n/**\n * A drop-in replacement for `requireNativeComponent`.\n */\nexport function requireNativeViewManager<P>(viewName: string): React.ComponentType<P> {\n  const { viewManagersMetadata } = NativeModules.NativeUnimoduleProxy;\n  const viewManagerConfig = viewManagersMetadata?.[viewName];\n\n  if (__DEV__ && !viewManagerConfig) {\n    const exportedViewManagerNames = Object.keys(viewManagersMetadata).join(', ');\n    console.warn(\n      `The native view manager required by name (${viewName}) from NativeViewManagerAdapter isn't exported by expo-modules-core. Views of this type may not render correctly. Exported view managers: [${exportedViewManagerNames}].`\n    );\n  }\n\n  // Set up the React Native native component, which is an adapter to the universal module's view\n  // manager\n  const reactNativeViewName = `ViewManagerAdapter_${viewName}`;\n  const ReactNativeComponent = requireCachedNativeComponent(reactNativeViewName);\n\n  class NativeComponent extends React.PureComponent<P> {\n    static displayName = viewName;\n\n    // This will be accessed from native when the prototype functions are called,\n    // in order to find the associated native view.\n    nativeTag: number | null = null;\n\n    componentDidMount(): void {\n      this.nativeTag = findNodeHandle(this);\n    }\n\n    render(): React.ReactNode {\n      return <ReactNativeComponent {...this.props} />;\n    }\n  }\n\n  try {\n    const nativeModule = requireNativeModule(viewName);\n    const nativeViewPrototype = nativeModule.ViewPrototype;\n\n    if (nativeViewPrototype) {\n      // Assign native view functions to the component prototype so they can be accessed from the ref.\n      Object.assign(NativeComponent.prototype, nativeViewPrototype);\n    }\n  } catch {\n    // `requireNativeModule` may throw an error when the native module cannot be found.\n    // In some tests we don't mock the entire modules, but we do want to mock native views. For now,\n    // until we still have to support the legacy modules proxy and don't have better ways to mock,\n    // let's just gracefully skip assigning the prototype functions.\n    // See: https://github.com/expo/expo/blob/main/packages/expo-modules-core/src/__tests__/NativeViewManagerAdapter-test.native.tsx\n  }\n\n  return NativeComponent;\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}