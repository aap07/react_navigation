{"ast":null,"code":"import Constants from 'expo-constants';\nimport * as FileSystem from 'expo-file-system';\nimport { getLocalAssets } from \"./PlatformUtils\";\nvar bundledAssets = new Set(FileSystem.bundledAssets || []);\nvar localAssets = getLocalAssets();\nexport function getLocalAssetUri(hash, type) {\n  var localAssetsKey = hash;\n  var legacyLocalAssetsKey = `${hash}.${type != null ? type : ''}`;\n  switch (true) {\n    case localAssetsKey in localAssets:\n      {\n        return localAssets[localAssetsKey];\n      }\n    case legacyLocalAssetsKey in localAssets:\n      {\n        return localAssets[legacyLocalAssetsKey];\n      }\n    case !__DEV__:\n      {\n        var assetName = `asset_${hash}${type ? `.${type}` : ''}`;\n        if (Constants.appOwnership !== 'standalone' || !bundledAssets.has(assetName)) {\n          return null;\n        }\n        return `${FileSystem.bundleDirectory}${assetName}`;\n      }\n    default:\n      return null;\n  }\n}","map":{"version":3,"names":["Constants","FileSystem","getLocalAssets","bundledAssets","Set","localAssets","getLocalAssetUri","hash","type","localAssetsKey","legacyLocalAssetsKey","__DEV__","assetName","appOwnership","has","bundleDirectory"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/expo-asset/src/LocalAssets.ts"],"sourcesContent":["import Constants from 'expo-constants';\nimport * as FileSystem from 'expo-file-system';\n\nimport { getLocalAssets } from './PlatformUtils';\n\n// Fast lookup check if assets are available in the local bundle in managed apps\nconst bundledAssets = new Set(FileSystem.bundledAssets || []);\n\n// localAssets are provided by the expo-updates module\nconst localAssets = getLocalAssets();\n\n/**\n * Returns the URI of a local asset from its hash, or null if the asset is not available locally\n */\nexport function getLocalAssetUri(hash: string, type: string | null): string | null {\n  const localAssetsKey = hash;\n  const legacyLocalAssetsKey = `${hash}.${type ?? ''}`;\n\n  switch (true) {\n    case localAssetsKey in localAssets: {\n      return localAssets[localAssetsKey];\n    }\n    case legacyLocalAssetsKey in localAssets: {\n      // legacy updates store assets with an extension\n      return localAssets[legacyLocalAssetsKey];\n    }\n    case !__DEV__: {\n      // check legacy location in case we're in Expo client/managed workflow\n      // TODO(eric): remove this once bundledAssets is no longer exported from FileSystem\n      const assetName = `asset_${hash}${type ? `.${type}` : ''}`;\n      if (Constants.appOwnership !== 'standalone' || !bundledAssets.has(assetName)) {\n        return null;\n      }\n      return `${FileSystem.bundleDirectory}${assetName}`;\n    }\n    default:\n      return null;\n  }\n}\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,gBAAgB;AACtC,OAAO,KAAKC,UAAU,MAAM,kBAAkB;AAE9C,SAASC,cAAc;AAGvB,IAAMC,aAAa,GAAG,IAAIC,GAAG,CAACH,UAAU,CAACE,aAAa,IAAI,EAAE,CAAC;AAG7D,IAAME,WAAW,GAAGH,cAAc,CAAC,CAAC;AAKpC,OAAO,SAASI,gBAAgBA,CAACC,IAAY,EAAEC,IAAmB,EAAiB;EACjF,IAAMC,cAAc,GAAGF,IAAI;EAC3B,IAAMG,oBAAoB,GAAI,GAAEH,IAAK,IAAGC,IAAI,WAAJA,IAAI,GAAI,EAAG,EAAC;EAEpD,QAAQ,IAAI;IACV,KAAKC,cAAc,IAAIJ,WAAW;MAAE;QAClC,OAAOA,WAAW,CAACI,cAAc,CAAC;MACpC;IACA,KAAKC,oBAAoB,IAAIL,WAAW;MAAE;QAExC,OAAOA,WAAW,CAACK,oBAAoB,CAAC;MAC1C;IACA,KAAK,CAACC,OAAO;MAAE;QAGb,IAAMC,SAAS,GAAI,SAAQL,IAAK,GAAEC,IAAI,GAAI,IAAGA,IAAK,EAAC,GAAG,EAAG,EAAC;QAC1D,IAAIR,SAAS,CAACa,YAAY,KAAK,YAAY,IAAI,CAACV,aAAa,CAACW,GAAG,CAACF,SAAS,CAAC,EAAE;UAC5E,OAAO,IAAI;QACb;QACA,OAAQ,GAAEX,UAAU,CAACc,eAAgB,GAAEH,SAAU,EAAC;MACpD;IACA;MACE,OAAO,IAAI;EACf;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}