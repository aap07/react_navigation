{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _require = require(\"./JavaHelpers\"),\n  getImports = _require.getImports,\n  toSafeJavaString = _require.toSafeJavaString,\n  getInterfaceJavaClassName = _require.getInterfaceJavaClassName,\n  getDelegateJavaClassName = _require.getDelegateJavaClassName;\nvar FileTemplate = function FileTemplate(_ref) {\n  var packageName = _ref.packageName,\n    imports = _ref.imports,\n    className = _ref.className,\n    extendClasses = _ref.extendClasses,\n    interfaceClassName = _ref.interfaceClassName,\n    methods = _ref.methods;\n  return `/**\n* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).\n*\n* Do not edit this file as changes may cause incorrect behavior and will be lost\n* once the code is regenerated.\n*\n* ${'@'}generated by codegen project: GeneratePropsJavaDelegate.js\n*/\n\npackage ${packageName};\n\n${imports}\n\npublic class ${className}<T extends ${extendClasses}, U extends BaseViewManagerInterface<T> & ${interfaceClassName}<T>> extends BaseViewManagerDelegate<T, U> {\n  public ${className}(U viewManager) {\n    super(viewManager);\n  }\n  ${methods}\n}\n`;\n};\nvar PropSetterTemplate = function PropSetterTemplate(_ref2) {\n  var propCases = _ref2.propCases;\n  return `\n  @Override\n  public void setProperty(T view, String propName, @Nullable Object value) {\n    ${propCases}\n  }\n`.trim();\n};\nvar CommandsTemplate = function CommandsTemplate(_ref3) {\n  var commandCases = _ref3.commandCases;\n  return `\n  @Override\n  public void receiveCommand(T view, String commandName, ReadableArray args) {\n    switch (commandName) {\n      ${commandCases}\n    }\n  }\n`.trim();\n};\nfunction getJavaValueForProp(prop, componentName) {\n  var typeAnnotation = prop.typeAnnotation;\n  switch (typeAnnotation.type) {\n    case 'BooleanTypeAnnotation':\n      if (typeAnnotation.default === null) {\n        return 'value == null ? null : (Boolean) value';\n      } else {\n        return `value == null ? ${typeAnnotation.default.toString()} : (boolean) value`;\n      }\n    case 'StringTypeAnnotation':\n      var defaultValueString = typeAnnotation.default === null ? 'null' : `\"${typeAnnotation.default}\"`;\n      return `value == null ? ${defaultValueString} : (String) value`;\n    case 'Int32TypeAnnotation':\n      return `value == null ? ${typeAnnotation.default} : ((Double) value).intValue()`;\n    case 'DoubleTypeAnnotation':\n      if (prop.optional) {\n        return `value == null ? ${typeAnnotation.default}f : ((Double) value).doubleValue()`;\n      } else {\n        return 'value == null ? Double.NaN : ((Double) value).doubleValue()';\n      }\n    case 'FloatTypeAnnotation':\n      if (typeAnnotation.default === null) {\n        return 'value == null ? null : ((Double) value).floatValue()';\n      } else if (prop.optional) {\n        return `value == null ? ${typeAnnotation.default}f : ((Double) value).floatValue()`;\n      } else {\n        return 'value == null ? Float.NaN : ((Double) value).floatValue()';\n      }\n    case 'ReservedPropTypeAnnotation':\n      switch (typeAnnotation.name) {\n        case 'ColorPrimitive':\n          return 'ColorPropConverter.getColor(value, view.getContext())';\n        case 'ImageSourcePrimitive':\n          return '(ReadableMap) value';\n        case 'ImageRequestPrimitive':\n          return '(ReadableMap) value';\n        case 'PointPrimitive':\n          return '(ReadableMap) value';\n        case 'EdgeInsetsPrimitive':\n          return '(ReadableMap) value';\n        case 'DimensionPrimitive':\n          return 'DimensionPropConverter.getDimension(value)';\n        default:\n          typeAnnotation.name;\n          throw new Error('Received unknown ReservedPropTypeAnnotation');\n      }\n    case 'ArrayTypeAnnotation':\n      {\n        return '(ReadableArray) value';\n      }\n    case 'ObjectTypeAnnotation':\n      {\n        return '(ReadableMap) value';\n      }\n    case 'StringEnumTypeAnnotation':\n      return '(String) value';\n    case 'Int32EnumTypeAnnotation':\n      return `value == null ? ${typeAnnotation.default} : ((Double) value).intValue()`;\n    case 'MixedTypeAnnotation':\n      return 'new DynamicFromObject(value)';\n    default:\n      typeAnnotation;\n      throw new Error('Received invalid typeAnnotation');\n  }\n}\nfunction generatePropCasesString(component, componentName) {\n  if (component.props.length === 0) {\n    return 'super.setProperty(view, propName, value);';\n  }\n  var cases = component.props.map(function (prop) {\n    return `case \"${prop.name}\":\n        mViewManager.set${toSafeJavaString(prop.name)}(view, ${getJavaValueForProp(prop, componentName)});\n        break;`;\n  }).join('\\n' + '      ');\n  return `switch (propName) {\n      ${cases}\n      default:\n        super.setProperty(view, propName, value);\n    }`;\n}\nfunction getCommandArgJavaType(param, index) {\n  var typeAnnotation = param.typeAnnotation;\n  switch (typeAnnotation.type) {\n    case 'ReservedTypeAnnotation':\n      switch (typeAnnotation.name) {\n        case 'RootTag':\n          return `args.getDouble(${index})`;\n        default:\n          typeAnnotation.name;\n          throw new Error(`Receieved invalid type: ${typeAnnotation.name}`);\n      }\n    case 'BooleanTypeAnnotation':\n      return `args.getBoolean(${index})`;\n    case 'DoubleTypeAnnotation':\n      return `args.getDouble(${index})`;\n    case 'FloatTypeAnnotation':\n      return `(float) args.getDouble(${index})`;\n    case 'Int32TypeAnnotation':\n      return `args.getInt(${index})`;\n    case 'StringTypeAnnotation':\n      return `args.getString(${index})`;\n    default:\n      typeAnnotation.type;\n      throw new Error(`Receieved invalid type: ${typeAnnotation.type}`);\n  }\n}\nfunction getCommandArguments(command) {\n  return ['view'].concat(_toConsumableArray(command.typeAnnotation.params.map(getCommandArgJavaType))).join(', ');\n}\nfunction generateCommandCasesString(component, componentName) {\n  if (component.commands.length === 0) {\n    return null;\n  }\n  var commandMethods = component.commands.map(function (command) {\n    return `case \"${command.name}\":\n        mViewManager.${toSafeJavaString(command.name, false)}(${getCommandArguments(command)});\n        break;`;\n  }).join('\\n' + '      ');\n  return commandMethods;\n}\nfunction getClassExtendString(component) {\n  var extendString = component.extendsProps.map(function (extendProps) {\n    switch (extendProps.type) {\n      case 'ReactNativeBuiltInType':\n        switch (extendProps.knownTypeName) {\n          case 'ReactNativeCoreViewProps':\n            return 'View';\n          default:\n            extendProps.knownTypeName;\n            throw new Error('Invalid knownTypeName');\n        }\n      default:\n        extendProps.type;\n        throw new Error('Invalid extended type');\n    }\n  }).join('');\n  return extendString;\n}\nfunction getDelegateImports(component) {\n  var imports = getImports(component, 'delegate');\n  if (component.commands.length > 0) {\n    imports.add('import com.facebook.react.bridge.ReadableArray;');\n  }\n  imports.add('import androidx.annotation.Nullable;');\n  imports.add('import com.facebook.react.uimanager.BaseViewManagerDelegate;');\n  imports.add('import com.facebook.react.uimanager.BaseViewManagerInterface;');\n  return imports;\n}\nfunction generateMethods(propsString, commandsString) {\n  return [PropSetterTemplate({\n    propCases: propsString\n  }), commandsString != null ? CommandsTemplate({\n    commandCases: commandsString\n  }) : ''].join('\\n\\n  ').trimRight();\n}\nmodule.exports = {\n  generate: function generate(libraryName, schema, packageName) {\n    var assumeNonnull = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var normalizedPackageName = 'com.facebook.react.viewmanagers';\n    var outputDir = `java/${normalizedPackageName.replace(/\\./g, '/')}`;\n    var files = new Map();\n    Object.keys(schema.modules).forEach(function (moduleName) {\n      var module = schema.modules[moduleName];\n      if (module.type !== 'Component') {\n        return;\n      }\n      var components = module.components;\n      if (components == null) {\n        return;\n      }\n      return Object.keys(components).filter(function (componentName) {\n        var component = components[componentName];\n        return !(component.excludedPlatforms && component.excludedPlatforms.includes('android'));\n      }).forEach(function (componentName) {\n        var component = components[componentName];\n        var className = getDelegateJavaClassName(componentName);\n        var interfaceClassName = getInterfaceJavaClassName(componentName);\n        var imports = getDelegateImports(component);\n        var propsString = generatePropCasesString(component, componentName);\n        var commandsString = generateCommandCasesString(component, componentName);\n        var extendString = getClassExtendString(component);\n        var replacedTemplate = FileTemplate({\n          imports: Array.from(imports).sort().join('\\n'),\n          packageName: normalizedPackageName,\n          className: className,\n          extendClasses: extendString,\n          methods: generateMethods(propsString, commandsString),\n          interfaceClassName: interfaceClassName\n        });\n        files.set(`${outputDir}/${className}.java`, replacedTemplate);\n      });\n    });\n    return files;\n  }\n};","map":{"version":3,"names":["_toConsumableArray","require","_require","getImports","toSafeJavaString","getInterfaceJavaClassName","getDelegateJavaClassName","FileTemplate","_ref","packageName","imports","className","extendClasses","interfaceClassName","methods","PropSetterTemplate","_ref2","propCases","trim","CommandsTemplate","_ref3","commandCases","getJavaValueForProp","prop","componentName","typeAnnotation","type","default","toString","defaultValueString","optional","name","Error","generatePropCasesString","component","props","length","cases","map","join","getCommandArgJavaType","param","index","getCommandArguments","command","concat","params","generateCommandCasesString","commands","commandMethods","getClassExtendString","extendString","extendsProps","extendProps","knownTypeName","getDelegateImports","add","generateMethods","propsString","commandsString","trimRight","module","exports","generate","libraryName","schema","assumeNonnull","arguments","undefined","normalizedPackageName","outputDir","replace","files","Map","Object","keys","modules","forEach","moduleName","components","filter","excludedPlatforms","includes","replacedTemplate","Array","from","sort","set"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native/codegen/lib/generators/components/GeneratePropsJavaDelegate.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * @format\n */\n\n'use strict';\n\nconst _require = require('./JavaHelpers'),\n  getImports = _require.getImports,\n  toSafeJavaString = _require.toSafeJavaString,\n  getInterfaceJavaClassName = _require.getInterfaceJavaClassName,\n  getDelegateJavaClassName = _require.getDelegateJavaClassName;\n\n// File path -> contents\n\nconst FileTemplate = ({\n  packageName,\n  imports,\n  className,\n  extendClasses,\n  interfaceClassName,\n  methods,\n}) => `/**\n* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).\n*\n* Do not edit this file as changes may cause incorrect behavior and will be lost\n* once the code is regenerated.\n*\n* ${'@'}generated by codegen project: GeneratePropsJavaDelegate.js\n*/\n\npackage ${packageName};\n\n${imports}\n\npublic class ${className}<T extends ${extendClasses}, U extends BaseViewManagerInterface<T> & ${interfaceClassName}<T>> extends BaseViewManagerDelegate<T, U> {\n  public ${className}(U viewManager) {\n    super(viewManager);\n  }\n  ${methods}\n}\n`;\nconst PropSetterTemplate = ({propCases}) =>\n  `\n  @Override\n  public void setProperty(T view, String propName, @Nullable Object value) {\n    ${propCases}\n  }\n`.trim();\nconst CommandsTemplate = ({commandCases}) =>\n  `\n  @Override\n  public void receiveCommand(T view, String commandName, ReadableArray args) {\n    switch (commandName) {\n      ${commandCases}\n    }\n  }\n`.trim();\nfunction getJavaValueForProp(prop, componentName) {\n  const typeAnnotation = prop.typeAnnotation;\n  switch (typeAnnotation.type) {\n    case 'BooleanTypeAnnotation':\n      if (typeAnnotation.default === null) {\n        return 'value == null ? null : (Boolean) value';\n      } else {\n        return `value == null ? ${typeAnnotation.default.toString()} : (boolean) value`;\n      }\n    case 'StringTypeAnnotation':\n      const defaultValueString =\n        typeAnnotation.default === null\n          ? 'null'\n          : `\"${typeAnnotation.default}\"`;\n      return `value == null ? ${defaultValueString} : (String) value`;\n    case 'Int32TypeAnnotation':\n      return `value == null ? ${typeAnnotation.default} : ((Double) value).intValue()`;\n    case 'DoubleTypeAnnotation':\n      if (prop.optional) {\n        return `value == null ? ${typeAnnotation.default}f : ((Double) value).doubleValue()`;\n      } else {\n        return 'value == null ? Double.NaN : ((Double) value).doubleValue()';\n      }\n    case 'FloatTypeAnnotation':\n      if (typeAnnotation.default === null) {\n        return 'value == null ? null : ((Double) value).floatValue()';\n      } else if (prop.optional) {\n        return `value == null ? ${typeAnnotation.default}f : ((Double) value).floatValue()`;\n      } else {\n        return 'value == null ? Float.NaN : ((Double) value).floatValue()';\n      }\n    case 'ReservedPropTypeAnnotation':\n      switch (typeAnnotation.name) {\n        case 'ColorPrimitive':\n          return 'ColorPropConverter.getColor(value, view.getContext())';\n        case 'ImageSourcePrimitive':\n          return '(ReadableMap) value';\n        case 'ImageRequestPrimitive':\n          return '(ReadableMap) value';\n        case 'PointPrimitive':\n          return '(ReadableMap) value';\n        case 'EdgeInsetsPrimitive':\n          return '(ReadableMap) value';\n        case 'DimensionPrimitive':\n          return 'DimensionPropConverter.getDimension(value)';\n        default:\n          typeAnnotation.name;\n          throw new Error('Received unknown ReservedPropTypeAnnotation');\n      }\n    case 'ArrayTypeAnnotation': {\n      return '(ReadableArray) value';\n    }\n    case 'ObjectTypeAnnotation': {\n      return '(ReadableMap) value';\n    }\n    case 'StringEnumTypeAnnotation':\n      return '(String) value';\n    case 'Int32EnumTypeAnnotation':\n      return `value == null ? ${typeAnnotation.default} : ((Double) value).intValue()`;\n    case 'MixedTypeAnnotation':\n      return 'new DynamicFromObject(value)';\n    default:\n      typeAnnotation;\n      throw new Error('Received invalid typeAnnotation');\n  }\n}\nfunction generatePropCasesString(component, componentName) {\n  if (component.props.length === 0) {\n    return 'super.setProperty(view, propName, value);';\n  }\n  const cases = component.props\n    .map(prop => {\n      return `case \"${prop.name}\":\n        mViewManager.set${toSafeJavaString(\n          prop.name,\n        )}(view, ${getJavaValueForProp(prop, componentName)});\n        break;`;\n    })\n    .join('\\n' + '      ');\n  return `switch (propName) {\n      ${cases}\n      default:\n        super.setProperty(view, propName, value);\n    }`;\n}\nfunction getCommandArgJavaType(param, index) {\n  const typeAnnotation = param.typeAnnotation;\n  switch (typeAnnotation.type) {\n    case 'ReservedTypeAnnotation':\n      switch (typeAnnotation.name) {\n        case 'RootTag':\n          return `args.getDouble(${index})`;\n        default:\n          typeAnnotation.name;\n          throw new Error(`Receieved invalid type: ${typeAnnotation.name}`);\n      }\n    case 'BooleanTypeAnnotation':\n      return `args.getBoolean(${index})`;\n    case 'DoubleTypeAnnotation':\n      return `args.getDouble(${index})`;\n    case 'FloatTypeAnnotation':\n      return `(float) args.getDouble(${index})`;\n    case 'Int32TypeAnnotation':\n      return `args.getInt(${index})`;\n    case 'StringTypeAnnotation':\n      return `args.getString(${index})`;\n    default:\n      typeAnnotation.type;\n      throw new Error(`Receieved invalid type: ${typeAnnotation.type}`);\n  }\n}\nfunction getCommandArguments(command) {\n  return [\n    'view',\n    ...command.typeAnnotation.params.map(getCommandArgJavaType),\n  ].join(', ');\n}\nfunction generateCommandCasesString(component, componentName) {\n  if (component.commands.length === 0) {\n    return null;\n  }\n  const commandMethods = component.commands\n    .map(command => {\n      return `case \"${command.name}\":\n        mViewManager.${toSafeJavaString(\n          command.name,\n          false,\n        )}(${getCommandArguments(command)});\n        break;`;\n    })\n    .join('\\n' + '      ');\n  return commandMethods;\n}\nfunction getClassExtendString(component) {\n  const extendString = component.extendsProps\n    .map(extendProps => {\n      switch (extendProps.type) {\n        case 'ReactNativeBuiltInType':\n          switch (extendProps.knownTypeName) {\n            case 'ReactNativeCoreViewProps':\n              return 'View';\n            default:\n              extendProps.knownTypeName;\n              throw new Error('Invalid knownTypeName');\n          }\n        default:\n          extendProps.type;\n          throw new Error('Invalid extended type');\n      }\n    })\n    .join('');\n  return extendString;\n}\nfunction getDelegateImports(component) {\n  const imports = getImports(component, 'delegate');\n  // The delegate needs ReadableArray for commands always.\n  // The interface doesn't always need it\n  if (component.commands.length > 0) {\n    imports.add('import com.facebook.react.bridge.ReadableArray;');\n  }\n  imports.add('import androidx.annotation.Nullable;');\n  imports.add('import com.facebook.react.uimanager.BaseViewManagerDelegate;');\n  imports.add('import com.facebook.react.uimanager.BaseViewManagerInterface;');\n  return imports;\n}\nfunction generateMethods(propsString, commandsString) {\n  return [\n    PropSetterTemplate({\n      propCases: propsString,\n    }),\n    commandsString != null\n      ? CommandsTemplate({\n          commandCases: commandsString,\n        })\n      : '',\n  ]\n    .join('\\n\\n  ')\n    .trimRight();\n}\nmodule.exports = {\n  generate(libraryName, schema, packageName, assumeNonnull = false) {\n    // TODO: This doesn't support custom package name yet.\n    const normalizedPackageName = 'com.facebook.react.viewmanagers';\n    const outputDir = `java/${normalizedPackageName.replace(/\\./g, '/')}`;\n    const files = new Map();\n    Object.keys(schema.modules).forEach(moduleName => {\n      const module = schema.modules[moduleName];\n      if (module.type !== 'Component') {\n        return;\n      }\n      const components = module.components;\n      // No components in this module\n      if (components == null) {\n        return;\n      }\n      return Object.keys(components)\n        .filter(componentName => {\n          const component = components[componentName];\n          return !(\n            component.excludedPlatforms &&\n            component.excludedPlatforms.includes('android')\n          );\n        })\n        .forEach(componentName => {\n          const component = components[componentName];\n          const className = getDelegateJavaClassName(componentName);\n          const interfaceClassName = getInterfaceJavaClassName(componentName);\n          const imports = getDelegateImports(component);\n          const propsString = generatePropCasesString(component, componentName);\n          const commandsString = generateCommandCasesString(\n            component,\n            componentName,\n          );\n          const extendString = getClassExtendString(component);\n          const replacedTemplate = FileTemplate({\n            imports: Array.from(imports).sort().join('\\n'),\n            packageName: normalizedPackageName,\n            className,\n            extendClasses: extendString,\n            methods: generateMethods(propsString, commandsString),\n            interfaceClassName: interfaceClassName,\n          });\n          files.set(`${outputDir}/${className}.java`, replacedTemplate);\n        });\n    });\n    return files;\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}