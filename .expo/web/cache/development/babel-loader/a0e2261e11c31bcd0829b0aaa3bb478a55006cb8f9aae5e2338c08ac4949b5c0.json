{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAutolinkedPackagesAsync = getAutolinkedPackagesAsync;\nexports.resolvePackagesList = resolvePackagesList;\nexports.shouldSkipAutoPlugin = shouldSkipAutoPlugin;\nfunction _importExpoModulesAutolinking() {\n  var data = require(\"./importExpoModulesAutolinking\");\n  _importExpoModulesAutolinking = function _importExpoModulesAutolinking() {\n    return data;\n  };\n  return data;\n}\nfunction getAutolinkedPackagesAsync(_x) {\n  return _getAutolinkedPackagesAsync.apply(this, arguments);\n}\nfunction _getAutolinkedPackagesAsync() {\n  _getAutolinkedPackagesAsync = _asyncToGenerator(function* (projectRoot) {\n    var platforms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['ios', 'android'];\n    var autolinking = (0, _importExpoModulesAutolinking().importExpoModulesAutolinking)(projectRoot);\n    var searchPaths = yield autolinking.resolveSearchPathsAsync(null, projectRoot);\n    var platformPaths = yield Promise.all(platforms.map(function (platform) {\n      return autolinking.findModulesAsync({\n        platform: platform,\n        searchPaths: searchPaths,\n        silent: true\n      });\n    }));\n    return resolvePackagesList(platformPaths);\n  });\n  return _getAutolinkedPackagesAsync.apply(this, arguments);\n}\nfunction resolvePackagesList(platformPaths) {\n  var allPlatformPaths = platformPaths.map(function (paths) {\n    return Object.keys(paths);\n  }).flat();\n  var uniquePaths = _toConsumableArray(new Set(allPlatformPaths));\n  return uniquePaths.sort();\n}\nfunction shouldSkipAutoPlugin(config, plugin) {\n  var _config$_internal;\n  if (plugin === 'expo-dev-client') {\n    return false;\n  }\n  if (Array.isArray((_config$_internal = config._internal) === null || _config$_internal === void 0 ? void 0 : _config$_internal.autolinkedModules)) {\n    var pluginId = Array.isArray(plugin) ? plugin[0] : plugin;\n    if (typeof pluginId === 'string') {\n      var isIncluded = config._internal.autolinkedModules.includes(pluginId);\n      if (!isIncluded) {\n        return true;\n      }\n    }\n  }\n  return false;\n}","map":{"version":3,"names":["_importExpoModulesAutolinking","data","require","getAutolinkedPackagesAsync","_x","_getAutolinkedPackagesAsync","apply","arguments","_asyncToGenerator","projectRoot","platforms","length","undefined","autolinking","importExpoModulesAutolinking","searchPaths","resolveSearchPathsAsync","platformPaths","Promise","all","map","platform","findModulesAsync","silent","resolvePackagesList","allPlatformPaths","paths","Object","keys","flat","uniquePaths","_toConsumableArray","Set","sort","shouldSkipAutoPlugin","config","plugin","_config$_internal","Array","isArray","_internal","autolinkedModules","pluginId","isIncluded","includes"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\prebuild-config\\src\\getAutolinkedPackages.ts"],"sourcesContent":["import { ModPlatform, StaticPlugin } from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\n\nimport { importExpoModulesAutolinking } from './importExpoModulesAutolinking';\n\n/**\n * Returns a list of packages that are autolinked to a project.\n *\n * @param projectRoot\n * @param platforms platforms to check for\n * @returns list of packages ex: `['expo-camera', 'react-native-screens']`\n */\nexport async function getAutolinkedPackagesAsync(\n  projectRoot: string,\n  platforms: ModPlatform[] = ['ios', 'android']\n) {\n  const autolinking = importExpoModulesAutolinking(projectRoot);\n  const searchPaths = await autolinking.resolveSearchPathsAsync(null, projectRoot);\n\n  const platformPaths = await Promise.all(\n    platforms.map((platform) =>\n      autolinking.findModulesAsync({\n        platform,\n        searchPaths,\n        silent: true,\n      })\n    )\n  );\n\n  return resolvePackagesList(platformPaths);\n}\n\nexport function resolvePackagesList(platformPaths: Record<string, any>[]) {\n  const allPlatformPaths = platformPaths.map((paths) => Object.keys(paths)).flat();\n\n  const uniquePaths = [...new Set(allPlatformPaths)];\n\n  return uniquePaths.sort();\n}\n\nexport function shouldSkipAutoPlugin(\n  config: Pick<ExpoConfig, '_internal'>,\n  plugin: StaticPlugin | string\n) {\n  // Hack workaround because expo-dev-client doesn't use expo modules.\n  if (plugin === 'expo-dev-client') {\n    return false;\n  }\n\n  // Only perform the check if `autolinkedModules` is defined, otherwise we assume\n  // this is a legacy runner which doesn't support autolinking.\n  if (Array.isArray(config._internal?.autolinkedModules)) {\n    // Resolve the pluginId as a string.\n    const pluginId = Array.isArray(plugin) ? plugin[0] : plugin;\n    if (typeof pluginId === 'string') {\n      // Determine if the autolinked modules list includes our moduleId\n      const isIncluded = config._internal!.autolinkedModules.includes(pluginId);\n      if (!isIncluded) {\n        // If it doesn't then we know that any potential plugin shouldn't be applied automatically.\n        return true;\n      }\n    }\n  }\n  return false;\n}\n"],"mappings":";;;;;;;;;;AAGA,SAAAA,8BAAA;EAAA,IAAAC,IAAA,GAAAC,OAAA;EAAAF,6BAAA,YAAAA,8BAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAAA,SASsBE,0BAA0BA,CAAAC,EAAA;EAAA,OAAAC,2BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,4BAAA;EAAAA,2BAAA,GAAAG,iBAAA,CAAzC,WACLC,WAAmB,EAEnB;IAAA,IADAC,SAAwB,GAAAH,SAAA,CAAAI,MAAA,QAAAJ,SAAA,QAAAK,SAAA,GAAAL,SAAA,MAAG,CAAC,KAAK,EAAE,SAAS,CAAC;IAE7C,IAAMM,WAAW,GAAG,IAAAb,6BAAA,GAAAc,4BAA4B,EAACL,WAAW,CAAC;IAC7D,IAAMM,WAAW,SAASF,WAAW,CAACG,uBAAuB,CAAC,IAAI,EAAEP,WAAW,CAAC;IAEhF,IAAMQ,aAAa,SAASC,OAAO,CAACC,GAAG,CACrCT,SAAS,CAACU,GAAG,CAAE,UAAAC,QAAQ;MAAA,OACrBR,WAAW,CAACS,gBAAgB,CAAC;QAC3BD,QAAQ,EAARA,QAAQ;QACRN,WAAW,EAAXA,WAAW;QACXQ,MAAM,EAAE;MACV,CAAC,CAAC;IAAA,EACH,CACF;IAED,OAAOC,mBAAmB,CAACP,aAAa,CAAC;EAC3C;EAAA,OAAAZ,2BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAEO,SAASiB,mBAAmBA,CAACP,aAAoC,EAAE;EACxE,IAAMQ,gBAAgB,GAAGR,aAAa,CAACG,GAAG,CAAE,UAAAM,KAAK;IAAA,OAAKC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC;EAAA,EAAC,CAACG,IAAI,EAAE;EAEhF,IAAMC,WAAW,GAAAC,kBAAA,CAAO,IAAIC,GAAG,CAACP,gBAAgB,CAAC,CAAC;EAElD,OAAOK,WAAW,CAACG,IAAI,EAAE;AAC3B;AAEO,SAASC,oBAAoBA,CAClCC,MAAqC,EACrCC,MAA6B,EAC7B;EAAA,IAAAC,iBAAA;EAEA,IAAID,MAAM,KAAK,iBAAiB,EAAE;IAChC,OAAO,KAAK;EACd;EAIA,IAAIE,KAAK,CAACC,OAAO,EAAAF,iBAAA,GAACF,MAAM,CAACK,SAAS,cAAAH,iBAAA,uBAAhBA,iBAAA,CAAkBI,iBAAiB,CAAC,EAAE;IAEtD,IAAMC,QAAQ,GAAGJ,KAAK,CAACC,OAAO,CAACH,MAAM,CAAC,GAAGA,MAAM,CAAC,CAAC,CAAC,GAAGA,MAAM;IAC3D,IAAI,OAAOM,QAAQ,KAAK,QAAQ,EAAE;MAEhC,IAAMC,UAAU,GAAGR,MAAM,CAACK,SAAS,CAAEC,iBAAiB,CAACG,QAAQ,CAACF,QAAQ,CAAC;MACzE,IAAI,CAACC,UAAU,EAAE;QAEf,OAAO,IAAI;MACb;IACF;EACF;EACA,OAAO,KAAK;AACd"},"metadata":{},"sourceType":"script","externalDependencies":[]}