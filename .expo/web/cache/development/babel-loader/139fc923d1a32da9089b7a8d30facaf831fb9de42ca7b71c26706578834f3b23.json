{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.startTypescriptTypeGenerationAsync = startTypescriptTypeGenerationAsync;\nvar _config = require(\"@expo/config\");\nvar _promises = _interopRequireDefault(require(\"fs/promises\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _mergeGitIgnorePaths = require(\"../../../utils/mergeGitIgnorePaths\");\nvar _dotExpo = require(\"../../project/dotExpo\");\nvar _router = require(\"../metro/router\");\nvar _expoEnv = require(\"./expo-env\");\nvar _routes = require(\"./routes\");\nvar _tsconfig = require(\"./tsconfig\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = require(\"debug\")(\"expo:typed-routes\");\nfunction startTypescriptTypeGenerationAsync(_x) {\n  return _startTypescriptTypeGenerationAsync.apply(this, arguments);\n}\nfunction _startTypescriptTypeGenerationAsync() {\n  _startTypescriptTypeGenerationAsync = _asyncToGenerator(function* (_ref) {\n    var metro = _ref.metro,\n      projectRoot = _ref.projectRoot,\n      server = _ref.server;\n    var ref;\n    var _getConfig = (0, _config).getConfig(projectRoot),\n      exp = _getConfig.exp;\n    if (!((ref = exp.experiments) == null ? void 0 : ref.typedRoutes)) {\n      debug(\"Removing typed routes side-effects (experiments.typedRoutes: false)\");\n      var gitIgnorePath = _path.default.join(projectRoot, \".gitignore\");\n      yield Promise.all([(0, _tsconfig).forceRemovalTSConfig(projectRoot), (0, _expoEnv).removeExpoEnvDTS(projectRoot), (0, _mergeGitIgnorePaths).removeFromGitIgnore(gitIgnorePath, \"expo-env.d.ts\")]);\n    } else {\n      var ref1, ref2;\n      var dotExpoDir = (0, _dotExpo).ensureDotExpoProjectDirectoryInitialized(projectRoot);\n      var typesDirectory = _path.default.resolve(dotExpoDir, \"./types\");\n      debug(\"Ensuring typed routes side-effects are setup (experiments.typedRoutes: true, typesDirectory: %s)\", typesDirectory);\n      yield _promises.default.mkdir(typesDirectory, {\n        recursive: true\n      });\n      var ref3;\n      yield Promise.all([(0, _mergeGitIgnorePaths).upsertGitIgnoreContents(_path.default.join(projectRoot, \".gitignore\"), \"expo-env.d.ts\"), (0, _expoEnv).writeExpoEnvDTS(projectRoot), (0, _tsconfig).forceUpdateTSConfig(projectRoot), (0, _routes).setupTypedRoutes({\n        metro: metro,\n        server: server,\n        typesDirectory: typesDirectory,\n        projectRoot: projectRoot,\n        routerDirectory: (ref3 = (ref1 = exp.extra) == null ? void 0 : (ref2 = ref1.router) == null ? void 0 : ref2.unstable_src) != null ? ref3 : (0, _router).getRouterDirectory(projectRoot)\n      })]);\n    }\n  });\n  return _startTypescriptTypeGenerationAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","startTypescriptTypeGenerationAsync","_config","_promises","_interopRequireDefault","_path","_mergeGitIgnorePaths","_dotExpo","_router","_expoEnv","_routes","_tsconfig","debug","_x","_startTypescriptTypeGenerationAsync","apply","arguments","_ref","metro","projectRoot","server","ref","_getConfig","getConfig","exp","experiments","typedRoutes","gitIgnorePath","default","join","Promise","all","forceRemovalTSConfig","removeExpoEnvDTS","removeFromGitIgnore","ref1","ref2","dotExpoDir","ensureDotExpoProjectDirectoryInitialized","typesDirectory","resolve","mkdir","recursive","ref3","upsertGitIgnoreContents","writeExpoEnvDTS","forceUpdateTSConfig","setupTypedRoutes","routerDirectory","extra","router","unstable_src","getRouterDirectory"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\type-generation\\startTypescriptTypeGeneration.ts"],"sourcesContent":["import { getConfig } from '@expo/config';\nimport fs from 'fs/promises';\nimport { Server } from 'metro';\nimport path from 'path';\n\nimport { upsertGitIgnoreContents, removeFromGitIgnore } from '../../../utils/mergeGitIgnorePaths';\nimport { ensureDotExpoProjectDirectoryInitialized } from '../../project/dotExpo';\nimport { ServerLike } from '../BundlerDevServer';\nimport { getRouterDirectory } from '../metro/router';\nimport { removeExpoEnvDTS, writeExpoEnvDTS } from './expo-env';\nimport { setupTypedRoutes } from './routes';\nimport { forceRemovalTSConfig, forceUpdateTSConfig } from './tsconfig';\n\nexport interface TypeScriptTypeGenerationOptions {\n  server: ServerLike;\n  metro: Server | null;\n  projectRoot: string;\n}\n\nconst debug = require('debug')('expo:typed-routes') as typeof console.log;\n\n/** Setup all requisite features for statically typed routes in Expo Router v2 / SDK +49. */\nexport async function startTypescriptTypeGenerationAsync({\n  metro,\n  projectRoot,\n  server,\n}: TypeScriptTypeGenerationOptions) {\n  const { exp } = getConfig(projectRoot);\n\n  // If typed routes are disabled, remove any files that were added.\n  if (!exp.experiments?.typedRoutes) {\n    debug('Removing typed routes side-effects (experiments.typedRoutes: false)');\n    const gitIgnorePath = path.join(projectRoot, '.gitignore');\n    await Promise.all([\n      forceRemovalTSConfig(projectRoot),\n      removeExpoEnvDTS(projectRoot),\n      removeFromGitIgnore(gitIgnorePath, 'expo-env.d.ts'),\n    ]);\n  } else {\n    const dotExpoDir = ensureDotExpoProjectDirectoryInitialized(projectRoot);\n    const typesDirectory = path.resolve(dotExpoDir, './types');\n    debug(\n      'Ensuring typed routes side-effects are setup (experiments.typedRoutes: true, typesDirectory: %s)',\n      typesDirectory\n    );\n\n    // Ensure the types directory exists.\n    await fs.mkdir(typesDirectory, { recursive: true });\n\n    await Promise.all([\n      upsertGitIgnoreContents(path.join(projectRoot, '.gitignore'), 'expo-env.d.ts'),\n      writeExpoEnvDTS(projectRoot),\n      forceUpdateTSConfig(projectRoot),\n      setupTypedRoutes({\n        metro,\n        server,\n        typesDirectory,\n        projectRoot,\n        routerDirectory: exp.extra?.router?.unstable_src ?? getRouterDirectory(projectRoot),\n      }),\n    ]);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}