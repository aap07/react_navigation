{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBestBootedSimulatorAsync = getBestBootedSimulatorAsync;\nexports.getBestUnbootedSimulatorAsync = getBestUnbootedSimulatorAsync;\nexports.getSelectableSimulatorsAsync = getSelectableSimulatorsAsync;\nexports.getBestSimulatorAsync = getBestSimulatorAsync;\nvar _childProcess = require(\"child_process\");\nvar _errors = require(\"../../../utils/errors\");\nvar SimControl = _interopRequireWildcard(require(\"./simctl\"));\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar debug = require(\"debug\")(\"expo:start:platforms:ios:getBestSimulator\");\nfunction getDefaultSimulatorDeviceUDID() {\n  try {\n    var defaultDeviceUDID = (0, _childProcess).execSync(`defaults read com.apple.iphonesimulator CurrentDeviceUDID`, {\n      stdio: \"pipe\"\n    }).toString();\n    return defaultDeviceUDID.trim();\n  } catch (_unused) {\n    return null;\n  }\n}\nfunction getBestBootedSimulatorAsync() {\n  return _getBestBootedSimulatorAsync.apply(this, arguments);\n}\nfunction _getBestBootedSimulatorAsync() {\n  _getBestBootedSimulatorAsync = _asyncToGenerator(function* () {\n    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      osType = _ref2.osType;\n    var _yield$SimControl$get = yield SimControl.getBootedSimulatorsAsync(),\n      _yield$SimControl$get2 = _slicedToArray(_yield$SimControl$get, 1),\n      simulatorOpenedByApp = _yield$SimControl$get2[0];\n    if ((simulatorOpenedByApp == null ? void 0 : simulatorOpenedByApp.udid) && (!osType || osType && simulatorOpenedByApp.osType === osType)) {\n      debug(`First booted simulator: ${simulatorOpenedByApp == null ? void 0 : simulatorOpenedByApp.windowName}`);\n      return simulatorOpenedByApp;\n    }\n    debug(`No booted simulator matching requirements (osType: ${osType}).`);\n    return null;\n  });\n  return _getBestBootedSimulatorAsync.apply(this, arguments);\n}\nfunction getBestUnbootedSimulatorAsync() {\n  return _getBestUnbootedSimulatorAsync.apply(this, arguments);\n}\nfunction _getBestUnbootedSimulatorAsync() {\n  _getBestUnbootedSimulatorAsync = _asyncToGenerator(function* () {\n    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      osType = _ref3.osType;\n    var ref;\n    var defaultId = getDefaultSimulatorDeviceUDID();\n    debug(`Default simulator ID: ${defaultId}`);\n    if (defaultId && !osType) {\n      return defaultId;\n    }\n    var simulators = yield getSelectableSimulatorsAsync({\n      osType: osType\n    });\n    if (!simulators.length) {\n      throw new _errors.CommandError(\"UNSUPPORTED_OS_TYPE\", `No ${osType || \"iOS\"} devices available in Simulator.app`);\n    }\n    if (defaultId) {\n      var defaultSimulator = simulators.find(function (device) {\n        return device.udid === defaultId;\n      });\n      if ((defaultSimulator == null ? void 0 : defaultSimulator.osType) === osType) {\n        return defaultId;\n      }\n    }\n    var ref1;\n    return (ref1 = (ref = simulators[0]) == null ? void 0 : ref.udid) != null ? ref1 : null;\n  });\n  return _getBestUnbootedSimulatorAsync.apply(this, arguments);\n}\nfunction getSelectableSimulatorsAsync() {\n  return _getSelectableSimulatorsAsync.apply(this, arguments);\n}\nfunction _getSelectableSimulatorsAsync() {\n  _getSelectableSimulatorsAsync = _asyncToGenerator(function* () {\n    var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref4$osType = _ref4.osType,\n      osType = _ref4$osType === void 0 ? \"iOS\" : _ref4$osType;\n    var simulators = yield SimControl.getDevicesAsync();\n    return simulators.filter(function (device) {\n      return device.isAvailable && device.osType === osType;\n    });\n  });\n  return _getSelectableSimulatorsAsync.apply(this, arguments);\n}\nfunction getBestSimulatorAsync(_x) {\n  return _getBestSimulatorAsync.apply(this, arguments);\n}\nfunction _getBestSimulatorAsync() {\n  _getBestSimulatorAsync = _asyncToGenerator(function* (_ref) {\n    var osType = _ref.osType;\n    var simulatorOpenedByApp = yield getBestBootedSimulatorAsync({\n      osType: osType\n    });\n    if (simulatorOpenedByApp) {\n      return simulatorOpenedByApp.udid;\n    }\n    return yield getBestUnbootedSimulatorAsync({\n      osType: osType\n    });\n  });\n  return _getBestSimulatorAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_slicedToArray","require","_asyncToGenerator","getBestBootedSimulatorAsync","getBestUnbootedSimulatorAsync","getSelectableSimulatorsAsync","getBestSimulatorAsync","_childProcess","_errors","SimControl","_interopRequireWildcard","debug","getDefaultSimulatorDeviceUDID","defaultDeviceUDID","execSync","stdio","toString","trim","_unused","_getBestBootedSimulatorAsync","apply","arguments","_ref2","length","undefined","osType","_yield$SimControl$get","getBootedSimulatorsAsync","_yield$SimControl$get2","simulatorOpenedByApp","udid","windowName","_getBestUnbootedSimulatorAsync","_ref3","ref","defaultId","simulators","CommandError","defaultSimulator","find","device","ref1","_getSelectableSimulatorsAsync","_ref4","_ref4$osType","getDevicesAsync","filter","isAvailable","_x","_getBestSimulatorAsync","_ref"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\platforms\\ios\\getBestSimulator.ts"],"sourcesContent":["import { execSync } from 'child_process';\n\nimport { CommandError } from '../../../utils/errors';\nimport * as SimControl from './simctl';\n\nconst debug = require('debug')('expo:start:platforms:ios:getBestSimulator') as typeof console.log;\n\ntype DeviceContext = Partial<Pick<SimControl.Device, 'osType'>>;\n\n/**\n * Returns the default device stored in the Simulator.app settings.\n * This helps us to get the device that the user opened most recently regardless of which tool they used.\n */\nfunction getDefaultSimulatorDeviceUDID() {\n  try {\n    const defaultDeviceUDID = execSync(\n      `defaults read com.apple.iphonesimulator CurrentDeviceUDID`,\n      { stdio: 'pipe' }\n    ).toString();\n    return defaultDeviceUDID.trim();\n  } catch {\n    return null;\n  }\n}\n\nexport async function getBestBootedSimulatorAsync({\n  osType,\n}: DeviceContext = {}): Promise<SimControl.Device | null> {\n  const [simulatorOpenedByApp] = await SimControl.getBootedSimulatorsAsync();\n  // This should prevent opening a second simulator in the chance that default\n  // simulator doesn't match what the Simulator app would open by default.\n  if (\n    simulatorOpenedByApp?.udid &&\n    (!osType || (osType && simulatorOpenedByApp.osType === osType))\n  ) {\n    debug(`First booted simulator: ${simulatorOpenedByApp?.windowName}`);\n    return simulatorOpenedByApp;\n  }\n\n  debug(`No booted simulator matching requirements (osType: ${osType}).`);\n  return null;\n}\n\n/**\n * Returns the most preferred simulator UDID without booting anything.\n *\n * 1. If the simulator app defines a default simulator and the osType is not defined.\n * 2. If the osType is defined, then check if the default udid matches the osType.\n * 3. If all else fails, return the first found simulator.\n */\nexport async function getBestUnbootedSimulatorAsync({ osType }: DeviceContext = {}): Promise<\n  string | null\n> {\n  const defaultId = getDefaultSimulatorDeviceUDID();\n  debug(`Default simulator ID: ${defaultId}`);\n\n  if (defaultId && !osType) {\n    return defaultId;\n  }\n\n  const simulators = await getSelectableSimulatorsAsync({ osType });\n\n  if (!simulators.length) {\n    // TODO: Prompt to install the simulators\n    throw new CommandError(\n      'UNSUPPORTED_OS_TYPE',\n      `No ${osType || 'iOS'} devices available in Simulator.app`\n    );\n  }\n\n  // If the default udid is defined, then check to ensure its osType matches the required os.\n  if (defaultId) {\n    const defaultSimulator = simulators.find((device) => device.udid === defaultId);\n    if (defaultSimulator?.osType === osType) {\n      return defaultId;\n    }\n  }\n\n  // Return first selectable device.\n  return simulators[0]?.udid ?? null;\n}\n\n/**\n * Get all simulators supported by Expo Go (iOS only).\n */\nexport async function getSelectableSimulatorsAsync({ osType = 'iOS' }: DeviceContext = {}): Promise<\n  SimControl.Device[]\n> {\n  const simulators = await SimControl.getDevicesAsync();\n  return simulators.filter((device) => device.isAvailable && device.osType === osType);\n}\n\n/**\n * Get 'best' simulator for the user based on:\n * 1. Currently booted simulator.\n * 2. Last simulator that was opened.\n * 3. First simulator that was opened.\n */\nexport async function getBestSimulatorAsync({ osType }: DeviceContext): Promise<string | null> {\n  const simulatorOpenedByApp = await getBestBootedSimulatorAsync({ osType });\n\n  if (simulatorOpenedByApp) {\n    return simulatorOpenedByApp.udid;\n  }\n\n  return await getBestUnbootedSimulatorAsync({ osType });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}