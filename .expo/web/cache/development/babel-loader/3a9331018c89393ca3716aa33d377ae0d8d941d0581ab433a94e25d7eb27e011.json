{"ast":null,"code":"var _global$expo, _global$expo$modules;\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nvar LegacyNativeProxy = NativeModules.NativeUnimoduleProxy;\nvar ExpoNativeProxy = (_global$expo = global.expo) == null ? void 0 : (_global$expo$modules = _global$expo.modules) == null ? void 0 : _global$expo$modules.NativeModulesProxy;\nvar modulesConstantsKey = 'modulesConstants';\nvar exportedMethodsKey = 'exportedMethods';\nvar NativeModulesProxy = {};\nif (LegacyNativeProxy) {\n  var NativeProxy = ExpoNativeProxy != null ? ExpoNativeProxy : LegacyNativeProxy;\n  Object.keys(NativeProxy[exportedMethodsKey]).forEach(function (moduleName) {\n    NativeModulesProxy[moduleName] = NativeProxy[modulesConstantsKey][moduleName] || {};\n    NativeProxy[exportedMethodsKey][moduleName].forEach(function (methodInfo) {\n      NativeModulesProxy[moduleName][methodInfo.name] = function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        if (ExpoNativeProxy != null && ExpoNativeProxy.callMethod) {\n          return ExpoNativeProxy.callMethod(moduleName, methodInfo.name, args);\n        }\n        var key = methodInfo.key,\n          argumentsCount = methodInfo.argumentsCount;\n        if (argumentsCount !== args.length) {\n          return Promise.reject(new Error(`Native method ${moduleName}.${methodInfo.name} expects ${argumentsCount} ${argumentsCount === 1 ? 'argument' : 'arguments'} but received ${args.length}`));\n        }\n        return LegacyNativeProxy.callMethod(moduleName, key, args);\n      };\n    });\n    if (NativeModules.EXReactNativeEventEmitter) {\n      NativeModulesProxy[moduleName].addListener = function () {\n        var _NativeModules$EXReac;\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n        return (_NativeModules$EXReac = NativeModules.EXReactNativeEventEmitter).addProxiedListener.apply(_NativeModules$EXReac, [moduleName].concat(args));\n      };\n      NativeModulesProxy[moduleName].removeListeners = function () {\n        var _NativeModules$EXReac2;\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n        return (_NativeModules$EXReac2 = NativeModules.EXReactNativeEventEmitter).removeProxiedListeners.apply(_NativeModules$EXReac2, [moduleName].concat(args));\n      };\n    } else {\n      NativeModulesProxy[moduleName].addListener = function () {};\n      NativeModulesProxy[moduleName].removeListeners = function () {};\n    }\n  });\n} else {\n  console.warn(`The \"EXNativeModulesProxy\" native module is not exported through NativeModules; verify that expo-modules-core's native code is linked properly`);\n}\nexport default NativeModulesProxy;","map":{"version":3,"names":["LegacyNativeProxy","NativeModules","NativeUnimoduleProxy","ExpoNativeProxy","_global$expo","global","expo","_global$expo$modules","modules","NativeModulesProxy","modulesConstantsKey","exportedMethodsKey","NativeProxy","Object","keys","forEach","moduleName","methodInfo","name","_len","arguments","length","args","Array","_key","callMethod","key","argumentsCount","Promise","reject","Error","EXReactNativeEventEmitter","addListener","_NativeModules$EXReac","_len2","_key2","addProxiedListener","apply","concat","removeListeners","_NativeModules$EXReac2","_len3","_key3","removeProxiedListeners","console","warn"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/expo-modules-core/src/NativeModulesProxy.native.ts"],"sourcesContent":["import { NativeModules } from 'react-native';\n\nimport { ProxyNativeModule } from './NativeModulesProxy.types';\n\nconst LegacyNativeProxy = NativeModules.NativeUnimoduleProxy;\n// Fixes `cannot find name 'global'.` in tests\n// @ts-ignore\nconst ExpoNativeProxy = global.expo?.modules?.NativeModulesProxy;\n\nconst modulesConstantsKey = 'modulesConstants';\nconst exportedMethodsKey = 'exportedMethods';\n\nconst NativeModulesProxy: { [moduleName: string]: ProxyNativeModule } = {};\n\nif (LegacyNativeProxy) {\n  // use JSI proxy if available, fallback to legacy RN proxy\n  const NativeProxy = ExpoNativeProxy ?? LegacyNativeProxy;\n\n  Object.keys(NativeProxy[exportedMethodsKey]).forEach((moduleName) => {\n    // copy constants\n    NativeModulesProxy[moduleName] = NativeProxy[modulesConstantsKey][moduleName] || {};\n\n    // copy methods\n    NativeProxy[exportedMethodsKey][moduleName].forEach((methodInfo) => {\n      NativeModulesProxy[moduleName][methodInfo.name] = (...args: unknown[]): Promise<any> => {\n        // Use the new proxy to call methods on legacy modules, if possible.\n        if (ExpoNativeProxy?.callMethod) {\n          return ExpoNativeProxy.callMethod(moduleName, methodInfo.name, args);\n        }\n\n        // Otherwise fall back to the legacy proxy.\n        // This is deprecated and might be removed in SDK47 or later.\n        const { key, argumentsCount } = methodInfo;\n        if (argumentsCount !== args.length) {\n          return Promise.reject(\n            new Error(\n              `Native method ${moduleName}.${methodInfo.name} expects ${argumentsCount} ${\n                argumentsCount === 1 ? 'argument' : 'arguments'\n              } but received ${args.length}`\n            )\n          );\n        }\n        return LegacyNativeProxy.callMethod(moduleName, key, args);\n      };\n    });\n\n    // These are called by EventEmitter (which is a wrapper for NativeEventEmitter)\n    // only on iOS and they use iOS-specific native module, EXReactNativeEventEmitter.\n    //\n    // On Android only {start,stop}Observing are called on the native module\n    // and these should be exported as Expo methods.\n    //\n    // Before the RN 65, addListener/removeListeners weren't called on Android. However, it no longer stays true.\n    // See https://github.com/facebook/react-native/commit/f5502fbda9fe271ff6e1d0da773a3a8ee206a453.\n    // That's why, we check if the `EXReactNativeEventEmitter` exists and only if yes, we use it in the listener implementation.\n    // Otherwise, those methods are NOOP.\n    if (NativeModules.EXReactNativeEventEmitter) {\n      NativeModulesProxy[moduleName].addListener = (...args) =>\n        NativeModules.EXReactNativeEventEmitter.addProxiedListener(moduleName, ...args);\n      NativeModulesProxy[moduleName].removeListeners = (...args) =>\n        NativeModules.EXReactNativeEventEmitter.removeProxiedListeners(moduleName, ...args);\n    } else {\n      // Fixes on Android:\n      // WARN  `new NativeEventEmitter()` was called with a non-null argument without the required `addListener` method.\n      // WARN  `new NativeEventEmitter()` was called with a non-null argument without the required `removeListeners` method.\n      NativeModulesProxy[moduleName].addListener = () => {};\n      NativeModulesProxy[moduleName].removeListeners = () => {};\n    }\n  });\n} else {\n  console.warn(\n    `The \"EXNativeModulesProxy\" native module is not exported through NativeModules; verify that expo-modules-core's native code is linked properly`\n  );\n}\n\nexport default NativeModulesProxy;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}