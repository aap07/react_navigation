{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/cli/node_modules/type-fest/source/promise-value.d.ts"],"sourcesContent":["/**\nReturns the type that is wrapped inside a `Promise` type.\nIf the type is a nested Promise, it is unwrapped recursively until a non-Promise type is obtained.\nIf the type is not a `Promise`, the type itself is returned.\n\n@example\n```\nimport {PromiseValue} from 'type-fest';\n\ntype AsyncData = Promise<string>;\nlet asyncData: PromiseValue<AsyncData> = Promise.resolve('ABC');\n\ntype Data = PromiseValue<AsyncData>;\nlet data: Data = await asyncData;\n\n// Here's an example that shows how this type reacts to non-Promise types.\ntype SyncData = PromiseValue<string>;\nlet syncData: SyncData = getSyncData();\n\n// Here's an example that shows how this type reacts to recursive Promise types.\ntype RecursiveAsyncData = Promise<Promise<string> >;\nlet recursiveAsyncData: PromiseValue<RecursiveAsyncData> = Promise.resolve(Promise.resolve('ABC'));\n```\n*/\nexport type PromiseValue<PromiseType, Otherwise = PromiseType> = PromiseType extends Promise<infer Value>\n\t? { 0: PromiseValue<Value>; 1: Value }[PromiseType extends Promise<unknown> ? 0 : 1]\n\t: Otherwise;\n"],"mappings":""},"metadata":{},"sourceType":"script","externalDependencies":[]}