{"ast":null,"code":"import { NODE_TYPE } from \"./identity.js\";\nimport { NodeBase } from \"./Node.js\";","map":{"version":3,"names":["NODE_TYPE","NodeBase"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/dist/nodes/Collection.d.ts"],"sourcesContent":["import type { Schema } from '../schema/Schema.js';\nimport { NODE_TYPE } from './identity.js';\nimport { NodeBase } from './Node.js';\nexport declare function collectionFromPath(schema: Schema, path: unknown[], value: unknown): import(\"./Node.js\").Node;\nexport declare const isEmptyPath: (path: Iterable<unknown> | null | undefined) => path is null | undefined;\nexport declare abstract class Collection extends NodeBase {\n    static maxFlowStringSingleLineLength: number;\n    schema: Schema | undefined;\n    [NODE_TYPE]: symbol;\n    items: unknown[];\n    /** An optional anchor on this node. Used by alias nodes. */\n    anchor?: string;\n    /**\n     * If true, stringify this and all child nodes using flow rather than\n     * block styles.\n     */\n    flow?: boolean;\n    constructor(type: symbol, schema?: Schema);\n    /**\n     * Create a copy of this collection.\n     *\n     * @param schema - If defined, overwrites the original's schema\n     */\n    clone(schema?: Schema): Collection;\n    /** Adds a value to the collection. */\n    abstract add(value: unknown): void;\n    /**\n     * Removes a value from the collection.\n     * @returns `true` if the item was found and removed.\n     */\n    abstract delete(key: unknown): boolean;\n    /**\n     * Returns item at `key`, or `undefined` if not found. By default unwraps\n     * scalar values from their surrounding node; to disable set `keepScalar` to\n     * `true` (collections are always returned intact).\n     */\n    abstract get(key: unknown, keepScalar?: boolean): unknown;\n    /**\n     * Checks if the collection includes a value with the key `key`.\n     */\n    abstract has(key: unknown): boolean;\n    /**\n     * Sets a value in this collection. For `!!set`, `value` needs to be a\n     * boolean to add/remove the item from the set.\n     */\n    abstract set(key: unknown, value: unknown): void;\n    /**\n     * Adds a value to the collection. For `!!map` and `!!omap` the value must\n     * be a Pair instance or a `{ key, value }` object, which may not have a key\n     * that already exists in the map.\n     */\n    addIn(path: Iterable<unknown>, value: unknown): void;\n    /**\n     * Removes a value from the collection.\n     * @returns `true` if the item was found and removed.\n     */\n    deleteIn(path: Iterable<unknown>): boolean;\n    /**\n     * Returns item at `key`, or `undefined` if not found. By default unwraps\n     * scalar values from their surrounding node; to disable set `keepScalar` to\n     * `true` (collections are always returned intact).\n     */\n    getIn(path: Iterable<unknown>, keepScalar?: boolean): unknown;\n    hasAllNullValues(allowScalar?: boolean): boolean;\n    /**\n     * Checks if the collection includes a value with the key `key`.\n     */\n    hasIn(path: Iterable<unknown>): boolean;\n    /**\n     * Sets a value in this collection. For `!!set`, `value` needs to be a\n     * boolean to add/remove the item from the set.\n     */\n    setIn(path: Iterable<unknown>, value: unknown): void;\n}\n"],"mappings":"AACA,SAASA,SAAS;AAClB,SAASC,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}