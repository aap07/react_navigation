{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertSdkRoot = assertSdkRoot;\nvar _assert = _interopRequireDefault(require(\"assert\"));\nvar _fs = _interopRequireDefault(require(\"fs\"));\nvar _os = _interopRequireDefault(require(\"os\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar ANDROID_DEFAULT_LOCATION = {\n  darwin: _path.default.join(_os.default.homedir(), \"Library\", \"Android\", \"sdk\"),\n  linux: _path.default.join(_os.default.homedir(), \"Android\", \"sdk\"),\n  win32: _path.default.join(_os.default.homedir(), \"AppData\", \"Local\", \"Android\", \"Sdk\")\n};\nfunction assertSdkRoot() {\n  if (process.env.ANDROID_HOME) {\n    (0, _assert).default(_fs.default.existsSync(process.env.ANDROID_HOME), `Failed to resolve the Android SDK path. ANDROID_HOME is set to a non-existing path: ${process.env.ANDROID_HOME}`);\n    return process.env.ANDROID_HOME;\n  }\n  if (process.env.ANDROID_SDK_ROOT) {\n    (0, _assert).default(_fs.default.existsSync(process.env.ANDROID_SDK_ROOT), `Failed to resolve the Android SDK path. Deprecated ANDROID_SDK_ROOT is set to a non-existing path: ${process.env.ANDROID_SDK_ROOT}. Use ANDROID_HOME instead.`);\n    return process.env.ANDROID_SDK_ROOT;\n  }\n  var defaultLocation = ANDROID_DEFAULT_LOCATION[process.platform];\n  if (defaultLocation) {\n    (0, _assert).default(_fs.default.existsSync(defaultLocation), `Failed to resolve the Android SDK path. Default install location not found: ${defaultLocation}. Use ANDROID_HOME to set the Android SDK location.`);\n    return defaultLocation;\n  }\n  return null;\n}","map":{"version":3,"names":["assertSdkRoot","_assert","_interopRequireDefault","require","_fs","_os","_path","ANDROID_DEFAULT_LOCATION","darwin","default","join","homedir","linux","win32","process","env","ANDROID_HOME","existsSync","ANDROID_SDK_ROOT","defaultLocation","platform"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\platforms\\android\\AndroidSdk.ts"],"sourcesContent":["import assert from 'assert';\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\n\n/**\n * The default Android SDK locations per platform.\n * @see https://developer.android.com/studio/run/emulator-commandline#filedir\n * @see https://developer.android.com/studio/intro/studio-config#optimize-studio-windows\n */\nconst ANDROID_DEFAULT_LOCATION: Readonly<Partial<Record<NodeJS.Platform, string>>> = {\n  darwin: path.join(os.homedir(), 'Library', 'Android', 'sdk'),\n  linux: path.join(os.homedir(), 'Android', 'sdk'),\n  win32: path.join(os.homedir(), 'AppData', 'Local', 'Android', 'Sdk'),\n};\n\n/**\n * Resolve and validate the root folder where the Android SDK has been installed.\n * This checks both `ANDROID_HOME`, `ANDROID_SDK_ROOT`, and the default path for the current platform.\n * @see https://developer.android.com/studio/command-line/variables\n */\nexport function assertSdkRoot() {\n  if (process.env.ANDROID_HOME) {\n    assert(\n      fs.existsSync(process.env.ANDROID_HOME),\n      `Failed to resolve the Android SDK path. ANDROID_HOME is set to a non-existing path: ${process.env.ANDROID_HOME}`\n    );\n    return process.env.ANDROID_HOME;\n  }\n\n  if (process.env.ANDROID_SDK_ROOT) {\n    assert(\n      fs.existsSync(process.env.ANDROID_SDK_ROOT),\n      `Failed to resolve the Android SDK path. Deprecated ANDROID_SDK_ROOT is set to a non-existing path: ${process.env.ANDROID_SDK_ROOT}. Use ANDROID_HOME instead.`\n    );\n    return process.env.ANDROID_SDK_ROOT;\n  }\n\n  const defaultLocation = ANDROID_DEFAULT_LOCATION[process.platform];\n  if (defaultLocation) {\n    assert(\n      fs.existsSync(defaultLocation),\n      `Failed to resolve the Android SDK path. Default install location not found: ${defaultLocation}. Use ANDROID_HOME to set the Android SDK location.`\n    );\n    return defaultLocation;\n  }\n\n  return null;\n}\n"],"mappings":"AAAA;;;;;QAqBgBA,aAAa,GAAbA,aAAa;AArBV,IAAAC,OAAQ,GAAAC,sBAAA,CAAAC,OAAA,CAAR,QAAQ;AACZ,IAAAC,GAAI,GAAAF,sBAAA,CAAAC,OAAA,CAAJ,IAAI;AACJ,IAAAE,GAAI,GAAAH,sBAAA,CAAAC,OAAA,CAAJ,IAAI;AACF,IAAAG,KAAM,GAAAJ,sBAAA,CAAAC,OAAA,CAAN,MAAM;;;;;;AAOvB,IAAMI,wBAAwB,GAAuD;EACnFC,MAAM,EAAEF,KAAI,CAAAG,OAAA,CAACC,IAAI,CAACL,GAAE,CAAAI,OAAA,CAACE,OAAO,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE,KAAK,CAAC;EAC5DC,KAAK,EAAEN,KAAI,CAAAG,OAAA,CAACC,IAAI,CAACL,GAAE,CAAAI,OAAA,CAACE,OAAO,EAAE,EAAE,SAAS,EAAE,KAAK,CAAC;EAChDE,KAAK,EAAEP,KAAI,CAAAG,OAAA,CAACC,IAAI,CAACL,GAAE,CAAAI,OAAA,CAACE,OAAO,EAAE,EAAE,SAAS,EAAE,OAAO,EAAE,SAAS,EAAE,KAAK;CACpE;AAOM,SAASX,aAAaA,CAAA,EAAG;EAC9B,IAAIc,OAAO,CAACC,GAAG,CAACC,YAAY,EAAE;IAC5B,IAAAf,OAAM,EAGLQ,OAHK,CACJL,GAAE,CAAAK,OAAA,CAACQ,UAAU,CAACH,OAAO,CAACC,GAAG,CAACC,YAAY,CAAC,EACtC,uFAAsFF,OAAO,CAACC,GAAG,CAACC,YAAa,EAAC,CAClH;IACD,OAAOF,OAAO,CAACC,GAAG,CAACC,YAAY;;EAGjC,IAAIF,OAAO,CAACC,GAAG,CAACG,gBAAgB,EAAE;IAChC,IAAAjB,OAAM,EAGLQ,OAHK,CACJL,GAAE,CAAAK,OAAA,CAACQ,UAAU,CAACH,OAAO,CAACC,GAAG,CAACG,gBAAgB,CAAC,EAC1C,sGAAqGJ,OAAO,CAACC,GAAG,CAACG,gBAAiB,6BAA4B,CAChK;IACD,OAAOJ,OAAO,CAACC,GAAG,CAACG,gBAAgB;;EAGrC,IAAMC,eAAe,GAAGZ,wBAAwB,CAACO,OAAO,CAACM,QAAQ,CAAC;EAClE,IAAID,eAAe,EAAE;IACnB,IAAAlB,OAAM,EAGLQ,OAHK,CACJL,GAAE,CAAAK,OAAA,CAACQ,UAAU,CAACE,eAAe,CAAC,EAC7B,+EAA8EA,eAAgB,qDAAoD,CACpJ;IACD,OAAOA,eAAe;;EAGxB,OAAO,IAAI"},"metadata":{},"sourceType":"script","externalDependencies":[]}