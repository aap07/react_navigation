{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBundleIdentifier = getBundleIdentifier;\nexports.getBundleIdentifierFromPbxproj = getBundleIdentifierFromPbxproj;\nexports.resetAllPlistBundleIdentifiers = resetAllPlistBundleIdentifiers;\nexports.resetPlistBundleIdentifier = resetPlistBundleIdentifier;\nexports.setBundleIdentifier = setBundleIdentifier;\nexports.setBundleIdentifierForPbxproj = setBundleIdentifierForPbxproj;\nexports.updateBundleIdentifierForPbxproj = updateBundleIdentifierForPbxproj;\nexports.withBundleIdentifier = void 0;\nfunction _plist() {\n  var data = _interopRequireDefault(require(\"@expo/plist\"));\n  _plist = function _plist() {\n    return data;\n  };\n  return data;\n}\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n  _assert = function _assert() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _xcode() {\n  var data = _interopRequireDefault(require(\"xcode\"));\n  _xcode = function _xcode() {\n    return data;\n  };\n  return data;\n}\nfunction _withDangerousMod() {\n  var data = require(\"../plugins/withDangerousMod\");\n  _withDangerousMod = function _withDangerousMod() {\n    return data;\n  };\n  return data;\n}\nfunction _Paths() {\n  var data = require(\"./Paths\");\n  _Paths = function _Paths() {\n    return data;\n  };\n  return data;\n}\nfunction _Target() {\n  var data = require(\"./Target\");\n  _Target = function _Target() {\n    return data;\n  };\n  return data;\n}\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n  return data;\n}\nfunction _string() {\n  var data = require(\"./utils/string\");\n  _string = function _string() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar withBundleIdentifier = function withBundleIdentifier(config, _ref) {\n  var bundleIdentifier = _ref.bundleIdentifier;\n  return (0, _withDangerousMod().withDangerousMod)(config, ['ios', function () {\n    var _ref2 = _asyncToGenerator(function* (config) {\n      var _config$ios;\n      var bundleId = bundleIdentifier !== null && bundleIdentifier !== void 0 ? bundleIdentifier : (_config$ios = config.ios) === null || _config$ios === void 0 ? void 0 : _config$ios.bundleIdentifier;\n      (0, _assert().default)(bundleId, '`bundleIdentifier` must be defined in the app config (`expo.ios.bundleIdentifier`) or passed to the plugin `withBundleIdentifier`.');\n      yield setBundleIdentifierForPbxproj(config.modRequest.projectRoot, bundleId);\n      return config;\n    });\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }()]);\n};\nexports.withBundleIdentifier = withBundleIdentifier;\nfunction getBundleIdentifier(config) {\n  var _config$ios$bundleIde, _config$ios2;\n  return (_config$ios$bundleIde = (_config$ios2 = config.ios) === null || _config$ios2 === void 0 ? void 0 : _config$ios2.bundleIdentifier) !== null && _config$ios$bundleIde !== void 0 ? _config$ios$bundleIde : null;\n}\nfunction setBundleIdentifier(config, infoPlist) {\n  var bundleIdentifier = getBundleIdentifier(config);\n  if (!bundleIdentifier) {\n    return infoPlist;\n  }\n  return _objectSpread(_objectSpread({}, infoPlist), {}, {\n    CFBundleIdentifier: bundleIdentifier\n  });\n}\nfunction getBundleIdentifierFromPbxproj(projectRoot) {\n  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    targetName = _ref3.targetName,\n    _ref3$buildConfigurat = _ref3.buildConfiguration,\n    buildConfiguration = _ref3$buildConfigurat === void 0 ? 'Release' : _ref3$buildConfigurat;\n  var pbxprojPath;\n  try {\n    pbxprojPath = (0, _Paths().getPBXProjectPath)(projectRoot);\n  } catch (_unused) {\n    return null;\n  }\n  var project = _xcode().default.project(pbxprojPath);\n  project.parseSync();\n  var xcBuildConfiguration = (0, _Target().getXCBuildConfigurationFromPbxproj)(project, {\n    targetName: targetName,\n    buildConfiguration: buildConfiguration\n  });\n  if (!xcBuildConfiguration) {\n    return null;\n  }\n  return getProductBundleIdentifierFromBuildConfiguration(xcBuildConfiguration);\n}\nfunction getProductBundleIdentifierFromBuildConfiguration(xcBuildConfiguration) {\n  var bundleIdentifierRaw = xcBuildConfiguration.buildSettings.PRODUCT_BUNDLE_IDENTIFIER;\n  if (bundleIdentifierRaw) {\n    var bundleIdentifier = (0, _string().trimQuotes)(bundleIdentifierRaw);\n    var bundleIdentifierParts = bundleIdentifier.split('.');\n    if (bundleIdentifierParts[bundleIdentifierParts.length - 1] === '$(PRODUCT_NAME:rfc1034identifier)' && xcBuildConfiguration.buildSettings.PRODUCT_NAME) {\n      bundleIdentifierParts[bundleIdentifierParts.length - 1] = xcBuildConfiguration.buildSettings.PRODUCT_NAME.replace(/[^a-zA-Z0-9]/g, '-');\n    }\n    return bundleIdentifierParts.join('.');\n  } else {\n    return null;\n  }\n}\nfunction updateBundleIdentifierForPbxproj(pbxprojPath, bundleIdentifier) {\n  var updateProductName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var project = _xcode().default.project(pbxprojPath);\n  project.parseSync();\n  var _ref4 = (0, _Target().findFirstNativeTarget)(project),\n    _ref5 = _slicedToArray(_ref4, 2),\n    nativeTarget = _ref5[1];\n  (0, _Xcodeproj().getBuildConfigurationsForListId)(project, nativeTarget.buildConfigurationList).forEach(function (_ref6) {\n    var _ref7 = _slicedToArray(_ref6, 2),\n      item = _ref7[1];\n    if (item.buildSettings.PRODUCT_BUNDLE_IDENTIFIER === bundleIdentifier) {\n      return;\n    }\n    item.buildSettings.PRODUCT_BUNDLE_IDENTIFIER = `\"${bundleIdentifier}\"`;\n    if (updateProductName) {\n      var productName = bundleIdentifier.split('.').pop();\n      if (!(productName !== null && productName !== void 0 && productName.includes('$'))) {\n        item.buildSettings.PRODUCT_NAME = productName;\n      }\n    }\n  });\n  _fs().default.writeFileSync(pbxprojPath, project.writeSync());\n}\nfunction setBundleIdentifierForPbxproj(projectRoot, bundleIdentifier) {\n  var updateProductName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var pbxprojPaths = [];\n  try {\n    pbxprojPaths = (0, _Paths().getAllPBXProjectPaths)(projectRoot);\n  } catch (_unused2) {}\n  for (var pbxprojPath of pbxprojPaths) {\n    updateBundleIdentifierForPbxproj(pbxprojPath, bundleIdentifier, updateProductName);\n  }\n}\nvar defaultBundleId = '$(PRODUCT_BUNDLE_IDENTIFIER)';\nfunction resetAllPlistBundleIdentifiers(projectRoot) {\n  var infoPlistPaths = (0, _Paths().getAllInfoPlistPaths)(projectRoot);\n  for (var plistPath of infoPlistPaths) {\n    resetPlistBundleIdentifier(plistPath);\n  }\n}\nfunction resetPlistBundleIdentifier(plistPath) {\n  var rawPlist = _fs().default.readFileSync(plistPath, 'utf8');\n  var plistObject = _plist().default.parse(rawPlist);\n  if (plistObject.CFBundleIdentifier) {\n    if (plistObject.CFBundleIdentifier === defaultBundleId) return;\n    var format = {\n      pretty: true,\n      indent: `\\t`\n    };\n    var xml = _plist().default.build(_objectSpread(_objectSpread({}, plistObject), {}, {\n      CFBundleIdentifier: defaultBundleId\n    }), format);\n    if (xml !== rawPlist) {\n      _fs().default.writeFileSync(plistPath, xml);\n    }\n  }\n}","map":{"version":3,"names":["_plist","data","_interopRequireDefault","require","_assert","_fs","_xcode","_withDangerousMod","_Paths","_Target","_Xcodeproj","_string","obj","__esModule","default","withBundleIdentifier","config","_ref","bundleIdentifier","withDangerousMod","_ref2","_asyncToGenerator","_config$ios","bundleId","ios","setBundleIdentifierForPbxproj","modRequest","projectRoot","_x","apply","arguments","exports","getBundleIdentifier","_config$ios$bundleIde","_config$ios2","setBundleIdentifier","infoPlist","_objectSpread","CFBundleIdentifier","getBundleIdentifierFromPbxproj","_ref3","length","undefined","targetName","_ref3$buildConfigurat","buildConfiguration","pbxprojPath","getPBXProjectPath","_unused","project","parseSync","xcBuildConfiguration","getXCBuildConfigurationFromPbxproj","getProductBundleIdentifierFromBuildConfiguration","bundleIdentifierRaw","buildSettings","PRODUCT_BUNDLE_IDENTIFIER","trimQuotes","bundleIdentifierParts","split","PRODUCT_NAME","replace","join","updateBundleIdentifierForPbxproj","updateProductName","_ref4","findFirstNativeTarget","_ref5","_slicedToArray","nativeTarget","getBuildConfigurationsForListId","buildConfigurationList","forEach","_ref6","_ref7","item","productName","pop","includes","writeFileSync","writeSync","pbxprojPaths","getAllPBXProjectPaths","_unused2","defaultBundleId","resetAllPlistBundleIdentifiers","infoPlistPaths","getAllInfoPlistPaths","plistPath","resetPlistBundleIdentifier","rawPlist","readFileSync","plistObject","parse","format","pretty","indent","xml","build"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\ios\\BundleIdentifier.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport plist, { PlistObject } from '@expo/plist';\nimport assert from 'assert';\nimport fs from 'fs';\nimport xcode, { XCBuildConfiguration } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withDangerousMod } from '../plugins/withDangerousMod';\nimport { InfoPlist } from './IosConfig.types';\nimport { getAllInfoPlistPaths, getAllPBXProjectPaths, getPBXProjectPath } from './Paths';\nimport { findFirstNativeTarget, getXCBuildConfigurationFromPbxproj } from './Target';\nimport { ConfigurationSectionEntry, getBuildConfigurationsForListId } from './utils/Xcodeproj';\nimport { trimQuotes } from './utils/string';\n\nexport const withBundleIdentifier: ConfigPlugin<{ bundleIdentifier?: string }> = (\n  config,\n  { bundleIdentifier }\n) => {\n  return withDangerousMod(config, [\n    'ios',\n    async (config) => {\n      const bundleId = bundleIdentifier ?? config.ios?.bundleIdentifier;\n      assert(\n        bundleId,\n        '`bundleIdentifier` must be defined in the app config (`expo.ios.bundleIdentifier`) or passed to the plugin `withBundleIdentifier`.'\n      );\n      await setBundleIdentifierForPbxproj(config.modRequest.projectRoot, bundleId!);\n      return config;\n    },\n  ]);\n};\n\nfunction getBundleIdentifier(config: Pick<ExpoConfig, 'ios'>): string | null {\n  return config.ios?.bundleIdentifier ?? null;\n}\n\n/**\n * In Turtle v1 we set the bundleIdentifier directly on Info.plist rather\n * than in pbxproj\n */\nfunction setBundleIdentifier(config: ExpoConfig, infoPlist: InfoPlist): InfoPlist {\n  const bundleIdentifier = getBundleIdentifier(config);\n\n  if (!bundleIdentifier) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    CFBundleIdentifier: bundleIdentifier,\n  };\n}\n\n/**\n * Gets the bundle identifier defined in the Xcode project found in the project directory.\n *\n * A bundle identifier is stored as a value in XCBuildConfiguration entry.\n * Those entries exist for every pair (build target, build configuration).\n * Unless target name is passed, the first target defined in the pbxproj is used\n * (to keep compatibility with the inaccurate legacy implementation of this function).\n * The build configuration is usually 'Release' or 'Debug'. However, it could be any arbitrary string.\n * Defaults to 'Release'.\n *\n * @param {string} projectRoot Path to project root containing the ios directory\n * @param {string} targetName Target name\n * @param {string} buildConfiguration Build configuration. Defaults to 'Release'.\n * @returns {string | null} bundle identifier of the Xcode project or null if the project is not configured\n */\nfunction getBundleIdentifierFromPbxproj(\n  projectRoot: string,\n  {\n    targetName,\n    buildConfiguration = 'Release',\n  }: { targetName?: string; buildConfiguration?: string } = {}\n): string | null {\n  let pbxprojPath: string;\n  try {\n    pbxprojPath = getPBXProjectPath(projectRoot);\n  } catch {\n    return null;\n  }\n  const project = xcode.project(pbxprojPath);\n  project.parseSync();\n\n  const xcBuildConfiguration = getXCBuildConfigurationFromPbxproj(project, {\n    targetName,\n    buildConfiguration,\n  });\n  if (!xcBuildConfiguration) {\n    return null;\n  }\n  return getProductBundleIdentifierFromBuildConfiguration(xcBuildConfiguration);\n}\n\nfunction getProductBundleIdentifierFromBuildConfiguration(\n  xcBuildConfiguration: XCBuildConfiguration\n): string | null {\n  const bundleIdentifierRaw = xcBuildConfiguration.buildSettings.PRODUCT_BUNDLE_IDENTIFIER;\n  if (bundleIdentifierRaw) {\n    const bundleIdentifier = trimQuotes(bundleIdentifierRaw);\n    // it's possible to use interpolation for the bundle identifier\n    // the most common case is when the last part of the id is set to `$(PRODUCT_NAME:rfc1034identifier)`\n    // in this case, PRODUCT_NAME should be replaced with its value\n    // the `rfc1034identifier` modifier replaces all non-alphanumeric characters with dashes\n    const bundleIdentifierParts = bundleIdentifier.split('.');\n    if (\n      bundleIdentifierParts[bundleIdentifierParts.length - 1] ===\n        '$(PRODUCT_NAME:rfc1034identifier)' &&\n      xcBuildConfiguration.buildSettings.PRODUCT_NAME\n    ) {\n      bundleIdentifierParts[bundleIdentifierParts.length - 1] =\n        xcBuildConfiguration.buildSettings.PRODUCT_NAME.replace(/[^a-zA-Z0-9]/g, '-');\n    }\n    return bundleIdentifierParts.join('.');\n  } else {\n    return null;\n  }\n}\n\n/**\n * Updates the bundle identifier for a given pbxproj\n *\n * @param {string} pbxprojPath Path to pbxproj file\n * @param {string} bundleIdentifier Bundle identifier to set in the pbxproj\n * @param {boolean} [updateProductName=true]  Whether to update PRODUCT_NAME\n */\nfunction updateBundleIdentifierForPbxproj(\n  pbxprojPath: string,\n  bundleIdentifier: string,\n  updateProductName: boolean = true\n): void {\n  const project = xcode.project(pbxprojPath);\n  project.parseSync();\n\n  const [, nativeTarget] = findFirstNativeTarget(project);\n\n  getBuildConfigurationsForListId(project, nativeTarget.buildConfigurationList).forEach(\n    ([, item]: ConfigurationSectionEntry) => {\n      if (item.buildSettings.PRODUCT_BUNDLE_IDENTIFIER === bundleIdentifier) {\n        return;\n      }\n\n      item.buildSettings.PRODUCT_BUNDLE_IDENTIFIER = `\"${bundleIdentifier}\"`;\n\n      if (updateProductName) {\n        const productName = bundleIdentifier.split('.').pop();\n        if (!productName?.includes('$')) {\n          item.buildSettings.PRODUCT_NAME = productName;\n        }\n      }\n    }\n  );\n  fs.writeFileSync(pbxprojPath, project.writeSync());\n}\n\n/**\n * Updates the bundle identifier for pbx projects inside the ios directory of the given project root\n *\n * @param {string} projectRoot Path to project root containing the ios directory\n * @param {string} bundleIdentifier Desired bundle identifier\n * @param {boolean} [updateProductName=true]  Whether to update PRODUCT_NAME\n */\nfunction setBundleIdentifierForPbxproj(\n  projectRoot: string,\n  bundleIdentifier: string,\n  updateProductName: boolean = true\n): void {\n  // Get all pbx projects in the ${projectRoot}/ios directory\n  let pbxprojPaths: string[] = [];\n  try {\n    pbxprojPaths = getAllPBXProjectPaths(projectRoot);\n  } catch {}\n\n  for (const pbxprojPath of pbxprojPaths) {\n    updateBundleIdentifierForPbxproj(pbxprojPath, bundleIdentifier, updateProductName);\n  }\n}\n\n/**\n * Reset bundle identifier field in Info.plist to use PRODUCT_BUNDLE_IDENTIFIER, as recommended by Apple.\n */\n\nconst defaultBundleId = '$(PRODUCT_BUNDLE_IDENTIFIER)';\n\nfunction resetAllPlistBundleIdentifiers(projectRoot: string): void {\n  const infoPlistPaths = getAllInfoPlistPaths(projectRoot);\n\n  for (const plistPath of infoPlistPaths) {\n    resetPlistBundleIdentifier(plistPath);\n  }\n}\n\nfunction resetPlistBundleIdentifier(plistPath: string): void {\n  const rawPlist = fs.readFileSync(plistPath, 'utf8');\n  const plistObject = plist.parse(rawPlist) as PlistObject;\n\n  if (plistObject.CFBundleIdentifier) {\n    if (plistObject.CFBundleIdentifier === defaultBundleId) return;\n\n    // attempt to match default Info.plist format\n    const format = { pretty: true, indent: `\\t` };\n\n    const xml = plist.build(\n      {\n        ...plistObject,\n        CFBundleIdentifier: defaultBundleId,\n      },\n      format\n    );\n\n    if (xml !== rawPlist) {\n      fs.writeFileSync(plistPath, xml);\n    }\n  }\n}\n\nexport {\n  getBundleIdentifier,\n  setBundleIdentifier,\n  getBundleIdentifierFromPbxproj,\n  updateBundleIdentifierForPbxproj,\n  setBundleIdentifierForPbxproj,\n  resetAllPlistBundleIdentifiers,\n  resetPlistBundleIdentifier,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}