{"ast":null,"code":"import React from 'react';\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport styleToBarStyle from \"./styleToBarStyle\";\nimport useColorScheme from \"./useColorScheme\";\nexport default function ExpoStatusBar(props) {\n  var style = props.style,\n    animated = props.animated,\n    hidden = props.hidden,\n    backgroundColorProp = props.backgroundColor,\n    translucentProp = props.translucent;\n  var translucent = translucentProp != null ? translucentProp : true;\n  var colorScheme = useColorScheme();\n  var barStyle = styleToBarStyle(style, colorScheme);\n  var backgroundColor = backgroundColorProp;\n  if (translucent && !backgroundColor) {\n    backgroundColor = 'transparent';\n  }\n  return React.createElement(StatusBar, {\n    translucent: translucent,\n    barStyle: barStyle,\n    backgroundColor: backgroundColor,\n    animated: animated,\n    hidden: hidden\n  });\n}","map":{"version":3,"names":["React","StatusBar","styleToBarStyle","useColorScheme","ExpoStatusBar","props","style","animated","hidden","backgroundColorProp","backgroundColor","translucentProp","translucent","colorScheme","barStyle","createElement"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\expo-status-bar\\src\\ExpoStatusBar.android.tsx"],"sourcesContent":["import React from 'react';\nimport { StatusBar } from 'react-native';\n\nimport { StatusBarProps } from './StatusBar.types';\nimport styleToBarStyle from './styleToBarStyle';\nimport useColorScheme from './useColorScheme';\n\nexport default function ExpoStatusBar(props: StatusBarProps) {\n  const {\n    style,\n    animated,\n    hidden,\n    backgroundColor: backgroundColorProp,\n    translucent: translucentProp,\n  } = props;\n\n  // Default to true for translucent\n  const translucent = translucentProp ?? true;\n\n  // Pick appropriate default value depending on current theme, so if we are\n  // locked to light mode we don't end up with a light status bar\n  const colorScheme = useColorScheme();\n  const barStyle = styleToBarStyle(style, colorScheme);\n\n  // If translucent and no backgroundColor is provided, then use transparent\n  // background\n  let backgroundColor = backgroundColorProp;\n  if (translucent && !backgroundColor) {\n    backgroundColor = 'transparent';\n  }\n\n  return (\n    <StatusBar\n      translucent={translucent}\n      barStyle={barStyle}\n      backgroundColor={backgroundColor}\n      animated={animated}\n      hidden={hidden}\n    />\n  );\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,OAAAC,SAAA;AAI1B,OAAOC,eAAe;AACtB,OAAOC,cAAc;AAErB,eAAc,SAAUC,aAAaA,CAACC,KAAqB;EACzD,IACEC,KAAK,GAKHD,KAAK,CALPC,KAAK;IACLC,QAAQ,GAINF,KAAK,CAJPE,QAAQ;IACRC,MAAM,GAGJH,KAAK,CAHPG,MAAM;IACWC,mBAAmB,GAElCJ,KAAK,CAFPK,eAAe;IACFC,eAAe,GAC1BN,KAAK,CADPO,WAAW;EAIb,IAAMA,WAAW,GAAGD,eAAe,WAAfA,eAAe,GAAI,IAAI;EAI3C,IAAME,WAAW,GAAGV,cAAc,EAAE;EACpC,IAAMW,QAAQ,GAAGZ,eAAe,CAACI,KAAK,EAAEO,WAAW,CAAC;EAIpD,IAAIH,eAAe,GAAGD,mBAAmB;EACzC,IAAIG,WAAW,IAAI,CAACF,eAAe,EAAE;IACnCA,eAAe,GAAG,aAAa;;EAGjC,OACEV,KAAA,CAAAe,aAAA,CAACd,SAAS;IACRW,WAAW,EAAEA,WAAW;IACxBE,QAAQ,EAAEA,QAAQ;IAClBJ,eAAe,EAAEA,eAAe;IAChCH,QAAQ,EAAEA,QAAQ;IAClBC,MAAM,EAAEA;EAAM,EACd;AAEN"},"metadata":{},"sourceType":"module","externalDependencies":[]}