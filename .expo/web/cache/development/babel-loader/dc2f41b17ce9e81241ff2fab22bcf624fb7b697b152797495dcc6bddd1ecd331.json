{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _excluded = [\"mods\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _exportNames = {\n  getConfig: true,\n  getPackageJson: true,\n  getConfigFilePaths: true,\n  modifyConfigAsync: true,\n  getWebOutputPath: true,\n  getNameFromConfig: true,\n  getDefaultTarget: true,\n  getProjectConfigDescription: true,\n  getProjectConfigDescriptionWithPaths: true\n};\nexports.getConfig = getConfig;\nexports.getConfigFilePaths = getConfigFilePaths;\nexports.getDefaultTarget = getDefaultTarget;\nexports.getNameFromConfig = getNameFromConfig;\nexports.getPackageJson = getPackageJson;\nexports.getProjectConfigDescription = getProjectConfigDescription;\nexports.getProjectConfigDescriptionWithPaths = getProjectConfigDescriptionWithPaths;\nexports.getWebOutputPath = getWebOutputPath;\nexports.modifyConfigAsync = modifyConfigAsync;\nfunction _jsonFile() {\n  var data = _interopRequireDefault(require(\"@expo/json-file\"));\n  _jsonFile = function _jsonFile() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _glob() {\n  var data = require(\"glob\");\n  _glob = function _glob() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _resolveFrom() {\n  var data = _interopRequireDefault(require(\"resolve-from\"));\n  _resolveFrom = function _resolveFrom() {\n    return data;\n  };\n  return data;\n}\nfunction _semver() {\n  var data = _interopRequireDefault(require(\"semver\"));\n  _semver = function _semver() {\n    return data;\n  };\n  return data;\n}\nfunction _slugify() {\n  var data = _interopRequireDefault(require(\"slugify\"));\n  _slugify = function _slugify() {\n    return data;\n  };\n  return data;\n}\nfunction _getConfig() {\n  var data = require(\"./getConfig\");\n  _getConfig = function _getConfig() {\n    return data;\n  };\n  return data;\n}\nfunction _getExpoSDKVersion() {\n  var data = require(\"./getExpoSDKVersion\");\n  _getExpoSDKVersion = function _getExpoSDKVersion() {\n    return data;\n  };\n  return data;\n}\nfunction _withConfigPlugins() {\n  var data = require(\"./plugins/withConfigPlugins\");\n  _withConfigPlugins = function _withConfigPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _withInternal() {\n  var data = require(\"./plugins/withInternal\");\n  _withInternal = function _withInternal() {\n    return data;\n  };\n  return data;\n}\nfunction _resolvePackageJson() {\n  var data = require(\"./resolvePackageJson\");\n  _resolvePackageJson = function _resolvePackageJson() {\n    return data;\n  };\n  return data;\n}\nvar _Config = require(\"./Config.types\");\nObject.keys(_Config).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _Config[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _Config[key];\n    }\n  });\n});\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction reduceExpoObject(config) {\n  var _config$expo;\n  if (!config) return config === undefined ? null : config;\n  var _ref = (_config$expo = config.expo) !== null && _config$expo !== void 0 ? _config$expo : config,\n    mods = _ref.mods,\n    expo = _objectWithoutProperties(_ref, _excluded);\n  return {\n    expo: expo,\n    mods: mods\n  };\n}\nfunction getSupportedPlatforms(projectRoot) {\n  var platforms = [];\n  if (_resolveFrom().default.silent(projectRoot, 'react-native')) {\n    platforms.push('ios', 'android');\n  }\n  if (_resolveFrom().default.silent(projectRoot, 'react-native-web')) {\n    platforms.push('web');\n  }\n  return platforms;\n}\nfunction getConfig(projectRoot) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var paths = getConfigFilePaths(projectRoot);\n  var rawStaticConfig = paths.staticConfigPath ? (0, _getConfig().getStaticConfig)(paths.staticConfigPath) : null;\n  var rootConfig = rawStaticConfig || {};\n  var staticConfig = reduceExpoObject(rawStaticConfig) || {};\n  var _getPackageJsonAndPat = getPackageJsonAndPath(projectRoot),\n    _getPackageJsonAndPat2 = _slicedToArray(_getPackageJsonAndPat, 2),\n    packageJson = _getPackageJsonAndPat2[0],\n    packageJsonPath = _getPackageJsonAndPat2[1];\n  function fillAndReturnConfig(config, dynamicConfigObjectType) {\n    var configWithDefaultValues = _objectSpread(_objectSpread({}, ensureConfigHasDefaultValues({\n      projectRoot: projectRoot,\n      exp: config.expo,\n      pkg: packageJson,\n      skipSDKVersionRequirement: options.skipSDKVersionRequirement,\n      paths: paths,\n      packageJsonPath: packageJsonPath\n    })), {}, {\n      mods: config.mods,\n      dynamicConfigObjectType: dynamicConfigObjectType,\n      rootConfig: rootConfig,\n      dynamicConfigPath: paths.dynamicConfigPath,\n      staticConfigPath: paths.staticConfigPath\n    });\n    if (options.isModdedConfig) {\n      var _config$mods;\n      configWithDefaultValues.exp.mods = (_config$mods = config.mods) !== null && _config$mods !== void 0 ? _config$mods : null;\n    }\n    configWithDefaultValues.exp = (0, _withConfigPlugins().withConfigPlugins)(configWithDefaultValues.exp, !!options.skipPlugins);\n    if (!options.isModdedConfig) {\n      delete configWithDefaultValues.exp.mods;\n    }\n    if (options.isPublicConfig) {\n      var _configWithDefaultVal, _configWithDefaultVal2, _configWithDefaultVal3, _configWithDefaultVal4;\n      delete configWithDefaultValues.exp._internal;\n      if (configWithDefaultValues.exp.hooks) {\n        delete configWithDefaultValues.exp.hooks;\n      }\n      if ((_configWithDefaultVal = configWithDefaultValues.exp.ios) !== null && _configWithDefaultVal !== void 0 && _configWithDefaultVal.config) {\n        delete configWithDefaultValues.exp.ios.config;\n      }\n      if ((_configWithDefaultVal2 = configWithDefaultValues.exp.android) !== null && _configWithDefaultVal2 !== void 0 && _configWithDefaultVal2.config) {\n        delete configWithDefaultValues.exp.android.config;\n      }\n      (_configWithDefaultVal3 = configWithDefaultValues.exp.updates) === null || _configWithDefaultVal3 === void 0 ? true : delete _configWithDefaultVal3.codeSigningCertificate;\n      (_configWithDefaultVal4 = configWithDefaultValues.exp.updates) === null || _configWithDefaultVal4 === void 0 ? true : delete _configWithDefaultVal4.codeSigningMetadata;\n    }\n    return configWithDefaultValues;\n  }\n  function getContextConfig(config) {\n    return ensureConfigHasDefaultValues({\n      projectRoot: projectRoot,\n      exp: config.expo,\n      pkg: packageJson,\n      skipSDKVersionRequirement: true,\n      paths: paths,\n      packageJsonPath: packageJsonPath\n    }).exp;\n  }\n  if (paths.dynamicConfigPath) {\n    var _ref2 = (0, _getConfig().getDynamicConfig)(paths.dynamicConfigPath, {\n        projectRoot: projectRoot,\n        staticConfigPath: paths.staticConfigPath,\n        packageJsonPath: packageJsonPath,\n        config: getContextConfig(staticConfig)\n      }),\n      exportedObjectType = _ref2.exportedObjectType,\n      rawDynamicConfig = _ref2.config;\n    var dynamicConfig = reduceExpoObject(rawDynamicConfig) || {};\n    return fillAndReturnConfig(dynamicConfig, exportedObjectType);\n  }\n  return fillAndReturnConfig(staticConfig || {}, null);\n}\nfunction getPackageJson(projectRoot) {\n  var _getPackageJsonAndPat3 = getPackageJsonAndPath(projectRoot),\n    _getPackageJsonAndPat4 = _slicedToArray(_getPackageJsonAndPat3, 1),\n    pkg = _getPackageJsonAndPat4[0];\n  return pkg;\n}\nfunction getPackageJsonAndPath(projectRoot) {\n  var packageJsonPath = (0, _resolvePackageJson().getRootPackageJsonPath)(projectRoot);\n  return [_jsonFile().default.read(packageJsonPath), packageJsonPath];\n}\nfunction getConfigFilePaths(projectRoot) {\n  return {\n    dynamicConfigPath: getDynamicConfigFilePath(projectRoot),\n    staticConfigPath: getStaticConfigFilePath(projectRoot)\n  };\n}\nfunction getDynamicConfigFilePath(projectRoot) {\n  for (var fileName of ['app.config.ts', 'app.config.js']) {\n    var configPath = _path().default.join(projectRoot, fileName);\n    if (_fs().default.existsSync(configPath)) {\n      return configPath;\n    }\n  }\n  return null;\n}\nfunction getStaticConfigFilePath(projectRoot) {\n  for (var fileName of ['app.config.json', 'app.json']) {\n    var configPath = _path().default.join(projectRoot, fileName);\n    if (_fs().default.existsSync(configPath)) {\n      return configPath;\n    }\n  }\n  return null;\n}\nfunction modifyConfigAsync(_x, _x2) {\n  return _modifyConfigAsync.apply(this, arguments);\n}\nfunction _modifyConfigAsync() {\n  _modifyConfigAsync = _asyncToGenerator(function* (projectRoot, modifications) {\n    var readOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var writeOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var config = getConfig(projectRoot, readOptions);\n    if (config.dynamicConfigPath) {\n      return {\n        type: 'warn',\n        message: `Cannot automatically write to dynamic config at: ${_path().default.relative(projectRoot, config.dynamicConfigPath)}`,\n        config: null\n      };\n    } else if (config.staticConfigPath) {\n      var outputConfig;\n      if (config.rootConfig.expo) {\n        outputConfig = _objectSpread(_objectSpread({}, config.rootConfig), {}, {\n          expo: _objectSpread(_objectSpread({}, config.rootConfig.expo), modifications)\n        });\n      } else {\n        outputConfig = _objectSpread(_objectSpread({}, config.rootConfig), modifications);\n      }\n      if (!writeOptions.dryRun) {\n        yield _jsonFile().default.writeAsync(config.staticConfigPath, outputConfig, {\n          json5: false\n        });\n      }\n      return {\n        type: 'success',\n        config: outputConfig\n      };\n    }\n    return {\n      type: 'fail',\n      message: 'No config exists',\n      config: null\n    };\n  });\n  return _modifyConfigAsync.apply(this, arguments);\n}\nfunction ensureConfigHasDefaultValues(_ref3) {\n  var projectRoot = _ref3.projectRoot,\n    exp = _ref3.exp,\n    pkg = _ref3.pkg,\n    paths = _ref3.paths,\n    packageJsonPath = _ref3.packageJsonPath,\n    _ref3$skipSDKVersionR = _ref3.skipSDKVersionRequirement,\n    skipSDKVersionRequirement = _ref3$skipSDKVersionR === void 0 ? false : _ref3$skipSDKVersionR;\n  var _exp$name, _exp$slug, _exp$version;\n  if (!exp) {\n    exp = {};\n  }\n  exp = (0, _withInternal().withInternal)(exp, _objectSpread(_objectSpread({\n    projectRoot: projectRoot\n  }, paths !== null && paths !== void 0 ? paths : {}), {}, {\n    packageJsonPath: packageJsonPath\n  }));\n  var pkgName = typeof pkg.name === 'string' ? pkg.name : _path().default.basename(projectRoot);\n  var pkgVersion = typeof pkg.version === 'string' ? pkg.version : '1.0.0';\n  var pkgWithDefaults = _objectSpread(_objectSpread({}, pkg), {}, {\n    name: pkgName,\n    version: pkgVersion\n  });\n  var name = (_exp$name = exp.name) !== null && _exp$name !== void 0 ? _exp$name : pkgName;\n  var slug = (_exp$slug = exp.slug) !== null && _exp$slug !== void 0 ? _exp$slug : (0, _slugify().default)(name.toLowerCase());\n  var version = (_exp$version = exp.version) !== null && _exp$version !== void 0 ? _exp$version : pkgVersion;\n  var description = exp.description;\n  if (!description && typeof pkg.description === 'string') {\n    description = pkg.description;\n  }\n  var expWithDefaults = _objectSpread(_objectSpread({}, exp), {}, {\n    name: name,\n    slug: slug,\n    version: version,\n    description: description\n  });\n  var sdkVersion;\n  try {\n    sdkVersion = (0, _getExpoSDKVersion().getExpoSDKVersion)(projectRoot, expWithDefaults);\n  } catch (error) {\n    if (!skipSDKVersionRequirement) throw error;\n  }\n  var platforms = exp.platforms;\n  if (!platforms) {\n    platforms = getSupportedPlatforms(projectRoot);\n  }\n  return {\n    exp: _objectSpread(_objectSpread({}, expWithDefaults), {}, {\n      sdkVersion: sdkVersion,\n      platforms: platforms\n    }),\n    pkg: pkgWithDefaults\n  };\n}\nvar DEFAULT_BUILD_PATH = `web-build`;\nfunction getWebOutputPath() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _expo$web, _expo$web$build;\n  if (process.env.WEBPACK_BUILD_OUTPUT_PATH) {\n    return process.env.WEBPACK_BUILD_OUTPUT_PATH;\n  }\n  var expo = config.expo || config || {};\n  return (expo === null || expo === void 0 ? void 0 : (_expo$web = expo.web) === null || _expo$web === void 0 ? void 0 : (_expo$web$build = _expo$web.build) === null || _expo$web$build === void 0 ? void 0 : _expo$web$build.output) || DEFAULT_BUILD_PATH;\n}\nfunction getNameFromConfig() {\n  var exp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var appManifest = exp.expo || exp;\n  var _appManifest$web = appManifest.web,\n    web = _appManifest$web === void 0 ? {} : _appManifest$web;\n  var appName = exp.displayName || appManifest.displayName || appManifest.name;\n  var webName = web.name || appName;\n  return {\n    appName: appName,\n    webName: webName\n  };\n}\nfunction getDefaultTarget(projectRoot, exp) {\n  var _exp;\n  (_exp = exp) !== null && _exp !== void 0 ? _exp : exp = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true\n  }).exp;\n  if (exp.sdkVersion && exp.sdkVersion !== 'UNVERSIONED' && _semver().default.lt(exp.sdkVersion, '37.0.0')) {\n    return 'managed';\n  }\n  return isBareWorkflowProject(projectRoot) ? 'bare' : 'managed';\n}\nfunction isBareWorkflowProject(projectRoot) {\n  var _getPackageJsonAndPat5 = getPackageJsonAndPath(projectRoot),\n    _getPackageJsonAndPat6 = _slicedToArray(_getPackageJsonAndPat5, 1),\n    pkg = _getPackageJsonAndPat6[0];\n  if (pkg.dependencies && pkg.dependencies.expokit) {\n    return false;\n  }\n  var xcodeprojFiles = (0, _glob().sync)('ios/**/*.xcodeproj', {\n    absolute: true,\n    cwd: projectRoot\n  });\n  if (xcodeprojFiles.length) {\n    return true;\n  }\n  var gradleFiles = (0, _glob().sync)('android/**/*.gradle', {\n    absolute: true,\n    cwd: projectRoot\n  });\n  if (gradleFiles.length) {\n    return true;\n  }\n  return false;\n}\nfunction getProjectConfigDescription(projectRoot) {\n  var paths = getConfigFilePaths(projectRoot);\n  return getProjectConfigDescriptionWithPaths(projectRoot, paths);\n}\nfunction getProjectConfigDescriptionWithPaths(projectRoot, projectConfig) {\n  if (projectConfig.dynamicConfigPath) {\n    var relativeDynamicConfigPath = _path().default.relative(projectRoot, projectConfig.dynamicConfigPath);\n    if (projectConfig.staticConfigPath) {\n      return `${relativeDynamicConfigPath} or ${_path().default.relative(projectRoot, projectConfig.staticConfigPath)}`;\n    }\n    return relativeDynamicConfigPath;\n  } else if (projectConfig.staticConfigPath) {\n    return _path().default.relative(projectRoot, projectConfig.staticConfigPath);\n  }\n  return 'app.json';\n}","map":{"version":3,"names":["_jsonFile","data","_interopRequireDefault","require","_fs","_glob","_path","_resolveFrom","_semver","_slugify","_getConfig","_getExpoSDKVersion","_withConfigPlugins","_withInternal","_resolvePackageJson","_Config","Object","keys","forEach","key","prototype","hasOwnProperty","call","_exportNames","exports","defineProperty","enumerable","get","obj","__esModule","default","reduceExpoObject","config","_config$expo","undefined","_ref","expo","mods","_objectWithoutProperties","_excluded","getSupportedPlatforms","projectRoot","platforms","silent","push","getConfig","options","arguments","length","paths","getConfigFilePaths","rawStaticConfig","staticConfigPath","getStaticConfig","rootConfig","staticConfig","_getPackageJsonAndPat","getPackageJsonAndPath","_getPackageJsonAndPat2","_slicedToArray","packageJson","packageJsonPath","fillAndReturnConfig","dynamicConfigObjectType","configWithDefaultValues","_objectSpread","ensureConfigHasDefaultValues","exp","pkg","skipSDKVersionRequirement","dynamicConfigPath","isModdedConfig","_config$mods","withConfigPlugins","skipPlugins","isPublicConfig","_configWithDefaultVal","_configWithDefaultVal2","_configWithDefaultVal3","_configWithDefaultVal4","_internal","hooks","ios","android","updates","codeSigningCertificate","codeSigningMetadata","getContextConfig","_ref2","getDynamicConfig","exportedObjectType","rawDynamicConfig","dynamicConfig","getPackageJson","_getPackageJsonAndPat3","_getPackageJsonAndPat4","getRootPackageJsonPath","read","getDynamicConfigFilePath","getStaticConfigFilePath","fileName","configPath","join","existsSync","modifyConfigAsync","_x","_x2","_modifyConfigAsync","apply","_asyncToGenerator","modifications","readOptions","writeOptions","type","message","relative","outputConfig","dryRun","writeAsync","json5","_ref3","_ref3$skipSDKVersionR","_exp$name","_exp$slug","_exp$version","withInternal","pkgName","name","basename","pkgVersion","version","pkgWithDefaults","slug","toLowerCase","description","expWithDefaults","sdkVersion","getExpoSDKVersion","error","DEFAULT_BUILD_PATH","getWebOutputPath","_expo$web","_expo$web$build","process","env","WEBPACK_BUILD_OUTPUT_PATH","web","build","output","getNameFromConfig","appManifest","_appManifest$web","appName","displayName","webName","getDefaultTarget","_exp","lt","isBareWorkflowProject","_getPackageJsonAndPat5","_getPackageJsonAndPat6","dependencies","expokit","xcodeprojFiles","sync","absolute","cwd","gradleFiles","getProjectConfigDescription","getProjectConfigDescriptionWithPaths","projectConfig","relativeDynamicConfigPath"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config\\src\\Config.ts"],"sourcesContent":["import { ModConfig } from '@expo/config-plugins';\nimport JsonFile, { JSONObject } from '@expo/json-file';\nimport fs from 'fs';\nimport { sync as globSync } from 'glob';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\nimport semver from 'semver';\nimport slugify from 'slugify';\n\nimport {\n  AppJSONConfig,\n  ConfigFilePaths,\n  ExpoConfig,\n  GetConfigOptions,\n  PackageJSONConfig,\n  Platform,\n  ProjectConfig,\n  ProjectTarget,\n  WriteConfigOptions,\n} from './Config.types';\nimport { getDynamicConfig, getStaticConfig } from './getConfig';\nimport { getExpoSDKVersion } from './getExpoSDKVersion';\nimport { withConfigPlugins } from './plugins/withConfigPlugins';\nimport { withInternal } from './plugins/withInternal';\nimport { getRootPackageJsonPath } from './resolvePackageJson';\n\ntype SplitConfigs = { expo: ExpoConfig; mods: ModConfig };\n\n/**\n * If a config has an `expo` object then that will be used as the config.\n * This method reduces out other top level values if an `expo` object exists.\n *\n * @param config Input config object to reduce\n */\nfunction reduceExpoObject(config?: any): SplitConfigs {\n  if (!config) return config === undefined ? null : config;\n\n  const { mods, ...expo } = config.expo ?? config;\n\n  return {\n    expo,\n    mods,\n  };\n}\n\n/**\n * Get all platforms that a project is currently capable of running.\n *\n * @param projectRoot\n * @param exp\n */\nfunction getSupportedPlatforms(projectRoot: string): Platform[] {\n  const platforms: Platform[] = [];\n  if (resolveFrom.silent(projectRoot, 'react-native')) {\n    platforms.push('ios', 'android');\n  }\n  if (resolveFrom.silent(projectRoot, 'react-native-web')) {\n    platforms.push('web');\n  }\n  return platforms;\n}\n\n/**\n * Evaluate the config for an Expo project.\n * If a function is exported from the `app.config.js` then a partial config will be passed as an argument.\n * The partial config is composed from any existing app.json, and certain fields from the `package.json` like name and description.\n *\n * If options.isPublicConfig is true, the Expo config will include only public-facing options (omitting private keys).\n * The resulting config should be suitable for hosting or embedding in a publicly readable location.\n *\n * **Example**\n * ```js\n * module.exports = function({ config }) {\n *   // mutate the config before returning it.\n *   config.slug = 'new slug'\n *   return { expo: config };\n * }\n * ```\n *\n * **Supports**\n * - `app.config.ts`\n * - `app.config.js`\n * - `app.config.json`\n * - `app.json`\n *\n * @param projectRoot the root folder containing all of your application code\n * @param options enforce criteria for a project config\n */\nexport function getConfig(projectRoot: string, options: GetConfigOptions = {}): ProjectConfig {\n  const paths = getConfigFilePaths(projectRoot);\n\n  const rawStaticConfig = paths.staticConfigPath ? getStaticConfig(paths.staticConfigPath) : null;\n  // For legacy reasons, always return an object.\n  const rootConfig = (rawStaticConfig || {}) as AppJSONConfig;\n  const staticConfig = reduceExpoObject(rawStaticConfig) || {};\n\n  // Can only change the package.json location if an app.json or app.config.json exists\n  const [packageJson, packageJsonPath] = getPackageJsonAndPath(projectRoot);\n\n  function fillAndReturnConfig(config: SplitConfigs, dynamicConfigObjectType: string | null) {\n    const configWithDefaultValues = {\n      ...ensureConfigHasDefaultValues({\n        projectRoot,\n        exp: config.expo,\n        pkg: packageJson,\n        skipSDKVersionRequirement: options.skipSDKVersionRequirement,\n        paths,\n        packageJsonPath,\n      }),\n      mods: config.mods,\n      dynamicConfigObjectType,\n      rootConfig,\n      dynamicConfigPath: paths.dynamicConfigPath,\n      staticConfigPath: paths.staticConfigPath,\n    };\n\n    if (options.isModdedConfig) {\n      // @ts-ignore: Add the mods back to the object.\n      configWithDefaultValues.exp.mods = config.mods ?? null;\n    }\n\n    // Apply static json plugins, should be done after _internal\n    configWithDefaultValues.exp = withConfigPlugins(\n      configWithDefaultValues.exp,\n      !!options.skipPlugins\n    );\n\n    if (!options.isModdedConfig) {\n      // @ts-ignore: Delete mods added by static plugins when they won't have a chance to be evaluated\n      delete configWithDefaultValues.exp.mods;\n    }\n\n    if (options.isPublicConfig) {\n      // TODD(EvanBacon): Drop plugins array after it's been resolved.\n\n      // Remove internal values with references to user's file paths from the public config.\n      delete configWithDefaultValues.exp._internal;\n\n      if (configWithDefaultValues.exp.hooks) {\n        delete configWithDefaultValues.exp.hooks;\n      }\n      if (configWithDefaultValues.exp.ios?.config) {\n        delete configWithDefaultValues.exp.ios.config;\n      }\n      if (configWithDefaultValues.exp.android?.config) {\n        delete configWithDefaultValues.exp.android.config;\n      }\n\n      delete configWithDefaultValues.exp.updates?.codeSigningCertificate;\n      delete configWithDefaultValues.exp.updates?.codeSigningMetadata;\n    }\n\n    return configWithDefaultValues;\n  }\n\n  // Fill in the static config\n  function getContextConfig(config: SplitConfigs) {\n    return ensureConfigHasDefaultValues({\n      projectRoot,\n      exp: config.expo,\n      pkg: packageJson,\n      skipSDKVersionRequirement: true,\n      paths,\n      packageJsonPath,\n    }).exp;\n  }\n\n  if (paths.dynamicConfigPath) {\n    // No app.config.json or app.json but app.config.js\n    const { exportedObjectType, config: rawDynamicConfig } = getDynamicConfig(\n      paths.dynamicConfigPath,\n      {\n        projectRoot,\n        staticConfigPath: paths.staticConfigPath,\n        packageJsonPath,\n        config: getContextConfig(staticConfig),\n      }\n    );\n    // Allow for the app.config.js to `export default null;`\n    // Use `dynamicConfigPath` to detect if a dynamic config exists.\n    const dynamicConfig = reduceExpoObject(rawDynamicConfig) || {};\n    return fillAndReturnConfig(dynamicConfig, exportedObjectType);\n  }\n\n  // No app.config.js but json or no config\n  return fillAndReturnConfig(staticConfig || {}, null);\n}\n\nexport function getPackageJson(projectRoot: string): PackageJSONConfig {\n  const [pkg] = getPackageJsonAndPath(projectRoot);\n  return pkg;\n}\n\nfunction getPackageJsonAndPath(projectRoot: string): [PackageJSONConfig, string] {\n  const packageJsonPath = getRootPackageJsonPath(projectRoot);\n  return [JsonFile.read(packageJsonPath), packageJsonPath];\n}\n\n/**\n * Get the static and dynamic config paths for a project. Also accounts for custom paths.\n *\n * @param projectRoot\n */\nexport function getConfigFilePaths(projectRoot: string): ConfigFilePaths {\n  return {\n    dynamicConfigPath: getDynamicConfigFilePath(projectRoot),\n    staticConfigPath: getStaticConfigFilePath(projectRoot),\n  };\n}\n\nfunction getDynamicConfigFilePath(projectRoot: string): string | null {\n  for (const fileName of ['app.config.ts', 'app.config.js']) {\n    const configPath = path.join(projectRoot, fileName);\n    if (fs.existsSync(configPath)) {\n      return configPath;\n    }\n  }\n  return null;\n}\n\nfunction getStaticConfigFilePath(projectRoot: string): string | null {\n  for (const fileName of ['app.config.json', 'app.json']) {\n    const configPath = path.join(projectRoot, fileName);\n    if (fs.existsSync(configPath)) {\n      return configPath;\n    }\n  }\n  return null;\n}\n\n/**\n * Attempt to modify an Expo project config.\n * This will only fully work if the project is using static configs only.\n * Otherwise 'warn' | 'fail' will return with a message about why the config couldn't be updated.\n * The potentially modified config object will be returned for testing purposes.\n *\n * @param projectRoot\n * @param modifications modifications to make to an existing config\n * @param readOptions options for reading the current config file\n * @param writeOptions If true, the static config file will not be rewritten\n */\nexport async function modifyConfigAsync(\n  projectRoot: string,\n  modifications: Partial<ExpoConfig>,\n  readOptions: GetConfigOptions = {},\n  writeOptions: WriteConfigOptions = {}\n): Promise<{\n  type: 'success' | 'warn' | 'fail';\n  message?: string;\n  config: AppJSONConfig | null;\n}> {\n  const config = getConfig(projectRoot, readOptions);\n  if (config.dynamicConfigPath) {\n    // We cannot automatically write to a dynamic config.\n    /* Currently we should just use the safest approach possible, informing the user that they'll need to manually modify their dynamic config.\n\n    if (config.staticConfigPath) {\n      // Both a dynamic and a static config exist.\n      if (config.dynamicConfigObjectType === 'function') {\n        // The dynamic config exports a function, this means it possibly extends the static config.\n      } else {\n        // Dynamic config ignores the static config, there isn't a reason to automatically write to it.\n        // Instead we should warn the user to add values to their dynamic config.\n      }\n    }\n    */\n    return {\n      type: 'warn',\n      message: `Cannot automatically write to dynamic config at: ${path.relative(\n        projectRoot,\n        config.dynamicConfigPath\n      )}`,\n      config: null,\n    };\n  } else if (config.staticConfigPath) {\n    // Static with no dynamic config, this means we can append to the config automatically.\n    let outputConfig: AppJSONConfig;\n    // If the config has an expo object (app.json) then append the options to that object.\n    if (config.rootConfig.expo) {\n      outputConfig = {\n        ...config.rootConfig,\n        expo: { ...config.rootConfig.expo, ...modifications },\n      };\n    } else {\n      // Otherwise (app.config.json) just add the config modification to the top most level.\n      outputConfig = { ...config.rootConfig, ...modifications };\n    }\n    if (!writeOptions.dryRun) {\n      await JsonFile.writeAsync(config.staticConfigPath, outputConfig, { json5: false });\n    }\n    return { type: 'success', config: outputConfig };\n  }\n\n  return { type: 'fail', message: 'No config exists', config: null };\n}\n\nfunction ensureConfigHasDefaultValues({\n  projectRoot,\n  exp,\n  pkg,\n  paths,\n  packageJsonPath,\n  skipSDKVersionRequirement = false,\n}: {\n  projectRoot: string;\n  exp: Partial<ExpoConfig> | null;\n  pkg: JSONObject;\n  skipSDKVersionRequirement?: boolean;\n  paths?: ConfigFilePaths;\n  packageJsonPath?: string;\n}): { exp: ExpoConfig; pkg: PackageJSONConfig } {\n  if (!exp) {\n    exp = {};\n  }\n  exp = withInternal(exp as any, {\n    projectRoot,\n    ...(paths ?? {}),\n    packageJsonPath,\n  });\n  // Defaults for package.json fields\n  const pkgName = typeof pkg.name === 'string' ? pkg.name : path.basename(projectRoot);\n  const pkgVersion = typeof pkg.version === 'string' ? pkg.version : '1.0.0';\n\n  const pkgWithDefaults = { ...pkg, name: pkgName, version: pkgVersion };\n\n  // Defaults for app.json/app.config.js fields\n  const name = exp.name ?? pkgName;\n  const slug = exp.slug ?? slugify(name.toLowerCase());\n  const version = exp.version ?? pkgVersion;\n  let description = exp.description;\n  if (!description && typeof pkg.description === 'string') {\n    description = pkg.description;\n  }\n\n  const expWithDefaults = { ...exp, name, slug, version, description };\n\n  let sdkVersion;\n  try {\n    sdkVersion = getExpoSDKVersion(projectRoot, expWithDefaults);\n  } catch (error) {\n    if (!skipSDKVersionRequirement) throw error;\n  }\n\n  let platforms = exp.platforms;\n  if (!platforms) {\n    platforms = getSupportedPlatforms(projectRoot);\n  }\n\n  return {\n    exp: { ...expWithDefaults, sdkVersion, platforms },\n    pkg: pkgWithDefaults,\n  };\n}\n\nconst DEFAULT_BUILD_PATH = `web-build`;\n\nexport function getWebOutputPath(config: { [key: string]: any } = {}): string {\n  if (process.env.WEBPACK_BUILD_OUTPUT_PATH) {\n    return process.env.WEBPACK_BUILD_OUTPUT_PATH;\n  }\n  const expo = config.expo || config || {};\n  return expo?.web?.build?.output || DEFAULT_BUILD_PATH;\n}\n\nexport function getNameFromConfig(exp: Record<string, any> = {}): {\n  appName?: string;\n  webName?: string;\n} {\n  // For RN CLI support\n  const appManifest = exp.expo || exp;\n  const { web = {} } = appManifest;\n\n  // rn-cli apps use a displayName value as well.\n  const appName = exp.displayName || appManifest.displayName || appManifest.name;\n  const webName = web.name || appName;\n\n  return {\n    appName,\n    webName,\n  };\n}\n\nexport function getDefaultTarget(\n  projectRoot: string,\n  exp?: Pick<ExpoConfig, 'sdkVersion'>\n): ProjectTarget {\n  exp ??= getConfig(projectRoot, { skipSDKVersionRequirement: true }).exp;\n\n  // before SDK 37, always default to managed to preserve previous behavior\n  if (exp.sdkVersion && exp.sdkVersion !== 'UNVERSIONED' && semver.lt(exp.sdkVersion, '37.0.0')) {\n    return 'managed';\n  }\n  return isBareWorkflowProject(projectRoot) ? 'bare' : 'managed';\n}\n\nfunction isBareWorkflowProject(projectRoot: string): boolean {\n  const [pkg] = getPackageJsonAndPath(projectRoot);\n\n  // TODO: Drop this\n  if (pkg.dependencies && pkg.dependencies.expokit) {\n    return false;\n  }\n\n  const xcodeprojFiles = globSync('ios/**/*.xcodeproj', {\n    absolute: true,\n    cwd: projectRoot,\n  });\n  if (xcodeprojFiles.length) {\n    return true;\n  }\n  const gradleFiles = globSync('android/**/*.gradle', {\n    absolute: true,\n    cwd: projectRoot,\n  });\n  if (gradleFiles.length) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Return a useful name describing the project config.\n * - dynamic: app.config.js\n * - static: app.json\n * - custom path app config relative to root folder\n * - both: app.config.js or app.json\n */\nexport function getProjectConfigDescription(projectRoot: string): string {\n  const paths = getConfigFilePaths(projectRoot);\n  return getProjectConfigDescriptionWithPaths(projectRoot, paths);\n}\n\n/**\n * Returns a string describing the configurations used for the given project root.\n * Will return null if no config is found.\n *\n * @param projectRoot\n * @param projectConfig\n */\nexport function getProjectConfigDescriptionWithPaths(\n  projectRoot: string,\n  projectConfig: ConfigFilePaths\n): string {\n  if (projectConfig.dynamicConfigPath) {\n    const relativeDynamicConfigPath = path.relative(projectRoot, projectConfig.dynamicConfigPath);\n    if (projectConfig.staticConfigPath) {\n      return `${relativeDynamicConfigPath} or ${path.relative(\n        projectRoot,\n        projectConfig.staticConfigPath\n      )}`;\n    }\n    return relativeDynamicConfigPath;\n  } else if (projectConfig.staticConfigPath) {\n    return path.relative(projectRoot, projectConfig.staticConfigPath);\n  }\n  // If a config doesn't exist, our tooling will generate a static app.json\n  return 'app.json';\n}\n\nexport * from './Config.types';\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}