{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkUsers = checkUsers;\nexports.promptForUser = promptForUser;\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function _cliTools() {\n    return data;\n  };\n  return data;\n}\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n  _execa = function _execa() {\n    return data;\n  };\n  return data;\n}\nfunction _prompts() {\n  var data = _interopRequireDefault(require(\"prompts\"));\n  _prompts = function _prompts() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction checkUsers(device, adbPath) {\n  try {\n    var adbArgs = ['-s', device, 'shell', 'pm', 'list', 'users'];\n    _cliTools().logger.debug(`Checking users on \"${device}\"...`);\n    var _execa$default$sync = _execa().default.sync(adbPath, adbArgs, {\n        encoding: 'utf-8'\n      }),\n      stdout = _execa$default$sync.stdout;\n    var regex = new RegExp(/^\\s*UserInfo\\{(?<userId>\\d+):(?<userName>.*):(?<userFlags>[0-9a-f]*)}/);\n    var users = [];\n    var lines = stdout.split('\\n');\n    for (var line of lines) {\n      var res = regex.exec(line);\n      if (res === null || res === void 0 ? void 0 : res.groups) {\n        users.push({\n          id: res.groups.userId,\n          name: res.groups.userName\n        });\n      }\n    }\n    if (users.length > 1) {\n      _cliTools().logger.debug(`Available users are:\\n${users.map(function (user) {\n        return `${user.name} - ${user.id}`;\n      }).join('\\n')}`);\n    }\n    return users;\n  } catch (error) {\n    _cliTools().logger.error('Failed to check users of device.', error);\n    return [];\n  }\n}\nfunction promptForUser(_x) {\n  return _promptForUser.apply(this, arguments);\n}\nfunction _promptForUser() {\n  _promptForUser = _asyncToGenerator(function* (users) {\n    var _yield = yield (0, _prompts().default)({\n        type: 'select',\n        name: 'selectedUser',\n        message: 'Which profile would you like to launch your app into?',\n        choices: users.map(function (user) {\n          return {\n            title: user.name,\n            value: user\n          };\n        }),\n        min: 1\n      }),\n      selectedUser = _yield.selectedUser;\n    return selectedUser;\n  });\n  return _promptForUser.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","Object","defineProperty","exports","value","checkUsers","promptForUser","_cliTools","data","_execa","_interopRequireDefault","_prompts","obj","__esModule","default","device","adbPath","adbArgs","logger","debug","_execa$default$sync","sync","encoding","stdout","regex","RegExp","users","lines","split","line","res","exec","groups","push","id","userId","name","userName","length","map","user","join","error","_x","_promptForUser","apply","arguments","_yield","type","message","choices","title","min","selectedUser"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidUsers.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkUsers = checkUsers;\nexports.promptForUser = promptForUser;\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function () {\n    return data;\n  };\n  return data;\n}\nfunction _execa() {\n  const data = _interopRequireDefault(require(\"execa\"));\n  _execa = function () {\n    return data;\n  };\n  return data;\n}\nfunction _prompts() {\n  const data = _interopRequireDefault(require(\"prompts\"));\n  _prompts = function () {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction checkUsers(device, adbPath) {\n  try {\n    const adbArgs = ['-s', device, 'shell', 'pm', 'list', 'users'];\n    _cliTools().logger.debug(`Checking users on \"${device}\"...`);\n    const {\n      stdout\n    } = _execa().default.sync(adbPath, adbArgs, {\n      encoding: 'utf-8'\n    });\n    const regex = new RegExp(/^\\s*UserInfo\\{(?<userId>\\d+):(?<userName>.*):(?<userFlags>[0-9a-f]*)}/);\n    const users = [];\n    const lines = stdout.split('\\n');\n    for (const line of lines) {\n      const res = regex.exec(line);\n      if (res === null || res === void 0 ? void 0 : res.groups) {\n        users.push({\n          id: res.groups.userId,\n          name: res.groups.userName\n        });\n      }\n    }\n    if (users.length > 1) {\n      _cliTools().logger.debug(`Available users are:\\n${users.map(user => `${user.name} - ${user.id}`).join('\\n')}`);\n    }\n    return users;\n  } catch (error) {\n    _cliTools().logger.error('Failed to check users of device.', error);\n    return [];\n  }\n}\nasync function promptForUser(users) {\n  const {\n    selectedUser\n  } = await (0, _prompts().default)({\n    type: 'select',\n    name: 'selectedUser',\n    message: 'Which profile would you like to launch your app into?',\n    choices: users.map(user => ({\n      title: user.name,\n      value: user\n    })),\n    min: 1\n  });\n  return selectedUser;\n}\n\n//# sourceMappingURL=listAndroidUsers.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}