{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _class;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.onMessage = onMessage;\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _childProcess = require(\"child_process\");\nvar _os = require(\"os\");\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _wrapAnsi = _interopRequireDefault(require(\"wrap-ansi\"));\nvar Log = _interopRequireWildcard(require(\"../../../log\"));\nvar _errors = require(\"../../../utils/errors\");\nvar _exit = require(\"../../../utils/exit\");\nvar _simctl = require(\"./simctl\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar SimulatorLogStreamer = function () {\n  function SimulatorLogStreamer(device, resolver) {\n    _classCallCheck(this, SimulatorLogStreamer);\n    this.device = device;\n    this.resolver = resolver;\n    this.childProcess = null;\n    this.off = null;\n  }\n  _createClass(SimulatorLogStreamer, [{\n    key: \"isAttached\",\n    value: function isAttached() {\n      return !!this.childProcess;\n    }\n  }, {\n    key: \"resolvePidAsync\",\n    value: function () {\n      var _resolvePidAsync = _asyncToGenerator(function* () {\n        if (\"pid\" in this.resolver) {\n          return this.resolver.pid;\n        }\n        return getImageNameFromBundleIdentifierAsync(this.device.udid, this.resolver.appId);\n      });\n      function resolvePidAsync() {\n        return _resolvePidAsync.apply(this, arguments);\n      }\n      return resolvePidAsync;\n    }()\n  }, {\n    key: \"attachAsync\",\n    value: function () {\n      var _attachAsync = _asyncToGenerator(function* () {\n        var _this = this;\n        yield this.detachAsync();\n        var pid = yield this.resolvePidAsync();\n        if (!pid) {\n          throw new _errors.CommandError(`Could not find pid for ${this.device.udid}`);\n        }\n        this.childProcess = (0, _childProcess).spawn(\"xcrun\", [\"simctl\", \"spawn\", this.device.udid, \"log\", \"stream\", \"--process\", pid, \"--style\", \"ndjson\", \"--source\", \"--type\", \"log\", \"--no-backtrace\"]);\n        this.childProcess.stdout.on(\"data\", function (data) {\n          var strings = data.toString().split(_os.EOL).map(function (value) {\n            return value.trim();\n          }).filter(function (value) {\n            return value.startsWith(\"{\");\n          });\n          strings.forEach(function (str) {\n            var simLog = parseMessageJson(str);\n            if (!simLog) {\n              return;\n            }\n            onMessage(simLog);\n          });\n        });\n        this.childProcess.on(\"error\", function (_ref) {\n          var message = _ref.message;\n          Log.debug(\"[simctl error]:\", message);\n        });\n        this.off = (0, _exit).installExitHooks(function () {\n          _this.detachAsync.bind(_this);\n        });\n      });\n      function attachAsync() {\n        return _attachAsync.apply(this, arguments);\n      }\n      return attachAsync;\n    }()\n  }, {\n    key: \"detachAsync\",\n    value: function detachAsync() {\n      var _this2 = this;\n      var _obj, ref2;\n      (ref2 = (_obj = this).off) == null ? void 0 : ref2.call(_obj);\n      this.off = null;\n      if (this.childProcess) {\n        return new Promise(function (resolve) {\n          var ref, ref1;\n          (ref = _this2.childProcess) == null ? void 0 : ref.on(\"close\", resolve);\n          (ref1 = _this2.childProcess) == null ? void 0 : ref1.kill();\n          _this2.childProcess = null;\n        });\n      }\n      return Promise.resolve();\n    }\n  }]);\n  return SimulatorLogStreamer;\n}();\n_class = SimulatorLogStreamer;\nSimulatorLogStreamer.cache = [];\nSimulatorLogStreamer.getStreamer = function (device, resolver) {\n  var ref;\n  return (ref = _class.cache.find(function (streamer) {\n    return streamer.device.udid === device.udid;\n  })) != null ? ref : new _class(device, resolver);\n};\nexports.SimulatorLogStreamer = SimulatorLogStreamer;\nfunction parseMessageJson(data) {\n  var stringData = data.toString();\n  try {\n    return JSON.parse(stringData);\n  } catch (_unused) {\n    Log.debug(\"Failed to parse simctl JSON message:\\n\" + stringData);\n  }\n  return null;\n}\nfunction isNetworkLog(simLog) {\n  var ref;\n  return simLog.subsystem === \"com.apple.network\" || simLog.category === \"connection\" || ((ref = simLog.source) == null ? void 0 : ref.image) === \"CFNetwork\";\n}\nfunction isReactLog(simLog) {\n  var ref;\n  return simLog.subsystem === \"com.facebook.react.log\" && ((ref = simLog.source) == null ? void 0 : ref.file) === \"RCTLog.mm\";\n}\nfunction isCoreTelephonyLog(simLog) {\n  return simLog.subsystem === \"com.apple.CoreTelephony\";\n}\nfunction isWebKitLog(simLog) {\n  return simLog.subsystem === \"com.apple.WebKit\";\n}\nfunction isRunningBoardServicesLog(simLog) {\n  return simLog.subsystem === \"com.apple.runningboard\";\n}\nfunction formatMessage(simLog) {\n  var ref;\n  var ref3;\n  var category = _chalk.default.gray(`[${(ref3 = (ref = simLog.source) == null ? void 0 : ref.image) != null ? ref3 : simLog.subsystem}]`);\n  var message = simLog.eventMessage;\n  return (0, _wrapAnsi).default(category + \" \" + message, process.stdout.columns || 80);\n}\nfunction onMessage(simLog) {\n  var hasLogged = false;\n  if (simLog.messageType === \"Error\") {\n    if (!isNetworkLog(simLog) && !isReactLog(simLog) && !isCoreTelephonyLog(simLog) && !isWebKitLog(simLog) && !isRunningBoardServicesLog(simLog)) {\n      hasLogged = true;\n      Log.error(formatMessage(simLog));\n    }\n  } else if (simLog.eventMessage) {\n    var ref;\n    if (((ref = simLog.source) == null ? void 0 : ref.file) || simLog.eventMessage.includes(\"Terminating app due to uncaught exception\")) {\n      hasLogged = true;\n      Log.log(formatMessage(simLog));\n    }\n  }\n  if (!hasLogged) {\n    Log.debug(formatMessage(simLog));\n  } else {}\n}\nfunction getImageNameFromBundleIdentifierAsync(_x, _x2) {\n  return _getImageNameFromBundleIdentifierAsync.apply(this, arguments);\n}\nfunction _getImageNameFromBundleIdentifierAsync() {\n  _getImageNameFromBundleIdentifierAsync = _asyncToGenerator(function* (udid, bundleIdentifier) {\n    var containerPath = yield (0, _simctl).getContainerPathAsync({\n      udid: udid\n    }, {\n      appId: bundleIdentifier\n    });\n    if (containerPath) {\n      return getImageNameFromContainerPath(containerPath);\n    }\n    return null;\n  });\n  return _getImageNameFromBundleIdentifierAsync.apply(this, arguments);\n}\nfunction getImageNameFromContainerPath(binaryPath) {\n  return _path.default.basename(binaryPath).split(\".\")[0];\n}","map":{"version":3,"names":["_asyncToGenerator","require","_classCallCheck","_createClass","_class","onMessage","_chalk","_interopRequireDefault","_childProcess","_os","_path","_wrapAnsi","Log","_interopRequireWildcard","_errors","_exit","_simctl","SimulatorLogStreamer","device","resolver","childProcess","off","key","value","isAttached","_resolvePidAsync","pid","getImageNameFromBundleIdentifierAsync","udid","appId","resolvePidAsync","apply","arguments","_attachAsync","_this","detachAsync","CommandError","spawn","stdout","on","data","strings","toString","split","EOL","map","trim","filter","startsWith","forEach","str","simLog","parseMessageJson","_ref","message","debug","installExitHooks","bind","attachAsync","_this2","_obj","ref2","call","Promise","resolve","ref","ref1","kill","cache","getStreamer","find","streamer","stringData","JSON","parse","_unused","isNetworkLog","subsystem","category","source","image","isReactLog","file","isCoreTelephonyLog","isWebKitLog","isRunningBoardServicesLog","formatMessage","ref3","default","gray","eventMessage","process","columns","hasLogged","messageType","error","includes","log","_x","_x2","_getImageNameFromBundleIdentifierAsync","bundleIdentifier","containerPath","getContainerPathAsync","getImageNameFromContainerPath","binaryPath","basename"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\platforms\\ios\\simctlLogging.ts"],"sourcesContent":["import chalk from 'chalk';\nimport { ChildProcessWithoutNullStreams, spawn } from 'child_process';\nimport { EOL } from 'os';\nimport path from 'path';\nimport wrapAnsi from 'wrap-ansi';\n\nimport * as Log from '../../../log';\nimport { CommandError } from '../../../utils/errors';\nimport { installExitHooks } from '../../../utils/exit';\nimport { Device, getContainerPathAsync } from './simctl';\n\nexport type SimControlLog = {\n  /**\n   * 258753568922927108\n   */\n  traceID: number;\n  /**\n   *\n   * \"Connection 1: done\",\n   */\n  eventMessage: string;\n  /**\n   * \"logEvent\" | \"activityCreateEvent\",\n   */\n  eventType: 'logEvent' | 'activityCreateEvent';\n  source: null | {\n    /**\n     * 'RCTDefaultLogFunction_block_invoke' | '__TCC_CRASHING_DUE_TO_PRIVACY_VIOLATION__'\n     */\n    symbol: string;\n    line: number;\n    /**\n     * 'TCC' | 'Security' | 'CFNetwork' | 'libnetwork.dylib' | 'myapp'\n     *\n     * TCC is apple sys, it means \"Transparency, Consent, and Control\"\n     */\n    image: string;\n    /**\n     * 'RCTLog.mm' | ''\n     */\n    file: string;\n  };\n  /**\n   * \"Connection %llu: done\"\n   */\n  formatString: string;\n  /**\n   * 0\n   */\n  activityIdentifier: number;\n  subsystem:\n    | ''\n    | 'com.apple.network'\n    | 'com.facebook.react.log'\n    | 'com.apple.TCC'\n    | 'com.apple.CoreTelephony'\n    | 'com.apple.WebKit'\n    | 'com.apple.runningboard'\n    | string;\n  category: '' | 'access' | 'connection' | 'plugin';\n  /**\n   * \"2021-03-15 15:36:28.004331-0700\"\n   */\n  timestamp: string;\n  /**\n   * 706567072091713\n   */\n  machTimestamp: number;\n  /**\n   * \"Default\"\n   */\n  messageType: 'Default' | 'Error';\n  /**\n   * 15192\n   */\n  processID: number;\n};\n\ntype ProcessResolver =\n  | {\n      pid: string;\n    }\n  | {\n      appId: string;\n    };\n\nexport class SimulatorLogStreamer {\n  private childProcess: ChildProcessWithoutNullStreams | null = null;\n\n  static cache: SimulatorLogStreamer[] = [];\n\n  static getStreamer = (device: Pick<Device, 'udid'>, resolver: ProcessResolver) => {\n    return (\n      SimulatorLogStreamer.cache.find((streamer) => streamer.device.udid === device.udid) ??\n      new SimulatorLogStreamer(device, resolver)\n    );\n  };\n\n  constructor(public device: Pick<Device, 'udid'>, public resolver: ProcessResolver) {}\n\n  isAttached() {\n    return !!this.childProcess;\n  }\n\n  async resolvePidAsync() {\n    if ('pid' in this.resolver) {\n      return this.resolver.pid;\n    }\n    return getImageNameFromBundleIdentifierAsync(this.device.udid, this.resolver.appId);\n  }\n\n  async attachAsync() {\n    await this.detachAsync();\n\n    const pid = await this.resolvePidAsync();\n\n    if (!pid) {\n      throw new CommandError(`Could not find pid for ${this.device.udid}`);\n    }\n\n    // xcrun simctl spawn booted log stream --process --style json\n    this.childProcess = spawn('xcrun', [\n      'simctl',\n      'spawn',\n      this.device.udid,\n      'log',\n      'stream',\n      '--process',\n      pid,\n      // ndjson provides a better format than json.\n      '--style',\n      'ndjson',\n      // Provide the source so we can filter logs better\n      '--source',\n      // log, activity, trace -- activity was related to layouts, trace didn't work, so that leaves log.\n      // Passing nothing combines all three, but we don't use activity.\n      '--type',\n      'log',\n      // backtrace doesn't seem very useful in basic cases.\n      // TODO: Maybe we can format as a stack trace for native errors.\n      '--no-backtrace',\n    ]);\n\n    this.childProcess.stdout.on('data', (data: Buffer) => {\n      // Sometimes more than one chunk comes at a time, here we split by system newline,\n      // then trim and filter.\n      const strings = data\n        .toString()\n        .split(EOL)\n        .map((value) => value.trim())\n        // This filters out the first log which says something like:\n        // Filtering the log data using \"process BEGINSWITH[cd] \"my-app\" AND type == 1024\"\n        .filter((value) => value.startsWith('{'));\n\n      strings.forEach((str) => {\n        const simLog = parseMessageJson(str);\n        if (!simLog) {\n          return;\n        }\n        onMessage(simLog);\n      });\n    });\n\n    this.childProcess.on('error', ({ message }) => {\n      Log.debug('[simctl error]:', message);\n    });\n\n    this.off = installExitHooks(() => {\n      this.detachAsync.bind(this);\n    });\n  }\n\n  private off: (() => void) | null = null;\n\n  detachAsync() {\n    this.off?.();\n    this.off = null;\n    if (this.childProcess) {\n      return new Promise<void>((resolve) => {\n        this.childProcess?.on('close', resolve);\n        this.childProcess?.kill();\n        this.childProcess = null;\n      });\n    }\n    return Promise.resolve();\n  }\n}\n\nfunction parseMessageJson(data: string) {\n  const stringData = data.toString();\n  try {\n    return JSON.parse(stringData) as SimControlLog;\n  } catch {\n    Log.debug('Failed to parse simctl JSON message:\\n' + stringData);\n  }\n  return null;\n}\n\n// There are a lot of networking logs in RN that aren't relevant to the user.\nfunction isNetworkLog(simLog: SimControlLog): boolean {\n  return (\n    simLog.subsystem === 'com.apple.network' ||\n    simLog.category === 'connection' ||\n    simLog.source?.image === 'CFNetwork'\n  );\n}\n\nfunction isReactLog(simLog: SimControlLog): boolean {\n  return simLog.subsystem === 'com.facebook.react.log' && simLog.source?.file === 'RCTLog.mm';\n}\n\n// It's not clear what these are but they aren't very useful.\n// (The connection to service on pid 0 named com.apple.commcenter.coretelephony.xpc was invalidated)\n// We can add them later if need.\nfunction isCoreTelephonyLog(simLog: SimControlLog): boolean {\n  // [CoreTelephony] Updating selectors failed with: Error Domain=NSCocoaErrorDomain Code=4099\n  // \"The connection to service on pid 0 named com.apple.commcenter.coretelephony.xpc was invalidated.\" UserInfo={NSDebugDescription=The connection to service on pid 0 named com.apple.commcenter.coretelephony.xpc was invalidated.}\n  return simLog.subsystem === 'com.apple.CoreTelephony';\n}\n\n// https://stackoverflow.com/a/65313219/4047926\nfunction isWebKitLog(simLog: SimControlLog): boolean {\n  // [WebKit] 0x1143ca500 - ProcessAssertion: Failed to acquire RBS Background assertion 'WebProcess Background Assertion' for process with PID 27084, error: Error Domain=RBSAssertionErrorDomain Code=3 \"Target is not running or required target\n  // entitlement is missing\" UserInfo={RBSAssertionAttribute=<RBSDomainAttribute| domain:\"com.apple.webkit\" name:\"Background\" sourceEnvironment:\"(null)\">, NSLocalizedFailureReason=Target is not running or required target entitlement is missing}\n  return simLog.subsystem === 'com.apple.WebKit';\n}\n\n// Similar to WebKit logs\nfunction isRunningBoardServicesLog(simLog: SimControlLog): boolean {\n  // [RunningBoardServices] Error acquiring assertion: <Error Domain=RBSAssertionErrorDomain Code=3 \"Target is not running or required target entitlement is missing\" UserInfo={RBSAssertionAttribute=<RBSDomainAttribute| domain:\"com.apple.webkit\"\n  // name:\"Background\" sourceEnvironment:\"(null)\">, NSLocalizedFailureReason=Target is not running or required target entitlement is missing}>\n  return simLog.subsystem === 'com.apple.runningboard';\n}\n\nfunction formatMessage(simLog: SimControlLog): string {\n  // TODO: Maybe change \"TCC\" to \"Consent\" or \"System\".\n  const category = chalk.gray(`[${simLog.source?.image ?? simLog.subsystem}]`);\n  const message = simLog.eventMessage;\n  return wrapAnsi(category + ' ' + message, process.stdout.columns || 80);\n}\n\nexport function onMessage(simLog: SimControlLog) {\n  let hasLogged = false;\n\n  if (simLog.messageType === 'Error') {\n    if (\n      // Hide all networking errors which are mostly useless.\n      !isNetworkLog(simLog) &&\n      // Showing React errors will result in duplicate messages.\n      !isReactLog(simLog) &&\n      !isCoreTelephonyLog(simLog) &&\n      !isWebKitLog(simLog) &&\n      !isRunningBoardServicesLog(simLog)\n    ) {\n      hasLogged = true;\n      // Sim: This app has crashed because it attempted to access privacy-sensitive data without a usage description.  The app's Info.plist must contain an NSCameraUsageDescription key with a string value explaining to the user how the app uses this data.\n      Log.error(formatMessage(simLog));\n    }\n  } else if (simLog.eventMessage) {\n    // If the source has a file (i.e. not a system log).\n    if (\n      simLog.source?.file ||\n      simLog.eventMessage.includes('Terminating app due to uncaught exception')\n    ) {\n      hasLogged = true;\n      Log.log(formatMessage(simLog));\n    }\n  }\n\n  if (!hasLogged) {\n    Log.debug(formatMessage(simLog));\n  } else {\n    // console.log('DATA:', JSON.stringify(simLog));\n  }\n}\n\n/**\n *\n * @param udid\n * @param bundleIdentifier\n * @returns Image name like `Exponent` and `null` when the app is not installed on the provided simulator.\n */\nasync function getImageNameFromBundleIdentifierAsync(\n  udid: string,\n  bundleIdentifier: string\n): Promise<string | null> {\n  const containerPath = await getContainerPathAsync({ udid }, { appId: bundleIdentifier });\n\n  if (containerPath) {\n    return getImageNameFromContainerPath(containerPath);\n  }\n  return null;\n}\n\nfunction getImageNameFromContainerPath(binaryPath: string): string {\n  return path.basename(binaryPath).split('.')[0];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}