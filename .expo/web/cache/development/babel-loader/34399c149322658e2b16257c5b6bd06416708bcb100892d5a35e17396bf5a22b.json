{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveExtraDependenciesAsync = exports.getBuildPropertiesAsync = void 0;\nvar config_1 = require(\"@expo/config\");\nvar path_1 = __importDefault(require(\"path\"));\nvar mergeLinkingOptions_1 = require(\"./mergeLinkingOptions\");\nfunction getBuildPropertiesAsync() {\n  return _getBuildPropertiesAsync.apply(this, arguments);\n}\nfunction _getBuildPropertiesAsync() {\n  _getBuildPropertiesAsync = _asyncToGenerator(function* () {\n    var _config$plugins, _config$plugins$find;\n    var projectRoot = path_1.default.dirname(mergeLinkingOptions_1.projectPackageJsonPath);\n    var _yield = yield (0, config_1.getConfig)(projectRoot, {\n        skipSDKVersionRequirement: true\n      }),\n      config = _yield.exp;\n    var buildPropertiesPlugin = (_config$plugins = config.plugins) == null ? void 0 : (_config$plugins$find = _config$plugins.find(function (item) {\n      return item[0] === 'expo-build-properties';\n    })) == null ? void 0 : _config$plugins$find[1];\n    return buildPropertiesPlugin != null ? buildPropertiesPlugin : {};\n  });\n  return _getBuildPropertiesAsync.apply(this, arguments);\n}\nexports.getBuildPropertiesAsync = getBuildPropertiesAsync;\nfunction resolveExtraDependenciesAsync() {\n  return _resolveExtraDependenciesAsync.apply(this, arguments);\n}\nfunction _resolveExtraDependenciesAsync() {\n  _resolveExtraDependenciesAsync = _asyncToGenerator(function* () {\n    var _buildProps$android$e, _buildProps$android, _buildProps$ios$extra, _buildProps$ios;\n    var buildProps = yield getBuildPropertiesAsync();\n    return {\n      androidMavenRepos: (_buildProps$android$e = (_buildProps$android = buildProps.android) == null ? void 0 : _buildProps$android.extraMavenRepos) != null ? _buildProps$android$e : [],\n      iosPods: (_buildProps$ios$extra = (_buildProps$ios = buildProps.ios) == null ? void 0 : _buildProps$ios.extraPods) != null ? _buildProps$ios$extra : {}\n    };\n  });\n  return _resolveExtraDependenciesAsync.apply(this, arguments);\n}\nexports.resolveExtraDependenciesAsync = resolveExtraDependenciesAsync;","map":{"version":3,"names":["config_1","require","path_1","__importDefault","mergeLinkingOptions_1","getBuildPropertiesAsync","_getBuildPropertiesAsync","apply","arguments","_asyncToGenerator","_config$plugins","_config$plugins$find","projectRoot","default","dirname","projectPackageJsonPath","_yield","getConfig","skipSDKVersionRequirement","config","exp","buildPropertiesPlugin","plugins","find","item","exports","resolveExtraDependenciesAsync","_resolveExtraDependenciesAsync","_buildProps$android$e","_buildProps$android","_buildProps$ios$extra","_buildProps$ios","buildProps","androidMavenRepos","android","extraMavenRepos","iosPods","ios","extraPods"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\expo-modules-autolinking\\src\\autolinking\\extraDependencies.ts"],"sourcesContent":["import { getConfig } from '@expo/config';\nimport path from 'path';\n\nimport { projectPackageJsonPath } from './mergeLinkingOptions';\n\ninterface AndroidMavenRepository {\n  url: string;\n}\n\ninterface IosPod {\n  name: string;\n  version?: string;\n  configurations?: string[];\n  modular_headers?: boolean;\n  source?: string;\n  path?: string;\n  podspec?: string;\n  testspecs?: string[];\n  git?: string;\n  branch?: string;\n  tag?: string;\n  commit?: string;\n}\n\ninterface ExtraDependencies {\n  androidMavenRepos: AndroidMavenRepository[];\n  iosPods?: IosPod[];\n}\n\n/**\n * Gets the `expo-build-properties` settings from the app config.\n */\nexport async function getBuildPropertiesAsync(): Promise<Record<string, any>> {\n  const projectRoot = path.dirname(projectPackageJsonPath);\n  const { exp: config } = await getConfig(projectRoot, { skipSDKVersionRequirement: true });\n  const buildPropertiesPlugin = config.plugins?.find(\n    (item) => item[0] === 'expo-build-properties'\n  )?.[1];\n  return buildPropertiesPlugin ?? {};\n}\n\n/**\n * Resolves the extra dependencies from `expo-build-properties` settings.\n */\nexport async function resolveExtraDependenciesAsync(): Promise<Partial<ExtraDependencies>> {\n  const buildProps = await getBuildPropertiesAsync();\n  return {\n    androidMavenRepos: buildProps.android?.extraMavenRepos ?? [],\n    iosPods: buildProps.ios?.extraPods ?? {},\n  };\n}\n"],"mappings":";;;;;;;;;;;;AAAA,IAAAA,QAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAC,eAAA,CAAAF,OAAA;AAEA,IAAAG,qBAAA,GAAAH,OAAA;AAA+D,SA6BzCI,uBAAuBA,CAAA;EAAA,OAAAC,wBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,yBAAA;EAAAA,wBAAA,GAAAG,iBAAA,CAAtC,aAAsC;IAAA,IAAAC,eAAA,EAAAC,oBAAA;IAC3C,IAAMC,WAAW,GAAGV,MAAA,CAAAW,OAAI,CAACC,OAAO,CAACV,qBAAA,CAAAW,sBAAsB,CAAC;IACxD,IAAAC,MAAA,SAA8B,IAAAhB,QAAA,CAAAiB,SAAS,EAACL,WAAW,EAAE;QAAEM,yBAAyB,EAAE;MAAI,CAAE,CAAC;MAA5EC,MAAM,GAAAH,MAAA,CAAXI,GAAG;IACX,IAAMC,qBAAqB,IAAAX,eAAA,GAAGS,MAAM,CAACG,OAAO,sBAAAX,oBAAA,GAAdD,eAAA,CAAgBa,IAAI,CAChD,UAACC,IAAI;MAAA,OAAKA,IAAI,CAAC,CAAC,CAAC,KAAK,uBAAuB;IAAA,EAC9C,qBAF6Bb,oBAAA,CAE1B,CAAC,CAAC;IACN,OAAOU,qBAAqB,WAArBA,qBAAqB,GAAI,EAAE;EACpC,CAAC;EAAA,OAAAf,wBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAPDiB,OAAA,CAAApB,uBAAA,GAAAA,uBAAA;AAOC,SAKqBqB,6BAA6BA,CAAA;EAAA,OAAAC,8BAAA,CAAApB,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAmB,+BAAA;EAAAA,8BAAA,GAAAlB,iBAAA,CAA5C,aAA4C;IAAA,IAAAmB,qBAAA,EAAAC,mBAAA,EAAAC,qBAAA,EAAAC,eAAA;IACjD,IAAMC,UAAU,SAAS3B,uBAAuB,EAAE;IAClD,OAAO;MACL4B,iBAAiB,GAAAL,qBAAA,IAAAC,mBAAA,GAAEG,UAAU,CAACE,OAAO,qBAAlBL,mBAAA,CAAoBM,eAAe,YAAAP,qBAAA,GAAI,EAAE;MAC5DQ,OAAO,GAAAN,qBAAA,IAAAC,eAAA,GAAEC,UAAU,CAACK,GAAG,qBAAdN,eAAA,CAAgBO,SAAS,YAAAR,qBAAA,GAAI;KACvC;EACH,CAAC;EAAA,OAAAH,8BAAA,CAAApB,KAAA,OAAAC,SAAA;AAAA;AANDiB,OAAA,CAAAC,6BAAA,GAAAA,6BAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}