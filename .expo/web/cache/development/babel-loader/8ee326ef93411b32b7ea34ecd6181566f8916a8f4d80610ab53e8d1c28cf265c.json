{"ast":null,"code":"var stringify = function stringify(cst) {\n  return 'type' in cst ? stringifyToken(cst) : stringifyItem(cst);\n};\nfunction stringifyToken(token) {\n  switch (token.type) {\n    case 'block-scalar':\n      {\n        var res = '';\n        for (var tok of token.props) res += stringifyToken(tok);\n        return res + token.source;\n      }\n    case 'block-map':\n    case 'block-seq':\n      {\n        var _res = '';\n        for (var item of token.items) _res += stringifyItem(item);\n        return _res;\n      }\n    case 'flow-collection':\n      {\n        var _res2 = token.start.source;\n        for (var _item of token.items) _res2 += stringifyItem(_item);\n        for (var st of token.end) _res2 += st.source;\n        return _res2;\n      }\n    case 'document':\n      {\n        var _res3 = stringifyItem(token);\n        if (token.end) for (var _st of token.end) _res3 += _st.source;\n        return _res3;\n      }\n    default:\n      {\n        var _res4 = token.source;\n        if ('end' in token && token.end) for (var _st2 of token.end) _res4 += _st2.source;\n        return _res4;\n      }\n  }\n}\nfunction stringifyItem(_ref) {\n  var start = _ref.start,\n    key = _ref.key,\n    sep = _ref.sep,\n    value = _ref.value;\n  var res = '';\n  for (var st of start) res += st.source;\n  if (key) res += stringifyToken(key);\n  if (sep) for (var _st3 of sep) res += _st3.source;\n  if (value) res += stringifyToken(value);\n  return res;\n}\nexport { stringify };","map":{"version":3,"names":["stringify","cst","stringifyToken","stringifyItem","token","type","res","tok","props","source","item","items","start","st","end","_ref","key","sep","value"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/browser/dist/parse/cst-stringify.js"],"sourcesContent":["/**\n * Stringify a CST document, token, or collection item\n *\n * Fair warning: This applies no validation whatsoever, and\n * simply concatenates the sources in their logical order.\n */\nconst stringify = (cst) => 'type' in cst ? stringifyToken(cst) : stringifyItem(cst);\nfunction stringifyToken(token) {\n    switch (token.type) {\n        case 'block-scalar': {\n            let res = '';\n            for (const tok of token.props)\n                res += stringifyToken(tok);\n            return res + token.source;\n        }\n        case 'block-map':\n        case 'block-seq': {\n            let res = '';\n            for (const item of token.items)\n                res += stringifyItem(item);\n            return res;\n        }\n        case 'flow-collection': {\n            let res = token.start.source;\n            for (const item of token.items)\n                res += stringifyItem(item);\n            for (const st of token.end)\n                res += st.source;\n            return res;\n        }\n        case 'document': {\n            let res = stringifyItem(token);\n            if (token.end)\n                for (const st of token.end)\n                    res += st.source;\n            return res;\n        }\n        default: {\n            let res = token.source;\n            if ('end' in token && token.end)\n                for (const st of token.end)\n                    res += st.source;\n            return res;\n        }\n    }\n}\nfunction stringifyItem({ start, key, sep, value }) {\n    let res = '';\n    for (const st of start)\n        res += st.source;\n    if (key)\n        res += stringifyToken(key);\n    if (sep)\n        for (const st of sep)\n            res += st.source;\n    if (value)\n        res += stringifyToken(value);\n    return res;\n}\n\nexport { stringify };\n"],"mappings":"AAMA,IAAMA,SAAS,GAAG,SAAZA,SAASA,CAAIC,GAAG;EAAA,OAAK,MAAM,IAAIA,GAAG,GAAGC,cAAc,CAACD,GAAG,CAAC,GAAGE,aAAa,CAACF,GAAG,CAAC;AAAA;AACnF,SAASC,cAAcA,CAACE,KAAK,EAAE;EAC3B,QAAQA,KAAK,CAACC,IAAI;IACd,KAAK,cAAc;MAAE;QACjB,IAAIC,GAAG,GAAG,EAAE;QACZ,KAAK,IAAMC,GAAG,IAAIH,KAAK,CAACI,KAAK,EACzBF,GAAG,IAAIJ,cAAc,CAACK,GAAG,CAAC;QAC9B,OAAOD,GAAG,GAAGF,KAAK,CAACK,MAAM;MAC7B;IACA,KAAK,WAAW;IAChB,KAAK,WAAW;MAAE;QACd,IAAIH,IAAG,GAAG,EAAE;QACZ,KAAK,IAAMI,IAAI,IAAIN,KAAK,CAACO,KAAK,EAC1BL,IAAG,IAAIH,aAAa,CAACO,IAAI,CAAC;QAC9B,OAAOJ,IAAG;MACd;IACA,KAAK,iBAAiB;MAAE;QACpB,IAAIA,KAAG,GAAGF,KAAK,CAACQ,KAAK,CAACH,MAAM;QAC5B,KAAK,IAAMC,KAAI,IAAIN,KAAK,CAACO,KAAK,EAC1BL,KAAG,IAAIH,aAAa,CAACO,KAAI,CAAC;QAC9B,KAAK,IAAMG,EAAE,IAAIT,KAAK,CAACU,GAAG,EACtBR,KAAG,IAAIO,EAAE,CAACJ,MAAM;QACpB,OAAOH,KAAG;MACd;IACA,KAAK,UAAU;MAAE;QACb,IAAIA,KAAG,GAAGH,aAAa,CAACC,KAAK,CAAC;QAC9B,IAAIA,KAAK,CAACU,GAAG,EACT,KAAK,IAAMD,GAAE,IAAIT,KAAK,CAACU,GAAG,EACtBR,KAAG,IAAIO,GAAE,CAACJ,MAAM;QACxB,OAAOH,KAAG;MACd;IACA;MAAS;QACL,IAAIA,KAAG,GAAGF,KAAK,CAACK,MAAM;QACtB,IAAI,KAAK,IAAIL,KAAK,IAAIA,KAAK,CAACU,GAAG,EAC3B,KAAK,IAAMD,IAAE,IAAIT,KAAK,CAACU,GAAG,EACtBR,KAAG,IAAIO,IAAE,CAACJ,MAAM;QACxB,OAAOH,KAAG;MACd;EACJ;AACJ;AACA,SAASH,aAAaA,CAAAY,IAAA,EAA6B;EAAA,IAA1BH,KAAK,GAAAG,IAAA,CAALH,KAAK;IAAEI,GAAG,GAAAD,IAAA,CAAHC,GAAG;IAAEC,GAAG,GAAAF,IAAA,CAAHE,GAAG;IAAEC,KAAK,GAAAH,IAAA,CAALG,KAAK;EAC3C,IAAIZ,GAAG,GAAG,EAAE;EACZ,KAAK,IAAMO,EAAE,IAAID,KAAK,EAClBN,GAAG,IAAIO,EAAE,CAACJ,MAAM;EACpB,IAAIO,GAAG,EACHV,GAAG,IAAIJ,cAAc,CAACc,GAAG,CAAC;EAC9B,IAAIC,GAAG,EACH,KAAK,IAAMJ,IAAE,IAAII,GAAG,EAChBX,GAAG,IAAIO,IAAE,CAACJ,MAAM;EACxB,IAAIS,KAAK,EACLZ,GAAG,IAAIJ,cAAc,CAACgB,KAAK,CAAC;EAChC,OAAOZ,GAAG;AACd;AAEA,SAASN,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}