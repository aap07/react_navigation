{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getVersionCode = getVersionCode;\nexports.getVersionName = getVersionName;\nexports.setMinBuildScriptExtVersion = setMinBuildScriptExtVersion;\nexports.setVersionCode = setVersionCode;\nexports.setVersionName = setVersionName;\nexports.withVersion = exports.withBuildScriptExtMinimumVersion = void 0;\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n  _warnings = function _warnings() {\n    return data;\n  };\n  return data;\n}\nvar withVersion = function withVersion(config) {\n  return (0, _androidPlugins().withAppBuildGradle)(config, function (config) {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setVersionCode(config, config.modResults.contents);\n      config.modResults.contents = setVersionName(config, config.modResults.contents);\n    } else {\n      (0, _warnings().addWarningAndroid)('android.versionCode', `Cannot automatically configure app build.gradle if it's not groovy`);\n    }\n    return config;\n  });\n};\nexports.withVersion = withVersion;\nvar withBuildScriptExtMinimumVersion = function withBuildScriptExtMinimumVersion(config, props) {\n  return (0, _androidPlugins().withProjectBuildGradle)(config, function (config) {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setMinBuildScriptExtVersion(config.modResults.contents, props);\n    } else {\n      (0, _warnings().addWarningAndroid)('withBuildScriptExtVersion', `Cannot automatically configure project build.gradle if it's not groovy`);\n    }\n    return config;\n  });\n};\nexports.withBuildScriptExtMinimumVersion = withBuildScriptExtMinimumVersion;\nfunction setMinBuildScriptExtVersion(buildGradle, _ref) {\n  var name = _ref.name,\n    minVersion = _ref.minVersion;\n  var _buildGradle$match;\n  var regex = new RegExp(`(${name}\\\\s?=\\\\s?)(\\\\d+(?:\\\\.\\\\d+)?)`);\n  var currentVersion = (_buildGradle$match = buildGradle.match(regex)) === null || _buildGradle$match === void 0 ? void 0 : _buildGradle$match[2];\n  if (!currentVersion) {\n    (0, _warnings().addWarningAndroid)('withBuildScriptExtVersion', `Cannot set minimum buildscript.ext.${name} version because the property \"${name}\" cannot be found or does not have a numeric value.`);\n    return buildGradle;\n  }\n  var currentVersionNum = Number(currentVersion);\n  return buildGradle.replace(regex, `$1${Math.max(minVersion, currentVersionNum)}`);\n}\nfunction getVersionName(config) {\n  var _config$version;\n  return (_config$version = config.version) !== null && _config$version !== void 0 ? _config$version : null;\n}\nfunction setVersionName(config, buildGradle) {\n  var versionName = getVersionName(config);\n  if (versionName === null) {\n    return buildGradle;\n  }\n  var pattern = new RegExp(`versionName \".*\"`);\n  return buildGradle.replace(pattern, `versionName \"${versionName}\"`);\n}\nfunction getVersionCode(config) {\n  var _config$android$versi, _config$android;\n  return (_config$android$versi = (_config$android = config.android) === null || _config$android === void 0 ? void 0 : _config$android.versionCode) !== null && _config$android$versi !== void 0 ? _config$android$versi : 1;\n}\nfunction setVersionCode(config, buildGradle) {\n  var versionCode = getVersionCode(config);\n  if (versionCode === null) {\n    return buildGradle;\n  }\n  var pattern = new RegExp(`versionCode.*`);\n  return buildGradle.replace(pattern, `versionCode ${versionCode}`);\n}","map":{"version":3,"names":["_androidPlugins","data","require","_warnings","withVersion","config","withAppBuildGradle","modResults","language","contents","setVersionCode","setVersionName","addWarningAndroid","exports","withBuildScriptExtMinimumVersion","props","withProjectBuildGradle","setMinBuildScriptExtVersion","buildGradle","_ref","name","minVersion","_buildGradle$match","regex","RegExp","currentVersion","match","currentVersionNum","Number","replace","Math","max","getVersionName","_config$version","version","versionName","pattern","getVersionCode","_config$android$versi","_config$android","android","versionCode"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\android\\Version.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAppBuildGradle, withProjectBuildGradle } from '../plugins/android-plugins';\nimport { addWarningAndroid } from '../utils/warnings';\n\nexport const withVersion: ConfigPlugin = (config) => {\n  return withAppBuildGradle(config, (config) => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setVersionCode(config, config.modResults.contents);\n      config.modResults.contents = setVersionName(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'android.versionCode',\n        `Cannot automatically configure app build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\n/** Sets a numeric version for a value in the project.gradle buildscript.ext object to be at least the provided props.minVersion, if the existing value is greater then no change will be made. */\nexport const withBuildScriptExtMinimumVersion: ConfigPlugin<{\n  name: string;\n  minVersion: number;\n}> = (config, props) => {\n  return withProjectBuildGradle(config, (config) => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setMinBuildScriptExtVersion(config.modResults.contents, props);\n    } else {\n      addWarningAndroid(\n        'withBuildScriptExtVersion',\n        `Cannot automatically configure project build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\nexport function setMinBuildScriptExtVersion(\n  buildGradle: string,\n  { name, minVersion }: { name: string; minVersion: number }\n) {\n  const regex = new RegExp(`(${name}\\\\s?=\\\\s?)(\\\\d+(?:\\\\.\\\\d+)?)`);\n  const currentVersion = buildGradle.match(regex)?.[2];\n  if (!currentVersion) {\n    addWarningAndroid(\n      'withBuildScriptExtVersion',\n      `Cannot set minimum buildscript.ext.${name} version because the property \"${name}\" cannot be found or does not have a numeric value.`\n    );\n    // TODO: Maybe just add the property...\n    return buildGradle;\n  }\n\n  const currentVersionNum = Number(currentVersion);\n  return buildGradle.replace(regex, `$1${Math.max(minVersion, currentVersionNum)}`);\n}\n\nexport function getVersionName(config: Pick<ExpoConfig, 'version'>) {\n  return config.version ?? null;\n}\n\nexport function setVersionName(config: Pick<ExpoConfig, 'version'>, buildGradle: string) {\n  const versionName = getVersionName(config);\n  if (versionName === null) {\n    return buildGradle;\n  }\n\n  const pattern = new RegExp(`versionName \".*\"`);\n  return buildGradle.replace(pattern, `versionName \"${versionName}\"`);\n}\n\nexport function getVersionCode(config: Pick<ExpoConfig, 'android'>) {\n  return config.android?.versionCode ?? 1;\n}\n\nexport function setVersionCode(config: Pick<ExpoConfig, 'android'>, buildGradle: string) {\n  const versionCode = getVersionCode(config);\n  if (versionCode === null) {\n    return buildGradle;\n  }\n\n  const pattern = new RegExp(`versionCode.*`);\n  return buildGradle.replace(pattern, `versionCode ${versionCode}`);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}