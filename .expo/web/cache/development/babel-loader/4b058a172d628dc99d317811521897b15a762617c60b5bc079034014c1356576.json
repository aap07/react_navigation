{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/package-manager/build/ios/CocoaPodsPackageManager.d.ts"],"sourcesContent":["import { SpawnOptions, SpawnResult } from '@expo/spawn-async';\nimport { Ora } from 'ora';\nexport type CocoaPodsErrorCode = 'NON_INTERACTIVE' | 'NO_CLI' | 'COMMAND_FAILED';\nexport declare class CocoaPodsError extends Error {\n    code: CocoaPodsErrorCode;\n    cause?: Error | undefined;\n    readonly name = \"CocoaPodsError\";\n    readonly isPackageManagerError = true;\n    constructor(message: string, code: CocoaPodsErrorCode, cause?: Error | undefined);\n}\nexport declare function extractMissingDependencyError(errorOutput: string): [string, string] | null;\nexport declare class CocoaPodsPackageManager {\n    options: SpawnOptions;\n    private silent;\n    static getPodProjectRoot(projectRoot: string): string | null;\n    static isUsingPods(projectRoot: string): boolean;\n    static gemInstallCLIAsync(nonInteractive?: boolean, spawnOptions?: SpawnOptions): Promise<void>;\n    static brewLinkCLIAsync(spawnOptions?: SpawnOptions): Promise<void>;\n    static brewInstallCLIAsync(spawnOptions?: SpawnOptions): Promise<void>;\n    static installCLIAsync({ nonInteractive, spawnOptions, }: {\n        nonInteractive?: boolean;\n        spawnOptions?: SpawnOptions;\n    }): Promise<boolean>;\n    static isAvailable(projectRoot: string, silent: boolean): boolean;\n    static isCLIInstalledAsync(spawnOptions?: SpawnOptions): Promise<boolean>;\n    constructor({ cwd, silent }: {\n        cwd: string;\n        silent?: boolean;\n    });\n    get name(): string;\n    /** Runs `pod install` and attempts to automatically run known troubleshooting steps automatically. */\n    installAsync({ spinner }?: {\n        spinner?: Ora;\n    }): Promise<void>;\n    isCLIInstalledAsync(): Promise<boolean>;\n    installCLIAsync(): Promise<boolean>;\n    handleInstallErrorAsync({ error, shouldUpdate, updatedPackages, spinner, }: {\n        error: any;\n        spinner?: Ora;\n        shouldUpdate?: boolean;\n        updatedPackages?: string[];\n    }): Promise<SpawnResult>;\n    private _installAsync;\n    private runInstallTypeCommandAsync;\n    addWithParametersAsync(names: string[], parameters: string[]): Promise<void>;\n    addAsync(names?: string[]): void;\n    addDevAsync(names?: string[]): void;\n    addGlobalAsync(names?: string[]): void;\n    removeAsync(names?: string[]): void;\n    removeDevAsync(names?: string[]): void;\n    removeGlobalAsync(names?: string[]): void;\n    versionAsync(): Promise<string>;\n    configAsync(key: string): Promise<string>;\n    removeLockfileAsync(): Promise<void>;\n    uninstallAsync(): Promise<void>;\n    private podRepoUpdateAsync;\n    _runAsync(args: string[]): Promise<SpawnResult>;\n}\nexport declare function getPodUpdateMessage(output: string): {\n    updatePackage: string | null;\n    shouldUpdateRepo: boolean;\n};\nexport declare function getPodRepoUpdateMessage(errorOutput: string): {\n    updatePackage: string | null;\n    shouldUpdateRepo: boolean;\n    message: string;\n};\n/**\n * Format the CocoaPods CLI install error.\n *\n * @param error Error from CocoaPods CLI `pod install` command.\n * @returns\n */\nexport declare function getImprovedPodInstallError(error: SpawnResult & Error, { cwd }: Pick<SpawnOptions, 'cwd'>): Error;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}