{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _interfaces = require(\"../interfaces\");\nvar _EventManager = _interopRequireDefault(require(\"./EventManager\"));\nvar _utils = require(\"../utils\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar TouchEventManager = function (_EventManager$default) {\n  _inherits(TouchEventManager, _EventManager$default);\n  var _super = _createSuper(TouchEventManager);\n  function TouchEventManager() {\n    _classCallCheck(this, TouchEventManager);\n    return _super.apply(this, arguments);\n  }\n  _createClass(TouchEventManager, [{\n    key: \"setListeners\",\n    value: function setListeners() {\n      var _this = this;\n      this.view.addEventListener('touchstart', function (event) {\n        for (var i = 0; i < event.changedTouches.length; ++i) {\n          var adaptedEvent = _this.mapEvent(event, _interfaces.EventTypes.DOWN, i, _interfaces.TouchEventType.DOWN);\n          if (!(0, _utils.isPointerInBounds)(_this.view, {\n            x: adaptedEvent.x,\n            y: adaptedEvent.y\n          }) || event.changedTouches[i].touchType === 'stylus') {\n            continue;\n          }\n          _this.markAsInBounds(adaptedEvent.pointerId);\n          if (++_this.activePointersCounter > 1) {\n            adaptedEvent.eventType = _interfaces.EventTypes.ADDITIONAL_POINTER_DOWN;\n            _this.onPointerAdd(adaptedEvent);\n          } else {\n            _this.onPointerDown(adaptedEvent);\n          }\n        }\n      });\n      this.view.addEventListener('touchmove', function (event) {\n        for (var i = 0; i < event.changedTouches.length; ++i) {\n          var adaptedEvent = _this.mapEvent(event, _interfaces.EventTypes.MOVE, i, _interfaces.TouchEventType.MOVE);\n          if (event.changedTouches[i].touchType === 'stylus') {\n            continue;\n          }\n          var inBounds = (0, _utils.isPointerInBounds)(_this.view, {\n            x: adaptedEvent.x,\n            y: adaptedEvent.y\n          });\n          var pointerIndex = _this.pointersInBounds.indexOf(adaptedEvent.pointerId);\n          if (inBounds) {\n            if (pointerIndex < 0) {\n              adaptedEvent.eventType = _interfaces.EventTypes.ENTER;\n              _this.onPointerEnter(adaptedEvent);\n              _this.markAsInBounds(adaptedEvent.pointerId);\n            } else {\n              _this.onPointerMove(adaptedEvent);\n            }\n          } else {\n            if (pointerIndex >= 0) {\n              adaptedEvent.eventType = _interfaces.EventTypes.OUT;\n              _this.onPointerOut(adaptedEvent);\n              _this.markAsOutOfBounds(adaptedEvent.pointerId);\n            } else {\n              _this.onPointerOutOfBounds(adaptedEvent);\n            }\n          }\n        }\n      });\n      this.view.addEventListener('touchend', function (event) {\n        for (var i = 0; i < event.changedTouches.length; ++i) {\n          if (_this.activePointersCounter === 0) {\n            break;\n          }\n          if (event.changedTouches[i].touchType === 'stylus') {\n            continue;\n          }\n          var adaptedEvent = _this.mapEvent(event, _interfaces.EventTypes.UP, i, _interfaces.TouchEventType.UP);\n          _this.markAsOutOfBounds(adaptedEvent.pointerId);\n          if (--_this.activePointersCounter > 0) {\n            adaptedEvent.eventType = _interfaces.EventTypes.ADDITIONAL_POINTER_UP;\n            _this.onPointerRemove(adaptedEvent);\n          } else {\n            _this.onPointerUp(adaptedEvent);\n          }\n        }\n      });\n      this.view.addEventListener('touchcancel', function (event) {\n        for (var i = 0; i < event.changedTouches.length; ++i) {\n          var adaptedEvent = _this.mapEvent(event, _interfaces.EventTypes.CANCEL, i, _interfaces.TouchEventType.CANCELLED);\n          if (event.changedTouches[i].touchType === 'stylus') {\n            continue;\n          }\n          _this.onPointerCancel(adaptedEvent);\n          _this.markAsOutOfBounds(adaptedEvent.pointerId);\n          _this.activePointersCounter = 0;\n        }\n      });\n    }\n  }, {\n    key: \"mapEvent\",\n    value: function mapEvent(event, eventType, index, touchEventType) {\n      var rect = this.view.getBoundingClientRect();\n      var clientX = event.changedTouches[index].clientX;\n      var clientY = event.changedTouches[index].clientY;\n      return {\n        x: clientX,\n        y: clientY,\n        offsetX: clientX - rect.left,\n        offsetY: clientY - rect.top,\n        pointerId: event.changedTouches[index].identifier,\n        eventType: eventType,\n        pointerType: _interfaces.PointerType.TOUCH,\n        buttons: _interfaces.MouseButtons.NONE,\n        time: event.timeStamp,\n        allTouches: event.touches,\n        changedTouches: event.changedTouches,\n        touchEventType: touchEventType\n      };\n    }\n  }]);\n  return TouchEventManager;\n}(_EventManager.default);\nexports.default = TouchEventManager;","map":{"version":3,"names":["_interfaces","require","_EventManager","_interopRequireDefault","_utils","TouchEventManager","_EventManager$default","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","setListeners","_this","view","addEventListener","event","i","changedTouches","length","adaptedEvent","mapEvent","EventTypes","DOWN","TouchEventType","isPointerInBounds","x","y","touchType","markAsInBounds","pointerId","activePointersCounter","eventType","ADDITIONAL_POINTER_DOWN","onPointerAdd","onPointerDown","MOVE","inBounds","pointerIndex","pointersInBounds","indexOf","ENTER","onPointerEnter","onPointerMove","OUT","onPointerOut","markAsOutOfBounds","onPointerOutOfBounds","UP","ADDITIONAL_POINTER_UP","onPointerRemove","onPointerUp","CANCEL","CANCELLED","onPointerCancel","index","touchEventType","rect","getBoundingClientRect","clientX","clientY","offsetX","left","offsetY","top","identifier","pointerType","PointerType","TOUCH","buttons","MouseButtons","NONE","time","timeStamp","allTouches","touches","default"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\react-native-gesture-handler\\lib\\commonjs\\web\\tools\\TouchEventManager.ts"],"sourcesContent":["import {\n  AdaptedEvent,\n  EventTypes,\n  MouseButtons,\n  PointerType,\n  TouchEventType,\n} from '../interfaces';\nimport EventManager from './EventManager';\nimport { isPointerInBounds } from '../utils';\n\nexport default class TouchEventManager extends EventManager {\n  public setListeners(): void {\n    this.view.addEventListener('touchstart', (event: TouchEvent) => {\n      for (let i = 0; i < event.changedTouches.length; ++i) {\n        const adaptedEvent: AdaptedEvent = this.mapEvent(\n          event,\n          EventTypes.DOWN,\n          i,\n          TouchEventType.DOWN\n        );\n\n        // Here we skip stylus, because in case of anything different than touch we want to handle it by using PointerEvents\n        // If we leave stylus to send touch events, handlers will receive every action twice\n        if (\n          !isPointerInBounds(this.view, {\n            x: adaptedEvent.x,\n            y: adaptedEvent.y,\n          }) ||\n          //@ts-ignore touchType field does exist\n          event.changedTouches[i].touchType === 'stylus'\n        ) {\n          continue;\n        }\n\n        this.markAsInBounds(adaptedEvent.pointerId);\n\n        if (++this.activePointersCounter > 1) {\n          adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n          this.onPointerAdd(adaptedEvent);\n        } else {\n          this.onPointerDown(adaptedEvent);\n        }\n      }\n    });\n\n    this.view.addEventListener('touchmove', (event: TouchEvent) => {\n      for (let i = 0; i < event.changedTouches.length; ++i) {\n        const adaptedEvent: AdaptedEvent = this.mapEvent(\n          event,\n          EventTypes.MOVE,\n          i,\n          TouchEventType.MOVE\n        );\n        //@ts-ignore touchType field does exist\n        if (event.changedTouches[i].touchType === 'stylus') {\n          continue;\n        }\n\n        const inBounds: boolean = isPointerInBounds(this.view, {\n          x: adaptedEvent.x,\n          y: adaptedEvent.y,\n        });\n\n        const pointerIndex: number = this.pointersInBounds.indexOf(\n          adaptedEvent.pointerId\n        );\n\n        if (inBounds) {\n          if (pointerIndex < 0) {\n            adaptedEvent.eventType = EventTypes.ENTER;\n            this.onPointerEnter(adaptedEvent);\n            this.markAsInBounds(adaptedEvent.pointerId);\n          } else {\n            this.onPointerMove(adaptedEvent);\n          }\n        } else {\n          if (pointerIndex >= 0) {\n            adaptedEvent.eventType = EventTypes.OUT;\n            this.onPointerOut(adaptedEvent);\n            this.markAsOutOfBounds(adaptedEvent.pointerId);\n          } else {\n            this.onPointerOutOfBounds(adaptedEvent);\n          }\n        }\n      }\n    });\n\n    this.view.addEventListener('touchend', (event: TouchEvent) => {\n      for (let i = 0; i < event.changedTouches.length; ++i) {\n        // When we call reset on gesture handlers, it also resets their event managers\n        // In some handlers (like RotationGestureHandler) reset is called before all pointers leave view\n        // This means, that activePointersCounter will be set to 0, while there are still remaining pointers on view\n        // Removing them will end in activePointersCounter going below 0, therefore handlers won't behave properly\n        if (this.activePointersCounter === 0) {\n          break;\n        }\n\n        //@ts-ignore touchType field does exist\n        if (event.changedTouches[i].touchType === 'stylus') {\n          continue;\n        }\n\n        const adaptedEvent: AdaptedEvent = this.mapEvent(\n          event,\n          EventTypes.UP,\n          i,\n          TouchEventType.UP\n        );\n\n        this.markAsOutOfBounds(adaptedEvent.pointerId);\n\n        if (--this.activePointersCounter > 0) {\n          adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n          this.onPointerRemove(adaptedEvent);\n        } else {\n          this.onPointerUp(adaptedEvent);\n        }\n      }\n    });\n\n    this.view.addEventListener('touchcancel', (event: TouchEvent) => {\n      for (let i = 0; i < event.changedTouches.length; ++i) {\n        const adaptedEvent: AdaptedEvent = this.mapEvent(\n          event,\n          EventTypes.CANCEL,\n          i,\n          TouchEventType.CANCELLED\n        );\n\n        //@ts-ignore touchType field does exist\n        if (event.changedTouches[i].touchType === 'stylus') {\n          continue;\n        }\n\n        this.onPointerCancel(adaptedEvent);\n        this.markAsOutOfBounds(adaptedEvent.pointerId);\n        this.activePointersCounter = 0;\n      }\n    });\n  }\n\n  protected mapEvent(\n    event: TouchEvent,\n    eventType: EventTypes,\n    index: number,\n    touchEventType: TouchEventType\n  ): AdaptedEvent {\n    const rect = this.view.getBoundingClientRect();\n    const clientX = event.changedTouches[index].clientX;\n    const clientY = event.changedTouches[index].clientY;\n\n    return {\n      x: clientX,\n      y: clientY,\n      offsetX: clientX - rect.left,\n      offsetY: clientY - rect.top,\n      pointerId: event.changedTouches[index].identifier,\n      eventType: eventType,\n      pointerType: PointerType.TOUCH,\n      buttons: MouseButtons.NONE,\n      time: event.timeStamp,\n      allTouches: event.touches,\n      changedTouches: event.changedTouches,\n      touchEventType: touchEventType,\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}