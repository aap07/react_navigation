{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _class;\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _spawnAsync = _interopRequireDefault(require(\"@expo/spawn-async\"));\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _childProcess = require(\"child_process\");\nvar _delay = require(\"../../../utils/delay\");\nvar _errors = require(\"../../../utils/errors\");\nvar _prompts = require(\"../../../utils/prompts\");\nvar _prerequisite = require(\"../Prerequisite\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction isXcrunInstalledAsync() {\n  return _isXcrunInstalledAsync.apply(this, arguments);\n}\nfunction _isXcrunInstalledAsync() {\n  _isXcrunInstalledAsync = _asyncToGenerator(function* () {\n    try {\n      (0, _childProcess).execSync(\"xcrun --version\", {\n        stdio: \"ignore\"\n      });\n      return true;\n    } catch (_unused2) {\n      return false;\n    }\n  });\n  return _isXcrunInstalledAsync.apply(this, arguments);\n}\nvar XcrunPrerequisite = function (_prerequisite$Prerequ) {\n  _inherits(XcrunPrerequisite, _prerequisite$Prerequ);\n  var _super = _createSuper(XcrunPrerequisite);\n  function XcrunPrerequisite() {\n    _classCallCheck(this, XcrunPrerequisite);\n    return _super.apply(this, arguments);\n  }\n  _createClass(XcrunPrerequisite, [{\n    key: \"assertImplementation\",\n    value: function () {\n      var _assertImplementation = _asyncToGenerator(function* () {\n        if (yield isXcrunInstalledAsync()) {\n          return;\n        }\n        function pendingAsync() {\n          return _pendingAsync.apply(this, arguments);\n        }\n        function _pendingAsync() {\n          _pendingAsync = _asyncToGenerator(function* () {\n            if (!(yield isXcrunInstalledAsync())) {\n              yield (0, _delay).delayAsync(100);\n              return yield pendingAsync();\n            }\n          });\n          return _pendingAsync.apply(this, arguments);\n        }\n        var confirm = yield (0, _prompts).confirmAsync({\n          initial: true,\n          message: _chalk.default`Xcode {bold Command Line Tools} needs to be installed (requires {bold sudo}), continue?`\n        });\n        if (confirm) {\n          try {\n            yield (0, _spawnAsync).default(\"sudo\", [\"xcode-select\", \"--install\"]);\n            return yield pendingAsync();\n          } catch (_unused) {}\n        }\n        throw new _errors.AbortCommandError();\n      });\n      function assertImplementation() {\n        return _assertImplementation.apply(this, arguments);\n      }\n      return assertImplementation;\n    }()\n  }]);\n  return XcrunPrerequisite;\n}(_prerequisite.Prerequisite);\n_class = XcrunPrerequisite;\nXcrunPrerequisite.instance = new _class();\nexports.XcrunPrerequisite = XcrunPrerequisite;","map":{"version":3,"names":["_classCallCheck","require","_createClass","_inherits","_possibleConstructorReturn","_getPrototypeOf","_asyncToGenerator","_class","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","_spawnAsync","_interopRequireDefault","_chalk","_childProcess","_delay","_errors","_prompts","_prerequisite","isXcrunInstalledAsync","_isXcrunInstalledAsync","execSync","stdio","_unused2","XcrunPrerequisite","_prerequisite$Prerequ","_super","key","value","_assertImplementation","pendingAsync","_pendingAsync","delayAsync","confirm","confirmAsync","initial","message","default","_unused","AbortCommandError","assertImplementation","Prerequisite","instance"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\doctor\\apple\\XcrunPrerequisite.ts"],"sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport chalk from 'chalk';\nimport { execSync } from 'child_process';\n\nimport { delayAsync } from '../../../utils/delay';\nimport { AbortCommandError } from '../../../utils/errors';\nimport { confirmAsync } from '../../../utils/prompts';\nimport { Prerequisite } from '../Prerequisite';\n\nasync function isXcrunInstalledAsync() {\n  try {\n    execSync('xcrun --version', { stdio: 'ignore' });\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nexport class XcrunPrerequisite extends Prerequisite {\n  static instance = new XcrunPrerequisite();\n\n  /**\n   * Ensure Xcode CLI is installed.\n   */\n  async assertImplementation(): Promise<void> {\n    if (await isXcrunInstalledAsync()) {\n      // Run this second to ensure the Xcode version check is run.\n      return;\n    }\n\n    async function pendingAsync(): Promise<void> {\n      if (!(await isXcrunInstalledAsync())) {\n        await delayAsync(100);\n        return await pendingAsync();\n      }\n    }\n\n    // This prompt serves no purpose accept informing the user what to do next, we could just open the App Store but it could be confusing if they don't know what's going on.\n    const confirm = await confirmAsync({\n      initial: true,\n      message: chalk`Xcode {bold Command Line Tools} needs to be installed (requires {bold sudo}), continue?`,\n    });\n\n    if (confirm) {\n      try {\n        await spawnAsync('sudo', [\n          'xcode-select',\n          '--install',\n          // TODO: Is there any harm in skipping this?\n          // '--switch', '/Applications/Xcode.app'\n        ]);\n        // Most likely the user will cancel the process, but if they don't this will continue checking until the CLI is available.\n        return await pendingAsync();\n      } catch {\n        // TODO: Figure out why this might get called (cancel early, network issues, server problems)\n        // TODO: Handle me\n      }\n    }\n\n    throw new AbortCommandError();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}