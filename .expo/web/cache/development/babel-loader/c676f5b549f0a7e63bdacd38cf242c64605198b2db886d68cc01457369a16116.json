{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _config = require(\"@expo/config\");\nvar _errors = require(\"../../utils/errors\");\nvar _obj = require(\"../../utils/obj\");\nvar AppIdResolver = function () {\n  function AppIdResolver(projectRoot, platform, configProperty) {\n    _classCallCheck(this, AppIdResolver);\n    this.projectRoot = projectRoot;\n    this.platform = platform;\n    this.configProperty = configProperty;\n  }\n  _createClass(AppIdResolver, [{\n    key: \"getAppIdAsync\",\n    value: function () {\n      var _getAppIdAsync = _asyncToGenerator(function* () {\n        if (yield this.hasNativeProjectAsync()) {\n          return this.getAppIdFromNativeAsync();\n        }\n        return this.getAppIdFromConfigAsync();\n      });\n      function getAppIdAsync() {\n        return _getAppIdAsync.apply(this, arguments);\n      }\n      return getAppIdAsync;\n    }()\n  }, {\n    key: \"hasNativeProjectAsync\",\n    value: function () {\n      var _hasNativeProjectAsync = _asyncToGenerator(function* () {\n        throw new _errors.UnimplementedError();\n      });\n      function hasNativeProjectAsync() {\n        return _hasNativeProjectAsync.apply(this, arguments);\n      }\n      return hasNativeProjectAsync;\n    }()\n  }, {\n    key: \"getAppIdFromConfigAsync\",\n    value: function () {\n      var _getAppIdFromConfigAsync = _asyncToGenerator(function* () {\n        var config = (0, _config).getConfig(this.projectRoot);\n        var appId = (0, _obj).get(config.exp, this.configProperty);\n        if (!appId) {\n          throw new _errors.CommandError(\"NO_APP_ID\", `Required property '${this.configProperty}' is not found in the project ${(0, _config).getProjectConfigDescriptionWithPaths(this.projectRoot, config)}. This is required to open the app.`);\n        }\n        return appId;\n      });\n      function getAppIdFromConfigAsync() {\n        return _getAppIdFromConfigAsync.apply(this, arguments);\n      }\n      return getAppIdFromConfigAsync;\n    }()\n  }, {\n    key: \"resolveAppIdFromNativeAsync\",\n    value: function () {\n      var _resolveAppIdFromNativeAsync = _asyncToGenerator(function* () {\n        throw new _errors.UnimplementedError();\n      });\n      function resolveAppIdFromNativeAsync() {\n        return _resolveAppIdFromNativeAsync.apply(this, arguments);\n      }\n      return resolveAppIdFromNativeAsync;\n    }()\n  }, {\n    key: \"getAppIdFromNativeAsync\",\n    value: function () {\n      var _getAppIdFromNativeAsync = _asyncToGenerator(function* () {\n        var appId = yield this.resolveAppIdFromNativeAsync();\n        if (!appId) {\n          throw new _errors.CommandError(\"NO_APP_ID\", `Failed to locate the ${this.platform} application identifier in the \"${this.platform}/\" folder. This is required to open the app.`);\n        }\n        return appId;\n      });\n      function getAppIdFromNativeAsync() {\n        return _getAppIdFromNativeAsync.apply(this, arguments);\n      }\n      return getAppIdFromNativeAsync;\n    }()\n  }]);\n  return AppIdResolver;\n}();\nexports.AppIdResolver = AppIdResolver;","map":{"version":3,"names":["_asyncToGenerator","require","_classCallCheck","_createClass","_config","_errors","_obj","AppIdResolver","projectRoot","platform","configProperty","key","value","_getAppIdAsync","hasNativeProjectAsync","getAppIdFromNativeAsync","getAppIdFromConfigAsync","getAppIdAsync","apply","arguments","_hasNativeProjectAsync","UnimplementedError","_getAppIdFromConfigAsync","config","getConfig","appId","get","exp","CommandError","getProjectConfigDescriptionWithPaths","_resolveAppIdFromNativeAsync","resolveAppIdFromNativeAsync","_getAppIdFromNativeAsync"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\platforms\\AppIdResolver.ts"],"sourcesContent":["import { getConfig, getProjectConfigDescriptionWithPaths } from '@expo/config';\n\nimport { CommandError, UnimplementedError } from '../../utils/errors';\nimport { get } from '../../utils/obj';\n\n/** Resolves a native app identifier (bundle identifier, package name) from the project files. */\nexport class AppIdResolver {\n  constructor(\n    protected projectRoot: string,\n    /** Platform to use. */\n    protected platform: string,\n    /** Nested key in the Expo config like `android.package` or `ios.bundleIdentifier`. */\n    protected configProperty: string\n  ) {}\n\n  /** Resolve the application ID for the project. */\n  async getAppIdAsync(): Promise<string> {\n    if (await this.hasNativeProjectAsync()) {\n      return this.getAppIdFromNativeAsync();\n    }\n    return this.getAppIdFromConfigAsync();\n  }\n\n  /** Returns `true` if the project has native project code. */\n  async hasNativeProjectAsync(): Promise<boolean> {\n    throw new UnimplementedError();\n  }\n\n  /** Return the app ID from the Expo config or assert. */\n  async getAppIdFromConfigAsync(): Promise<string> {\n    const config = getConfig(this.projectRoot);\n\n    const appId = get(config.exp, this.configProperty);\n    if (!appId) {\n      throw new CommandError(\n        'NO_APP_ID',\n        `Required property '${\n          this.configProperty\n        }' is not found in the project ${getProjectConfigDescriptionWithPaths(\n          this.projectRoot,\n          config\n        )}. This is required to open the app.`\n      );\n    }\n    return appId;\n  }\n\n  /** Return the app ID from the native project files or null if the app ID cannot be found. */\n  async resolveAppIdFromNativeAsync(): Promise<string | null> {\n    throw new UnimplementedError();\n  }\n\n  /** Return the app ID from the native project files or assert. */\n  async getAppIdFromNativeAsync(): Promise<string> {\n    const appId = await this.resolveAppIdFromNativeAsync();\n    if (!appId) {\n      throw new CommandError(\n        'NO_APP_ID',\n        `Failed to locate the ${this.platform} application identifier in the \"${this.platform}/\" folder. This is required to open the app.`\n      );\n    }\n    return appId;\n  }\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,iBAAA,GAAAC,OAAA;AAAA,IAAAC,eAAA,GAAAD,OAAA;AAAA,IAAAE,YAAA,GAAAF,OAAA;;;;AAAgE,IAAAG,OAAc,GAAAH,OAAA,CAAd,cAAc;AAE7B,IAAAI,OAAoB,GAAAJ,OAAA;AACjD,IAAAK,IAAiB,GAAAL,OAAA;AAAA,IAGxBM,aAAa;EACxB,SAAAA,cACYC,WAAmB,EAEnBC,QAAgB,EAEhBC,cAAsB,EAChC;IAAAR,eAAA,OAAAK,aAAA;SALUC,WAAmB,GAAnBA,WAAmB;SAEnBC,QAAgB,GAAhBA,QAAgB;SAEhBC,cAAsB,GAAtBA,cAAsB;;EAC9BP,YAAA,CAAAI,aAAA;IAAAI,GAAA;IAAAC,KAAA;MAAA,IAAAC,cAAA,GAAAb,iBAAA,CAGJ,aAAuC;QACrC,UAAU,IAAI,CAACc,qBAAqB,EAAE,EAAE;UACtC,OAAO,IAAI,CAACC,uBAAuB,EAAE;;QAEvC,OAAO,IAAI,CAACC,uBAAuB,EAAE;OACtC;MAAA,SAAAC,cAAA;QAAA,OAAAJ,cAAA,CAAAK,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAF,aAAA;IAAA;EAAA;IAAAN,GAAA;IAAAC,KAAA;MAAA,IAAAQ,sBAAA,GAAApB,iBAAA,CAGD,aAAgD;QAC9C,MAAM,IAAIK,OAAkB,CAAAgB,kBAAA,EAAE;OAC/B;MAAA,SAAAP,sBAAA;QAAA,OAAAM,sBAAA,CAAAF,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAL,qBAAA;IAAA;EAAA;IAAAH,GAAA;IAAAC,KAAA;MAAA,IAAAU,wBAAA,GAAAtB,iBAAA,CAGD,aAAiD;QAC/C,IAAMuB,MAAM,GAAG,IAAAnB,OAAS,EAAkBoB,SAAlB,CAAC,IAAI,CAAChB,WAAW,CAAC;QAE1C,IAAMiB,KAAK,GAAG,IAAAnB,IAAG,EAAiCoB,GAAjC,CAACH,MAAM,CAACI,GAAG,EAAE,IAAI,CAACjB,cAAc,CAAC;QAClD,IAAI,CAACe,KAAK,EAAE;UACV,MAAM,IAAIpB,OAAY,CAAAuB,YAAA,CACpB,WAAW,EACV,sBACC,IAAI,CAAClB,cACN,iCAAgC,IAAAN,OAAoC,EAGpEyB,oCAHoE,CACnE,IAAI,CAACrB,WAAW,EAChBe,MAAM,CACN,qCAAoC,CACvC;;QAEH,OAAOE,KAAK;OACb;MAAA,SAAAT,wBAAA;QAAA,OAAAM,wBAAA,CAAAJ,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAH,uBAAA;IAAA;EAAA;IAAAL,GAAA;IAAAC,KAAA;MAAA,IAAAkB,4BAAA,GAAA9B,iBAAA,CAGD,aAA4D;QAC1D,MAAM,IAAIK,OAAkB,CAAAgB,kBAAA,EAAE;OAC/B;MAAA,SAAAU,4BAAA;QAAA,OAAAD,4BAAA,CAAAZ,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAY,2BAAA;IAAA;EAAA;IAAApB,GAAA;IAAAC,KAAA;MAAA,IAAAoB,wBAAA,GAAAhC,iBAAA,CAGD,aAAiD;QAC/C,IAAMyB,KAAK,SAAS,IAAI,CAACM,2BAA2B,EAAE;QACtD,IAAI,CAACN,KAAK,EAAE;UACV,MAAM,IAAIpB,OAAY,CAAAuB,YAAA,CACpB,WAAW,EACV,wBAAuB,IAAI,CAACnB,QAAS,mCAAkC,IAAI,CAACA,QAAS,8CAA6C,CACpI;;QAEH,OAAOgB,KAAK;OACb;MAAA,SAAAV,wBAAA;QAAA,OAAAiB,wBAAA,CAAAd,KAAA,OAAAC,SAAA;MAAA;MAAA,OAAAJ,uBAAA;IAAA;EAAA;EAAA,OAAAR,aAAA;AAAA;QAxDUA,aAAa,GAAbA,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}