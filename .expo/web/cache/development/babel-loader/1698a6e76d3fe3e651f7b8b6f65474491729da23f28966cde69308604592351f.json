{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.downloadProfile = downloadProfile;\nfunction _child_process() {\n  var data = require(\"child_process\");\n  _child_process = function _child_process() {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function _cliTools() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _os() {\n  var data = _interopRequireDefault(require(\"os\"));\n  _os = function _os() {\n    return data;\n  };\n  return data;\n}\nfunction _hermesProfileTransformer() {\n  var data = _interopRequireDefault(require(\"hermes-profile-transformer\"));\n  _hermesProfileTransformer = function _hermesProfileTransformer() {\n    return data;\n  };\n  return data;\n}\nvar _sourcemapUtils = require(\"./sourcemapUtils\");\nfunction _cliPlatformAndroid() {\n  var data = require(\"@react-native-community/cli-platform-android\");\n  _cliPlatformAndroid = function _cliPlatformAndroid() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getLatestFile(packageNameWithSuffix) {\n  try {\n    var file = (0, _child_process().execSync)(`adb shell run-as ${packageNameWithSuffix} ls cache/ -tp | grep -v /$ | grep -E '.cpuprofile' | head -1\n        `);\n    return file.toString().trim();\n  } catch (e) {\n    throw e;\n  }\n}\nfunction execSyncWithLog(command) {\n  _cliTools().logger.debug(`${command}`);\n  return (0, _child_process().execSync)(command);\n}\nfunction downloadProfile(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8, _x9) {\n  return _downloadProfile.apply(this, arguments);\n}\nfunction _downloadProfile() {\n  _downloadProfile = _asyncToGenerator(function* (ctx, dstPath, filename, sourcemapPath, raw, shouldGenerateSourcemap, port, appId, appIdSuffix) {\n    try {\n      var androidProject = (0, _cliPlatformAndroid().getAndroidProject)(ctx);\n      var packageNameWithSuffix = [appId || androidProject.packageName, appIdSuffix].filter(Boolean).join('.');\n      var file = filename || getLatestFile(packageNameWithSuffix);\n      if (!file) {\n        throw new (_cliTools().CLIError)('There is no file in the cache/ directory. Did you record a profile from the developer menu?');\n      }\n      _cliTools().logger.info(`File to be pulled: ${file}`);\n      dstPath = dstPath || ctx.root;\n      _cliTools().logger.debug('Internal commands run to pull the file:');\n      if (raw) {\n        execSyncWithLog(`adb shell run-as ${packageNameWithSuffix} cat cache/${file} > ${dstPath}/${file}`);\n        _cliTools().logger.success(`Successfully pulled the file to ${dstPath}/${file}`);\n      } else {\n        var osTmpDir = _os().default.tmpdir();\n        var tempFilePath = _path().default.join(osTmpDir, file);\n        execSyncWithLog(`adb shell run-as ${packageNameWithSuffix} cat cache/${file} > ${tempFilePath}`);\n        if (!sourcemapPath) {\n          if (shouldGenerateSourcemap) {\n            sourcemapPath = yield (0, _sourcemapUtils.generateSourcemap)(port);\n          } else {\n            sourcemapPath = yield (0, _sourcemapUtils.findSourcemap)(ctx, port);\n          }\n          if (!sourcemapPath) {\n            _cliTools().logger.warn('Cannot find source maps, running the transformer without it');\n            _cliTools().logger.info('Instructions on how to get source maps: set `bundleInDebug: true` in your app/build.gradle file, inside the `project.ext.react` map.');\n          }\n        }\n        var events = yield (0, _hermesProfileTransformer().default)(tempFilePath, sourcemapPath, 'index.bundle');\n        var transformedFilePath = `${dstPath}/${_path().default.basename(file, '.cpuprofile')}-converted.json`;\n        _fs().default.writeFileSync(transformedFilePath, JSON.stringify(events, undefined, 4), 'utf-8');\n        _cliTools().logger.success(`Successfully converted to Chrome tracing format and pulled the file to ${transformedFilePath}`);\n      }\n    } catch (e) {\n      throw e;\n    }\n  });\n  return _downloadProfile.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","Object","defineProperty","exports","value","downloadProfile","_child_process","data","_cliTools","_fs","_interopRequireDefault","_path","_os","_hermesProfileTransformer","_sourcemapUtils","_cliPlatformAndroid","obj","__esModule","default","getLatestFile","packageNameWithSuffix","file","execSync","toString","trim","e","execSyncWithLog","command","logger","debug","_x","_x2","_x3","_x4","_x5","_x6","_x7","_x8","_x9","_downloadProfile","apply","arguments","ctx","dstPath","filename","sourcemapPath","raw","shouldGenerateSourcemap","port","appId","appIdSuffix","androidProject","getAndroidProject","packageName","filter","Boolean","join","CLIError","info","root","success","osTmpDir","tmpdir","tempFilePath","generateSourcemap","findSourcemap","warn","events","transformedFilePath","basename","writeFileSync","JSON","stringify","undefined"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-hermes/build/profileHermes/downloadProfile.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.downloadProfile = downloadProfile;\nfunction _child_process() {\n  const data = require(\"child_process\");\n  _child_process = function () {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function () {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n  _fs = function () {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n  _path = function () {\n    return data;\n  };\n  return data;\n}\nfunction _os() {\n  const data = _interopRequireDefault(require(\"os\"));\n  _os = function () {\n    return data;\n  };\n  return data;\n}\nfunction _hermesProfileTransformer() {\n  const data = _interopRequireDefault(require(\"hermes-profile-transformer\"));\n  _hermesProfileTransformer = function () {\n    return data;\n  };\n  return data;\n}\nvar _sourcemapUtils = require(\"./sourcemapUtils\");\nfunction _cliPlatformAndroid() {\n  const data = require(\"@react-native-community/cli-platform-android\");\n  _cliPlatformAndroid = function () {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Get the last modified hermes profile\n * @param packageNameWithSuffix\n */\nfunction getLatestFile(packageNameWithSuffix) {\n  try {\n    const file = (0, _child_process().execSync)(`adb shell run-as ${packageNameWithSuffix} ls cache/ -tp | grep -v /$ | grep -E '.cpuprofile' | head -1\n        `);\n    return file.toString().trim();\n  } catch (e) {\n    throw e;\n  }\n}\nfunction execSyncWithLog(command) {\n  _cliTools().logger.debug(`${command}`);\n  return (0, _child_process().execSync)(command);\n}\n\n/**\n * Pull and convert a Hermes tracing profile to Chrome tracing profile\n * @param ctx\n * @param dstPath\n * @param fileName\n * @param sourceMapPath\n * @param raw\n * @param generateSourceMap\n * @param appId\n * @param appIdSuffix\n */\nasync function downloadProfile(ctx, dstPath, filename, sourcemapPath, raw, shouldGenerateSourcemap, port, appId, appIdSuffix) {\n  try {\n    const androidProject = (0, _cliPlatformAndroid().getAndroidProject)(ctx);\n    const packageNameWithSuffix = [appId || androidProject.packageName, appIdSuffix].filter(Boolean).join('.');\n\n    // If file name is not specified, pull the latest file from device\n    const file = filename || getLatestFile(packageNameWithSuffix);\n    if (!file) {\n      throw new (_cliTools().CLIError)('There is no file in the cache/ directory. Did you record a profile from the developer menu?');\n    }\n    _cliTools().logger.info(`File to be pulled: ${file}`);\n\n    // If destination path is not specified, pull to the current directory\n    dstPath = dstPath || ctx.root;\n    _cliTools().logger.debug('Internal commands run to pull the file:');\n\n    // If --raw, pull the hermes profile to dstPath\n    if (raw) {\n      execSyncWithLog(`adb shell run-as ${packageNameWithSuffix} cat cache/${file} > ${dstPath}/${file}`);\n      _cliTools().logger.success(`Successfully pulled the file to ${dstPath}/${file}`);\n    }\n\n    // Else: transform the profile to Chrome format and pull it to dstPath\n    else {\n      const osTmpDir = _os().default.tmpdir();\n      const tempFilePath = _path().default.join(osTmpDir, file);\n      execSyncWithLog(`adb shell run-as ${packageNameWithSuffix} cat cache/${file} > ${tempFilePath}`);\n      // If path to source map is not given\n      if (!sourcemapPath) {\n        // Get or generate the source map\n        if (shouldGenerateSourcemap) {\n          sourcemapPath = await (0, _sourcemapUtils.generateSourcemap)(port);\n        } else {\n          sourcemapPath = await (0, _sourcemapUtils.findSourcemap)(ctx, port);\n        }\n\n        // Run without source map\n        if (!sourcemapPath) {\n          _cliTools().logger.warn('Cannot find source maps, running the transformer without it');\n          _cliTools().logger.info('Instructions on how to get source maps: set `bundleInDebug: true` in your app/build.gradle file, inside the `project.ext.react` map.');\n        }\n      }\n\n      // Run transformer tool to convert from Hermes to Chrome format\n      const events = await (0, _hermesProfileTransformer().default)(tempFilePath, sourcemapPath, 'index.bundle');\n      const transformedFilePath = `${dstPath}/${_path().default.basename(file, '.cpuprofile')}-converted.json`;\n      _fs().default.writeFileSync(transformedFilePath, JSON.stringify(events, undefined, 4), 'utf-8');\n      _cliTools().logger.success(`Successfully converted to Chrome tracing format and pulled the file to ${transformedFilePath}`);\n    }\n  } catch (e) {\n    throw e;\n  }\n}\n\n//# sourceMappingURL=downloadProfile.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}