{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport glob from 'fast-glob';\nimport fs from 'fs-extra';\nimport path from 'path';\nexport function patchReactImportsAsync(_x, _x2) {\n  return _patchReactImportsAsync.apply(this, arguments);\n}\nfunction _patchReactImportsAsync() {\n  _patchReactImportsAsync = _asyncToGenerator(function* (dirs, options) {\n    var headerSet = yield generateReactHeaderSetAsync(path.join(options.podsRoot, 'Headers', 'Public', 'React-Core', 'React'));\n    yield Promise.all(dirs.map(function (dir) {\n      return patchDirAsync(headerSet, dir, options.dryRun);\n    }));\n  });\n  return _patchReactImportsAsync.apply(this, arguments);\n}\nfunction generateReactHeaderSetAsync(_x3) {\n  return _generateReactHeaderSetAsync.apply(this, arguments);\n}\nfunction _generateReactHeaderSetAsync() {\n  _generateReactHeaderSetAsync = _asyncToGenerator(function* (reactHeaderDir) {\n    var files = yield glob('*.h', {\n      cwd: reactHeaderDir\n    });\n    return new Set(files);\n  });\n  return _generateReactHeaderSetAsync.apply(this, arguments);\n}\nexport function patchFileAsync(_x4, _x5, _x6) {\n  return _patchFileAsync.apply(this, arguments);\n}\nfunction _patchFileAsync() {\n  _patchFileAsync = _asyncToGenerator(function* (headerSet, file, dryRun) {\n    var changed = false;\n    var content = yield fs.readFile(file, 'utf-8');\n    var transformContent = content.replace(/(?<=^\\s*)#import\\s+\"(.+)\"(?=\\s*$)/gm, function (match, headerName) {\n      if (headerSet.has(headerName)) {\n        changed = true;\n        return `#import <React/${headerName}>`;\n      }\n      if (headerName.startsWith('React/')) {\n        var name = headerName.substring(6);\n        if (headerSet.has(name)) {\n          changed = true;\n          return `#import <React/${name}>`;\n        }\n      }\n      return match;\n    });\n    transformContent = transformContent.replace(/(?<=^\\s*)#(if|elif)\\s+__has_include\\(\"(.+)\"\\)(?=\\s*$)/gm, function (match, ifPrefix, headerName) {\n      if (headerSet.has(headerName)) {\n        changed = true;\n        return `#${ifPrefix} __has_include(<React/${headerName}>)`;\n      }\n      if (headerName.startsWith('React/')) {\n        var name = headerName.substring(6);\n        if (headerSet.has(name)) {\n          changed = true;\n          return `#${ifPrefix} __has_include(<React/${name}>)`;\n        }\n      }\n      return match;\n    });\n    if (changed) {\n      console.log(`Patching imports for file: ${file}`);\n      if (!dryRun) {\n        yield fs.writeFile(file, transformContent);\n      }\n    }\n  });\n  return _patchFileAsync.apply(this, arguments);\n}\nfunction patchDirAsync(_x7, _x8, _x9) {\n  return _patchDirAsync.apply(this, arguments);\n}\nfunction _patchDirAsync() {\n  _patchDirAsync = _asyncToGenerator(function* (headerSet, dir, dryRun) {\n    var files = yield glob('**/*.{h,m,mm}', {\n      cwd: dir,\n      absolute: true\n    });\n    return Promise.all(files.map(function (file) {\n      return patchFileAsync(headerSet, file, dryRun);\n    }));\n  });\n  return _patchDirAsync.apply(this, arguments);\n}","map":{"version":3,"names":["glob","fs","path","patchReactImportsAsync","_x","_x2","_patchReactImportsAsync","apply","arguments","_asyncToGenerator","dirs","options","headerSet","generateReactHeaderSetAsync","join","podsRoot","Promise","all","map","dir","patchDirAsync","dryRun","_x3","_generateReactHeaderSetAsync","reactHeaderDir","files","cwd","Set","patchFileAsync","_x4","_x5","_x6","_patchFileAsync","file","changed","content","readFile","transformContent","replace","match","headerName","has","startsWith","name","substring","ifPrefix","console","log","writeFile","_x7","_x8","_x9","_patchDirAsync","absolute"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/expo-modules-autolinking/src/ReactImportsPatcher.ts"],"sourcesContent":["// Copyright 2018-present 650 Industries. All rights reserved.\n\nimport glob from 'fast-glob';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { PatchReactImportsOptions } from './types';\n\n/**\n * Remove all double-quoted react header imports\n * @param dirs target directories to patch\n * @param options PatchReactImportsOptions\n */\nexport async function patchReactImportsAsync(dirs: string[], options: PatchReactImportsOptions) {\n  const headerSet = await generateReactHeaderSetAsync(\n    path.join(options.podsRoot, 'Headers', 'Public', 'React-Core', 'React')\n  );\n  await Promise.all(dirs.map((dir) => patchDirAsync(headerSet, dir, options.dryRun)));\n}\n\n/**\n * Generate `React-Core` public header names as a set, will transform necessary headers based on this set.\n */\nasync function generateReactHeaderSetAsync(reactHeaderDir: string): Promise<Set<string>> {\n  const files = await glob('*.h', { cwd: reactHeaderDir });\n  return new Set(files);\n}\n\n/**\n * Patch imports from a file\n * @param headerSet prebuilt React-Core header set\n * @param file target patch file\n * @param dryRun true if not writing changes to file\n */\nexport async function patchFileAsync(headerSet: Set<string>, file: string, dryRun: boolean) {\n  let changed = false;\n  const content = await fs.readFile(file, 'utf-8');\n  let transformContent = content.replace(\n    /(?<=^\\s*)#import\\s+\"(.+)\"(?=\\s*$)/gm,\n    (match: string, headerName: string): string => {\n      // `#import \"RCTBridge.h\"` -> `#import <React/RCTBridge.h>`\n      if (headerSet.has(headerName)) {\n        changed = true;\n        return `#import <React/${headerName}>`;\n      }\n\n      // `#import \"React/RCTBridge.h\"` -> `#import <React/RCTBridge.h>`\n      if (headerName.startsWith('React/')) {\n        const name = headerName.substring(6);\n        if (headerSet.has(name)) {\n          changed = true;\n          return `#import <React/${name}>`;\n        }\n      }\n\n      // Otherwise, return original import\n      return match;\n    }\n  );\n\n  transformContent = transformContent.replace(\n    /(?<=^\\s*)#(if|elif)\\s+__has_include\\(\"(.+)\"\\)(?=\\s*$)/gm,\n    (match: string, ifPrefix: string, headerName: string): string => {\n      // `#if __has_include(\"RCTBridge.h\")` -> `#if __has_include(<React/RCTBridge.h>)`\n      if (headerSet.has(headerName)) {\n        changed = true;\n        return `#${ifPrefix} __has_include(<React/${headerName}>)`;\n      }\n\n      // `#if __has_include(\"React/RCTBridge.h\")` -> `#if __has_include(<React/RCTBridge.h>)`\n      if (headerName.startsWith('React/')) {\n        const name = headerName.substring(6);\n        if (headerSet.has(name)) {\n          changed = true;\n          return `#${ifPrefix} __has_include(<React/${name}>)`;\n        }\n      }\n\n      // Otherwise, return original import\n      return match;\n    }\n  );\n\n  if (changed) {\n    console.log(`Patching imports for file: ${file}`);\n    if (!dryRun) {\n      await fs.writeFile(file, transformContent);\n    }\n  }\n}\n\n/**\n * Patch imports from a directory\n * @param headerSet prebuilt React-Core header set\n * @param file target patch file\n * @param dryRun true if not writing changes to file\n */\nasync function patchDirAsync(headerSet: Set<string>, dir: string, dryRun: boolean) {\n  const files = await glob('**/*.{h,m,mm}', { cwd: dir, absolute: true });\n  return Promise.all(files.map((file) => patchFileAsync(headerSet, file, dryRun)));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}