{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar combine = require(\"./combine-js-to-schema\");\nvar fs = require('fs');\nvar glob = require('glob');\nvar path = require('path');\nvar _require = require(\"./combine-utils\"),\n  parseArgs = _require.parseArgs,\n  filterJSFile = _require.filterJSFile;\nvar _parseArgs = parseArgs(process.argv),\n  platform = _parseArgs.platform,\n  outfile = _parseArgs.outfile,\n  fileList = _parseArgs.fileList;\nvar allFiles = [];\nfileList.forEach(function (file) {\n  if (fs.lstatSync(file).isDirectory()) {\n    var filePattern = path.sep === '\\\\' ? file.replace(/\\\\/g, '/') : file;\n    var dirFiles = glob.sync(`${filePattern}/**/*.{js,ts,tsx}`, {\n      nodir: true\n    }).filter(function (element) {\n      return filterJSFile(element, platform);\n    });\n    allFiles.push.apply(allFiles, _toConsumableArray(dirFiles));\n  } else if (filterJSFile(file)) {\n    allFiles.push(file);\n  }\n});\nvar combined = combine(allFiles);\nif (Object.keys(combined.modules).length === 0) {\n  console.error('No modules to process in combine-js-to-schema-cli. If this is unexpected, please check if you set up your NativeComponent correctly. See combine-js-to-schema.js for how codegen finds modules.');\n}\nvar formattedSchema = JSON.stringify(combined, null, 2);\nif (outfile != null) {\n  fs.writeFileSync(outfile, formattedSchema);\n} else {\n  console.log(formattedSchema);\n}","map":{"version":3,"names":["_toConsumableArray","require","combine","fs","glob","path","_require","parseArgs","filterJSFile","_parseArgs","process","argv","platform","outfile","fileList","allFiles","forEach","file","lstatSync","isDirectory","filePattern","sep","replace","dirFiles","sync","nodir","filter","element","push","apply","combined","Object","keys","modules","length","console","error","formattedSchema","JSON","stringify","writeFileSync","log"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native/codegen/lib/cli/combine/combine-js-to-schema-cli.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * @format\n * @oncall react_native\n */\n\n'use strict';\n\nconst combine = require('./combine-js-to-schema');\nconst fs = require('fs');\nconst glob = require('glob');\nconst path = require('path');\nconst _require = require('./combine-utils'),\n  parseArgs = _require.parseArgs,\n  filterJSFile = _require.filterJSFile;\nconst _parseArgs = parseArgs(process.argv),\n  platform = _parseArgs.platform,\n  outfile = _parseArgs.outfile,\n  fileList = _parseArgs.fileList;\nconst allFiles = [];\nfileList.forEach(file => {\n  if (fs.lstatSync(file).isDirectory()) {\n    const filePattern = path.sep === '\\\\' ? file.replace(/\\\\/g, '/') : file;\n    const dirFiles = glob\n      .sync(`${filePattern}/**/*.{js,ts,tsx}`, {\n        nodir: true,\n        // TODO: This will remove the need of slash substitution above for Windows,\n        // but it requires glob@v9+; with the package currenlty relying on\n        // glob@7.1.1; and flow-typed repo not having definitions for glob@9+.\n        // windowsPathsNoEscape: true,\n      })\n      .filter(element => filterJSFile(element, platform));\n    allFiles.push(...dirFiles);\n  } else if (filterJSFile(file)) {\n    allFiles.push(file);\n  }\n});\nconst combined = combine(allFiles);\n\n// Warn users if there is no modules to process\nif (Object.keys(combined.modules).length === 0) {\n  console.error(\n    'No modules to process in combine-js-to-schema-cli. If this is unexpected, please check if you set up your NativeComponent correctly. See combine-js-to-schema.js for how codegen finds modules.',\n  );\n}\nconst formattedSchema = JSON.stringify(combined, null, 2);\nif (outfile != null) {\n  fs.writeFileSync(outfile, formattedSchema);\n} else {\n  console.log(formattedSchema);\n}\n"],"mappings":"AAWA,YAAY;;AAAC,IAAAA,kBAAA,GAAAC,OAAA;AAEb,IAAMC,OAAO,GAAGD,OAAO,yBAAyB,CAAC;AACjD,IAAME,EAAE,GAAGF,OAAO,CAAC,IAAI,CAAC;AACxB,IAAMG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;AAC5B,IAAMI,IAAI,GAAGJ,OAAO,CAAC,MAAM,CAAC;AAC5B,IAAMK,QAAQ,GAAGL,OAAO,kBAAkB,CAAC;EACzCM,SAAS,GAAGD,QAAQ,CAACC,SAAS;EAC9BC,YAAY,GAAGF,QAAQ,CAACE,YAAY;AACtC,IAAMC,UAAU,GAAGF,SAAS,CAACG,OAAO,CAACC,IAAI,CAAC;EACxCC,QAAQ,GAAGH,UAAU,CAACG,QAAQ;EAC9BC,OAAO,GAAGJ,UAAU,CAACI,OAAO;EAC5BC,QAAQ,GAAGL,UAAU,CAACK,QAAQ;AAChC,IAAMC,QAAQ,GAAG,EAAE;AACnBD,QAAQ,CAACE,OAAO,CAAC,UAAAC,IAAI,EAAI;EACvB,IAAId,EAAE,CAACe,SAAS,CAACD,IAAI,CAAC,CAACE,WAAW,CAAC,CAAC,EAAE;IACpC,IAAMC,WAAW,GAAGf,IAAI,CAACgB,GAAG,KAAK,IAAI,GAAGJ,IAAI,CAACK,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,GAAGL,IAAI;IACvE,IAAMM,QAAQ,GAAGnB,IAAI,CAClBoB,IAAI,CAAE,GAAEJ,WAAY,mBAAkB,EAAE;MACvCK,KAAK,EAAE;IAKT,CAAC,CAAC,CACDC,MAAM,CAAC,UAAAC,OAAO;MAAA,OAAInB,YAAY,CAACmB,OAAO,EAAEf,QAAQ,CAAC;IAAA,EAAC;IACrDG,QAAQ,CAACa,IAAI,CAAAC,KAAA,CAAbd,QAAQ,EAAAf,kBAAA,CAASuB,QAAQ,EAAC;EAC5B,CAAC,MAAM,IAAIf,YAAY,CAACS,IAAI,CAAC,EAAE;IAC7BF,QAAQ,CAACa,IAAI,CAACX,IAAI,CAAC;EACrB;AACF,CAAC,CAAC;AACF,IAAMa,QAAQ,GAAG5B,OAAO,CAACa,QAAQ,CAAC;AAGlC,IAAIgB,MAAM,CAACC,IAAI,CAACF,QAAQ,CAACG,OAAO,CAAC,CAACC,MAAM,KAAK,CAAC,EAAE;EAC9CC,OAAO,CAACC,KAAK,CACX,iMACF,CAAC;AACH;AACA,IAAMC,eAAe,GAAGC,IAAI,CAACC,SAAS,CAACT,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;AACzD,IAAIjB,OAAO,IAAI,IAAI,EAAE;EACnBV,EAAE,CAACqC,aAAa,CAAC3B,OAAO,EAAEwB,eAAe,CAAC;AAC5C,CAAC,MAAM;EACLF,OAAO,CAACM,GAAG,CAACJ,eAAe,CAAC;AAC9B"},"metadata":{},"sourceType":"script","externalDependencies":[]}