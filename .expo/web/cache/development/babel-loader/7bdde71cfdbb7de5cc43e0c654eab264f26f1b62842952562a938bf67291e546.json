{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getNavigationBarColor = getNavigationBarColor;\nexports.getNavigationBarImmersiveMode = getNavigationBarImmersiveMode;\nexports.getNavigationBarStyle = getNavigationBarStyle;\nexports.setNavigationBarColors = setNavigationBarColors;\nexports.setNavigationBarStyles = setNavigationBarStyles;\nexports.withNavigationBar = void 0;\nfunction _configPlugins() {\n  var data = require(\"@expo/config-plugins\");\n  _configPlugins = function _configPlugins() {\n    return data;\n  };\n  return data;\n}\nvar NAVIGATION_BAR_COLOR = 'navigationBarColor';\nvar withNavigationBar = function withNavigationBar(config) {\n  var immersiveMode = getNavigationBarImmersiveMode(config);\n  if (immersiveMode) {\n    _configPlugins().WarningAggregator.addWarningAndroid('androidNavigationBar.visible', 'Property is deprecated in Android 11 (API 30) and will be removed from Expo SDK.', 'https://expo.fyi/android-navigation-bar-visible-deprecated');\n  }\n  config = withNavigationBarColors(config);\n  config = withNavigationBarStyles(config);\n  return config;\n};\nexports.withNavigationBar = withNavigationBar;\nvar withNavigationBarColors = function withNavigationBarColors(config) {\n  return (0, _configPlugins().withAndroidColors)(config, function (config) {\n    config.modResults = setNavigationBarColors(config, config.modResults);\n    return config;\n  });\n};\nvar withNavigationBarStyles = function withNavigationBarStyles(config) {\n  return (0, _configPlugins().withAndroidStyles)(config, function (config) {\n    config.modResults = setNavigationBarStyles(config, config.modResults);\n    return config;\n  });\n};\nfunction setNavigationBarColors(config, colors) {\n  var hexString = getNavigationBarColor(config);\n  if (hexString) {\n    colors = _configPlugins().AndroidConfig.Colors.setColorItem(_configPlugins().AndroidConfig.Resources.buildResourceItem({\n      name: NAVIGATION_BAR_COLOR,\n      value: hexString\n    }), colors);\n  }\n  return colors;\n}\nfunction setNavigationBarStyles(config, styles) {\n  styles = _configPlugins().AndroidConfig.Styles.assignStylesValue(styles, {\n    add: getNavigationBarStyle(config) === 'dark-content',\n    parent: _configPlugins().AndroidConfig.Styles.getAppThemeLightNoActionBarGroup(),\n    name: 'android:windowLightNavigationBar',\n    value: 'true'\n  });\n  styles = _configPlugins().AndroidConfig.Styles.assignStylesValue(styles, {\n    add: !!getNavigationBarColor(config),\n    parent: _configPlugins().AndroidConfig.Styles.getAppThemeLightNoActionBarGroup(),\n    name: `android:${NAVIGATION_BAR_COLOR}`,\n    value: `@color/${NAVIGATION_BAR_COLOR}`\n  });\n  return styles;\n}\nfunction getNavigationBarImmersiveMode(config) {\n  var _config$androidNaviga;\n  return ((_config$androidNaviga = config.androidNavigationBar) === null || _config$androidNaviga === void 0 ? void 0 : _config$androidNaviga.visible) || null;\n}\nfunction getNavigationBarColor(config) {\n  var _config$androidNaviga2;\n  return ((_config$androidNaviga2 = config.androidNavigationBar) === null || _config$androidNaviga2 === void 0 ? void 0 : _config$androidNaviga2.backgroundColor) || null;\n}\nfunction getNavigationBarStyle(config) {\n  var _config$androidNaviga3;\n  return ((_config$androidNaviga3 = config.androidNavigationBar) === null || _config$androidNaviga3 === void 0 ? void 0 : _config$androidNaviga3.barStyle) || 'light-content';\n}","map":{"version":3,"names":["_configPlugins","data","require","NAVIGATION_BAR_COLOR","withNavigationBar","config","immersiveMode","getNavigationBarImmersiveMode","WarningAggregator","addWarningAndroid","withNavigationBarColors","withNavigationBarStyles","exports","withAndroidColors","modResults","setNavigationBarColors","withAndroidStyles","setNavigationBarStyles","colors","hexString","getNavigationBarColor","AndroidConfig","Colors","setColorItem","Resources","buildResourceItem","name","value","styles","Styles","assignStylesValue","add","getNavigationBarStyle","parent","getAppThemeLightNoActionBarGroup","_config$androidNaviga","androidNavigationBar","visible","_config$androidNaviga2","backgroundColor","_config$androidNaviga3","barStyle"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\prebuild-config\\src\\plugins\\unversioned\\expo-navigation-bar\\withAndroidNavigationBar.ts"],"sourcesContent":["import {\n  AndroidConfig,\n  ConfigPlugin,\n  WarningAggregator,\n  withAndroidColors,\n  withAndroidStyles,\n} from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\n\nconst NAVIGATION_BAR_COLOR = 'navigationBarColor';\n\nexport const withNavigationBar: ConfigPlugin = (config) => {\n  const immersiveMode = getNavigationBarImmersiveMode(config);\n  if (immersiveMode) {\n    // Immersive mode needs to be set programmatically\n    WarningAggregator.addWarningAndroid(\n      'androidNavigationBar.visible',\n      'Property is deprecated in Android 11 (API 30) and will be removed from Expo SDK.',\n      'https://expo.fyi/android-navigation-bar-visible-deprecated'\n    );\n  }\n\n  config = withNavigationBarColors(config);\n  config = withNavigationBarStyles(config);\n  return config;\n};\n\nconst withNavigationBarColors: ConfigPlugin = (config) => {\n  return withAndroidColors(config, (config) => {\n    config.modResults = setNavigationBarColors(config, config.modResults);\n    return config;\n  });\n};\n\nconst withNavigationBarStyles: ConfigPlugin = (config) => {\n  return withAndroidStyles(config, (config) => {\n    config.modResults = setNavigationBarStyles(config, config.modResults);\n    return config;\n  });\n};\n\nexport function setNavigationBarColors(\n  config: Pick<ExpoConfig, 'androidNavigationBar'>,\n  colors: AndroidConfig.Resources.ResourceXML\n): AndroidConfig.Resources.ResourceXML {\n  const hexString = getNavigationBarColor(config);\n  if (hexString) {\n    colors = AndroidConfig.Colors.setColorItem(\n      AndroidConfig.Resources.buildResourceItem({\n        name: NAVIGATION_BAR_COLOR,\n        value: hexString,\n      }),\n      colors\n    );\n  }\n  return colors;\n}\n\nexport function setNavigationBarStyles(\n  config: Pick<ExpoConfig, 'androidNavigationBar'>,\n  styles: AndroidConfig.Resources.ResourceXML\n): AndroidConfig.Resources.ResourceXML {\n  styles = AndroidConfig.Styles.assignStylesValue(styles, {\n    add: getNavigationBarStyle(config) === 'dark-content',\n    parent: AndroidConfig.Styles.getAppThemeLightNoActionBarGroup(),\n    name: 'android:windowLightNavigationBar',\n    value: 'true',\n  });\n  styles = AndroidConfig.Styles.assignStylesValue(styles, {\n    add: !!getNavigationBarColor(config),\n    parent: AndroidConfig.Styles.getAppThemeLightNoActionBarGroup(),\n    name: `android:${NAVIGATION_BAR_COLOR}`,\n    value: `@color/${NAVIGATION_BAR_COLOR}`,\n  });\n\n  return styles;\n}\n\nexport function getNavigationBarImmersiveMode(config: Pick<ExpoConfig, 'androidNavigationBar'>) {\n  return config.androidNavigationBar?.visible || null;\n}\n\nexport function getNavigationBarColor(config: Pick<ExpoConfig, 'androidNavigationBar'>) {\n  return config.androidNavigationBar?.backgroundColor || null;\n}\n\nexport function getNavigationBarStyle(config: Pick<ExpoConfig, 'androidNavigationBar'>) {\n  return config.androidNavigationBar?.barStyle || 'light-content';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}