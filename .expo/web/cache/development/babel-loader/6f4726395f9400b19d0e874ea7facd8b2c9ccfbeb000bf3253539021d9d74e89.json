{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.installAsync = installAsync;\nexports.installPackagesAsync = installPackagesAsync;\nexports.fixPackagesAsync = fixPackagesAsync;\nvar _config = require(\"@expo/config\");\nvar PackageManager = _interopRequireWildcard(require(\"@expo/package-manager\"));\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar Log = _interopRequireWildcard(require(\"../log\"));\nvar _getVersionedPackages = require(\"../start/doctor/dependencies/getVersionedPackages\");\nvar _array = require(\"../utils/array\");\nvar _findUp = require(\"../utils/findUp\");\nvar _link = require(\"../utils/link\");\nvar _nodeEnv = require(\"../utils/nodeEnv\");\nvar _strings = require(\"../utils/strings\");\nvar _checkPackages = require(\"./checkPackages\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction installAsync(_x, _x2) {\n  return _installAsync.apply(this, arguments);\n}\nfunction _installAsync() {\n  _installAsync = _asyncToGenerator(function* (packages, options) {\n    var packageManagerArguments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    (0, _nodeEnv).setNodeEnv(\"development\");\n    var _projectRoot;\n    var projectRoot = (_projectRoot = options.projectRoot) != null ? _projectRoot : (0, _findUp).findUpProjectRootOrAssert(process.cwd());\n    require(\"@expo/env\").load(projectRoot);\n    var packageManager = PackageManager.createForProject(projectRoot, {\n      npm: options.npm,\n      yarn: options.yarn,\n      bun: options.bun,\n      pnpm: options.pnpm,\n      silent: options.silent,\n      log: Log.log\n    });\n    if (options.check || options.fix) {\n      return yield (0, _checkPackages).checkPackagesAsync(projectRoot, {\n        packages: packages,\n        options: options,\n        packageManager: packageManager,\n        packageManagerArguments: packageManagerArguments\n      });\n    }\n    var _getConfig = (0, _config).getConfig(projectRoot, {\n        skipPlugins: true\n      }),\n      exp = _getConfig.exp;\n    return installPackagesAsync(projectRoot, {\n      packageManager: packageManager,\n      packages: packages,\n      packageManagerArguments: packageManagerArguments,\n      sdkVersion: exp.sdkVersion\n    });\n  });\n  return _installAsync.apply(this, arguments);\n}\nfunction installPackagesAsync(_x3, _x4) {\n  return _installPackagesAsync.apply(this, arguments);\n}\nfunction _installPackagesAsync() {\n  _installPackagesAsync = _asyncToGenerator(function* (projectRoot, _ref) {\n    var packages = _ref.packages,\n      packageManager = _ref.packageManager,\n      sdkVersion = _ref.sdkVersion,\n      packageManagerArguments = _ref.packageManagerArguments;\n    var _getConfig2 = (0, _config).getConfig(projectRoot, {\n        skipPlugins: true\n      }),\n      pkg = _getConfig2.pkg;\n    var versioning = yield (0, _getVersionedPackages).getVersionedPackagesAsync(projectRoot, {\n      packages: packages,\n      sdkVersion: sdkVersion,\n      pkg: pkg\n    });\n    Log.log(_chalk.default`\\u203A Installing ${versioning.messages.length ? versioning.messages.join(\" and \") + \" \" : \"\"}using {bold ${packageManager.name}}`);\n    if (versioning.excludedNativeModules.length) {\n      Log.log(_chalk.default`\\u203A Using latest version instead of ${(0, _strings).joinWithCommasAnd(versioning.excludedNativeModules.map(function (_ref3) {\n        var bundledNativeVersion = _ref3.bundledNativeVersion,\n          name = _ref3.name;\n        return `${bundledNativeVersion} for ${name}`;\n      }))} because ${versioning.excludedNativeModules.length > 1 ? \"they are\" : \"it is\"} listed in {bold expo.install.exclude} in package.json. ${(0, _link).learnMore(\"https://expo.dev/more/expo-cli/#configuring-dependency-validation\")}`);\n    }\n    yield packageManager.addAsync([].concat(_toConsumableArray(packageManagerArguments), _toConsumableArray(versioning.packages)));\n    yield applyPluginsAsync(projectRoot, versioning.packages);\n  });\n  return _installPackagesAsync.apply(this, arguments);\n}\nfunction fixPackagesAsync(_x5, _x6) {\n  return _fixPackagesAsync.apply(this, arguments);\n}\nfunction _fixPackagesAsync() {\n  _fixPackagesAsync = _asyncToGenerator(function* (projectRoot, _ref2) {\n    var packages = _ref2.packages,\n      packageManager = _ref2.packageManager,\n      sdkVersion = _ref2.sdkVersion,\n      packageManagerArguments = _ref2.packageManagerArguments;\n    if (!packages.length) {\n      return;\n    }\n    var _groupBy = (0, _array).groupBy(packages, function (dep) {\n        return dep.packageType;\n      }),\n      _groupBy$dependencies = _groupBy.dependencies,\n      dependencies = _groupBy$dependencies === void 0 ? [] : _groupBy$dependencies,\n      _groupBy$devDependenc = _groupBy.devDependencies,\n      devDependencies = _groupBy$devDependenc === void 0 ? [] : _groupBy$devDependenc;\n    var versioningMessages = (0, _getVersionedPackages).getOperationLog({\n      othersCount: 0,\n      nativeModulesCount: packages.length,\n      sdkVersion: sdkVersion\n    });\n    Log.log(_chalk.default`\\u203A Installing ${versioningMessages.length ? versioningMessages.join(\" and \") + \" \" : \"\"}using {bold ${packageManager.name}}`);\n    if (dependencies.length) {\n      var versionedPackages = dependencies.map(function (dep) {\n        return `${dep.packageName}@${dep.expectedVersionOrRange}`;\n      });\n      yield packageManager.addAsync([].concat(_toConsumableArray(packageManagerArguments), _toConsumableArray(versionedPackages)));\n      yield applyPluginsAsync(projectRoot, versionedPackages);\n    }\n    if (devDependencies.length) {\n      yield packageManager.addDevAsync([].concat(_toConsumableArray(packageManagerArguments), _toConsumableArray(devDependencies.map(function (dep) {\n        return `${dep.packageName}@${dep.expectedVersionOrRange}`;\n      }))));\n    }\n  });\n  return _fixPackagesAsync.apply(this, arguments);\n}\nfunction applyPluginsAsync(_x7, _x8) {\n  return _applyPluginsAsync.apply(this, arguments);\n}\nfunction _applyPluginsAsync() {\n  _applyPluginsAsync = _asyncToGenerator(function* (projectRoot, packages) {\n    var _yield$Promise$resolv = yield Promise.resolve().then(function () {\n        return _interopRequireWildcard(require(\"./utils/autoAddConfigPlugins\"));\n      }),\n      autoAddConfigPluginsAsync = _yield$Promise$resolv.autoAddConfigPluginsAsync;\n    try {\n      var _getConfig3 = (0, _config).getConfig(projectRoot, {\n          skipSDKVersionRequirement: true\n        }),\n        exp = _getConfig3.exp;\n      yield autoAddConfigPluginsAsync(projectRoot, exp, packages.map(function (pkg) {\n        return pkg.split(\"@\")[0];\n      }).filter(Boolean));\n    } catch (error) {\n      if (error.isPluginError) {\n        Log.warn(`Skipping config plugin check: ` + error.message);\n        return;\n      }\n      throw error;\n    }\n  });\n  return _applyPluginsAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_toConsumableArray","require","_asyncToGenerator","installAsync","installPackagesAsync","fixPackagesAsync","_config","PackageManager","_interopRequireWildcard","_chalk","_interopRequireDefault","Log","_getVersionedPackages","_array","_findUp","_link","_nodeEnv","_strings","_checkPackages","_x","_x2","_installAsync","apply","arguments","packages","options","packageManagerArguments","length","undefined","setNodeEnv","_projectRoot","projectRoot","findUpProjectRootOrAssert","process","cwd","load","packageManager","createForProject","npm","yarn","bun","pnpm","silent","log","check","fix","checkPackagesAsync","_getConfig","getConfig","skipPlugins","exp","sdkVersion","_x3","_x4","_installPackagesAsync","_ref","_getConfig2","pkg","versioning","getVersionedPackagesAsync","default","messages","join","name","excludedNativeModules","joinWithCommasAnd","map","_ref3","bundledNativeVersion","learnMore","addAsync","concat","applyPluginsAsync","_x5","_x6","_fixPackagesAsync","_ref2","_groupBy","groupBy","dep","packageType","_groupBy$dependencies","dependencies","_groupBy$devDependenc","devDependencies","versioningMessages","getOperationLog","othersCount","nativeModulesCount","versionedPackages","packageName","expectedVersionOrRange","addDevAsync","_x7","_x8","_applyPluginsAsync","_yield$Promise$resolv","Promise","resolve","then","autoAddConfigPluginsAsync","_getConfig3","skipSDKVersionRequirement","split","filter","Boolean","error","isPluginError","warn","message"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\install\\installAsync.ts"],"sourcesContent":["import { getConfig } from '@expo/config';\nimport * as PackageManager from '@expo/package-manager';\nimport chalk from 'chalk';\n\nimport * as Log from '../log';\nimport {\n  getOperationLog,\n  getVersionedPackagesAsync,\n} from '../start/doctor/dependencies/getVersionedPackages';\nimport { getVersionedDependenciesAsync } from '../start/doctor/dependencies/validateDependenciesVersions';\nimport { groupBy } from '../utils/array';\nimport { findUpProjectRootOrAssert } from '../utils/findUp';\nimport { learnMore } from '../utils/link';\nimport { setNodeEnv } from '../utils/nodeEnv';\nimport { joinWithCommasAnd } from '../utils/strings';\nimport { checkPackagesAsync } from './checkPackages';\nimport { Options } from './resolveOptions';\n\nexport async function installAsync(\n  packages: string[],\n  options: Options & { projectRoot?: string },\n  packageManagerArguments: string[] = []\n) {\n  setNodeEnv('development');\n  // Locate the project root based on the process current working directory.\n  // This enables users to run `npx expo install` from a subdirectory of the project.\n  const projectRoot = options.projectRoot ?? findUpProjectRootOrAssert(process.cwd());\n  require('@expo/env').load(projectRoot);\n\n  // Resolve the package manager used by the project, or based on the provided arguments.\n  const packageManager = PackageManager.createForProject(projectRoot, {\n    npm: options.npm,\n    yarn: options.yarn,\n    bun: options.bun,\n    pnpm: options.pnpm,\n    silent: options.silent,\n    log: Log.log,\n  });\n\n  if (options.check || options.fix) {\n    return await checkPackagesAsync(projectRoot, {\n      packages,\n      options,\n      packageManager,\n      packageManagerArguments,\n    });\n  }\n\n  // Read the project Expo config without plugins.\n  const { exp } = getConfig(projectRoot, {\n    // Sometimes users will add a plugin to the config before installing the library,\n    // this wouldn't work unless we dangerously disable plugin serialization.\n    skipPlugins: true,\n  });\n\n  // Resolve the versioned packages, then install them.\n  return installPackagesAsync(projectRoot, {\n    packageManager,\n    packages,\n    packageManagerArguments,\n    sdkVersion: exp.sdkVersion!,\n  });\n}\n\n/** Version packages and install in a project. */\nexport async function installPackagesAsync(\n  projectRoot: string,\n  {\n    packages,\n    packageManager,\n    sdkVersion,\n    packageManagerArguments,\n  }: {\n    /**\n     * List of packages to version, grouped by the type of dependency.\n     * @example ['uuid', 'react-native-reanimated@latest']\n     */\n    packages: string[];\n    /** Package manager to use when installing the versioned packages. */\n    packageManager: PackageManager.NodePackageManager;\n    /**\n     * SDK to version `packages` for.\n     * @example '44.0.0'\n     */\n    sdkVersion: string;\n    /**\n     * Extra parameters to pass to the `packageManager` when installing versioned packages.\n     * @example ['--no-save']\n     */\n    packageManagerArguments: string[];\n  }\n): Promise<void> {\n  // Read the project Expo config without plugins.\n  const { pkg } = getConfig(projectRoot, {\n    // Sometimes users will add a plugin to the config before installing the library,\n    // this wouldn't work unless we dangerously disable plugin serialization.\n    skipPlugins: true,\n  });\n\n  //assertNotInstallingExcludedPackages(projectRoot, packages, pkg);\n\n  const versioning = await getVersionedPackagesAsync(projectRoot, {\n    packages,\n    // sdkVersion is always defined because we don't skipSDKVersionRequirement in getConfig.\n    sdkVersion,\n    pkg,\n  });\n\n  Log.log(\n    chalk`\\u203A Installing ${\n      versioning.messages.length ? versioning.messages.join(' and ') + ' ' : ''\n    }using {bold ${packageManager.name}}`\n  );\n\n  if (versioning.excludedNativeModules.length) {\n    Log.log(\n      chalk`\\u203A Using latest version instead of ${joinWithCommasAnd(\n        versioning.excludedNativeModules.map(\n          ({ bundledNativeVersion, name }) => `${bundledNativeVersion} for ${name}`\n        )\n      )} because ${\n        versioning.excludedNativeModules.length > 1 ? 'they are' : 'it is'\n      } listed in {bold expo.install.exclude} in package.json. ${learnMore(\n        'https://expo.dev/more/expo-cli/#configuring-dependency-validation'\n      )}`\n    );\n  }\n\n  await packageManager.addAsync([...packageManagerArguments, ...versioning.packages]);\n\n  await applyPluginsAsync(projectRoot, versioning.packages);\n}\n\nexport async function fixPackagesAsync(\n  projectRoot: string,\n  {\n    packages,\n    packageManager,\n    sdkVersion,\n    packageManagerArguments,\n  }: {\n    packages: Awaited<ReturnType<typeof getVersionedDependenciesAsync>>;\n    /** Package manager to use when installing the versioned packages. */\n    packageManager: PackageManager.NodePackageManager;\n    /**\n     * SDK to version `packages` for.\n     * @example '44.0.0'\n     */\n    sdkVersion: string;\n    /**\n     * Extra parameters to pass to the `packageManager` when installing versioned packages.\n     * @example ['--no-save']\n     */\n    packageManagerArguments: string[];\n  }\n): Promise<void> {\n  if (!packages.length) {\n    return;\n  }\n\n  const { dependencies = [], devDependencies = [] } = groupBy(packages, (dep) => dep.packageType);\n  const versioningMessages = getOperationLog({\n    othersCount: 0, // All fixable packages are versioned\n    nativeModulesCount: packages.length,\n    sdkVersion,\n  });\n\n  Log.log(\n    chalk`\\u203A Installing ${\n      versioningMessages.length ? versioningMessages.join(' and ') + ' ' : ''\n    }using {bold ${packageManager.name}}`\n  );\n\n  if (dependencies.length) {\n    const versionedPackages = dependencies.map(\n      (dep) => `${dep.packageName}@${dep.expectedVersionOrRange}`\n    );\n\n    await packageManager.addAsync([...packageManagerArguments, ...versionedPackages]);\n\n    await applyPluginsAsync(projectRoot, versionedPackages);\n  }\n\n  if (devDependencies.length) {\n    await packageManager.addDevAsync([\n      ...packageManagerArguments,\n      ...devDependencies.map((dep) => `${dep.packageName}@${dep.expectedVersionOrRange}`),\n    ]);\n  }\n}\n\n/**\n * A convenience feature for automatically applying Expo Config Plugins to the `app.json` after installing them.\n * This should be dropped in favor of autolinking in the future.\n */\nasync function applyPluginsAsync(projectRoot: string, packages: string[]) {\n  const { autoAddConfigPluginsAsync } = await import('./utils/autoAddConfigPlugins');\n\n  try {\n    const { exp } = getConfig(projectRoot, { skipSDKVersionRequirement: true });\n\n    // Only auto add plugins if the plugins array is defined or if the project is using SDK +42.\n    await autoAddConfigPluginsAsync(\n      projectRoot,\n      exp,\n      // Split any possible NPM tags. i.e. `expo@latest` -> `expo`\n      packages.map((pkg) => pkg.split('@')[0]).filter(Boolean)\n    );\n  } catch (error: any) {\n    // If we fail to apply plugins, the log a warning and continue.\n    if (error.isPluginError) {\n      Log.warn(`Skipping config plugin check: ` + error.message);\n      return;\n    }\n    // Any other error, rethrow.\n    throw error;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}