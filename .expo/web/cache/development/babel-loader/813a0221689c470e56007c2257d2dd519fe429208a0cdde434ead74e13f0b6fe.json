{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ensureDeviceIsCodeSignedForDeploymentAsync = ensureDeviceIsCodeSignedForDeploymentAsync;\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar Log = _interopRequireWildcard(require(\"../../../log\"));\nvar Security = _interopRequireWildcard(require(\"./Security\"));\nvar _resolveCertificateSigningIdentity = require(\"./resolveCertificateSigningIdentity\");\nvar _xcodeCodeSigning = require(\"./xcodeCodeSigning\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction ensureDeviceIsCodeSignedForDeploymentAsync(_x) {\n  return _ensureDeviceIsCodeSignedForDeploymentAsync.apply(this, arguments);\n}\nfunction _ensureDeviceIsCodeSignedForDeploymentAsync() {\n  _ensureDeviceIsCodeSignedForDeploymentAsync = _asyncToGenerator(function* (projectRoot) {\n    if (isCodeSigningConfigured(projectRoot)) {\n      return null;\n    }\n    return configureCodeSigningAsync(projectRoot);\n  });\n  return _ensureDeviceIsCodeSignedForDeploymentAsync.apply(this, arguments);\n}\nfunction isCodeSigningConfigured(projectRoot) {\n  var signingInfo = (0, _xcodeCodeSigning).getCodeSigningInfoForPbxproj(projectRoot);\n  var allTargetsHaveTeams = Object.values(signingInfo).reduce(function (prev, curr) {\n    return prev && !!curr.developmentTeams.length;\n  }, true);\n  if (allTargetsHaveTeams) {\n    var teamList = Object.values(signingInfo).reduce(function (prev, curr) {\n      return prev.concat([curr.developmentTeams[0]]);\n    }, []);\n    Log.log(_chalk.default.dim`\\u203A Auto signing app using team(s): ${teamList.join(\", \")}`);\n    return true;\n  }\n  var allTargetsHaveProfiles = Object.values(signingInfo).reduce(function (prev, curr) {\n    return prev && !!curr.provisioningProfiles.length;\n  }, true);\n  if (allTargetsHaveProfiles) {\n    return true;\n  }\n  return false;\n}\nfunction configureCodeSigningAsync(_x2) {\n  return _configureCodeSigningAsync.apply(this, arguments);\n}\nfunction _configureCodeSigningAsync() {\n  _configureCodeSigningAsync = _asyncToGenerator(function* (projectRoot) {\n    var ids = yield Security.findIdentitiesAsync();\n    var id = yield (0, _resolveCertificateSigningIdentity).resolveCertificateSigningIdentityAsync(ids);\n    Log.log(`\\u203A Signing and building iOS app with: ${id.codeSigningInfo}`);\n    (0, _xcodeCodeSigning).setAutoCodeSigningInfoForPbxproj(projectRoot, {\n      appleTeamId: id.appleTeamId\n    });\n    return id.appleTeamId;\n  });\n  return _configureCodeSigningAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","ensureDeviceIsCodeSignedForDeploymentAsync","_chalk","_interopRequireDefault","Log","_interopRequireWildcard","Security","_resolveCertificateSigningIdentity","_xcodeCodeSigning","_x","_ensureDeviceIsCodeSignedForDeploymentAsync","apply","arguments","projectRoot","isCodeSigningConfigured","configureCodeSigningAsync","signingInfo","getCodeSigningInfoForPbxproj","allTargetsHaveTeams","Object","values","reduce","prev","curr","developmentTeams","length","teamList","concat","log","default","dim","join","allTargetsHaveProfiles","provisioningProfiles","_x2","_configureCodeSigningAsync","ids","findIdentitiesAsync","id","resolveCertificateSigningIdentityAsync","codeSigningInfo","setAutoCodeSigningInfoForPbxproj","appleTeamId"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\run\\ios\\codeSigning\\configureCodeSigning.ts"],"sourcesContent":["import chalk from 'chalk';\n\nimport * as Log from '../../../log';\nimport * as Security from './Security';\nimport { resolveCertificateSigningIdentityAsync } from './resolveCertificateSigningIdentity';\nimport { getCodeSigningInfoForPbxproj, setAutoCodeSigningInfoForPbxproj } from './xcodeCodeSigning';\n\nexport async function ensureDeviceIsCodeSignedForDeploymentAsync(\n  projectRoot: string\n): Promise<string | null> {\n  if (isCodeSigningConfigured(projectRoot)) {\n    return null;\n  }\n  return configureCodeSigningAsync(projectRoot);\n}\n\nfunction isCodeSigningConfigured(projectRoot: string): boolean {\n  // Check if the app already has a development team defined.\n  const signingInfo = getCodeSigningInfoForPbxproj(projectRoot);\n\n  const allTargetsHaveTeams = Object.values(signingInfo).reduce((prev, curr) => {\n    return prev && !!curr.developmentTeams.length;\n  }, true);\n\n  if (allTargetsHaveTeams) {\n    const teamList = Object.values(signingInfo).reduce<string[]>((prev, curr) => {\n      return prev.concat([curr.developmentTeams[0]]);\n    }, []);\n    Log.log(chalk.dim`\\u203A Auto signing app using team(s): ${teamList.join(', ')}`);\n    return true;\n  }\n\n  const allTargetsHaveProfiles = Object.values(signingInfo).reduce((prev, curr) => {\n    return prev && !!curr.provisioningProfiles.length;\n  }, true);\n\n  if (allTargetsHaveProfiles) {\n    // this indicates that the user has manual code signing setup (possibly for production).\n    return true;\n  }\n  return false;\n}\n\nasync function configureCodeSigningAsync(projectRoot: string) {\n  const ids = await Security.findIdentitiesAsync();\n\n  const id = await resolveCertificateSigningIdentityAsync(ids);\n\n  Log.log(`\\u203A Signing and building iOS app with: ${id.codeSigningInfo}`);\n\n  setAutoCodeSigningInfoForPbxproj(projectRoot, {\n    appleTeamId: id.appleTeamId!,\n  });\n  return id.appleTeamId!;\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,iBAAA,GAAAC,OAAA;;;;QAOsBC,0CAA0C,GAA1CA,0CAA0C;AAP9C,IAAAC,MAAO,GAAAC,sBAAA,CAAAH,OAAA,CAAP,OAAO;AAEb,IAAAI,GAAG,GAAAC,uBAAA,CAAAL,OAAA,eAAoB,EAApB;AACH,IAAAM,QAAQ,GAAAD,uBAAA,CAAAL,OAAA,aAAkB,EAAlB;AACmC,IAAAO,kCAAqC,GAAAP,OAAA;AACb,IAAAQ,iBAAoB,GAAAR,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;SAE7EC,0CAA0CA,CAAAQ,EAAA;EAAA,OAAAC,2CAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,4CAAA;EAAAA,2CAAA,GAAAX,iBAAA,CAAzD,WACLc,WAAmB,EACK;IACxB,IAAIC,uBAAuB,CAACD,WAAW,CAAC,EAAE;MACxC,OAAO,IAAI;;IAEb,OAAOE,yBAAyB,CAACF,WAAW,CAAC;GAC9C;EAAA,OAAAH,2CAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAED,SAASE,uBAAuBA,CAACD,WAAmB,EAAW;EAE7D,IAAMG,WAAW,GAAG,IAAAR,iBAA4B,EAAaS,4BAAb,CAACJ,WAAW,CAAC;EAE7D,IAAMK,mBAAmB,GAAGC,MAAM,CAACC,MAAM,CAACJ,WAAW,CAAC,CAACK,MAAM,CAAC,UAACC,IAAI,EAAEC,IAAI,EAAK;IAC5E,OAAOD,IAAI,IAAI,CAAC,CAACC,IAAI,CAACC,gBAAgB,CAACC,MAAM;GAC9C,EAAE,IAAI,CAAC;EAER,IAAIP,mBAAmB,EAAE;IACvB,IAAMQ,QAAQ,GAAGP,MAAM,CAACC,MAAM,CAACJ,WAAW,CAAC,CAACK,MAAM,CAAW,UAACC,IAAI,EAAEC,IAAI,EAAK;MAC3E,OAAOD,IAAI,CAACK,MAAM,CAAC,CAACJ,IAAI,CAACC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;KAC/C,EAAE,EAAE,CAAC;IACNpB,GAAG,CAACwB,GAAG,CAAC1B,MAAK,CAAA2B,OAAA,CAACC,GAAI,0CAAyCJ,QAAQ,CAACK,IAAI,CAAC,IAAI,CAAE,EAAC,CAAC;IACjF,OAAO,IAAI;;EAGb,IAAMC,sBAAsB,GAAGb,MAAM,CAACC,MAAM,CAACJ,WAAW,CAAC,CAACK,MAAM,CAAC,UAACC,IAAI,EAAEC,IAAI,EAAK;IAC/E,OAAOD,IAAI,IAAI,CAAC,CAACC,IAAI,CAACU,oBAAoB,CAACR,MAAM;GAClD,EAAE,IAAI,CAAC;EAER,IAAIO,sBAAsB,EAAE;IAE1B,OAAO,IAAI;;EAEb,OAAO,KAAK;;AACb,SAEcjB,yBAAyBA,CAAAmB,GAAA;EAAA,OAAAC,0BAAA,CAAAxB,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAuB,2BAAA;EAAAA,0BAAA,GAAApC,iBAAA,CAAxC,WAAyCc,WAAmB,EAAE;IAC5D,IAAMuB,GAAG,SAAS9B,QAAQ,CAAC+B,mBAAmB,EAAE;IAEhD,IAAMC,EAAE,SAAS,IAAA/B,kCAAsC,EAAKgC,sCAAL,CAACH,GAAG,CAAC;IAE5DhC,GAAG,CAACwB,GAAG,CAAE,6CAA4CU,EAAE,CAACE,eAAgB,EAAC,CAAC;IAE1E,IAAAhC,iBAAgC,EAE9BiC,gCAF8B,CAAC5B,WAAW,EAAE;MAC5C6B,WAAW,EAAEJ,EAAE,CAACI;KACjB,CAAC;IACF,OAAOJ,EAAE,CAACI,WAAW;GACtB;EAAA,OAAAP,0BAAA,CAAAxB,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}