{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createLegacyPlugin = createLegacyPlugin;\nfunction _configPlugins() {\n  var data = require(\"@expo/config-plugins\");\n  _configPlugins = function _configPlugins() {\n    return data;\n  };\n  return data;\n}\nvar toCamelCase = function toCamelCase(s) {\n  return s.replace(/-./g, function (x) {\n    return x.toUpperCase()[1];\n  });\n};\nfunction isModuleExcluded(config, packageName) {\n  var _config$_internal;\n  return ((_config$_internal = config._internal) === null || _config$_internal === void 0 ? void 0 : _config$_internal.autolinkedModules) && !config._internal.autolinkedModules.includes(packageName);\n}\nfunction createLegacyPlugin(_ref) {\n  var packageName = _ref.packageName,\n    fallback = _ref.fallback;\n  var withFallback;\n  if (Array.isArray(fallback)) {\n    withFallback = function withFallback(config) {\n      return (0, _configPlugins().withPlugins)(config, fallback);\n    };\n  } else {\n    withFallback = fallback;\n  }\n  var withUnknown = function withUnknown(config) {\n    if (isModuleExcluded(config, packageName)) {\n      return (0, _configPlugins().createRunOncePlugin)(withFallback, packageName)(config);\n    }\n    return (0, _configPlugins().withStaticPlugin)(config, {\n      _isLegacyPlugin: true,\n      plugin: packageName,\n      fallback: (0, _configPlugins().createRunOncePlugin)(withFallback, packageName)\n    });\n  };\n  var methodName = toCamelCase(`with-${packageName}`);\n  Object.defineProperty(withUnknown, 'name', {\n    value: methodName\n  });\n  return withUnknown;\n}","map":{"version":3,"names":["_configPlugins","data","require","toCamelCase","s","replace","x","toUpperCase","isModuleExcluded","config","packageName","_config$_internal","_internal","autolinkedModules","includes","createLegacyPlugin","_ref","fallback","withFallback","Array","isArray","withPlugins","withUnknown","createRunOncePlugin","withStaticPlugin","_isLegacyPlugin","plugin","methodName","Object","defineProperty","value"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\prebuild-config\\src\\plugins\\unversioned\\createLegacyPlugin.ts"],"sourcesContent":["import {\n  ConfigPlugin,\n  createRunOncePlugin,\n  PluginParameters,\n  withPlugins,\n  withStaticPlugin,\n} from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\n\nconst toCamelCase = (s: string) => s.replace(/-./g, (x) => x.toUpperCase()[1]);\n\nfunction isModuleExcluded(config: Pick<ExpoConfig, '_internal'>, packageName: string): boolean {\n  // Skip using the versioned plugin when autolinking is enabled\n  // and doesn't link the native module.\n  return (\n    config._internal?.autolinkedModules && !config._internal.autolinkedModules.includes(packageName)\n  );\n}\n\nexport function createLegacyPlugin({\n  packageName,\n  fallback,\n}: {\n  packageName: string;\n  fallback: ConfigPlugin | PluginParameters<typeof withPlugins>;\n}): ConfigPlugin {\n  let withFallback: ConfigPlugin;\n\n  if (Array.isArray(fallback)) {\n    withFallback = (config) => withPlugins(config, fallback);\n  } else {\n    withFallback = fallback;\n  }\n\n  const withUnknown: ConfigPlugin = (config) => {\n    // Skip using the versioned plugin when autolinking is enabled\n    // and doesn't link the native module.\n    if (isModuleExcluded(config, packageName)) {\n      return createRunOncePlugin(withFallback, packageName)(config);\n    }\n\n    return withStaticPlugin(config, {\n      _isLegacyPlugin: true,\n      plugin: packageName,\n      // If the static plugin isn't found, use the unversioned one.\n      fallback: createRunOncePlugin(withFallback, packageName),\n    });\n  };\n\n  const methodName = toCamelCase(`with-${packageName}`);\n  Object.defineProperty(withUnknown, 'name', {\n    value: methodName,\n  });\n\n  return withUnknown;\n}\n"],"mappings":";;;;;;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA,GAAAC,OAAA;EAAAF,cAAA,YAAAA,eAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AASA,IAAME,WAAW,GAAI,SAAfA,WAAWA,CAAIC,CAAS;EAAA,OAAKA,CAAC,CAACC,OAAO,CAAC,KAAK,EAAG,UAAAC,CAAC;IAAA,OAAKA,CAAC,CAACC,WAAW,EAAE,CAAC,CAAC,CAAC;EAAA,EAAC;AAAA;AAE9E,SAASC,gBAAgBA,CAACC,MAAqC,EAAEC,WAAmB,EAAW;EAAA,IAAAC,iBAAA;EAG7F,OACE,EAAAA,iBAAA,GAAAF,MAAM,CAACG,SAAS,cAAAD,iBAAA,uBAAhBA,iBAAA,CAAkBE,iBAAiB,KAAI,CAACJ,MAAM,CAACG,SAAS,CAACC,iBAAiB,CAACC,QAAQ,CAACJ,WAAW,CAAC;AAEpG;AAEO,SAASK,kBAAkBA,CAAAC,IAAA,EAMjB;EAAA,IALfN,WAAW,GAAAM,IAAA,CAAXN,WAAW;IACXO,QAAA,GAAAD,IAAA,CAAAC,QAAA;EAKA,IAAIC,YAA0B;EAE9B,IAAIC,KAAK,CAACC,OAAO,CAACH,QAAQ,CAAC,EAAE;IAC3BC,YAAY,GAAI,SAAAA,aAAAT,MAAM;MAAA,OAAK,IAAAT,cAAA,GAAAqB,WAAW,EAACZ,MAAM,EAAEQ,QAAQ,CAAC;IAAA;EAC1D,CAAC,MAAM;IACLC,YAAY,GAAGD,QAAQ;EACzB;EAEA,IAAMK,WAAyB,GAAI,SAA7BA,WAAyBA,CAAIb,MAAM,EAAK;IAG5C,IAAID,gBAAgB,CAACC,MAAM,EAAEC,WAAW,CAAC,EAAE;MACzC,OAAO,IAAAV,cAAA,GAAAuB,mBAAmB,EAACL,YAAY,EAAER,WAAW,CAAC,CAACD,MAAM,CAAC;IAC/D;IAEA,OAAO,IAAAT,cAAA,GAAAwB,gBAAgB,EAACf,MAAM,EAAE;MAC9BgB,eAAe,EAAE,IAAI;MACrBC,MAAM,EAAEhB,WAAW;MAEnBO,QAAQ,EAAE,IAAAjB,cAAA,GAAAuB,mBAAmB,EAACL,YAAY,EAAER,WAAW;IACzD,CAAC,CAAC;EACJ,CAAC;EAED,IAAMiB,UAAU,GAAGxB,WAAW,CAAE,QAAOO,WAAY,EAAC,CAAC;EACrDkB,MAAM,CAACC,cAAc,CAACP,WAAW,EAAE,MAAM,EAAE;IACzCQ,KAAK,EAAEH;EACT,CAAC,CAAC;EAEF,OAAOL,WAAW;AACpB"},"metadata":{},"sourceType":"script","externalDependencies":[]}