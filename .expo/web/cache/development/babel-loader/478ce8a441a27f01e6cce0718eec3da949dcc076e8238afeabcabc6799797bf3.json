{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/cli/node_modules/type-fest/source/conditional-pick.d.ts"],"sourcesContent":["import {ConditionalKeys} from './conditional-keys';\n\n/**\nPick keys from the shape that matches the given `Condition`.\n\nThis is useful when you want to create a new type from a specific subset of an existing type. For example, you might want to pick all the primitive properties from a class and form a new automatically derived type.\n\n@example\n```\nimport {Primitive, ConditionalPick} from 'type-fest';\n\nclass Awesome {\n\tname: string;\n\tsuccesses: number;\n\tfailures: bigint;\n\n\trun() {}\n}\n\ntype PickPrimitivesFromAwesome = ConditionalPick<Awesome, Primitive>;\n//=> {name: string; successes: number; failures: bigint}\n```\n\n@example\n```\nimport {ConditionalPick} from 'type-fest';\n\ninterface Example {\n\ta: string;\n\tb: string | number;\n\tc: () => void;\n\td: {};\n}\n\ntype StringKeysOnly = ConditionalPick<Example, string>;\n//=> {a: string}\n```\n*/\nexport type ConditionalPick<Base, Condition> = Pick<\n\tBase,\n\tConditionalKeys<Base, Condition>\n>;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}