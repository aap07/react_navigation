{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as React from 'react';\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar RNCMaskedView;\ntry {\n  RNCMaskedView = require('@react-native-masked-view/masked-view').default;\n} catch (e) {}\nvar isMaskedViewAvailable = UIManager.getViewManagerConfig('RNCMaskedView') != null;\nexport default function MaskedView(_ref) {\n  var children = _ref.children,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  if (isMaskedViewAvailable && RNCMaskedView) {\n    return _jsx(RNCMaskedView, _objectSpread(_objectSpread({}, rest), {}, {\n      children: children\n    }));\n  }\n  return children;\n}","map":{"version":3,"names":["React","UIManager","jsx","_jsx","RNCMaskedView","require","default","e","isMaskedViewAvailable","getViewManagerConfig","MaskedView","_ref","children","rest","_objectWithoutProperties","_excluded","_objectSpread"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-navigation/elements/src/MaskedViewNative.tsx"],"sourcesContent":["/**\n * The native MaskedView that we explicitly re-export for supported platforms: Android, iOS.\n */\nimport * as React from 'react';\nimport { UIManager } from 'react-native';\n\ntype MaskedViewType =\n  typeof import('@react-native-masked-view/masked-view').default;\n\ntype Props = React.ComponentProps<MaskedViewType> & {\n  children: React.ReactElement;\n};\n\nlet RNCMaskedView: MaskedViewType | undefined;\n\ntry {\n  // Add try/catch to support usage even if it's not installed, since it's optional.\n  // Newer versions of Metro will handle it properly.\n  RNCMaskedView = require('@react-native-masked-view/masked-view').default;\n} catch (e) {\n  // Ignore\n}\n\nconst isMaskedViewAvailable =\n  UIManager.getViewManagerConfig('RNCMaskedView') != null;\n\nexport default function MaskedView({ children, ...rest }: Props) {\n  if (isMaskedViewAvailable && RNCMaskedView) {\n    return <RNCMaskedView {...rest}>{children}</RNCMaskedView>;\n  }\n\n  return children;\n}\n"],"mappings":";;;;;AAGA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAC,OAAAC,SAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAU/B,IAAIC,aAAyC;AAE7C,IAAI;EAGFA,aAAa,GAAGC,OAAO,CAAC,uCAAuC,CAAC,CAACC,OAAO;AAC1E,CAAC,CAAC,OAAOC,CAAC,EAAE,CAEZ;AAEA,IAAMC,qBAAqB,GACzBP,SAAS,CAACQ,oBAAoB,CAAC,eAAe,CAAC,IAAI,IAAI;AAEzD,eAAe,SAASC,UAAUA,CAAAC,IAAA,EAA+B;EAAA,IAA5BC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;IAAKC,IAAI,GAAAC,wBAAA,CAAAH,IAAA,EAAAI,SAAA;EACpD,IAAIP,qBAAqB,IAAIJ,aAAa,EAAE;IAC1C,OAAOD,IAAA,CAACC,aAAa,EAAAY,aAAA,CAAAA,aAAA,KAAKH,IAAI;MAAAD,QAAA,EAAGA;IAAQ,EAAgB,CAAC;EAC5D;EAEA,OAAOA,QAAQ;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}