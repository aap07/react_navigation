{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _metro() {\n  var data = _interopRequireDefault(require(\"metro\"));\n  _metro = function _metro() {\n    return data;\n  };\n  return data;\n}\nfunction _metroCore() {\n  var data = require(\"metro-core\");\n  _metroCore = function _metroCore() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _cliServerApi() {\n  var data = require(\"@react-native-community/cli-server-api\");\n  _cliServerApi = function _cliServerApi() {\n    return data;\n  };\n  return data;\n}\nvar _loadMetroConfig = _interopRequireDefault(require(\"../../tools/loadMetroConfig\"));\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function _cliTools() {\n    return data;\n  };\n  return data;\n}\nvar _watchMode = _interopRequireDefault(require(\"./watchMode\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction runServer(_x, _x2, _x3) {\n  return _runServer.apply(this, arguments);\n}\nfunction _runServer() {\n  _runServer = _asyncToGenerator(function* (_argv, ctx, args) {\n    var reportEvent;\n    var terminal = new (_metroCore().Terminal)(process.stdout);\n    var ReporterImpl = getReporterImpl(args.customLogReporterPath);\n    var terminalReporter = new ReporterImpl(terminal);\n    var reporter = {\n      update: function update(event) {\n        terminalReporter.update(event);\n        if (reportEvent) {\n          reportEvent(event);\n        }\n      }\n    };\n    var metroConfig = yield (0, _loadMetroConfig.default)(ctx, {\n      config: args.config,\n      maxWorkers: args.maxWorkers,\n      port: args.port,\n      resetCache: args.resetCache,\n      watchFolders: args.watchFolders,\n      projectRoot: args.projectRoot,\n      sourceExts: args.sourceExts,\n      reporter: reporter\n    });\n    if (args.assetPlugins) {\n      metroConfig.transformer.assetPlugins = args.assetPlugins.map(function (plugin) {\n        return require.resolve(plugin);\n      });\n    }\n    var _ref = (0, _cliServerApi().createDevServerMiddleware)({\n        host: args.host,\n        port: metroConfig.server.port,\n        watchFolders: metroConfig.watchFolders\n      }),\n      middleware = _ref.middleware,\n      websocketEndpoints = _ref.websocketEndpoints,\n      messageSocketEndpoint = _ref.messageSocketEndpoint,\n      eventsSocketEndpoint = _ref.eventsSocketEndpoint;\n    middleware.use(_cliServerApi().indexPageMiddleware);\n    var customEnhanceMiddleware = metroConfig.server.enhanceMiddleware;\n    metroConfig.server.enhanceMiddleware = function (metroMiddleware, server) {\n      if (customEnhanceMiddleware) {\n        metroMiddleware = customEnhanceMiddleware(metroMiddleware, server);\n      }\n      return middleware.use(metroMiddleware);\n    };\n    var serverInstance = yield _metro().default.runServer(metroConfig, {\n      host: args.host,\n      secure: args.https,\n      secureCert: args.cert,\n      secureKey: args.key,\n      websocketEndpoints: websocketEndpoints\n    });\n    reportEvent = eventsSocketEndpoint.reportEvent;\n    if (args.interactive) {\n      (0, _watchMode.default)(messageSocketEndpoint);\n    }\n    serverInstance.keepAliveTimeout = 30000;\n    yield _cliTools().version.logIfUpdateAvailable(ctx.root);\n  });\n  return _runServer.apply(this, arguments);\n}\nfunction getReporterImpl(customLogReporterPath) {\n  if (customLogReporterPath === undefined) {\n    return require('metro/src/lib/TerminalReporter');\n  }\n  try {\n    return require(customLogReporterPath);\n  } catch (e) {\n    if (e.code !== 'MODULE_NOT_FOUND') {\n      throw e;\n    }\n    return require(_path().default.resolve(customLogReporterPath));\n  }\n}\nvar _default = runServer;\nexports.default = _default;","map":{"version":3,"names":["_asyncToGenerator","require","Object","defineProperty","exports","value","default","_metro","data","_interopRequireDefault","_metroCore","_path","_cliServerApi","_loadMetroConfig","_cliTools","_watchMode","obj","__esModule","runServer","_x","_x2","_x3","_runServer","apply","arguments","_argv","ctx","args","reportEvent","terminal","Terminal","process","stdout","ReporterImpl","getReporterImpl","customLogReporterPath","terminalReporter","reporter","update","event","metroConfig","config","maxWorkers","port","resetCache","watchFolders","projectRoot","sourceExts","assetPlugins","transformer","map","plugin","resolve","_ref","createDevServerMiddleware","host","server","middleware","websocketEndpoints","messageSocketEndpoint","eventsSocketEndpoint","use","indexPageMiddleware","customEnhanceMiddleware","enhanceMiddleware","metroMiddleware","serverInstance","secure","https","secureCert","cert","secureKey","key","interactive","keepAliveTimeout","version","logIfUpdateAvailable","root","undefined","e","code","_default"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-plugin-metro/build/commands/start/runServer.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _metro() {\n  const data = _interopRequireDefault(require(\"metro\"));\n  _metro = function () {\n    return data;\n  };\n  return data;\n}\nfunction _metroCore() {\n  const data = require(\"metro-core\");\n  _metroCore = function () {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n  _path = function () {\n    return data;\n  };\n  return data;\n}\nfunction _cliServerApi() {\n  const data = require(\"@react-native-community/cli-server-api\");\n  _cliServerApi = function () {\n    return data;\n  };\n  return data;\n}\nvar _loadMetroConfig = _interopRequireDefault(require(\"../../tools/loadMetroConfig\"));\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function () {\n    return data;\n  };\n  return data;\n}\nvar _watchMode = _interopRequireDefault(require(\"./watchMode\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// @ts-ignore untyped metro\n\nasync function runServer(_argv, ctx, args) {\n  let reportEvent;\n  const terminal = new (_metroCore().Terminal)(process.stdout);\n  const ReporterImpl = getReporterImpl(args.customLogReporterPath);\n  const terminalReporter = new ReporterImpl(terminal);\n  const reporter = {\n    update(event) {\n      terminalReporter.update(event);\n      if (reportEvent) {\n        reportEvent(event);\n      }\n    }\n  };\n  const metroConfig = await (0, _loadMetroConfig.default)(ctx, {\n    config: args.config,\n    maxWorkers: args.maxWorkers,\n    port: args.port,\n    resetCache: args.resetCache,\n    watchFolders: args.watchFolders,\n    projectRoot: args.projectRoot,\n    sourceExts: args.sourceExts,\n    reporter\n  });\n  if (args.assetPlugins) {\n    // @ts-ignore - assigning to readonly property\n    metroConfig.transformer.assetPlugins = args.assetPlugins.map(plugin => require.resolve(plugin));\n  }\n  const {\n    middleware,\n    websocketEndpoints,\n    messageSocketEndpoint,\n    eventsSocketEndpoint\n  } = (0, _cliServerApi().createDevServerMiddleware)({\n    host: args.host,\n    port: metroConfig.server.port,\n    watchFolders: metroConfig.watchFolders\n  });\n  middleware.use(_cliServerApi().indexPageMiddleware);\n  const customEnhanceMiddleware = metroConfig.server.enhanceMiddleware;\n  // @ts-ignore - assigning to readonly property\n  metroConfig.server.enhanceMiddleware = (metroMiddleware, server) => {\n    if (customEnhanceMiddleware) {\n      metroMiddleware = customEnhanceMiddleware(metroMiddleware, server);\n    }\n    return middleware.use(metroMiddleware);\n  };\n  const serverInstance = await _metro().default.runServer(metroConfig, {\n    host: args.host,\n    secure: args.https,\n    secureCert: args.cert,\n    secureKey: args.key,\n    // @ts-ignore - ws.Server types are incompatible\n    websocketEndpoints\n  });\n  reportEvent = eventsSocketEndpoint.reportEvent;\n  if (args.interactive) {\n    (0, _watchMode.default)(messageSocketEndpoint);\n  }\n\n  // In Node 8, the default keep-alive for an HTTP connection is 5 seconds. In\n  // early versions of Node 8, this was implemented in a buggy way which caused\n  // some HTTP responses (like those containing large JS bundles) to be\n  // terminated early.\n  //\n  // As a workaround, arbitrarily increase the keep-alive from 5 to 30 seconds,\n  // which should be enough to send even the largest of JS bundles.\n  //\n  // For more info: https://github.com/nodejs/node/issues/13391\n  //\n  serverInstance.keepAliveTimeout = 30000;\n  await _cliTools().version.logIfUpdateAvailable(ctx.root);\n}\nfunction getReporterImpl(customLogReporterPath) {\n  if (customLogReporterPath === undefined) {\n    return require('metro/src/lib/TerminalReporter');\n  }\n  try {\n    // First we let require resolve it, so we can require packages in node_modules\n    // as expected. eg: require('my-package/reporter');\n    return require(customLogReporterPath);\n  } catch (e) {\n    if (e.code !== 'MODULE_NOT_FOUND') {\n      throw e;\n    }\n    // If that doesn't work, then we next try relative to the cwd, eg:\n    // require('./reporter');\n    return require(_path().default.resolve(customLogReporterPath));\n  }\n}\nvar _default = runServer;\nexports.default = _default;\n\n//# sourceMappingURL=runServer.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}