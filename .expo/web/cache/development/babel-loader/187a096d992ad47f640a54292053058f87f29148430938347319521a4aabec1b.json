{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport webpack from 'webpack';\nvar DefinePlugin = function (_webpack$DefinePlugin) {\n  _inherits(DefinePlugin, _webpack$DefinePlugin);\n  var _super = _createSuper(DefinePlugin);\n  function DefinePlugin() {\n    _classCallCheck(this, DefinePlugin);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(DefinePlugin);\n}(webpack.DefinePlugin);\nexport { DefinePlugin as default };","map":{"version":3,"names":["webpack","DefinePlugin","_webpack$DefinePlugin","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","default"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/webpack-config/webpack/plugins/ExpoDefinePlugin.d.ts"],"sourcesContent":["import type { ExpoConfig } from 'expo/config';\nimport webpack from 'webpack';\nimport { Environment, ExpoPlatform, Mode } from '../types';\n/**\n * @internal\n */\nexport interface ClientEnv {\n    [key: string]: any;\n}\n/**\n * Create the global environment variables to surface in the project. Also creates the `__DEV__` boolean to provide better parity with Metro bundler.\n *\n * @param mode defines the Metro bundler `global.__DEV__` value.\n * @param publicPath passed as `process.env.PUBLIC_URL` to the app.\n * @param nativeAppManifest public values to be used in `expo-constants`.\n * @param platform native platform.\n * @internal\n */\nexport declare function createClientEnvironment(mode: Mode, publicPath: string, nativeAppManifest: ExpoConfig, platform: string): ClientEnv;\n/**\n * Required for `expo-constants` https://docs.expo.dev/versions/latest/sdk/constants/.\n * This surfaces the `app.json` (config) as an environment variable which is then parsed by `expo-constants`.\n * @category plugins\n */\nexport default class DefinePlugin extends webpack.DefinePlugin {\n    static createClientEnvironment: typeof createClientEnvironment;\n    static fromEnv: (env: Pick<Environment, 'projectRoot' | 'mode' | 'config' | 'locations' | 'platform'>) => DefinePlugin;\n    constructor({ mode, publicUrl, config, platform, }: {\n        mode: Mode;\n        publicUrl: string;\n        config: ExpoConfig;\n        platform: ExpoPlatform;\n    });\n}\n"],"mappings":";;;;;;;AACA,OAAOA,OAAO,MAAM,SAAS;AAAC,IAuBTC,YAAY,aAAAC,qBAAA;EAAAC,SAAA,CAAAF,YAAA,EAAAC,qBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,YAAA;EAAA,SAAAA,aAAA;IAAAK,eAAA,OAAAL,YAAA;IAAA,OAAAG,MAAA,CAAAG,KAAA,OAAAC,SAAA;EAAA;EAAA,OAAAC,YAAA,CAAAR,YAAA;AAAA,EAASD,OAAO,CAACC,YAAY;AAAA,SAAzCA,YAAY,IAAAS,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}