{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getApplicationIdAsync = getApplicationIdAsync;\nexports.getPackage = getPackage;\nexports.renameJniOnDiskForType = renameJniOnDiskForType;\nexports.renamePackageOnDisk = renamePackageOnDisk;\nexports.renamePackageOnDiskForType = renamePackageOnDiskForType;\nexports.setPackageInBuildGradle = setPackageInBuildGradle;\nexports.withPackageRefactor = exports.withPackageGradle = void 0;\nfunction _debug() {\n  var data = _interopRequireDefault(require(\"debug\"));\n  _debug = function _debug() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _glob() {\n  var data = require(\"glob\");\n  _glob = function _glob() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _withDangerousMod() {\n  var data = require(\"../plugins/withDangerousMod\");\n  _withDangerousMod = function _withDangerousMod() {\n    return data;\n  };\n  return data;\n}\nfunction _modules() {\n  var data = require(\"../utils/modules\");\n  _modules = function _modules() {\n    return data;\n  };\n  return data;\n}\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n  _warnings = function _warnings() {\n    return data;\n  };\n  return data;\n}\nfunction _Paths() {\n  var data = require(\"./Paths\");\n  _Paths = function _Paths() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = (0, _debug().default)('expo:config-plugins:android:package');\nvar withPackageGradle = function withPackageGradle(config) {\n  return (0, _androidPlugins().withAppBuildGradle)(config, function (config) {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setPackageInBuildGradle(config, config.modResults.contents);\n    } else {\n      (0, _warnings().addWarningAndroid)('android.package', `Cannot automatically configure app build.gradle if it's not groovy`);\n    }\n    return config;\n  });\n};\nexports.withPackageGradle = withPackageGradle;\nvar withPackageRefactor = function withPackageRefactor(config) {\n  return (0, _withDangerousMod().withDangerousMod)(config, ['android', function () {\n    var _ref = _asyncToGenerator(function* (config) {\n      yield renamePackageOnDisk(config, config.modRequest.projectRoot);\n      return config;\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }()]);\n};\nexports.withPackageRefactor = withPackageRefactor;\nfunction getPackage(config) {\n  var _config$android$packa, _config$android;\n  return (_config$android$packa = (_config$android = config.android) === null || _config$android === void 0 ? void 0 : _config$android.package) !== null && _config$android$packa !== void 0 ? _config$android$packa : null;\n}\nfunction getPackageRoot(projectRoot, type) {\n  return _path().default.join(projectRoot, 'android', 'app', 'src', type, 'java');\n}\nfunction getCurrentPackageName(projectRoot, packageRoot) {\n  var mainApplication = (0, _Paths().getProjectFilePath)(projectRoot, 'MainApplication');\n  var packagePath = _path().default.dirname(mainApplication);\n  var packagePathParts = _path().default.relative(packageRoot, packagePath).split(_path().default.sep).filter(Boolean);\n  return packagePathParts.join('.');\n}\nfunction getCurrentPackageForProjectFile(projectRoot, packageRoot, fileName, type) {\n  var filePath = (0, _glob().sync)(_path().default.join(projectRoot, `android/app/src/${type}/java/**/${fileName}.@(java|kt)`))[0];\n  if (!filePath) {\n    return null;\n  }\n  var packagePath = _path().default.dirname(filePath);\n  var packagePathParts = _path().default.relative(packageRoot, packagePath).split(_path().default.sep).filter(Boolean);\n  return packagePathParts.join('.');\n}\nfunction getCurrentPackageNameForType(projectRoot, type) {\n  var packageRoot = getPackageRoot(projectRoot, type);\n  if (type === 'main') {\n    return getCurrentPackageName(projectRoot, packageRoot);\n  }\n  return getCurrentPackageForProjectFile(projectRoot, packageRoot, '*', type);\n}\nfunction renamePackageOnDisk(_x2, _x3) {\n  return _renamePackageOnDisk.apply(this, arguments);\n}\nfunction _renamePackageOnDisk() {\n  _renamePackageOnDisk = _asyncToGenerator(function* (config, projectRoot) {\n    var newPackageName = getPackage(config);\n    if (newPackageName === null) {\n      return;\n    }\n    for (var type of ['debug', 'main', 'release']) {\n      yield renameJniOnDiskForType({\n        projectRoot: projectRoot,\n        type: type,\n        packageName: newPackageName\n      });\n      yield renamePackageOnDiskForType({\n        projectRoot: projectRoot,\n        type: type,\n        packageName: newPackageName\n      });\n    }\n  });\n  return _renamePackageOnDisk.apply(this, arguments);\n}\nfunction renameJniOnDiskForType(_x4) {\n  return _renameJniOnDiskForType.apply(this, arguments);\n}\nfunction _renameJniOnDiskForType() {\n  _renameJniOnDiskForType = _asyncToGenerator(function* (_ref2) {\n    var projectRoot = _ref2.projectRoot,\n      type = _ref2.type,\n      packageName = _ref2.packageName;\n    if (!packageName) {\n      return;\n    }\n    var currentPackageName = getCurrentPackageNameForType(projectRoot, type);\n    if (!currentPackageName || !packageName || currentPackageName === packageName) {\n      return;\n    }\n    var jniRoot = _path().default.join(projectRoot, 'android', 'app', 'src', type, 'jni');\n    var filesToUpdate = _toConsumableArray((0, _glob().sync)('**/*', {\n      cwd: jniRoot,\n      absolute: true\n    }));\n    filesToUpdate.forEach(function (filepath) {\n      try {\n        if (_fs().default.lstatSync(filepath).isFile() && ['.h', '.cpp'].includes(_path().default.extname(filepath))) {\n          var contents = _fs().default.readFileSync(filepath).toString();\n          contents = contents.replace(new RegExp(transformJavaClassDescriptor(currentPackageName).replace(/\\//g, '\\\\/'), 'g'), transformJavaClassDescriptor(packageName));\n          _fs().default.writeFileSync(filepath, contents);\n        }\n      } catch (_unused) {\n        debug(`Error updating \"${filepath}\" for type \"${type}\"`);\n      }\n    });\n  });\n  return _renameJniOnDiskForType.apply(this, arguments);\n}\nfunction renamePackageOnDiskForType(_x5) {\n  return _renamePackageOnDiskForType.apply(this, arguments);\n}\nfunction _renamePackageOnDiskForType() {\n  _renamePackageOnDiskForType = _asyncToGenerator(function* (_ref3) {\n    var _path$default, _path$default2;\n    var projectRoot = _ref3.projectRoot,\n      type = _ref3.type,\n      packageName = _ref3.packageName;\n    if (!packageName) {\n      return;\n    }\n    var currentPackageName = getCurrentPackageNameForType(projectRoot, type);\n    debug(`Found package \"${currentPackageName}\" for type \"${type}\"`);\n    if (!currentPackageName || currentPackageName === packageName) {\n      return;\n    }\n    debug(`Refactor \"${currentPackageName}\" to \"${packageName}\" for type \"${type}\"`);\n    var packageRoot = getPackageRoot(projectRoot, type);\n    if (!(yield (0, _modules().directoryExistsAsync)(packageRoot))) {\n      debug(`- skipping refactor of missing directory: ${packageRoot}`);\n      return;\n    }\n    var currentPackagePath = (_path$default = _path().default).join.apply(_path$default, [packageRoot].concat(_toConsumableArray(currentPackageName.split('.'))));\n    var newPackagePath = (_path$default2 = _path().default).join.apply(_path$default2, [packageRoot].concat(_toConsumableArray(packageName.split('.'))));\n    _fs().default.mkdirSync(newPackagePath, {\n      recursive: true\n    });\n    (0, _glob().sync)('**/*', {\n      cwd: currentPackagePath\n    }).forEach(function (relativePath) {\n      var filepath = _path().default.join(currentPackagePath, relativePath);\n      if (_fs().default.lstatSync(filepath).isFile()) {\n        moveFileSync(filepath, _path().default.join(newPackagePath, relativePath));\n      } else {\n        _fs().default.mkdirSync(filepath, {\n          recursive: true\n        });\n      }\n    });\n    var oldPathParts = currentPackageName.split('.');\n    while (oldPathParts.length) {\n      var _path$default3;\n      var pathToCheck = (_path$default3 = _path().default).join.apply(_path$default3, [packageRoot].concat(_toConsumableArray(oldPathParts)));\n      try {\n        var files = _fs().default.readdirSync(pathToCheck);\n        if (files.length === 0) {\n          _fs().default.rmdirSync(pathToCheck);\n        }\n      } finally {\n        oldPathParts.pop();\n      }\n    }\n    var filesToUpdate = _toConsumableArray((0, _glob().sync)('**/*', {\n      cwd: newPackagePath,\n      absolute: true\n    }));\n    if (type === 'main') {\n      filesToUpdate.push(_path().default.join(projectRoot, 'android', 'app', 'BUCK'));\n    }\n    filesToUpdate.forEach(function (filepath) {\n      try {\n        if (_fs().default.lstatSync(filepath).isFile()) {\n          var contents = _fs().default.readFileSync(filepath).toString();\n          contents = contents.replace(new RegExp(currentPackageName, 'g'), packageName);\n          if (['.h', '.cpp'].includes(_path().default.extname(filepath))) {\n            contents = contents.replace(new RegExp(transformJavaClassDescriptor(currentPackageName).replace(/\\//g, '\\\\'), 'g'), transformJavaClassDescriptor(packageName));\n          }\n          _fs().default.writeFileSync(filepath, contents);\n        }\n      } catch (_unused2) {\n        debug(`Error updating \"${filepath}\" for type \"${type}\"`);\n      }\n    });\n  });\n  return _renamePackageOnDiskForType.apply(this, arguments);\n}\nfunction moveFileSync(src, dest) {\n  _fs().default.mkdirSync(_path().default.dirname(dest), {\n    recursive: true\n  });\n  _fs().default.renameSync(src, dest);\n}\nfunction setPackageInBuildGradle(config, buildGradle) {\n  var packageName = getPackage(config);\n  if (packageName === null) {\n    return buildGradle;\n  }\n  var pattern = new RegExp(`(applicationId|namespace) ['\"].*['\"]`, 'g');\n  return buildGradle.replace(pattern, `$1 '${packageName}'`);\n}\nfunction getApplicationIdAsync(_x6) {\n  return _getApplicationIdAsync.apply(this, arguments);\n}\nfunction _getApplicationIdAsync() {\n  _getApplicationIdAsync = _asyncToGenerator(function* (projectRoot) {\n    var _matchResult$;\n    var buildGradlePath = (0, _Paths().getAppBuildGradleFilePath)(projectRoot);\n    if (!_fs().default.existsSync(buildGradlePath)) {\n      return null;\n    }\n    var buildGradle = yield _fs().default.promises.readFile(buildGradlePath, 'utf8');\n    var matchResult = buildGradle.match(/applicationId ['\"](.*)['\"]/);\n    return (_matchResult$ = matchResult === null || matchResult === void 0 ? void 0 : matchResult[1]) !== null && _matchResult$ !== void 0 ? _matchResult$ : null;\n  });\n  return _getApplicationIdAsync.apply(this, arguments);\n}\nfunction transformJavaClassDescriptor(packageName) {\n  return `L${packageName.replace(/\\./g, '/')}`;\n}","map":{"version":3,"names":["_debug","data","_interopRequireDefault","require","_fs","_glob","_path","_androidPlugins","_withDangerousMod","_modules","_warnings","_Paths","obj","__esModule","default","debug","withPackageGradle","config","withAppBuildGradle","modResults","language","contents","setPackageInBuildGradle","addWarningAndroid","exports","withPackageRefactor","withDangerousMod","_ref","_asyncToGenerator","renamePackageOnDisk","modRequest","projectRoot","_x","apply","arguments","getPackage","_config$android$packa","_config$android","android","package","getPackageRoot","type","join","getCurrentPackageName","packageRoot","mainApplication","getProjectFilePath","packagePath","dirname","packagePathParts","relative","split","sep","filter","Boolean","getCurrentPackageForProjectFile","fileName","filePath","sync","getCurrentPackageNameForType","_x2","_x3","_renamePackageOnDisk","newPackageName","renameJniOnDiskForType","packageName","renamePackageOnDiskForType","_x4","_renameJniOnDiskForType","_ref2","currentPackageName","jniRoot","filesToUpdate","_toConsumableArray","cwd","absolute","forEach","filepath","lstatSync","isFile","includes","extname","readFileSync","toString","replace","RegExp","transformJavaClassDescriptor","writeFileSync","_unused","_x5","_renamePackageOnDiskForType","_ref3","_path$default","_path$default2","directoryExistsAsync","currentPackagePath","concat","newPackagePath","mkdirSync","recursive","relativePath","moveFileSync","oldPathParts","length","_path$default3","pathToCheck","files","readdirSync","rmdirSync","pop","push","_unused2","src","dest","renameSync","buildGradle","pattern","getApplicationIdAsync","_x6","_getApplicationIdAsync","_matchResult$","buildGradlePath","getAppBuildGradleFilePath","existsSync","promises","readFile","matchResult","match"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\android\\Package.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport Debug from 'debug';\nimport fs from 'fs';\nimport { sync as globSync } from 'glob';\nimport path from 'path';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAppBuildGradle } from '../plugins/android-plugins';\nimport { withDangerousMod } from '../plugins/withDangerousMod';\nimport { directoryExistsAsync } from '../utils/modules';\nimport { addWarningAndroid } from '../utils/warnings';\nimport { getAppBuildGradleFilePath, getProjectFilePath } from './Paths';\n\nconst debug = Debug('expo:config-plugins:android:package');\n\nexport const withPackageGradle: ConfigPlugin = (config) => {\n  return withAppBuildGradle(config, (config) => {\n    if (config.modResults.language === 'groovy') {\n      config.modResults.contents = setPackageInBuildGradle(config, config.modResults.contents);\n    } else {\n      addWarningAndroid(\n        'android.package',\n        `Cannot automatically configure app build.gradle if it's not groovy`\n      );\n    }\n    return config;\n  });\n};\n\nexport const withPackageRefactor: ConfigPlugin = (config) => {\n  return withDangerousMod(config, [\n    'android',\n    async (config) => {\n      await renamePackageOnDisk(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport function getPackage(config: Pick<ExpoConfig, 'android'>) {\n  return config.android?.package ?? null;\n}\n\nfunction getPackageRoot(projectRoot: string, type: 'main' | 'debug') {\n  return path.join(projectRoot, 'android', 'app', 'src', type, 'java');\n}\n\nfunction getCurrentPackageName(projectRoot: string, packageRoot: string) {\n  const mainApplication = getProjectFilePath(projectRoot, 'MainApplication');\n  const packagePath = path.dirname(mainApplication);\n  const packagePathParts = path.relative(packageRoot, packagePath).split(path.sep).filter(Boolean);\n\n  return packagePathParts.join('.');\n}\n\nfunction getCurrentPackageForProjectFile(\n  projectRoot: string,\n  packageRoot: string,\n  fileName: string,\n  type: string\n) {\n  const filePath = globSync(\n    path.join(projectRoot, `android/app/src/${type}/java/**/${fileName}.@(java|kt)`)\n  )[0];\n\n  if (!filePath) {\n    return null;\n  }\n\n  const packagePath = path.dirname(filePath);\n  const packagePathParts = path.relative(packageRoot, packagePath).split(path.sep).filter(Boolean);\n\n  return packagePathParts.join('.');\n}\n\nfunction getCurrentPackageNameForType(projectRoot: string, type: string): string | null {\n  const packageRoot = getPackageRoot(projectRoot, type as any);\n\n  if (type === 'main') {\n    return getCurrentPackageName(projectRoot, packageRoot);\n  }\n  // debug, etc..\n  return getCurrentPackageForProjectFile(projectRoot, packageRoot, '*', type);\n}\n\n// NOTE(brentvatne): this assumes that our MainApplication.java file is in the root of the package\n// this makes sense for standard react-native projects but may not apply in customized projects, so if\n// we want this to be runnable in any app we need to handle other possibilities\nexport async function renamePackageOnDisk(\n  config: Pick<ExpoConfig, 'android'>,\n  projectRoot: string\n) {\n  const newPackageName = getPackage(config);\n  if (newPackageName === null) {\n    return;\n  }\n\n  for (const type of ['debug', 'main', 'release']) {\n    await renameJniOnDiskForType({ projectRoot, type, packageName: newPackageName });\n    await renamePackageOnDiskForType({ projectRoot, type, packageName: newPackageName });\n  }\n}\n\nexport async function renameJniOnDiskForType({\n  projectRoot,\n  type,\n  packageName,\n}: {\n  projectRoot: string;\n  type: string;\n  packageName: string;\n}) {\n  if (!packageName) {\n    return;\n  }\n\n  const currentPackageName = getCurrentPackageNameForType(projectRoot, type);\n  if (!currentPackageName || !packageName || currentPackageName === packageName) {\n    return;\n  }\n\n  const jniRoot = path.join(projectRoot, 'android', 'app', 'src', type, 'jni');\n  const filesToUpdate = [...globSync('**/*', { cwd: jniRoot, absolute: true })];\n  // Replace all occurrences of the path in the project\n  filesToUpdate.forEach((filepath: string) => {\n    try {\n      if (fs.lstatSync(filepath).isFile() && ['.h', '.cpp'].includes(path.extname(filepath))) {\n        let contents = fs.readFileSync(filepath).toString();\n        contents = contents.replace(\n          new RegExp(transformJavaClassDescriptor(currentPackageName).replace(/\\//g, '\\\\/'), 'g'),\n          transformJavaClassDescriptor(packageName)\n        );\n        fs.writeFileSync(filepath, contents);\n      }\n    } catch {\n      debug(`Error updating \"${filepath}\" for type \"${type}\"`);\n    }\n  });\n}\n\nexport async function renamePackageOnDiskForType({\n  projectRoot,\n  type,\n  packageName,\n}: {\n  projectRoot: string;\n  type: string;\n  packageName: string;\n}) {\n  if (!packageName) {\n    return;\n  }\n\n  const currentPackageName = getCurrentPackageNameForType(projectRoot, type);\n  debug(`Found package \"${currentPackageName}\" for type \"${type}\"`);\n  if (!currentPackageName || currentPackageName === packageName) {\n    return;\n  }\n  debug(`Refactor \"${currentPackageName}\" to \"${packageName}\" for type \"${type}\"`);\n  const packageRoot = getPackageRoot(projectRoot, type as any);\n  // Set up our paths\n  if (!(await directoryExistsAsync(packageRoot))) {\n    debug(`- skipping refactor of missing directory: ${packageRoot}`);\n    return;\n  }\n\n  const currentPackagePath = path.join(packageRoot, ...currentPackageName.split('.'));\n  const newPackagePath = path.join(packageRoot, ...packageName.split('.'));\n\n  // Create the new directory\n  fs.mkdirSync(newPackagePath, { recursive: true });\n\n  // Move everything from the old directory over\n  globSync('**/*', { cwd: currentPackagePath }).forEach((relativePath) => {\n    const filepath = path.join(currentPackagePath, relativePath);\n    if (fs.lstatSync(filepath).isFile()) {\n      moveFileSync(filepath, path.join(newPackagePath, relativePath));\n    } else {\n      fs.mkdirSync(filepath, { recursive: true });\n    }\n  });\n\n  // Remove the old directory recursively from com/old/package to com/old and com,\n  // as long as the directories are empty\n  const oldPathParts = currentPackageName.split('.');\n  while (oldPathParts.length) {\n    const pathToCheck = path.join(packageRoot, ...oldPathParts);\n    try {\n      const files = fs.readdirSync(pathToCheck);\n      if (files.length === 0) {\n        fs.rmdirSync(pathToCheck);\n      }\n    } finally {\n      oldPathParts.pop();\n    }\n  }\n\n  const filesToUpdate = [...globSync('**/*', { cwd: newPackagePath, absolute: true })];\n  // Only update the BUCK file to match the main package name\n  if (type === 'main') {\n    // NOTE(EvanBacon): We dropped this file in SDK 48 but other templates may still use it.\n    filesToUpdate.push(path.join(projectRoot, 'android', 'app', 'BUCK'));\n  }\n  // Replace all occurrences of the path in the project\n  filesToUpdate.forEach((filepath: string) => {\n    try {\n      if (fs.lstatSync(filepath).isFile()) {\n        let contents = fs.readFileSync(filepath).toString();\n        contents = contents.replace(new RegExp(currentPackageName!, 'g'), packageName);\n        if (['.h', '.cpp'].includes(path.extname(filepath))) {\n          contents = contents.replace(\n            new RegExp(transformJavaClassDescriptor(currentPackageName).replace(/\\//g, '\\\\'), 'g'),\n            transformJavaClassDescriptor(packageName)\n          );\n        }\n        fs.writeFileSync(filepath, contents);\n      }\n    } catch {\n      debug(`Error updating \"${filepath}\" for type \"${type}\"`);\n    }\n  });\n}\n\nfunction moveFileSync(src: string, dest: string) {\n  fs.mkdirSync(path.dirname(dest), { recursive: true });\n  fs.renameSync(src, dest);\n}\n\nexport function setPackageInBuildGradle(config: Pick<ExpoConfig, 'android'>, buildGradle: string) {\n  const packageName = getPackage(config);\n  if (packageName === null) {\n    return buildGradle;\n  }\n\n  const pattern = new RegExp(`(applicationId|namespace) ['\"].*['\"]`, 'g');\n  return buildGradle.replace(pattern, `$1 '${packageName}'`);\n}\n\nexport async function getApplicationIdAsync(projectRoot: string): Promise<string | null> {\n  const buildGradlePath = getAppBuildGradleFilePath(projectRoot);\n  if (!fs.existsSync(buildGradlePath)) {\n    return null;\n  }\n  const buildGradle = await fs.promises.readFile(buildGradlePath, 'utf8');\n  const matchResult = buildGradle.match(/applicationId ['\"](.*)['\"]/);\n  // TODO add fallback for legacy cases to read from AndroidManifest.xml\n  return matchResult?.[1] ?? null;\n}\n\n/**\n * Transform a java package name to java class descriptor,\n * e.g. `com.helloworld` -> `Lcom/helloworld`.\n */\nfunction transformJavaClassDescriptor(packageName: string) {\n  return `L${packageName.replace(/\\./g, '/')}`;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}