{"ast":null,"code":"'use strict';\n\nvar _toArray = require(\"@babel/runtime/helpers/toArray\");\nvar identity = require(\"../nodes/identity.js\");\nvar Pair = require(\"../nodes/Pair.js\");\nvar YAMLMap = require(\"../nodes/YAMLMap.js\");\nvar YAMLSeq = require(\"../nodes/YAMLSeq.js\");\nvar resolveEnd = require(\"./resolve-end.js\");\nvar resolveProps = require(\"./resolve-props.js\");\nvar utilContainsNewline = require(\"./util-contains-newline.js\");\nvar utilMapIncludes = require(\"./util-map-includes.js\");\nvar blockMsg = 'Block collections are not allowed within flow collections';\nvar isBlock = function isBlock(token) {\n  return token && (token.type === 'block-map' || token.type === 'block-seq');\n};\nfunction resolveFlowCollection(_ref, ctx, fc, onError, tag) {\n  var _tag$nodeClass;\n  var composeNode = _ref.composeNode,\n    composeEmptyNode = _ref.composeEmptyNode;\n  var isMap = fc.start.source === '{';\n  var fcName = isMap ? 'flow map' : 'flow sequence';\n  var NodeClass = (_tag$nodeClass = tag == null ? void 0 : tag.nodeClass) != null ? _tag$nodeClass : isMap ? YAMLMap.YAMLMap : YAMLSeq.YAMLSeq;\n  var coll = new NodeClass(ctx.schema);\n  coll.flow = true;\n  var atRoot = ctx.atRoot;\n  if (atRoot) ctx.atRoot = false;\n  var offset = fc.offset + fc.start.source.length;\n  for (var i = 0; i < fc.items.length; ++i) {\n    var collItem = fc.items[i];\n    var start = collItem.start,\n      key = collItem.key,\n      sep = collItem.sep,\n      value = collItem.value;\n    var props = resolveProps.resolveProps(start, {\n      flow: fcName,\n      indicator: 'explicit-key-ind',\n      next: key != null ? key : sep == null ? void 0 : sep[0],\n      offset: offset,\n      onError: onError,\n      startOnNewline: false\n    });\n    if (!props.found) {\n      if (!props.anchor && !props.tag && !sep && !value) {\n        if (i === 0 && props.comma) onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);else if (i < fc.items.length - 1) onError(props.start, 'UNEXPECTED_TOKEN', `Unexpected empty item in ${fcName}`);\n        if (props.comment) {\n          if (coll.comment) coll.comment += '\\n' + props.comment;else coll.comment = props.comment;\n        }\n        offset = props.end;\n        continue;\n      }\n      if (!isMap && ctx.options.strict && utilContainsNewline.containsNewline(key)) onError(key, 'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');\n    }\n    if (i === 0) {\n      if (props.comma) onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);\n    } else {\n      if (!props.comma) onError(props.start, 'MISSING_CHAR', `Missing , between ${fcName} items`);\n      if (props.comment) {\n        var prevItemComment = '';\n        loop: for (var st of start) {\n          switch (st.type) {\n            case 'comma':\n            case 'space':\n              break;\n            case 'comment':\n              prevItemComment = st.source.substring(1);\n              break loop;\n            default:\n              break loop;\n          }\n        }\n        if (prevItemComment) {\n          var _prev$value;\n          var prev = coll.items[coll.items.length - 1];\n          if (identity.isPair(prev)) prev = (_prev$value = prev.value) != null ? _prev$value : prev.key;\n          if (prev.comment) prev.comment += '\\n' + prevItemComment;else prev.comment = prevItemComment;\n          props.comment = props.comment.substring(prevItemComment.length + 1);\n        }\n      }\n    }\n    if (!isMap && !sep && !props.found) {\n      var valueNode = value ? composeNode(ctx, value, props, onError) : composeEmptyNode(ctx, props.end, sep, null, props, onError);\n      coll.items.push(valueNode);\n      offset = valueNode.range[2];\n      if (isBlock(value)) onError(valueNode.range, 'BLOCK_IN_FLOW', blockMsg);\n    } else {\n      var keyStart = props.end;\n      var keyNode = key ? composeNode(ctx, key, props, onError) : composeEmptyNode(ctx, keyStart, start, null, props, onError);\n      if (isBlock(key)) onError(keyNode.range, 'BLOCK_IN_FLOW', blockMsg);\n      var valueProps = resolveProps.resolveProps(sep != null ? sep : [], {\n        flow: fcName,\n        indicator: 'map-value-ind',\n        next: value,\n        offset: keyNode.range[2],\n        onError: onError,\n        startOnNewline: false\n      });\n      if (valueProps.found) {\n        if (!isMap && !props.found && ctx.options.strict) {\n          if (sep) for (var _st of sep) {\n            if (_st === valueProps.found) break;\n            if (_st.type === 'newline') {\n              onError(_st, 'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');\n              break;\n            }\n          }\n          if (props.start < valueProps.found.offset - 1024) onError(valueProps.found, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit flow sequence key');\n        }\n      } else if (value) {\n        if ('source' in value && value.source && value.source[0] === ':') onError(value, 'MISSING_CHAR', `Missing space after : in ${fcName}`);else onError(valueProps.start, 'MISSING_CHAR', `Missing , or : between ${fcName} items`);\n      }\n      var _valueNode = value ? composeNode(ctx, value, valueProps, onError) : valueProps.found ? composeEmptyNode(ctx, valueProps.end, sep, null, valueProps, onError) : null;\n      if (_valueNode) {\n        if (isBlock(value)) onError(_valueNode.range, 'BLOCK_IN_FLOW', blockMsg);\n      } else if (valueProps.comment) {\n        if (keyNode.comment) keyNode.comment += '\\n' + valueProps.comment;else keyNode.comment = valueProps.comment;\n      }\n      var pair = new Pair.Pair(keyNode, _valueNode);\n      if (ctx.options.keepSourceTokens) pair.srcToken = collItem;\n      if (isMap) {\n        var map = coll;\n        if (utilMapIncludes.mapIncludes(ctx, map.items, keyNode)) onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');\n        map.items.push(pair);\n      } else {\n        var _map = new YAMLMap.YAMLMap(ctx.schema);\n        _map.flow = true;\n        _map.items.push(pair);\n        coll.items.push(_map);\n      }\n      offset = _valueNode ? _valueNode.range[2] : valueProps.end;\n    }\n  }\n  var expectedEnd = isMap ? '}' : ']';\n  var _fc$end = _toArray(fc.end),\n    ce = _fc$end[0],\n    ee = _fc$end.slice(1);\n  var cePos = offset;\n  if (ce && ce.source === expectedEnd) cePos = ce.offset + ce.source.length;else {\n    var name = fcName[0].toUpperCase() + fcName.substring(1);\n    var msg = atRoot ? `${name} must end with a ${expectedEnd}` : `${name} in block collection must be sufficiently indented and end with a ${expectedEnd}`;\n    onError(offset, atRoot ? 'MISSING_CHAR' : 'BAD_INDENT', msg);\n    if (ce && ce.source.length !== 1) ee.unshift(ce);\n  }\n  if (ee.length > 0) {\n    var end = resolveEnd.resolveEnd(ee, cePos, ctx.options.strict, onError);\n    if (end.comment) {\n      if (coll.comment) coll.comment += '\\n' + end.comment;else coll.comment = end.comment;\n    }\n    coll.range = [fc.offset, cePos, end.offset];\n  } else {\n    coll.range = [fc.offset, cePos, cePos];\n  }\n  return coll;\n}\nexports.resolveFlowCollection = resolveFlowCollection;","map":{"version":3,"names":["_toArray","require","identity","Pair","YAMLMap","YAMLSeq","resolveEnd","resolveProps","utilContainsNewline","utilMapIncludes","blockMsg","isBlock","token","type","resolveFlowCollection","_ref","ctx","fc","onError","tag","_tag$nodeClass","composeNode","composeEmptyNode","isMap","start","source","fcName","NodeClass","nodeClass","coll","schema","flow","atRoot","offset","length","i","items","collItem","key","sep","value","props","indicator","next","startOnNewline","found","anchor","comma","comment","end","options","strict","containsNewline","prevItemComment","loop","st","substring","_prev$value","prev","isPair","valueNode","push","range","keyStart","keyNode","valueProps","pair","keepSourceTokens","srcToken","map","mapIncludes","expectedEnd","_fc$end","ce","ee","slice","cePos","name","toUpperCase","msg","unshift","exports"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/dist/compose/resolve-flow-collection.js"],"sourcesContent":["'use strict';\n\nvar identity = require('../nodes/identity.js');\nvar Pair = require('../nodes/Pair.js');\nvar YAMLMap = require('../nodes/YAMLMap.js');\nvar YAMLSeq = require('../nodes/YAMLSeq.js');\nvar resolveEnd = require('./resolve-end.js');\nvar resolveProps = require('./resolve-props.js');\nvar utilContainsNewline = require('./util-contains-newline.js');\nvar utilMapIncludes = require('./util-map-includes.js');\n\nconst blockMsg = 'Block collections are not allowed within flow collections';\nconst isBlock = (token) => token && (token.type === 'block-map' || token.type === 'block-seq');\nfunction resolveFlowCollection({ composeNode, composeEmptyNode }, ctx, fc, onError, tag) {\n    const isMap = fc.start.source === '{';\n    const fcName = isMap ? 'flow map' : 'flow sequence';\n    const NodeClass = (tag?.nodeClass ?? (isMap ? YAMLMap.YAMLMap : YAMLSeq.YAMLSeq));\n    const coll = new NodeClass(ctx.schema);\n    coll.flow = true;\n    const atRoot = ctx.atRoot;\n    if (atRoot)\n        ctx.atRoot = false;\n    let offset = fc.offset + fc.start.source.length;\n    for (let i = 0; i < fc.items.length; ++i) {\n        const collItem = fc.items[i];\n        const { start, key, sep, value } = collItem;\n        const props = resolveProps.resolveProps(start, {\n            flow: fcName,\n            indicator: 'explicit-key-ind',\n            next: key ?? sep?.[0],\n            offset,\n            onError,\n            startOnNewline: false\n        });\n        if (!props.found) {\n            if (!props.anchor && !props.tag && !sep && !value) {\n                if (i === 0 && props.comma)\n                    onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);\n                else if (i < fc.items.length - 1)\n                    onError(props.start, 'UNEXPECTED_TOKEN', `Unexpected empty item in ${fcName}`);\n                if (props.comment) {\n                    if (coll.comment)\n                        coll.comment += '\\n' + props.comment;\n                    else\n                        coll.comment = props.comment;\n                }\n                offset = props.end;\n                continue;\n            }\n            if (!isMap && ctx.options.strict && utilContainsNewline.containsNewline(key))\n                onError(key, // checked by containsNewline()\n                'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');\n        }\n        if (i === 0) {\n            if (props.comma)\n                onError(props.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${fcName}`);\n        }\n        else {\n            if (!props.comma)\n                onError(props.start, 'MISSING_CHAR', `Missing , between ${fcName} items`);\n            if (props.comment) {\n                let prevItemComment = '';\n                loop: for (const st of start) {\n                    switch (st.type) {\n                        case 'comma':\n                        case 'space':\n                            break;\n                        case 'comment':\n                            prevItemComment = st.source.substring(1);\n                            break loop;\n                        default:\n                            break loop;\n                    }\n                }\n                if (prevItemComment) {\n                    let prev = coll.items[coll.items.length - 1];\n                    if (identity.isPair(prev))\n                        prev = prev.value ?? prev.key;\n                    if (prev.comment)\n                        prev.comment += '\\n' + prevItemComment;\n                    else\n                        prev.comment = prevItemComment;\n                    props.comment = props.comment.substring(prevItemComment.length + 1);\n                }\n            }\n        }\n        if (!isMap && !sep && !props.found) {\n            // item is a value in a seq\n            // → key & sep are empty, start does not include ? or :\n            const valueNode = value\n                ? composeNode(ctx, value, props, onError)\n                : composeEmptyNode(ctx, props.end, sep, null, props, onError);\n            coll.items.push(valueNode);\n            offset = valueNode.range[2];\n            if (isBlock(value))\n                onError(valueNode.range, 'BLOCK_IN_FLOW', blockMsg);\n        }\n        else {\n            // item is a key+value pair\n            // key value\n            const keyStart = props.end;\n            const keyNode = key\n                ? composeNode(ctx, key, props, onError)\n                : composeEmptyNode(ctx, keyStart, start, null, props, onError);\n            if (isBlock(key))\n                onError(keyNode.range, 'BLOCK_IN_FLOW', blockMsg);\n            // value properties\n            const valueProps = resolveProps.resolveProps(sep ?? [], {\n                flow: fcName,\n                indicator: 'map-value-ind',\n                next: value,\n                offset: keyNode.range[2],\n                onError,\n                startOnNewline: false\n            });\n            if (valueProps.found) {\n                if (!isMap && !props.found && ctx.options.strict) {\n                    if (sep)\n                        for (const st of sep) {\n                            if (st === valueProps.found)\n                                break;\n                            if (st.type === 'newline') {\n                                onError(st, 'MULTILINE_IMPLICIT_KEY', 'Implicit keys of flow sequence pairs need to be on a single line');\n                                break;\n                            }\n                        }\n                    if (props.start < valueProps.found.offset - 1024)\n                        onError(valueProps.found, 'KEY_OVER_1024_CHARS', 'The : indicator must be at most 1024 chars after the start of an implicit flow sequence key');\n                }\n            }\n            else if (value) {\n                if ('source' in value && value.source && value.source[0] === ':')\n                    onError(value, 'MISSING_CHAR', `Missing space after : in ${fcName}`);\n                else\n                    onError(valueProps.start, 'MISSING_CHAR', `Missing , or : between ${fcName} items`);\n            }\n            // value value\n            const valueNode = value\n                ? composeNode(ctx, value, valueProps, onError)\n                : valueProps.found\n                    ? composeEmptyNode(ctx, valueProps.end, sep, null, valueProps, onError)\n                    : null;\n            if (valueNode) {\n                if (isBlock(value))\n                    onError(valueNode.range, 'BLOCK_IN_FLOW', blockMsg);\n            }\n            else if (valueProps.comment) {\n                if (keyNode.comment)\n                    keyNode.comment += '\\n' + valueProps.comment;\n                else\n                    keyNode.comment = valueProps.comment;\n            }\n            const pair = new Pair.Pair(keyNode, valueNode);\n            if (ctx.options.keepSourceTokens)\n                pair.srcToken = collItem;\n            if (isMap) {\n                const map = coll;\n                if (utilMapIncludes.mapIncludes(ctx, map.items, keyNode))\n                    onError(keyStart, 'DUPLICATE_KEY', 'Map keys must be unique');\n                map.items.push(pair);\n            }\n            else {\n                const map = new YAMLMap.YAMLMap(ctx.schema);\n                map.flow = true;\n                map.items.push(pair);\n                coll.items.push(map);\n            }\n            offset = valueNode ? valueNode.range[2] : valueProps.end;\n        }\n    }\n    const expectedEnd = isMap ? '}' : ']';\n    const [ce, ...ee] = fc.end;\n    let cePos = offset;\n    if (ce && ce.source === expectedEnd)\n        cePos = ce.offset + ce.source.length;\n    else {\n        const name = fcName[0].toUpperCase() + fcName.substring(1);\n        const msg = atRoot\n            ? `${name} must end with a ${expectedEnd}`\n            : `${name} in block collection must be sufficiently indented and end with a ${expectedEnd}`;\n        onError(offset, atRoot ? 'MISSING_CHAR' : 'BAD_INDENT', msg);\n        if (ce && ce.source.length !== 1)\n            ee.unshift(ce);\n    }\n    if (ee.length > 0) {\n        const end = resolveEnd.resolveEnd(ee, cePos, ctx.options.strict, onError);\n        if (end.comment) {\n            if (coll.comment)\n                coll.comment += '\\n' + end.comment;\n            else\n                coll.comment = end.comment;\n        }\n        coll.range = [fc.offset, cePos, end.offset];\n    }\n    else {\n        coll.range = [fc.offset, cePos, cePos];\n    }\n    return coll;\n}\n\nexports.resolveFlowCollection = resolveFlowCollection;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}