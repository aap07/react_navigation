{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _checkInstallation = require(\"../checkInstallation\");\nvar _brewInstall = require(\"../brewInstall\");\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function _chalk() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar packageName = 'ios-deploy';\nvar _default = {\n  label: packageName,\n  isRequired: false,\n  description: 'Required for installing your app on a physical device with the CLI',\n  getDiagnostics: function () {\n    var _getDiagnostics = _asyncToGenerator(function* () {\n      return {\n        needsToBeFixed: yield (0, _checkInstallation.isSoftwareNotInstalled)(packageName)\n      };\n    });\n    function getDiagnostics() {\n      return _getDiagnostics.apply(this, arguments);\n    }\n    return getDiagnostics;\n  }(),\n  runAutomaticFix: function () {\n    var _runAutomaticFix = _asyncToGenerator(function* (_ref) {\n      var loader = _ref.loader,\n        logManualInstallation = _ref.logManualInstallation;\n      yield (0, _brewInstall.brewInstall)({\n        pkg: packageName,\n        label: packageName,\n        loader: loader,\n        onSuccess: function onSuccess() {\n          loader.succeed(`Successfully installed ${_chalk().default.bold(packageName)} with Homebrew`);\n        },\n        onFail: function onFail() {\n          loader.fail();\n          logManualInstallation({\n            healthcheck: packageName,\n            url: 'https://github.com/ios-control/ios-deploy#installation'\n          });\n        }\n      });\n    });\n    function runAutomaticFix(_x) {\n      return _runAutomaticFix.apply(this, arguments);\n    }\n    return runAutomaticFix;\n  }()\n};\nexports.default = _default;","map":{"version":3,"names":["_asyncToGenerator","require","Object","defineProperty","exports","value","default","_checkInstallation","_brewInstall","_chalk","data","_interopRequireDefault","obj","__esModule","packageName","_default","label","isRequired","description","getDiagnostics","_getDiagnostics","needsToBeFixed","isSoftwareNotInstalled","apply","arguments","runAutomaticFix","_runAutomaticFix","_ref","loader","logManualInstallation","brewInstall","pkg","onSuccess","succeed","bold","onFail","fail","healthcheck","url","_x"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/build/tools/healthchecks/iosDeploy.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _checkInstallation = require(\"../checkInstallation\");\nvar _brewInstall = require(\"../brewInstall\");\nfunction _chalk() {\n  const data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function () {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nconst packageName = 'ios-deploy';\nvar _default = {\n  label: packageName,\n  isRequired: false,\n  description: 'Required for installing your app on a physical device with the CLI',\n  getDiagnostics: async () => ({\n    needsToBeFixed: await (0, _checkInstallation.isSoftwareNotInstalled)(packageName)\n  }),\n  runAutomaticFix: async ({\n    loader,\n    logManualInstallation\n  }) => {\n    await (0, _brewInstall.brewInstall)({\n      pkg: packageName,\n      label: packageName,\n      loader,\n      onSuccess: () => {\n        loader.succeed(`Successfully installed ${_chalk().default.bold(packageName)} with Homebrew`);\n      },\n      onFail: () => {\n        loader.fail();\n        logManualInstallation({\n          healthcheck: packageName,\n          url: 'https://github.com/ios-control/ios-deploy#installation'\n        });\n      }\n    });\n  }\n};\nexports.default = _default;\n\n//# sourceMappingURL=iosDeploy.ts.map"],"mappings":"AAAA,YAAY;;AAAC,IAAAA,iBAAA,GAAAC,OAAA;AAEbC,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AACxB,IAAIC,kBAAkB,GAAGN,OAAO,uBAAuB,CAAC;AACxD,IAAIO,YAAY,GAAGP,OAAO,iBAAiB,CAAC;AAC5C,SAASQ,MAAMA,CAAA,EAAG;EAChB,IAAMC,IAAI,GAAGC,sBAAsB,CAACV,OAAO,CAAC,OAAO,CAAC,CAAC;EACrDQ,MAAM,GAAG,SAAAA,OAAA,EAAY;IACnB,OAAOC,IAAI;EACb,CAAC;EACD,OAAOA,IAAI;AACb;AACA,SAASC,sBAAsBA,CAACC,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEN,OAAO,EAAEM;EAAI,CAAC;AAAE;AAC9F,IAAME,WAAW,GAAG,YAAY;AAChC,IAAIC,QAAQ,GAAG;EACbC,KAAK,EAAEF,WAAW;EAClBG,UAAU,EAAE,KAAK;EACjBC,WAAW,EAAE,oEAAoE;EACjFC,cAAc;IAAA,IAAAC,eAAA,GAAApB,iBAAA,CAAE;MAAA,OAAa;QAC3BqB,cAAc,QAAQ,CAAC,CAAC,EAAEd,kBAAkB,CAACe,sBAAsB,EAAER,WAAW;MAClF,CAAC;IAAA,CAAC;IAAA,SAAAK,eAAA;MAAA,OAAAC,eAAA,CAAAG,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAAL,cAAA;EAAA;EACFM,eAAe;IAAA,IAAAC,gBAAA,GAAA1B,iBAAA,CAAE,WAAA2B,IAAA,EAGX;MAAA,IAFJC,MAAM,GAAAD,IAAA,CAANC,MAAM;QACNC,qBAAqB,GAAAF,IAAA,CAArBE,qBAAqB;MAErB,MAAM,CAAC,CAAC,EAAErB,YAAY,CAACsB,WAAW,EAAE;QAClCC,GAAG,EAAEjB,WAAW;QAChBE,KAAK,EAAEF,WAAW;QAClBc,MAAM,EAANA,MAAM;QACNI,SAAS,EAAE,SAAAA,UAAA,EAAM;UACfJ,MAAM,CAACK,OAAO,CAAE,0BAAyBxB,MAAM,CAAC,CAAC,CAACH,OAAO,CAAC4B,IAAI,CAACpB,WAAW,CAAE,gBAAe,CAAC;QAC9F,CAAC;QACDqB,MAAM,EAAE,SAAAA,OAAA,EAAM;UACZP,MAAM,CAACQ,IAAI,CAAC,CAAC;UACbP,qBAAqB,CAAC;YACpBQ,WAAW,EAAEvB,WAAW;YACxBwB,GAAG,EAAE;UACP,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;IACJ,CAAC;IAAA,SAAAb,gBAAAc,EAAA;MAAA,OAAAb,gBAAA,CAAAH,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAAC,eAAA;EAAA;AACH,CAAC;AACDrB,OAAO,CAACE,OAAO,GAAGS,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}