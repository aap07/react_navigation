{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { EventTypes } from \"../interfaces\";\nvar RotationGestureDetector = function () {\n  function RotationGestureDetector(callbacks) {\n    _classCallCheck(this, RotationGestureDetector);\n    this.currentTime = 0;\n    this.previousTime = 0;\n    this.previousAngle = 0;\n    this.rotation = 0;\n    this.anchorX = 0;\n    this.anchorY = 0;\n    this.isInProgress = false;\n    this.keyPointers = [NaN, NaN];\n    this.onRotationBegin = callbacks.onRotationBegin;\n    this.onRotation = callbacks.onRotation;\n    this.onRotationEnd = callbacks.onRotationEnd;\n  }\n  _createClass(RotationGestureDetector, [{\n    key: \"updateCurrent\",\n    value: function updateCurrent(event, tracker) {\n      this.previousTime = this.currentTime;\n      this.currentTime = event.time;\n      var _this$keyPointers = _slicedToArray(this.keyPointers, 2),\n        firstPointerID = _this$keyPointers[0],\n        secondPointerID = _this$keyPointers[1];\n      var firstPointerX = tracker.getLastX(firstPointerID);\n      var firstPointerY = tracker.getLastY(firstPointerID);\n      var secondPointerX = tracker.getLastX(secondPointerID);\n      var secondPointerY = tracker.getLastY(secondPointerID);\n      var vectorX = secondPointerX - firstPointerX;\n      var vectorY = secondPointerY - firstPointerY;\n      this.anchorX = (firstPointerX + secondPointerX) / 2;\n      this.anchorY = (firstPointerY + secondPointerY) / 2;\n      var angle = -Math.atan2(vectorY, vectorX);\n      this.rotation = Number.isNaN(this.previousAngle) ? 0 : this.previousAngle - angle;\n      this.previousAngle = angle;\n      if (this.rotation > Math.PI) {\n        this.rotation -= Math.PI;\n      } else if (this.rotation < -Math.PI) {\n        this.rotation += Math.PI;\n      }\n      if (this.rotation > Math.PI / 2) {\n        this.rotation -= Math.PI;\n      } else if (this.rotation < -Math.PI / 2) {\n        this.rotation += Math.PI;\n      }\n    }\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      if (!this.isInProgress) {\n        return;\n      }\n      this.isInProgress = false;\n      this.keyPointers = [NaN, NaN];\n      this.onRotationEnd(this);\n    }\n  }, {\n    key: \"setKeyPointers\",\n    value: function setKeyPointers(tracker) {\n      if (this.keyPointers[0] && this.keyPointers[1]) {\n        return;\n      }\n      var pointerIDs = tracker.getData().keys();\n      this.keyPointers[0] = pointerIDs.next().value;\n      this.keyPointers[1] = pointerIDs.next().value;\n    }\n  }, {\n    key: \"onTouchEvent\",\n    value: function onTouchEvent(event, tracker) {\n      switch (event.eventType) {\n        case EventTypes.DOWN:\n          this.isInProgress = false;\n          break;\n        case EventTypes.ADDITIONAL_POINTER_DOWN:\n          if (this.isInProgress) {\n            break;\n          }\n          this.isInProgress = true;\n          this.previousTime = event.time;\n          this.previousAngle = NaN;\n          this.setKeyPointers(tracker);\n          this.updateCurrent(event, tracker);\n          this.onRotationBegin(this);\n          break;\n        case EventTypes.MOVE:\n          if (!this.isInProgress) {\n            break;\n          }\n          this.updateCurrent(event, tracker);\n          this.onRotation(this);\n          break;\n        case EventTypes.ADDITIONAL_POINTER_UP:\n          if (!this.isInProgress) {\n            break;\n          }\n          if (this.keyPointers.indexOf(event.pointerId) >= 0) {\n            this.finish();\n          }\n          break;\n        case EventTypes.UP:\n          if (this.isInProgress) {\n            this.finish();\n          }\n          break;\n      }\n      return true;\n    }\n  }, {\n    key: \"getTimeDelta\",\n    value: function getTimeDelta() {\n      return this.currentTime + this.previousTime;\n    }\n  }, {\n    key: \"getAnchorX\",\n    value: function getAnchorX() {\n      return this.anchorX;\n    }\n  }, {\n    key: \"getAnchorY\",\n    value: function getAnchorY() {\n      return this.anchorY;\n    }\n  }, {\n    key: \"getRotation\",\n    value: function getRotation() {\n      return this.rotation;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.keyPointers = [NaN, NaN];\n      this.isInProgress = false;\n    }\n  }]);\n  return RotationGestureDetector;\n}();\nexport { RotationGestureDetector as default };","map":{"version":3,"names":["EventTypes","RotationGestureDetector","callbacks","_classCallCheck","currentTime","previousTime","previousAngle","rotation","anchorX","anchorY","isInProgress","keyPointers","NaN","onRotationBegin","onRotation","onRotationEnd","_createClass","key","value","updateCurrent","event","tracker","time","_this$keyPointers","_slicedToArray","firstPointerID","secondPointerID","firstPointerX","getLastX","firstPointerY","getLastY","secondPointerX","secondPointerY","vectorX","vectorY","angle","Math","atan2","Number","isNaN","PI","finish","setKeyPointers","pointerIDs","getData","keys","next","onTouchEvent","eventType","DOWN","ADDITIONAL_POINTER_DOWN","MOVE","ADDITIONAL_POINTER_UP","indexOf","pointerId","UP","getTimeDelta","getAnchorX","getAnchorY","getRotation","reset","default"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/react-native-gesture-handler/src/web/detectors/RotationGestureDetector.ts"],"sourcesContent":["import { AdaptedEvent, EventTypes } from '../interfaces';\nimport PointerTracker from '../tools/PointerTracker';\n\nexport interface RotationGestureListener {\n  onRotationBegin: (detector: RotationGestureDetector) => boolean;\n  onRotation: (detector: RotationGestureDetector) => boolean;\n  onRotationEnd: (detector: RotationGestureDetector) => void;\n}\n\nexport default class RotationGestureDetector\n  implements RotationGestureListener\n{\n  onRotationBegin: (detector: RotationGestureDetector) => boolean;\n  onRotation: (detector: RotationGestureDetector) => boolean;\n  onRotationEnd: (detector: RotationGestureDetector) => void;\n\n  private currentTime = 0;\n  private previousTime = 0;\n\n  private previousAngle = 0;\n  private rotation = 0;\n\n  private anchorX = 0;\n  private anchorY = 0;\n\n  private isInProgress = false;\n\n  private keyPointers: number[] = [NaN, NaN];\n\n  constructor(callbacks: RotationGestureListener) {\n    this.onRotationBegin = callbacks.onRotationBegin;\n    this.onRotation = callbacks.onRotation;\n    this.onRotationEnd = callbacks.onRotationEnd;\n  }\n\n  private updateCurrent(event: AdaptedEvent, tracker: PointerTracker): void {\n    this.previousTime = this.currentTime;\n    this.currentTime = event.time;\n\n    const [firstPointerID, secondPointerID] = this.keyPointers;\n\n    const firstPointerX: number = tracker.getLastX(firstPointerID);\n    const firstPointerY: number = tracker.getLastY(firstPointerID);\n    const secondPointerX: number = tracker.getLastX(secondPointerID);\n    const secondPointerY: number = tracker.getLastY(secondPointerID);\n\n    const vectorX: number = secondPointerX - firstPointerX;\n    const vectorY: number = secondPointerY - firstPointerY;\n\n    this.anchorX = (firstPointerX + secondPointerX) / 2;\n    this.anchorY = (firstPointerY + secondPointerY) / 2;\n\n    //Angle diff should be positive when rotating in clockwise direction\n    const angle: number = -Math.atan2(vectorY, vectorX);\n\n    this.rotation = Number.isNaN(this.previousAngle)\n      ? 0\n      : this.previousAngle - angle;\n\n    this.previousAngle = angle;\n\n    if (this.rotation > Math.PI) {\n      this.rotation -= Math.PI;\n    } else if (this.rotation < -Math.PI) {\n      this.rotation += Math.PI;\n    }\n\n    if (this.rotation > Math.PI / 2) {\n      this.rotation -= Math.PI;\n    } else if (this.rotation < -Math.PI / 2) {\n      this.rotation += Math.PI;\n    }\n  }\n\n  private finish(): void {\n    if (!this.isInProgress) {\n      return;\n    }\n\n    this.isInProgress = false;\n    this.keyPointers = [NaN, NaN];\n    this.onRotationEnd(this);\n  }\n\n  private setKeyPointers(tracker: PointerTracker): void {\n    if (this.keyPointers[0] && this.keyPointers[1]) {\n      return;\n    }\n\n    const pointerIDs: IterableIterator<number> = tracker.getData().keys();\n\n    this.keyPointers[0] = pointerIDs.next().value as number;\n    this.keyPointers[1] = pointerIDs.next().value as number;\n  }\n\n  public onTouchEvent(event: AdaptedEvent, tracker: PointerTracker): boolean {\n    switch (event.eventType) {\n      case EventTypes.DOWN:\n        this.isInProgress = false;\n        break;\n\n      case EventTypes.ADDITIONAL_POINTER_DOWN:\n        if (this.isInProgress) {\n          break;\n        }\n        this.isInProgress = true;\n\n        this.previousTime = event.time;\n        this.previousAngle = NaN;\n\n        this.setKeyPointers(tracker);\n\n        this.updateCurrent(event, tracker);\n        this.onRotationBegin(this);\n        break;\n\n      case EventTypes.MOVE:\n        if (!this.isInProgress) {\n          break;\n        }\n\n        this.updateCurrent(event, tracker);\n        this.onRotation(this);\n\n        break;\n\n      case EventTypes.ADDITIONAL_POINTER_UP:\n        if (!this.isInProgress) {\n          break;\n        }\n\n        if (this.keyPointers.indexOf(event.pointerId) >= 0) {\n          this.finish();\n        }\n\n        break;\n\n      case EventTypes.UP:\n        if (this.isInProgress) {\n          this.finish();\n        }\n        break;\n    }\n\n    return true;\n  }\n\n  public getTimeDelta(): number {\n    return this.currentTime + this.previousTime;\n  }\n\n  public getAnchorX(): number {\n    return this.anchorX;\n  }\n\n  public getAnchorY(): number {\n    return this.anchorY;\n  }\n\n  public getRotation(): number {\n    return this.rotation;\n  }\n\n  public reset(): void {\n    this.keyPointers = [NaN, NaN];\n    this.isInProgress = false;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}