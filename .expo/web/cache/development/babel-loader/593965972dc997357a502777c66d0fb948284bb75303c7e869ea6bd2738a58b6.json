{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.checkPackagesAsync = checkPackagesAsync;\nvar _config = require(\"@expo/config\");\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar Log = _interopRequireWildcard(require(\"../log\"));\nvar _validateDependenciesVersions = require(\"../start/doctor/dependencies/validateDependenciesVersions\");\nvar _interactive = require(\"../utils/interactive\");\nvar _link = require(\"../utils/link\");\nvar _prompts = require(\"../utils/prompts\");\nvar _strings = require(\"../utils/strings\");\nvar _installAsync = require(\"./installAsync\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar debug = require(\"debug\")(\"expo:install:check\");\nfunction checkPackagesAsync(_x, _x2) {\n  return _checkPackagesAsync.apply(this, arguments);\n}\nfunction _checkPackagesAsync() {\n  _checkPackagesAsync = _asyncToGenerator(function* (projectRoot, _ref) {\n    var packages = _ref.packages,\n      packageManager = _ref.packageManager,\n      fix = _ref.options.fix,\n      packageManagerArguments = _ref.packageManagerArguments;\n    var ref, ref1, ref2;\n    var _getConfig = (0, _config).getConfig(projectRoot, {\n        skipPlugins: true\n      }),\n      exp = _getConfig.exp,\n      pkg = _getConfig.pkg;\n    if ((ref = pkg.expo) == null ? void 0 : (ref1 = ref.install) == null ? void 0 : (ref2 = ref1.exclude) == null ? void 0 : ref2.length) {\n      Log.log(_chalk.default`Skipped ${fix ? \"fixing\" : \"checking\"} dependencies: ${(0, _strings).joinWithCommasAnd(pkg.expo.install.exclude)}. These dependencies are listed in {bold expo.install.exclude} in package.json. ${(0, _link).learnMore(\"https://expo.dev/more/expo-cli/#configuring-dependency-validation\")}`);\n    }\n    var dependencies = yield (0, _validateDependenciesVersions).getVersionedDependenciesAsync(projectRoot, exp, pkg, packages);\n    if (!dependencies.length) {\n      Log.exit(_chalk.default.greenBright(\"Dependencies are up to date\"), 0);\n    }\n    (0, _validateDependenciesVersions).logIncorrectDependencies(dependencies);\n    var value = fix || (0, _interactive).isInteractive() && (yield (0, _prompts).confirmAsync({\n      message: \"Fix dependencies?\"\n    }).catch(function () {\n      return false;\n    }));\n    if (value) {\n      debug(\"Installing fixed dependencies:\", dependencies);\n      return (0, _installAsync).fixPackagesAsync(projectRoot, {\n        packageManager: packageManager,\n        packages: dependencies,\n        packageManagerArguments: packageManagerArguments,\n        sdkVersion: exp.sdkVersion\n      });\n    }\n    Log.exit(_chalk.default.red(\"Found outdated dependencies\"), 1);\n  });\n  return _checkPackagesAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","checkPackagesAsync","_config","_chalk","_interopRequireDefault","Log","_interopRequireWildcard","_validateDependenciesVersions","_interactive","_link","_prompts","_strings","_installAsync","debug","_x","_x2","_checkPackagesAsync","apply","arguments","projectRoot","_ref","packages","packageManager","fix","options","packageManagerArguments","ref","ref1","ref2","_getConfig","getConfig","skipPlugins","exp","pkg","expo","install","exclude","length","log","default","joinWithCommasAnd","learnMore","dependencies","getVersionedDependenciesAsync","exit","greenBright","logIncorrectDependencies","value","isInteractive","confirmAsync","message","catch","fixPackagesAsync","sdkVersion","red"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\install\\checkPackages.ts"],"sourcesContent":["import { getConfig } from '@expo/config';\nimport * as PackageManager from '@expo/package-manager';\nimport chalk from 'chalk';\n\nimport * as Log from '../log';\nimport {\n  getVersionedDependenciesAsync,\n  logIncorrectDependencies,\n} from '../start/doctor/dependencies/validateDependenciesVersions';\nimport { isInteractive } from '../utils/interactive';\nimport { learnMore } from '../utils/link';\nimport { confirmAsync } from '../utils/prompts';\nimport { joinWithCommasAnd } from '../utils/strings';\nimport { fixPackagesAsync } from './installAsync';\nimport { Options } from './resolveOptions';\n\nconst debug = require('debug')('expo:install:check') as typeof console.log;\n\n// Exposed for testing.\nexport async function checkPackagesAsync(\n  projectRoot: string,\n  {\n    packages,\n    packageManager,\n    options: { fix },\n    packageManagerArguments,\n  }: {\n    /**\n     * List of packages to version\n     * @example ['uuid', 'react-native-reanimated@latest']\n     */\n    packages: string[];\n    /** Package manager to use when installing the versioned packages. */\n    packageManager: PackageManager.NodePackageManager;\n\n    /** How the check should resolve */\n    options: Pick<Options, 'fix'>;\n    /**\n     * Extra parameters to pass to the `packageManager` when installing versioned packages.\n     * @example ['--no-save']\n     */\n    packageManagerArguments: string[];\n  }\n) {\n  // Read the project Expo config without plugins.\n  const { exp, pkg } = getConfig(projectRoot, {\n    // Sometimes users will add a plugin to the config before installing the library,\n    // this wouldn't work unless we dangerously disable plugin serialization.\n    skipPlugins: true,\n  });\n\n  if (pkg.expo?.install?.exclude?.length) {\n    Log.log(\n      chalk`Skipped ${fix ? 'fixing' : 'checking'} dependencies: ${joinWithCommasAnd(\n        pkg.expo.install.exclude\n      )}. These dependencies are listed in {bold expo.install.exclude} in package.json. ${learnMore(\n        'https://expo.dev/more/expo-cli/#configuring-dependency-validation'\n      )}`\n    );\n  }\n\n  const dependencies = await getVersionedDependenciesAsync(projectRoot, exp, pkg, packages);\n\n  if (!dependencies.length) {\n    Log.exit(chalk.greenBright('Dependencies are up to date'), 0);\n  }\n\n  logIncorrectDependencies(dependencies);\n\n  const value =\n    // If `--fix` then always fix.\n    fix ||\n    // Otherwise prompt to fix when not running in CI.\n    (isInteractive() && (await confirmAsync({ message: 'Fix dependencies?' }).catch(() => false)));\n\n  if (value) {\n    debug('Installing fixed dependencies:', dependencies);\n    // Install the corrected dependencies.\n    return fixPackagesAsync(projectRoot, {\n      packageManager,\n      packages: dependencies,\n      packageManagerArguments,\n      sdkVersion: exp.sdkVersion!,\n    });\n  }\n  // Exit with non-zero exit code if any of the dependencies are out of date.\n  Log.exit(chalk.red('Found outdated dependencies'), 1);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}