{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Config = void 0;\nexports.applyRuntimeVersionFromConfig = applyRuntimeVersionFromConfig;\nexports.areVersionsSynced = areVersionsSynced;\nexports.ensureBuildGradleContainsConfigurationScript = ensureBuildGradleContainsConfigurationScript;\nexports.formatApplyLineForBuildGradle = formatApplyLineForBuildGradle;\nexports.isBuildGradleConfigured = isBuildGradleConfigured;\nexports.isMainApplicationMetaDataSet = isMainApplicationMetaDataSet;\nexports.isMainApplicationMetaDataSynced = isMainApplicationMetaDataSynced;\nexports.setUpdatesConfig = setUpdatesConfig;\nexports.setVersionsConfig = setVersionsConfig;\nexports.withUpdates = void 0;\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _resolveFrom() {\n  var data = _interopRequireDefault(require(\"resolve-from\"));\n  _resolveFrom = function _resolveFrom() {\n    return data;\n  };\n  return data;\n}\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _withPlugins() {\n  var data = require(\"../plugins/withPlugins\");\n  _withPlugins = function _withPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _Updates() {\n  var data = require(\"../utils/Updates\");\n  _Updates = function _Updates() {\n    return data;\n  };\n  return data;\n}\nfunction _Manifest() {\n  var data = require(\"./Manifest\");\n  _Manifest = function _Manifest() {\n    return data;\n  };\n  return data;\n}\nfunction _Resources() {\n  var data = require(\"./Resources\");\n  _Resources = function _Resources() {\n    return data;\n  };\n  return data;\n}\nfunction _Strings() {\n  var data = require(\"./Strings\");\n  _Strings = function _Strings() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar CREATE_MANIFEST_ANDROID_PATH = 'expo-updates/scripts/create-manifest-android.gradle';\nvar Config;\nexports.Config = Config;\n(function (Config) {\n  Config[\"ENABLED\"] = \"expo.modules.updates.ENABLED\";\n  Config[\"CHECK_ON_LAUNCH\"] = \"expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH\";\n  Config[\"LAUNCH_WAIT_MS\"] = \"expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS\";\n  Config[\"SDK_VERSION\"] = \"expo.modules.updates.EXPO_SDK_VERSION\";\n  Config[\"RUNTIME_VERSION\"] = \"expo.modules.updates.EXPO_RUNTIME_VERSION\";\n  Config[\"UPDATE_URL\"] = \"expo.modules.updates.EXPO_UPDATE_URL\";\n  Config[\"RELEASE_CHANNEL\"] = \"expo.modules.updates.EXPO_RELEASE_CHANNEL\";\n  Config[\"UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY\"] = \"expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY\";\n  Config[\"CODE_SIGNING_CERTIFICATE\"] = \"expo.modules.updates.CODE_SIGNING_CERTIFICATE\";\n  Config[\"CODE_SIGNING_METADATA\"] = \"expo.modules.updates.CODE_SIGNING_METADATA\";\n})(Config || (exports.Config = Config = {}));\nvar withUpdates = function withUpdates(config, _ref) {\n  var expoUsername = _ref.expoUsername;\n  return (0, _withPlugins().withPlugins)(config, [[withUpdatesManifest, {\n    expoUsername: expoUsername\n  }], withRuntimeVersionResource]);\n};\nexports.withUpdates = withUpdates;\nvar withUpdatesManifest = function withUpdatesManifest(config, _ref2) {\n  var expoUsername = _ref2.expoUsername;\n  return (0, _androidPlugins().withAndroidManifest)(config, function (config) {\n    var projectRoot = config.modRequest.projectRoot;\n    var expoUpdatesPackageVersion = (0, _Updates().getExpoUpdatesPackageVersion)(projectRoot);\n    config.modResults = setUpdatesConfig(projectRoot, config, config.modResults, expoUsername, expoUpdatesPackageVersion);\n    return config;\n  });\n};\nvar withRuntimeVersionResource = (0, _androidPlugins().createStringsXmlPlugin)(applyRuntimeVersionFromConfig, 'withRuntimeVersionResource');\nfunction applyRuntimeVersionFromConfig(config, stringsJSON) {\n  var runtimeVersion = (0, _Updates().getRuntimeVersionNullable)(config, 'android');\n  if (runtimeVersion) {\n    return (0, _Strings().setStringItem)([(0, _Resources().buildResourceItem)({\n      name: 'expo_runtime_version',\n      value: runtimeVersion\n    })], stringsJSON);\n  }\n  return (0, _Strings().removeStringItem)('expo_runtime_version', stringsJSON);\n}\nfunction setUpdatesConfig(projectRoot, config, androidManifest, username, expoUpdatesPackageVersion) {\n  var mainApplication = (0, _Manifest().getMainApplicationOrThrow)(androidManifest);\n  (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.ENABLED, String((0, _Updates().getUpdatesEnabled)(config, username)));\n  (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.CHECK_ON_LAUNCH, (0, _Updates().getUpdatesCheckOnLaunch)(config, expoUpdatesPackageVersion));\n  (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.LAUNCH_WAIT_MS, String((0, _Updates().getUpdatesTimeout)(config)));\n  var updateUrl = (0, _Updates().getUpdateUrl)(config, username);\n  if (updateUrl) {\n    (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.UPDATE_URL, updateUrl);\n  } else {\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, Config.UPDATE_URL);\n  }\n  var codeSigningCertificate = (0, _Updates().getUpdatesCodeSigningCertificate)(projectRoot, config);\n  if (codeSigningCertificate) {\n    (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.CODE_SIGNING_CERTIFICATE, codeSigningCertificate);\n  } else {\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, Config.CODE_SIGNING_CERTIFICATE);\n  }\n  var codeSigningMetadata = (0, _Updates().getUpdatesCodeSigningMetadataStringified)(config);\n  if (codeSigningMetadata) {\n    (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.CODE_SIGNING_METADATA, codeSigningMetadata);\n  } else {\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, Config.CODE_SIGNING_METADATA);\n  }\n  var requestHeaders = (0, _Updates().getUpdatesRequestHeadersStringified)(config);\n  if (requestHeaders) {\n    (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY, requestHeaders);\n  } else {\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, Config.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY);\n  }\n  return setVersionsConfig(config, androidManifest);\n}\nfunction setVersionsConfig(config, androidManifest) {\n  var mainApplication = (0, _Manifest().getMainApplicationOrThrow)(androidManifest);\n  var runtimeVersion = (0, _Updates().getRuntimeVersionNullable)(config, 'android');\n  if (!runtimeVersion && (0, _Manifest().findMetaDataItem)(mainApplication, Config.RUNTIME_VERSION) > -1) {\n    throw new Error('A runtime version is set in your AndroidManifest.xml, but is missing from your app.json/app.config.js. Please either set runtimeVersion in your app.json/app.config.js or remove expo.modules.updates.EXPO_RUNTIME_VERSION from your AndroidManifest.xml.');\n  }\n  var sdkVersion = (0, _Updates().getSDKVersion)(config);\n  if (runtimeVersion) {\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, Config.SDK_VERSION);\n    (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.RUNTIME_VERSION, '@string/expo_runtime_version');\n  } else if (sdkVersion) {\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, Config.RUNTIME_VERSION);\n    (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, Config.SDK_VERSION, sdkVersion);\n  } else {\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, Config.RUNTIME_VERSION);\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, Config.SDK_VERSION);\n  }\n  return androidManifest;\n}\nfunction ensureBuildGradleContainsConfigurationScript(projectRoot, buildGradleContents) {\n  if (!isBuildGradleConfigured(projectRoot, buildGradleContents)) {\n    var cleanedUpBuildGradleContents;\n    var isBuildGradleMisconfigured = buildGradleContents.split('\\n').some(function (line) {\n      return line.includes(CREATE_MANIFEST_ANDROID_PATH);\n    });\n    if (isBuildGradleMisconfigured) {\n      cleanedUpBuildGradleContents = buildGradleContents.replace(new RegExp(`(\\n// Integration with Expo updates)?\\n.*${CREATE_MANIFEST_ANDROID_PATH}.*\\n`), '');\n    } else {\n      cleanedUpBuildGradleContents = buildGradleContents;\n    }\n    var gradleScriptApply = formatApplyLineForBuildGradle(projectRoot);\n    return `${cleanedUpBuildGradleContents}\\n// Integration with Expo updates\\n${gradleScriptApply}\\n`;\n  } else {\n    return buildGradleContents;\n  }\n}\nfunction formatApplyLineForBuildGradle(projectRoot) {\n  var updatesGradleScriptPath = _resolveFrom().default.silent(projectRoot, CREATE_MANIFEST_ANDROID_PATH);\n  if (!updatesGradleScriptPath) {\n    throw new Error(\"Could not find the build script for Android. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\");\n  }\n  var relativePath = _path().default.relative(_path().default.join(projectRoot, 'android', 'app'), updatesGradleScriptPath);\n  var posixPath = process.platform === 'win32' ? relativePath.replace(/\\\\/g, '/') : relativePath;\n  return `apply from: \"${posixPath}\"`;\n}\nfunction isBuildGradleConfigured(projectRoot, buildGradleContents) {\n  var androidBuildScript = formatApplyLineForBuildGradle(projectRoot);\n  return buildGradleContents.replace(/\\r\\n/g, '\\n').split('\\n').some(function (line) {\n    return line === androidBuildScript || line === androidBuildScript.replace(/\"/g, \"'\");\n  });\n}\nfunction isMainApplicationMetaDataSet(androidManifest) {\n  var updateUrl = (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.UPDATE_URL);\n  var runtimeVersion = (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.RUNTIME_VERSION);\n  var sdkVersion = (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.SDK_VERSION);\n  return Boolean(updateUrl && (sdkVersion || runtimeVersion));\n}\nfunction isMainApplicationMetaDataSynced(projectRoot, config, androidManifest, username) {\n  return (0, _Updates().getUpdateUrl)(config, username) === (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.UPDATE_URL) && String((0, _Updates().getUpdatesEnabled)(config, username)) === (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.ENABLED) && String((0, _Updates().getUpdatesTimeout)(config)) === (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.LAUNCH_WAIT_MS) && (0, _Updates().getUpdatesCheckOnLaunch)(config) === (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.CHECK_ON_LAUNCH) && (0, _Updates().getUpdatesCodeSigningCertificate)(projectRoot, config) === (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.CODE_SIGNING_CERTIFICATE) && (0, _Updates().getUpdatesCodeSigningMetadataStringified)(config) === (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.CODE_SIGNING_METADATA) && areVersionsSynced(config, androidManifest);\n}\nfunction areVersionsSynced(config, androidManifest) {\n  var expectedRuntimeVersion = (0, _Updates().getRuntimeVersionNullable)(config, 'android');\n  var expectedSdkVersion = (0, _Updates().getSDKVersion)(config);\n  var currentRuntimeVersion = (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.RUNTIME_VERSION);\n  var currentSdkVersion = (0, _Manifest().getMainApplicationMetaDataValue)(androidManifest, Config.SDK_VERSION);\n  if (expectedRuntimeVersion !== null) {\n    return currentRuntimeVersion === expectedRuntimeVersion && currentSdkVersion === null;\n  } else if (expectedSdkVersion !== null) {\n    return currentSdkVersion === expectedSdkVersion && currentRuntimeVersion === null;\n  } else {\n    return true;\n  }\n}","map":{"version":3,"names":["_path","data","_interopRequireDefault","require","_resolveFrom","_androidPlugins","_withPlugins","_Updates","_Manifest","_Resources","_Strings","obj","__esModule","default","CREATE_MANIFEST_ANDROID_PATH","Config","exports","withUpdates","config","_ref","expoUsername","withPlugins","withUpdatesManifest","withRuntimeVersionResource","_ref2","withAndroidManifest","projectRoot","modRequest","expoUpdatesPackageVersion","getExpoUpdatesPackageVersion","modResults","setUpdatesConfig","createStringsXmlPlugin","applyRuntimeVersionFromConfig","stringsJSON","runtimeVersion","getRuntimeVersionNullable","setStringItem","buildResourceItem","name","value","removeStringItem","androidManifest","username","mainApplication","getMainApplicationOrThrow","addMetaDataItemToMainApplication","ENABLED","String","getUpdatesEnabled","CHECK_ON_LAUNCH","getUpdatesCheckOnLaunch","LAUNCH_WAIT_MS","getUpdatesTimeout","updateUrl","getUpdateUrl","UPDATE_URL","removeMetaDataItemFromMainApplication","codeSigningCertificate","getUpdatesCodeSigningCertificate","CODE_SIGNING_CERTIFICATE","codeSigningMetadata","getUpdatesCodeSigningMetadataStringified","CODE_SIGNING_METADATA","requestHeaders","getUpdatesRequestHeadersStringified","UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY","setVersionsConfig","findMetaDataItem","RUNTIME_VERSION","Error","sdkVersion","getSDKVersion","SDK_VERSION","ensureBuildGradleContainsConfigurationScript","buildGradleContents","isBuildGradleConfigured","cleanedUpBuildGradleContents","isBuildGradleMisconfigured","split","some","line","includes","replace","RegExp","gradleScriptApply","formatApplyLineForBuildGradle","updatesGradleScriptPath","silent","relativePath","relative","join","posixPath","process","platform","androidBuildScript","isMainApplicationMetaDataSet","getMainApplicationMetaDataValue","Boolean","isMainApplicationMetaDataSynced","areVersionsSynced","expectedRuntimeVersion","expectedSdkVersion","currentRuntimeVersion","currentSdkVersion"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\android\\Updates.ts"],"sourcesContent":["import path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { createStringsXmlPlugin, withAndroidManifest } from '../plugins/android-plugins';\nimport { withPlugins } from '../plugins/withPlugins';\nimport {\n  ExpoConfigUpdates,\n  getExpoUpdatesPackageVersion,\n  getRuntimeVersionNullable,\n  getSDKVersion,\n  getUpdatesCheckOnLaunch,\n  getUpdatesCodeSigningCertificate,\n  getUpdatesCodeSigningMetadataStringified,\n  getUpdatesRequestHeadersStringified,\n  getUpdatesEnabled,\n  getUpdatesTimeout,\n  getUpdateUrl,\n} from '../utils/Updates';\nimport {\n  addMetaDataItemToMainApplication,\n  AndroidManifest,\n  findMetaDataItem,\n  getMainApplicationMetaDataValue,\n  getMainApplicationOrThrow,\n  removeMetaDataItemFromMainApplication,\n} from './Manifest';\nimport { buildResourceItem, ResourceXML } from './Resources';\nimport { removeStringItem, setStringItem } from './Strings';\n\nconst CREATE_MANIFEST_ANDROID_PATH = 'expo-updates/scripts/create-manifest-android.gradle';\n\nexport enum Config {\n  ENABLED = 'expo.modules.updates.ENABLED',\n  CHECK_ON_LAUNCH = 'expo.modules.updates.EXPO_UPDATES_CHECK_ON_LAUNCH',\n  LAUNCH_WAIT_MS = 'expo.modules.updates.EXPO_UPDATES_LAUNCH_WAIT_MS',\n  SDK_VERSION = 'expo.modules.updates.EXPO_SDK_VERSION',\n  RUNTIME_VERSION = 'expo.modules.updates.EXPO_RUNTIME_VERSION',\n  UPDATE_URL = 'expo.modules.updates.EXPO_UPDATE_URL',\n  RELEASE_CHANNEL = 'expo.modules.updates.EXPO_RELEASE_CHANNEL',\n  UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY = 'expo.modules.updates.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY',\n  CODE_SIGNING_CERTIFICATE = 'expo.modules.updates.CODE_SIGNING_CERTIFICATE',\n  CODE_SIGNING_METADATA = 'expo.modules.updates.CODE_SIGNING_METADATA',\n}\n\n// when making changes to this config plugin, ensure the same changes are also made in eas-cli and build-tools\n// Also ensure the docs are up-to-date: https://docs.expo.dev/bare/installing-updates/\n\nexport const withUpdates: ConfigPlugin<{ expoUsername: string | null }> = (\n  config,\n  { expoUsername }\n) => {\n  return withPlugins(config, [[withUpdatesManifest, { expoUsername }], withRuntimeVersionResource]);\n};\n\nconst withUpdatesManifest: ConfigPlugin<{ expoUsername: string | null }> = (\n  config,\n  { expoUsername }\n) => {\n  return withAndroidManifest(config, (config) => {\n    const projectRoot = config.modRequest.projectRoot;\n    const expoUpdatesPackageVersion = getExpoUpdatesPackageVersion(projectRoot);\n    config.modResults = setUpdatesConfig(\n      projectRoot,\n      config,\n      config.modResults,\n      expoUsername,\n      expoUpdatesPackageVersion\n    );\n    return config;\n  });\n};\n\nconst withRuntimeVersionResource = createStringsXmlPlugin(\n  applyRuntimeVersionFromConfig,\n  'withRuntimeVersionResource'\n);\n\nexport function applyRuntimeVersionFromConfig(\n  config: Pick<ExpoConfigUpdates, 'sdkVersion' | 'runtimeVersion'>,\n  stringsJSON: ResourceXML\n): ResourceXML {\n  const runtimeVersion = getRuntimeVersionNullable(config, 'android');\n  if (runtimeVersion) {\n    return setStringItem(\n      [buildResourceItem({ name: 'expo_runtime_version', value: runtimeVersion })],\n      stringsJSON\n    );\n  }\n  return removeStringItem('expo_runtime_version', stringsJSON);\n}\n\nexport function setUpdatesConfig(\n  projectRoot: string,\n  config: ExpoConfigUpdates,\n  androidManifest: AndroidManifest,\n  username: string | null,\n  expoUpdatesPackageVersion?: string | null\n): AndroidManifest {\n  const mainApplication = getMainApplicationOrThrow(androidManifest);\n\n  addMetaDataItemToMainApplication(\n    mainApplication,\n    Config.ENABLED,\n    String(getUpdatesEnabled(config, username))\n  );\n  addMetaDataItemToMainApplication(\n    mainApplication,\n    Config.CHECK_ON_LAUNCH,\n    getUpdatesCheckOnLaunch(config, expoUpdatesPackageVersion)\n  );\n  addMetaDataItemToMainApplication(\n    mainApplication,\n    Config.LAUNCH_WAIT_MS,\n    String(getUpdatesTimeout(config))\n  );\n\n  const updateUrl = getUpdateUrl(config, username);\n  if (updateUrl) {\n    addMetaDataItemToMainApplication(mainApplication, Config.UPDATE_URL, updateUrl);\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.UPDATE_URL);\n  }\n\n  const codeSigningCertificate = getUpdatesCodeSigningCertificate(projectRoot, config);\n  if (codeSigningCertificate) {\n    addMetaDataItemToMainApplication(\n      mainApplication,\n      Config.CODE_SIGNING_CERTIFICATE,\n      codeSigningCertificate\n    );\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.CODE_SIGNING_CERTIFICATE);\n  }\n\n  const codeSigningMetadata = getUpdatesCodeSigningMetadataStringified(config);\n  if (codeSigningMetadata) {\n    addMetaDataItemToMainApplication(\n      mainApplication,\n      Config.CODE_SIGNING_METADATA,\n      codeSigningMetadata\n    );\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.CODE_SIGNING_METADATA);\n  }\n\n  const requestHeaders = getUpdatesRequestHeadersStringified(config);\n  if (requestHeaders) {\n    addMetaDataItemToMainApplication(\n      mainApplication,\n      Config.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY,\n      requestHeaders\n    );\n  } else {\n    removeMetaDataItemFromMainApplication(\n      mainApplication,\n      Config.UPDATES_CONFIGURATION_REQUEST_HEADERS_KEY\n    );\n  }\n\n  return setVersionsConfig(config, androidManifest);\n}\n\nexport function setVersionsConfig(\n  config: Pick<ExpoConfigUpdates, 'sdkVersion' | 'runtimeVersion'>,\n  androidManifest: AndroidManifest\n): AndroidManifest {\n  const mainApplication = getMainApplicationOrThrow(androidManifest);\n\n  const runtimeVersion = getRuntimeVersionNullable(config, 'android');\n  if (!runtimeVersion && findMetaDataItem(mainApplication, Config.RUNTIME_VERSION) > -1) {\n    throw new Error(\n      'A runtime version is set in your AndroidManifest.xml, but is missing from your app.json/app.config.js. Please either set runtimeVersion in your app.json/app.config.js or remove expo.modules.updates.EXPO_RUNTIME_VERSION from your AndroidManifest.xml.'\n    );\n  }\n  const sdkVersion = getSDKVersion(config);\n  if (runtimeVersion) {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.SDK_VERSION);\n    addMetaDataItemToMainApplication(\n      mainApplication,\n      Config.RUNTIME_VERSION,\n      '@string/expo_runtime_version'\n    );\n  } else if (sdkVersion) {\n    /**\n     * runtime version maybe null in projects using classic updates. In that\n     * case we use SDK version\n     */\n    removeMetaDataItemFromMainApplication(mainApplication, Config.RUNTIME_VERSION);\n    addMetaDataItemToMainApplication(mainApplication, Config.SDK_VERSION, sdkVersion);\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, Config.RUNTIME_VERSION);\n    removeMetaDataItemFromMainApplication(mainApplication, Config.SDK_VERSION);\n  }\n\n  return androidManifest;\n}\nexport function ensureBuildGradleContainsConfigurationScript(\n  projectRoot: string,\n  buildGradleContents: string\n): string {\n  if (!isBuildGradleConfigured(projectRoot, buildGradleContents)) {\n    let cleanedUpBuildGradleContents;\n\n    const isBuildGradleMisconfigured = buildGradleContents\n      .split('\\n')\n      .some((line) => line.includes(CREATE_MANIFEST_ANDROID_PATH));\n    if (isBuildGradleMisconfigured) {\n      cleanedUpBuildGradleContents = buildGradleContents.replace(\n        new RegExp(`(\\n// Integration with Expo updates)?\\n.*${CREATE_MANIFEST_ANDROID_PATH}.*\\n`),\n        ''\n      );\n    } else {\n      cleanedUpBuildGradleContents = buildGradleContents;\n    }\n\n    const gradleScriptApply = formatApplyLineForBuildGradle(projectRoot);\n    return `${cleanedUpBuildGradleContents}\\n// Integration with Expo updates\\n${gradleScriptApply}\\n`;\n  } else {\n    return buildGradleContents;\n  }\n}\n\nexport function formatApplyLineForBuildGradle(projectRoot: string): string {\n  const updatesGradleScriptPath = resolveFrom.silent(projectRoot, CREATE_MANIFEST_ANDROID_PATH);\n\n  if (!updatesGradleScriptPath) {\n    throw new Error(\n      \"Could not find the build script for Android. This could happen in case of outdated 'node_modules'. Run 'npm install' to make sure that it's up-to-date.\"\n    );\n  }\n\n  const relativePath = path.relative(\n    path.join(projectRoot, 'android', 'app'),\n    updatesGradleScriptPath\n  );\n  const posixPath = process.platform === 'win32' ? relativePath.replace(/\\\\/g, '/') : relativePath;\n\n  return `apply from: \"${posixPath}\"`;\n}\n\nexport function isBuildGradleConfigured(projectRoot: string, buildGradleContents: string): boolean {\n  const androidBuildScript = formatApplyLineForBuildGradle(projectRoot);\n\n  return (\n    buildGradleContents\n      .replace(/\\r\\n/g, '\\n')\n      .split('\\n')\n      // Check for both single and double quotes\n      .some((line) => line === androidBuildScript || line === androidBuildScript.replace(/\"/g, \"'\"))\n  );\n}\n\nexport function isMainApplicationMetaDataSet(androidManifest: AndroidManifest): boolean {\n  const updateUrl = getMainApplicationMetaDataValue(androidManifest, Config.UPDATE_URL);\n  const runtimeVersion = getMainApplicationMetaDataValue(androidManifest, Config.RUNTIME_VERSION);\n  const sdkVersion = getMainApplicationMetaDataValue(androidManifest, Config.SDK_VERSION);\n\n  return Boolean(updateUrl && (sdkVersion || runtimeVersion));\n}\n\nexport function isMainApplicationMetaDataSynced(\n  projectRoot: string,\n  config: ExpoConfigUpdates,\n  androidManifest: AndroidManifest,\n  username: string | null\n): boolean {\n  return (\n    getUpdateUrl(config, username) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.UPDATE_URL) &&\n    String(getUpdatesEnabled(config, username)) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.ENABLED) &&\n    String(getUpdatesTimeout(config)) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.LAUNCH_WAIT_MS) &&\n    getUpdatesCheckOnLaunch(config) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.CHECK_ON_LAUNCH) &&\n    getUpdatesCodeSigningCertificate(projectRoot, config) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.CODE_SIGNING_CERTIFICATE) &&\n    getUpdatesCodeSigningMetadataStringified(config) ===\n      getMainApplicationMetaDataValue(androidManifest, Config.CODE_SIGNING_METADATA) &&\n    areVersionsSynced(config, androidManifest)\n  );\n}\n\nexport function areVersionsSynced(\n  config: Pick<ExpoConfigUpdates, 'runtimeVersion' | 'sdkVersion'>,\n  androidManifest: AndroidManifest\n): boolean {\n  const expectedRuntimeVersion = getRuntimeVersionNullable(config, 'android');\n  const expectedSdkVersion = getSDKVersion(config);\n\n  const currentRuntimeVersion = getMainApplicationMetaDataValue(\n    androidManifest,\n    Config.RUNTIME_VERSION\n  );\n  const currentSdkVersion = getMainApplicationMetaDataValue(androidManifest, Config.SDK_VERSION);\n\n  if (expectedRuntimeVersion !== null) {\n    return currentRuntimeVersion === expectedRuntimeVersion && currentSdkVersion === null;\n  } else if (expectedSdkVersion !== null) {\n    return currentSdkVersion === expectedSdkVersion && currentRuntimeVersion === null;\n  } else {\n    return true;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}