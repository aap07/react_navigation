{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getResolvedLocalesAsync = getResolvedLocalesAsync;\nvar _jsonFile = _interopRequireDefault(require(\"@expo/json-file\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _errors = require(\"../utils/errors\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getResolvedLocalesAsync(_x, _x2) {\n  return _getResolvedLocalesAsync.apply(this, arguments);\n}\nfunction _getResolvedLocalesAsync() {\n  _getResolvedLocalesAsync = _asyncToGenerator(function* (projectRoot, exp) {\n    if (!exp.locales) {\n      return {};\n    }\n    var locales = {};\n    for (var _ref of Object.entries(exp.locales)) {\n      var _ref2 = _slicedToArray(_ref, 2);\n      var lang = _ref2[0];\n      var localeJsonPath = _ref2[1];\n      if (typeof localeJsonPath === \"string\") {\n        try {\n          locales[lang] = yield _jsonFile.default.readAsync(_path.default.join(projectRoot, localeJsonPath));\n        } catch (error) {\n          throw new _errors.CommandError(\"EXPO_CONFIG\", JSON.stringify(error));\n        }\n      } else {\n        locales[lang] = localeJsonPath;\n      }\n    }\n    return locales;\n  });\n  return _getResolvedLocalesAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_slicedToArray","require","_asyncToGenerator","getResolvedLocalesAsync","_jsonFile","_interopRequireDefault","_path","_errors","_x","_x2","_getResolvedLocalesAsync","apply","arguments","projectRoot","exp","locales","_ref","Object","entries","_ref2","lang","localeJsonPath","default","readAsync","join","error","CommandError","JSON","stringify"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\export\\getResolvedLocales.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config';\nimport JsonFile, { JSONObject } from '@expo/json-file';\nimport path from 'path';\n\nimport { CommandError } from '../utils/errors';\n\ntype LocaleMap = Record<string, JSONObject>;\n\n// Similar to how we resolve locales in `@expo/config-plugins`\nexport async function getResolvedLocalesAsync(\n  projectRoot: string,\n  exp: Pick<ExpoConfig, 'locales'>\n): Promise<LocaleMap> {\n  if (!exp.locales) {\n    return {};\n  }\n\n  const locales: LocaleMap = {};\n  for (const [lang, localeJsonPath] of Object.entries(exp.locales)) {\n    if (typeof localeJsonPath === 'string') {\n      try {\n        locales[lang] = await JsonFile.readAsync(path.join(projectRoot, localeJsonPath));\n      } catch (error: any) {\n        throw new CommandError('EXPO_CONFIG', JSON.stringify(error));\n      }\n    } else {\n      // In the off chance that someone defined the locales json in the config, pass it directly to the object.\n      // We do this to make the types more elegant.\n      locales[lang] = localeJsonPath;\n    }\n  }\n  return locales;\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,cAAA,GAAAC,OAAA;AAAA,IAAAC,iBAAA,GAAAD,OAAA;;;;QASsBE,uBAAuB,GAAvBA,uBAAuB;AARR,IAAAC,SAAiB,GAAAC,sBAAA,CAAAJ,OAAA,CAAjB,iBAAiB;AACrC,IAAAK,KAAM,GAAAD,sBAAA,CAAAJ,OAAA,CAAN,MAAM;AAEM,IAAAM,OAAiB,GAAAN,OAAA;;;;;;SAKxBE,uBAAuBA,CAAAK,EAAA,EAAAC,GAAA;EAAA,OAAAC,wBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,yBAAA;EAAAA,wBAAA,GAAAR,iBAAA,CAAtC,WACLW,WAAmB,EACnBC,GAAgC,EACZ;IACpB,IAAI,CAACA,GAAG,CAACC,OAAO,EAAE;MAChB,OAAO,EAAE;;IAGX,IAAMA,OAAO,GAAc,EAAE;IAC7B,SAAAC,IAAA,IAAqCC,MAAM,CAACC,OAAO,CAACJ,GAAG,CAACC,OAAO,CAAC,EAAE;MAAA,IAAAI,KAAA,GAAAnB,cAAA,CAAAgB,IAAA;MAAA,IAAtDI,IAAI,GAAAD,KAAA;MAAA,IAAEE,cAAc,GAAAF,KAAA;MAC9B,IAAI,OAAOE,cAAc,KAAK,QAAQ,EAAE;QACtC,IAAI;UACFN,OAAO,CAACK,IAAI,CAAC,SAAShB,SAAQ,CAAAkB,OAAA,CAACC,SAAS,CAACjB,KAAI,CAAAgB,OAAA,CAACE,IAAI,CAACX,WAAW,EAAEQ,cAAc,CAAC,CAAC;SACjF,CAAC,OAAOI,KAAK,EAAO;UACnB,MAAM,IAAIlB,OAAY,CAAAmB,YAAA,CAAC,aAAa,EAAEC,IAAI,CAACC,SAAS,CAACH,KAAK,CAAC,CAAC;;OAE/D,MAAM;QAGLV,OAAO,CAACK,IAAI,CAAC,GAAGC,cAAc;;;IAGlC,OAAON,OAAO;GACf;EAAA,OAAAL,wBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}