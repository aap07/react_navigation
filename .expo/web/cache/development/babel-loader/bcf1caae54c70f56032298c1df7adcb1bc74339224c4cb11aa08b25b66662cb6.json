{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.gteSdkVersion = gteSdkVersion;\nexports.lteSdkVersion = lteSdkVersion;\nfunction _semver() {\n  var data = _interopRequireDefault(require(\"semver\"));\n  _semver = function _semver() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction gteSdkVersion(exp, sdkVersion) {\n  if (!exp.sdkVersion) {\n    return false;\n  }\n  if (exp.sdkVersion === 'UNVERSIONED') {\n    return true;\n  }\n  try {\n    return _semver().default.gte(exp.sdkVersion, sdkVersion);\n  } catch (_unused) {\n    throw new Error(`${exp.sdkVersion} is not a valid version. Must be in the form of x.y.z`);\n  }\n}\nfunction lteSdkVersion(exp, sdkVersion) {\n  if (!exp.sdkVersion) {\n    return false;\n  }\n  if (exp.sdkVersion === 'UNVERSIONED') {\n    return false;\n  }\n  try {\n    return _semver().default.lte(exp.sdkVersion, sdkVersion);\n  } catch (_unused2) {\n    throw new Error(`${exp.sdkVersion} is not a valid version. Must be in the form of x.y.z`);\n  }\n}","map":{"version":3,"names":["_semver","data","_interopRequireDefault","require","obj","__esModule","default","gteSdkVersion","exp","sdkVersion","gte","_unused","Error","lteSdkVersion","lte","_unused2"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\utils\\versions.ts"],"sourcesContent":["import type { ExpoConfig } from '@expo/config-types';\nimport semver from 'semver';\n\nexport function gteSdkVersion(exp: Pick<ExpoConfig, 'sdkVersion'>, sdkVersion: string): boolean {\n  if (!exp.sdkVersion) {\n    return false;\n  }\n\n  if (exp.sdkVersion === 'UNVERSIONED') {\n    return true;\n  }\n\n  try {\n    return semver.gte(exp.sdkVersion, sdkVersion);\n  } catch {\n    throw new Error(`${exp.sdkVersion} is not a valid version. Must be in the form of x.y.z`);\n  }\n}\n\nexport function lteSdkVersion(exp: Pick<ExpoConfig, 'sdkVersion'>, sdkVersion: string): boolean {\n  if (!exp.sdkVersion) {\n    return false;\n  }\n\n  if (exp.sdkVersion === 'UNVERSIONED') {\n    return false;\n  }\n\n  try {\n    return semver.lte(exp.sdkVersion, sdkVersion);\n  } catch {\n    throw new Error(`${exp.sdkVersion} is not a valid version. Must be in the form of x.y.z`);\n  }\n}\n"],"mappings":";;;;;;;AACA,SAAAA,QAAA;EAAA,IAAAC,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAH,OAAA,YAAAA,QAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAA4B,SAAAC,uBAAAE,GAAA;EAAA,OAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA;IAAAE,OAAA,EAAAF;EAAA;AAAA;AAErB,SAASG,aAAaA,CAACC,GAAmC,EAAEC,UAAkB,EAAW;EAC9F,IAAI,CAACD,GAAG,CAACC,UAAU,EAAE;IACnB,OAAO,KAAK;EACd;EAEA,IAAID,GAAG,CAACC,UAAU,KAAK,aAAa,EAAE;IACpC,OAAO,IAAI;EACb;EAEA,IAAI;IACF,OAAOT,OAAA,GAAAM,OAAM,CAACI,GAAG,CAACF,GAAG,CAACC,UAAU,EAAEA,UAAU,CAAC;EAC/C,CAAC,CAAC,OAAAE,OAAA,EAAM;IACN,MAAM,IAAIC,KAAK,CAAE,GAAEJ,GAAG,CAACC,UAAW,uDAAsD,CAAC;EAC3F;AACF;AAEO,SAASI,aAAaA,CAACL,GAAmC,EAAEC,UAAkB,EAAW;EAC9F,IAAI,CAACD,GAAG,CAACC,UAAU,EAAE;IACnB,OAAO,KAAK;EACd;EAEA,IAAID,GAAG,CAACC,UAAU,KAAK,aAAa,EAAE;IACpC,OAAO,KAAK;EACd;EAEA,IAAI;IACF,OAAOT,OAAA,GAAAM,OAAM,CAACQ,GAAG,CAACN,GAAG,CAACC,UAAU,EAAEA,UAAU,CAAC;EAC/C,CAAC,CAAC,OAAAM,QAAA,EAAM;IACN,MAAM,IAAIH,KAAK,CAAE,GAAEJ,GAAG,CAACC,UAAW,uDAAsD,CAAC;EAC3F;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}