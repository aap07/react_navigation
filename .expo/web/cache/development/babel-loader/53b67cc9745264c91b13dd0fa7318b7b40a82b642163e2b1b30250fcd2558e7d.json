{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withExpoUpdates = exports.default = void 0;\nfunction _configPlugins() {\n  var data = require(\"@expo/config-plugins\");\n  _configPlugins = function _configPlugins() {\n    return data;\n  };\n  return data;\n}\nvar packageName = 'expo-updates';\nvar withExpoUpdates = function withExpoUpdates(config, props) {\n  return (0, _configPlugins().withStaticPlugin)(config, {\n    _isLegacyPlugin: true,\n    plugin: [packageName, props],\n    fallback: (0, _configPlugins().createRunOncePlugin)(function (config) {\n      return withUnversionedUpdates(config, props);\n    }, packageName)\n  });\n};\nexports.withExpoUpdates = withExpoUpdates;\nvar withUnversionedUpdates = function withUnversionedUpdates(config, props) {\n  config = _configPlugins().AndroidConfig.Updates.withUpdates(config, props);\n  config = _configPlugins().IOSConfig.Updates.withUpdates(config, props);\n  return config;\n};\nvar _default = withExpoUpdates;\nexports.default = _default;","map":{"version":3,"names":["_configPlugins","data","require","packageName","withExpoUpdates","config","props","withStaticPlugin","_isLegacyPlugin","plugin","fallback","createRunOncePlugin","withUnversionedUpdates","exports","AndroidConfig","Updates","withUpdates","IOSConfig","_default","default"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\prebuild-config\\src\\plugins\\unversioned\\expo-updates.ts"],"sourcesContent":["import {\n  AndroidConfig,\n  ConfigPlugin,\n  createRunOncePlugin,\n  IOSConfig,\n  withStaticPlugin,\n} from '@expo/config-plugins';\n\n// Local unversioned updates plugin\n\nconst packageName = 'expo-updates';\n\nexport const withExpoUpdates: ConfigPlugin<{ expoUsername: string }> = (config, props) => {\n  return withStaticPlugin(config, {\n    _isLegacyPlugin: true,\n    // Pass props to the static plugin if it exists.\n    plugin: [packageName, props],\n    // If the static plugin isn't found, use the unversioned one.\n    fallback: createRunOncePlugin((config) => withUnversionedUpdates(config, props), packageName),\n  });\n};\n\nconst withUnversionedUpdates: ConfigPlugin<{ expoUsername: string }> = (config, props) => {\n  config = AndroidConfig.Updates.withUpdates(config, props);\n  config = IOSConfig.Updates.withUpdates(config, props);\n  return config;\n};\n\nexport default withExpoUpdates;\n"],"mappings":";;;;;;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA,GAAAC,OAAA;EAAAF,cAAA,YAAAA,eAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAUA,IAAME,WAAW,GAAG,cAAc;AAE3B,IAAMC,eAAuD,GAAG,SAA1DA,eAAuDA,CAAIC,MAAM,EAAEC,KAAK,EAAK;EACxF,OAAO,IAAAN,cAAA,GAAAO,gBAAgB,EAACF,MAAM,EAAE;IAC9BG,eAAe,EAAE,IAAI;IAErBC,MAAM,EAAE,CAACN,WAAW,EAAEG,KAAK,CAAC;IAE5BI,QAAQ,EAAE,IAAAV,cAAA,GAAAW,mBAAmB,EAAE,UAAAN,MAAM;MAAA,OAAKO,sBAAsB,CAACP,MAAM,EAAEC,KAAK,CAAC;IAAA,GAAEH,WAAW;EAC9F,CAAC,CAAC;AACJ,CAAC;AAACU,OAAA,CAAAT,eAAA,GAAAA,eAAA;AAEF,IAAMQ,sBAA8D,GAAG,SAAjEA,sBAA8DA,CAAIP,MAAM,EAAEC,KAAK,EAAK;EACxFD,MAAM,GAAGL,cAAA,GAAAc,aAAa,CAACC,OAAO,CAACC,WAAW,CAACX,MAAM,EAAEC,KAAK,CAAC;EACzDD,MAAM,GAAGL,cAAA,GAAAiB,SAAS,CAACF,OAAO,CAACC,WAAW,CAACX,MAAM,EAAEC,KAAK,CAAC;EACrD,OAAOD,MAAM;AACf,CAAC;AAAC,IAAAa,QAAA,GAEad,eAAe;AAAAS,OAAA,CAAAM,OAAA,GAAAD,QAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}