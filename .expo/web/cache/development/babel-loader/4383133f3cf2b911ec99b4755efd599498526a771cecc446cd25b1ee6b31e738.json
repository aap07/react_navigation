{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar path_1 = tslib_1.__importDefault(require(\"path\"));\nvar fs_1 = require(\"fs\");\nvar debug_1 = tslib_1.__importDefault(require(\"debug\"));\nvar command_exists_1 = require(\"command-exists\");\nvar utils_1 = require(\"../utils\");\nvar shared_1 = require(\"./shared\");\nvar debug = debug_1.default('devcert:platforms:macos');\nvar getCertUtilPath = function getCertUtilPath() {\n  return path_1.default.join(utils_1.run('brew', ['--prefix', 'nss']).toString().trim(), 'bin', 'certutil');\n};\nvar MacOSPlatform = function () {\n  function MacOSPlatform() {\n    _classCallCheck(this, MacOSPlatform);\n    this.FIREFOX_BUNDLE_PATH = '/Applications/Firefox.app';\n    this.FIREFOX_BIN_PATH = path_1.default.join(this.FIREFOX_BUNDLE_PATH, 'Contents/MacOS/firefox');\n    this.FIREFOX_NSS_DIR = path_1.default.join(process.env.HOME, 'Library/Application Support/Firefox/Profiles/*');\n    this.HOST_FILE_PATH = '/etc/hosts';\n  }\n  _createClass(MacOSPlatform, [{\n    key: \"addToTrustStores\",\n    value: function addToTrustStores(certificatePath) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return tslib_1.__awaiter(this, void 0, void 0, function* () {\n        debug('Adding devcert root CA to macOS system keychain');\n        utils_1.run('sudo', ['security', 'add-trusted-cert', '-d', '-r', 'trustRoot', '-k', '/Library/Keychains/System.keychain', '-p', 'ssl', '-p', 'basic', certificatePath]);\n        if (this.isFirefoxInstalled()) {\n          debug('Firefox install detected. Adding devcert root CA to Firefox trust store');\n          if (!this.isNSSInstalled()) {\n            if (!options.skipCertutilInstall) {\n              if (command_exists_1.sync('brew')) {\n                debug(`certutil is not already installed, but Homebrew is detected. Trying to install certutil via Homebrew...`);\n                try {\n                  utils_1.run('brew', ['install', 'nss'], {\n                    stdio: 'ignore'\n                  });\n                } catch (e) {\n                  debug(`brew install nss failed`);\n                }\n              } else {\n                debug(`Homebrew didn't work, so we can't try to install certutil. Falling back to manual certificate install`);\n                return yield shared_1.openCertificateInFirefox(this.FIREFOX_BIN_PATH, certificatePath);\n              }\n            } else {\n              debug(`certutil is not already installed, and skipCertutilInstall is true, so we have to fall back to a manual install`);\n              return yield shared_1.openCertificateInFirefox(this.FIREFOX_BIN_PATH, certificatePath);\n            }\n          }\n          yield shared_1.closeFirefox();\n          yield shared_1.addCertificateToNSSCertDB(this.FIREFOX_NSS_DIR, certificatePath, getCertUtilPath());\n        } else {\n          debug('Firefox does not appear to be installed, skipping Firefox-specific steps...');\n        }\n      });\n    }\n  }, {\n    key: \"removeFromTrustStores\",\n    value: function removeFromTrustStores(certificatePath) {\n      debug('Removing devcert root CA from macOS system keychain');\n      try {\n        utils_1.run('sudo', ['security', 'remove-trusted-cert', '-d', certificatePath], {\n          stdio: 'ignore'\n        });\n      } catch (e) {\n        debug(`failed to remove ${certificatePath} from macOS cert store, continuing. ${e.toString()}`);\n      }\n      if (this.isFirefoxInstalled() && this.isNSSInstalled()) {\n        debug('Firefox install and certutil install detected. Trying to remove root CA from Firefox NSS databases');\n        shared_1.removeCertificateFromNSSCertDB(this.FIREFOX_NSS_DIR, certificatePath, getCertUtilPath());\n      }\n    }\n  }, {\n    key: \"addDomainToHostFileIfMissing\",\n    value: function addDomainToHostFileIfMissing(domain) {\n      return tslib_1.__awaiter(this, void 0, void 0, function* () {\n        var trimDomain = domain.trim().replace(/[\\s;]/g, '');\n        var hostsFileContents = fs_1.readFileSync(this.HOST_FILE_PATH, 'utf8');\n        if (!hostsFileContents.includes(trimDomain)) {\n          utils_1.sudoAppend(this.HOST_FILE_PATH, `127.0.0.1 ${trimDomain}\\n`);\n        }\n      });\n    }\n  }, {\n    key: \"deleteProtectedFiles\",\n    value: function deleteProtectedFiles(filepath) {\n      shared_1.assertNotTouchingFiles(filepath, 'delete');\n      utils_1.run('sudo', ['rm', '-rf', filepath]);\n    }\n  }, {\n    key: \"readProtectedFile\",\n    value: function readProtectedFile(filepath) {\n      return tslib_1.__awaiter(this, void 0, void 0, function* () {\n        shared_1.assertNotTouchingFiles(filepath, 'read');\n        return (yield utils_1.run('sudo', ['cat', filepath])).toString().trim();\n      });\n    }\n  }, {\n    key: \"writeProtectedFile\",\n    value: function writeProtectedFile(filepath, contents) {\n      return tslib_1.__awaiter(this, void 0, void 0, function* () {\n        shared_1.assertNotTouchingFiles(filepath, 'write');\n        if (fs_1.existsSync(filepath)) {\n          yield utils_1.run('sudo', ['rm', filepath]);\n        }\n        fs_1.writeFileSync(filepath, contents);\n        yield utils_1.run('sudo', ['chown', '0', filepath]);\n        yield utils_1.run('sudo', ['chmod', '600', filepath]);\n      });\n    }\n  }, {\n    key: \"isFirefoxInstalled\",\n    value: function isFirefoxInstalled() {\n      return fs_1.existsSync(this.FIREFOX_BUNDLE_PATH);\n    }\n  }, {\n    key: \"isNSSInstalled\",\n    value: function isNSSInstalled() {\n      try {\n        return utils_1.run('brew', ['list', '-1']).toString().includes('\\nnss\\n');\n      } catch (e) {\n        return false;\n      }\n    }\n  }]);\n  return MacOSPlatform;\n}();\nexports.default = MacOSPlatform;\n;","map":{"version":3,"names":["path_1","tslib_1","__importDefault","require","fs_1","debug_1","command_exists_1","utils_1","shared_1","debug","default","getCertUtilPath","join","run","toString","trim","MacOSPlatform","_classCallCheck","FIREFOX_BUNDLE_PATH","FIREFOX_BIN_PATH","FIREFOX_NSS_DIR","process","env","HOME","HOST_FILE_PATH","_createClass","key","value","addToTrustStores","certificatePath","options","arguments","length","undefined","isFirefoxInstalled","isNSSInstalled","skipCertutilInstall","sync","stdio","e","openCertificateInFirefox","closeFirefox","addCertificateToNSSCertDB","removeFromTrustStores","removeCertificateFromNSSCertDB","addDomainToHostFileIfMissing","domain","trimDomain","replace","hostsFileContents","readFileSync","includes","sudoAppend","deleteProtectedFiles","filepath","assertNotTouchingFiles","readProtectedFile","writeProtectedFile","contents","existsSync","writeFileSync","exports"],"sources":["\\Users\\evanbacon\\Documents\\GitHub\\devcert\\platforms\\darwin.ts"],"sourcesContent":["import path from 'path';\nimport { writeFileSync as writeFile, existsSync as exists, readFileSync as read } from 'fs';\nimport createDebug from 'debug';\nimport { sync as commandExists } from 'command-exists';\nimport { run, sudoAppend } from '../utils';\nimport { Options } from '../index';\nimport { addCertificateToNSSCertDB, assertNotTouchingFiles, openCertificateInFirefox, closeFirefox, removeCertificateFromNSSCertDB } from './shared';\nimport { Platform } from '.';\n\nconst debug = createDebug('devcert:platforms:macos');\n\nconst getCertUtilPath = () => path.join(run('brew', ['--prefix', 'nss']).toString().trim(), 'bin', 'certutil');\n\nexport default class MacOSPlatform implements Platform {\n\n  private FIREFOX_BUNDLE_PATH = '/Applications/Firefox.app';\n  private FIREFOX_BIN_PATH = path.join(this.FIREFOX_BUNDLE_PATH, 'Contents/MacOS/firefox');\n  private FIREFOX_NSS_DIR = path.join(process.env.HOME, 'Library/Application Support/Firefox/Profiles/*');\n\n  private HOST_FILE_PATH = '/etc/hosts';\n\n  /**\n   * macOS is pretty simple - just add the certificate to the system keychain,\n   * and most applications will delegate to that for determining trusted\n   * certificates. Firefox, of course, does it's own thing. We can try to\n   * automatically install the cert with Firefox if we can use certutil via the\n   * `nss` Homebrew package, otherwise we go manual with user-facing prompts.\n   */\n  async addToTrustStores(certificatePath: string, options: Options = {}): Promise<void> {\n\n    // Chrome, Safari, system utils\n    debug('Adding devcert root CA to macOS system keychain');\n    run('sudo', [\n      'security',\n      'add-trusted-cert',\n      '-d',\n      '-r',\n      'trustRoot',\n      '-k',\n      '/Library/Keychains/System.keychain',\n      '-p',\n      'ssl',\n      '-p',\n      'basic',\n      certificatePath\n    ]);\n\n    if (this.isFirefoxInstalled()) {\n      // Try to use certutil to install the cert automatically\n      debug('Firefox install detected. Adding devcert root CA to Firefox trust store');\n      if (!this.isNSSInstalled()) {\n        if (!options.skipCertutilInstall) {\n          if (commandExists('brew')) {\n            debug(`certutil is not already installed, but Homebrew is detected. Trying to install certutil via Homebrew...`);\n            try {\n              run('brew', ['install', 'nss'], { stdio: 'ignore' });\n            } catch (e) {\n              debug(`brew install nss failed`);\n            }\n          } else {\n            debug(`Homebrew didn't work, so we can't try to install certutil. Falling back to manual certificate install`);\n            return await openCertificateInFirefox(this.FIREFOX_BIN_PATH, certificatePath);\n          }\n        } else {\n          debug(`certutil is not already installed, and skipCertutilInstall is true, so we have to fall back to a manual install`)\n          return await openCertificateInFirefox(this.FIREFOX_BIN_PATH, certificatePath);\n        }\n      }\n      await closeFirefox();\n      await addCertificateToNSSCertDB(this.FIREFOX_NSS_DIR, certificatePath, getCertUtilPath());\n    } else {\n      debug('Firefox does not appear to be installed, skipping Firefox-specific steps...');\n    }\n  }\n  \n  removeFromTrustStores(certificatePath: string) {\n    debug('Removing devcert root CA from macOS system keychain');\n    try {\n      run('sudo', [\n        'security',\n        'remove-trusted-cert',\n        '-d',\n        certificatePath\n      ], {\n        stdio: 'ignore'\n      });\n    } catch(e) {\n      debug(`failed to remove ${ certificatePath } from macOS cert store, continuing. ${ e.toString() }`);\n    }\n    if (this.isFirefoxInstalled() && this.isNSSInstalled()) {\n      debug('Firefox install and certutil install detected. Trying to remove root CA from Firefox NSS databases');\n      removeCertificateFromNSSCertDB(this.FIREFOX_NSS_DIR, certificatePath, getCertUtilPath());\n    }\n  }\n\n  async addDomainToHostFileIfMissing(domain: string) {\n    const trimDomain = domain.trim().replace(/[\\s;]/g,'')\n    let hostsFileContents = read(this.HOST_FILE_PATH, 'utf8');\n    if (!hostsFileContents.includes(trimDomain)) {\n      sudoAppend(this.HOST_FILE_PATH, `127.0.0.1 ${trimDomain}\\n`);\n    }\n  }\n\n  deleteProtectedFiles(filepath: string) {\n    assertNotTouchingFiles(filepath, 'delete');\n    run('sudo', ['rm', '-rf', filepath]);\n  }\n\n  async readProtectedFile(filepath: string) {\n    assertNotTouchingFiles(filepath, 'read');\n    return (await run('sudo', ['cat', filepath])).toString().trim();\n  }\n\n  async writeProtectedFile(filepath: string, contents: string) {\n    assertNotTouchingFiles(filepath, 'write');\n    if (exists(filepath)) {\n      await run('sudo', ['rm', filepath]);\n    }\n    writeFile(filepath, contents);\n    await run('sudo', ['chown', '0', filepath]);\n    await run('sudo', ['chmod', '600', filepath]);\n  }\n\n  private isFirefoxInstalled() {\n    return exists(this.FIREFOX_BUNDLE_PATH);\n  }\n\n  private isNSSInstalled() {\n    try {\n      return run('brew', ['list', '-1']).toString().includes('\\nnss\\n');\n    } catch (e) {\n      return false;\n    }\n  }\n\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}