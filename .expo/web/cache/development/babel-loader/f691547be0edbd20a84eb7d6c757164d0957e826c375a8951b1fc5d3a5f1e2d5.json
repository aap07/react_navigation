{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _config = require(\"@expo/config\");\nvar _assert = _interopRequireDefault(require(\"assert\"));\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _log = require(\"../../log\");\nvar _rudderstackClient = require(\"../../utils/analytics/rudderstackClient\");\nvar _errors = require(\"../../utils/errors\");\nvar _link = require(\"../../utils/link\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = require(\"debug\")(\"expo:start:platforms:platformManager\");\nvar PlatformManager = function () {\n  function PlatformManager(projectRoot, props) {\n    _classCallCheck(this, PlatformManager);\n    this.projectRoot = projectRoot;\n    this.props = props;\n  }\n  _createClass(PlatformManager, [{\n    key: \"_getAppIdResolver\",\n    value: function _getAppIdResolver() {\n      throw new _errors.UnimplementedError();\n    }\n  }, {\n    key: \"getExpoGoOrCustomRuntimeUrlAsync\",\n    value: function () {\n      var _getExpoGoOrCustomRuntimeUrlAsync = _asyncToGenerator(function* (deviceManager) {\n        var redirectUrl = this.props.getRedirectUrl();\n        if (redirectUrl) {\n          var applicationId;\n          try {\n            applicationId = yield this._getAppIdResolver().getAppIdAsync();\n          } catch (_unused) {\n            _log.Log.warn(_chalk.default`\\u203A Launching in Expo Go. If you want to use a ` + `development build, you need to create and install one first, or, if you already ` + _chalk.default`have a build, add {bold ios.bundleIdentifier} and {bold android.package} to ` + `this project's app config.\\n${(0, _link).learnMore(\"https://docs.expo.dev/development/build/\")}`);\n          }\n          if (applicationId) {\n            debug(`Resolving launch URL: (appId: ${applicationId}, redirect URL: ${redirectUrl})`);\n            if (yield deviceManager.isAppInstalledAsync(applicationId)) {\n              return redirectUrl;\n            } else {\n              _log.Log.warn(_chalk.default`\\u203A The {bold expo-dev-client} package is installed, but a development build is not ` + _chalk.default`installed on {bold ${deviceManager.name}}.\\nLaunching in Expo Go. If you want to use a ` + `development build, you need to create and install one first.\\n${(0, _link).learnMore(\"https://docs.expo.dev/development/build/\")}`);\n            }\n          }\n        }\n        return this.props.getExpoGoUrl();\n      });\n      function getExpoGoOrCustomRuntimeUrlAsync(_x) {\n        return _getExpoGoOrCustomRuntimeUrlAsync.apply(this, arguments);\n      }\n      return getExpoGoOrCustomRuntimeUrlAsync;\n    }()\n  }, {\n    key: \"openProjectInExpoGoAsync\",\n    value: function () {\n      var _openProjectInExpoGoAsync = _asyncToGenerator(function* () {\n        var resolveSettings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var deviceManager = yield this.props.resolveDeviceAsync(resolveSettings);\n        var url = yield this.getExpoGoOrCustomRuntimeUrlAsync(deviceManager);\n        deviceManager.logOpeningUrl(url);\n        var _getConfig = (0, _config).getConfig(this.projectRoot),\n          exp = _getConfig.exp;\n        var installedExpo = yield deviceManager.ensureExpoGoAsync(exp.sdkVersion);\n        deviceManager.activateWindowAsync();\n        yield deviceManager.openUrlAsync(url);\n        yield (0, _rudderstackClient).logEventAsync(\"Open Url on Device\", {\n          platform: this.props.platform,\n          installedExpo: installedExpo\n        });\n        return {\n          url: url\n        };\n      });\n      function openProjectInExpoGoAsync() {\n        return _openProjectInExpoGoAsync.apply(this, arguments);\n      }\n      return openProjectInExpoGoAsync;\n    }()\n  }, {\n    key: \"openProjectInCustomRuntimeAsync\",\n    value: function () {\n      var _openProjectInCustomRuntimeAsync = _asyncToGenerator(function* () {\n        var resolveSettings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        debug(`open custom (${Object.entries(props).map(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            k = _ref2[0],\n            v = _ref2[1];\n          return `${k}: ${v}`;\n        }).join(\", \")})`);\n        var url = this.props.getCustomRuntimeUrl({\n          scheme: props.scheme\n        });\n        debug(`Opening project in custom runtime: ${url} -- %O`, props);\n        var _applicationId;\n        var applicationId = (_applicationId = props.applicationId) != null ? _applicationId : yield this._getAppIdResolver().getAppIdAsync();\n        var deviceManager = yield this.props.resolveDeviceAsync(resolveSettings);\n        if (!(yield deviceManager.isAppInstalledAsync(applicationId))) {\n          throw new _errors.CommandError(`No development build (${applicationId}) for this project is installed. ` + `Please make and install a development build on the device first.\\n${(0, _link).learnMore(\"https://docs.expo.dev/development/build/\")}`);\n        }\n        yield (0, _rudderstackClient).logEventAsync(\"Open Url on Device\", {\n          platform: this.props.platform,\n          installedExpo: false\n        });\n        if (!url) {\n          url = this._resolveAlternativeLaunchUrl(applicationId, props);\n        }\n        deviceManager.logOpeningUrl(url);\n        yield deviceManager.activateWindowAsync();\n        yield deviceManager.openUrlAsync(url);\n        return {\n          url: url\n        };\n      });\n      function openProjectInCustomRuntimeAsync() {\n        return _openProjectInCustomRuntimeAsync.apply(this, arguments);\n      }\n      return openProjectInCustomRuntimeAsync;\n    }()\n  }, {\n    key: \"openAsync\",\n    value: function () {\n      var _openAsync = _asyncToGenerator(function* (options) {\n        var resolveSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        debug(`open (runtime: ${options.runtime}, platform: ${this.props.platform}, device: %O, shouldPrompt: ${resolveSettings.shouldPrompt})`, resolveSettings.device);\n        if (options.runtime === \"expo\") {\n          return this.openProjectInExpoGoAsync(resolveSettings);\n        } else if (options.runtime === \"web\") {\n          return this.openWebProjectAsync(resolveSettings);\n        } else if (options.runtime === \"custom\") {\n          return this.openProjectInCustomRuntimeAsync(resolveSettings, options.props);\n        } else {\n          throw new _errors.CommandError(`Invalid runtime target: ${options.runtime}`);\n        }\n      });\n      function openAsync(_x2) {\n        return _openAsync.apply(this, arguments);\n      }\n      return openAsync;\n    }()\n  }, {\n    key: \"openWebProjectAsync\",\n    value: function () {\n      var _openWebProjectAsync = _asyncToGenerator(function* () {\n        var resolveSettings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var url = this.props.getDevServerUrl();\n        (0, _assert).default(url, \"Dev server is not running.\");\n        var deviceManager = yield this.props.resolveDeviceAsync(resolveSettings);\n        deviceManager.logOpeningUrl(url);\n        yield deviceManager.activateWindowAsync();\n        yield deviceManager.openUrlAsync(url);\n        return {\n          url: url\n        };\n      });\n      function openWebProjectAsync() {\n        return _openWebProjectAsync.apply(this, arguments);\n      }\n      return openWebProjectAsync;\n    }()\n  }, {\n    key: \"_resolveAlternativeLaunchUrl\",\n    value: function _resolveAlternativeLaunchUrl(applicationId) {\n      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      throw new _errors.UnimplementedError();\n    }\n  }]);\n  return PlatformManager;\n}();\nexports.PlatformManager = PlatformManager;","map":{"version":3,"names":["_slicedToArray","require","_asyncToGenerator","_classCallCheck","_createClass","_config","_assert","_interopRequireDefault","_chalk","_log","_rudderstackClient","_errors","_link","debug","PlatformManager","projectRoot","props","key","value","_getAppIdResolver","UnimplementedError","_getExpoGoOrCustomRuntimeUrlAsync","deviceManager","redirectUrl","getRedirectUrl","applicationId","getAppIdAsync","_unused","Log","warn","default","learnMore","isAppInstalledAsync","name","getExpoGoUrl","getExpoGoOrCustomRuntimeUrlAsync","_x","apply","arguments","_openProjectInExpoGoAsync","resolveSettings","length","undefined","resolveDeviceAsync","url","logOpeningUrl","_getConfig","getConfig","exp","installedExpo","ensureExpoGoAsync","sdkVersion","activateWindowAsync","openUrlAsync","logEventAsync","platform","openProjectInExpoGoAsync","_openProjectInCustomRuntimeAsync","Object","entries","map","_ref","_ref2","k","v","join","getCustomRuntimeUrl","scheme","_applicationId","CommandError","_resolveAlternativeLaunchUrl","openProjectInCustomRuntimeAsync","_openAsync","options","runtime","shouldPrompt","device","openWebProjectAsync","openAsync","_x2","_openWebProjectAsync","getDevServerUrl"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\platforms\\PlatformManager.ts"],"sourcesContent":["import { getConfig } from '@expo/config';\nimport assert from 'assert';\nimport chalk from 'chalk';\n\nimport { Log } from '../../log';\nimport { logEventAsync } from '../../utils/analytics/rudderstackClient';\nimport { CommandError, UnimplementedError } from '../../utils/errors';\nimport { learnMore } from '../../utils/link';\nimport { AppIdResolver } from './AppIdResolver';\nimport { DeviceManager } from './DeviceManager';\n\nconst debug = require('debug')('expo:start:platforms:platformManager') as typeof console.log;\n\nexport interface BaseOpenInCustomProps {\n  scheme?: string;\n  applicationId?: string | null;\n}\n\nexport interface BaseResolveDeviceProps<IDevice> {\n  /** Should prompt the user to select a device. */\n  shouldPrompt?: boolean;\n  /** The target device to use. */\n  device?: IDevice;\n}\n\n/** An abstract class for launching a URL on a device. */\nexport class PlatformManager<\n  IDevice,\n  IOpenInCustomProps extends BaseOpenInCustomProps = BaseOpenInCustomProps,\n  IResolveDeviceProps extends BaseResolveDeviceProps<IDevice> = BaseResolveDeviceProps<IDevice>\n> {\n  constructor(\n    protected projectRoot: string,\n    protected props: {\n      platform: 'ios' | 'android';\n      /** Get the base URL for the dev server hosting this platform manager. */\n      getDevServerUrl: () => string | null;\n      /** Expo Go URL. */\n      getExpoGoUrl: () => string;\n      /**\n       * Get redirect URL for native disambiguation.\n       * @returns a URL like `http://localhost:8081/_expo/loading`\n       */\n      getRedirectUrl: () => string | null;\n      /** Dev Client */\n      getCustomRuntimeUrl: (props?: { scheme?: string }) => string | null;\n      /** Resolve a device, this function should automatically handle opening the device and asserting any system validations. */\n      resolveDeviceAsync: (\n        resolver?: Partial<IResolveDeviceProps>\n      ) => Promise<DeviceManager<IDevice>>;\n    }\n  ) {}\n\n  /** Returns the project application identifier or asserts that one is not defined. Exposed for testing. */\n  _getAppIdResolver(): AppIdResolver {\n    throw new UnimplementedError();\n  }\n\n  /**\n   * Get the URL for users intending to launch the project in Expo Go.\n   * The CLI will check if the project has a custom dev client and if the redirect page feature is enabled.\n   * If both are true, the CLI will return the redirect page URL.\n   */\n  protected async getExpoGoOrCustomRuntimeUrlAsync(\n    deviceManager: DeviceManager<IDevice>\n  ): Promise<string> {\n    // Determine if the redirect page feature is enabled first since it's the cheapest to check.\n    const redirectUrl = this.props.getRedirectUrl();\n    if (redirectUrl) {\n      // If the redirect page feature is enabled, check if the project has a resolvable native identifier.\n      let applicationId;\n      try {\n        applicationId = await this._getAppIdResolver().getAppIdAsync();\n      } catch {\n        Log.warn(\n          chalk`\\u203A Launching in Expo Go. If you want to use a ` +\n            `development build, you need to create and install one first, or, if you already ` +\n            chalk`have a build, add {bold ios.bundleIdentifier} and {bold android.package} to ` +\n            `this project's app config.\\n${learnMore('https://docs.expo.dev/development/build/')}`\n        );\n      }\n      if (applicationId) {\n        debug(`Resolving launch URL: (appId: ${applicationId}, redirect URL: ${redirectUrl})`);\n        // NOTE(EvanBacon): This adds considerable amount of time to the command, we should consider removing or memoizing it.\n        // Finally determine if the target device has a custom dev client installed.\n        if (await deviceManager.isAppInstalledAsync(applicationId)) {\n          return redirectUrl;\n        } else {\n          // Log a warning if no development build is available on the device, but the\n          // interstitial page would otherwise be opened.\n          Log.warn(\n            chalk`\\u203A The {bold expo-dev-client} package is installed, but a development build is not ` +\n              chalk`installed on {bold ${deviceManager.name}}.\\nLaunching in Expo Go. If you want to use a ` +\n              `development build, you need to create and install one first.\\n${learnMore(\n                'https://docs.expo.dev/development/build/'\n              )}`\n          );\n        }\n      }\n    }\n\n    return this.props.getExpoGoUrl();\n  }\n\n  protected async openProjectInExpoGoAsync(\n    resolveSettings: Partial<IResolveDeviceProps> = {}\n  ): Promise<{ url: string }> {\n    const deviceManager = await this.props.resolveDeviceAsync(resolveSettings);\n    const url = await this.getExpoGoOrCustomRuntimeUrlAsync(deviceManager);\n\n    deviceManager.logOpeningUrl(url);\n\n    // TODO: Expensive, we should only do this once.\n    const { exp } = getConfig(this.projectRoot);\n    const installedExpo = await deviceManager.ensureExpoGoAsync(exp.sdkVersion);\n\n    deviceManager.activateWindowAsync();\n    await deviceManager.openUrlAsync(url);\n\n    await logEventAsync('Open Url on Device', {\n      platform: this.props.platform,\n      installedExpo,\n    });\n\n    return { url };\n  }\n\n  private async openProjectInCustomRuntimeAsync(\n    resolveSettings: Partial<IResolveDeviceProps> = {},\n    props: Partial<IOpenInCustomProps> = {}\n  ): Promise<{ url: string }> {\n    debug(\n      `open custom (${Object.entries(props)\n        .map(([k, v]) => `${k}: ${v}`)\n        .join(', ')})`\n    );\n\n    let url = this.props.getCustomRuntimeUrl({ scheme: props.scheme });\n    debug(`Opening project in custom runtime: ${url} -- %O`, props);\n    // TODO: It's unclear why we do application id validation when opening with a URL\n    const applicationId = props.applicationId ?? (await this._getAppIdResolver().getAppIdAsync());\n\n    const deviceManager = await this.props.resolveDeviceAsync(resolveSettings);\n\n    if (!(await deviceManager.isAppInstalledAsync(applicationId))) {\n      throw new CommandError(\n        `No development build (${applicationId}) for this project is installed. ` +\n          `Please make and install a development build on the device first.\\n${learnMore(\n            'https://docs.expo.dev/development/build/'\n          )}`\n      );\n    }\n\n    // TODO: Rethink analytics\n    await logEventAsync('Open Url on Device', {\n      platform: this.props.platform,\n      installedExpo: false,\n    });\n\n    if (!url) {\n      url = this._resolveAlternativeLaunchUrl(applicationId, props);\n    }\n\n    deviceManager.logOpeningUrl(url);\n    await deviceManager.activateWindowAsync();\n    await deviceManager.openUrlAsync(url);\n\n    return {\n      url,\n    };\n  }\n\n  /** Launch the project on a device given the input runtime. */\n  async openAsync(\n    options:\n      | {\n          runtime: 'expo' | 'web';\n        }\n      | {\n          runtime: 'custom';\n          props?: Partial<IOpenInCustomProps>;\n        },\n    resolveSettings: Partial<IResolveDeviceProps> = {}\n  ): Promise<{ url: string }> {\n    debug(\n      `open (runtime: ${options.runtime}, platform: ${this.props.platform}, device: %O, shouldPrompt: ${resolveSettings.shouldPrompt})`,\n      resolveSettings.device\n    );\n    if (options.runtime === 'expo') {\n      return this.openProjectInExpoGoAsync(resolveSettings);\n    } else if (options.runtime === 'web') {\n      return this.openWebProjectAsync(resolveSettings);\n    } else if (options.runtime === 'custom') {\n      return this.openProjectInCustomRuntimeAsync(resolveSettings, options.props);\n    } else {\n      throw new CommandError(`Invalid runtime target: ${options.runtime}`);\n    }\n  }\n\n  /** Open the current web project (Webpack) in a device . */\n  private async openWebProjectAsync(resolveSettings: Partial<IResolveDeviceProps> = {}): Promise<{\n    url: string;\n  }> {\n    const url = this.props.getDevServerUrl();\n    assert(url, 'Dev server is not running.');\n\n    const deviceManager = await this.props.resolveDeviceAsync(resolveSettings);\n    deviceManager.logOpeningUrl(url);\n    await deviceManager.activateWindowAsync();\n    await deviceManager.openUrlAsync(url);\n\n    return { url };\n  }\n\n  /** If the launch URL cannot be determined (`custom` runtimes) then an alternative string can be provided to open the device. Often a device ID or activity to launch. Exposed for testing. */\n  _resolveAlternativeLaunchUrl(\n    applicationId: string,\n    props: Partial<IOpenInCustomProps> = {}\n  ): string {\n    throw new UnimplementedError();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}