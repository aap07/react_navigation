{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/code-signing-certificates/build/main.d.ts"],"sourcesContent":["/// <reference types=\"node\" />\nimport { pki as PKI } from 'node-forge';\n/**\n * Custom X.509 extension that stores information about the Expo project that a code signing certificate is valid for.\n * Used to prevent spoofing of scoping identifiers in Expo Go.\n *\n * Note: Generated with oidgen script. Resides in the Microsoft OID space. Could apply for Expo space but would take time: https://pen.iana.org/pen/PenApplication.page\n */\nexport declare const expoProjectInformationOID = \"1.2.840.113556.1.8000.2554.43437.254.128.102.157.7894389.20439.2.1\";\n/**\n * Generate a public and private RSA key pair.\n * @returns RSA key pair\n */\nexport declare function generateKeyPair(): PKI.rsa.KeyPair;\n/**\n * Convert a key RSA key pair generated using {@link generateKeyPair} to PEM strings.\n * @param keyPair RSA key pair\n * @returns PEM formatted key pair\n */\nexport declare function convertKeyPairToPEM(keyPair: PKI.rsa.KeyPair): {\n    privateKeyPEM: string;\n    publicKeyPEM: string;\n};\n/**\n * Convert a X.509 certificate generated using {@link generateSelfSignedCodeSigningCertificate} to a PEM string.\n * @param certificate X.509 certificate\n * @returns\n */\nexport declare function convertCertificateToCertificatePEM(certificate: PKI.Certificate): string;\n/**\n * Convert a PEM-formatted RSA key pair to a key pair for use with this library.\n * @param keyPair PEM-formatted private key and public key\n * @returns RSA key pair\n */\nexport declare function convertKeyPairPEMToKeyPair({ privateKeyPEM, publicKeyPEM, }: {\n    privateKeyPEM: string;\n    publicKeyPEM: string;\n}): PKI.rsa.KeyPair;\n/**\n * Convert a PEM-formatted RSA public key to a public key for use with this library.\n * @param publicKeyPEM PEM formatted public key\n * @returns RSA public key\n */\nexport declare function convertPublicKeyPEMToPublicKey(publicKeyPEM: string): PKI.rsa.PublicKey;\n/**\n * Convert a PEM-formatted RSA private key to a private key for use with this library.\n * @param privateKeyPEM PEM formatted private key\n * @returns RSA private key\n */\nexport declare function convertPrivateKeyPEMToPrivateKey(privateKeyPEM: string): PKI.rsa.PrivateKey;\n/**\n * Convert a PEM-formatted X.509 certificate to a certificate for use with this library.\n * @param certificatePEM PEM formatted X.509 certificate\n * @returns  X.509 Certificate\n */\nexport declare function convertCertificatePEMToCertificate(certificatePEM: string): PKI.Certificate;\n/**\n * Convert a CSR to PEM-formatted X.509 CSR\n * @param csr CSR\n * @returns X.509 CSR\n */\nexport declare function convertCSRToCSRPEM(csr: PKI.CertificateRequest): string;\n/**\n * Convert a PEM-formatted X.509 CSR to a CSR\n * @param CSRPEM PEM-formatted X.509 CSR\n * @returns CSR\n */\nexport declare function convertCSRPEMToCSR(CSRPEM: string): PKI.CertificateRequest;\ndeclare type GenerateParameters = {\n    /**\n     * Public/private key pair generated via {@link generateKeyPair}.\n     */\n    keyPair: PKI.rsa.KeyPair;\n    /**\n     * Certificate validity range start.\n     */\n    validityNotBefore: Date;\n    /**\n     * Certificate validity range end.\n     */\n    validityNotAfter: Date;\n    /**\n     * CN issuer and subject Distinguished Name (DN).\n     * Used for both issuer and subject in the case of self-signed certificates.\n     */\n    commonName: string;\n};\n/**\n * Generate a self-signed (root) code-signing certificate valid for use with expo-updates.\n *\n * @returns PKI.Certificate valid for expo-updates code signing\n */\nexport declare function generateSelfSignedCodeSigningCertificate({ keyPair: { publicKey, privateKey }, validityNotBefore, validityNotAfter, commonName, }: GenerateParameters): PKI.Certificate;\n/**\n * Validate that a certificate and corresponding key pair can be used for expo-updates code signing.\n * @param certificate X.509 certificate\n * @param keyPair RSA key pair\n */\nexport declare function validateSelfSignedCertificate(certificate: PKI.Certificate, keyPair: PKI.rsa.KeyPair): void;\n/**\n * Sign a SHA-256 hash of the provided string with an RSA private key and verify that the signature\n * is valid for the RSA public key in the certificate. The verification part is most useful for\n * debugging, so while this may be used in server implementation for expo-updates code signing,\n * a similar method without verification can be created for efficiency for use in production.\n *\n * @param privateKey RSA private key\n * @param certificate X.509 certificate\n * @param bufferToSign buffer to hash, generate a signature for, and verify\n * @returns base64-encoded RSA signature\n */\nexport declare function signBufferRSASHA256AndVerify(privateKey: PKI.rsa.PrivateKey, certificate: PKI.Certificate, bufferToSign: Buffer): string;\n/**\n * Generate a self-signed CSR for a given key pair. Most commonly used with {@link generateDevelopmentCertificateFromCSR}.\n * @param keyPair RSA key pair\n * @param commonName commonName attribute of the subject of the resulting certificate (human readable name of the certificate)\n * @returns CSR\n */\nexport declare function generateCSR(keyPair: PKI.rsa.KeyPair, commonName: string): PKI.CertificateRequest;\n/**\n * For use by a server to generate a development certificate (good for 30 days) for a particular\n * appId and scopeKey (Expo project manifest fields verified by the client during certificate validation).\n *\n * Note that this function assumes the issuer is trusted, and that the user that created the CSR and issued\n * the request has permission to sign manifests for the appId and scopeKey. This constraint must be\n * verified on the server before calling this method.\n *\n * @param issuerPrivateKey private key to sign the resulting certificate with\n * @param issuerCertificate parent certificate (should be a CA) of the resulting certificate\n * @param csr certificate signing request containing the user's public key\n * @param appId app ID (UUID) of the app that the resulting certificate will sign the development manifest for\n * @param scopeKey scope key of the app that the resuting certificate will sign the development manifest for\n * @returns certificate to use to sign development manifests\n */\nexport declare function generateDevelopmentCertificateFromCSR(issuerPrivateKey: PKI.rsa.PrivateKey, issuerCertificate: PKI.Certificate, csr: PKI.CertificateRequest, appId: string, scopeKey: string): PKI.Certificate;\nexport {};\n"],"mappings":"AAsIA"},"metadata":{},"sourceType":"module","externalDependencies":[]}