{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.maybeBailOnGitStatusAsync = maybeBailOnGitStatusAsync;\nexports.validateGitStatusAsync = validateGitStatusAsync;\nvar _spawnAsync = _interopRequireDefault(require(\"@expo/spawn-async\"));\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar Log = _interopRequireWildcard(require(\"../log\"));\nvar _env = require(\"./env\");\nvar _interactive = require(\"./interactive\");\nvar _prompts = require(\"./prompts\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction maybeBailOnGitStatusAsync() {\n  return _maybeBailOnGitStatusAsync.apply(this, arguments);\n}\nfunction _maybeBailOnGitStatusAsync() {\n  _maybeBailOnGitStatusAsync = _asyncToGenerator(function* () {\n    if (_env.env.EXPO_NO_GIT_STATUS) {\n      Log.warn(\"Git status is dirty but the command will continue because EXPO_NO_GIT_STATUS is enabled...\");\n      return false;\n    }\n    var isGitStatusClean = yield validateGitStatusAsync();\n    if (!isGitStatusClean) {\n      if (!(0, _interactive).isInteractive()) {\n        Log.warn(`Git status is dirty but the command will continue because the terminal is not interactive.`);\n        return false;\n      }\n      Log.log();\n      var answer = yield (0, _prompts).confirmAsync({\n        message: `Would you like to proceed?`\n      });\n      if (!answer) {\n        return true;\n      }\n      Log.log();\n    }\n    return false;\n  });\n  return _maybeBailOnGitStatusAsync.apply(this, arguments);\n}\nfunction validateGitStatusAsync() {\n  return _validateGitStatusAsync.apply(this, arguments);\n}\nfunction _validateGitStatusAsync() {\n  _validateGitStatusAsync = _asyncToGenerator(function* () {\n    var workingTreeStatus = \"unknown\";\n    try {\n      var result = yield (0, _spawnAsync).default(\"git\", [\"status\", \"--porcelain\"]);\n      workingTreeStatus = result.stdout === \"\" ? \"clean\" : \"dirty\";\n    } catch (_unused) {}\n    if (workingTreeStatus === \"clean\") {\n      Log.log(`Your git working tree is ${_chalk.default.green(\"clean\")}`);\n      Log.log(\"To revert the changes after this command completes, you can run the following:\");\n      Log.log(\"  git clean --force && git reset --hard\");\n      return true;\n    } else if (workingTreeStatus === \"dirty\") {\n      Log.log(`${_chalk.default.bold(\"Warning!\")} Your git working tree is ${_chalk.default.red(\"dirty\")}.`);\n      Log.log(`It's recommended to ${_chalk.default.bold(\"commit all your changes before proceeding\")}, so you can revert the changes made by this command if necessary.`);\n    } else {\n      Log.log(\"We couldn't find a git repository in your project directory.\");\n      Log.log(\"It's recommended to back up your project before proceeding.\");\n    }\n    return false;\n  });\n  return _validateGitStatusAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","maybeBailOnGitStatusAsync","validateGitStatusAsync","_spawnAsync","_interopRequireDefault","_chalk","Log","_interopRequireWildcard","_env","_interactive","_prompts","_maybeBailOnGitStatusAsync","apply","arguments","env","EXPO_NO_GIT_STATUS","warn","isGitStatusClean","isInteractive","log","answer","confirmAsync","message","_validateGitStatusAsync","workingTreeStatus","result","default","stdout","_unused","green","bold","red"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\utils\\git.ts"],"sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport chalk from 'chalk';\n\nimport * as Log from '../log';\nimport { env } from './env';\nimport { isInteractive } from './interactive';\nimport { confirmAsync } from './prompts';\n\nexport async function maybeBailOnGitStatusAsync(): Promise<boolean> {\n  if (env.EXPO_NO_GIT_STATUS) {\n    Log.warn(\n      'Git status is dirty but the command will continue because EXPO_NO_GIT_STATUS is enabled...'\n    );\n    return false;\n  }\n  const isGitStatusClean = await validateGitStatusAsync();\n\n  // Give people a chance to bail out if git working tree is dirty\n  if (!isGitStatusClean) {\n    if (!isInteractive()) {\n      Log.warn(\n        `Git status is dirty but the command will continue because the terminal is not interactive.`\n      );\n      return false;\n    }\n\n    Log.log();\n    const answer = await confirmAsync({\n      message: `Would you like to proceed?`,\n    });\n\n    if (!answer) {\n      return true;\n    }\n\n    Log.log();\n  }\n  return false;\n}\n\nexport async function validateGitStatusAsync(): Promise<boolean> {\n  let workingTreeStatus = 'unknown';\n  try {\n    const result = await spawnAsync('git', ['status', '--porcelain']);\n    workingTreeStatus = result.stdout === '' ? 'clean' : 'dirty';\n  } catch {\n    // Maybe git is not installed?\n    // Maybe this project is not using git?\n  }\n\n  if (workingTreeStatus === 'clean') {\n    Log.log(`Your git working tree is ${chalk.green('clean')}`);\n    Log.log('To revert the changes after this command completes, you can run the following:');\n    Log.log('  git clean --force && git reset --hard');\n    return true;\n  } else if (workingTreeStatus === 'dirty') {\n    Log.log(`${chalk.bold('Warning!')} Your git working tree is ${chalk.red('dirty')}.`);\n    Log.log(\n      `It's recommended to ${chalk.bold(\n        'commit all your changes before proceeding'\n      )}, so you can revert the changes made by this command if necessary.`\n    );\n  } else {\n    Log.log(\"We couldn't find a git repository in your project directory.\");\n    Log.log(\"It's recommended to back up your project before proceeding.\");\n  }\n\n  return false;\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,iBAAA,GAAAC,OAAA;;;;QAQsBC,yBAAyB,GAAzBA,yBAAyB;QAgCzBC,sBAAsB,GAAtBA,sBAAsB;AAxCrB,IAAAC,WAAmB,GAAAC,sBAAA,CAAAJ,OAAA,CAAnB,mBAAmB;AACxB,IAAAK,MAAO,GAAAD,sBAAA,CAAAJ,OAAA,CAAP,OAAO;AAEb,IAAAM,GAAG,GAAAC,uBAAA,CAAAP,OAAA,SAAc,EAAd;AACK,IAAAQ,IAAO,GAAAR,OAAA;AACG,IAAAS,YAAe,GAAAT,OAAA;AAChB,IAAAU,QAAW,GAAAV,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;SAElBC,yBAAyBA,CAAA;EAAA,OAAAU,0BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,2BAAA;EAAAA,0BAAA,GAAAZ,iBAAA,CAAxC,aAA6D;IAClE,IAAIS,IAAG,CAAAM,GAAA,CAACC,kBAAkB,EAAE;MAC1BT,GAAG,CAACU,IAAI,CACN,4FAA4F,CAC7F;MACD,OAAO,KAAK;;IAEd,IAAMC,gBAAgB,SAASf,sBAAsB,EAAE;IAGvD,IAAI,CAACe,gBAAgB,EAAE;MACrB,IAAI,CAAC,IAAAR,YAAa,EAAES,aAAF,EAAE,EAAE;QACpBZ,GAAG,CAACU,IAAI,CACL,4FAA2F,CAC7F;QACD,OAAO,KAAK;;MAGdV,GAAG,CAACa,GAAG,EAAE;MACT,IAAMC,MAAM,SAAS,IAAAV,QAAY,EAE/BW,YAF+B,CAAC;QAChCC,OAAO,EAAG;OACX,CAAC;MAEF,IAAI,CAACF,MAAM,EAAE;QACX,OAAO,IAAI;;MAGbd,GAAG,CAACa,GAAG,EAAE;;IAEX,OAAO,KAAK;GACb;EAAA,OAAAR,0BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAEqBX,sBAAsBA,CAAA;EAAA,OAAAqB,uBAAA,CAAAX,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAU,wBAAA;EAAAA,uBAAA,GAAAxB,iBAAA,CAArC,aAA0D;IAC/D,IAAIyB,iBAAiB,GAAG,SAAS;IACjC,IAAI;MACF,IAAMC,MAAM,SAAS,IAAAtB,WAAU,EAAkCuB,OAAlC,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE,aAAa,CAAC,CAAC;MACjEF,iBAAiB,GAAGC,MAAM,CAACE,MAAM,KAAK,EAAE,GAAG,OAAO,GAAG,OAAO;KAC7D,CAAC,OAAAC,OAAA,EAAM,C;IAKR,IAAIJ,iBAAiB,KAAK,OAAO,EAAE;MACjClB,GAAG,CAACa,GAAG,CAAE,4BAA2Bd,MAAK,CAAAqB,OAAA,CAACG,KAAK,CAAC,OAAO,CAAE,EAAC,CAAC;MAC3DvB,GAAG,CAACa,GAAG,CAAC,gFAAgF,CAAC;MACzFb,GAAG,CAACa,GAAG,CAAC,yCAAyC,CAAC;MAClD,OAAO,IAAI;KACZ,MAAM,IAAIK,iBAAiB,KAAK,OAAO,EAAE;MACxClB,GAAG,CAACa,GAAG,CAAE,GAAEd,MAAK,CAAAqB,OAAA,CAACI,IAAI,CAAC,UAAU,CAAE,6BAA4BzB,MAAK,CAAAqB,OAAA,CAACK,GAAG,CAAC,OAAO,CAAE,GAAE,CAAC;MACpFzB,GAAG,CAACa,GAAG,CACJ,uBAAsBd,MAAK,CAAAqB,OAAA,CAACI,IAAI,CAC/B,2CAA2C,CAC3C,oEAAmE,CACtE;KACF,MAAM;MACLxB,GAAG,CAACa,GAAG,CAAC,8DAA8D,CAAC;MACvEb,GAAG,CAACa,GAAG,CAAC,6DAA6D,CAAC;;IAGxE,OAAO,KAAK;GACb;EAAA,OAAAI,uBAAA,CAAAX,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}