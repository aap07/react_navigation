{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/react-native-gesture-handler/lib/typescript/handlers/NativeViewGestureHandler.d.ts"],"sourcesContent":["import { BaseGestureHandlerProps } from './gestureHandlerCommon';\nexport declare const nativeViewGestureHandlerProps: readonly [\"shouldActivateOnStart\", \"disallowInterruption\"];\nexport interface NativeViewGestureConfig {\n    /**\n     * Android only.\n     *\n     * Determines whether the handler should check for an existing touch event on\n     * instantiation.\n     */\n    shouldActivateOnStart?: boolean;\n    /**\n     * When `true`, cancels all other gesture handlers when this\n     * `NativeViewGestureHandler` receives an `ACTIVE` state event.\n     */\n    disallowInterruption?: boolean;\n}\nexport interface NativeViewGestureHandlerProps extends BaseGestureHandlerProps<NativeViewGestureHandlerPayload>, NativeViewGestureConfig {\n}\nexport declare type NativeViewGestureHandlerPayload = {\n    /**\n     * True if gesture was performed inside of containing view, false otherwise.\n     */\n    pointerInside: boolean;\n};\nexport declare const nativeViewProps: readonly [\"id\", \"enabled\", \"shouldCancelWhenOutside\", \"hitSlop\", \"cancelsTouchesInView\", \"userSelect\", \"waitFor\", \"simultaneousHandlers\", \"onBegan\", \"onFailed\", \"onCancelled\", \"onActivated\", \"onEnded\", \"onGestureEvent\", \"onHandlerStateChange\", \"shouldActivateOnStart\", \"disallowInterruption\"];\nexport declare const nativeViewHandlerName = \"NativeViewGestureHandler\";\nexport declare type NativeViewGestureHandler = typeof NativeViewGestureHandler;\nexport declare const NativeViewGestureHandler: import(\"react\").ComponentType<NativeViewGestureHandlerProps & import(\"react\").RefAttributes<any>>;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}