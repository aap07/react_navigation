{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _require = require('util'),\n  promisify = _require.promisify;\nvar fs = require('fs');\nvar path = require('path');\nvar fastGlob = require('fast-glob');\nvar gitIgnore = require('ignore');\nvar slash = require('slash');\nvar DEFAULT_IGNORE = ['**/node_modules/**', '**/flow-typed/**', '**/coverage/**', '**/.git'];\nvar readFileP = promisify(fs.readFile);\nvar mapGitIgnorePatternTo = function mapGitIgnorePatternTo(base) {\n  return function (ignore) {\n    if (ignore.startsWith('!')) {\n      return '!' + path.posix.join(base, ignore.slice(1));\n    }\n    return path.posix.join(base, ignore);\n  };\n};\nvar parseGitIgnore = function parseGitIgnore(content, options) {\n  var base = slash(path.relative(options.cwd, path.dirname(options.fileName)));\n  return content.split(/\\r?\\n/).filter(Boolean).filter(function (line) {\n    return !line.startsWith('#');\n  }).map(mapGitIgnorePatternTo(base));\n};\nvar reduceIgnore = function reduceIgnore(files) {\n  var ignores = gitIgnore();\n  for (var file of files) {\n    ignores.add(parseGitIgnore(file.content, {\n      cwd: file.cwd,\n      fileName: file.filePath\n    }));\n  }\n  return ignores;\n};\nvar ensureAbsolutePathForCwd = function ensureAbsolutePathForCwd(cwd, p) {\n  cwd = slash(cwd);\n  if (path.isAbsolute(p)) {\n    if (slash(p).startsWith(cwd)) {\n      return p;\n    }\n    throw new Error(`Path ${p} is not in cwd ${cwd}`);\n  }\n  return path.join(cwd, p);\n};\nvar getIsIgnoredPredecate = function getIsIgnoredPredecate(ignores, cwd) {\n  return function (p) {\n    return ignores.ignores(slash(path.relative(cwd, ensureAbsolutePathForCwd(cwd, p.path || p))));\n  };\n};\nvar getFile = function () {\n  var _ref = _asyncToGenerator(function* (file, cwd) {\n    var filePath = path.join(cwd, file);\n    var content = yield readFileP(filePath, 'utf8');\n    return {\n      cwd: cwd,\n      filePath: filePath,\n      content: content\n    };\n  });\n  return function getFile(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar getFileSync = function getFileSync(file, cwd) {\n  var filePath = path.join(cwd, file);\n  var content = fs.readFileSync(filePath, 'utf8');\n  return {\n    cwd: cwd,\n    filePath: filePath,\n    content: content\n  };\n};\nvar normalizeOptions = function normalizeOptions() {\n  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref2$ignore = _ref2.ignore,\n    ignore = _ref2$ignore === void 0 ? [] : _ref2$ignore,\n    _ref2$cwd = _ref2.cwd,\n    cwd = _ref2$cwd === void 0 ? slash(process.cwd()) : _ref2$cwd;\n  return {\n    ignore: ignore,\n    cwd: cwd\n  };\n};\nmodule.exports = function () {\n  var _ref3 = _asyncToGenerator(function* (options) {\n    options = normalizeOptions(options);\n    var paths = yield fastGlob('**/.gitignore', {\n      ignore: DEFAULT_IGNORE.concat(options.ignore),\n      cwd: options.cwd\n    });\n    var files = yield Promise.all(paths.map(function (file) {\n      return getFile(file, options.cwd);\n    }));\n    var ignores = reduceIgnore(files);\n    return getIsIgnoredPredecate(ignores, options.cwd);\n  });\n  return function (_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nmodule.exports.sync = function (options) {\n  options = normalizeOptions(options);\n  var paths = fastGlob.sync('**/.gitignore', {\n    ignore: DEFAULT_IGNORE.concat(options.ignore),\n    cwd: options.cwd\n  });\n  var files = paths.map(function (file) {\n    return getFileSync(file, options.cwd);\n  });\n  var ignores = reduceIgnore(files);\n  return getIsIgnoredPredecate(ignores, options.cwd);\n};","map":{"version":3,"names":["_asyncToGenerator","require","_require","promisify","fs","path","fastGlob","gitIgnore","slash","DEFAULT_IGNORE","readFileP","readFile","mapGitIgnorePatternTo","base","ignore","startsWith","posix","join","slice","parseGitIgnore","content","options","relative","cwd","dirname","fileName","split","filter","Boolean","line","map","reduceIgnore","files","ignores","file","add","filePath","ensureAbsolutePathForCwd","p","isAbsolute","Error","getIsIgnoredPredecate","getFile","_ref","_x","_x2","apply","arguments","getFileSync","readFileSync","normalizeOptions","_ref2","length","undefined","_ref2$ignore","_ref2$cwd","process","module","exports","_ref3","paths","concat","Promise","all","_x3","sync"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/cli/node_modules/globby/gitignore.js"],"sourcesContent":["'use strict';\nconst {promisify} = require('util');\nconst fs = require('fs');\nconst path = require('path');\nconst fastGlob = require('fast-glob');\nconst gitIgnore = require('ignore');\nconst slash = require('slash');\n\nconst DEFAULT_IGNORE = [\n\t'**/node_modules/**',\n\t'**/flow-typed/**',\n\t'**/coverage/**',\n\t'**/.git'\n];\n\nconst readFileP = promisify(fs.readFile);\n\nconst mapGitIgnorePatternTo = base => ignore => {\n\tif (ignore.startsWith('!')) {\n\t\treturn '!' + path.posix.join(base, ignore.slice(1));\n\t}\n\n\treturn path.posix.join(base, ignore);\n};\n\nconst parseGitIgnore = (content, options) => {\n\tconst base = slash(path.relative(options.cwd, path.dirname(options.fileName)));\n\n\treturn content\n\t\t.split(/\\r?\\n/)\n\t\t.filter(Boolean)\n\t\t.filter(line => !line.startsWith('#'))\n\t\t.map(mapGitIgnorePatternTo(base));\n};\n\nconst reduceIgnore = files => {\n\tconst ignores = gitIgnore();\n\tfor (const file of files) {\n\t\tignores.add(parseGitIgnore(file.content, {\n\t\t\tcwd: file.cwd,\n\t\t\tfileName: file.filePath\n\t\t}));\n\t}\n\n\treturn ignores;\n};\n\nconst ensureAbsolutePathForCwd = (cwd, p) => {\n\tcwd = slash(cwd);\n\tif (path.isAbsolute(p)) {\n\t\tif (slash(p).startsWith(cwd)) {\n\t\t\treturn p;\n\t\t}\n\n\t\tthrow new Error(`Path ${p} is not in cwd ${cwd}`);\n\t}\n\n\treturn path.join(cwd, p);\n};\n\nconst getIsIgnoredPredecate = (ignores, cwd) => {\n\treturn p => ignores.ignores(slash(path.relative(cwd, ensureAbsolutePathForCwd(cwd, p.path || p))));\n};\n\nconst getFile = async (file, cwd) => {\n\tconst filePath = path.join(cwd, file);\n\tconst content = await readFileP(filePath, 'utf8');\n\n\treturn {\n\t\tcwd,\n\t\tfilePath,\n\t\tcontent\n\t};\n};\n\nconst getFileSync = (file, cwd) => {\n\tconst filePath = path.join(cwd, file);\n\tconst content = fs.readFileSync(filePath, 'utf8');\n\n\treturn {\n\t\tcwd,\n\t\tfilePath,\n\t\tcontent\n\t};\n};\n\nconst normalizeOptions = ({\n\tignore = [],\n\tcwd = slash(process.cwd())\n} = {}) => {\n\treturn {ignore, cwd};\n};\n\nmodule.exports = async options => {\n\toptions = normalizeOptions(options);\n\n\tconst paths = await fastGlob('**/.gitignore', {\n\t\tignore: DEFAULT_IGNORE.concat(options.ignore),\n\t\tcwd: options.cwd\n\t});\n\n\tconst files = await Promise.all(paths.map(file => getFile(file, options.cwd)));\n\tconst ignores = reduceIgnore(files);\n\n\treturn getIsIgnoredPredecate(ignores, options.cwd);\n};\n\nmodule.exports.sync = options => {\n\toptions = normalizeOptions(options);\n\n\tconst paths = fastGlob.sync('**/.gitignore', {\n\t\tignore: DEFAULT_IGNORE.concat(options.ignore),\n\t\tcwd: options.cwd\n\t});\n\n\tconst files = paths.map(file => getFileSync(file, options.cwd));\n\tconst ignores = reduceIgnore(files);\n\n\treturn getIsIgnoredPredecate(ignores, options.cwd);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}