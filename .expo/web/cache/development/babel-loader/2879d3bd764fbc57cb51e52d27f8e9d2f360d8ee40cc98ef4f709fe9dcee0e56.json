{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _url = require(\"url\");\nvar _ws = _interopRequireDefault(require(\"ws\"));\nvar _log = require(\"../../../../log\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar WS_DEVICE_URL = \"/inspector/device\";\nvar WS_DEBUGGER_URL = \"/inspector/debug\";\nvar WS_GENERIC_ERROR_STATUS = 1011;\nvar debug = require(\"debug\")(\"expo:metro:inspector-proxy:proxy\");\nvar ExpoInspectorProxy = function () {\n  function ExpoInspectorProxy(metroProxy, DeviceClass) {\n    var devices = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Map();\n    _classCallCheck(this, ExpoInspectorProxy);\n    this.metroProxy = metroProxy;\n    this.DeviceClass = DeviceClass;\n    this.devices = devices;\n    this.metroProxy._devices = this.devices;\n    this.processRequest = this.processRequest.bind(this);\n  }\n  _createClass(ExpoInspectorProxy, [{\n    key: \"processRequest\",\n    value: function processRequest(req, res, next) {\n      this.metroProxy.processRequest(req, res, next);\n    }\n  }, {\n    key: \"createWebSocketListeners\",\n    value: function createWebSocketListeners(server) {\n      var _ref;\n      this.metroProxy._serverAddressWithPort = ExpoInspectorProxy.normalizeServerAddress(server.address());\n      return _ref = {}, _defineProperty(_ref, WS_DEVICE_URL, this.createDeviceWebSocketServer()), _defineProperty(_ref, WS_DEBUGGER_URL, this.createDebuggerWebSocketServer()), _ref;\n    }\n  }, {\n    key: \"createDeviceWebSocketServer\",\n    value: function createDeviceWebSocketServer() {\n      var _this = this;\n      var wss = new _ws.default.Server({\n        noServer: true,\n        perMessageDeflate: false\n      });\n      wss.on(\"connection\", function (socket, request) {\n        try {\n          var fallbackDeviceId = String(_this.metroProxy._deviceCounter++);\n          var _getDeviceInfo = getDeviceInfo(request.url),\n            newDeviceId = _getDeviceInfo.deviceId,\n            deviceName = _getDeviceInfo.deviceName,\n            appName = _getDeviceInfo.appName;\n          var deviceId = newDeviceId != null ? newDeviceId : fallbackDeviceId;\n          var oldDevice = _this.devices.get(deviceId);\n          var newDevice = new _this.DeviceClass(deviceId, deviceName, appName, socket, _this.metroProxy._projectRoot);\n          if (oldDevice) {\n            debug(\"Device reconnected: device=%s, app=%s, id=%s\", deviceName, appName, deviceId);\n            oldDevice.handleDuplicateDeviceConnection(newDevice);\n          } else {\n            debug(\"New device connected: device=%s, app=%s, id=%s\", deviceName, appName, deviceId);\n          }\n          _this.devices.set(deviceId, newDevice);\n          socket.on(\"close\", function () {\n            if (_this.devices.get(deviceId) === newDevice) {\n              _this.devices.delete(deviceId);\n              debug(\"Device disconnected: device=%s, app=%s, id=%s\", deviceName, appName, deviceId);\n            }\n          });\n        } catch (error) {\n          var message = \"\";\n          debug(\"Could not establish a connection to on-device debugger:\", error);\n          if (error instanceof Error) {\n            message = error.toString();\n            _log.Log.error(\"Failed to create a socket connection to on-device debugger (Hermes engine).\");\n            _log.Log.exception(error);\n          } else {\n            _log.Log.error(\"Failed to create a socket connection to on-device debugger (Hermes engine), unknown error.\");\n          }\n          socket.close(WS_GENERIC_ERROR_STATUS, message || \"Unknown error\");\n        }\n      });\n      return wss;\n    }\n  }, {\n    key: \"createDebuggerWebSocketServer\",\n    value: function createDebuggerWebSocketServer() {\n      var _this2 = this;\n      var wss = new _ws.default.Server({\n        noServer: true,\n        perMessageDeflate: false\n      });\n      wss.on(\"connection\", function (socket, request) {\n        try {\n          var _getDebuggerInfo = getDebuggerInfo(request.url),\n            deviceId = _getDebuggerInfo.deviceId,\n            pageId = _getDebuggerInfo.pageId,\n            debuggerType = _getDebuggerInfo.debuggerType;\n          if (!deviceId || !pageId) {\n            throw new Error(`Missing \"device\" and/or \"page\" IDs in query parameters`);\n          }\n          var device = _this2.devices.get(deviceId);\n          if (!device) {\n            throw new Error(`Device with ID \"${deviceId}\" not found.`);\n          }\n          debug(\"New debugger connected: device=%s, app=%s\", device._name, device._app);\n          if (debuggerType && typeof device.handleDebuggerConnectionWithType === \"function\") {\n            device.handleDebuggerConnectionWithType(socket, pageId, debuggerType);\n          } else {\n            device.handleDebuggerConnection(socket, pageId);\n          }\n          socket.on(\"close\", function () {\n            debug(\"Debugger disconnected: device=%s, app=%s\", device._name, device._app);\n          });\n        } catch (error) {\n          var message = \"\";\n          debug(\"Could not establish a connection to debugger:\", error);\n          if (error instanceof Error) {\n            message = error.toString();\n            _log.Log.error(\"Failed to create a socket connection to the debugger.\");\n            _log.Log.exception(error);\n          } else {\n            _log.Log.error(\"Failed to create a socket connection to the debugger, unkown error.\");\n          }\n          socket.close(WS_GENERIC_ERROR_STATUS, message || \"Unknown error\");\n        }\n      });\n      return wss;\n    }\n  }], [{\n    key: \"normalizeServerAddress\",\n    value: function normalizeServerAddress(addressInfo) {\n      if (typeof addressInfo === \"string\") {\n        throw new Error(`Inspector proxy could not resolve the server address, got \"${addressInfo}\"`);\n      } else if (addressInfo === null) {\n        throw new Error(`Inspector proxy could not resolve the server address, got \"null\"`);\n      }\n      var address = addressInfo.address;\n      if (addressInfo.family === \"IPv6\") {\n        address = address === \"::\" ? `[::1]` : `[${address}]`;\n      } else {\n        address = address === \"0.0.0.0\" ? \"localhost\" : address;\n      }\n      return `${address}:${addressInfo.port}`;\n    }\n  }]);\n  return ExpoInspectorProxy;\n}();\nexports.ExpoInspectorProxy = ExpoInspectorProxy;\nfunction asString() {\n  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return Array.isArray(value) ? value.join() : value;\n}\nfunction getDeviceInfo(url) {\n  var _parse = (0, _url).parse(url != null ? url : \"\", true),\n    query = _parse.query;\n  return {\n    deviceId: asString(query.device) || undefined,\n    deviceName: asString(query.name) || \"Unknown device name\",\n    appName: asString(query.app) || \"Unknown app name\"\n  };\n}\nfunction getDebuggerInfo(url) {\n  var _parse2 = (0, _url).parse(url != null ? url : \"\", true),\n    query = _parse2.query;\n  var ref;\n  return {\n    deviceId: asString(query.device),\n    pageId: asString(query.page),\n    debuggerType: (ref = asString(query.type)) != null ? ref : undefined\n  };\n}","map":{"version":3,"names":["_defineProperty","require","_classCallCheck","_createClass","_url","_ws","_interopRequireDefault","_log","WS_DEVICE_URL","WS_DEBUGGER_URL","WS_GENERIC_ERROR_STATUS","debug","ExpoInspectorProxy","metroProxy","DeviceClass","devices","arguments","length","undefined","Map","_devices","processRequest","bind","key","value","req","res","next","createWebSocketListeners","server","_ref","_serverAddressWithPort","normalizeServerAddress","address","createDeviceWebSocketServer","createDebuggerWebSocketServer","_this","wss","default","Server","noServer","perMessageDeflate","on","socket","request","fallbackDeviceId","String","_deviceCounter","_getDeviceInfo","getDeviceInfo","url","newDeviceId","deviceId","deviceName","appName","oldDevice","get","newDevice","_projectRoot","handleDuplicateDeviceConnection","set","delete","error","message","Error","toString","Log","exception","close","_this2","_getDebuggerInfo","getDebuggerInfo","pageId","debuggerType","device","_name","_app","handleDebuggerConnectionWithType","handleDebuggerConnection","addressInfo","family","port","asString","Array","isArray","join","_parse","parse","query","name","app","_parse2","ref","page","type"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\metro\\inspector-proxy\\proxy.ts"],"sourcesContent":["import type { Server as HttpServer, IncomingMessage, ServerResponse } from 'http';\nimport type { Server as HttpsServer } from 'https';\nimport type { InspectorProxy as MetroProxy, Device as MetroDevice } from 'metro-inspector-proxy';\nimport { parse } from 'url';\nimport WS, { Server as WSServer } from 'ws';\n\nimport { Log } from '../../../../log';\n\nconst WS_DEVICE_URL = '/inspector/device';\nconst WS_DEBUGGER_URL = '/inspector/debug';\nconst WS_GENERIC_ERROR_STATUS = 1011;\n\nconst debug = require('debug')('expo:metro:inspector-proxy:proxy') as typeof console.log;\n\n// This is a workaround for `ConstructorType` not working on dynamically generated classes\ntype Instantiatable<Instance> = new (...args: any) => Instance;\n\nexport class ExpoInspectorProxy<D extends MetroDevice = MetroDevice> {\n  constructor(\n    public readonly metroProxy: MetroProxy,\n    private DeviceClass: Instantiatable<D>,\n    public readonly devices: Map<string, D> = new Map()\n  ) {\n    // monkey-patch the device list to expose it within the metro inspector\n    // See https://github.com/facebook/metro/pull/991\n    // @ts-expect-error - Device ID is changing from `number` to `string`\n    this.metroProxy._devices = this.devices;\n\n    // force httpEndpointMiddleware to be bound to this proxy instance\n    this.processRequest = this.processRequest.bind(this);\n  }\n\n  /**\n   * Normalize the server address for clients to connect to.\n   * @param addressInfo the server address returned by `HttpServer.address()` or `HttpsServer.address()`.\n   * @returns \"address:port\"\n   */\n  public static normalizeServerAddress(addressInfo: ReturnType<HttpServer['address']>): string {\n    if (typeof addressInfo === 'string') {\n      throw new Error(`Inspector proxy could not resolve the server address, got \"${addressInfo}\"`);\n    } else if (addressInfo === null) {\n      throw new Error(`Inspector proxy could not resolve the server address, got \"null\"`);\n    }\n\n    let address = addressInfo.address;\n    if (addressInfo.family === 'IPv6') {\n      address = address === '::' ? `[::1]` : `[${address}]`;\n    } else {\n      address = address === '0.0.0.0' ? 'localhost' : address;\n    }\n    return `${address}:${addressInfo.port}`;\n  }\n\n  /** @see https://chromedevtools.github.io/devtools-protocol/#endpoints */\n  public processRequest(req: IncomingMessage, res: ServerResponse, next: (error?: Error) => any) {\n    this.metroProxy.processRequest(req, res, next);\n  }\n\n  public createWebSocketListeners(server: HttpServer | HttpsServer): Record<string, WSServer> {\n    // Initialize the server address from the metro server.\n    // This is required to properly reference sourcemaps for the debugger.\n    this.metroProxy._serverAddressWithPort = ExpoInspectorProxy.normalizeServerAddress(\n      server.address()\n    );\n\n    return {\n      [WS_DEVICE_URL]: this.createDeviceWebSocketServer(),\n      [WS_DEBUGGER_URL]: this.createDebuggerWebSocketServer(),\n    };\n  }\n\n  private createDeviceWebSocketServer() {\n    const wss = new WS.Server({\n      noServer: true,\n      perMessageDeflate: false,\n    });\n\n    // See: https://github.com/facebook/metro/blob/eeb211fdcfdcb9e7f8a51721bd0f48bc7d0d211f/packages/metro-inspector-proxy/src/InspectorProxy.js#L157\n    wss.on('connection', (socket, request) => {\n      try {\n        const fallbackDeviceId = String(this.metroProxy._deviceCounter++);\n        const { deviceId: newDeviceId, deviceName, appName } = getDeviceInfo(request.url);\n\n        const deviceId = newDeviceId ?? fallbackDeviceId;\n\n        const oldDevice = this.devices.get(deviceId);\n        const newDevice = new this.DeviceClass(\n          deviceId,\n          deviceName,\n          appName,\n          socket,\n          this.metroProxy._projectRoot\n        );\n\n        if (oldDevice) {\n          debug('Device reconnected: device=%s, app=%s, id=%s', deviceName, appName, deviceId);\n          // See: https://github.com/facebook/metro/pull/991\n          // @ts-expect-error - Newly introduced method coming to metro-inspector-proxy soon\n          oldDevice.handleDuplicateDeviceConnection(newDevice);\n        } else {\n          debug('New device connected: device=%s, app=%s, id=%s', deviceName, appName, deviceId);\n        }\n\n        this.devices.set(deviceId, newDevice);\n\n        socket.on('close', () => {\n          if (this.devices.get(deviceId) === newDevice) {\n            this.devices.delete(deviceId);\n            debug('Device disconnected: device=%s, app=%s, id=%s', deviceName, appName, deviceId);\n          }\n        });\n      } catch (error: unknown) {\n        let message = '';\n\n        debug('Could not establish a connection to on-device debugger:', error);\n\n        if (error instanceof Error) {\n          message = error.toString();\n          Log.error('Failed to create a socket connection to on-device debugger (Hermes engine).');\n          Log.exception(error);\n        } else {\n          Log.error(\n            'Failed to create a socket connection to on-device debugger (Hermes engine), unknown error.'\n          );\n        }\n\n        socket.close(WS_GENERIC_ERROR_STATUS, message || 'Unknown error');\n      }\n    });\n\n    return wss;\n  }\n\n  private createDebuggerWebSocketServer() {\n    const wss = new WS.Server({\n      noServer: true,\n      perMessageDeflate: false,\n    });\n\n    // See: https://github.com/facebook/metro/blob/eeb211fdcfdcb9e7f8a51721bd0f48bc7d0d211f/packages/metro-inspector-proxy/src/InspectorProxy.js#L193\n    wss.on('connection', (socket, request) => {\n      try {\n        const { deviceId, pageId, debuggerType } = getDebuggerInfo(request.url);\n        if (!deviceId || !pageId) {\n          // TODO(cedric): change these errors to proper error types\n          throw new Error(`Missing \"device\" and/or \"page\" IDs in query parameters`);\n        }\n\n        const device = this.devices.get(deviceId);\n        if (!device) {\n          // TODO(cedric): change these errors to proper error types\n          throw new Error(`Device with ID \"${deviceId}\" not found.`);\n        }\n\n        debug('New debugger connected: device=%s, app=%s', device._name, device._app);\n\n        // @ts-expect-error The `handleDebuggerConnectionWithType` is part of our device implementation, not Metro's device\n        if (debuggerType && typeof device.handleDebuggerConnectionWithType === 'function') {\n          // @ts-expect-error The `handleDebuggerConnectionWithType` is part of our device implementation, not Metro's device\n          device.handleDebuggerConnectionWithType(socket, pageId, debuggerType);\n        } else {\n          device.handleDebuggerConnection(socket, pageId);\n        }\n\n        socket.on('close', () => {\n          debug('Debugger disconnected: device=%s, app=%s', device._name, device._app);\n        });\n      } catch (error: unknown) {\n        let message = '';\n\n        debug('Could not establish a connection to debugger:', error);\n\n        if (error instanceof Error) {\n          message = error.toString();\n          Log.error('Failed to create a socket connection to the debugger.');\n          Log.exception(error);\n        } else {\n          Log.error('Failed to create a socket connection to the debugger, unkown error.');\n        }\n\n        socket.close(WS_GENERIC_ERROR_STATUS, message || 'Unknown error');\n      }\n    });\n\n    return wss;\n  }\n}\n\nfunction asString(value: string | string[] = ''): string {\n  return Array.isArray(value) ? value.join() : value;\n}\n\nfunction getDeviceInfo(url: IncomingMessage['url']) {\n  const { query } = parse(url ?? '', true);\n  return {\n    deviceId: asString(query.device) || undefined,\n    deviceName: asString(query.name) || 'Unknown device name',\n    appName: asString(query.app) || 'Unknown app name',\n  };\n}\n\nfunction getDebuggerInfo(url: IncomingMessage['url']) {\n  const { query } = parse(url ?? '', true);\n  return {\n    deviceId: asString(query.device),\n    pageId: asString(query.page),\n    debuggerType: asString(query.type) ?? undefined,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}