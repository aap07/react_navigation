{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._processAndroidXML = _processAndroidXML;\nexports.escapeAndroidString = escapeAndroidString;\nexports.format = format;\nexports.parseXMLAsync = parseXMLAsync;\nexports.readXMLAsync = readXMLAsync;\nexports.unescapeAndroidString = unescapeAndroidString;\nexports.writeXMLAsync = writeXMLAsync;\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _os() {\n  var data = require(\"os\");\n  _os = function _os() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _xml2js() {\n  var data = require(\"xml2js\");\n  _xml2js = function _xml2js() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction writeXMLAsync(_x) {\n  return _writeXMLAsync.apply(this, arguments);\n}\nfunction _writeXMLAsync() {\n  _writeXMLAsync = _asyncToGenerator(function* (options) {\n    var xml = format(options.xml);\n    yield _fs().default.promises.mkdir(_path().default.dirname(options.path), {\n      recursive: true\n    });\n    yield _fs().default.promises.writeFile(options.path, xml);\n  });\n  return _writeXMLAsync.apply(this, arguments);\n}\nfunction readXMLAsync(_x2) {\n  return _readXMLAsync.apply(this, arguments);\n}\nfunction _readXMLAsync() {\n  _readXMLAsync = _asyncToGenerator(function* (options) {\n    var contents = '';\n    try {\n      contents = yield _fs().default.promises.readFile(options.path, {\n        encoding: 'utf8',\n        flag: 'r'\n      });\n    } catch (_unused) {}\n    var parser = new (_xml2js().Parser)();\n    var manifest = yield parser.parseStringPromise(contents || options.fallback || '');\n    return _processAndroidXML(manifest);\n  });\n  return _readXMLAsync.apply(this, arguments);\n}\nfunction _processAndroidXML(manifest) {\n  var _manifest$resources;\n  if (Array.isArray(manifest === null || manifest === void 0 ? void 0 : (_manifest$resources = manifest.resources) === null || _manifest$resources === void 0 ? void 0 : _manifest$resources.string)) {\n    for (var string of manifest === null || manifest === void 0 ? void 0 : (_manifest$resources2 = manifest.resources) === null || _manifest$resources2 === void 0 ? void 0 : _manifest$resources2.string) {\n      var _manifest$resources2;\n      if (string.$.translatable === 'false' || string.$.translatable === false) {\n        continue;\n      }\n      string._ = unescapeAndroidString(string._);\n    }\n  }\n  return manifest;\n}\nfunction parseXMLAsync(_x3) {\n  return _parseXMLAsync.apply(this, arguments);\n}\nfunction _parseXMLAsync() {\n  _parseXMLAsync = _asyncToGenerator(function* (contents) {\n    var xml = yield new (_xml2js().Parser)().parseStringPromise(contents);\n    return xml;\n  });\n  return _parseXMLAsync.apply(this, arguments);\n}\nvar stringTimesN = function stringTimesN(n, char) {\n  return Array(n + 1).join(char);\n};\nfunction format(manifest) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref$indentLevel = _ref.indentLevel,\n    indentLevel = _ref$indentLevel === void 0 ? 2 : _ref$indentLevel,\n    _ref$newline = _ref.newline,\n    newline = _ref$newline === void 0 ? _os().EOL : _ref$newline;\n  var xmlInput;\n  if (typeof manifest === 'string') {\n    xmlInput = manifest;\n  } else if (manifest.toString) {\n    var _manifest$resources3;\n    var builder = new (_xml2js().Builder)({\n      headless: true\n    });\n    if (Array.isArray(manifest === null || manifest === void 0 ? void 0 : (_manifest$resources3 = manifest.resources) === null || _manifest$resources3 === void 0 ? void 0 : _manifest$resources3.string)) {\n      for (var string of manifest === null || manifest === void 0 ? void 0 : (_manifest$resources4 = manifest.resources) === null || _manifest$resources4 === void 0 ? void 0 : _manifest$resources4.string) {\n        var _manifest$resources4;\n        if (string.$.translatable === 'false' || string.$.translatable === false) {\n          continue;\n        }\n        string._ = escapeAndroidString(string._);\n      }\n    }\n    xmlInput = builder.buildObject(manifest);\n    return xmlInput;\n  } else {\n    throw new Error(`Invalid XML value passed in: ${manifest}`);\n  }\n  var indentString = stringTimesN(indentLevel, ' ');\n  var formatted = '';\n  var regex = /(>)(<)(\\/*)/g;\n  var xml = xmlInput.replace(regex, `$1${newline}$2$3`);\n  var pad = 0;\n  xml.split(/\\r?\\n/).map(function (line) {\n    return line.trim();\n  }).forEach(function (line) {\n    var indent = 0;\n    if (line.match(/.+<\\/\\w[^>]*>$/)) {\n      indent = 0;\n    } else if (line.match(/^<\\/\\w/)) {\n      if (pad !== 0) {\n        pad -= 1;\n      }\n    } else if (line.match(/^<\\w([^>]*[^/])?>.*$/)) {\n      indent = 1;\n    } else {\n      indent = 0;\n    }\n    var padding = stringTimesN(pad, indentString);\n    formatted += padding + line + newline;\n    pad += indent;\n  });\n  return formatted.trim();\n}\nfunction escapeAndroidString(value) {\n  value = value.replace(/[\\n\\r\\t'\"@]/g, function (m) {\n    switch (m) {\n      case '\"':\n      case \"'\":\n      case '@':\n        return '\\\\' + m;\n      case '\\n':\n        return '\\\\n';\n      case '\\r':\n        return '\\\\r';\n      case '\\t':\n        return '\\\\t';\n      default:\n        throw new Error(`Cannot escape unhandled XML character: ${m}`);\n    }\n  });\n  if (value.match(/(^\\s|\\s$)/)) {\n    value = '\"' + value + '\"';\n  }\n  return value;\n}\nfunction unescapeAndroidString(value) {\n  return value.replace(/\\\\(.)/g, '$1');\n}","map":{"version":3,"names":["_fs","data","_interopRequireDefault","require","_os","_path","_xml2js","obj","__esModule","default","writeXMLAsync","_x","_writeXMLAsync","apply","arguments","_asyncToGenerator","options","xml","format","promises","mkdir","dirname","path","recursive","writeFile","readXMLAsync","_x2","_readXMLAsync","contents","readFile","encoding","flag","_unused","parser","Parser","manifest","parseStringPromise","fallback","_processAndroidXML","_manifest$resources","Array","isArray","resources","string","_manifest$resources2","$","translatable","_","unescapeAndroidString","parseXMLAsync","_x3","_parseXMLAsync","stringTimesN","n","char","join","_ref","length","undefined","_ref$indentLevel","indentLevel","_ref$newline","newline","EOL","xmlInput","toString","_manifest$resources3","builder","Builder","headless","_manifest$resources4","escapeAndroidString","buildObject","Error","indentString","formatted","regex","replace","pad","split","map","line","trim","forEach","indent","match","padding","value","m"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\utils\\XML.ts"],"sourcesContent":["import fs from 'fs';\nimport { EOL } from 'os';\nimport path from 'path';\nimport { Builder, Parser } from 'xml2js';\n\nexport type XMLValue = boolean | number | string | null | XMLArray | XMLObject;\n\nexport interface XMLArray extends Array<XMLValue> {}\n\nexport interface XMLObject {\n  [key: string]: XMLValue | undefined;\n}\n\nexport async function writeXMLAsync(options: { path: string; xml: any }): Promise<void> {\n  const xml = format(options.xml);\n  await fs.promises.mkdir(path.dirname(options.path), { recursive: true });\n  await fs.promises.writeFile(options.path, xml);\n}\n\nexport async function readXMLAsync(options: {\n  path: string;\n  fallback?: string | null;\n}): Promise<XMLObject> {\n  let contents: string = '';\n  try {\n    contents = await fs.promises.readFile(options.path, { encoding: 'utf8', flag: 'r' });\n  } catch {\n    // catch and use fallback\n  }\n  const parser = new Parser();\n  const manifest = await parser.parseStringPromise(contents || options.fallback || '');\n\n  return _processAndroidXML(manifest);\n}\n\nexport function _processAndroidXML(manifest: any): XMLObject {\n  // For strings.xml\n  if (Array.isArray(manifest?.resources?.string)) {\n    for (const string of manifest?.resources?.string) {\n      if (string.$.translatable === 'false' || string.$.translatable === false) {\n        continue;\n      }\n      string._ = unescapeAndroidString(string._);\n    }\n  }\n\n  return manifest;\n}\n\nexport async function parseXMLAsync(contents: string): Promise<XMLObject> {\n  const xml = await new Parser().parseStringPromise(contents);\n  return xml;\n}\n\nconst stringTimesN = (n: number, char: string) => Array(n + 1).join(char);\n\nexport function format(manifest: any, { indentLevel = 2, newline = EOL } = {}): string {\n  let xmlInput: string;\n  if (typeof manifest === 'string') {\n    xmlInput = manifest;\n  } else if (manifest.toString) {\n    const builder = new Builder({\n      headless: true,\n    });\n\n    // For strings.xml\n    if (Array.isArray(manifest?.resources?.string)) {\n      for (const string of manifest?.resources?.string) {\n        if (string.$.translatable === 'false' || string.$.translatable === false) {\n          continue;\n        }\n        string._ = escapeAndroidString(string._);\n      }\n    }\n\n    xmlInput = builder.buildObject(manifest);\n\n    return xmlInput;\n  } else {\n    throw new Error(`Invalid XML value passed in: ${manifest}`);\n  }\n  const indentString = stringTimesN(indentLevel, ' ');\n\n  let formatted = '';\n  const regex = /(>)(<)(\\/*)/g;\n  const xml = xmlInput.replace(regex, `$1${newline}$2$3`);\n  let pad = 0;\n  xml\n    .split(/\\r?\\n/)\n    .map((line: string) => line.trim())\n    .forEach((line: string) => {\n      let indent = 0;\n      if (line.match(/.+<\\/\\w[^>]*>$/)) {\n        indent = 0;\n      } else if (line.match(/^<\\/\\w/)) {\n        if (pad !== 0) {\n          pad -= 1;\n        }\n      } else if (line.match(/^<\\w([^>]*[^/])?>.*$/)) {\n        indent = 1;\n      } else {\n        indent = 0;\n      }\n\n      const padding = stringTimesN(pad, indentString);\n      formatted += padding + line + newline;\n      pad += indent;\n    });\n\n  return formatted.trim();\n}\n\n/**\n * Escapes Android string literals, specifically characters `\"`, `'`, `\\`, `\\n`, `\\r`, `\\t`\n *\n * @param value unescaped Android XML string literal.\n */\nexport function escapeAndroidString(value: string): string {\n  value = value.replace(/[\\n\\r\\t'\"@]/g, (m) => {\n    switch (m) {\n      case '\"':\n      case \"'\":\n      case '@':\n        return '\\\\' + m;\n      case '\\n':\n        return '\\\\n';\n      case '\\r':\n        return '\\\\r';\n      case '\\t':\n        return '\\\\t';\n      default:\n        throw new Error(`Cannot escape unhandled XML character: ${m}`);\n    }\n  });\n  if (value.match(/(^\\s|\\s$)/)) {\n    value = '\"' + value + '\"';\n  }\n  return value;\n}\n\nexport function unescapeAndroidString(value: string): string {\n  return value.replace(/\\\\(.)/g, '$1');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}