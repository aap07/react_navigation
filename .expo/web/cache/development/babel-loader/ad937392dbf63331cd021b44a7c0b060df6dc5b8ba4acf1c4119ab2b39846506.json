{"ast":null,"code":"import { Collection } from \"./Collection.js\";","map":{"version":3,"names":["Collection"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/dist/nodes/YAMLSeq.d.ts"],"sourcesContent":["import { CreateNodeContext } from '../doc/createNode.js';\nimport type { BlockSequence, FlowCollection } from '../parse/cst.js';\nimport type { Schema } from '../schema/Schema.js';\nimport type { StringifyContext } from '../stringify/stringify.js';\nimport { Collection } from './Collection.js';\nimport type { ParsedNode, Range } from './Node.js';\nimport type { Pair } from './Pair.js';\nimport { Scalar } from './Scalar.js';\nimport { ToJSContext } from './toJS.js';\nexport declare namespace YAMLSeq {\n    interface Parsed<T extends ParsedNode | Pair<ParsedNode, ParsedNode | null> = ParsedNode> extends YAMLSeq<T> {\n        items: T[];\n        range: Range;\n        srcToken?: BlockSequence | FlowCollection;\n    }\n}\nexport declare class YAMLSeq<T = unknown> extends Collection {\n    static get tagName(): 'tag:yaml.org,2002:seq';\n    items: T[];\n    constructor(schema?: Schema);\n    add(value: T): void;\n    /**\n     * Removes a value from the collection.\n     *\n     * `key` must contain a representation of an integer for this to succeed.\n     * It may be wrapped in a `Scalar`.\n     *\n     * @returns `true` if the item was found and removed.\n     */\n    delete(key: unknown): boolean;\n    /**\n     * Returns item at `key`, or `undefined` if not found. By default unwraps\n     * scalar values from their surrounding node; to disable set `keepScalar` to\n     * `true` (collections are always returned intact).\n     *\n     * `key` must contain a representation of an integer for this to succeed.\n     * It may be wrapped in a `Scalar`.\n     */\n    get(key: unknown, keepScalar: true): Scalar<T> | undefined;\n    get(key: unknown, keepScalar?: false): T | undefined;\n    get(key: unknown, keepScalar?: boolean): T | Scalar<T> | undefined;\n    /**\n     * Checks if the collection includes a value with the key `key`.\n     *\n     * `key` must contain a representation of an integer for this to succeed.\n     * It may be wrapped in a `Scalar`.\n     */\n    has(key: unknown): boolean;\n    /**\n     * Sets a value in this collection. For `!!set`, `value` needs to be a\n     * boolean to add/remove the item from the set.\n     *\n     * If `key` does not contain a representation of an integer, this will throw.\n     * It may be wrapped in a `Scalar`.\n     */\n    set(key: unknown, value: T): void;\n    toJSON(_?: unknown, ctx?: ToJSContext): unknown[];\n    toString(ctx?: StringifyContext, onComment?: () => void, onChompKeep?: () => void): string;\n    static from(schema: Schema, obj: unknown, ctx: CreateNodeContext): YAMLSeq<unknown>;\n}\n"],"mappings":"AAIA,SAASA,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}