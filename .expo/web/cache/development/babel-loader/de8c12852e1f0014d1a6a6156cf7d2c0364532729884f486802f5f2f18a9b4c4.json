{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getGoogleMapsApiKey = getGoogleMapsApiKey;\nexports.setGoogleMapsApiKey = setGoogleMapsApiKey;\nexports.withGoogleMapsApiKey = void 0;\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _Manifest() {\n  var data = require(\"./Manifest\");\n  _Manifest = function _Manifest() {\n    return data;\n  };\n  return data;\n}\nvar META_API_KEY = 'com.google.android.geo.API_KEY';\nvar LIB_HTTP = 'org.apache.http.legacy';\nvar withGoogleMapsApiKey = (0, _androidPlugins().createAndroidManifestPlugin)(setGoogleMapsApiKey, 'withGoogleMapsApiKey');\nexports.withGoogleMapsApiKey = withGoogleMapsApiKey;\nfunction getGoogleMapsApiKey(config) {\n  var _config$android$confi, _config$android, _config$android$confi2, _config$android$confi3;\n  return (_config$android$confi = (_config$android = config.android) === null || _config$android === void 0 ? void 0 : (_config$android$confi2 = _config$android.config) === null || _config$android$confi2 === void 0 ? void 0 : (_config$android$confi3 = _config$android$confi2.googleMaps) === null || _config$android$confi3 === void 0 ? void 0 : _config$android$confi3.apiKey) !== null && _config$android$confi !== void 0 ? _config$android$confi : null;\n}\nfunction setGoogleMapsApiKey(config, androidManifest) {\n  var apiKey = getGoogleMapsApiKey(config);\n  var mainApplication = (0, _Manifest().getMainApplicationOrThrow)(androidManifest);\n  if (apiKey) {\n    (0, _Manifest().addMetaDataItemToMainApplication)(mainApplication, META_API_KEY, apiKey);\n    (0, _Manifest().addUsesLibraryItemToMainApplication)(mainApplication, {\n      name: LIB_HTTP,\n      required: false\n    });\n  } else {\n    (0, _Manifest().removeMetaDataItemFromMainApplication)(mainApplication, META_API_KEY);\n    (0, _Manifest().removeUsesLibraryItemFromMainApplication)(mainApplication, LIB_HTTP);\n  }\n  return androidManifest;\n}","map":{"version":3,"names":["_androidPlugins","data","require","_Manifest","META_API_KEY","LIB_HTTP","withGoogleMapsApiKey","createAndroidManifestPlugin","setGoogleMapsApiKey","exports","getGoogleMapsApiKey","config","_config$android$confi","_config$android","_config$android$confi2","_config$android$confi3","android","googleMaps","apiKey","androidManifest","mainApplication","getMainApplicationOrThrow","addMetaDataItemToMainApplication","addUsesLibraryItemToMainApplication","name","required","removeMetaDataItemFromMainApplication","removeUsesLibraryItemFromMainApplication"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\android\\GoogleMapsApiKey.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createAndroidManifestPlugin } from '../plugins/android-plugins';\nimport {\n  addMetaDataItemToMainApplication,\n  addUsesLibraryItemToMainApplication,\n  AndroidManifest,\n  getMainApplicationOrThrow,\n  removeMetaDataItemFromMainApplication,\n  removeUsesLibraryItemFromMainApplication,\n} from './Manifest';\n\nconst META_API_KEY = 'com.google.android.geo.API_KEY';\nconst LIB_HTTP = 'org.apache.http.legacy';\n\nexport const withGoogleMapsApiKey = createAndroidManifestPlugin(\n  setGoogleMapsApiKey,\n  'withGoogleMapsApiKey'\n);\n\nexport function getGoogleMapsApiKey(config: Pick<ExpoConfig, 'android'>) {\n  return config.android?.config?.googleMaps?.apiKey ?? null;\n}\n\nexport function setGoogleMapsApiKey(\n  config: Pick<ExpoConfig, 'android'>,\n  androidManifest: AndroidManifest\n) {\n  const apiKey = getGoogleMapsApiKey(config);\n  const mainApplication = getMainApplicationOrThrow(androidManifest);\n\n  if (apiKey) {\n    // If the item exists, add it back\n    addMetaDataItemToMainApplication(mainApplication, META_API_KEY, apiKey);\n    addUsesLibraryItemToMainApplication(mainApplication, {\n      name: LIB_HTTP,\n      required: false,\n    });\n  } else {\n    // Remove any existing item\n    removeMetaDataItemFromMainApplication(mainApplication, META_API_KEY);\n    removeUsesLibraryItemFromMainApplication(mainApplication, LIB_HTTP);\n  }\n\n  return androidManifest;\n}\n"],"mappings":";;;;;;;;AAEA,SAAAA,gBAAA;EAAA,IAAAC,IAAA,GAAAC,OAAA;EAAAF,eAAA,YAAAA,gBAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAE,UAAA;EAAA,IAAAF,IAAA,GAAAC,OAAA;EAAAC,SAAA,YAAAA,UAAA;IAAA,OAAAF,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AASA,IAAMG,YAAY,GAAG,gCAAgC;AACrD,IAAMC,QAAQ,GAAG,wBAAwB;AAElC,IAAMC,oBAAoB,GAAG,IAAAN,eAAA,GAAAO,2BAA2B,EAC7DC,mBAAmB,EACnB,sBAAsB,CACvB;AAACC,OAAA,CAAAH,oBAAA,GAAAA,oBAAA;AAEK,SAASI,mBAAmBA,CAACC,MAAmC,EAAE;EAAA,IAAAC,qBAAA,EAAAC,eAAA,EAAAC,sBAAA,EAAAC,sBAAA;EACvE,QAAAH,qBAAA,IAAAC,eAAA,GAAOF,MAAM,CAACK,OAAO,cAAAH,eAAA,wBAAAC,sBAAA,GAAdD,eAAA,CAAgBF,MAAM,cAAAG,sBAAA,wBAAAC,sBAAA,GAAtBD,sBAAA,CAAwBG,UAAU,cAAAF,sBAAA,uBAAlCA,sBAAA,CAAoCG,MAAM,cAAAN,qBAAA,cAAAA,qBAAA,GAAI,IAAI;AAC3D;AAEO,SAASJ,mBAAmBA,CACjCG,MAAmC,EACnCQ,eAAgC,EAChC;EACA,IAAMD,MAAM,GAAGR,mBAAmB,CAACC,MAAM,CAAC;EAC1C,IAAMS,eAAe,GAAG,IAAAjB,SAAA,GAAAkB,yBAAyB,EAACF,eAAe,CAAC;EAElE,IAAID,MAAM,EAAE;IAEV,IAAAf,SAAA,GAAAmB,gCAAgC,EAACF,eAAe,EAAEhB,YAAY,EAAEc,MAAM,CAAC;IACvE,IAAAf,SAAA,GAAAoB,mCAAmC,EAACH,eAAe,EAAE;MACnDI,IAAI,EAAEnB,QAAQ;MACdoB,QAAQ,EAAE;IACZ,CAAC,CAAC;EACJ,CAAC,MAAM;IAEL,IAAAtB,SAAA,GAAAuB,qCAAqC,EAACN,eAAe,EAAEhB,YAAY,CAAC;IACpE,IAAAD,SAAA,GAAAwB,wCAAwC,EAACP,eAAe,EAAEf,QAAQ,CAAC;EACrE;EAEA,OAAOc,eAAe;AACxB"},"metadata":{},"sourceType":"script","externalDependencies":[]}