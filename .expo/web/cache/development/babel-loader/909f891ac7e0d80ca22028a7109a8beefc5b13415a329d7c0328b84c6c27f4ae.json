{"ast":null,"code":"import { NODE_TYPE } from \"./identity.js\";","map":{"version":3,"names":["NODE_TYPE"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/dist/nodes/Node.d.ts"],"sourcesContent":["import type { Document } from '../doc/Document.js';\nimport type { ToJSOptions } from '../options.js';\nimport { Token } from '../parse/cst.js';\nimport type { StringifyContext } from '../stringify/stringify.js';\nimport type { Alias } from './Alias.js';\nimport { NODE_TYPE } from './identity.js';\nimport type { Scalar } from './Scalar.js';\nimport type { YAMLMap } from './YAMLMap.js';\nimport type { YAMLSeq } from './YAMLSeq.js';\nexport type Node<T = unknown> = Alias | Scalar<T> | YAMLMap<unknown, T> | YAMLSeq<T>;\n/** Utility type mapper */\nexport type NodeType<T> = T extends string | number | bigint | boolean | null | undefined ? Scalar<T> : T extends Date ? Scalar<string | Date> : T extends Array<any> ? YAMLSeq<NodeType<T[number]>> : T extends {\n    [key: string]: any;\n} ? YAMLMap<NodeType<keyof T>, NodeType<T[keyof T]>> : T extends {\n    [key: number]: any;\n} ? YAMLMap<NodeType<keyof T>, NodeType<T[keyof T]>> : Node;\nexport type ParsedNode = Alias.Parsed | Scalar.Parsed | YAMLMap.Parsed | YAMLSeq.Parsed;\nexport type Range = [number, number, number];\nexport declare abstract class NodeBase {\n    readonly [NODE_TYPE]: symbol;\n    /** A comment on or immediately after this */\n    comment?: string | null;\n    /** A comment before this */\n    commentBefore?: string | null;\n    /**\n     * The `[start, value-end, node-end]` character offsets for the part of the\n     * source parsed into this node (undefined if not parsed). The `value-end`\n     * and `node-end` positions are themselves not included in their respective\n     * ranges.\n     */\n    range?: Range | null;\n    /** A blank line before this node and its commentBefore */\n    spaceBefore?: boolean;\n    /** The CST token that was composed into this node.  */\n    srcToken?: Token;\n    /** A fully qualified tag, if required */\n    tag?: string;\n    /** A plain JS representation of this node */\n    abstract toJSON(): any;\n    abstract toString(ctx?: StringifyContext, onComment?: () => void, onChompKeep?: () => void): string;\n    constructor(type: symbol);\n    /** Create a copy of this node.  */\n    clone(): NodeBase;\n    /** A plain JavaScript representation of this node. */\n    toJS(doc: Document<Node, boolean>, { mapAsMap, maxAliasCount, onAnchor, reviver }?: ToJSOptions): any;\n}\n"],"mappings":"AAKA,SAASA,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}