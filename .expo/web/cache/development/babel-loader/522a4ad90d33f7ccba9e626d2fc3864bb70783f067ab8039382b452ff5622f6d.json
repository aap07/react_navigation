{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withInternal = exports.EXPO_DEBUG = void 0;\nfunction _getenv() {\n  var data = require(\"getenv\");\n  _getenv = function _getenv() {\n    return data;\n  };\n  return data;\n}\nvar EXPO_DEBUG = (0, _getenv().boolish)('EXPO_DEBUG', false);\nexports.EXPO_DEBUG = EXPO_DEBUG;\nvar withInternal = function withInternal(config, internals) {\n  if (!config._internal) {\n    config._internal = {};\n  }\n  config._internal = _objectSpread(_objectSpread({\n    isDebug: EXPO_DEBUG\n  }, config._internal), internals);\n  return config;\n};\nexports.withInternal = withInternal;","map":{"version":3,"names":["_getenv","data","require","EXPO_DEBUG","boolish","exports","withInternal","config","internals","_internal","_objectSpread","isDebug"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config\\src\\plugins\\withInternal.ts"],"sourcesContent":["import { ConfigPlugin } from '@expo/config-plugins';\nimport { boolish } from 'getenv';\n\nimport { ConfigFilePaths } from '../Config.types';\n\nexport const EXPO_DEBUG = boolish('EXPO_DEBUG', false);\n\n/**\n * Adds the _internal object.\n *\n * @param config\n * @param projectRoot\n */\nexport const withInternal: ConfigPlugin<\n  { projectRoot: string; packageJsonPath?: string } & Partial<ConfigFilePaths>\n> = (config, internals) => {\n  if (!config._internal) {\n    config._internal = {};\n  }\n\n  config._internal = {\n    isDebug: EXPO_DEBUG,\n    ...config._internal,\n    ...internals,\n  };\n\n  return config;\n};\n"],"mappings":";;;;;;;;;AACA,SAAAA,QAAA;EAAA,IAAAC,IAAA,GAAAC,OAAA;EAAAF,OAAA,YAAAA,QAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAIO,IAAME,UAAU,GAAG,IAAAH,OAAA,GAAAI,OAAO,EAAC,YAAY,EAAE,KAAK,CAAC;AAEtDC,OAAA,CAAAF,UAAA,GAAAA,UAAA;AAMO,IAAMG,YAEZ,GAAG,SAFSA,YAEZA,CAAIC,MAAM,EAAEC,SAAS,EAAK;EACzB,IAAI,CAACD,MAAM,CAACE,SAAS,EAAE;IACrBF,MAAM,CAACE,SAAS,GAAG,CAAC,CAAC;EACvB;EAEAF,MAAM,CAACE,SAAS,GAAAC,aAAA,CAAAA,aAAA;IACdC,OAAO,EAAER;EAAU,GAChBI,MAAM,CAACE,SAAS,GAChBD,SAAA,CACJ;EAED,OAAOD,MAAM;AACf,CAAC;AAACF,OAAA,CAAAC,YAAA,GAAAA,YAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}