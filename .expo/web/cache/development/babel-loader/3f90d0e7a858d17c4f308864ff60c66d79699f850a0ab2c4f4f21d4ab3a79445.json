{"ast":null,"code":"#!/usr/bin/env node\n\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.expoRunIos = void 0;\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _args = require(\"../../utils/args\");\nvar _errors = require(\"../../utils/errors\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar expoRunIos = function () {\n  var _ref = _asyncToGenerator(function* (argv) {\n    var rawArgsMap = {\n      \"--help\": Boolean,\n      \"--no-build-cache\": Boolean,\n      \"--no-install\": Boolean,\n      \"--no-bundler\": Boolean,\n      \"--configuration\": String,\n      \"--port\": Number,\n      \"-p\": \"--port\",\n      \"-h\": \"--help\"\n    };\n    var args = (0, _args).assertWithOptionsArgs(rawArgsMap, {\n      argv: argv,\n      permissive: true\n    });\n    if (args[\"--help\"]) {\n      (0, _args).printHelp(`Run the iOS app binary locally`, `npx expo run:ios`, [`--no-build-cache                 Clear the native derived data before building`, `--no-install                     Skip installing dependencies`, `--no-bundler                     Skip starting the Metro bundler`, `--scheme [scheme]                Scheme to build`, _chalk.default`--configuration <configuration>  Xcode configuration to use. Debug or Release. {dim Default: Debug}`, `-d, --device [device]            Device name or UDID to build the app on`, _chalk.default`-p, --port <port>                Port to start the Metro bundler on. {dim Default: 8081}`, `-h, --help                       Usage info`].join(\"\\n\"), [\"\", _chalk.default`  Build for production (unsigned) with the {bold Release} configuration:`, _chalk.default`    {dim $} npx expo run:ios --configuration Release`, \"\"].join(\"\\n\"));\n    }\n    var _yield$Promise$resolv = yield Promise.resolve().then(function () {\n        return _interopRequireWildcard(require(\"../../utils/resolveArgs\"));\n      }),\n      resolveStringOrBooleanArgsAsync = _yield$Promise$resolv.resolveStringOrBooleanArgsAsync;\n    var parsed = yield resolveStringOrBooleanArgsAsync(argv != null ? argv : [], rawArgsMap, {\n      \"--scheme\": Boolean,\n      \"--device\": Boolean,\n      \"-d\": \"--device\"\n    }).catch(_errors.logCmdError);\n    var _yield$Promise$resolv2 = yield Promise.resolve().then(function () {\n        return _interopRequireWildcard(require(\"./runIosAsync\"));\n      }),\n      runIosAsync = _yield$Promise$resolv2.runIosAsync;\n    return runIosAsync(_path.default.resolve(parsed.projectRoot), {\n      buildCache: !args[\"--no-build-cache\"],\n      install: !args[\"--no-install\"],\n      bundler: !args[\"--no-bundler\"],\n      port: args[\"--port\"],\n      device: parsed.args[\"--device\"],\n      scheme: parsed.args[\"--scheme\"],\n      configuration: parsed.args[\"--configuration\"]\n    }).catch(_errors.logCmdError);\n  });\n  return function expoRunIos(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexports.expoRunIos = expoRunIos;","map":{"version":3,"names":["_chalk","_interopRequireDefault","require","_path","_args","_errors","expoRunIos","_ref","_asyncToGenerator","argv","rawArgsMap","Boolean","String","Number","args","assertWithOptionsArgs","permissive","printHelp","default","join","_yield$Promise$resolv","Promise","resolve","then","resolveStringOrBooleanArgsAsync","parsed","catch","logCmdError","_yield$Promise$resolv2","runIosAsync","projectRoot","buildCache","install","bundler","port","device","scheme","configuration","_x","apply","arguments"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\run\\ios\\index.ts"],"sourcesContent":["#!/usr/bin/env node\nimport arg from 'arg';\nimport chalk from 'chalk';\nimport path from 'path';\n\nimport { Command } from '../../../bin/cli';\nimport { assertWithOptionsArgs, printHelp } from '../../utils/args';\nimport { logCmdError } from '../../utils/errors';\nimport { XcodeConfiguration } from './XcodeBuild.types';\n\nexport const expoRunIos: Command = async (argv) => {\n  const rawArgsMap: arg.Spec = {\n    // Types\n    '--help': Boolean,\n    '--no-build-cache': Boolean,\n    '--no-install': Boolean,\n    '--no-bundler': Boolean,\n    '--configuration': String,\n\n    '--port': Number,\n    // Aliases\n    '-p': '--port',\n\n    '-h': '--help',\n  };\n  const args = assertWithOptionsArgs(rawArgsMap, {\n    argv,\n\n    permissive: true,\n  });\n\n  // '-d' -> '--device': Boolean,\n  // '--scheme': String,\n\n  if (args['--help']) {\n    printHelp(\n      `Run the iOS app binary locally`,\n      `npx expo run:ios`,\n      [\n        `--no-build-cache                 Clear the native derived data before building`,\n        `--no-install                     Skip installing dependencies`,\n        `--no-bundler                     Skip starting the Metro bundler`,\n        `--scheme [scheme]                Scheme to build`,\n        chalk`--configuration <configuration>  Xcode configuration to use. Debug or Release. {dim Default: Debug}`,\n        `-d, --device [device]            Device name or UDID to build the app on`,\n        chalk`-p, --port <port>                Port to start the Metro bundler on. {dim Default: 8081}`,\n        `-h, --help                       Usage info`,\n      ].join('\\n'),\n      [\n        '',\n        chalk`  Build for production (unsigned) with the {bold Release} configuration:`,\n        chalk`    {dim $} npx expo run:ios --configuration Release`,\n        '',\n      ].join('\\n')\n    );\n  }\n\n  const { resolveStringOrBooleanArgsAsync } = await import('../../utils/resolveArgs');\n  const parsed = await resolveStringOrBooleanArgsAsync(argv ?? [], rawArgsMap, {\n    '--scheme': Boolean,\n    '--device': Boolean,\n    '-d': '--device',\n  }).catch(logCmdError);\n\n  const { runIosAsync } = await import('./runIosAsync');\n  return runIosAsync(path.resolve(parsed.projectRoot), {\n    // Parsed options\n    buildCache: !args['--no-build-cache'],\n    install: !args['--no-install'],\n    bundler: !args['--no-bundler'],\n    port: args['--port'],\n\n    // Custom parsed args\n    device: parsed.args['--device'],\n    scheme: parsed.args['--scheme'],\n    configuration: parsed.args['--configuration'] as XcodeConfiguration,\n  }).catch(logCmdError);\n};\n"],"mappings":"AAAA;;;;;;;;AAEkB,IAAAA,MAAO,GAAAC,sBAAA,CAAAC,OAAA,CAAP,OAAO;AACR,IAAAC,KAAM,GAAAF,sBAAA,CAAAC,OAAA,CAAN,MAAM;AAG0B,IAAAE,KAAkB,GAAAF,OAAA;AACvC,IAAAG,OAAoB,GAAAH,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGzC,IAAMI,UAAU;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAY,WAAOC,IAAI,EAAK;IACjD,IAAMC,UAAU,GAAa;MAE3B,QAAQ,EAAEC,OAAO;MACjB,kBAAkB,EAAEA,OAAO;MAC3B,cAAc,EAAEA,OAAO;MACvB,cAAc,EAAEA,OAAO;MACvB,iBAAiB,EAAEC,MAAM;MAEzB,QAAQ,EAAEC,MAAM;MAEhB,IAAI,EAAE,QAAQ;MAEd,IAAI,EAAE;KACP;IACD,IAAMC,IAAI,GAAG,IAAAV,KAAqB,EAIhCW,qBAJgC,CAACL,UAAU,EAAE;MAC7CD,IAAI,EAAJA,IAAI;MAEJO,UAAU,EAAE;KACb,CAAC;IAKF,IAAIF,IAAI,CAAC,QAAQ,CAAC,EAAE;MAClB,IAAAV,KAAS,EAmBRa,SAnBQ,CACN,gCAA+B,EAC/B,kBAAiB,EAClB,CACG,gFAA+E,EAC/E,+DAA8D,EAC9D,kEAAiE,EACjE,kDAAiD,EAClDjB,MAAK,CAAAkB,OAAC,qGAAoG,EACzG,0EAAyE,EAC1ElB,MAAK,CAAAkB,OAAC,0FAAyF,EAC9F,6CAA4C,CAC9C,CAACC,IAAI,CAAC,IAAI,CAAC,EACZ,CACE,EAAE,EACFnB,MAAK,CAAAkB,OAAC,0EAAyE,EAC/ElB,MAAK,CAAAkB,OAAC,sDAAqD,EAC3D,EAAE,CACH,CAACC,IAAI,CAAC,IAAI,CAAC,CACb;;IAGH,IAAAC,qBAAA,SAAkDC,OAAA,CAAAC,OAAA,GAAAC,IAAA;wEAAgC;QAAC;MAA3EC,+BAA+B,GAAAJ,qBAAA,CAA/BI,+BAA+B;IACvC,IAAMC,MAAM,SAASD,+BAA+B,CAACf,IAAI,WAAJA,IAAI,GAAI,EAAE,EAAEC,UAAU,EAAE;MAC3E,UAAU,EAAEC,OAAO;MACnB,UAAU,EAAEA,OAAO;MACnB,IAAI,EAAE;KACP,CAAC,CAACe,KAAK,CAACrB,OAAW,CAAAsB,WAAA,CAAC;IAErB,IAAAC,sBAAA,SAA8BP,OAAA,CAAAC,OAAA,GAAAC,IAAA;8DAAsB;QAAC;MAA7CM,WAAW,GAAAD,sBAAA,CAAXC,WAAW;IACnB,OAAOA,WAAW,CAAC1B,KAAI,CAAAe,OAAA,CAACI,OAAO,CAACG,MAAM,CAACK,WAAW,CAAC,EAAE;MAEnDC,UAAU,EAAE,CAACjB,IAAI,CAAC,kBAAkB,CAAC;MACrCkB,OAAO,EAAE,CAAClB,IAAI,CAAC,cAAc,CAAC;MAC9BmB,OAAO,EAAE,CAACnB,IAAI,CAAC,cAAc,CAAC;MAC9BoB,IAAI,EAAEpB,IAAI,CAAC,QAAQ,CAAC;MAGpBqB,MAAM,EAAEV,MAAM,CAACX,IAAI,CAAC,UAAU,CAAC;MAC/BsB,MAAM,EAAEX,MAAM,CAACX,IAAI,CAAC,UAAU,CAAC;MAC/BuB,aAAa,EAAEZ,MAAM,CAACX,IAAI,CAAC,iBAAiB;KAC7C,CAAC,CAACY,KAAK,CAACrB,OAAW,CAAAsB,WAAA,CAAC;GACtB;EAAA,gBAnEYrB,UAAUA,CAAAgC,EAAA;IAAA,OAAA/B,IAAA,CAAAgC,KAAA,OAAAC,SAAA;EAAA;AAAA,GAmEtB;QAnEYlC,UAAU,GAAVA,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}