{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n  _execa = function _execa() {\n    return data;\n  };\n  return data;\n}\nvar _checkInstallation = require(\"../checkInstallation\");\nvar _installPods = require(\"../installPods\");\nvar _common = require(\"./common\");\nvar _versionRanges = _interopRequireDefault(require(\"../versionRanges\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar label = 'CocoaPods';\nvar _default = {\n  label: label,\n  description: 'Required for installing iOS dependencies',\n  getDiagnostics: function () {\n    var _getDiagnostics = _asyncToGenerator(function* (_ref) {\n      var Managers = _ref.Managers;\n      return {\n        needsToBeFixed: (0, _checkInstallation.doesSoftwareNeedToBeFixed)({\n          version: Managers.CocoaPods.version,\n          versionRange: _versionRanges.default.COCOAPODS\n        }),\n        version: Managers.CocoaPods.version,\n        versionRange: _versionRanges.default.COCOAPODS\n      };\n    });\n    function getDiagnostics(_x) {\n      return _getDiagnostics.apply(this, arguments);\n    }\n    return getDiagnostics;\n  }(),\n  runAutomaticFix: function () {\n    var _runAutomaticFix = _asyncToGenerator(function* (_ref2) {\n      var loader = _ref2.loader;\n      loader.stop();\n      var installMethodCapitalized = 'Gem';\n      var loaderInstallationMessage = `${label} (installing with ${installMethodCapitalized})`;\n      var loaderSucceedMessage = `${label} (installed with ${installMethodCapitalized})`;\n      loader.start(loaderInstallationMessage);\n      var options = ['install', 'cocoapods', '--no-document'];\n      try {\n        yield (0, _execa().default)('gem', options);\n        return loader.succeed(loaderSucceedMessage);\n      } catch (_error) {\n        try {\n          yield (0, _installPods.runSudo)(`gem ${options.join(' ')}`);\n          return loader.succeed(loaderSucceedMessage);\n        } catch (error) {\n          (0, _common.logError)({\n            healthcheck: label,\n            loader: loader,\n            error: error,\n            command: 'sudo gem install cocoapods'\n          });\n        }\n      }\n      return;\n    });\n    function runAutomaticFix(_x2) {\n      return _runAutomaticFix.apply(this, arguments);\n    }\n    return runAutomaticFix;\n  }()\n};\nexports.default = _default;","map":{"version":3,"names":["_asyncToGenerator","require","Object","defineProperty","exports","value","default","_execa","data","_interopRequireDefault","_checkInstallation","_installPods","_common","_versionRanges","obj","__esModule","label","_default","description","getDiagnostics","_getDiagnostics","_ref","Managers","needsToBeFixed","doesSoftwareNeedToBeFixed","version","CocoaPods","versionRange","COCOAPODS","_x","apply","arguments","runAutomaticFix","_runAutomaticFix","_ref2","loader","stop","installMethodCapitalized","loaderInstallationMessage","loaderSucceedMessage","start","options","succeed","_error","runSudo","join","error","logError","healthcheck","command","_x2"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/build/tools/healthchecks/cocoaPods.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _execa() {\n  const data = _interopRequireDefault(require(\"execa\"));\n  _execa = function () {\n    return data;\n  };\n  return data;\n}\nvar _checkInstallation = require(\"../checkInstallation\");\nvar _installPods = require(\"../installPods\");\nvar _common = require(\"./common\");\nvar _versionRanges = _interopRequireDefault(require(\"../versionRanges\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nconst label = 'CocoaPods';\nvar _default = {\n  label,\n  description: 'Required for installing iOS dependencies',\n  getDiagnostics: async ({\n    Managers\n  }) => ({\n    needsToBeFixed: (0, _checkInstallation.doesSoftwareNeedToBeFixed)({\n      version: Managers.CocoaPods.version,\n      versionRange: _versionRanges.default.COCOAPODS\n    }),\n    version: Managers.CocoaPods.version,\n    versionRange: _versionRanges.default.COCOAPODS\n  }),\n  runAutomaticFix: async ({\n    loader\n  }) => {\n    loader.stop();\n    const installMethodCapitalized = 'Gem';\n    const loaderInstallationMessage = `${label} (installing with ${installMethodCapitalized})`;\n    const loaderSucceedMessage = `${label} (installed with ${installMethodCapitalized})`;\n    loader.start(loaderInstallationMessage);\n    const options = ['install', 'cocoapods', '--no-document'];\n    try {\n      // First attempt to install `cocoapods`\n      await (0, _execa().default)('gem', options);\n      return loader.succeed(loaderSucceedMessage);\n    } catch (_error) {\n      // If that doesn't work then try with sudo\n      try {\n        await (0, _installPods.runSudo)(`gem ${options.join(' ')}`);\n        return loader.succeed(loaderSucceedMessage);\n      } catch (error) {\n        (0, _common.logError)({\n          healthcheck: label,\n          loader,\n          error: error,\n          command: 'sudo gem install cocoapods'\n        });\n      }\n    }\n    return;\n  }\n};\nexports.default = _default;\n\n//# sourceMappingURL=cocoaPods.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}