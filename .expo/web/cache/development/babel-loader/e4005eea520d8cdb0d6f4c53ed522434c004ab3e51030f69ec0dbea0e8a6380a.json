{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _child_process() {\n  var data = _interopRequireDefault(require(\"child_process\"));\n  _child_process = function _child_process() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function _chalk() {\n    return data;\n  };\n  return data;\n}\nvar _getDestinationSimulator = require(\"../../tools/getDestinationSimulator\");\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function _cliTools() {\n    return data;\n  };\n  return data;\n}\nvar _buildProject = require(\"../buildIOS/buildProject\");\nvar _buildIOS = require(\"../buildIOS\");\nvar _listIOSDevices = _interopRequireDefault(require(\"../../tools/listIOSDevices\"));\nvar _checkIfConfigurationExists = require(\"../../tools/checkIfConfigurationExists\");\nvar _getProjectInfo = require(\"../../tools/getProjectInfo\");\nvar _getConfigurationScheme = require(\"../../tools/getConfigurationScheme\");\nvar _selectFromInteractiveMode = require(\"../../tools/selectFromInteractiveMode\");\nvar _prompts = require(\"../../tools/prompts\");\nvar _getSimulators = _interopRequireDefault(require(\"../../tools/getSimulators\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction runIOS(_x, _x2, _x3) {\n  return _runIOS.apply(this, arguments);\n}\nfunction _runIOS() {\n  _runIOS = _asyncToGenerator(function* (_, ctx, args) {\n    _cliTools().link.setPlatform('ios');\n    if (ctx.reactNativeVersion !== 'unknown') {\n      _cliTools().link.setVersion(ctx.reactNativeVersion);\n    }\n    if (!ctx.project.ios) {\n      throw new (_cliTools().CLIError)('iOS project folder not found. Are you sure this is a React Native project?');\n    }\n    var _ctx$project$ios = ctx.project.ios,\n      xcodeProject = _ctx$project$ios.xcodeProject,\n      sourceDir = _ctx$project$ios.sourceDir;\n    if (!xcodeProject) {\n      throw new (_cliTools().CLIError)(`Could not find Xcode project files in \"${sourceDir}\" folder`);\n    }\n    process.chdir(sourceDir);\n    if (args.binaryPath) {\n      args.binaryPath = _path().default.isAbsolute(args.binaryPath) ? args.binaryPath : _path().default.join(ctx.root, args.binaryPath);\n      if (!_fs().default.existsSync(args.binaryPath)) {\n        throw new (_cliTools().CLIError)('binary-path was specified, but the file was not found.');\n      }\n    }\n    if (args.configuration) {\n      _cliTools().logger.warn('--configuration has been deprecated. Use --mode instead.');\n      _cliTools().logger.warn('Parameters were automatically reassigned to --mode on this run.');\n      args.mode = args.configuration;\n    }\n    var projectInfo = (0, _getProjectInfo.getProjectInfo)();\n    if (args.mode) {\n      (0, _checkIfConfigurationExists.checkIfConfigurationExists)(projectInfo, args.mode);\n    }\n    var inferredSchemeName = _path().default.basename(xcodeProject.name, _path().default.extname(xcodeProject.name));\n    var scheme = args.scheme || inferredSchemeName;\n    var mode = args.mode;\n    if (args.interactive) {\n      var selection = yield (0, _selectFromInteractiveMode.selectFromInteractiveMode)({\n        scheme: scheme,\n        mode: mode\n      });\n      if (selection.scheme) {\n        scheme = selection.scheme;\n      }\n      if (selection.mode) {\n        mode = selection.mode;\n      }\n    }\n    var modifiedArgs = _objectSpread(_objectSpread({}, args), {}, {\n      scheme: scheme,\n      mode: mode\n    });\n    modifiedArgs.mode = (0, _getConfigurationScheme.getConfigurationScheme)({\n      scheme: modifiedArgs.scheme,\n      mode: modifiedArgs.mode\n    }, sourceDir);\n    _cliTools().logger.info(`Found Xcode ${xcodeProject.isWorkspace ? 'workspace' : 'project'} \"${_chalk().default.bold(xcodeProject.name)}\"`);\n    var availableDevices = yield (0, _listIOSDevices.default)();\n    if (modifiedArgs.listDevices || modifiedArgs.interactive) {\n      if (modifiedArgs.device || modifiedArgs.udid) {\n        _cliTools().logger.warn(`Both ${modifiedArgs.device ? 'device' : 'udid'} and \"list-devices\" parameters were passed to \"run\" command. We will list available devices and let you choose from one.`);\n      }\n      var selectedDevice = yield (0, _prompts.promptForDeviceSelection)(availableDevices);\n      if (!selectedDevice) {\n        throw new (_cliTools().CLIError)(`Failed to select device, please try to run app without ${args.listDevices ? 'list-devices' : 'interactive'} command.`);\n      }\n      if (selectedDevice.type === 'simulator') {\n        return runOnSimulator(xcodeProject, scheme, modifiedArgs, selectedDevice);\n      } else {\n        return runOnDevice(selectedDevice, scheme, xcodeProject, modifiedArgs);\n      }\n    }\n    if (!modifiedArgs.device && !modifiedArgs.udid && !modifiedArgs.simulator) {\n      var bootedDevices = availableDevices.filter(function (_ref) {\n        var type = _ref.type,\n          isAvailable = _ref.isAvailable;\n        return type === 'device' && isAvailable;\n      });\n      var simulators = (0, _getSimulators.default)();\n      var bootedSimulators = Object.keys(simulators.devices).map(function (key) {\n        return simulators.devices[key];\n      }).reduce(function (acc, val) {\n        return acc.concat(val);\n      }, []).filter(function (_ref2) {\n        var state = _ref2.state;\n        return state === 'Booted';\n      });\n      var booted = [].concat(_toConsumableArray(bootedDevices), _toConsumableArray(bootedSimulators));\n      if (booted.length === 0) {\n        _cliTools().logger.info('No booted devices or simulators found. Launching first available simulator...');\n        return runOnSimulator(xcodeProject, scheme, modifiedArgs);\n      }\n      _cliTools().logger.info(`Found booted ${booted.map(function (_ref3) {\n        var name = _ref3.name;\n        return name;\n      }).join(', ')}`);\n      return runOnBootedDevicesSimulators(scheme, xcodeProject, modifiedArgs, bootedDevices, bootedSimulators);\n    }\n    if (modifiedArgs.device && modifiedArgs.udid) {\n      return _cliTools().logger.error('The `device` and `udid` options are mutually exclusive.');\n    }\n    if (modifiedArgs.udid) {\n      var device = availableDevices.find(function (d) {\n        return d.udid === modifiedArgs.udid;\n      });\n      if (!device) {\n        return _cliTools().logger.error(`Could not find a device with udid: \"${_chalk().default.bold(modifiedArgs.udid)}\". ${printFoundDevices(availableDevices)}`);\n      }\n      if (device.type === 'simulator') {\n        return runOnSimulator(xcodeProject, scheme, modifiedArgs);\n      } else {\n        return runOnDevice(device, scheme, xcodeProject, modifiedArgs);\n      }\n    } else if (modifiedArgs.device) {\n      var physicalDevices = availableDevices.filter(function (_ref4) {\n        var type = _ref4.type;\n        return type !== 'simulator';\n      });\n      var _device = matchingDevice(physicalDevices, modifiedArgs.device);\n      if (_device) {\n        return runOnDevice(_device, scheme, xcodeProject, modifiedArgs);\n      }\n    } else {\n      runOnSimulator(xcodeProject, scheme, modifiedArgs);\n    }\n  });\n  return _runIOS.apply(this, arguments);\n}\nfunction runOnBootedDevicesSimulators(_x4, _x5, _x6, _x7, _x8) {\n  return _runOnBootedDevicesSimulators.apply(this, arguments);\n}\nfunction _runOnBootedDevicesSimulators() {\n  _runOnBootedDevicesSimulators = _asyncToGenerator(function* (scheme, xcodeProject, args, devices, simulators) {\n    for (var device of devices) {\n      yield runOnDevice(device, scheme, xcodeProject, args);\n    }\n    for (var simulator of simulators) {\n      yield runOnSimulator(xcodeProject, scheme, args, simulator);\n    }\n  });\n  return _runOnBootedDevicesSimulators.apply(this, arguments);\n}\nfunction runOnSimulator(_x9, _x10, _x11, _x12) {\n  return _runOnSimulator.apply(this, arguments);\n}\nfunction _runOnSimulator() {\n  _runOnSimulator = _asyncToGenerator(function* (xcodeProject, scheme, args, simulator) {\n    var selectedSimulator;\n    if (simulator) {\n      selectedSimulator = simulator;\n    } else {\n      var fallbackSimulators = ['iPhone 14', 'iPhone 13', 'iPhone 12', 'iPhone 11'];\n      selectedSimulator = (0, _getDestinationSimulator.getDestinationSimulator)(args, fallbackSimulators);\n    }\n    if (!selectedSimulator) {\n      throw new (_cliTools().CLIError)(`No simulator available with ${args.simulator ? `name \"${args.simulator}\"` : `udid \"${args.udid}\"`}`);\n    }\n    var activeDeveloperDir = _child_process().default.execFileSync('xcode-select', ['-p'], {\n      encoding: 'utf8'\n    }).trim();\n    _child_process().default.execFileSync('open', [`${activeDeveloperDir}/Applications/Simulator.app`, '--args', '-CurrentDeviceUDID', selectedSimulator.udid]);\n    if (!selectedSimulator.booted) {\n      bootSimulator(selectedSimulator);\n    }\n    var buildOutput, appPath;\n    if (!args.binaryPath) {\n      buildOutput = yield (0, _buildProject.buildProject)(xcodeProject, selectedSimulator.udid, scheme, args);\n      appPath = getBuildPath(xcodeProject, args.mode || args.configuration, buildOutput, scheme);\n    } else {\n      appPath = args.binaryPath;\n    }\n    _cliTools().logger.info(`Installing \"${_chalk().default.bold(appPath)} on ${selectedSimulator.name}\"`);\n    _child_process().default.spawnSync('xcrun', ['simctl', 'install', selectedSimulator.udid, appPath], {\n      stdio: 'inherit'\n    });\n    var bundleID = _child_process().default.execFileSync('/usr/libexec/PlistBuddy', ['-c', 'Print:CFBundleIdentifier', _path().default.join(appPath, 'Info.plist')], {\n      encoding: 'utf8'\n    }).trim();\n    _cliTools().logger.info(`Launching \"${_chalk().default.bold(bundleID)}\"`);\n    var result = _child_process().default.spawnSync('xcrun', ['simctl', 'launch', selectedSimulator.udid, bundleID]);\n    if (result.status === 0) {\n      _cliTools().logger.success('Successfully launched the app on the simulator');\n    } else {\n      _cliTools().logger.error('Failed to launch the app on simulator', result.stderr.toString());\n    }\n  });\n  return _runOnSimulator.apply(this, arguments);\n}\nfunction runOnDevice(_x13, _x14, _x15, _x16) {\n  return _runOnDevice.apply(this, arguments);\n}\nfunction _runOnDevice() {\n  _runOnDevice = _asyncToGenerator(function* (selectedDevice, scheme, xcodeProject, args) {\n    if (args.binaryPath && selectedDevice.type === 'catalyst') {\n      throw new (_cliTools().CLIError)('binary-path was specified for catalyst device, which is not supported.');\n    }\n    var isIOSDeployInstalled = _child_process().default.spawnSync('ios-deploy', ['--version'], {\n      encoding: 'utf8'\n    });\n    if (isIOSDeployInstalled.error) {\n      throw new (_cliTools().CLIError)(`Failed to install the app on the device because we couldn't execute the \"ios-deploy\" command. Please install it by running \"${_chalk().default.bold('brew install ios-deploy')}\" and try again.`);\n    }\n    if (selectedDevice.type === 'catalyst') {\n      var buildOutput = yield (0, _buildProject.buildProject)(xcodeProject, selectedDevice.udid, scheme, args);\n      var appPath = getBuildPath(xcodeProject, args.mode || args.configuration, buildOutput, scheme, true);\n      var appProcess = _child_process().default.spawn(`${appPath}/${scheme}`, [], {\n        detached: true,\n        stdio: 'ignore'\n      });\n      appProcess.unref();\n    } else {\n      var _buildOutput, _appPath;\n      if (!args.binaryPath) {\n        _buildOutput = yield (0, _buildProject.buildProject)(xcodeProject, selectedDevice.udid, scheme, args);\n        _appPath = getBuildPath(xcodeProject, args.mode || args.configuration, _buildOutput, scheme);\n      } else {\n        _appPath = args.binaryPath;\n      }\n      var iosDeployInstallArgs = ['--bundle', _appPath, '--id', selectedDevice.udid, '--justlaunch'];\n      _cliTools().logger.info(`Installing and launching your app on ${selectedDevice.name}`);\n      var iosDeployOutput = _child_process().default.spawnSync('ios-deploy', iosDeployInstallArgs, {\n        encoding: 'utf8'\n      });\n      if (iosDeployOutput.error) {\n        throw new (_cliTools().CLIError)(`Failed to install the app on the device. We've encountered an error in \"ios-deploy\" command: ${iosDeployOutput.error.message}`);\n      }\n    }\n    return _cliTools().logger.success('Installed the app on the device.');\n  });\n  return _runOnDevice.apply(this, arguments);\n}\nfunction bootSimulator(selectedSimulator) {\n  var simulatorFullName = formattedDeviceName(selectedSimulator);\n  _cliTools().logger.info(`Launching ${simulatorFullName}`);\n  _child_process().default.spawnSync('xcrun', ['simctl', 'boot', selectedSimulator.udid]);\n}\nfunction getTargetPaths(buildSettings) {\n  var settings = JSON.parse(buildSettings);\n  for (var i in settings) {\n    var wrapperExtension = settings[i].buildSettings.WRAPPER_EXTENSION;\n    if (wrapperExtension === 'app') {\n      return {\n        targetBuildDir: settings[i].buildSettings.TARGET_BUILD_DIR,\n        executableFolderPath: settings[i].buildSettings.EXECUTABLE_FOLDER_PATH\n      };\n    }\n  }\n  return {};\n}\nfunction getBuildPath(xcodeProject, mode, buildOutput, scheme) {\n  var isCatalyst = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var buildSettings = _child_process().default.execFileSync('xcodebuild', [xcodeProject.isWorkspace ? '-workspace' : '-project', xcodeProject.name, '-scheme', scheme, '-sdk', getPlatformName(buildOutput), '-configuration', mode, '-showBuildSettings', '-json'], {\n    encoding: 'utf8'\n  });\n  var _getTargetPaths = getTargetPaths(buildSettings),\n    targetBuildDir = _getTargetPaths.targetBuildDir,\n    executableFolderPath = _getTargetPaths.executableFolderPath;\n  if (!targetBuildDir) {\n    throw new (_cliTools().CLIError)('Failed to get the target build directory.');\n  }\n  if (!executableFolderPath) {\n    throw new (_cliTools().CLIError)('Failed to get the app name.');\n  }\n  return `${targetBuildDir}${isCatalyst ? '-maccatalyst' : ''}/${executableFolderPath}`;\n}\nfunction getPlatformName(buildOutput) {\n  var platformNameMatch = /export PLATFORM_NAME\\\\?=\"?(\\w+)\"?$/m.exec(buildOutput);\n  if (!platformNameMatch) {\n    throw new (_cliTools().CLIError)('Couldn\\'t find \"PLATFORM_NAME\" variable in xcodebuild output. Please report this issue and run your project with Xcode instead.');\n  }\n  return platformNameMatch[1];\n}\nfunction matchingDevice(devices, deviceName) {\n  if (deviceName === true) {\n    var firstIOSDevice = devices.find(function (d) {\n      return d.type === 'device';\n    });\n    if (firstIOSDevice) {\n      _cliTools().logger.info(`Using first available device named \"${_chalk().default.bold(firstIOSDevice.name)}\" due to lack of name supplied.`);\n      return firstIOSDevice;\n    } else {\n      _cliTools().logger.error('No iOS devices connected.');\n      return undefined;\n    }\n  }\n  var deviceByName = devices.find(function (device) {\n    return device.name === deviceName || formattedDeviceName(device) === deviceName;\n  });\n  if (!deviceByName) {\n    _cliTools().logger.error(`Could not find a device named: \"${_chalk().default.bold(String(deviceName))}\". ${printFoundDevices(devices)}`);\n  }\n  return deviceByName;\n}\nfunction formattedDeviceName(simulator) {\n  return simulator.version ? `${simulator.name} (${simulator.version})` : simulator.name;\n}\nfunction printFoundDevices(devices) {\n  return ['Available devices:'].concat(_toConsumableArray(devices.map(function (device) {\n    return `  - ${device.name} (${device.udid})`;\n  }))).join('\\n');\n}\nvar _default = {\n  name: 'run-ios',\n  description: 'builds your app and starts it on iOS simulator',\n  func: runIOS,\n  examples: [{\n    desc: 'Run on a different simulator, e.g. iPhone SE (2nd generation)',\n    cmd: 'react-native run-ios --simulator \"iPhone SE (2nd generation)\"'\n  }, {\n    desc: \"Run on a connected device, e.g. Max's iPhone\",\n    cmd: 'react-native run-ios --device \"Max\\'s iPhone\"'\n  }, {\n    desc: 'Run on the AppleTV simulator',\n    cmd: 'react-native run-ios --simulator \"Apple TV\"  --scheme \"helloworld-tvOS\"'\n  }],\n  options: [].concat(_toConsumableArray(_buildIOS.iosBuildOptions), [{\n    name: '--no-packager',\n    description: 'Do not launch packager while building'\n  }, {\n    name: '--binary-path <string>',\n    description: 'Path relative to project root where pre-built .app binary lives.'\n  }, {\n    name: '--list-devices',\n    description: 'List all available iOS devices and simulators and let you choose one to run the app. '\n  }, {\n    name: '--interactive',\n    description: 'Explicitly select which scheme and configuration to use before running a build and select device to run the application.'\n  }])\n};\nexports.default = _default;","map":{"version":3,"names":["_defineProperty","require","_toConsumableArray","_asyncToGenerator","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","exports","value","default","_child_process","data","_interopRequireDefault","_path","_fs","_chalk","_getDestinationSimulator","_cliTools","_buildProject","_buildIOS","_listIOSDevices","_checkIfConfigurationExists","_getProjectInfo","_getConfigurationScheme","_selectFromInteractiveMode","_prompts","_getSimulators","obj","__esModule","runIOS","_x","_x2","_x3","_runIOS","_","ctx","args","link","setPlatform","reactNativeVersion","setVersion","project","ios","CLIError","_ctx$project$ios","xcodeProject","sourceDir","process","chdir","binaryPath","isAbsolute","join","root","existsSync","configuration","logger","warn","mode","projectInfo","getProjectInfo","checkIfConfigurationExists","inferredSchemeName","basename","name","extname","scheme","interactive","selection","selectFromInteractiveMode","modifiedArgs","getConfigurationScheme","info","isWorkspace","bold","availableDevices","listDevices","device","udid","selectedDevice","promptForDeviceSelection","type","runOnSimulator","runOnDevice","simulator","bootedDevices","_ref","isAvailable","simulators","bootedSimulators","devices","map","key","reduce","acc","val","concat","_ref2","state","booted","_ref3","runOnBootedDevicesSimulators","error","find","d","printFoundDevices","physicalDevices","_ref4","matchingDevice","_x4","_x5","_x6","_x7","_x8","_runOnBootedDevicesSimulators","_x9","_x10","_x11","_x12","_runOnSimulator","selectedSimulator","fallbackSimulators","getDestinationSimulator","activeDeveloperDir","execFileSync","encoding","trim","bootSimulator","buildOutput","appPath","buildProject","getBuildPath","spawnSync","stdio","bundleID","result","status","success","stderr","toString","_x13","_x14","_x15","_x16","_runOnDevice","isIOSDeployInstalled","appProcess","spawn","detached","unref","iosDeployInstallArgs","iosDeployOutput","message","simulatorFullName","formattedDeviceName","getTargetPaths","buildSettings","settings","JSON","parse","i","wrapperExtension","WRAPPER_EXTENSION","targetBuildDir","TARGET_BUILD_DIR","executableFolderPath","EXECUTABLE_FOLDER_PATH","isCatalyst","undefined","getPlatformName","_getTargetPaths","platformNameMatch","exec","deviceName","firstIOSDevice","deviceByName","String","version","_default","description","func","examples","desc","cmd","options","iosBuildOptions"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-platform-ios/build/commands/runIOS/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _child_process() {\n  const data = _interopRequireDefault(require(\"child_process\"));\n  _child_process = function () {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n  _path = function () {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n  _fs = function () {\n    return data;\n  };\n  return data;\n}\nfunction _chalk() {\n  const data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function () {\n    return data;\n  };\n  return data;\n}\nvar _getDestinationSimulator = require(\"../../tools/getDestinationSimulator\");\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function () {\n    return data;\n  };\n  return data;\n}\nvar _buildProject = require(\"../buildIOS/buildProject\");\nvar _buildIOS = require(\"../buildIOS\");\nvar _listIOSDevices = _interopRequireDefault(require(\"../../tools/listIOSDevices\"));\nvar _checkIfConfigurationExists = require(\"../../tools/checkIfConfigurationExists\");\nvar _getProjectInfo = require(\"../../tools/getProjectInfo\");\nvar _getConfigurationScheme = require(\"../../tools/getConfigurationScheme\");\nvar _selectFromInteractiveMode = require(\"../../tools/selectFromInteractiveMode\");\nvar _prompts = require(\"../../tools/prompts\");\nvar _getSimulators = _interopRequireDefault(require(\"../../tools/getSimulators\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nasync function runIOS(_, ctx, args) {\n  _cliTools().link.setPlatform('ios');\n  if (ctx.reactNativeVersion !== 'unknown') {\n    _cliTools().link.setVersion(ctx.reactNativeVersion);\n  }\n  if (!ctx.project.ios) {\n    throw new (_cliTools().CLIError)('iOS project folder not found. Are you sure this is a React Native project?');\n  }\n  const {\n    xcodeProject,\n    sourceDir\n  } = ctx.project.ios;\n  if (!xcodeProject) {\n    throw new (_cliTools().CLIError)(`Could not find Xcode project files in \"${sourceDir}\" folder`);\n  }\n  process.chdir(sourceDir);\n  if (args.binaryPath) {\n    args.binaryPath = _path().default.isAbsolute(args.binaryPath) ? args.binaryPath : _path().default.join(ctx.root, args.binaryPath);\n    if (!_fs().default.existsSync(args.binaryPath)) {\n      throw new (_cliTools().CLIError)('binary-path was specified, but the file was not found.');\n    }\n  }\n  if (args.configuration) {\n    _cliTools().logger.warn('--configuration has been deprecated. Use --mode instead.');\n    _cliTools().logger.warn('Parameters were automatically reassigned to --mode on this run.');\n    args.mode = args.configuration;\n  }\n  const projectInfo = (0, _getProjectInfo.getProjectInfo)();\n  if (args.mode) {\n    (0, _checkIfConfigurationExists.checkIfConfigurationExists)(projectInfo, args.mode);\n  }\n  const inferredSchemeName = _path().default.basename(xcodeProject.name, _path().default.extname(xcodeProject.name));\n  let scheme = args.scheme || inferredSchemeName;\n  let mode = args.mode;\n  if (args.interactive) {\n    const selection = await (0, _selectFromInteractiveMode.selectFromInteractiveMode)({\n      scheme,\n      mode\n    });\n    if (selection.scheme) {\n      scheme = selection.scheme;\n    }\n    if (selection.mode) {\n      mode = selection.mode;\n    }\n  }\n  const modifiedArgs = {\n    ...args,\n    scheme,\n    mode\n  };\n  modifiedArgs.mode = (0, _getConfigurationScheme.getConfigurationScheme)({\n    scheme: modifiedArgs.scheme,\n    mode: modifiedArgs.mode\n  }, sourceDir);\n  _cliTools().logger.info(`Found Xcode ${xcodeProject.isWorkspace ? 'workspace' : 'project'} \"${_chalk().default.bold(xcodeProject.name)}\"`);\n  const availableDevices = await (0, _listIOSDevices.default)();\n  if (modifiedArgs.listDevices || modifiedArgs.interactive) {\n    if (modifiedArgs.device || modifiedArgs.udid) {\n      _cliTools().logger.warn(`Both ${modifiedArgs.device ? 'device' : 'udid'} and \"list-devices\" parameters were passed to \"run\" command. We will list available devices and let you choose from one.`);\n    }\n    const selectedDevice = await (0, _prompts.promptForDeviceSelection)(availableDevices);\n    if (!selectedDevice) {\n      throw new (_cliTools().CLIError)(`Failed to select device, please try to run app without ${args.listDevices ? 'list-devices' : 'interactive'} command.`);\n    }\n    if (selectedDevice.type === 'simulator') {\n      return runOnSimulator(xcodeProject, scheme, modifiedArgs, selectedDevice);\n    } else {\n      return runOnDevice(selectedDevice, scheme, xcodeProject, modifiedArgs);\n    }\n  }\n  if (!modifiedArgs.device && !modifiedArgs.udid && !modifiedArgs.simulator) {\n    const bootedDevices = availableDevices.filter(({\n      type,\n      isAvailable\n    }) => type === 'device' && isAvailable);\n    const simulators = (0, _getSimulators.default)();\n    const bootedSimulators = Object.keys(simulators.devices).map(key => simulators.devices[key]).reduce((acc, val) => acc.concat(val), []).filter(({\n      state\n    }) => state === 'Booted');\n    const booted = [...bootedDevices, ...bootedSimulators];\n    if (booted.length === 0) {\n      _cliTools().logger.info('No booted devices or simulators found. Launching first available simulator...');\n      return runOnSimulator(xcodeProject, scheme, modifiedArgs);\n    }\n    _cliTools().logger.info(`Found booted ${booted.map(({\n      name\n    }) => name).join(', ')}`);\n    return runOnBootedDevicesSimulators(scheme, xcodeProject, modifiedArgs, bootedDevices, bootedSimulators);\n  }\n  if (modifiedArgs.device && modifiedArgs.udid) {\n    return _cliTools().logger.error('The `device` and `udid` options are mutually exclusive.');\n  }\n  if (modifiedArgs.udid) {\n    const device = availableDevices.find(d => d.udid === modifiedArgs.udid);\n    if (!device) {\n      return _cliTools().logger.error(`Could not find a device with udid: \"${_chalk().default.bold(modifiedArgs.udid)}\". ${printFoundDevices(availableDevices)}`);\n    }\n    if (device.type === 'simulator') {\n      return runOnSimulator(xcodeProject, scheme, modifiedArgs);\n    } else {\n      return runOnDevice(device, scheme, xcodeProject, modifiedArgs);\n    }\n  } else if (modifiedArgs.device) {\n    const physicalDevices = availableDevices.filter(({\n      type\n    }) => type !== 'simulator');\n    const device = matchingDevice(physicalDevices, modifiedArgs.device);\n    if (device) {\n      return runOnDevice(device, scheme, xcodeProject, modifiedArgs);\n    }\n  } else {\n    runOnSimulator(xcodeProject, scheme, modifiedArgs);\n  }\n}\nasync function runOnBootedDevicesSimulators(scheme, xcodeProject, args, devices, simulators) {\n  for (const device of devices) {\n    await runOnDevice(device, scheme, xcodeProject, args);\n  }\n  for (const simulator of simulators) {\n    await runOnSimulator(xcodeProject, scheme, args, simulator);\n  }\n}\nasync function runOnSimulator(xcodeProject, scheme, args, simulator) {\n  // let selectedSimulator;\n  /**\n   * If provided simulator does not exist, try simulators in following order\n   * - iPhone 14\n   * - iPhone 13\n   * - iPhone 12\n   * - iPhone 11\n   */\n\n  let selectedSimulator;\n  if (simulator) {\n    selectedSimulator = simulator;\n  } else {\n    const fallbackSimulators = ['iPhone 14', 'iPhone 13', 'iPhone 12', 'iPhone 11'];\n    selectedSimulator = (0, _getDestinationSimulator.getDestinationSimulator)(args, fallbackSimulators);\n  }\n  if (!selectedSimulator) {\n    throw new (_cliTools().CLIError)(`No simulator available with ${args.simulator ? `name \"${args.simulator}\"` : `udid \"${args.udid}\"`}`);\n  }\n\n  /**\n   * Booting simulator through `xcrun simctl boot` will boot it in the `headless` mode\n   * (running in the background).\n   *\n   * In order for user to see the app and the simulator itself, we have to make sure\n   * that the Simulator.app is running.\n   *\n   * We also pass it `-CurrentDeviceUDID` so that when we launch it for the first time,\n   * it will not boot the \"default\" device, but the one we set. If the app is already running,\n   * this flag has no effect.\n   */\n  const activeDeveloperDir = _child_process().default.execFileSync('xcode-select', ['-p'], {\n    encoding: 'utf8'\n  }).trim();\n  _child_process().default.execFileSync('open', [`${activeDeveloperDir}/Applications/Simulator.app`, '--args', '-CurrentDeviceUDID', selectedSimulator.udid]);\n  if (!selectedSimulator.booted) {\n    bootSimulator(selectedSimulator);\n  }\n  let buildOutput, appPath;\n  if (!args.binaryPath) {\n    buildOutput = await (0, _buildProject.buildProject)(xcodeProject, selectedSimulator.udid, scheme, args);\n    appPath = getBuildPath(xcodeProject, args.mode || args.configuration, buildOutput, scheme);\n  } else {\n    appPath = args.binaryPath;\n  }\n  _cliTools().logger.info(`Installing \"${_chalk().default.bold(appPath)} on ${selectedSimulator.name}\"`);\n  _child_process().default.spawnSync('xcrun', ['simctl', 'install', selectedSimulator.udid, appPath], {\n    stdio: 'inherit'\n  });\n  const bundleID = _child_process().default.execFileSync('/usr/libexec/PlistBuddy', ['-c', 'Print:CFBundleIdentifier', _path().default.join(appPath, 'Info.plist')], {\n    encoding: 'utf8'\n  }).trim();\n  _cliTools().logger.info(`Launching \"${_chalk().default.bold(bundleID)}\"`);\n  const result = _child_process().default.spawnSync('xcrun', ['simctl', 'launch', selectedSimulator.udid, bundleID]);\n  if (result.status === 0) {\n    _cliTools().logger.success('Successfully launched the app on the simulator');\n  } else {\n    _cliTools().logger.error('Failed to launch the app on simulator', result.stderr.toString());\n  }\n}\nasync function runOnDevice(selectedDevice, scheme, xcodeProject, args) {\n  if (args.binaryPath && selectedDevice.type === 'catalyst') {\n    throw new (_cliTools().CLIError)('binary-path was specified for catalyst device, which is not supported.');\n  }\n  const isIOSDeployInstalled = _child_process().default.spawnSync('ios-deploy', ['--version'], {\n    encoding: 'utf8'\n  });\n  if (isIOSDeployInstalled.error) {\n    throw new (_cliTools().CLIError)(`Failed to install the app on the device because we couldn't execute the \"ios-deploy\" command. Please install it by running \"${_chalk().default.bold('brew install ios-deploy')}\" and try again.`);\n  }\n  if (selectedDevice.type === 'catalyst') {\n    const buildOutput = await (0, _buildProject.buildProject)(xcodeProject, selectedDevice.udid, scheme, args);\n    const appPath = getBuildPath(xcodeProject, args.mode || args.configuration, buildOutput, scheme, true);\n    const appProcess = _child_process().default.spawn(`${appPath}/${scheme}`, [], {\n      detached: true,\n      stdio: 'ignore'\n    });\n    appProcess.unref();\n  } else {\n    let buildOutput, appPath;\n    if (!args.binaryPath) {\n      buildOutput = await (0, _buildProject.buildProject)(xcodeProject, selectedDevice.udid, scheme, args);\n      appPath = getBuildPath(xcodeProject, args.mode || args.configuration, buildOutput, scheme);\n    } else {\n      appPath = args.binaryPath;\n    }\n    const iosDeployInstallArgs = ['--bundle', appPath, '--id', selectedDevice.udid, '--justlaunch'];\n    _cliTools().logger.info(`Installing and launching your app on ${selectedDevice.name}`);\n    const iosDeployOutput = _child_process().default.spawnSync('ios-deploy', iosDeployInstallArgs, {\n      encoding: 'utf8'\n    });\n    if (iosDeployOutput.error) {\n      throw new (_cliTools().CLIError)(`Failed to install the app on the device. We've encountered an error in \"ios-deploy\" command: ${iosDeployOutput.error.message}`);\n    }\n  }\n  return _cliTools().logger.success('Installed the app on the device.');\n}\nfunction bootSimulator(selectedSimulator) {\n  const simulatorFullName = formattedDeviceName(selectedSimulator);\n  _cliTools().logger.info(`Launching ${simulatorFullName}`);\n  _child_process().default.spawnSync('xcrun', ['simctl', 'boot', selectedSimulator.udid]);\n}\nfunction getTargetPaths(buildSettings) {\n  const settings = JSON.parse(buildSettings);\n\n  // Find app in all building settings - look for WRAPPER_EXTENSION: 'app',\n  for (const i in settings) {\n    const wrapperExtension = settings[i].buildSettings.WRAPPER_EXTENSION;\n    if (wrapperExtension === 'app') {\n      return {\n        targetBuildDir: settings[i].buildSettings.TARGET_BUILD_DIR,\n        executableFolderPath: settings[i].buildSettings.EXECUTABLE_FOLDER_PATH\n      };\n    }\n  }\n  return {};\n}\nfunction getBuildPath(xcodeProject, mode, buildOutput, scheme, isCatalyst = false) {\n  const buildSettings = _child_process().default.execFileSync('xcodebuild', [xcodeProject.isWorkspace ? '-workspace' : '-project', xcodeProject.name, '-scheme', scheme, '-sdk', getPlatformName(buildOutput), '-configuration', mode, '-showBuildSettings', '-json'], {\n    encoding: 'utf8'\n  });\n  const {\n    targetBuildDir,\n    executableFolderPath\n  } = getTargetPaths(buildSettings);\n  if (!targetBuildDir) {\n    throw new (_cliTools().CLIError)('Failed to get the target build directory.');\n  }\n  if (!executableFolderPath) {\n    throw new (_cliTools().CLIError)('Failed to get the app name.');\n  }\n  return `${targetBuildDir}${isCatalyst ? '-maccatalyst' : ''}/${executableFolderPath}`;\n}\nfunction getPlatformName(buildOutput) {\n  // Xcode can sometimes escape `=` with a backslash or put the value in quotes\n  const platformNameMatch = /export PLATFORM_NAME\\\\?=\"?(\\w+)\"?$/m.exec(buildOutput);\n  if (!platformNameMatch) {\n    throw new (_cliTools().CLIError)('Couldn\\'t find \"PLATFORM_NAME\" variable in xcodebuild output. Please report this issue and run your project with Xcode instead.');\n  }\n  return platformNameMatch[1];\n}\nfunction matchingDevice(devices, deviceName) {\n  if (deviceName === true) {\n    const firstIOSDevice = devices.find(d => d.type === 'device');\n    if (firstIOSDevice) {\n      _cliTools().logger.info(`Using first available device named \"${_chalk().default.bold(firstIOSDevice.name)}\" due to lack of name supplied.`);\n      return firstIOSDevice;\n    } else {\n      _cliTools().logger.error('No iOS devices connected.');\n      return undefined;\n    }\n  }\n  const deviceByName = devices.find(device => device.name === deviceName || formattedDeviceName(device) === deviceName);\n  if (!deviceByName) {\n    _cliTools().logger.error(`Could not find a device named: \"${_chalk().default.bold(String(deviceName))}\". ${printFoundDevices(devices)}`);\n  }\n  return deviceByName;\n}\nfunction formattedDeviceName(simulator) {\n  return simulator.version ? `${simulator.name} (${simulator.version})` : simulator.name;\n}\nfunction printFoundDevices(devices) {\n  return ['Available devices:', ...devices.map(device => `  - ${device.name} (${device.udid})`)].join('\\n');\n}\nvar _default = {\n  name: 'run-ios',\n  description: 'builds your app and starts it on iOS simulator',\n  func: runIOS,\n  examples: [{\n    desc: 'Run on a different simulator, e.g. iPhone SE (2nd generation)',\n    cmd: 'react-native run-ios --simulator \"iPhone SE (2nd generation)\"'\n  }, {\n    desc: \"Run on a connected device, e.g. Max's iPhone\",\n    cmd: 'react-native run-ios --device \"Max\\'s iPhone\"'\n  }, {\n    desc: 'Run on the AppleTV simulator',\n    cmd: 'react-native run-ios --simulator \"Apple TV\"  --scheme \"helloworld-tvOS\"'\n  }],\n  options: [..._buildIOS.iosBuildOptions, {\n    name: '--no-packager',\n    description: 'Do not launch packager while building'\n  }, {\n    name: '--binary-path <string>',\n    description: 'Path relative to project root where pre-built .app binary lives.'\n  }, {\n    name: '--list-devices',\n    description: 'List all available iOS devices and simulators and let you choose one to run the app. '\n  }, {\n    name: '--interactive',\n    description: 'Explicitly select which scheme and configuration to use before running a build and select device to run the application.'\n  }]\n};\nexports.default = _default;\n\n//# sourceMappingURL=index.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}