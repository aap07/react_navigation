{"ast":null,"code":"'use strict';\n\nvar YAMLSeq = require(\"../nodes/YAMLSeq.js\");\nvar resolveProps = require(\"./resolve-props.js\");\nvar utilFlowIndentCheck = require(\"./util-flow-indent-check.js\");\nfunction resolveBlockSeq(_ref, ctx, bs, onError, tag) {\n  var _tag$nodeClass, _commentEnd;\n  var composeNode = _ref.composeNode,\n    composeEmptyNode = _ref.composeEmptyNode;\n  var NodeClass = (_tag$nodeClass = tag == null ? void 0 : tag.nodeClass) != null ? _tag$nodeClass : YAMLSeq.YAMLSeq;\n  var seq = new NodeClass(ctx.schema);\n  if (ctx.atRoot) ctx.atRoot = false;\n  var offset = bs.offset;\n  var commentEnd = null;\n  for (var _ref2 of bs.items) {\n    var start = _ref2.start;\n    var value = _ref2.value;\n    var props = resolveProps.resolveProps(start, {\n      indicator: 'seq-item-ind',\n      next: value,\n      offset: offset,\n      onError: onError,\n      startOnNewline: true\n    });\n    if (!props.found) {\n      if (props.anchor || props.tag || value) {\n        if (value && value.type === 'block-seq') onError(props.end, 'BAD_INDENT', 'All sequence items must start at the same column');else onError(offset, 'MISSING_CHAR', 'Sequence item without - indicator');\n      } else {\n        commentEnd = props.end;\n        if (props.comment) seq.comment = props.comment;\n        continue;\n      }\n    }\n    var node = value ? composeNode(ctx, value, props, onError) : composeEmptyNode(ctx, props.end, start, null, props, onError);\n    if (ctx.schema.compat) utilFlowIndentCheck.flowIndentCheck(bs.indent, value, onError);\n    offset = node.range[2];\n    seq.items.push(node);\n  }\n  seq.range = [bs.offset, offset, (_commentEnd = commentEnd) != null ? _commentEnd : offset];\n  return seq;\n}\nexports.resolveBlockSeq = resolveBlockSeq;","map":{"version":3,"names":["YAMLSeq","require","resolveProps","utilFlowIndentCheck","resolveBlockSeq","_ref","ctx","bs","onError","tag","_tag$nodeClass","_commentEnd","composeNode","composeEmptyNode","NodeClass","nodeClass","seq","schema","atRoot","offset","commentEnd","_ref2","items","start","value","props","indicator","next","startOnNewline","found","anchor","type","end","comment","node","compat","flowIndentCheck","indent","range","push","exports"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/dist/compose/resolve-block-seq.js"],"sourcesContent":["'use strict';\n\nvar YAMLSeq = require('../nodes/YAMLSeq.js');\nvar resolveProps = require('./resolve-props.js');\nvar utilFlowIndentCheck = require('./util-flow-indent-check.js');\n\nfunction resolveBlockSeq({ composeNode, composeEmptyNode }, ctx, bs, onError, tag) {\n    const NodeClass = tag?.nodeClass ?? YAMLSeq.YAMLSeq;\n    const seq = new NodeClass(ctx.schema);\n    if (ctx.atRoot)\n        ctx.atRoot = false;\n    let offset = bs.offset;\n    let commentEnd = null;\n    for (const { start, value } of bs.items) {\n        const props = resolveProps.resolveProps(start, {\n            indicator: 'seq-item-ind',\n            next: value,\n            offset,\n            onError,\n            startOnNewline: true\n        });\n        if (!props.found) {\n            if (props.anchor || props.tag || value) {\n                if (value && value.type === 'block-seq')\n                    onError(props.end, 'BAD_INDENT', 'All sequence items must start at the same column');\n                else\n                    onError(offset, 'MISSING_CHAR', 'Sequence item without - indicator');\n            }\n            else {\n                commentEnd = props.end;\n                if (props.comment)\n                    seq.comment = props.comment;\n                continue;\n            }\n        }\n        const node = value\n            ? composeNode(ctx, value, props, onError)\n            : composeEmptyNode(ctx, props.end, start, null, props, onError);\n        if (ctx.schema.compat)\n            utilFlowIndentCheck.flowIndentCheck(bs.indent, value, onError);\n        offset = node.range[2];\n        seq.items.push(node);\n    }\n    seq.range = [bs.offset, offset, commentEnd ?? offset];\n    return seq;\n}\n\nexports.resolveBlockSeq = resolveBlockSeq;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,OAAO,GAAGC,OAAO,sBAAsB,CAAC;AAC5C,IAAIC,YAAY,GAAGD,OAAO,qBAAqB,CAAC;AAChD,IAAIE,mBAAmB,GAAGF,OAAO,8BAA8B,CAAC;AAEhE,SAASG,eAAeA,CAAAC,IAAA,EAAoCC,GAAG,EAAEC,EAAE,EAAEC,OAAO,EAAEC,GAAG,EAAE;EAAA,IAAAC,cAAA,EAAAC,WAAA;EAAA,IAAxDC,WAAW,GAAAP,IAAA,CAAXO,WAAW;IAAEC,gBAAgB,GAAAR,IAAA,CAAhBQ,gBAAgB;EACpD,IAAMC,SAAS,IAAAJ,cAAA,GAAGD,GAAG,oBAAHA,GAAG,CAAEM,SAAS,YAAAL,cAAA,GAAIV,OAAO,CAACA,OAAO;EACnD,IAAMgB,GAAG,GAAG,IAAIF,SAAS,CAACR,GAAG,CAACW,MAAM,CAAC;EACrC,IAAIX,GAAG,CAACY,MAAM,EACVZ,GAAG,CAACY,MAAM,GAAG,KAAK;EACtB,IAAIC,MAAM,GAAGZ,EAAE,CAACY,MAAM;EACtB,IAAIC,UAAU,GAAG,IAAI;EACrB,SAAAC,KAAA,IAA+Bd,EAAE,CAACe,KAAK,EAAE;IAAA,IAA5BC,KAAK,GAAAF,KAAA,CAALE,KAAK;IAAA,IAAEC,KAAK,GAAAH,KAAA,CAALG,KAAK;IACrB,IAAMC,KAAK,GAAGvB,YAAY,CAACA,YAAY,CAACqB,KAAK,EAAE;MAC3CG,SAAS,EAAE,cAAc;MACzBC,IAAI,EAAEH,KAAK;MACXL,MAAM,EAANA,MAAM;MACNX,OAAO,EAAPA,OAAO;MACPoB,cAAc,EAAE;IACpB,CAAC,CAAC;IACF,IAAI,CAACH,KAAK,CAACI,KAAK,EAAE;MACd,IAAIJ,KAAK,CAACK,MAAM,IAAIL,KAAK,CAAChB,GAAG,IAAIe,KAAK,EAAE;QACpC,IAAIA,KAAK,IAAIA,KAAK,CAACO,IAAI,KAAK,WAAW,EACnCvB,OAAO,CAACiB,KAAK,CAACO,GAAG,EAAE,YAAY,EAAE,kDAAkD,CAAC,CAAC,KAErFxB,OAAO,CAACW,MAAM,EAAE,cAAc,EAAE,mCAAmC,CAAC;MAC5E,CAAC,MACI;QACDC,UAAU,GAAGK,KAAK,CAACO,GAAG;QACtB,IAAIP,KAAK,CAACQ,OAAO,EACbjB,GAAG,CAACiB,OAAO,GAAGR,KAAK,CAACQ,OAAO;QAC/B;MACJ;IACJ;IACA,IAAMC,IAAI,GAAGV,KAAK,GACZZ,WAAW,CAACN,GAAG,EAAEkB,KAAK,EAAEC,KAAK,EAAEjB,OAAO,CAAC,GACvCK,gBAAgB,CAACP,GAAG,EAAEmB,KAAK,CAACO,GAAG,EAAET,KAAK,EAAE,IAAI,EAAEE,KAAK,EAAEjB,OAAO,CAAC;IACnE,IAAIF,GAAG,CAACW,MAAM,CAACkB,MAAM,EACjBhC,mBAAmB,CAACiC,eAAe,CAAC7B,EAAE,CAAC8B,MAAM,EAAEb,KAAK,EAAEhB,OAAO,CAAC;IAClEW,MAAM,GAAGe,IAAI,CAACI,KAAK,CAAC,CAAC,CAAC;IACtBtB,GAAG,CAACM,KAAK,CAACiB,IAAI,CAACL,IAAI,CAAC;EACxB;EACAlB,GAAG,CAACsB,KAAK,GAAG,CAAC/B,EAAE,CAACY,MAAM,EAAEA,MAAM,GAAAR,WAAA,GAAES,UAAU,YAAAT,WAAA,GAAIQ,MAAM,CAAC;EACrD,OAAOH,GAAG;AACd;AAEAwB,OAAO,CAACpC,eAAe,GAAGA,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}