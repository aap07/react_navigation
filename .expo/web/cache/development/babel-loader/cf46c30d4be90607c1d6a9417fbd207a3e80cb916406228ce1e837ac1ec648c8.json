{"ast":null,"code":"import { isNewWebImplementationEnabled } from \"./EnableNewWebImplementation\";\nimport InteractionManager from \"./web/tools/InteractionManager\";\nimport NodeManager from \"./web/tools/NodeManager\";\nimport PanGestureHandler from \"./web/handlers/PanGestureHandler\";\nimport TapGestureHandler from \"./web/handlers/TapGestureHandler\";\nimport LongPressGestureHandler from \"./web/handlers/LongPressGestureHandler\";\nimport PinchGestureHandler from \"./web/handlers/PinchGestureHandler\";\nimport RotationGestureHandler from \"./web/handlers/RotationGestureHandler\";\nimport FlingGestureHandler from \"./web/handlers/FlingGestureHandler\";\nimport NativeViewGestureHandler from \"./web/handlers/NativeViewGestureHandler\";\nimport ManualGestureHandler from \"./web/handlers/ManualGestureHandler\";\nimport * as HammerNodeManager from \"./web_hammer/NodeManager\";\nimport HammerNativeViewGestureHandler from \"./web_hammer/NativeViewGestureHandler\";\nimport HammerPanGestureHandler from \"./web_hammer/PanGestureHandler\";\nimport HammerTapGestureHandler from \"./web_hammer/TapGestureHandler\";\nimport HammerLongPressGestureHandler from \"./web_hammer/LongPressGestureHandler\";\nimport HammerPinchGestureHandler from \"./web_hammer/PinchGestureHandler\";\nimport HammerRotationGestureHandler from \"./web_hammer/RotationGestureHandler\";\nimport HammerFlingGestureHandler from \"./web_hammer/FlingGestureHandler\";\nexport var Gestures = {\n  NativeViewGestureHandler: NativeViewGestureHandler,\n  PanGestureHandler: PanGestureHandler,\n  TapGestureHandler: TapGestureHandler,\n  LongPressGestureHandler: LongPressGestureHandler,\n  PinchGestureHandler: PinchGestureHandler,\n  RotationGestureHandler: RotationGestureHandler,\n  FlingGestureHandler: FlingGestureHandler,\n  ManualGestureHandler: ManualGestureHandler\n};\nexport var HammerGestures = {\n  NativeViewGestureHandler: HammerNativeViewGestureHandler,\n  PanGestureHandler: HammerPanGestureHandler,\n  TapGestureHandler: HammerTapGestureHandler,\n  LongPressGestureHandler: HammerLongPressGestureHandler,\n  PinchGestureHandler: HammerPinchGestureHandler,\n  RotationGestureHandler: HammerRotationGestureHandler,\n  FlingGestureHandler: HammerFlingGestureHandler\n};\nexport default {\n  handleSetJSResponder: function handleSetJSResponder(_tag, _blockNativeResponder) {},\n  handleClearJSResponder: function handleClearJSResponder() {},\n  createGestureHandler: function createGestureHandler(handlerName, handlerTag, config) {\n    if (isNewWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(`react-native-gesture-handler: ${handlerName} is not supported on web.`);\n      }\n      var GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(handlerTag, new GestureClass());\n      InteractionManager.getInstance().configureInteractions(NodeManager.getHandler(handlerTag), config);\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(`react-native-gesture-handler: ${handlerName} is not supported on web.`);\n      }\n      var _GestureClass = HammerGestures[handlerName];\n      HammerNodeManager.createGestureHandler(handlerTag, new _GestureClass());\n    }\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler: function attachGestureHandler(handlerTag, newView, _actionType, propsRef) {\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler: function updateGestureHandler(handlerTag, newConfig) {\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n      InteractionManager.getInstance().configureInteractions(NodeManager.getHandler(handlerTag), newConfig);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode: function getGestureHandlerNode(handlerTag) {\n    if (isNewWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler: function dropGestureHandler(handlerTag) {\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  flushOperations: function flushOperations() {}\n};","map":{"version":3,"names":["isNewWebImplementationEnabled","InteractionManager","NodeManager","PanGestureHandler","TapGestureHandler","LongPressGestureHandler","PinchGestureHandler","RotationGestureHandler","FlingGestureHandler","NativeViewGestureHandler","ManualGestureHandler","HammerNodeManager","HammerNativeViewGestureHandler","HammerPanGestureHandler","HammerTapGestureHandler","HammerLongPressGestureHandler","HammerPinchGestureHandler","HammerRotationGestureHandler","HammerFlingGestureHandler","Gestures","HammerGestures","handleSetJSResponder","_tag","_blockNativeResponder","handleClearJSResponder","createGestureHandler","handlerName","handlerTag","config","Error","GestureClass","getInstance","configureInteractions","getHandler","updateGestureHandler","attachGestureHandler","newView","_actionType","propsRef","init","setView","newConfig","updateGestureConfig","getGestureHandlerNode","dropGestureHandler","flushOperations"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\react-native-gesture-handler\\lib\\module\\RNGestureHandlerModule.macos.ts"],"sourcesContent":["import { ActionType } from './ActionType';\nimport { isNewWebImplementationEnabled } from './EnableNewWebImplementation';\n\n//GestureHandlers\nimport InteractionManager from './web/tools/InteractionManager';\nimport NodeManager from './web/tools/NodeManager';\nimport PanGestureHandler from './web/handlers/PanGestureHandler';\nimport TapGestureHandler from './web/handlers/TapGestureHandler';\nimport LongPressGestureHandler from './web/handlers/LongPressGestureHandler';\nimport PinchGestureHandler from './web/handlers/PinchGestureHandler';\nimport RotationGestureHandler from './web/handlers/RotationGestureHandler';\nimport FlingGestureHandler from './web/handlers/FlingGestureHandler';\nimport NativeViewGestureHandler from './web/handlers/NativeViewGestureHandler';\nimport ManualGestureHandler from './web/handlers/ManualGestureHandler';\n\n//Hammer Handlers\nimport * as HammerNodeManager from './web_hammer/NodeManager';\nimport HammerNativeViewGestureHandler from './web_hammer/NativeViewGestureHandler';\nimport HammerPanGestureHandler from './web_hammer/PanGestureHandler';\nimport HammerTapGestureHandler from './web_hammer/TapGestureHandler';\nimport HammerLongPressGestureHandler from './web_hammer/LongPressGestureHandler';\nimport HammerPinchGestureHandler from './web_hammer/PinchGestureHandler';\nimport HammerRotationGestureHandler from './web_hammer/RotationGestureHandler';\nimport HammerFlingGestureHandler from './web_hammer/FlingGestureHandler';\nimport { Config } from './web/interfaces';\n\nexport const Gestures = {\n  NativeViewGestureHandler,\n  PanGestureHandler,\n  TapGestureHandler,\n  LongPressGestureHandler,\n  PinchGestureHandler,\n  RotationGestureHandler,\n  FlingGestureHandler,\n  ManualGestureHandler,\n};\n\nexport const HammerGestures = {\n  NativeViewGestureHandler: HammerNativeViewGestureHandler,\n  PanGestureHandler: HammerPanGestureHandler,\n  TapGestureHandler: HammerTapGestureHandler,\n  LongPressGestureHandler: HammerLongPressGestureHandler,\n  PinchGestureHandler: HammerPinchGestureHandler,\n  RotationGestureHandler: HammerRotationGestureHandler,\n  FlingGestureHandler: HammerFlingGestureHandler,\n};\n\nexport default {\n  handleSetJSResponder(_tag: number, _blockNativeResponder: boolean) {\n    // NO-OP\n  },\n  handleClearJSResponder() {\n    // NO-OP\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    if (isNewWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      const GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(handlerTag, new GestureClass());\n      InteractionManager.getInstance().configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        config as unknown as Config\n      );\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      // @ts-ignore If it doesn't exist, the error is thrown\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const GestureClass = HammerGestures[handlerName];\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      HammerNodeManager.createGestureHandler(handlerTag, new GestureClass());\n    }\n\n    this.updateGestureHandler(handlerTag, config as unknown as Config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    newView: number,\n    _actionType: ActionType,\n    propsRef: React.RefObject<unknown>\n  ) {\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler(handlerTag: number, newConfig: Config) {\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n\n      InteractionManager.getInstance().configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        newConfig\n      );\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    if (isNewWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler(handlerTag: number) {\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  flushOperations() {},\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}