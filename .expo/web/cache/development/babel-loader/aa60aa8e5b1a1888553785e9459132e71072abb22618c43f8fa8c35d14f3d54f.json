{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _handlersDefaultEvent;\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fireGestureHandler = fireGestureHandler;\nexports.getByGestureTestId = getByGestureTestId;\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\nvar _reactNative = require(\"react-native-web/dist/index\");\nvar _FlingGestureHandler = require(\"../handlers/FlingGestureHandler\");\nvar _ForceTouchGestureHandler = require(\"../handlers/ForceTouchGestureHandler\");\nvar _gesture = require(\"../handlers/gestures/gesture\");\nvar _handlersRegistry = require(\"../handlers/handlersRegistry\");\nvar _LongPressGestureHandler = require(\"../handlers/LongPressGestureHandler\");\nvar _NativeViewGestureHandler = require(\"../handlers/NativeViewGestureHandler\");\nvar _PanGestureHandler = require(\"../handlers/PanGestureHandler\");\nvar _PinchGestureHandler = require(\"../handlers/PinchGestureHandler\");\nvar _RotationGestureHandler = require(\"../handlers/RotationGestureHandler\");\nvar _TapGestureHandler = require(\"../handlers/TapGestureHandler\");\nvar _State = require(\"../State\");\nvar _utils = require(\"../utils\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar fireEvent = function fireEvent(_element, _name) {};\ntry {\n  fireEvent = require('@testing-library/react-native').fireEvent;\n} catch (_e) {}\nvar handlersDefaultEvents = (_handlersDefaultEvent = {}, _defineProperty(_handlersDefaultEvent, _FlingGestureHandler.flingHandlerName, {\n  x: 0,\n  y: 0,\n  absoluteX: 0,\n  absoluteY: 0,\n  numberOfPointers: 1\n}), _defineProperty(_handlersDefaultEvent, _ForceTouchGestureHandler.forceTouchHandlerName, {\n  x: 0,\n  y: 0,\n  absoluteX: 0,\n  absoluteY: 0,\n  force: 1,\n  numberOfPointers: 1\n}), _defineProperty(_handlersDefaultEvent, _LongPressGestureHandler.longPressHandlerName, {\n  x: 0,\n  y: 0,\n  absoluteX: 0,\n  absoluteY: 0,\n  duration: 100,\n  numberOfPointers: 1\n}), _defineProperty(_handlersDefaultEvent, _NativeViewGestureHandler.nativeViewHandlerName, {\n  pointerInside: true,\n  numberOfPointers: 1\n}), _defineProperty(_handlersDefaultEvent, _PanGestureHandler.panHandlerName, {\n  x: 0,\n  y: 0,\n  absoluteX: 0,\n  absoluteY: 0,\n  translationX: 100,\n  translationY: 0,\n  velocityX: 3,\n  velocityY: 0,\n  numberOfPointers: 1\n}), _defineProperty(_handlersDefaultEvent, _PinchGestureHandler.pinchHandlerName, {\n  focalX: 0,\n  focalY: 0,\n  scale: 2,\n  velocity: 1,\n  numberOfPointers: 2\n}), _defineProperty(_handlersDefaultEvent, _RotationGestureHandler.rotationHandlerName, {\n  anchorX: 0,\n  anchorY: 0,\n  rotation: 3.14,\n  velocity: 2,\n  numberOfPointers: 2\n}), _defineProperty(_handlersDefaultEvent, _TapGestureHandler.tapHandlerName, {\n  x: 0,\n  y: 0,\n  absoluteX: 0,\n  absoluteY: 0,\n  numberOfPointers: 1\n}), _handlersDefaultEvent);\nfunction isGesture(componentOrGesture) {\n  return componentOrGesture instanceof _gesture.BaseGesture;\n}\nfunction wrapWithNativeEvent(event) {\n  return {\n    nativeEvent: event\n  };\n}\nfunction fillOldStateChanges(previousEvent, currentEvent) {\n  var isFirstEvent = previousEvent === null;\n  if (isFirstEvent) {\n    return _objectSpread({\n      oldState: _State.State.UNDETERMINED\n    }, currentEvent);\n  }\n  var isGestureStateEvent = previousEvent.state !== currentEvent.state;\n  if (isGestureStateEvent) {\n    return _objectSpread({\n      oldState: previousEvent === null || previousEvent === void 0 ? void 0 : previousEvent.state\n    }, currentEvent);\n  } else {\n    return currentEvent;\n  }\n}\nfunction validateStateTransitions(previousEvent, currentEvent) {\n  function stringify(event) {\n    return JSON.stringify(event, null, 2);\n  }\n  function errorMsgWithBothEvents(description) {\n    return `${description}, invalid event: ${stringify(currentEvent)}, previous event: ${stringify(previousEvent)}`;\n  }\n  function errorMsgWithCurrentEvent(description) {\n    return `${description}, invalid event: ${stringify(currentEvent)}`;\n  }\n  (0, _invariant.default)((0, _utils.hasProperty)(currentEvent, 'state'), errorMsgWithCurrentEvent('every event must have state'));\n  var isFirstEvent = previousEvent === null;\n  if (isFirstEvent) {\n    (0, _invariant.default)(currentEvent.state === _State.State.BEGAN, errorMsgWithCurrentEvent('first event must have BEGAN state'));\n  }\n  if (previousEvent !== null) {\n    if (previousEvent.state !== currentEvent.state) {\n      (0, _invariant.default)((0, _utils.hasProperty)(currentEvent, 'oldState'), errorMsgWithCurrentEvent('when state changes, oldState field should be present'));\n      (0, _invariant.default)(currentEvent.oldState === previousEvent.state, errorMsgWithBothEvents(\"when state changes, oldState should be the same as previous event' state\"));\n    }\n  }\n  return currentEvent;\n}\nfunction fillMissingDefaultsFor(_ref) {\n  var handlerType = _ref.handlerType,\n    handlerTag = _ref.handlerTag;\n  return function (event) {\n    return _objectSpread(_objectSpread(_objectSpread({}, handlersDefaultEvents[handlerType]), event), {}, {\n      handlerTag: handlerTag\n    });\n  };\n}\nfunction isDiscreteHandler(handlerType) {\n  return handlerType === 'TapGestureHandler' || handlerType === 'LongPressGestureHandler';\n}\nfunction fillMissingStatesTransitions(events, isDiscreteHandler) {\n  var _events2, _events$;\n  var _events = _toConsumableArray(events);\n  var lastEvent = (_events2 = _events[_events.length - 1]) !== null && _events2 !== void 0 ? _events2 : null;\n  var firstEvent = (_events$ = _events[0]) !== null && _events$ !== void 0 ? _events$ : null;\n  var shouldDuplicateFirstEvent = !isDiscreteHandler && !hasState(_State.State.BEGAN)(firstEvent);\n  if (shouldDuplicateFirstEvent) {\n    var duplicated = _objectSpread(_objectSpread({}, firstEvent), {}, {\n      state: _State.State.BEGAN\n    });\n    delete duplicated.oldState;\n    _events.unshift(duplicated);\n  }\n  var shouldDuplicateLastEvent = !hasState(_State.State.END)(lastEvent) || !hasState(_State.State.FAILED)(lastEvent) || !hasState(_State.State.CANCELLED)(lastEvent);\n  if (shouldDuplicateLastEvent) {\n    var _duplicated = _objectSpread(_objectSpread({}, lastEvent), {}, {\n      state: _State.State.END\n    });\n    delete _duplicated.oldState;\n    _events.push(_duplicated);\n  }\n  function isWithoutState(event) {\n    return event !== null && !(0, _utils.hasProperty)(event, 'state');\n  }\n  function hasState(state) {\n    return function (event) {\n      return event !== null && event.state === state;\n    };\n  }\n  function noEventsLeft(event) {\n    return event === null;\n  }\n  function trueFn() {\n    return true;\n  }\n  function fillEventsForCurrentState(_ref2) {\n    var _ref2$shouldConsumeEv = _ref2.shouldConsumeEvent,\n      shouldConsumeEvent = _ref2$shouldConsumeEv === void 0 ? trueFn : _ref2$shouldConsumeEv,\n      _ref2$shouldTransitio = _ref2.shouldTransitionToNextState,\n      shouldTransitionToNextState = _ref2$shouldTransitio === void 0 ? trueFn : _ref2$shouldTransitio;\n    function peekCurrentEvent() {\n      var _events$2;\n      return (_events$2 = _events[0]) !== null && _events$2 !== void 0 ? _events$2 : null;\n    }\n    function peekNextEvent() {\n      var _events$3;\n      return (_events$3 = _events[1]) !== null && _events$3 !== void 0 ? _events$3 : null;\n    }\n    function consumeCurrentEvent() {\n      _events.shift();\n    }\n    var currentEvent = peekCurrentEvent();\n    var nextEvent = peekNextEvent();\n    var currentRequiredState = REQUIRED_EVENTS[currentStateIdx];\n    var eventData = {};\n    var shouldUseEvent = shouldConsumeEvent(currentEvent);\n    if (shouldUseEvent) {\n      eventData = currentEvent;\n      consumeCurrentEvent();\n    }\n    transformedEvents.push(_objectSpread({\n      state: currentRequiredState\n    }, eventData));\n    if (shouldTransitionToNextState(nextEvent)) {\n      currentStateIdx++;\n    }\n  }\n  var REQUIRED_EVENTS = [_State.State.BEGAN, _State.State.ACTIVE, _State.State.END];\n  var currentStateIdx = 0;\n  var transformedEvents = [];\n  var hasAllStates;\n  var iterations = 0;\n  do {\n    var nextRequiredState = REQUIRED_EVENTS[currentStateIdx];\n    if (nextRequiredState === _State.State.BEGAN) {\n      fillEventsForCurrentState({\n        shouldConsumeEvent: function shouldConsumeEvent(e) {\n          return isWithoutState(e) || hasState(_State.State.BEGAN)(e);\n        }\n      });\n    } else if (nextRequiredState === _State.State.ACTIVE) {\n      var shouldConsumeEvent = function shouldConsumeEvent(e) {\n        return isWithoutState(e) || hasState(_State.State.ACTIVE)(e);\n      };\n      var shouldTransitionToNextState = function shouldTransitionToNextState(nextEvent) {\n        return noEventsLeft(nextEvent) || hasState(_State.State.END)(nextEvent) || hasState(_State.State.FAILED)(nextEvent) || hasState(_State.State.CANCELLED)(nextEvent);\n      };\n      fillEventsForCurrentState({\n        shouldConsumeEvent: shouldConsumeEvent,\n        shouldTransitionToNextState: shouldTransitionToNextState\n      });\n    } else if (nextRequiredState === _State.State.END) {\n      fillEventsForCurrentState({});\n    }\n    hasAllStates = currentStateIdx === REQUIRED_EVENTS.length;\n    (0, _invariant.default)(iterations++ <= 500, 'exceeded max number of iterations, please report a bug in RNGH repository with your test case');\n  } while (!hasAllStates);\n  return transformedEvents;\n}\nfunction getHandlerData(componentOrGesture) {\n  if (isGesture(componentOrGesture)) {\n    var gesture = componentOrGesture;\n    return {\n      emitEvent: function emitEvent(eventName, args) {\n        _reactNative.DeviceEventEmitter.emit(eventName, args.nativeEvent);\n      },\n      handlerType: gesture.handlerName,\n      handlerTag: gesture.handlerTag\n    };\n  }\n  var gestureHandlerComponent = componentOrGesture;\n  return {\n    emitEvent: function emitEvent(eventName, args) {\n      fireEvent(gestureHandlerComponent, eventName, args);\n    },\n    handlerType: gestureHandlerComponent.props.handlerType,\n    handlerTag: gestureHandlerComponent.props.handlerTag\n  };\n}\nfunction fireGestureHandler(componentOrGesture) {\n  var eventList = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var _getHandlerData = getHandlerData(componentOrGesture),\n    emitEvent = _getHandlerData.emitEvent,\n    handlerType = _getHandlerData.handlerType,\n    handlerTag = _getHandlerData.handlerTag;\n  var _ = fillMissingStatesTransitions(eventList, isDiscreteHandler(handlerType));\n  _ = _.map(fillMissingDefaultsFor({\n    handlerTag: handlerTag,\n    handlerType: handlerType\n  }));\n  _ = (0, _utils.withPrevAndCurrent)(_, fillOldStateChanges);\n  _ = (0, _utils.withPrevAndCurrent)(_, validateStateTransitions);\n  _ = _.map(wrapWithNativeEvent);\n  var events = _;\n  var firstEvent = events.shift();\n  emitEvent('onGestureHandlerStateChange', firstEvent);\n  var lastSentEvent = firstEvent;\n  for (var event of events) {\n    var hasChangedState = lastSentEvent.nativeEvent.state !== event.nativeEvent.state;\n    if (hasChangedState) {\n      emitEvent('onGestureHandlerStateChange', event);\n    } else {\n      emitEvent('onGestureHandlerEvent', event);\n    }\n    lastSentEvent = event;\n  }\n}\nfunction getByGestureTestId(testID) {\n  var handler = (0, _handlersRegistry.findHandlerByTestID)(testID);\n  if (handler === null) {\n    throw new Error(`Handler with id: '${testID}' cannot be found`);\n  }\n  return handler;\n}","map":{"version":3,"names":["_invariant","_interopRequireDefault","require","_reactNative","_FlingGestureHandler","_ForceTouchGestureHandler","_gesture","_handlersRegistry","_LongPressGestureHandler","_NativeViewGestureHandler","_PanGestureHandler","_PinchGestureHandler","_RotationGestureHandler","_TapGestureHandler","_State","_utils","fireEvent","_element","_name","_e","handlersDefaultEvents","_handlersDefaultEvent","_defineProperty","flingHandlerName","x","y","absoluteX","absoluteY","numberOfPointers","forceTouchHandlerName","force","longPressHandlerName","duration","nativeViewHandlerName","pointerInside","panHandlerName","translationX","translationY","velocityX","velocityY","pinchHandlerName","focalX","focalY","scale","velocity","rotationHandlerName","anchorX","anchorY","rotation","tapHandlerName","isGesture","componentOrGesture","BaseGesture","wrapWithNativeEvent","event","nativeEvent","fillOldStateChanges","previousEvent","currentEvent","isFirstEvent","_objectSpread","oldState","State","UNDETERMINED","isGestureStateEvent","state","validateStateTransitions","stringify","JSON","errorMsgWithBothEvents","description","errorMsgWithCurrentEvent","default","hasProperty","BEGAN","fillMissingDefaultsFor","_ref","handlerType","handlerTag","isDiscreteHandler","fillMissingStatesTransitions","events","_events2","_events$","_events","_toConsumableArray","lastEvent","length","firstEvent","shouldDuplicateFirstEvent","hasState","duplicated","unshift","shouldDuplicateLastEvent","END","FAILED","CANCELLED","push","isWithoutState","noEventsLeft","trueFn","fillEventsForCurrentState","_ref2","_ref2$shouldConsumeEv","shouldConsumeEvent","_ref2$shouldTransitio","shouldTransitionToNextState","peekCurrentEvent","_events$2","peekNextEvent","_events$3","consumeCurrentEvent","shift","nextEvent","currentRequiredState","REQUIRED_EVENTS","currentStateIdx","eventData","shouldUseEvent","transformedEvents","ACTIVE","hasAllStates","iterations","nextRequiredState","e","getHandlerData","gesture","emitEvent","eventName","args","DeviceEventEmitter","emit","handlerName","gestureHandlerComponent","props","fireGestureHandler","eventList","arguments","undefined","_getHandlerData","_","map","withPrevAndCurrent","lastSentEvent","hasChangedState","getByGestureTestId","testID","handler","findHandlerByTestID","Error"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\react-native-gesture-handler\\lib\\commonjs\\jestUtils\\jestUtils.ts"],"sourcesContent":["import invariant from 'invariant';\nimport { DeviceEventEmitter } from 'react-native';\nimport { ReactTestInstance } from 'react-test-renderer';\nimport {\n  FlingGestureHandler,\n  FlingGestureHandlerEventPayload,\n  flingHandlerName,\n} from '../handlers/FlingGestureHandler';\nimport {\n  ForceTouchGestureHandler,\n  ForceTouchGestureHandlerEventPayload,\n  forceTouchHandlerName,\n} from '../handlers/ForceTouchGestureHandler';\nimport {\n  BaseGestureHandlerProps,\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../handlers/gestureHandlerCommon';\nimport { FlingGesture } from '../handlers/gestures/flingGesture';\nimport { ForceTouchGesture } from '../handlers/gestures/forceTouchGesture';\nimport { BaseGesture, GestureType } from '../handlers/gestures/gesture';\nimport { LongPressGesture } from '../handlers/gestures/longPressGesture';\nimport { NativeGesture } from '../handlers/gestures/nativeGesture';\nimport { PanGesture } from '../handlers/gestures/panGesture';\nimport { PinchGesture } from '../handlers/gestures/pinchGesture';\nimport { RotationGesture } from '../handlers/gestures/rotationGesture';\nimport { TapGesture } from '../handlers/gestures/tapGesture';\nimport { findHandlerByTestID } from '../handlers/handlersRegistry';\nimport {\n  LongPressGestureHandler,\n  LongPressGestureHandlerEventPayload,\n  longPressHandlerName,\n} from '../handlers/LongPressGestureHandler';\nimport {\n  NativeViewGestureHandler,\n  NativeViewGestureHandlerPayload,\n  nativeViewHandlerName,\n} from '../handlers/NativeViewGestureHandler';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerEventPayload,\n  panHandlerName,\n} from '../handlers/PanGestureHandler';\nimport {\n  PinchGestureHandler,\n  PinchGestureHandlerEventPayload,\n  pinchHandlerName,\n} from '../handlers/PinchGestureHandler';\nimport {\n  RotationGestureHandler,\n  RotationGestureHandlerEventPayload,\n  rotationHandlerName,\n} from '../handlers/RotationGestureHandler';\nimport {\n  TapGestureHandler,\n  TapGestureHandlerEventPayload,\n  tapHandlerName,\n} from '../handlers/TapGestureHandler';\nimport { State } from '../State';\nimport { hasProperty, withPrevAndCurrent } from '../utils';\n\n// load fireEvent conditionally, so RNGH may be used in setups without testing-library\nlet fireEvent = (\n  _element: ReactTestInstance,\n  _name: string,\n  ..._data: any[]\n) => {\n  // NOOP\n};\n\ntry {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  fireEvent = require('@testing-library/react-native').fireEvent;\n} catch (_e) {\n  // do nothing if not available\n}\n\ntype GestureHandlerTestEvent<\n  TEventPayload extends Record<string, unknown> = Record<string, unknown>\n> = (\n  | GestureEvent<TEventPayload>\n  | HandlerStateChangeEvent<TEventPayload>\n)['nativeEvent'];\n\ntype HandlerNames = keyof DefaultEventsMapping;\n\ntype WithNumberOfPointers<T> = {\n  [P in keyof T]: T[P] & { numberOfPointers: number };\n};\ntype DefaultEventsMapping = WithNumberOfPointers<{\n  [flingHandlerName]: FlingGestureHandlerEventPayload;\n  [forceTouchHandlerName]: ForceTouchGestureHandlerEventPayload;\n  [longPressHandlerName]: LongPressGestureHandlerEventPayload;\n  [nativeViewHandlerName]: NativeViewGestureHandlerPayload;\n  [panHandlerName]: PanGestureHandlerEventPayload;\n  [pinchHandlerName]: PinchGestureHandlerEventPayload;\n  [rotationHandlerName]: RotationGestureHandlerEventPayload;\n  [tapHandlerName]: TapGestureHandlerEventPayload;\n}>;\n\nconst handlersDefaultEvents: DefaultEventsMapping = {\n  [flingHandlerName]: {\n    x: 0,\n    y: 0,\n    absoluteX: 0,\n    absoluteY: 0,\n    numberOfPointers: 1,\n  },\n  [forceTouchHandlerName]: {\n    x: 0,\n    y: 0,\n    absoluteX: 0,\n    absoluteY: 0,\n    force: 1,\n    numberOfPointers: 1,\n  },\n  [longPressHandlerName]: {\n    x: 0,\n    y: 0,\n    absoluteX: 0,\n    absoluteY: 0,\n    duration: 100,\n    numberOfPointers: 1,\n  },\n  [nativeViewHandlerName]: {\n    pointerInside: true,\n    numberOfPointers: 1,\n  },\n  [panHandlerName]: {\n    x: 0,\n    y: 0,\n    absoluteX: 0,\n    absoluteY: 0,\n    translationX: 100,\n    translationY: 0,\n    velocityX: 3,\n    velocityY: 0,\n    numberOfPointers: 1,\n  },\n  [pinchHandlerName]: {\n    focalX: 0,\n    focalY: 0,\n    scale: 2,\n    velocity: 1,\n    numberOfPointers: 2,\n  },\n  [rotationHandlerName]: {\n    anchorX: 0,\n    anchorY: 0,\n    rotation: 3.14,\n    velocity: 2,\n    numberOfPointers: 2,\n  },\n  [tapHandlerName]: {\n    x: 0,\n    y: 0,\n    absoluteX: 0,\n    absoluteY: 0,\n    numberOfPointers: 1,\n  },\n};\n\nfunction isGesture(\n  componentOrGesture: ReactTestInstance | GestureType\n): componentOrGesture is GestureType {\n  return componentOrGesture instanceof BaseGesture;\n}\n\ninterface WrappedGestureHandlerTestEvent {\n  nativeEvent: GestureHandlerTestEvent;\n}\nfunction wrapWithNativeEvent(\n  event: GestureHandlerTestEvent\n): WrappedGestureHandlerTestEvent {\n  return { nativeEvent: event };\n}\n\nfunction fillOldStateChanges(\n  previousEvent: GestureHandlerTestEvent | null,\n  currentEvent: Omit<GestureHandlerTestEvent, 'oldState'>\n): GestureHandlerTestEvent {\n  const isFirstEvent = previousEvent === null;\n  if (isFirstEvent) {\n    return {\n      oldState: State.UNDETERMINED,\n      ...currentEvent,\n    } as GestureHandlerTestEvent;\n  }\n\n  const isGestureStateEvent = previousEvent.state !== currentEvent.state;\n  if (isGestureStateEvent) {\n    return {\n      oldState: previousEvent?.state,\n      ...currentEvent,\n    } as GestureHandlerTestEvent;\n  } else {\n    return currentEvent as GestureHandlerTestEvent;\n  }\n}\n\ntype EventWithStates = Partial<\n  Pick<GestureHandlerTestEvent, 'oldState' | 'state'>\n>;\nfunction validateStateTransitions(\n  previousEvent: EventWithStates | null,\n  currentEvent: EventWithStates\n) {\n  function stringify(event: Record<string, unknown> | null) {\n    return JSON.stringify(event, null, 2);\n  }\n  function errorMsgWithBothEvents(description: string) {\n    return `${description}, invalid event: ${stringify(\n      currentEvent\n    )}, previous event: ${stringify(previousEvent)}`;\n  }\n\n  function errorMsgWithCurrentEvent(description: string) {\n    return `${description}, invalid event: ${stringify(currentEvent)}`;\n  }\n\n  invariant(\n    hasProperty(currentEvent, 'state'),\n    errorMsgWithCurrentEvent('every event must have state')\n  );\n\n  const isFirstEvent = previousEvent === null;\n  if (isFirstEvent) {\n    invariant(\n      currentEvent.state === State.BEGAN,\n      errorMsgWithCurrentEvent('first event must have BEGAN state')\n    );\n  }\n\n  if (previousEvent !== null) {\n    if (previousEvent.state !== currentEvent.state) {\n      invariant(\n        hasProperty(currentEvent, 'oldState'),\n        errorMsgWithCurrentEvent(\n          'when state changes, oldState field should be present'\n        )\n      );\n      invariant(\n        currentEvent.oldState === previousEvent.state,\n        errorMsgWithBothEvents(\n          \"when state changes, oldState should be the same as previous event' state\"\n        )\n      );\n    }\n  }\n\n  return currentEvent;\n}\n\ntype EventWithoutStates = Omit<GestureHandlerTestEvent, 'oldState' | 'state'>;\ninterface HandlerInfo {\n  handlerType: HandlerNames;\n  handlerTag: number;\n}\nfunction fillMissingDefaultsFor({\n  handlerType,\n  handlerTag,\n}: HandlerInfo): (\n  event: Partial<GestureHandlerTestEvent>\n) => EventWithoutStates {\n  return (event) => {\n    return {\n      ...handlersDefaultEvents[handlerType],\n      ...event,\n      handlerTag,\n    };\n  };\n}\n\nfunction isDiscreteHandler(handlerType: HandlerNames) {\n  return (\n    handlerType === 'TapGestureHandler' ||\n    handlerType === 'LongPressGestureHandler'\n  );\n}\n\nfunction fillMissingStatesTransitions(\n  events: EventWithoutStates[],\n  isDiscreteHandler: boolean\n): EventWithoutStates[] {\n  type Event = EventWithoutStates | null;\n  const _events = [...events];\n  const lastEvent = _events[_events.length - 1] ?? null;\n  const firstEvent = _events[0] ?? null;\n\n  const shouldDuplicateFirstEvent =\n    !isDiscreteHandler && !hasState(State.BEGAN)(firstEvent);\n  if (shouldDuplicateFirstEvent) {\n    const duplicated = { ...firstEvent, state: State.BEGAN };\n    // @ts-ignore badly typed, property may exist and we don't want to copy it\n    delete duplicated.oldState;\n    _events.unshift(duplicated);\n  }\n\n  const shouldDuplicateLastEvent =\n    !hasState(State.END)(lastEvent) ||\n    !hasState(State.FAILED)(lastEvent) ||\n    !hasState(State.CANCELLED)(lastEvent);\n\n  if (shouldDuplicateLastEvent) {\n    const duplicated = { ...lastEvent, state: State.END };\n    // @ts-ignore badly typed, property may exist and we don't want to copy it\n    delete duplicated.oldState;\n    _events.push(duplicated);\n  }\n\n  function isWithoutState(event: Event) {\n    return event !== null && !hasProperty(event, 'state');\n  }\n  function hasState(state: State) {\n    return (event: Event) => event !== null && event.state === state;\n  }\n  function noEventsLeft(event: Event) {\n    return event === null;\n  }\n\n  function trueFn() {\n    return true;\n  }\n  interface Args {\n    shouldConsumeEvent?: (event: Event) => boolean;\n    shouldTransitionToNextState?: (nextEvent: Event) => boolean;\n  }\n  function fillEventsForCurrentState({\n    shouldConsumeEvent = trueFn,\n    shouldTransitionToNextState = trueFn,\n  }: Args) {\n    function peekCurrentEvent(): Event {\n      return _events[0] ?? null;\n    }\n    function peekNextEvent(): Event {\n      return _events[1] ?? null;\n    }\n    function consumeCurrentEvent() {\n      _events.shift();\n    }\n    const currentEvent = peekCurrentEvent();\n    const nextEvent = peekNextEvent();\n    const currentRequiredState = REQUIRED_EVENTS[currentStateIdx];\n\n    let eventData = {};\n    const shouldUseEvent = shouldConsumeEvent(currentEvent);\n    if (shouldUseEvent) {\n      eventData = currentEvent!;\n      consumeCurrentEvent();\n    }\n    transformedEvents.push({ state: currentRequiredState, ...eventData });\n    if (shouldTransitionToNextState(nextEvent)) {\n      currentStateIdx++;\n    }\n  }\n\n  const REQUIRED_EVENTS = [State.BEGAN, State.ACTIVE, State.END];\n\n  let currentStateIdx = 0;\n  const transformedEvents: EventWithoutStates[] = [];\n  let hasAllStates;\n  let iterations = 0;\n  do {\n    const nextRequiredState = REQUIRED_EVENTS[currentStateIdx];\n    if (nextRequiredState === State.BEGAN) {\n      fillEventsForCurrentState({\n        shouldConsumeEvent: (e: Event) =>\n          isWithoutState(e) || hasState(State.BEGAN)(e),\n      });\n    } else if (nextRequiredState === State.ACTIVE) {\n      const shouldConsumeEvent = (e: Event) =>\n        isWithoutState(e) || hasState(State.ACTIVE)(e);\n      const shouldTransitionToNextState = (nextEvent: Event) =>\n        noEventsLeft(nextEvent) ||\n        hasState(State.END)(nextEvent) ||\n        hasState(State.FAILED)(nextEvent) ||\n        hasState(State.CANCELLED)(nextEvent);\n\n      fillEventsForCurrentState({\n        shouldConsumeEvent,\n        shouldTransitionToNextState,\n      });\n    } else if (nextRequiredState === State.END) {\n      fillEventsForCurrentState({});\n    }\n    hasAllStates = currentStateIdx === REQUIRED_EVENTS.length;\n\n    invariant(\n      iterations++ <= 500,\n      'exceeded max number of iterations, please report a bug in RNGH repository with your test case'\n    );\n  } while (!hasAllStates);\n\n  return transformedEvents;\n}\n\ntype EventEmitter = (\n  eventName: string,\n  args: { nativeEvent: GestureHandlerTestEvent }\n) => void;\ninterface HandlerData {\n  emitEvent: EventEmitter;\n  handlerType: HandlerNames;\n  handlerTag: number;\n}\nfunction getHandlerData(\n  componentOrGesture: ReactTestInstance | GestureType\n): HandlerData {\n  if (isGesture(componentOrGesture)) {\n    const gesture = componentOrGesture;\n    return {\n      emitEvent: (eventName, args) => {\n        DeviceEventEmitter.emit(eventName, args.nativeEvent);\n      },\n      handlerType: gesture.handlerName as HandlerNames,\n      handlerTag: gesture.handlerTag,\n    };\n  }\n  const gestureHandlerComponent = componentOrGesture;\n  return {\n    emitEvent: (eventName, args) => {\n      fireEvent(gestureHandlerComponent, eventName, args);\n    },\n    handlerType: gestureHandlerComponent.props.handlerType as HandlerNames,\n    handlerTag: gestureHandlerComponent.props.handlerTag as number,\n  };\n}\ntype AllGestures =\n  | TapGesture\n  | PanGesture\n  | LongPressGesture\n  | RotationGesture\n  | PinchGesture\n  | FlingGesture\n  | ForceTouchGesture\n  | NativeGesture;\n\ntype AllHandlers =\n  | TapGestureHandler\n  | PanGestureHandler\n  | LongPressGestureHandler\n  | RotationGestureHandler\n  | PinchGestureHandler\n  | FlingGestureHandler\n  | ForceTouchGestureHandler\n  | NativeViewGestureHandler;\n\n// prettier-ignore\ntype ClassComponentConstructor<P> = new (props: P) => React.Component<P, any, any>;\n\ntype ExtractPayloadFromProps<T> = T extends BaseGestureHandlerProps<\n  infer TPayload\n>\n  ? TPayload\n  : never;\n\ntype ExtractConfig<T> = T extends BaseGesture<infer TGesturePayload>\n  ? TGesturePayload\n  : T extends ClassComponentConstructor<infer THandlerProps>\n  ? ExtractPayloadFromProps<THandlerProps>\n  : Record<string, unknown>;\n\nexport function fireGestureHandler<THandler extends AllGestures | AllHandlers>(\n  componentOrGesture: ReactTestInstance | GestureType,\n  eventList: Partial<GestureHandlerTestEvent<ExtractConfig<THandler>>>[] = []\n): void {\n  const { emitEvent, handlerType, handlerTag } =\n    getHandlerData(componentOrGesture);\n\n  let _ = fillMissingStatesTransitions(\n    eventList,\n    isDiscreteHandler(handlerType)\n  );\n  _ = _.map(fillMissingDefaultsFor({ handlerTag, handlerType }));\n  _ = withPrevAndCurrent(_, fillOldStateChanges);\n  _ = withPrevAndCurrent(_, validateStateTransitions);\n  // @ts-ignore TODO\n  _ = _.map(wrapWithNativeEvent);\n\n  const events = _ as unknown as WrappedGestureHandlerTestEvent[];\n\n  const firstEvent = events.shift()!;\n\n  emitEvent('onGestureHandlerStateChange', firstEvent);\n  let lastSentEvent = firstEvent;\n  for (const event of events) {\n    const hasChangedState =\n      lastSentEvent.nativeEvent.state !== event.nativeEvent.state;\n\n    if (hasChangedState) {\n      emitEvent('onGestureHandlerStateChange', event);\n    } else {\n      emitEvent('onGestureHandlerEvent', event);\n    }\n    lastSentEvent = event;\n  }\n}\n\nexport function getByGestureTestId(testID: string) {\n  const handler = findHandlerByTestID(testID);\n  if (handler === null) {\n    throw new Error(`Handler with id: '${testID}' cannot be found`);\n  }\n  return handler;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}