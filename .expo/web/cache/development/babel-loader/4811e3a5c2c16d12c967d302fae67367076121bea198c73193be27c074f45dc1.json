{"ast":null,"code":"#!/usr/bin/env node\n\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.expoPrebuild = void 0;\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _args = require(\"../utils/args\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar expoPrebuild = function () {\n  var _ref = _asyncToGenerator(function* (argv) {\n    var args = (0, _args).assertArgs({\n      \"--help\": Boolean,\n      \"--clean\": Boolean,\n      \"--npm\": Boolean,\n      \"--pnpm\": Boolean,\n      \"--yarn\": Boolean,\n      \"--bun\": Boolean,\n      \"--no-install\": Boolean,\n      \"--template\": String,\n      \"--platform\": String,\n      \"--skip-dependency-update\": String,\n      \"-h\": \"--help\",\n      \"-p\": \"--platform\",\n      \"-t\": \"--type\"\n    }, argv);\n    if (args[\"--help\"]) {\n      (0, _args).printHelp(`Create native iOS and Android project files for building natively`, _chalk.default`npx expo prebuild {dim <dir>}`, [_chalk.default`<dir>                                    Directory of the Expo project. {dim Default: Current working directory}`, `--no-install                             Skip installing npm packages and CocoaPods`, `--clean                                  Delete the native folders and regenerate them before applying changes`, _chalk.default`--npm                                    Use npm to install dependencies. {dim Default when package-lock.json exists}`, _chalk.default`--yarn                                   Use Yarn to install dependencies. {dim Default when yarn.lock exists}`, _chalk.default`--bun                                    Use bun to install dependencies. {dim Default when bun.lockb exists}`, _chalk.default`--pnpm                                   Use pnpm to install dependencies. {dim Default when pnpm-lock.yaml exists}`, `--template <template>                    Project template to clone from. File path pointing to a local tar file or a github repo`, _chalk.default`-p, --platform <all|android|ios>         Platforms to sync: ios, android, all. {dim Default: all}`, `--skip-dependency-update <dependencies>  Preserves versions of listed packages in package.json (comma separated list)`, `-h, --help                               Usage info`].join(\"\\n\"));\n    }\n    var _yield$Promise$all = yield Promise.all([Promise.resolve().then(function () {\n        return _interopRequireWildcard(require(\"./prebuildAsync\"));\n      }), Promise.resolve().then(function () {\n        return _interopRequireWildcard(require(\"./resolveOptions\"));\n      }), Promise.resolve().then(function () {\n        return _interopRequireWildcard(require(\"../utils/errors\"));\n      })]),\n      _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 3),\n      prebuildAsync = _yield$Promise$all2[0].prebuildAsync,\n      _yield$Promise$all2$ = _yield$Promise$all2[1],\n      resolvePlatformOption = _yield$Promise$all2$.resolvePlatformOption,\n      resolvePackageManagerOptions = _yield$Promise$all2$.resolvePackageManagerOptions,\n      resolveSkipDependencyUpdate = _yield$Promise$all2$.resolveSkipDependencyUpdate,\n      logCmdError = _yield$Promise$all2[2].logCmdError;\n    return function () {\n      return prebuildAsync((0, _args).getProjectRoot(args), {\n        clean: args[\"--clean\"],\n        packageManager: resolvePackageManagerOptions(args),\n        install: !args[\"--no-install\"],\n        platforms: resolvePlatformOption(args[\"--platform\"]),\n        skipDependencyUpdate: resolveSkipDependencyUpdate(args[\"--skip-dependency-update\"]),\n        template: args[\"--template\"]\n      });\n    }().catch(logCmdError);\n  });\n  return function expoPrebuild(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexports.expoPrebuild = expoPrebuild;","map":{"version":3,"names":["_chalk","_interopRequireDefault","require","_args","expoPrebuild","_ref","_asyncToGenerator","argv","args","assertArgs","Boolean","String","printHelp","default","join","_yield$Promise$all","Promise","all","resolve","then","_yield$Promise$all2","_slicedToArray","prebuildAsync","_yield$Promise$all2$","resolvePlatformOption","resolvePackageManagerOptions","resolveSkipDependencyUpdate","logCmdError","getProjectRoot","clean","packageManager","install","platforms","skipDependencyUpdate","template","catch","_x","apply","arguments"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\prebuild\\index.ts"],"sourcesContent":["#!/usr/bin/env node\nimport chalk from 'chalk';\n\nimport { Command } from '../../bin/cli';\nimport { assertArgs, getProjectRoot, printHelp } from '../utils/args';\n\nexport const expoPrebuild: Command = async (argv) => {\n  const args = assertArgs(\n    {\n      // Types\n      '--help': Boolean,\n      '--clean': Boolean,\n      '--npm': Boolean,\n      '--pnpm': Boolean,\n      '--yarn': Boolean,\n      '--bun': Boolean,\n      '--no-install': Boolean,\n      '--template': String,\n      '--platform': String,\n      '--skip-dependency-update': String,\n      // Aliases\n      '-h': '--help',\n      '-p': '--platform',\n      '-t': '--type',\n    },\n    argv\n  );\n\n  if (args['--help']) {\n    printHelp(\n      `Create native iOS and Android project files for building natively`,\n      chalk`npx expo prebuild {dim <dir>}`,\n      [\n        chalk`<dir>                                    Directory of the Expo project. {dim Default: Current working directory}`,\n        `--no-install                             Skip installing npm packages and CocoaPods`,\n        `--clean                                  Delete the native folders and regenerate them before applying changes`,\n        chalk`--npm                                    Use npm to install dependencies. {dim Default when package-lock.json exists}`,\n        chalk`--yarn                                   Use Yarn to install dependencies. {dim Default when yarn.lock exists}`,\n        chalk`--bun                                    Use bun to install dependencies. {dim Default when bun.lockb exists}`,\n        chalk`--pnpm                                   Use pnpm to install dependencies. {dim Default when pnpm-lock.yaml exists}`,\n        `--template <template>                    Project template to clone from. File path pointing to a local tar file or a github repo`,\n        chalk`-p, --platform <all|android|ios>         Platforms to sync: ios, android, all. {dim Default: all}`,\n        `--skip-dependency-update <dependencies>  Preserves versions of listed packages in package.json (comma separated list)`,\n        `-h, --help                               Usage info`,\n      ].join('\\n')\n    );\n  }\n\n  // Load modules after the help prompt so `npx expo prebuild -h` shows as fast as possible.\n  const [\n    // ./prebuildAsync\n    { prebuildAsync },\n    // ./resolveOptions\n    { resolvePlatformOption, resolvePackageManagerOptions, resolveSkipDependencyUpdate },\n    // ../utils/errors\n    { logCmdError },\n  ] = await Promise.all([\n    import('./prebuildAsync'),\n    import('./resolveOptions'),\n    import('../utils/errors'),\n  ]);\n\n  return (() => {\n    return prebuildAsync(getProjectRoot(args), {\n      // Parsed options\n      clean: args['--clean'],\n\n      packageManager: resolvePackageManagerOptions(args),\n      install: !args['--no-install'],\n      platforms: resolvePlatformOption(args['--platform']),\n      // TODO: Parse\n      skipDependencyUpdate: resolveSkipDependencyUpdate(args['--skip-dependency-update']),\n      template: args['--template'],\n    });\n  })().catch(logCmdError);\n};\n"],"mappings":"AAAA;;;;;;;;;AACkB,IAAAA,MAAO,GAAAC,sBAAA,CAAAC,OAAA,CAAP,OAAO;AAG6B,IAAAC,KAAe,GAAAD,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAE9D,IAAME,YAAY;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAY,WAAOC,IAAI,EAAK;IACnD,IAAMC,IAAI,GAAG,IAAAL,KAAU,EAmBtBM,UAnBsB,CACrB;MAEE,QAAQ,EAAEC,OAAO;MACjB,SAAS,EAAEA,OAAO;MAClB,OAAO,EAAEA,OAAO;MAChB,QAAQ,EAAEA,OAAO;MACjB,QAAQ,EAAEA,OAAO;MACjB,OAAO,EAAEA,OAAO;MAChB,cAAc,EAAEA,OAAO;MACvB,YAAY,EAAEC,MAAM;MACpB,YAAY,EAAEA,MAAM;MACpB,0BAA0B,EAAEA,MAAM;MAElC,IAAI,EAAE,QAAQ;MACd,IAAI,EAAE,YAAY;MAClB,IAAI,EAAE;KACP,EACDJ,IAAI,CACL;IAED,IAAIC,IAAI,CAAC,QAAQ,CAAC,EAAE;MAClB,IAAAL,KAAS,EAgBRS,SAhBQ,CACN,mEAAkE,EACnEZ,MAAK,CAAAa,OAAC,+BAA8B,EACpC,CACEb,MAAK,CAAAa,OAAC,kHAAiH,EACtH,qFAAoF,EACpF,gHAA+G,EAChHb,MAAK,CAAAa,OAAC,uHAAsH,EAC5Hb,MAAK,CAAAa,OAAC,gHAA+G,EACrHb,MAAK,CAAAa,OAAC,+GAA8G,EACpHb,MAAK,CAAAa,OAAC,qHAAoH,EACzH,kIAAiI,EAClIb,MAAK,CAAAa,OAAC,mGAAkG,EACvG,uHAAsH,EACtH,qDAAoD,CACtD,CAACC,IAAI,CAAC,IAAI,CAAC,CACb;;IAIH,IAAAC,kBAAA,SAOUC,OAAO,CAACC,GAAG,CAAC,CACpBD,OAAA,CAAAE,OAAA,GAAAC,IAAA;gEAAwB;QAAC,EACzBH,OAAA,CAAAE,OAAA,GAAAC,IAAA;iEAAyB;QAAC,EAC1BH,OAAA,CAAAE,OAAA,GAAAC,IAAA;gEAAwB;QAAC,CAC1B,CAAC;MAAAC,mBAAA,GAAAC,cAAA,CAAAN,kBAAA;MATEO,aAAa,GAAAF,mBAAA,IAAbE,aAAa;MAAAC,oBAAA,GAAAH,mBAAA;MAEbI,qBAAqB,GAAAD,oBAAA,CAArBC,qBAAqB;MAAEC,4BAA4B,GAAAF,oBAAA,CAA5BE,4BAA4B;MAAEC,2BAA2B,GAAAH,oBAAA,CAA3BG,2BAA2B;MAEhFC,WAAW,GAAAP,mBAAA,IAAXO,WAAW;IAOf,OAAQ,YAAM;MACZ,OAAOL,aAAa,CAAC,IAAAnB,KAAc,EAAMyB,cAAN,CAACpB,IAAI,CAAC,EAAE;QAEzCqB,KAAK,EAAErB,IAAI,CAAC,SAAS,CAAC;QAEtBsB,cAAc,EAAEL,4BAA4B,CAACjB,IAAI,CAAC;QAClDuB,OAAO,EAAE,CAACvB,IAAI,CAAC,cAAc,CAAC;QAC9BwB,SAAS,EAAER,qBAAqB,CAAChB,IAAI,CAAC,YAAY,CAAC,CAAC;QAEpDyB,oBAAoB,EAAEP,2BAA2B,CAAClB,IAAI,CAAC,0BAA0B,CAAC,CAAC;QACnF0B,QAAQ,EAAE1B,IAAI,CAAC,YAAY;OAC5B,CAAC;KACH,CAAC,CAAE,CAAC2B,KAAK,CAACR,WAAW,CAAC;GACxB;EAAA,gBArEYvB,YAAYA,CAAAgC,EAAA;IAAA,OAAA/B,IAAA,CAAAgC,KAAA,OAAAC,SAAA;EAAA;AAAA,GAqExB;QArEYlC,YAAY,GAAZA,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}