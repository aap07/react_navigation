{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport createDebug from 'debug';\nimport crypto from 'crypto';\nimport { writeFileSync as write, readFileSync as read } from 'fs';\nimport { sync as rimraf } from 'rimraf';\nimport { assertNotTouchingFiles, openCertificateInFirefox } from \"./shared\";\nimport { run, sudo } from \"../utils\";\nimport UI from \"../user-interface\";\nvar debug = createDebug('devcert:platforms:windows');\nvar encryptionKey;\nvar WindowsPlatform = function () {\n  function WindowsPlatform() {\n    _classCallCheck(this, WindowsPlatform);\n    this.HOST_FILE_PATH = 'C:\\\\Windows\\\\System32\\\\Drivers\\\\etc\\\\hosts';\n  }\n  _createClass(WindowsPlatform, [{\n    key: \"addToTrustStores\",\n    value: function () {\n      var _addToTrustStores = _asyncToGenerator(function* (certificatePath) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        debug('adding devcert root to Windows OS trust store');\n        try {\n          run('certutil', ['-addstore', '-user', 'root', certificatePath]);\n        } catch (e) {\n          e.output.map(function (buffer) {\n            if (buffer) {\n              console.log(buffer.toString());\n            }\n          });\n        }\n        debug('adding devcert root to Firefox trust store');\n        try {\n          yield openCertificateInFirefox('start firefox', certificatePath);\n        } catch (_unused) {\n          debug('Error opening Firefox, most likely Firefox is not installed');\n        }\n      });\n      function addToTrustStores(_x) {\n        return _addToTrustStores.apply(this, arguments);\n      }\n      return addToTrustStores;\n    }()\n  }, {\n    key: \"removeFromTrustStores\",\n    value: function removeFromTrustStores(certificatePath) {\n      debug('removing devcert root from Windows OS trust store');\n      try {\n        console.warn('Removing old certificates from trust stores. You may be prompted to grant permission for this. It\\'s safe to delete old devcert certificates.');\n        run('certutil', ['-delstore', '-user', 'root', 'devcert']);\n      } catch (e) {\n        debug(`failed to remove ${certificatePath} from Windows OS trust store, continuing. ${e.toString()}`);\n      }\n    }\n  }, {\n    key: \"addDomainToHostFileIfMissing\",\n    value: function () {\n      var _addDomainToHostFileIfMissing = _asyncToGenerator(function* (domain) {\n        var hostsFileContents = read(this.HOST_FILE_PATH, 'utf8');\n        if (!hostsFileContents.includes(domain)) {\n          yield sudo(`echo 127.0.0.1  ${domain} >> ${this.HOST_FILE_PATH}`);\n        }\n      });\n      function addDomainToHostFileIfMissing(_x2) {\n        return _addDomainToHostFileIfMissing.apply(this, arguments);\n      }\n      return addDomainToHostFileIfMissing;\n    }()\n  }, {\n    key: \"deleteProtectedFiles\",\n    value: function deleteProtectedFiles(filepath) {\n      assertNotTouchingFiles(filepath, 'delete');\n      rimraf(filepath);\n    }\n  }, {\n    key: \"readProtectedFile\",\n    value: function () {\n      var _readProtectedFile = _asyncToGenerator(function* (filepath) {\n        assertNotTouchingFiles(filepath, 'read');\n        if (!encryptionKey) {\n          encryptionKey = yield UI.getWindowsEncryptionPassword();\n        }\n        try {\n          return this.decrypt(read(filepath, 'utf8'), encryptionKey);\n        } catch (e) {\n          if (e.message.indexOf('bad decrypt') >= -1) {\n            encryptionKey = null;\n            return yield this.readProtectedFile(filepath);\n          }\n          throw e;\n        }\n      });\n      function readProtectedFile(_x3) {\n        return _readProtectedFile.apply(this, arguments);\n      }\n      return readProtectedFile;\n    }()\n  }, {\n    key: \"writeProtectedFile\",\n    value: function () {\n      var _writeProtectedFile = _asyncToGenerator(function* (filepath, contents) {\n        assertNotTouchingFiles(filepath, 'write');\n        if (!encryptionKey) {\n          encryptionKey = yield UI.getWindowsEncryptionPassword();\n        }\n        var encryptedContents = this.encrypt(contents, encryptionKey);\n        write(filepath, encryptedContents);\n      });\n      function writeProtectedFile(_x4, _x5) {\n        return _writeProtectedFile.apply(this, arguments);\n      }\n      return writeProtectedFile;\n    }()\n  }, {\n    key: \"encrypt\",\n    value: function encrypt(text, key) {\n      var cipher = crypto.createCipher('aes256', new Buffer(key));\n      return cipher.update(text, 'utf8', 'hex') + cipher.final('hex');\n    }\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(encrypted, key) {\n      var decipher = crypto.createDecipher('aes256', new Buffer(key));\n      return decipher.update(encrypted, 'hex', 'utf8') + decipher.final('utf8');\n    }\n  }]);\n  return WindowsPlatform;\n}();\nexport { WindowsPlatform as default };","map":{"version":3,"names":["createDebug","crypto","writeFileSync","write","readFileSync","read","sync","rimraf","assertNotTouchingFiles","openCertificateInFirefox","run","sudo","UI","debug","encryptionKey","WindowsPlatform","_classCallCheck","HOST_FILE_PATH","_createClass","key","value","_addToTrustStores","_asyncToGenerator","certificatePath","options","arguments","length","undefined","e","output","map","buffer","console","log","toString","_unused","addToTrustStores","_x","apply","removeFromTrustStores","warn","_addDomainToHostFileIfMissing","domain","hostsFileContents","includes","addDomainToHostFileIfMissing","_x2","deleteProtectedFiles","filepath","_readProtectedFile","getWindowsEncryptionPassword","decrypt","message","indexOf","readProtectedFile","_x3","_writeProtectedFile","contents","encryptedContents","encrypt","writeProtectedFile","_x4","_x5","text","cipher","createCipher","Buffer","update","final","encrypted","decipher","createDecipher","default"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/devcert/src/platforms/win32.ts"],"sourcesContent":["import createDebug from 'debug';\nimport crypto from 'crypto';\nimport { writeFileSync as write, readFileSync as read } from 'fs';\nimport { sync as rimraf } from 'rimraf';\nimport { Options } from '../index';\nimport { assertNotTouchingFiles, openCertificateInFirefox } from './shared';\nimport { Platform } from '.';\nimport { run, sudo } from '../utils';\nimport UI from '../user-interface';\n\nconst debug = createDebug('devcert:platforms:windows');\n\nlet encryptionKey: string;\n\nexport default class WindowsPlatform implements Platform {\n\n  private HOST_FILE_PATH = 'C:\\\\Windows\\\\System32\\\\Drivers\\\\etc\\\\hosts';\n\n  /**\n   * Windows is at least simple. Like macOS, most applications will delegate to\n   * the system trust store, which is updated with the confusingly named\n   * `certutil` exe (not the same as the NSS/Mozilla certutil). Firefox does it's\n   * own thing as usual, and getting a copy of NSS certutil onto the Windows\n   * machine to try updating the Firefox store is basically a nightmare, so we\n   * don't even try it - we just bail out to the GUI.\n   */\n  async addToTrustStores(certificatePath: string, options: Options = {}): Promise<void> {\n    // IE, Chrome, system utils\n    debug('adding devcert root to Windows OS trust store')\n    try {\n      run('certutil', ['-addstore', '-user', 'root', certificatePath]);\n    } catch (e) {\n      e.output.map((buffer: Buffer) => {\n        if (buffer) {\n          console.log(buffer.toString());\n        }\n      });\n    }\n    debug('adding devcert root to Firefox trust store')\n    // Firefox (don't even try NSS certutil, no easy install for Windows)\n    try {\n      await openCertificateInFirefox('start firefox', certificatePath);\n    } catch {\n      debug('Error opening Firefox, most likely Firefox is not installed');\n    }\n  }\n  \n  removeFromTrustStores(certificatePath: string) {\n    debug('removing devcert root from Windows OS trust store');\n    try {\n      console.warn('Removing old certificates from trust stores. You may be prompted to grant permission for this. It\\'s safe to delete old devcert certificates.');\n      run('certutil', ['-delstore', '-user', 'root', 'devcert']);\n    } catch (e) {\n      debug(`failed to remove ${ certificatePath } from Windows OS trust store, continuing. ${ e.toString() }`)\n    }\n  }\n\n  async addDomainToHostFileIfMissing(domain: string) {\n    let hostsFileContents = read(this.HOST_FILE_PATH, 'utf8');\n    if (!hostsFileContents.includes(domain)) {\n      await sudo(`echo 127.0.0.1  ${ domain } >> ${ this.HOST_FILE_PATH }`);\n    }\n  }\n  \n  deleteProtectedFiles(filepath: string) {\n    assertNotTouchingFiles(filepath, 'delete');\n    rimraf(filepath);\n  }\n\n  async readProtectedFile(filepath: string): Promise<string> {\n    assertNotTouchingFiles(filepath, 'read');\n    if (!encryptionKey) {\n      encryptionKey = await UI.getWindowsEncryptionPassword();\n    }\n    // Try to decrypt the file\n    try {\n      return this.decrypt(read(filepath, 'utf8'), encryptionKey);\n    } catch (e) {\n      // If it's a bad password, clear the cached copy and retry\n      if (e.message.indexOf('bad decrypt') >= -1) {\n        encryptionKey = null;\n        return await this.readProtectedFile(filepath);\n      }\n      throw e;\n    }\n  }\n\n  async writeProtectedFile(filepath: string, contents: string) {\n    assertNotTouchingFiles(filepath, 'write');\n    if (!encryptionKey) {\n      encryptionKey = await UI.getWindowsEncryptionPassword();\n    }\n    let encryptedContents = this.encrypt(contents, encryptionKey);\n    write(filepath, encryptedContents);\n  }\n\n  private encrypt(text: string, key: string) {\n    let cipher = crypto.createCipher('aes256', new Buffer(key));\n    return cipher.update(text, 'utf8', 'hex') + cipher.final('hex');\n  }\n\n  private decrypt(encrypted: string, key: string) {\n    let decipher = crypto.createDecipher('aes256', new Buffer(key));\n    return decipher.update(encrypted, 'hex', 'utf8') + decipher.final('utf8');\n  }\n\n}"],"mappings":";;;AAAA,OAAOA,WAAW,MAAM,OAAO;AAC/B,OAAOC,MAAM,MAAM,QAAQ;AAC3B,SAASC,aAAa,IAAIC,KAAK,EAAEC,YAAY,IAAIC,IAAI,QAAQ,IAAI;AACjE,SAASC,IAAI,IAAIC,MAAM,QAAQ,QAAQ;AAEvC,SAASC,sBAAsB,EAAEC,wBAAwB;AAEzD,SAASC,GAAG,EAAEC,IAAI;AAClB,OAAOC,EAAE;AAET,IAAMC,KAAK,GAAGb,WAAW,CAAC,2BAA2B,CAAC;AAEtD,IAAIc,aAAqB;AAAC,IAELC,eAAe;EAAA,SAAAA,gBAAA;IAAAC,eAAA,OAAAD,eAAA;IAAA,KAE1BE,cAAc,GAAG,4CAA4C;EAAA;EAAAC,YAAA,CAAAH,eAAA;IAAAI,GAAA;IAAAC,KAAA;MAAA,IAAAC,iBAAA,GAAAC,iBAAA,CAUrE,WAAuBC,eAAuB,EAAwC;QAAA,IAAtCC,OAAgB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;QAEnEZ,KAAK,CAAC,+CAA+C,CAAC;QACtD,IAAI;UACFH,GAAG,CAAC,UAAU,EAAE,CAAC,WAAW,EAAE,OAAO,EAAE,MAAM,EAAEa,eAAe,CAAC,CAAC;QAClE,CAAC,CAAC,OAAOK,CAAC,EAAE;UACVA,CAAC,CAACC,MAAM,CAACC,GAAG,CAAC,UAACC,MAAc,EAAK;YAC/B,IAAIA,MAAM,EAAE;cACVC,OAAO,CAACC,GAAG,CAACF,MAAM,CAACG,QAAQ,CAAC,CAAC,CAAC;YAChC;UACF,CAAC,CAAC;QACJ;QACArB,KAAK,CAAC,4CAA4C,CAAC;QAEnD,IAAI;UACF,MAAMJ,wBAAwB,CAAC,eAAe,EAAEc,eAAe,CAAC;QAClE,CAAC,CAAC,OAAAY,OAAA,EAAM;UACNtB,KAAK,CAAC,6DAA6D,CAAC;QACtE;MACF,CAAC;MAAA,SAAAuB,iBAAAC,EAAA;QAAA,OAAAhB,iBAAA,CAAAiB,KAAA,OAAAb,SAAA;MAAA;MAAA,OAAAW,gBAAA;IAAA;EAAA;IAAAjB,GAAA;IAAAC,KAAA,EAED,SAAAmB,sBAAsBhB,eAAuB,EAAE;MAC7CV,KAAK,CAAC,mDAAmD,CAAC;MAC1D,IAAI;QACFmB,OAAO,CAACQ,IAAI,CAAC,+IAA+I,CAAC;QAC7J9B,GAAG,CAAC,UAAU,EAAE,CAAC,WAAW,EAAE,OAAO,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;MAC5D,CAAC,CAAC,OAAOkB,CAAC,EAAE;QACVf,KAAK,CAAE,oBAAoBU,eAAiB,6CAA6CK,CAAC,CAACM,QAAQ,CAAC,CAAG,EAAC,CAAC;MAC3G;IACF;EAAC;IAAAf,GAAA;IAAAC,KAAA;MAAA,IAAAqB,6BAAA,GAAAnB,iBAAA,CAED,WAAmCoB,MAAc,EAAE;QACjD,IAAIC,iBAAiB,GAAGtC,IAAI,CAAC,IAAI,CAACY,cAAc,EAAE,MAAM,CAAC;QACzD,IAAI,CAAC0B,iBAAiB,CAACC,QAAQ,CAACF,MAAM,CAAC,EAAE;UACvC,MAAM/B,IAAI,CAAE,mBAAmB+B,MAAQ,OAAO,IAAI,CAACzB,cAAgB,EAAC,CAAC;QACvE;MACF,CAAC;MAAA,SAAA4B,6BAAAC,GAAA;QAAA,OAAAL,6BAAA,CAAAH,KAAA,OAAAb,SAAA;MAAA;MAAA,OAAAoB,4BAAA;IAAA;EAAA;IAAA1B,GAAA;IAAAC,KAAA,EAED,SAAA2B,qBAAqBC,QAAgB,EAAE;MACrCxC,sBAAsB,CAACwC,QAAQ,EAAE,QAAQ,CAAC;MAC1CzC,MAAM,CAACyC,QAAQ,CAAC;IAClB;EAAC;IAAA7B,GAAA;IAAAC,KAAA;MAAA,IAAA6B,kBAAA,GAAA3B,iBAAA,CAED,WAAwB0B,QAAgB,EAAmB;QACzDxC,sBAAsB,CAACwC,QAAQ,EAAE,MAAM,CAAC;QACxC,IAAI,CAAClC,aAAa,EAAE;UAClBA,aAAa,SAASF,EAAE,CAACsC,4BAA4B,CAAC,CAAC;QACzD;QAEA,IAAI;UACF,OAAO,IAAI,CAACC,OAAO,CAAC9C,IAAI,CAAC2C,QAAQ,EAAE,MAAM,CAAC,EAAElC,aAAa,CAAC;QAC5D,CAAC,CAAC,OAAOc,CAAC,EAAE;UAEV,IAAIA,CAAC,CAACwB,OAAO,CAACC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,EAAE;YAC1CvC,aAAa,GAAG,IAAI;YACpB,aAAa,IAAI,CAACwC,iBAAiB,CAACN,QAAQ,CAAC;UAC/C;UACA,MAAMpB,CAAC;QACT;MACF,CAAC;MAAA,SAAA0B,kBAAAC,GAAA;QAAA,OAAAN,kBAAA,CAAAX,KAAA,OAAAb,SAAA;MAAA;MAAA,OAAA6B,iBAAA;IAAA;EAAA;IAAAnC,GAAA;IAAAC,KAAA;MAAA,IAAAoC,mBAAA,GAAAlC,iBAAA,CAED,WAAyB0B,QAAgB,EAAES,QAAgB,EAAE;QAC3DjD,sBAAsB,CAACwC,QAAQ,EAAE,OAAO,CAAC;QACzC,IAAI,CAAClC,aAAa,EAAE;UAClBA,aAAa,SAASF,EAAE,CAACsC,4BAA4B,CAAC,CAAC;QACzD;QACA,IAAIQ,iBAAiB,GAAG,IAAI,CAACC,OAAO,CAACF,QAAQ,EAAE3C,aAAa,CAAC;QAC7DX,KAAK,CAAC6C,QAAQ,EAAEU,iBAAiB,CAAC;MACpC,CAAC;MAAA,SAAAE,mBAAAC,GAAA,EAAAC,GAAA;QAAA,OAAAN,mBAAA,CAAAlB,KAAA,OAAAb,SAAA;MAAA;MAAA,OAAAmC,kBAAA;IAAA;EAAA;IAAAzC,GAAA;IAAAC,KAAA,EAED,SAAAuC,QAAgBI,IAAY,EAAE5C,GAAW,EAAE;MACzC,IAAI6C,MAAM,GAAG/D,MAAM,CAACgE,YAAY,CAAC,QAAQ,EAAE,IAAIC,MAAM,CAAC/C,GAAG,CAAC,CAAC;MAC3D,OAAO6C,MAAM,CAACG,MAAM,CAACJ,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,GAAGC,MAAM,CAACI,KAAK,CAAC,KAAK,CAAC;IACjE;EAAC;IAAAjD,GAAA;IAAAC,KAAA,EAED,SAAA+B,QAAgBkB,SAAiB,EAAElD,GAAW,EAAE;MAC9C,IAAImD,QAAQ,GAAGrE,MAAM,CAACsE,cAAc,CAAC,QAAQ,EAAE,IAAIL,MAAM,CAAC/C,GAAG,CAAC,CAAC;MAC/D,OAAOmD,QAAQ,CAACH,MAAM,CAACE,SAAS,EAAE,KAAK,EAAE,MAAM,CAAC,GAAGC,QAAQ,CAACF,KAAK,CAAC,MAAM,CAAC;IAC3E;EAAC;EAAA,OAAArD,eAAA;AAAA;AAAA,SA1FkBA,eAAe,IAAAyD,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}