{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar VscodeDebuggerSetBreakpointByUrlHandler = function () {\n  function VscodeDebuggerSetBreakpointByUrlHandler() {\n    _classCallCheck(this, VscodeDebuggerSetBreakpointByUrlHandler);\n  }\n  _createClass(VscodeDebuggerSetBreakpointByUrlHandler, [{\n    key: \"onDebuggerMessage\",\n    value: function onDebuggerMessage(message, _ref) {\n      var debuggerType = _ref.debuggerType;\n      if (debuggerType === \"vscode\" && message.method === \"Debugger.setBreakpointByUrl\" && message.params.urlRegex) {\n        message.params.url = \"file://__invalid_url__\";\n        delete message.params.urlRegex;\n      }\n      return false;\n    }\n  }]);\n  return VscodeDebuggerSetBreakpointByUrlHandler;\n}();\nexports.VscodeDebuggerSetBreakpointByUrlHandler = VscodeDebuggerSetBreakpointByUrlHandler;","map":{"version":3,"names":["_classCallCheck","require","_createClass","VscodeDebuggerSetBreakpointByUrlHandler","key","value","onDebuggerMessage","message","_ref","debuggerType","method","params","urlRegex","url"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\metro\\inspector-proxy\\handlers\\VscodeDebuggerSetBreakpointByUrl.ts"],"sourcesContent":["import Protocol from 'devtools-protocol';\n\nimport { ExpoDebuggerInfo } from '../device';\nimport { CdpMessage, DebuggerRequest, InspectorHandler } from './types';\n\n/**\n * Hermes and vscode have trouble setting breakpoints by `urlRegex` through `Debugger.setBreakpointByUrl`.\n * Vscode adds `file://` to a URL containing `http://`, which confuses Hermes and sets it to the wrong location.\n * Hermes needs to create the breakpoint to get the proper ID, but it must be unbounded.\n * Once the sourcemap is loaded, vscode will rebind the unbounded breakpoint to the correct location (using `Debugger.setBreakpoint`).\n */\nexport class VscodeDebuggerSetBreakpointByUrlHandler implements InspectorHandler {\n  onDebuggerMessage(\n    message: DebuggerRequest<DebuggerSetBreakpointByUrl>,\n    { debuggerType }: ExpoDebuggerInfo\n  ): boolean {\n    if (\n      debuggerType === 'vscode' &&\n      message.method === 'Debugger.setBreakpointByUrl' &&\n      message.params.urlRegex\n    ) {\n      // Explicitly force the breakpoint to be unbounded\n      message.params.url = 'file://__invalid_url__';\n      delete message.params.urlRegex;\n    }\n\n    return false;\n  }\n}\n\n/** @see https://chromedevtools.github.io/devtools-protocol/v8/Debugger/#method-setBreakpointByUrl */\nexport type DebuggerSetBreakpointByUrl = CdpMessage<\n  'Debugger.setBreakpointByUrl',\n  Protocol.Debugger.SetBreakpointByUrlRequest,\n  Protocol.Debugger.SetBreakpointByUrlResponse\n>;\n"],"mappings":"AAAA;;AAAA,IAAAA,eAAA,GAAAC,OAAA;AAAA,IAAAC,YAAA,GAAAD,OAAA;;;;IAWaE,uCAAuC;EAAA,SAAAA,wCAAA;IAAAH,eAAA,OAAAG,uCAAA;EAAA;EAAAD,YAAA,CAAAC,uCAAA;IAAAC,GAAA;IAAAC,KAAA,EAClD,SAAAC,kBACEC,OAAoD,EAAAC,IAAA,EAE3C;MAAA,IADPC,YAAY,GAAAD,IAAA,CAAZC,YAAY;MAEd,IACEA,YAAY,KAAK,QAAQ,IACzBF,OAAO,CAACG,MAAM,KAAK,6BAA6B,IAChDH,OAAO,CAACI,MAAM,CAACC,QAAQ,EACvB;QAEAL,OAAO,CAACI,MAAM,CAACE,GAAG,GAAG,wBAAwB;QAC7C,OAAON,OAAO,CAACI,MAAM,CAACC,QAAQ;;MAGhC,OAAO,KAAK;;EACb;EAAA,OAAAT,uCAAA;AAAA;QAhBUA,uCAAuC,GAAvCA,uCAAuC"},"metadata":{},"sourceType":"script","externalDependencies":[]}