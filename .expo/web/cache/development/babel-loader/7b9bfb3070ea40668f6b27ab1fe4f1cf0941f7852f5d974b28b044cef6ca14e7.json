{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/react-native-gesture-handler/lib/typescript/web/interfaces.d.ts"],"sourcesContent":["import { UserSelect } from '../handlers/gestureHandlerCommon';\nimport { Directions } from '../Directions';\nimport { State } from '../State';\nexport interface HitSlop {\n    left?: number;\n    right?: number;\n    top?: number;\n    bottom?: number;\n    horizontal?: number;\n    vertical?: number;\n    width?: number;\n    height?: number;\n}\nexport interface Handler {\n    handlerTag: number;\n}\ndeclare type ConfigArgs = number | boolean | HitSlop | UserSelect | Directions | Handler[] | null | undefined;\nexport interface Config extends Record<string, ConfigArgs> {\n    enabled?: boolean;\n    simultaneousHandlers?: Handler[] | null;\n    waitFor?: Handler[] | null;\n    hitSlop?: HitSlop;\n    shouldCancelWhenOutside?: boolean;\n    userSelect?: UserSelect;\n    activateAfterLongPress?: number;\n    failOffsetXStart?: number;\n    failOffsetYStart?: number;\n    failOffsetXEnd?: number;\n    failOffsetYEnd?: number;\n    activeOffsetXStart?: number;\n    activeOffsetXEnd?: number;\n    activeOffsetYStart?: number;\n    activeOffsetYEnd?: number;\n    minPointers?: number;\n    maxPointers?: number;\n    minDist?: number;\n    minDistSq?: number;\n    minVelocity?: number;\n    minVelocityX?: number;\n    minVelocityY?: number;\n    minVelocitySq?: number;\n    maxDist?: number;\n    maxDistSq?: number;\n    numberOfPointers?: number;\n    minDurationMs?: number;\n    numberOfTaps?: number;\n    maxDurationMs?: number;\n    maxDelayMs?: number;\n    maxDeltaX?: number;\n    maxDeltaY?: number;\n    shouldActivateOnStart?: boolean;\n    disallowInterruption?: boolean;\n    direction?: Directions;\n}\ndeclare type NativeEventArgs = number | State | boolean | undefined;\ninterface NativeEvent extends Record<string, NativeEventArgs> {\n    numberOfPointers: number;\n    state: State;\n    pointerInside: boolean | undefined;\n    handlerTag: number;\n    target: number;\n    oldState?: State;\n}\nexport interface PointerData {\n    id: number;\n    x: number;\n    y: number;\n    absoluteX: number;\n    absoluteY: number;\n}\ndeclare type TouchNativeArgs = number | State | TouchEventType | PointerData[];\ninterface NativeTouchEvent extends Record<string, TouchNativeArgs> {\n    handlerTag: number;\n    state: State;\n    eventType: TouchEventType;\n    changedTouches: PointerData[];\n    allTouches: PointerData[];\n    numberOfTouches: number;\n}\nexport interface ResultEvent extends Record<string, NativeEvent | number> {\n    nativeEvent: NativeEvent;\n    timeStamp: number;\n}\nexport interface ResultTouchEvent extends Record<string, NativeTouchEvent | number> {\n    nativeEvent: NativeTouchEvent;\n    timeStamp: number;\n}\nexport interface PropsRef {\n    onGestureHandlerEvent: () => void;\n    onGestureHandlerStateChange: () => void;\n}\nexport interface AdaptedEvent {\n    x: number;\n    y: number;\n    offsetX: number;\n    offsetY: number;\n    pointerId: number;\n    eventType: EventTypes;\n    pointerType: PointerType;\n    buttons: number;\n    time: number;\n    allTouches?: TouchList;\n    changedTouches?: TouchList;\n    touchEventType?: TouchEventType;\n}\nexport declare enum MouseButtons {\n    NONE = 0,\n    LEFT = 1,\n    RIGHT = 2,\n    LEFT_RIGHT = 3,\n    SCROLL = 4,\n    SCROLL_LEFT = 5,\n    SCROLL_RIGHT = 6,\n    SCROLL_LEFT_RIGHT = 7\n}\nexport declare enum EventTypes {\n    DOWN = 0,\n    ADDITIONAL_POINTER_DOWN = 1,\n    UP = 2,\n    ADDITIONAL_POINTER_UP = 3,\n    MOVE = 4,\n    ENTER = 5,\n    OUT = 6,\n    CANCEL = 7\n}\nexport declare enum TouchEventType {\n    UNDETERMINED = 0,\n    DOWN = 1,\n    MOVE = 2,\n    UP = 3,\n    CANCELLED = 4\n}\nexport declare enum PointerType {\n    NONE = \"none\",\n    MOUSE = \"mouse\",\n    TOUCH = \"touch\",\n    PEN = \"pen\"\n}\nexport {};\n"],"mappings":"AA0IA"},"metadata":{},"sourceType":"module","externalDependencies":[]}