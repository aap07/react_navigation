{"ast":null,"code":"\"use strict\";\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.patchFileAsync = exports.patchReactImportsAsync = void 0;\nvar fast_glob_1 = __importDefault(require(\"fast-glob\"));\nvar fs_extra_1 = __importDefault(require(\"fs-extra\"));\nvar path_1 = __importDefault(require(\"path\"));\nfunction patchReactImportsAsync(_x, _x2) {\n  return _patchReactImportsAsync.apply(this, arguments);\n}\nfunction _patchReactImportsAsync() {\n  _patchReactImportsAsync = _asyncToGenerator(function* (dirs, options) {\n    var headerSet = yield generateReactHeaderSetAsync(path_1.default.join(options.podsRoot, 'Headers', 'Public', 'React-Core', 'React'));\n    yield Promise.all(dirs.map(function (dir) {\n      return patchDirAsync(headerSet, dir, options.dryRun);\n    }));\n  });\n  return _patchReactImportsAsync.apply(this, arguments);\n}\nexports.patchReactImportsAsync = patchReactImportsAsync;\nfunction generateReactHeaderSetAsync(_x3) {\n  return _generateReactHeaderSetAsync.apply(this, arguments);\n}\nfunction _generateReactHeaderSetAsync() {\n  _generateReactHeaderSetAsync = _asyncToGenerator(function* (reactHeaderDir) {\n    var files = yield (0, fast_glob_1.default)('*.h', {\n      cwd: reactHeaderDir\n    });\n    return new Set(files);\n  });\n  return _generateReactHeaderSetAsync.apply(this, arguments);\n}\nfunction patchFileAsync(_x4, _x5, _x6) {\n  return _patchFileAsync.apply(this, arguments);\n}\nfunction _patchFileAsync() {\n  _patchFileAsync = _asyncToGenerator(function* (headerSet, file, dryRun) {\n    var changed = false;\n    var content = yield fs_extra_1.default.readFile(file, 'utf-8');\n    var transformContent = content.replace(/(?<=^\\s*)#import\\s+\"(.+)\"(?=\\s*$)/gm, function (match, headerName) {\n      if (headerSet.has(headerName)) {\n        changed = true;\n        return `#import <React/${headerName}>`;\n      }\n      if (headerName.startsWith('React/')) {\n        var name = headerName.substring(6);\n        if (headerSet.has(name)) {\n          changed = true;\n          return `#import <React/${name}>`;\n        }\n      }\n      return match;\n    });\n    transformContent = transformContent.replace(/(?<=^\\s*)#(if|elif)\\s+__has_include\\(\"(.+)\"\\)(?=\\s*$)/gm, function (match, ifPrefix, headerName) {\n      if (headerSet.has(headerName)) {\n        changed = true;\n        return `#${ifPrefix} __has_include(<React/${headerName}>)`;\n      }\n      if (headerName.startsWith('React/')) {\n        var name = headerName.substring(6);\n        if (headerSet.has(name)) {\n          changed = true;\n          return `#${ifPrefix} __has_include(<React/${name}>)`;\n        }\n      }\n      return match;\n    });\n    if (changed) {\n      console.log(`Patching imports for file: ${file}`);\n      if (!dryRun) {\n        yield fs_extra_1.default.writeFile(file, transformContent);\n      }\n    }\n  });\n  return _patchFileAsync.apply(this, arguments);\n}\nexports.patchFileAsync = patchFileAsync;\nfunction patchDirAsync(_x7, _x8, _x9) {\n  return _patchDirAsync.apply(this, arguments);\n}\nfunction _patchDirAsync() {\n  _patchDirAsync = _asyncToGenerator(function* (headerSet, dir, dryRun) {\n    var files = yield (0, fast_glob_1.default)('**/*.{h,m,mm}', {\n      cwd: dir,\n      absolute: true\n    });\n    return Promise.all(files.map(function (file) {\n      return patchFileAsync(headerSet, file, dryRun);\n    }));\n  });\n  return _patchDirAsync.apply(this, arguments);\n}","map":{"version":3,"names":["fast_glob_1","__importDefault","require","fs_extra_1","path_1","patchReactImportsAsync","_x","_x2","_patchReactImportsAsync","apply","arguments","_asyncToGenerator","dirs","options","headerSet","generateReactHeaderSetAsync","default","join","podsRoot","Promise","all","map","dir","patchDirAsync","dryRun","exports","_x3","_generateReactHeaderSetAsync","reactHeaderDir","files","cwd","Set","patchFileAsync","_x4","_x5","_x6","_patchFileAsync","file","changed","content","readFile","transformContent","replace","match","headerName","has","startsWith","name","substring","ifPrefix","console","log","writeFile","_x7","_x8","_x9","_patchDirAsync","absolute"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\expo-modules-autolinking\\src\\ReactImportsPatcher.ts"],"sourcesContent":["// Copyright 2018-present 650 Industries. All rights reserved.\n\nimport glob from 'fast-glob';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { PatchReactImportsOptions } from './types';\n\n/**\n * Remove all double-quoted react header imports\n * @param dirs target directories to patch\n * @param options PatchReactImportsOptions\n */\nexport async function patchReactImportsAsync(dirs: string[], options: PatchReactImportsOptions) {\n  const headerSet = await generateReactHeaderSetAsync(\n    path.join(options.podsRoot, 'Headers', 'Public', 'React-Core', 'React')\n  );\n  await Promise.all(dirs.map((dir) => patchDirAsync(headerSet, dir, options.dryRun)));\n}\n\n/**\n * Generate `React-Core` public header names as a set, will transform necessary headers based on this set.\n */\nasync function generateReactHeaderSetAsync(reactHeaderDir: string): Promise<Set<string>> {\n  const files = await glob('*.h', { cwd: reactHeaderDir });\n  return new Set(files);\n}\n\n/**\n * Patch imports from a file\n * @param headerSet prebuilt React-Core header set\n * @param file target patch file\n * @param dryRun true if not writing changes to file\n */\nexport async function patchFileAsync(headerSet: Set<string>, file: string, dryRun: boolean) {\n  let changed = false;\n  const content = await fs.readFile(file, 'utf-8');\n  let transformContent = content.replace(\n    /(?<=^\\s*)#import\\s+\"(.+)\"(?=\\s*$)/gm,\n    (match: string, headerName: string): string => {\n      // `#import \"RCTBridge.h\"` -> `#import <React/RCTBridge.h>`\n      if (headerSet.has(headerName)) {\n        changed = true;\n        return `#import <React/${headerName}>`;\n      }\n\n      // `#import \"React/RCTBridge.h\"` -> `#import <React/RCTBridge.h>`\n      if (headerName.startsWith('React/')) {\n        const name = headerName.substring(6);\n        if (headerSet.has(name)) {\n          changed = true;\n          return `#import <React/${name}>`;\n        }\n      }\n\n      // Otherwise, return original import\n      return match;\n    }\n  );\n\n  transformContent = transformContent.replace(\n    /(?<=^\\s*)#(if|elif)\\s+__has_include\\(\"(.+)\"\\)(?=\\s*$)/gm,\n    (match: string, ifPrefix: string, headerName: string): string => {\n      // `#if __has_include(\"RCTBridge.h\")` -> `#if __has_include(<React/RCTBridge.h>)`\n      if (headerSet.has(headerName)) {\n        changed = true;\n        return `#${ifPrefix} __has_include(<React/${headerName}>)`;\n      }\n\n      // `#if __has_include(\"React/RCTBridge.h\")` -> `#if __has_include(<React/RCTBridge.h>)`\n      if (headerName.startsWith('React/')) {\n        const name = headerName.substring(6);\n        if (headerSet.has(name)) {\n          changed = true;\n          return `#${ifPrefix} __has_include(<React/${name}>)`;\n        }\n      }\n\n      // Otherwise, return original import\n      return match;\n    }\n  );\n\n  if (changed) {\n    console.log(`Patching imports for file: ${file}`);\n    if (!dryRun) {\n      await fs.writeFile(file, transformContent);\n    }\n  }\n}\n\n/**\n * Patch imports from a directory\n * @param headerSet prebuilt React-Core header set\n * @param file target patch file\n * @param dryRun true if not writing changes to file\n */\nasync function patchDirAsync(headerSet: Set<string>, dir: string, dryRun: boolean) {\n  const files = await glob('**/*.{h,m,mm}', { cwd: dir, absolute: true });\n  return Promise.all(files.map((file) => patchFileAsync(headerSet, file, dryRun)));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}