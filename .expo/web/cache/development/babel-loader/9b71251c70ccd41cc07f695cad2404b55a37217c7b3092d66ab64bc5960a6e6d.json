{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatDeviceFamilies = formatDeviceFamilies;\nexports.getDeviceFamilies = getDeviceFamilies;\nexports.getIsTabletOnly = getIsTabletOnly;\nexports.getSupportsTablet = getSupportsTablet;\nexports.setDeviceFamily = setDeviceFamily;\nexports.withDeviceFamily = void 0;\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n  _warnings = function _warnings() {\n    return data;\n  };\n  return data;\n}\nvar withDeviceFamily = function withDeviceFamily(config) {\n  return (0, _iosPlugins().withXcodeProject)(config, function () {\n    var _ref = _asyncToGenerator(function* (config) {\n      config.modResults = yield setDeviceFamily(config, {\n        project: config.modResults\n      });\n      return config;\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};\nexports.withDeviceFamily = withDeviceFamily;\nfunction getSupportsTablet(config) {\n  var _config$ios;\n  return !!((_config$ios = config.ios) !== null && _config$ios !== void 0 && _config$ios.supportsTablet);\n}\nfunction getIsTabletOnly(config) {\n  var _config$ios2;\n  return !!(config !== null && config !== void 0 && (_config$ios2 = config.ios) !== null && _config$ios2 !== void 0 && _config$ios2.isTabletOnly);\n}\nfunction getDeviceFamilies(config) {\n  var _config$ios3;\n  var supportsTablet = getSupportsTablet(config);\n  var isTabletOnly = getIsTabletOnly(config);\n  if (isTabletOnly && ((_config$ios3 = config.ios) === null || _config$ios3 === void 0 ? void 0 : _config$ios3.supportsTablet) === false) {\n    (0, _warnings().addWarningIOS)('ios.supportsTablet', `Found contradictory values: \\`{ ios: { isTabletOnly: true, supportsTablet: false } }\\`. Using \\`{ isTabletOnly: true }\\`.`);\n  }\n  if (isTabletOnly) {\n    return [2];\n  } else if (supportsTablet) {\n    return [1, 2];\n  } else {\n    return [1];\n  }\n}\nfunction formatDeviceFamilies(deviceFamilies) {\n  return `\"${deviceFamilies.join(',')}\"`;\n}\nfunction setDeviceFamily(config, _ref2) {\n  var project = _ref2.project;\n  var deviceFamilies = formatDeviceFamilies(getDeviceFamilies(config));\n  var configurations = project.pbxXCBuildConfigurationSection();\n  for (var _ref3 of Object.values(configurations || {})) {\n    var buildSettings = _ref3.buildSettings;\n    if (typeof (buildSettings === null || buildSettings === void 0 ? void 0 : buildSettings.PRODUCT_NAME) !== 'undefined') {\n      buildSettings.TARGETED_DEVICE_FAMILY = deviceFamilies;\n    }\n  }\n  return project;\n}","map":{"version":3,"names":["_iosPlugins","data","require","_warnings","withDeviceFamily","config","withXcodeProject","_ref","_asyncToGenerator","modResults","setDeviceFamily","project","_x","apply","arguments","exports","getSupportsTablet","_config$ios","ios","supportsTablet","getIsTabletOnly","_config$ios2","isTabletOnly","getDeviceFamilies","_config$ios3","addWarningIOS","formatDeviceFamilies","deviceFamilies","join","_ref2","configurations","pbxXCBuildConfigurationSection","_ref3","Object","values","buildSettings","PRODUCT_NAME","TARGETED_DEVICE_FAMILY"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\ios\\DeviceFamily.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport { addWarningIOS } from '../utils/warnings';\n\nexport const withDeviceFamily: ConfigPlugin = (config) => {\n  return withXcodeProject(config, async (config) => {\n    config.modResults = await setDeviceFamily(config, {\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\nexport function getSupportsTablet(config: Pick<ExpoConfig, 'ios'>): boolean {\n  return !!config.ios?.supportsTablet;\n}\n\nexport function getIsTabletOnly(config: Pick<ExpoConfig, 'ios'>): boolean {\n  return !!config?.ios?.isTabletOnly;\n}\n\nexport function getDeviceFamilies(config: Pick<ExpoConfig, 'ios'>): number[] {\n  const supportsTablet = getSupportsTablet(config);\n  const isTabletOnly = getIsTabletOnly(config);\n\n  if (isTabletOnly && config.ios?.supportsTablet === false) {\n    addWarningIOS(\n      'ios.supportsTablet',\n      `Found contradictory values: \\`{ ios: { isTabletOnly: true, supportsTablet: false } }\\`. Using \\`{ isTabletOnly: true }\\`.`\n    );\n  }\n\n  // 1 is iPhone, 2 is iPad\n  if (isTabletOnly) {\n    return [2];\n  } else if (supportsTablet) {\n    return [1, 2];\n  } else {\n    // is iPhone only\n    return [1];\n  }\n}\n\n/**\n * Wrapping the families in double quotes is the only way to set a value with a comma in it.\n *\n * @param deviceFamilies\n */\nexport function formatDeviceFamilies(deviceFamilies: number[]): string {\n  return `\"${deviceFamilies.join(',')}\"`;\n}\n\n/**\n * Add to pbxproj under TARGETED_DEVICE_FAMILY\n */\nexport function setDeviceFamily(\n  config: Pick<ExpoConfig, 'ios'>,\n  { project }: { project: XcodeProject }\n): XcodeProject {\n  const deviceFamilies = formatDeviceFamilies(getDeviceFamilies(config));\n\n  const configurations = project.pbxXCBuildConfigurationSection();\n  // @ts-ignore\n  for (const { buildSettings } of Object.values(configurations || {})) {\n    // Guessing that this is the best way to emulate Xcode.\n    // Using `project.addToBuildSettings` modifies too many targets.\n    if (typeof buildSettings?.PRODUCT_NAME !== 'undefined') {\n      buildSettings.TARGETED_DEVICE_FAMILY = deviceFamilies;\n    }\n  }\n\n  return project;\n}\n"],"mappings":";;;;;;;;;;;;AAIA,SAAAA,YAAA;EAAA,IAAAC,IAAA,GAAAC,OAAA;EAAAF,WAAA,YAAAA,YAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAE,UAAA;EAAA,IAAAF,IAAA,GAAAC,OAAA;EAAAC,SAAA,YAAAA,UAAA;IAAA,OAAAF,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAEO,IAAMG,gBAA8B,GAAI,SAAlCA,gBAA8BA,CAAIC,MAAM,EAAK;EACxD,OAAO,IAAAL,WAAA,GAAAM,gBAAgB,EAACD,MAAM;IAAA,IAAAE,IAAA,GAAAC,iBAAA,CAAE,WAAOH,MAAM,EAAK;MAChDA,MAAM,CAACI,UAAU,SAASC,eAAe,CAACL,MAAM,EAAE;QAChDM,OAAO,EAAEN,MAAM,CAACI;MAClB,CAAC,CAAC;MACF,OAAOJ,MAAM;IACf,CAAC;IAAA,iBAAAO,EAAA;MAAA,OAAAL,IAAA,CAAAM,KAAA,OAAAC,SAAA;IAAA;EAAA,IAAC;AACJ,CAAC;AAACC,OAAA,CAAAX,gBAAA,GAAAA,gBAAA;AAEK,SAASY,iBAAiBA,CAACX,MAA+B,EAAW;EAAA,IAAAY,WAAA;EAC1E,OAAO,CAAC,GAAAA,WAAA,GAACZ,MAAM,CAACa,GAAG,cAAAD,WAAA,eAAVA,WAAA,CAAYE,cAAc;AACrC;AAEO,SAASC,eAAeA,CAACf,MAA+B,EAAW;EAAA,IAAAgB,YAAA;EACxE,OAAO,CAAC,EAAChB,MAAM,aAANA,MAAM,gBAAAgB,YAAA,GAANhB,MAAM,CAAEa,GAAG,cAAAG,YAAA,eAAXA,YAAA,CAAaC,YAAY;AACpC;AAEO,SAASC,iBAAiBA,CAAClB,MAA+B,EAAY;EAAA,IAAAmB,YAAA;EAC3E,IAAML,cAAc,GAAGH,iBAAiB,CAACX,MAAM,CAAC;EAChD,IAAMiB,YAAY,GAAGF,eAAe,CAACf,MAAM,CAAC;EAE5C,IAAIiB,YAAY,IAAI,EAAAE,YAAA,GAAAnB,MAAM,CAACa,GAAG,cAAAM,YAAA,uBAAVA,YAAA,CAAYL,cAAc,MAAK,KAAK,EAAE;IACxD,IAAAhB,SAAA,GAAAsB,aAAa,EACX,oBAAoB,EACnB,2HAA0H,CAC5H;EACH;EAGA,IAAIH,YAAY,EAAE;IAChB,OAAO,CAAC,CAAC,CAAC;EACZ,CAAC,MAAM,IAAIH,cAAc,EAAE;IACzB,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC;EACf,CAAC,MAAM;IAEL,OAAO,CAAC,CAAC,CAAC;EACZ;AACF;AAOO,SAASO,oBAAoBA,CAACC,cAAwB,EAAU;EACrE,OAAQ,IAAGA,cAAc,CAACC,IAAI,CAAC,GAAG,CAAE,GAAE;AACxC;AAKO,SAASlB,eAAeA,CAC7BL,MAA+B,EAAAwB,KAAA,EAEjB;EAAA,IADZlB,OAAA,GAAAkB,KAAA,CAAAlB,OAAA;EAEF,IAAMgB,cAAc,GAAGD,oBAAoB,CAACH,iBAAiB,CAAClB,MAAM,CAAC,CAAC;EAEtE,IAAMyB,cAAc,GAAGnB,OAAO,CAACoB,8BAA8B,EAAE;EAE/D,SAAAC,KAAA,IAAgCC,MAAM,CAACC,MAAM,CAACJ,cAAc,IAAI,CAAC,CAAC,CAAC,EAAE;IAAA,IAAxDK,aAAA,GAAAH,KAAA,CAAAG,aAAA;IAGX,IAAI,QAAOA,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEC,YAAY,MAAK,WAAW,EAAE;MACtDD,aAAa,CAACE,sBAAsB,GAAGV,cAAc;IACvD;EACF;EAEA,OAAOhB,OAAO;AAChB"},"metadata":{},"sourceType":"script","externalDependencies":[]}