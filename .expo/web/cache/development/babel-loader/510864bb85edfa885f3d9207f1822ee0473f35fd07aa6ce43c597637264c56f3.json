{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport path from 'path';\nimport url from 'url';\nimport createDebug from 'debug';\nimport assert from 'assert';\nimport getPort from 'get-port';\nimport http from 'http';\nimport { sync as glob } from 'glob';\nimport { readFileSync as readFile, existsSync as exists } from 'fs';\nimport { run } from \"../utils\";\nimport { isMac, isLinux, configDir, getLegacyConfigDir } from \"../constants\";\nimport UI from \"../user-interface\";\nimport { execSync as exec } from 'child_process';\nvar debug = createDebug('devcert:platforms:shared');\nfunction doForNSSCertDB(nssDirGlob, callback) {\n  glob(nssDirGlob).forEach(function (potentialNSSDBDir) {\n    debug(`checking to see if ${potentialNSSDBDir} is a valid NSS database directory`);\n    if (exists(path.join(potentialNSSDBDir, 'cert8.db'))) {\n      debug(`Found legacy NSS database in ${potentialNSSDBDir}, running callback...`);\n      callback(potentialNSSDBDir, 'legacy');\n    }\n    if (exists(path.join(potentialNSSDBDir, 'cert9.db'))) {\n      debug(`Found modern NSS database in ${potentialNSSDBDir}, running callback...`);\n      callback(potentialNSSDBDir, 'modern');\n    }\n  });\n}\nexport function addCertificateToNSSCertDB(nssDirGlob, certPath, certutilPath) {\n  debug(`trying to install certificate into NSS databases in ${nssDirGlob}`);\n  doForNSSCertDB(nssDirGlob, function (dir, version) {\n    var dirArg = version === 'modern' ? `sql:${dir}` : dir;\n    run(certutilPath, ['-A', '-d', dirArg, '-t', 'C,,', '-i', certPath, '-n', 'devcert']);\n  });\n  debug(`finished scanning & installing certificate in NSS databases in ${nssDirGlob}`);\n}\nexport function removeCertificateFromNSSCertDB(nssDirGlob, certPath, certutilPath) {\n  debug(`trying to remove certificates from NSS databases in ${nssDirGlob}`);\n  doForNSSCertDB(nssDirGlob, function (dir, version) {\n    var dirArg = version === 'modern' ? `sql:${dir}` : dir;\n    try {\n      run(certutilPath, ['-A', '-d', dirArg, '-t', 'C,,', '-i', certPath, '-n', 'devcert']);\n    } catch (e) {\n      debug(`failed to remove ${certPath} from ${dir}, continuing. ${e.toString()}`);\n    }\n  });\n  debug(`finished scanning & installing certificate in NSS databases in ${nssDirGlob}`);\n}\nexport function closeFirefox() {\n  return _closeFirefox.apply(this, arguments);\n}\nfunction _closeFirefox() {\n  _closeFirefox = _asyncToGenerator(function* () {\n    if (isFirefoxOpen()) {\n      yield UI.closeFirefoxBeforeContinuing();\n      while (isFirefoxOpen()) {\n        yield sleep(50);\n      }\n    }\n  });\n  return _closeFirefox.apply(this, arguments);\n}\nfunction isFirefoxOpen() {\n  assert(isMac || isLinux, 'checkForOpenFirefox was invoked on a platform other than Mac or Linux');\n  return exec('ps aux').indexOf('firefox') > -1;\n}\nfunction sleep(_x) {\n  return _sleep.apply(this, arguments);\n}\nfunction _sleep() {\n  _sleep = _asyncToGenerator(function* (ms) {\n    return new Promise(function (resolve) {\n      return setTimeout(resolve, ms);\n    });\n  });\n  return _sleep.apply(this, arguments);\n}\nexport function openCertificateInFirefox(_x2, _x3) {\n  return _openCertificateInFirefox.apply(this, arguments);\n}\nfunction _openCertificateInFirefox() {\n  _openCertificateInFirefox = _asyncToGenerator(function* (firefoxPath, certPath) {\n    debug('Adding devert to Firefox trust stores manually. Launching a webserver to host our certificate temporarily ...');\n    var port = yield getPort();\n    var server = http.createServer(function () {\n      var _ref = _asyncToGenerator(function* (req, res) {\n        var _url$parse = url.parse(req.url),\n          pathname = _url$parse.pathname;\n        if (pathname === '/certificate') {\n          res.writeHead(200, {\n            'Content-type': 'application/x-x509-ca-cert'\n          });\n          res.write(readFile(certPath));\n          res.end();\n        } else {\n          res.writeHead(200);\n          res.write(yield UI.firefoxWizardPromptPage(`http://localhost:${port}/certificate`));\n          res.end();\n        }\n      });\n      return function (_x4, _x5) {\n        return _ref.apply(this, arguments);\n      };\n    }()).listen(port);\n    debug('Certificate server is up. Printing instructions for user and launching Firefox with hosted certificate URL');\n    yield UI.startFirefoxWizard(`http://localhost:${port}`);\n    run(firefoxPath, [`http://localhost:${port}`]);\n    yield UI.waitForFirefoxWizard();\n    server.close();\n  });\n  return _openCertificateInFirefox.apply(this, arguments);\n}\nexport function assertNotTouchingFiles(filepath, operation) {\n  if (!filepath.startsWith(configDir) && !filepath.startsWith(getLegacyConfigDir())) {\n    throw new Error(`Devcert cannot ${operation} ${filepath}; it is outside known devcert config directories!`);\n  }\n}","map":{"version":3,"names":["path","url","createDebug","assert","getPort","http","sync","glob","readFileSync","readFile","existsSync","exists","run","isMac","isLinux","configDir","getLegacyConfigDir","UI","execSync","exec","debug","doForNSSCertDB","nssDirGlob","callback","forEach","potentialNSSDBDir","join","addCertificateToNSSCertDB","certPath","certutilPath","dir","version","dirArg","removeCertificateFromNSSCertDB","e","toString","closeFirefox","_closeFirefox","apply","arguments","_asyncToGenerator","isFirefoxOpen","closeFirefoxBeforeContinuing","sleep","indexOf","_x","_sleep","ms","Promise","resolve","setTimeout","openCertificateInFirefox","_x2","_x3","_openCertificateInFirefox","firefoxPath","port","server","createServer","_ref","req","res","_url$parse","parse","pathname","writeHead","write","end","firefoxWizardPromptPage","_x4","_x5","listen","startFirefoxWizard","waitForFirefoxWizard","close","assertNotTouchingFiles","filepath","operation","startsWith","Error"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/devcert/src/platforms/shared.ts"],"sourcesContent":["import path from 'path';\nimport url from 'url';\nimport createDebug from 'debug';\nimport assert from 'assert';\nimport getPort from 'get-port';\nimport http from 'http';\nimport { sync as glob } from 'glob';\nimport { readFileSync as readFile, existsSync as exists } from 'fs';\nimport { run } from '../utils';\nimport { isMac, isLinux , configDir, getLegacyConfigDir } from '../constants';\nimport UI from '../user-interface';\nimport { execSync as exec } from 'child_process';\n\nconst debug = createDebug('devcert:platforms:shared');\n\n/**\n *  Given a directory or glob pattern of directories, run a callback for each db\n *  directory, with a version argument.\n */\nfunction doForNSSCertDB(nssDirGlob: string, callback: (dir: string, version: \"legacy\" | \"modern\") => void): void {\n  glob(nssDirGlob).forEach((potentialNSSDBDir) => {\n    debug(`checking to see if ${ potentialNSSDBDir } is a valid NSS database directory`);\n    if (exists(path.join(potentialNSSDBDir, 'cert8.db'))) {\n      debug(`Found legacy NSS database in ${ potentialNSSDBDir }, running callback...`)\n      callback(potentialNSSDBDir, 'legacy');\n    }\n    if (exists(path.join(potentialNSSDBDir, 'cert9.db'))) {\n      debug(`Found modern NSS database in ${ potentialNSSDBDir }, running callback...`)\n      callback(potentialNSSDBDir, 'modern');\n    }\n  });\n}\n\n/**\n *  Given a directory or glob pattern of directories, attempt to install the\n *  CA certificate to each directory containing an NSS database.\n */\nexport function addCertificateToNSSCertDB(nssDirGlob: string, certPath: string, certutilPath: string): void {\n  debug(`trying to install certificate into NSS databases in ${ nssDirGlob }`);\n  doForNSSCertDB(nssDirGlob, (dir, version) => {\n    const dirArg = version === 'modern' ? `sql:${ dir }` : dir;\n      run(certutilPath, ['-A', '-d', dirArg, '-t', 'C,,', '-i', certPath, '-n', 'devcert']);\n  });\n  debug(`finished scanning & installing certificate in NSS databases in ${ nssDirGlob }`);\n}\n\nexport function removeCertificateFromNSSCertDB(nssDirGlob: string, certPath: string, certutilPath: string): void {\n  debug(`trying to remove certificates from NSS databases in ${ nssDirGlob }`);\n  doForNSSCertDB(nssDirGlob, (dir, version) => {\n    const dirArg = version === 'modern' ? `sql:${ dir }` : dir;\n    try {\n      run(certutilPath, ['-A', '-d', dirArg, '-t', 'C,,', '-i', certPath, '-n', 'devcert']);\n    } catch (e) {\n      debug(`failed to remove ${ certPath } from ${ dir }, continuing. ${ e.toString() }`)\n    }\n  });\n  debug(`finished scanning & installing certificate in NSS databases in ${ nssDirGlob }`);\n}\n\n/**\n *  Check to see if Firefox is still running, and if so, ask the user to close\n *  it. Poll until it's closed, then return.\n *\n * This is needed because Firefox appears to load the NSS database in-memory on\n * startup, and overwrite on exit. So we have to ask the user to quite Firefox\n * first so our changes don't get overwritten.\n */\nexport async function closeFirefox(): Promise<void> {\n  if (isFirefoxOpen()) {\n    await UI.closeFirefoxBeforeContinuing();\n    while(isFirefoxOpen()) {\n      await sleep(50);\n    }\n  }\n}\n\n/**\n * Check if Firefox is currently open\n */\nfunction isFirefoxOpen() {\n  // NOTE: We use some Windows-unfriendly methods here (ps) because Windows\n  // never needs to check this, because it doesn't update the NSS DB\n  // automaticaly.\n  assert(isMac || isLinux, 'checkForOpenFirefox was invoked on a platform other than Mac or Linux');\n  return exec('ps aux').indexOf('firefox') > -1;\n}\n\nasync function sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n/**\n * Firefox manages it's own trust store for SSL certificates, which can be\n * managed via the certutil command (supplied by NSS tooling packages). In the\n * event that certutil is not already installed, and either can't be installed\n * (Windows) or the user doesn't want to install it (skipCertutilInstall:\n * true), it means that we can't programmatically tell Firefox to trust our\n * root CA certificate.\n *\n * There is a recourse though. When a Firefox tab is directed to a URL that\n * responds with a certificate, it will automatically prompt the user if they\n * want to add it to their trusted certificates. So if we can't automatically\n * install the certificate via certutil, we instead start a quick web server\n * and host our certificate file. Then we open the hosted cert URL in Firefox\n * to kick off the GUI flow.\n *\n * This method does all this, along with providing user prompts in the terminal\n * to walk them through this process.\n */\nexport async function openCertificateInFirefox(firefoxPath: string, certPath: string): Promise<void> {\n  debug('Adding devert to Firefox trust stores manually. Launching a webserver to host our certificate temporarily ...');\n  let port = await getPort();\n  let server = http.createServer(async (req, res) => {\n    let { pathname } = url.parse(req.url);\n    if (pathname === '/certificate') {\n      res.writeHead(200, { 'Content-type': 'application/x-x509-ca-cert' });\n      res.write(readFile(certPath));\n      res.end();\n    } else {\n      res.writeHead(200);\n      res.write(await UI.firefoxWizardPromptPage(`http://localhost:${ port }/certificate`));\n      res.end();\n    }\n  }).listen(port);\n  debug('Certificate server is up. Printing instructions for user and launching Firefox with hosted certificate URL');\n  await UI.startFirefoxWizard(`http://localhost:${ port }`);\n  run(firefoxPath, [`http://localhost:${ port }`]);\n  await UI.waitForFirefoxWizard();\n  server.close();\n}\n\nexport function assertNotTouchingFiles(filepath: string, operation: string): void {\n    if (!filepath.startsWith(configDir) && !filepath.startsWith(getLegacyConfigDir())) {\n      throw new Error(`Devcert cannot ${ operation } ${ filepath }; it is outside known devcert config directories!`);\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}