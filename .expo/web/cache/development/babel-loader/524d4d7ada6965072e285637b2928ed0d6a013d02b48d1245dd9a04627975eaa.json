{"ast":null,"code":"var _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _require = require(\"./argument.js\"),\n  humanReadableArgName = _require.humanReadableArgName;\nvar Help = function () {\n  \"use strict\";\n\n  function Help() {\n    _classCallCheck(this, Help);\n    this.helpWidth = undefined;\n    this.sortSubcommands = false;\n    this.sortOptions = false;\n    this.showGlobalOptions = false;\n  }\n  _createClass(Help, [{\n    key: \"visibleCommands\",\n    value: function visibleCommands(cmd) {\n      var visibleCommands = cmd.commands.filter(function (cmd) {\n        return !cmd._hidden;\n      });\n      if (cmd._hasImplicitHelpCommand()) {\n        var _cmd$_helpCommandname = cmd._helpCommandnameAndArgs.match(/([^ ]+) *(.*)/),\n          _cmd$_helpCommandname2 = _slicedToArray(_cmd$_helpCommandname, 3),\n          helpName = _cmd$_helpCommandname2[1],\n          helpArgs = _cmd$_helpCommandname2[2];\n        var helpCommand = cmd.createCommand(helpName).helpOption(false);\n        helpCommand.description(cmd._helpCommandDescription);\n        if (helpArgs) helpCommand.arguments(helpArgs);\n        visibleCommands.push(helpCommand);\n      }\n      if (this.sortSubcommands) {\n        visibleCommands.sort(function (a, b) {\n          return a.name().localeCompare(b.name());\n        });\n      }\n      return visibleCommands;\n    }\n  }, {\n    key: \"compareOptions\",\n    value: function compareOptions(a, b) {\n      var getSortKey = function getSortKey(option) {\n        return option.short ? option.short.replace(/^-/, '') : option.long.replace(/^--/, '');\n      };\n      return getSortKey(a).localeCompare(getSortKey(b));\n    }\n  }, {\n    key: \"visibleOptions\",\n    value: function visibleOptions(cmd) {\n      var visibleOptions = cmd.options.filter(function (option) {\n        return !option.hidden;\n      });\n      var showShortHelpFlag = cmd._hasHelpOption && cmd._helpShortFlag && !cmd._findOption(cmd._helpShortFlag);\n      var showLongHelpFlag = cmd._hasHelpOption && !cmd._findOption(cmd._helpLongFlag);\n      if (showShortHelpFlag || showLongHelpFlag) {\n        var helpOption;\n        if (!showShortHelpFlag) {\n          helpOption = cmd.createOption(cmd._helpLongFlag, cmd._helpDescription);\n        } else if (!showLongHelpFlag) {\n          helpOption = cmd.createOption(cmd._helpShortFlag, cmd._helpDescription);\n        } else {\n          helpOption = cmd.createOption(cmd._helpFlags, cmd._helpDescription);\n        }\n        visibleOptions.push(helpOption);\n      }\n      if (this.sortOptions) {\n        visibleOptions.sort(this.compareOptions);\n      }\n      return visibleOptions;\n    }\n  }, {\n    key: \"visibleGlobalOptions\",\n    value: function visibleGlobalOptions(cmd) {\n      if (!this.showGlobalOptions) return [];\n      var globalOptions = [];\n      for (var parentCmd = cmd.parent; parentCmd; parentCmd = parentCmd.parent) {\n        var visibleOptions = parentCmd.options.filter(function (option) {\n          return !option.hidden;\n        });\n        globalOptions.push.apply(globalOptions, _toConsumableArray(visibleOptions));\n      }\n      if (this.sortOptions) {\n        globalOptions.sort(this.compareOptions);\n      }\n      return globalOptions;\n    }\n  }, {\n    key: \"visibleArguments\",\n    value: function visibleArguments(cmd) {\n      if (cmd._argsDescription) {\n        cmd._args.forEach(function (argument) {\n          argument.description = argument.description || cmd._argsDescription[argument.name()] || '';\n        });\n      }\n      if (cmd._args.find(function (argument) {\n        return argument.description;\n      })) {\n        return cmd._args;\n      }\n      return [];\n    }\n  }, {\n    key: \"subcommandTerm\",\n    value: function subcommandTerm(cmd) {\n      var args = cmd._args.map(function (arg) {\n        return humanReadableArgName(arg);\n      }).join(' ');\n      return cmd._name + (cmd._aliases[0] ? '|' + cmd._aliases[0] : '') + (cmd.options.length ? ' [options]' : '') + (args ? ' ' + args : '');\n    }\n  }, {\n    key: \"optionTerm\",\n    value: function optionTerm(option) {\n      return option.flags;\n    }\n  }, {\n    key: \"argumentTerm\",\n    value: function argumentTerm(argument) {\n      return argument.name();\n    }\n  }, {\n    key: \"longestSubcommandTermLength\",\n    value: function longestSubcommandTermLength(cmd, helper) {\n      return helper.visibleCommands(cmd).reduce(function (max, command) {\n        return Math.max(max, helper.subcommandTerm(command).length);\n      }, 0);\n    }\n  }, {\n    key: \"longestOptionTermLength\",\n    value: function longestOptionTermLength(cmd, helper) {\n      return helper.visibleOptions(cmd).reduce(function (max, option) {\n        return Math.max(max, helper.optionTerm(option).length);\n      }, 0);\n    }\n  }, {\n    key: \"longestGlobalOptionTermLength\",\n    value: function longestGlobalOptionTermLength(cmd, helper) {\n      return helper.visibleGlobalOptions(cmd).reduce(function (max, option) {\n        return Math.max(max, helper.optionTerm(option).length);\n      }, 0);\n    }\n  }, {\n    key: \"longestArgumentTermLength\",\n    value: function longestArgumentTermLength(cmd, helper) {\n      return helper.visibleArguments(cmd).reduce(function (max, argument) {\n        return Math.max(max, helper.argumentTerm(argument).length);\n      }, 0);\n    }\n  }, {\n    key: \"commandUsage\",\n    value: function commandUsage(cmd) {\n      var cmdName = cmd._name;\n      if (cmd._aliases[0]) {\n        cmdName = cmdName + '|' + cmd._aliases[0];\n      }\n      var parentCmdNames = '';\n      for (var parentCmd = cmd.parent; parentCmd; parentCmd = parentCmd.parent) {\n        parentCmdNames = parentCmd.name() + ' ' + parentCmdNames;\n      }\n      return parentCmdNames + cmdName + ' ' + cmd.usage();\n    }\n  }, {\n    key: \"commandDescription\",\n    value: function commandDescription(cmd) {\n      return cmd.description();\n    }\n  }, {\n    key: \"subcommandDescription\",\n    value: function subcommandDescription(cmd) {\n      return cmd.summary() || cmd.description();\n    }\n  }, {\n    key: \"optionDescription\",\n    value: function optionDescription(option) {\n      var extraInfo = [];\n      if (option.argChoices) {\n        extraInfo.push(`choices: ${option.argChoices.map(function (choice) {\n          return JSON.stringify(choice);\n        }).join(', ')}`);\n      }\n      if (option.defaultValue !== undefined) {\n        var showDefault = option.required || option.optional || option.isBoolean() && typeof option.defaultValue === 'boolean';\n        if (showDefault) {\n          extraInfo.push(`default: ${option.defaultValueDescription || JSON.stringify(option.defaultValue)}`);\n        }\n      }\n      if (option.presetArg !== undefined && option.optional) {\n        extraInfo.push(`preset: ${JSON.stringify(option.presetArg)}`);\n      }\n      if (option.envVar !== undefined) {\n        extraInfo.push(`env: ${option.envVar}`);\n      }\n      if (extraInfo.length > 0) {\n        return `${option.description} (${extraInfo.join(', ')})`;\n      }\n      return option.description;\n    }\n  }, {\n    key: \"argumentDescription\",\n    value: function argumentDescription(argument) {\n      var extraInfo = [];\n      if (argument.argChoices) {\n        extraInfo.push(`choices: ${argument.argChoices.map(function (choice) {\n          return JSON.stringify(choice);\n        }).join(', ')}`);\n      }\n      if (argument.defaultValue !== undefined) {\n        extraInfo.push(`default: ${argument.defaultValueDescription || JSON.stringify(argument.defaultValue)}`);\n      }\n      if (extraInfo.length > 0) {\n        var extraDescripton = `(${extraInfo.join(', ')})`;\n        if (argument.description) {\n          return `${argument.description} ${extraDescripton}`;\n        }\n        return extraDescripton;\n      }\n      return argument.description;\n    }\n  }, {\n    key: \"formatHelp\",\n    value: function formatHelp(cmd, helper) {\n      var termWidth = helper.padWidth(cmd, helper);\n      var helpWidth = helper.helpWidth || 80;\n      var itemIndentWidth = 2;\n      var itemSeparatorWidth = 2;\n      function formatItem(term, description) {\n        if (description) {\n          var fullText = `${term.padEnd(termWidth + itemSeparatorWidth)}${description}`;\n          return helper.wrap(fullText, helpWidth - itemIndentWidth, termWidth + itemSeparatorWidth);\n        }\n        return term;\n      }\n      function formatList(textArray) {\n        return textArray.join('\\n').replace(/^/gm, ' '.repeat(itemIndentWidth));\n      }\n      var output = [`Usage: ${helper.commandUsage(cmd)}`, ''];\n      var commandDescription = helper.commandDescription(cmd);\n      if (commandDescription.length > 0) {\n        output = output.concat([commandDescription, '']);\n      }\n      var argumentList = helper.visibleArguments(cmd).map(function (argument) {\n        return formatItem(helper.argumentTerm(argument), helper.argumentDescription(argument));\n      });\n      if (argumentList.length > 0) {\n        output = output.concat(['Arguments:', formatList(argumentList), '']);\n      }\n      var optionList = helper.visibleOptions(cmd).map(function (option) {\n        return formatItem(helper.optionTerm(option), helper.optionDescription(option));\n      });\n      if (optionList.length > 0) {\n        output = output.concat(['Options:', formatList(optionList), '']);\n      }\n      if (this.showGlobalOptions) {\n        var globalOptionList = helper.visibleGlobalOptions(cmd).map(function (option) {\n          return formatItem(helper.optionTerm(option), helper.optionDescription(option));\n        });\n        if (globalOptionList.length > 0) {\n          output = output.concat(['Global Options:', formatList(globalOptionList), '']);\n        }\n      }\n      var commandList = helper.visibleCommands(cmd).map(function (cmd) {\n        return formatItem(helper.subcommandTerm(cmd), helper.subcommandDescription(cmd));\n      });\n      if (commandList.length > 0) {\n        output = output.concat(['Commands:', formatList(commandList), '']);\n      }\n      return output.join('\\n');\n    }\n  }, {\n    key: \"padWidth\",\n    value: function padWidth(cmd, helper) {\n      return Math.max(helper.longestOptionTermLength(cmd, helper), helper.longestGlobalOptionTermLength(cmd, helper), helper.longestSubcommandTermLength(cmd, helper), helper.longestArgumentTermLength(cmd, helper));\n    }\n  }, {\n    key: \"wrap\",\n    value: function wrap(str, width, indent) {\n      var minColumnWidth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 40;\n      if (str.match(/[\\n]\\s+/)) return str;\n      var columnWidth = width - indent;\n      if (columnWidth < minColumnWidth) return str;\n      var leadingStr = str.slice(0, indent);\n      var columnText = str.slice(indent);\n      var indentString = ' '.repeat(indent);\n      var regex = new RegExp('.{1,' + (columnWidth - 1) + \"}([\\\\s\\u200B]|$)|[^\\\\s\\u200B]+?([\\\\s\\u200B]|$)\", 'g');\n      var lines = columnText.match(regex) || [];\n      return leadingStr + lines.map(function (line, i) {\n        if (line.slice(-1) === '\\n') {\n          line = line.slice(0, line.length - 1);\n        }\n        return (i > 0 ? indentString : '') + line.trimRight();\n      }).join('\\n');\n    }\n  }]);\n  return Help;\n}();\nexports.Help = Help;","map":{"version":3,"names":["_require","require","humanReadableArgName","Help","_classCallCheck","helpWidth","undefined","sortSubcommands","sortOptions","showGlobalOptions","_createClass","key","value","visibleCommands","cmd","commands","filter","_hidden","_hasImplicitHelpCommand","_cmd$_helpCommandname","_helpCommandnameAndArgs","match","_cmd$_helpCommandname2","_slicedToArray","helpName","helpArgs","helpCommand","createCommand","helpOption","description","_helpCommandDescription","arguments","push","sort","a","b","name","localeCompare","compareOptions","getSortKey","option","short","replace","long","visibleOptions","options","hidden","showShortHelpFlag","_hasHelpOption","_helpShortFlag","_findOption","showLongHelpFlag","_helpLongFlag","createOption","_helpDescription","_helpFlags","visibleGlobalOptions","globalOptions","parentCmd","parent","apply","_toConsumableArray","visibleArguments","_argsDescription","_args","forEach","argument","find","subcommandTerm","args","map","arg","join","_name","_aliases","length","optionTerm","flags","argumentTerm","longestSubcommandTermLength","helper","reduce","max","command","Math","longestOptionTermLength","longestGlobalOptionTermLength","longestArgumentTermLength","commandUsage","cmdName","parentCmdNames","usage","commandDescription","subcommandDescription","summary","optionDescription","extraInfo","argChoices","choice","JSON","stringify","defaultValue","showDefault","required","optional","isBoolean","defaultValueDescription","presetArg","envVar","argumentDescription","extraDescripton","formatHelp","termWidth","padWidth","itemIndentWidth","itemSeparatorWidth","formatItem","term","fullText","padEnd","wrap","formatList","textArray","repeat","output","concat","argumentList","optionList","globalOptionList","commandList","str","width","indent","minColumnWidth","columnWidth","leadingStr","slice","columnText","indentString","regex","RegExp","lines","line","i","trimRight","exports"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli/node_modules/commander/lib/help.js"],"sourcesContent":["const { humanReadableArgName } = require('./argument.js');\n\n/**\n * TypeScript import types for JSDoc, used by Visual Studio Code IntelliSense and `npm run typescript-checkJS`\n * https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#import-types\n * @typedef { import(\"./argument.js\").Argument } Argument\n * @typedef { import(\"./command.js\").Command } Command\n * @typedef { import(\"./option.js\").Option } Option\n */\n\n// @ts-check\n\n// Although this is a class, methods are static in style to allow override using subclass or just functions.\nclass Help {\n  constructor() {\n    this.helpWidth = undefined;\n    this.sortSubcommands = false;\n    this.sortOptions = false;\n    this.showGlobalOptions = false;\n  }\n\n  /**\n   * Get an array of the visible subcommands. Includes a placeholder for the implicit help command, if there is one.\n   *\n   * @param {Command} cmd\n   * @returns {Command[]}\n   */\n\n  visibleCommands(cmd) {\n    const visibleCommands = cmd.commands.filter(cmd => !cmd._hidden);\n    if (cmd._hasImplicitHelpCommand()) {\n      // Create a command matching the implicit help command.\n      const [, helpName, helpArgs] = cmd._helpCommandnameAndArgs.match(/([^ ]+) *(.*)/);\n      const helpCommand = cmd.createCommand(helpName)\n        .helpOption(false);\n      helpCommand.description(cmd._helpCommandDescription);\n      if (helpArgs) helpCommand.arguments(helpArgs);\n      visibleCommands.push(helpCommand);\n    }\n    if (this.sortSubcommands) {\n      visibleCommands.sort((a, b) => {\n        // @ts-ignore: overloaded return type\n        return a.name().localeCompare(b.name());\n      });\n    }\n    return visibleCommands;\n  }\n\n  /**\n   * Compare options for sort.\n   *\n   * @param {Option} a\n   * @param {Option} b\n   * @returns number\n   */\n  compareOptions(a, b) {\n    const getSortKey = (option) => {\n      // WYSIWYG for order displayed in help. Short used for comparison if present. No special handling for negated.\n      return option.short ? option.short.replace(/^-/, '') : option.long.replace(/^--/, '');\n    };\n    return getSortKey(a).localeCompare(getSortKey(b));\n  }\n\n  /**\n   * Get an array of the visible options. Includes a placeholder for the implicit help option, if there is one.\n   *\n   * @param {Command} cmd\n   * @returns {Option[]}\n   */\n\n  visibleOptions(cmd) {\n    const visibleOptions = cmd.options.filter((option) => !option.hidden);\n    // Implicit help\n    const showShortHelpFlag = cmd._hasHelpOption && cmd._helpShortFlag && !cmd._findOption(cmd._helpShortFlag);\n    const showLongHelpFlag = cmd._hasHelpOption && !cmd._findOption(cmd._helpLongFlag);\n    if (showShortHelpFlag || showLongHelpFlag) {\n      let helpOption;\n      if (!showShortHelpFlag) {\n        helpOption = cmd.createOption(cmd._helpLongFlag, cmd._helpDescription);\n      } else if (!showLongHelpFlag) {\n        helpOption = cmd.createOption(cmd._helpShortFlag, cmd._helpDescription);\n      } else {\n        helpOption = cmd.createOption(cmd._helpFlags, cmd._helpDescription);\n      }\n      visibleOptions.push(helpOption);\n    }\n    if (this.sortOptions) {\n      visibleOptions.sort(this.compareOptions);\n    }\n    return visibleOptions;\n  }\n\n  /**\n   * Get an array of the visible global options. (Not including help.)\n   *\n   * @param {Command} cmd\n   * @returns {Option[]}\n   */\n\n  visibleGlobalOptions(cmd) {\n    if (!this.showGlobalOptions) return [];\n\n    const globalOptions = [];\n    for (let parentCmd = cmd.parent; parentCmd; parentCmd = parentCmd.parent) {\n      const visibleOptions = parentCmd.options.filter((option) => !option.hidden);\n      globalOptions.push(...visibleOptions);\n    }\n    if (this.sortOptions) {\n      globalOptions.sort(this.compareOptions);\n    }\n    return globalOptions;\n  }\n\n  /**\n   * Get an array of the arguments if any have a description.\n   *\n   * @param {Command} cmd\n   * @returns {Argument[]}\n   */\n\n  visibleArguments(cmd) {\n    // Side effect! Apply the legacy descriptions before the arguments are displayed.\n    if (cmd._argsDescription) {\n      cmd._args.forEach(argument => {\n        argument.description = argument.description || cmd._argsDescription[argument.name()] || '';\n      });\n    }\n\n    // If there are any arguments with a description then return all the arguments.\n    if (cmd._args.find(argument => argument.description)) {\n      return cmd._args;\n    }\n    return [];\n  }\n\n  /**\n   * Get the command term to show in the list of subcommands.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  subcommandTerm(cmd) {\n    // Legacy. Ignores custom usage string, and nested commands.\n    const args = cmd._args.map(arg => humanReadableArgName(arg)).join(' ');\n    return cmd._name +\n      (cmd._aliases[0] ? '|' + cmd._aliases[0] : '') +\n      (cmd.options.length ? ' [options]' : '') + // simplistic check for non-help option\n      (args ? ' ' + args : '');\n  }\n\n  /**\n   * Get the option term to show in the list of options.\n   *\n   * @param {Option} option\n   * @returns {string}\n   */\n\n  optionTerm(option) {\n    return option.flags;\n  }\n\n  /**\n   * Get the argument term to show in the list of arguments.\n   *\n   * @param {Argument} argument\n   * @returns {string}\n   */\n\n  argumentTerm(argument) {\n    return argument.name();\n  }\n\n  /**\n   * Get the longest command term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestSubcommandTermLength(cmd, helper) {\n    return helper.visibleCommands(cmd).reduce((max, command) => {\n      return Math.max(max, helper.subcommandTerm(command).length);\n    }, 0);\n  }\n\n  /**\n   * Get the longest option term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestOptionTermLength(cmd, helper) {\n    return helper.visibleOptions(cmd).reduce((max, option) => {\n      return Math.max(max, helper.optionTerm(option).length);\n    }, 0);\n  }\n\n  /**\n   * Get the longest global option term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestGlobalOptionTermLength(cmd, helper) {\n    return helper.visibleGlobalOptions(cmd).reduce((max, option) => {\n      return Math.max(max, helper.optionTerm(option).length);\n    }, 0);\n  }\n\n  /**\n   * Get the longest argument term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  longestArgumentTermLength(cmd, helper) {\n    return helper.visibleArguments(cmd).reduce((max, argument) => {\n      return Math.max(max, helper.argumentTerm(argument).length);\n    }, 0);\n  }\n\n  /**\n   * Get the command usage to be displayed at the top of the built-in help.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  commandUsage(cmd) {\n    // Usage\n    let cmdName = cmd._name;\n    if (cmd._aliases[0]) {\n      cmdName = cmdName + '|' + cmd._aliases[0];\n    }\n    let parentCmdNames = '';\n    for (let parentCmd = cmd.parent; parentCmd; parentCmd = parentCmd.parent) {\n      parentCmdNames = parentCmd.name() + ' ' + parentCmdNames;\n    }\n    return parentCmdNames + cmdName + ' ' + cmd.usage();\n  }\n\n  /**\n   * Get the description for the command.\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  commandDescription(cmd) {\n    // @ts-ignore: overloaded return type\n    return cmd.description();\n  }\n\n  /**\n   * Get the subcommand summary to show in the list of subcommands.\n   * (Fallback to description for backwards compatibility.)\n   *\n   * @param {Command} cmd\n   * @returns {string}\n   */\n\n  subcommandDescription(cmd) {\n    // @ts-ignore: overloaded return type\n    return cmd.summary() || cmd.description();\n  }\n\n  /**\n   * Get the option description to show in the list of options.\n   *\n   * @param {Option} option\n   * @return {string}\n   */\n\n  optionDescription(option) {\n    const extraInfo = [];\n\n    if (option.argChoices) {\n      extraInfo.push(\n        // use stringify to match the display of the default value\n        `choices: ${option.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`);\n    }\n    if (option.defaultValue !== undefined) {\n      // default for boolean and negated more for programmer than end user,\n      // but show true/false for boolean option as may be for hand-rolled env or config processing.\n      const showDefault = option.required || option.optional ||\n        (option.isBoolean() && typeof option.defaultValue === 'boolean');\n      if (showDefault) {\n        extraInfo.push(`default: ${option.defaultValueDescription || JSON.stringify(option.defaultValue)}`);\n      }\n    }\n    // preset for boolean and negated are more for programmer than end user\n    if (option.presetArg !== undefined && option.optional) {\n      extraInfo.push(`preset: ${JSON.stringify(option.presetArg)}`);\n    }\n    if (option.envVar !== undefined) {\n      extraInfo.push(`env: ${option.envVar}`);\n    }\n    if (extraInfo.length > 0) {\n      return `${option.description} (${extraInfo.join(', ')})`;\n    }\n\n    return option.description;\n  }\n\n  /**\n   * Get the argument description to show in the list of arguments.\n   *\n   * @param {Argument} argument\n   * @return {string}\n   */\n\n  argumentDescription(argument) {\n    const extraInfo = [];\n    if (argument.argChoices) {\n      extraInfo.push(\n        // use stringify to match the display of the default value\n        `choices: ${argument.argChoices.map((choice) => JSON.stringify(choice)).join(', ')}`);\n    }\n    if (argument.defaultValue !== undefined) {\n      extraInfo.push(`default: ${argument.defaultValueDescription || JSON.stringify(argument.defaultValue)}`);\n    }\n    if (extraInfo.length > 0) {\n      const extraDescripton = `(${extraInfo.join(', ')})`;\n      if (argument.description) {\n        return `${argument.description} ${extraDescripton}`;\n      }\n      return extraDescripton;\n    }\n    return argument.description;\n  }\n\n  /**\n   * Generate the built-in help text.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {string}\n   */\n\n  formatHelp(cmd, helper) {\n    const termWidth = helper.padWidth(cmd, helper);\n    const helpWidth = helper.helpWidth || 80;\n    const itemIndentWidth = 2;\n    const itemSeparatorWidth = 2; // between term and description\n    function formatItem(term, description) {\n      if (description) {\n        const fullText = `${term.padEnd(termWidth + itemSeparatorWidth)}${description}`;\n        return helper.wrap(fullText, helpWidth - itemIndentWidth, termWidth + itemSeparatorWidth);\n      }\n      return term;\n    }\n    function formatList(textArray) {\n      return textArray.join('\\n').replace(/^/gm, ' '.repeat(itemIndentWidth));\n    }\n\n    // Usage\n    let output = [`Usage: ${helper.commandUsage(cmd)}`, ''];\n\n    // Description\n    const commandDescription = helper.commandDescription(cmd);\n    if (commandDescription.length > 0) {\n      output = output.concat([commandDescription, '']);\n    }\n\n    // Arguments\n    const argumentList = helper.visibleArguments(cmd).map((argument) => {\n      return formatItem(helper.argumentTerm(argument), helper.argumentDescription(argument));\n    });\n    if (argumentList.length > 0) {\n      output = output.concat(['Arguments:', formatList(argumentList), '']);\n    }\n\n    // Options\n    const optionList = helper.visibleOptions(cmd).map((option) => {\n      return formatItem(helper.optionTerm(option), helper.optionDescription(option));\n    });\n    if (optionList.length > 0) {\n      output = output.concat(['Options:', formatList(optionList), '']);\n    }\n\n    if (this.showGlobalOptions) {\n      const globalOptionList = helper.visibleGlobalOptions(cmd).map((option) => {\n        return formatItem(helper.optionTerm(option), helper.optionDescription(option));\n      });\n      if (globalOptionList.length > 0) {\n        output = output.concat(['Global Options:', formatList(globalOptionList), '']);\n      }\n    }\n\n    // Commands\n    const commandList = helper.visibleCommands(cmd).map((cmd) => {\n      return formatItem(helper.subcommandTerm(cmd), helper.subcommandDescription(cmd));\n    });\n    if (commandList.length > 0) {\n      output = output.concat(['Commands:', formatList(commandList), '']);\n    }\n\n    return output.join('\\n');\n  }\n\n  /**\n   * Calculate the pad width from the maximum term length.\n   *\n   * @param {Command} cmd\n   * @param {Help} helper\n   * @returns {number}\n   */\n\n  padWidth(cmd, helper) {\n    return Math.max(\n      helper.longestOptionTermLength(cmd, helper),\n      helper.longestGlobalOptionTermLength(cmd, helper),\n      helper.longestSubcommandTermLength(cmd, helper),\n      helper.longestArgumentTermLength(cmd, helper)\n    );\n  }\n\n  /**\n   * Wrap the given string to width characters per line, with lines after the first indented.\n   * Do not wrap if insufficient room for wrapping (minColumnWidth), or string is manually formatted.\n   *\n   * @param {string} str\n   * @param {number} width\n   * @param {number} indent\n   * @param {number} [minColumnWidth=40]\n   * @return {string}\n   *\n   */\n\n  wrap(str, width, indent, minColumnWidth = 40) {\n    // Detect manually wrapped and indented strings by searching for line breaks\n    // followed by multiple spaces/tabs.\n    if (str.match(/[\\n]\\s+/)) return str;\n    // Do not wrap if not enough room for a wrapped column of text (as could end up with a word per line).\n    const columnWidth = width - indent;\n    if (columnWidth < minColumnWidth) return str;\n\n    const leadingStr = str.slice(0, indent);\n    const columnText = str.slice(indent);\n\n    const indentString = ' '.repeat(indent);\n    const regex = new RegExp('.{1,' + (columnWidth - 1) + '}([\\\\s\\u200B]|$)|[^\\\\s\\u200B]+?([\\\\s\\u200B]|$)', 'g');\n    const lines = columnText.match(regex) || [];\n    return leadingStr + lines.map((line, i) => {\n      if (line.slice(-1) === '\\n') {\n        line = line.slice(0, line.length - 1);\n      }\n      return ((i > 0) ? indentString : '') + line.trimRight();\n    }).join('\\n');\n  }\n}\n\nexports.Help = Help;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}