{"ast":null,"code":"'use strict';\n\nvar _require = require(\"../Utils\"),\n  getEnumName = _require.getEnumName,\n  toSafeCppString = _require.toSafeCppString;\nfunction toIntEnumValueName(propName, value) {\n  return `${toSafeCppString(propName)}${value}`;\n}\nfunction getCppTypeForAnnotation(type) {\n  switch (type) {\n    case 'BooleanTypeAnnotation':\n      return 'bool';\n    case 'StringTypeAnnotation':\n      return 'std::string';\n    case 'Int32TypeAnnotation':\n      return 'int';\n    case 'DoubleTypeAnnotation':\n      return 'double';\n    case 'FloatTypeAnnotation':\n      return 'Float';\n    default:\n      type;\n      throw new Error(`Received invalid typeAnnotation ${type}`);\n  }\n}\nfunction getImports(properties) {\n  var imports = new Set();\n  function addImportsForNativeName(name) {\n    switch (name) {\n      case 'ColorPrimitive':\n        return;\n      case 'PointPrimitive':\n        return;\n      case 'EdgeInsetsPrimitive':\n        return;\n      case 'ImageRequestPrimitive':\n        return;\n      case 'ImageSourcePrimitive':\n        imports.add('#include <react/renderer/components/image/conversions.h>');\n        return;\n      case 'DimensionPrimitive':\n        imports.add('#include <react/renderer/components/view/conversions.h>');\n        return;\n      default:\n        name;\n        throw new Error(`Invalid name, got ${name}`);\n    }\n  }\n  properties.forEach(function (prop) {\n    var typeAnnotation = prop.typeAnnotation;\n    if (typeAnnotation.type === 'ReservedPropTypeAnnotation') {\n      addImportsForNativeName(typeAnnotation.name);\n    }\n    if (typeAnnotation.type === 'ArrayTypeAnnotation' && typeAnnotation.elementType.type === 'ReservedPropTypeAnnotation') {\n      addImportsForNativeName(typeAnnotation.elementType.name);\n    }\n    if (typeAnnotation.type === 'ObjectTypeAnnotation') {\n      var objectImports = getImports(typeAnnotation.properties);\n      objectImports.forEach(imports.add, imports);\n    }\n  });\n  return imports;\n}\nfunction generateEventStructName() {\n  var parts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var additional = parts.map(toSafeCppString).join('');\n  return `${additional}`;\n}\nfunction generateStructName(componentName) {\n  var parts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var additional = parts.map(toSafeCppString).join('');\n  return `${componentName}${additional}Struct`;\n}\nfunction getEnumMaskName(enumName) {\n  return `${enumName}Mask`;\n}\nfunction convertDefaultTypeToString(componentName, prop) {\n  var typeAnnotation = prop.typeAnnotation;\n  switch (typeAnnotation.type) {\n    case 'BooleanTypeAnnotation':\n      if (typeAnnotation.default == null) {\n        return '';\n      }\n      return String(typeAnnotation.default);\n    case 'StringTypeAnnotation':\n      if (typeAnnotation.default == null) {\n        return '';\n      }\n      return `\"${typeAnnotation.default}\"`;\n    case 'Int32TypeAnnotation':\n      return String(typeAnnotation.default);\n    case 'DoubleTypeAnnotation':\n      var defaultDoubleVal = typeAnnotation.default;\n      return parseInt(defaultDoubleVal, 10) === defaultDoubleVal ? typeAnnotation.default.toFixed(1) : String(typeAnnotation.default);\n    case 'FloatTypeAnnotation':\n      var defaultFloatVal = typeAnnotation.default;\n      if (defaultFloatVal == null) {\n        return '';\n      }\n      return parseInt(defaultFloatVal, 10) === defaultFloatVal ? defaultFloatVal.toFixed(1) : String(typeAnnotation.default);\n    case 'ReservedPropTypeAnnotation':\n      switch (typeAnnotation.name) {\n        case 'ColorPrimitive':\n          return '';\n        case 'ImageSourcePrimitive':\n          return '';\n        case 'ImageRequestPrimitive':\n          return '';\n        case 'PointPrimitive':\n          return '';\n        case 'EdgeInsetsPrimitive':\n          return '';\n        case 'DimensionPrimitive':\n          return '';\n        default:\n          typeAnnotation.name;\n          throw new Error(`Unsupported type annotation: ${typeAnnotation.name}`);\n      }\n    case 'ArrayTypeAnnotation':\n      {\n        var elementType = typeAnnotation.elementType;\n        switch (elementType.type) {\n          case 'StringEnumTypeAnnotation':\n            if (elementType.default == null) {\n              throw new Error('A default is required for array StringEnumTypeAnnotation');\n            }\n            var enumName = getEnumName(componentName, prop.name);\n            var enumMaskName = getEnumMaskName(enumName);\n            var defaultValue = `${enumName}::${toSafeCppString(elementType.default)}`;\n            return `static_cast<${enumMaskName}>(${defaultValue})`;\n          default:\n            return '';\n        }\n      }\n    case 'ObjectTypeAnnotation':\n      {\n        return '';\n      }\n    case 'StringEnumTypeAnnotation':\n      return `${getEnumName(componentName, prop.name)}::${toSafeCppString(typeAnnotation.default)}`;\n    case 'Int32EnumTypeAnnotation':\n      return `${getEnumName(componentName, prop.name)}::${toIntEnumValueName(prop.name, typeAnnotation.default)}`;\n    case 'MixedTypeAnnotation':\n      return '';\n    default:\n      typeAnnotation;\n      throw new Error(`Unsupported type annotation: ${typeAnnotation.type}`);\n  }\n}\nmodule.exports = {\n  convertDefaultTypeToString: convertDefaultTypeToString,\n  getCppTypeForAnnotation: getCppTypeForAnnotation,\n  getEnumMaskName: getEnumMaskName,\n  getImports: getImports,\n  toIntEnumValueName: toIntEnumValueName,\n  generateStructName: generateStructName,\n  generateEventStructName: generateEventStructName\n};","map":{"version":3,"names":["_require","require","getEnumName","toSafeCppString","toIntEnumValueName","propName","value","getCppTypeForAnnotation","type","Error","getImports","properties","imports","Set","addImportsForNativeName","name","add","forEach","prop","typeAnnotation","elementType","objectImports","generateEventStructName","parts","arguments","length","undefined","additional","map","join","generateStructName","componentName","getEnumMaskName","enumName","convertDefaultTypeToString","default","String","defaultDoubleVal","parseInt","toFixed","defaultFloatVal","enumMaskName","defaultValue","module","exports"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native/codegen/lib/generators/components/CppHelpers.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * @format\n */\n\n'use strict';\n\nconst _require = require('../Utils'),\n  getEnumName = _require.getEnumName,\n  toSafeCppString = _require.toSafeCppString;\nfunction toIntEnumValueName(propName, value) {\n  return `${toSafeCppString(propName)}${value}`;\n}\nfunction getCppTypeForAnnotation(type) {\n  switch (type) {\n    case 'BooleanTypeAnnotation':\n      return 'bool';\n    case 'StringTypeAnnotation':\n      return 'std::string';\n    case 'Int32TypeAnnotation':\n      return 'int';\n    case 'DoubleTypeAnnotation':\n      return 'double';\n    case 'FloatTypeAnnotation':\n      return 'Float';\n    default:\n      type;\n      throw new Error(`Received invalid typeAnnotation ${type}`);\n  }\n}\nfunction getImports(properties) {\n  const imports = new Set();\n  function addImportsForNativeName(name) {\n    switch (name) {\n      case 'ColorPrimitive':\n        return;\n      case 'PointPrimitive':\n        return;\n      case 'EdgeInsetsPrimitive':\n        return;\n      case 'ImageRequestPrimitive':\n        return;\n      case 'ImageSourcePrimitive':\n        imports.add('#include <react/renderer/components/image/conversions.h>');\n        return;\n      case 'DimensionPrimitive':\n        imports.add('#include <react/renderer/components/view/conversions.h>');\n        return;\n      default:\n        name;\n        throw new Error(`Invalid name, got ${name}`);\n    }\n  }\n  properties.forEach(prop => {\n    const typeAnnotation = prop.typeAnnotation;\n    if (typeAnnotation.type === 'ReservedPropTypeAnnotation') {\n      addImportsForNativeName(typeAnnotation.name);\n    }\n    if (\n      typeAnnotation.type === 'ArrayTypeAnnotation' &&\n      typeAnnotation.elementType.type === 'ReservedPropTypeAnnotation'\n    ) {\n      addImportsForNativeName(typeAnnotation.elementType.name);\n    }\n    if (typeAnnotation.type === 'ObjectTypeAnnotation') {\n      const objectImports = getImports(typeAnnotation.properties);\n      // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n      objectImports.forEach(imports.add, imports);\n    }\n  });\n  return imports;\n}\nfunction generateEventStructName(parts = []) {\n  const additional = parts.map(toSafeCppString).join('');\n  return `${additional}`;\n}\nfunction generateStructName(componentName, parts = []) {\n  const additional = parts.map(toSafeCppString).join('');\n  return `${componentName}${additional}Struct`;\n}\nfunction getEnumMaskName(enumName) {\n  return `${enumName}Mask`;\n}\nfunction convertDefaultTypeToString(componentName, prop) {\n  const typeAnnotation = prop.typeAnnotation;\n  switch (typeAnnotation.type) {\n    case 'BooleanTypeAnnotation':\n      if (typeAnnotation.default == null) {\n        return '';\n      }\n      return String(typeAnnotation.default);\n    case 'StringTypeAnnotation':\n      if (typeAnnotation.default == null) {\n        return '';\n      }\n      return `\"${typeAnnotation.default}\"`;\n    case 'Int32TypeAnnotation':\n      return String(typeAnnotation.default);\n    case 'DoubleTypeAnnotation':\n      const defaultDoubleVal = typeAnnotation.default;\n      return parseInt(defaultDoubleVal, 10) === defaultDoubleVal\n        ? typeAnnotation.default.toFixed(1)\n        : String(typeAnnotation.default);\n    case 'FloatTypeAnnotation':\n      const defaultFloatVal = typeAnnotation.default;\n      if (defaultFloatVal == null) {\n        return '';\n      }\n      return parseInt(defaultFloatVal, 10) === defaultFloatVal\n        ? defaultFloatVal.toFixed(1)\n        : String(typeAnnotation.default);\n    case 'ReservedPropTypeAnnotation':\n      switch (typeAnnotation.name) {\n        case 'ColorPrimitive':\n          return '';\n        case 'ImageSourcePrimitive':\n          return '';\n        case 'ImageRequestPrimitive':\n          return '';\n        case 'PointPrimitive':\n          return '';\n        case 'EdgeInsetsPrimitive':\n          return '';\n        case 'DimensionPrimitive':\n          return '';\n        default:\n          typeAnnotation.name;\n          throw new Error(\n            `Unsupported type annotation: ${typeAnnotation.name}`,\n          );\n      }\n    case 'ArrayTypeAnnotation': {\n      const elementType = typeAnnotation.elementType;\n      switch (elementType.type) {\n        case 'StringEnumTypeAnnotation':\n          if (elementType.default == null) {\n            throw new Error(\n              'A default is required for array StringEnumTypeAnnotation',\n            );\n          }\n          const enumName = getEnumName(componentName, prop.name);\n          const enumMaskName = getEnumMaskName(enumName);\n          const defaultValue = `${enumName}::${toSafeCppString(\n            elementType.default,\n          )}`;\n          return `static_cast<${enumMaskName}>(${defaultValue})`;\n        default:\n          return '';\n      }\n    }\n    case 'ObjectTypeAnnotation': {\n      return '';\n    }\n    case 'StringEnumTypeAnnotation':\n      return `${getEnumName(componentName, prop.name)}::${toSafeCppString(\n        typeAnnotation.default,\n      )}`;\n    case 'Int32EnumTypeAnnotation':\n      return `${getEnumName(componentName, prop.name)}::${toIntEnumValueName(\n        prop.name,\n        typeAnnotation.default,\n      )}`;\n    case 'MixedTypeAnnotation':\n      return '';\n    default:\n      typeAnnotation;\n      throw new Error(`Unsupported type annotation: ${typeAnnotation.type}`);\n  }\n}\nmodule.exports = {\n  convertDefaultTypeToString,\n  getCppTypeForAnnotation,\n  getEnumMaskName,\n  getImports,\n  toIntEnumValueName,\n  generateStructName,\n  generateEventStructName,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}