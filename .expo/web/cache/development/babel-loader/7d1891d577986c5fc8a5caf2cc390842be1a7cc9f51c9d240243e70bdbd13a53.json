{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.waitForMetroToObserveTypeScriptFile = waitForMetroToObserveTypeScriptFile;\nexports.observeFileChanges = observeFileChanges;\nvar _path = _interopRequireDefault(require(\"path\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = require(\"debug\")(\"expo:start:server:metro:waitForTypescript\");\nfunction waitForMetroToObserveTypeScriptFile(projectRoot, runner, callback) {\n  var watcher = runner.metro.getBundler().getBundler().getWatcher();\n  var tsconfigPath = _path.default.join(projectRoot, \"tsconfig.json\");\n  var listener = function listener(_ref) {\n    var eventsQueue = _ref.eventsQueue;\n    for (var event of eventsQueue) {\n      var ref;\n      if (event.type === \"add\" && ((ref = event.metadata) == null ? void 0 : ref.type) !== \"d\" && !/node_modules/.test(event.filePath)) {\n        var filePath = event.filePath;\n        if (/\\.tsx?$/.test(filePath) || filePath === tsconfigPath) {\n          debug(\"Detected TypeScript file added to the project: \", filePath);\n          callback();\n          off();\n          return;\n        }\n      }\n    }\n  };\n  debug(\"Waiting for TypeScript files to be added to the project...\");\n  watcher.addListener(\"change\", listener);\n  var off = function off() {\n    watcher.removeListener(\"change\", listener);\n  };\n  runner.server.addListener == null ? void 0 : runner.server.addListener(\"close\", off);\n  return off;\n}\nfunction observeFileChanges(runner, files, callback) {\n  var watcher = runner.metro.getBundler().getBundler().getWatcher();\n  var listener = function listener(_ref2) {\n    var eventsQueue = _ref2.eventsQueue;\n    for (var event of eventsQueue) {\n      var ref;\n      if (((ref = event.metadata) == null ? void 0 : ref.type) !== \"d\" && !/node_modules/.test(event.filePath)) {\n        var filePath = event.filePath;\n        if (files.includes(filePath)) {\n          debug(\"Observed change:\", filePath);\n          callback();\n          return;\n        }\n      }\n    }\n  };\n  debug(\"Watching file changes:\", files);\n  watcher.addListener(\"change\", listener);\n  var off = function off() {\n    watcher.removeListener(\"change\", listener);\n  };\n  runner.server.addListener == null ? void 0 : runner.server.addListener(\"close\", off);\n  return off;\n}","map":{"version":3,"names":["waitForMetroToObserveTypeScriptFile","observeFileChanges","_path","_interopRequireDefault","require","debug","projectRoot","runner","callback","watcher","metro","getBundler","getWatcher","tsconfigPath","default","join","listener","_ref","eventsQueue","event","ref","type","metadata","test","filePath","off","addListener","removeListener","server","files","_ref2","includes"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\metro\\waitForMetroToObserveTypeScriptFile.ts"],"sourcesContent":["import path from 'path';\n\nimport type { ServerLike } from '../BundlerDevServer';\n\nconst debug = require('debug')('expo:start:server:metro:waitForTypescript') as typeof console.log;\n\n/**\n * Use the native file watcher / Metro ruleset to detect if a\n * TypeScript file is added to the project during development.\n */\nexport function waitForMetroToObserveTypeScriptFile(\n  projectRoot: string,\n  runner: {\n    metro: import('metro').Server;\n    server: ServerLike;\n  },\n  callback: () => Promise<void>\n): () => void {\n  const watcher = runner.metro.getBundler().getBundler().getWatcher();\n\n  const tsconfigPath = path.join(projectRoot, 'tsconfig.json');\n\n  const listener = ({\n    eventsQueue,\n  }: {\n    eventsQueue: {\n      filePath: string;\n      metadata?: {\n        type: 'f' | 'd' | 'l'; // Regular file / Directory / Symlink\n      } | null;\n      type: string;\n    }[];\n  }) => {\n    for (const event of eventsQueue) {\n      if (\n        event.type === 'add' &&\n        event.metadata?.type !== 'd' &&\n        // We need to ignore node_modules because Metro will add all of the files in node_modules to the watcher.\n        !/node_modules/.test(event.filePath)\n      ) {\n        const { filePath } = event;\n        // Is TypeScript?\n        if (\n          // If the user adds a TypeScript file to the observable files in their project.\n          /\\.tsx?$/.test(filePath) ||\n          // Or if the user adds a tsconfig.json file to the project root.\n          filePath === tsconfigPath\n        ) {\n          debug('Detected TypeScript file added to the project: ', filePath);\n          callback();\n          off();\n          return;\n        }\n      }\n    }\n  };\n\n  debug('Waiting for TypeScript files to be added to the project...');\n  watcher.addListener('change', listener);\n\n  const off = () => {\n    watcher.removeListener('change', listener);\n  };\n\n  runner.server.addListener?.('close', off);\n  return off;\n}\n\nexport function observeFileChanges(\n  runner: {\n    metro: import('metro').Server;\n    server: ServerLike;\n  },\n  files: string[],\n  callback: () => void | Promise<void>\n): () => void {\n  const watcher = runner.metro.getBundler().getBundler().getWatcher();\n\n  const listener = ({\n    eventsQueue,\n  }: {\n    eventsQueue: {\n      filePath: string;\n      metadata?: {\n        type: 'f' | 'd' | 'l'; // Regular file / Directory / Symlink\n      } | null;\n      type: string;\n    }[];\n  }) => {\n    for (const event of eventsQueue) {\n      if (\n        // event.type === 'add' &&\n        event.metadata?.type !== 'd' &&\n        // We need to ignore node_modules because Metro will add all of the files in node_modules to the watcher.\n        !/node_modules/.test(event.filePath)\n      ) {\n        const { filePath } = event;\n        // Is TypeScript?\n        if (files.includes(filePath)) {\n          debug('Observed change:', filePath);\n          callback();\n          return;\n        }\n      }\n    }\n  };\n\n  debug('Watching file changes:', files);\n  watcher.addListener('change', listener);\n\n  const off = () => {\n    watcher.removeListener('change', listener);\n  };\n\n  runner.server.addListener?.('close', off);\n  return off;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}