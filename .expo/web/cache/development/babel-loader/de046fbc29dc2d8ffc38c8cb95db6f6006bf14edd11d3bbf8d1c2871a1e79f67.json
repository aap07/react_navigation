{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function _chalk() {\n    return data;\n  };\n  return data;\n}\nfunction _semver() {\n  var data = _interopRequireDefault(require(\"semver\"));\n  _semver = function _semver() {\n    return data;\n  };\n  return data;\n}\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n  _execa = function _execa() {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function _cliTools() {\n    return data;\n  };\n  return data;\n}\nvar PackageManager = _interopRequireWildcard(require(\"../../tools/packageManager\"));\nfunction _cliDoctor() {\n  var data = require(\"@react-native-community/cli-doctor\");\n  _cliDoctor = function _cliDoctor() {\n    return data;\n  };\n  return data;\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar repos = {\n  'react-native': {\n    rawDiffUrl: 'https://raw.githubusercontent.com/react-native-community/rn-diff-purge/diffs/diffs',\n    webDiffUrl: 'https://react-native-community.github.io/upgrade-helper',\n    dependencyName: 'react-native'\n  },\n  'react-native-tvos': {\n    rawDiffUrl: 'https://raw.githubusercontent.com/react-native-tvos/rn-diff-purge-tv/diffs/diffs',\n    webDiffUrl: 'https://react-native-community.github.io/upgrade-helper',\n    dependencyName: 'react-native@npm:react-native-tvos'\n  }\n};\nvar isConnected = function isConnected(output) {\n  return !output.includes('the host is inaccessible');\n};\nvar checkForErrors = function checkForErrors(output) {\n  if (!output) {\n    return;\n  }\n  if (!isConnected(output)) {\n    throw new (_cliTools().CLIError)('Upgrade failed. You do not seem to have an internet connection.');\n  }\n  if (output.includes('npm ERR')) {\n    throw new (_cliTools().CLIError)(`Upgrade failed with the following errors:\\n${output}`);\n  }\n  if (output.includes('npm WARN')) {\n    _cliTools().logger.warn(output);\n  }\n};\nvar getLatestRNVersion = function () {\n  var _ref = _asyncToGenerator(function* (repoName) {\n    _cliTools().logger.info('No version passed. Fetching latest...');\n    var _yield = yield (0, _execa().default)('npm', ['info', repoName, 'version']),\n      stdout = _yield.stdout,\n      stderr = _yield.stderr;\n    checkForErrors(stderr);\n    return stdout;\n  });\n  return function getLatestRNVersion(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar getRNPeerDeps = function () {\n  var _ref2 = _asyncToGenerator(function* (version, repoName) {\n    var _yield2 = yield (0, _execa().default)('npm', ['info', `${repoName}@${version}`, 'peerDependencies', '--json']),\n      stdout = _yield2.stdout,\n      stderr = _yield2.stderr;\n    checkForErrors(stderr);\n    return JSON.parse(stdout);\n  });\n  return function getRNPeerDeps(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar getPatch = function () {\n  var _ref3 = _asyncToGenerator(function* (currentVersion, newVersion, config, repoName) {\n    var patch;\n    _cliTools().logger.info(`Fetching diff between v${currentVersion} and v${newVersion}...`);\n    try {\n      var _yield3 = yield (0, _cliTools().fetch)(`${repos[repoName].rawDiffUrl}/${currentVersion}..${newVersion}.diff`),\n        data = _yield3.data;\n      patch = data;\n    } catch (error) {\n      _cliTools().logger.error(error.message);\n      _cliTools().logger.error(`Failed to fetch diff for react-native@${newVersion}. Maybe it's not released yet?`);\n      _cliTools().logger.info(`For available releases to diff see: ${_chalk().default.underline.dim('https://github.com/react-native-community/rn-diff-purge#diff-table-full-table-here')}`);\n      return null;\n    }\n    var patchWithRenamedProjects = patch;\n    Object.keys(config.project).forEach(function (platform) {\n      if (!config.project[platform]) {\n        return;\n      }\n      if (platform === 'ios') {\n        var xcodeProject = config.project.ios.xcodeProject;\n        if (xcodeProject) {\n          patchWithRenamedProjects = patchWithRenamedProjects.replace(new RegExp('RnDiffApp', 'g'), xcodeProject.name.replace('.xcodeproj', ''));\n        }\n      } else if (platform === 'android') {\n        patchWithRenamedProjects = patchWithRenamedProjects.replace(new RegExp('com\\\\.rndiffapp', 'g'), config.project[platform].packageName).replace(new RegExp('com\\\\.rndiffapp'.split('.').join('/'), 'g'), config.project[platform].packageName.split('.').join('/'));\n      } else {\n        _cliTools().logger.warn(`Unsupported platform: \"${platform}\". \\`upgrade\\` only supports iOS and Android.`);\n      }\n    });\n    return patchWithRenamedProjects;\n  });\n  return function getPatch(_x4, _x5, _x6, _x7) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nvar getVersionToUpgradeTo = function () {\n  var _ref4 = _asyncToGenerator(function* (argv, currentVersion, projectDir, repoName) {\n    var argVersion = argv[0];\n    var semverCoercedVersion = _semver().default.coerce(argVersion);\n    var newVersion = argVersion ? _semver().default.valid(argVersion) || (semverCoercedVersion ? semverCoercedVersion.version : null) : yield getLatestRNVersion(repoName);\n    if (!newVersion) {\n      _cliTools().logger.error(`Provided version \"${argv[0]}\" is not allowed. Please pass a valid semver version`);\n      return null;\n    }\n    if (_semver().default.gt(currentVersion, newVersion)) {\n      _cliTools().logger.error(`Trying to upgrade from newer version \"${currentVersion}\" to older \"${newVersion}\"`);\n      return null;\n    }\n    if (_semver().default.eq(currentVersion, newVersion)) {\n      var _require = require(_path().default.join(projectDir, 'package.json')),\n        version = _require.dependencies['react-native'];\n      var parsedVersion = version.split('@')[version.split('@').length - 1];\n      if (_semver().default.satisfies(newVersion, parsedVersion)) {\n        _cliTools().logger.warn(`Specified version \"${newVersion}\" is already installed in node_modules and it satisfies \"${parsedVersion}\" semver range. No need to upgrade`);\n        return null;\n      }\n      _cliTools().logger.error(`Dependency mismatch. Specified version \"${newVersion}\" is already installed in node_modules and it doesn't satisfy \"${parsedVersion}\" semver range of your \"react-native\" dependency. Please re-install your dependencies`);\n      return null;\n    }\n    return newVersion;\n  });\n  return function getVersionToUpgradeTo(_x8, _x9, _x10, _x11) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nvar installDeps = function () {\n  var _ref5 = _asyncToGenerator(function* (root, newVersion, repoName) {\n    _cliTools().logger.info(`Installing \"react-native@${newVersion}\" and its peer dependencies...`);\n    var peerDeps = yield getRNPeerDeps(newVersion, repoName);\n    var deps = [`${repos[repoName].dependencyName}@${newVersion}`].concat(_toConsumableArray(Object.keys(peerDeps).map(function (module) {\n      return `${module}@${peerDeps[module]}`;\n    })));\n    yield PackageManager.install(deps, {\n      silent: true,\n      root: root\n    });\n    yield (0, _execa().default)('git', ['add', 'package.json']);\n    try {\n      yield (0, _execa().default)('git', ['add', 'yarn.lock']);\n    } catch (error) {}\n    try {\n      yield (0, _execa().default)('git', ['add', 'package-lock.json']);\n    } catch (error) {}\n  });\n  return function installDeps(_x12, _x13, _x14) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nvar installCocoaPodsDeps = function () {\n  var _ref6 = _asyncToGenerator(function* (projectDir) {\n    if (process.platform === 'darwin') {\n      try {\n        _cliTools().logger.info(`Installing CocoaPods dependencies ${_chalk().default.dim('(this may take a few minutes)')}`);\n        yield (0, _cliDoctor().installPods)({\n          directory: projectDir.split('/').pop() || ''\n        });\n      } catch (error) {\n        if (error.stderr) {\n          _cliTools().logger.debug(`\"pod install\" or \"pod repo update\" failed. Error output:\\n${error.stderr}`);\n        }\n        _cliTools().logger.error('Installation of CocoaPods dependencies failed. Try to install them manually by running \"pod install\" in \"ios\" directory after finishing upgrade');\n      }\n    }\n  });\n  return function installCocoaPodsDeps(_x15) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nvar applyPatch = function () {\n  var _ref7 = _asyncToGenerator(function* (currentVersion, newVersion, tmpPatchFile, repoName) {\n    var defaultExcludes = ['package.json'];\n    var filesThatDontExist = [];\n    var filesThatFailedToApply = [];\n    var _yield4 = yield (0, _execa().default)('git', ['rev-parse', '--show-prefix']),\n      relativePathFromRoot = _yield4.stdout;\n    try {\n      try {\n        var excludes = defaultExcludes.map(function (e) {\n          return `--exclude=${_path().default.join(relativePathFromRoot, e)}`;\n        });\n        yield (0, _execa().default)('git', ['apply', '--binary', '--check', tmpPatchFile].concat(_toConsumableArray(excludes), ['-p2', '--3way', `--directory=${relativePathFromRoot}`]));\n        _cliTools().logger.info('Applying diff...');\n      } catch (error) {\n        var errorLines = error.stderr.split('\\n');\n        filesThatDontExist = _toConsumableArray(errorLines.filter(function (x) {\n          return x.includes('does not exist in index');\n        }).map(function (x) {\n          return x.replace(/^error: (.*): does not exist in index$/, '$1');\n        })).filter(Boolean);\n        filesThatFailedToApply = errorLines.filter(function (x) {\n          return x.includes('patch does not apply');\n        }).map(function (x) {\n          return x.replace(/^error: (.*): patch does not apply$/, '$1');\n        }).filter(Boolean);\n        _cliTools().logger.info('Applying diff...');\n        _cliTools().logger.warn(`Excluding files that exist in the template, but not in your project:\\n${filesThatDontExist.map(function (file) {\n          return `  - ${_chalk().default.bold(file)}`;\n        }).join('\\n')}`);\n        if (filesThatFailedToApply.length) {\n          _cliTools().logger.error(`Excluding files that failed to apply the diff:\\n${filesThatFailedToApply.map(function (file) {\n            return `  - ${_chalk().default.bold(file)}`;\n          }).join('\\n')}\\nPlease make sure to check the actual changes after the upgrade command is finished.\\nYou can find them in our Upgrade Helper web app: ${_chalk().default.underline.dim(`${repos[repoName].webDiffUrl}/?from=${currentVersion}&to=${newVersion}`)}`);\n        }\n      } finally {\n        var _excludes = [].concat(defaultExcludes, _toConsumableArray(filesThatDontExist), _toConsumableArray(filesThatFailedToApply)).map(function (e) {\n          return `--exclude=${_path().default.join(relativePathFromRoot, e)}`;\n        });\n        yield (0, _execa().default)('git', ['apply', tmpPatchFile].concat(_toConsumableArray(_excludes), ['-p2', '--3way', `--directory=${relativePathFromRoot}`]));\n      }\n    } catch (error) {\n      if (error.stderr) {\n        _cliTools().logger.debug(`\"git apply\" failed. Error output:\\n${error.stderr}`);\n      }\n      _cliTools().logger.error('Automatically applying diff failed. We did our best to automatically upgrade as many files as possible');\n      return false;\n    }\n    return true;\n  });\n  return function applyPatch(_x16, _x17, _x18, _x19) {\n    return _ref7.apply(this, arguments);\n  };\n}();\nfunction upgrade(_x20, _x21) {\n  return _upgrade.apply(this, arguments);\n}\nfunction _upgrade() {\n  _upgrade = _asyncToGenerator(function* (argv, ctx) {\n    var tmpPatchFile = 'tmp-upgrade-rn.patch';\n    var projectDir = ctx.root;\n    var _require2 = require(_path().default.join(projectDir, 'node_modules/react-native/package.json')),\n      rnName = _require2.name,\n      currentVersion = _require2.version;\n    var repoName = rnName === 'react-native-tvos' ? 'react-native-tvos' : 'react-native';\n    var newVersion = yield getVersionToUpgradeTo(argv, currentVersion, projectDir, repoName);\n    if (!newVersion) {\n      return;\n    }\n    var patch = yield getPatch(currentVersion, newVersion, ctx, repoName);\n    if (patch === null) {\n      return;\n    }\n    if (patch === '') {\n      _cliTools().logger.info('Diff has no changes to apply, proceeding further');\n      yield installDeps(projectDir, newVersion, repoName);\n      yield installCocoaPodsDeps(projectDir);\n      _cliTools().logger.success(`Upgraded React Native to v${newVersion} 🎉. Now you can review and commit the changes`);\n      return;\n    }\n    var patchSuccess;\n    try {\n      _fs().default.writeFileSync(tmpPatchFile, patch);\n      patchSuccess = yield applyPatch(currentVersion, newVersion, tmpPatchFile, repoName);\n    } catch (error) {\n      throw new Error(error.stderr || error);\n    } finally {\n      try {\n        _fs().default.unlinkSync(tmpPatchFile);\n      } catch (e) {}\n      var _yield5 = yield (0, _execa().default)('git', ['status', '-s']),\n        stdout = _yield5.stdout;\n      if (!patchSuccess) {\n        if (stdout) {\n          _cliTools().logger.warn('Continuing after failure. Some of the files are upgraded but you will need to deal with conflicts manually');\n          yield installDeps(projectDir, newVersion, repoName);\n          _cliTools().logger.info('Running \"git status\" to check what changed...');\n          yield (0, _execa().default)('git', ['status'], {\n            stdio: 'inherit'\n          });\n        } else {\n          _cliTools().logger.error('Patch failed to apply for unknown reason. Please fall back to manual way of upgrading');\n        }\n      } else {\n        yield installDeps(projectDir, newVersion, repoName);\n        yield installCocoaPodsDeps(projectDir);\n        _cliTools().logger.info('Running \"git status\" to check what changed...');\n        yield (0, _execa().default)('git', ['status'], {\n          stdio: 'inherit'\n        });\n      }\n      if (!patchSuccess) {\n        if (stdout) {\n          _cliTools().logger.warn('Please run \"git diff\" to review the conflicts and resolve them');\n        }\n        if (process.platform === 'darwin') {\n          _cliTools().logger.warn('After resolving conflicts don\\'t forget to run \"pod install\" inside \"ios\" directory');\n        }\n        _cliTools().logger.info(`You may find these resources helpful:\n• Release notes: ${_chalk().default.underline.dim(`https://github.com/facebook/react-native/releases/tag/v${newVersion}`)}\n• Manual Upgrade Helper: ${_chalk().default.underline.dim(`${repos[repoName].webDiffUrl}/?from=${currentVersion}&to=${newVersion}`)}\n• Git diff: ${_chalk().default.underline.dim(`${repos[repoName].rawDiffUrl}/${currentVersion}..${newVersion}.diff`)}`);\n        throw new (_cliTools().CLIError)('Upgrade failed. Please see the messages above for details');\n      }\n    }\n    _cliTools().logger.success(`Upgraded React Native to v${newVersion} 🎉. Now you can review and commit the changes`);\n  });\n  return _upgrade.apply(this, arguments);\n}\nvar upgradeCommand = {\n  name: 'upgrade [version]',\n  description: \"Upgrade your app's template files to the specified or latest npm version using `rn-diff-purge` project. Only valid semver versions are allowed.\",\n  func: upgrade\n};\nvar _default = upgradeCommand;\nexports.default = _default;","map":{"version":3,"names":["_toConsumableArray","require","_asyncToGenerator","Object","defineProperty","exports","value","default","_path","data","_interopRequireDefault","_fs","_chalk","_semver","_execa","_cliTools","PackageManager","_interopRequireWildcard","_cliDoctor","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","repos","rawDiffUrl","webDiffUrl","dependencyName","isConnected","output","includes","checkForErrors","CLIError","logger","warn","getLatestRNVersion","_ref","repoName","info","_yield","stdout","stderr","_x","apply","arguments","getRNPeerDeps","_ref2","version","_yield2","JSON","parse","_x2","_x3","getPatch","_ref3","currentVersion","newVersion","config","patch","_yield3","fetch","error","message","underline","dim","patchWithRenamedProjects","keys","project","forEach","platform","xcodeProject","ios","replace","RegExp","name","packageName","split","join","_x4","_x5","_x6","_x7","getVersionToUpgradeTo","_ref4","argv","projectDir","argVersion","semverCoercedVersion","coerce","valid","gt","eq","_require","dependencies","parsedVersion","length","satisfies","_x8","_x9","_x10","_x11","installDeps","_ref5","root","peerDeps","deps","concat","map","module","install","silent","_x12","_x13","_x14","installCocoaPodsDeps","_ref6","process","installPods","directory","pop","debug","_x15","applyPatch","_ref7","tmpPatchFile","defaultExcludes","filesThatDontExist","filesThatFailedToApply","_yield4","relativePathFromRoot","excludes","e","errorLines","filter","x","Boolean","file","bold","_x16","_x17","_x18","_x19","upgrade","_x20","_x21","_upgrade","ctx","_require2","rnName","success","patchSuccess","writeFileSync","Error","unlinkSync","_yield5","stdio","upgradeCommand","description","func","_default"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli/build/commands/upgrade/upgrade.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n  _path = function () {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n  _fs = function () {\n    return data;\n  };\n  return data;\n}\nfunction _chalk() {\n  const data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function () {\n    return data;\n  };\n  return data;\n}\nfunction _semver() {\n  const data = _interopRequireDefault(require(\"semver\"));\n  _semver = function () {\n    return data;\n  };\n  return data;\n}\nfunction _execa() {\n  const data = _interopRequireDefault(require(\"execa\"));\n  _execa = function () {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function () {\n    return data;\n  };\n  return data;\n}\nvar PackageManager = _interopRequireWildcard(require(\"../../tools/packageManager\"));\nfunction _cliDoctor() {\n  const data = require(\"@react-native-community/cli-doctor\");\n  _cliDoctor = function () {\n    return data;\n  };\n  return data;\n}\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nconst repos = {\n  'react-native': {\n    rawDiffUrl: 'https://raw.githubusercontent.com/react-native-community/rn-diff-purge/diffs/diffs',\n    webDiffUrl: 'https://react-native-community.github.io/upgrade-helper',\n    dependencyName: 'react-native'\n  },\n  'react-native-tvos': {\n    rawDiffUrl: 'https://raw.githubusercontent.com/react-native-tvos/rn-diff-purge-tv/diffs/diffs',\n    webDiffUrl: 'https://react-native-community.github.io/upgrade-helper',\n    dependencyName: 'react-native@npm:react-native-tvos'\n  }\n};\nconst isConnected = output => {\n  // there is no reliable way of checking for internet connectivity, so we should just\n  // read the output from npm (to check for connectivity errors) which is faster and relatively more reliable.\n  return !output.includes('the host is inaccessible');\n};\nconst checkForErrors = output => {\n  if (!output) {\n    return;\n  }\n  if (!isConnected(output)) {\n    throw new (_cliTools().CLIError)('Upgrade failed. You do not seem to have an internet connection.');\n  }\n  if (output.includes('npm ERR')) {\n    throw new (_cliTools().CLIError)(`Upgrade failed with the following errors:\\n${output}`);\n  }\n  if (output.includes('npm WARN')) {\n    _cliTools().logger.warn(output);\n  }\n};\nconst getLatestRNVersion = async repoName => {\n  _cliTools().logger.info('No version passed. Fetching latest...');\n  const {\n    stdout,\n    stderr\n  } = await (0, _execa().default)('npm', ['info', repoName, 'version']);\n  checkForErrors(stderr);\n  return stdout;\n};\nconst getRNPeerDeps = async (version, repoName) => {\n  const {\n    stdout,\n    stderr\n  } = await (0, _execa().default)('npm', ['info', `${repoName}@${version}`, 'peerDependencies', '--json']);\n  checkForErrors(stderr);\n  return JSON.parse(stdout);\n};\nconst getPatch = async (currentVersion, newVersion, config, repoName) => {\n  let patch;\n  _cliTools().logger.info(`Fetching diff between v${currentVersion} and v${newVersion}...`);\n  try {\n    const {\n      data\n    } = await (0, _cliTools().fetch)(`${repos[repoName].rawDiffUrl}/${currentVersion}..${newVersion}.diff`);\n    patch = data;\n  } catch (error) {\n    _cliTools().logger.error(error.message);\n    _cliTools().logger.error(`Failed to fetch diff for react-native@${newVersion}. Maybe it's not released yet?`);\n    _cliTools().logger.info(`For available releases to diff see: ${_chalk().default.underline.dim('https://github.com/react-native-community/rn-diff-purge#diff-table-full-table-here')}`);\n    return null;\n  }\n  let patchWithRenamedProjects = patch;\n  Object.keys(config.project).forEach(platform => {\n    if (!config.project[platform]) {\n      return;\n    }\n    if (platform === 'ios') {\n      const xcodeProject = config.project.ios.xcodeProject;\n      if (xcodeProject) {\n        patchWithRenamedProjects = patchWithRenamedProjects.replace(new RegExp('RnDiffApp', 'g'), xcodeProject.name.replace('.xcodeproj', ''));\n      }\n    } else if (platform === 'android') {\n      patchWithRenamedProjects = patchWithRenamedProjects.replace(new RegExp('com\\\\.rndiffapp', 'g'), config.project[platform].packageName).replace(new RegExp('com\\\\.rndiffapp'.split('.').join('/'), 'g'), config.project[platform].packageName.split('.').join('/'));\n    } else {\n      _cliTools().logger.warn(`Unsupported platform: \"${platform}\". \\`upgrade\\` only supports iOS and Android.`);\n    }\n  });\n  return patchWithRenamedProjects;\n};\nconst getVersionToUpgradeTo = async (argv, currentVersion, projectDir, repoName) => {\n  const argVersion = argv[0];\n  const semverCoercedVersion = _semver().default.coerce(argVersion);\n  const newVersion = argVersion ? _semver().default.valid(argVersion) || (semverCoercedVersion ? semverCoercedVersion.version : null) : await getLatestRNVersion(repoName);\n  if (!newVersion) {\n    _cliTools().logger.error(`Provided version \"${argv[0]}\" is not allowed. Please pass a valid semver version`);\n    return null;\n  }\n  if (_semver().default.gt(currentVersion, newVersion)) {\n    _cliTools().logger.error(`Trying to upgrade from newer version \"${currentVersion}\" to older \"${newVersion}\"`);\n    return null;\n  }\n  if (_semver().default.eq(currentVersion, newVersion)) {\n    const {\n      dependencies: {\n        'react-native': version\n      }\n    } = require(_path().default.join(projectDir, 'package.json'));\n    const parsedVersion = version.split('@')[version.split('@').length - 1];\n    if (_semver().default.satisfies(newVersion, parsedVersion)) {\n      _cliTools().logger.warn(`Specified version \"${newVersion}\" is already installed in node_modules and it satisfies \"${parsedVersion}\" semver range. No need to upgrade`);\n      return null;\n    }\n    _cliTools().logger.error(`Dependency mismatch. Specified version \"${newVersion}\" is already installed in node_modules and it doesn't satisfy \"${parsedVersion}\" semver range of your \"react-native\" dependency. Please re-install your dependencies`);\n    return null;\n  }\n  return newVersion;\n};\nconst installDeps = async (root, newVersion, repoName) => {\n  _cliTools().logger.info(`Installing \"react-native@${newVersion}\" and its peer dependencies...`);\n  const peerDeps = await getRNPeerDeps(newVersion, repoName);\n  const deps = [`${repos[repoName].dependencyName}@${newVersion}`, ...Object.keys(peerDeps).map(module => `${module}@${peerDeps[module]}`)];\n  await PackageManager.install(deps, {\n    silent: true,\n    root\n  });\n  await (0, _execa().default)('git', ['add', 'package.json']);\n  try {\n    await (0, _execa().default)('git', ['add', 'yarn.lock']);\n  } catch (error) {\n    // ignore\n  }\n  try {\n    await (0, _execa().default)('git', ['add', 'package-lock.json']);\n  } catch (error) {\n    // ignore\n  }\n};\nconst installCocoaPodsDeps = async projectDir => {\n  if (process.platform === 'darwin') {\n    try {\n      _cliTools().logger.info(`Installing CocoaPods dependencies ${_chalk().default.dim('(this may take a few minutes)')}`);\n      await (0, _cliDoctor().installPods)({\n        directory: projectDir.split('/').pop() || ''\n      });\n    } catch (error) {\n      if (error.stderr) {\n        _cliTools().logger.debug(`\"pod install\" or \"pod repo update\" failed. Error output:\\n${error.stderr}`);\n      }\n      _cliTools().logger.error('Installation of CocoaPods dependencies failed. Try to install them manually by running \"pod install\" in \"ios\" directory after finishing upgrade');\n    }\n  }\n};\nconst applyPatch = async (currentVersion, newVersion, tmpPatchFile, repoName) => {\n  const defaultExcludes = ['package.json'];\n  let filesThatDontExist = [];\n  let filesThatFailedToApply = [];\n  const {\n    stdout: relativePathFromRoot\n  } = await (0, _execa().default)('git', ['rev-parse', '--show-prefix']);\n  try {\n    try {\n      const excludes = defaultExcludes.map(e => `--exclude=${_path().default.join(relativePathFromRoot, e)}`);\n      await (0, _execa().default)('git', ['apply',\n      // According to git documentation, `--binary` flag is turned on by\n      // default. However it's necessary when running `git apply --check` to\n      // actually accept binary files, maybe a bug in git?\n      '--binary', '--check', tmpPatchFile, ...excludes, '-p2', '--3way', `--directory=${relativePathFromRoot}`]);\n      _cliTools().logger.info('Applying diff...');\n    } catch (error) {\n      const errorLines = error.stderr.split('\\n');\n      filesThatDontExist = [...errorLines.filter(x => x.includes('does not exist in index')).map(x => x.replace(/^error: (.*): does not exist in index$/, '$1'))].filter(Boolean);\n      filesThatFailedToApply = errorLines.filter(x => x.includes('patch does not apply')).map(x => x.replace(/^error: (.*): patch does not apply$/, '$1')).filter(Boolean);\n      _cliTools().logger.info('Applying diff...');\n      _cliTools().logger.warn(`Excluding files that exist in the template, but not in your project:\\n${filesThatDontExist.map(file => `  - ${_chalk().default.bold(file)}`).join('\\n')}`);\n      if (filesThatFailedToApply.length) {\n        _cliTools().logger.error(`Excluding files that failed to apply the diff:\\n${filesThatFailedToApply.map(file => `  - ${_chalk().default.bold(file)}`).join('\\n')}\\nPlease make sure to check the actual changes after the upgrade command is finished.\\nYou can find them in our Upgrade Helper web app: ${_chalk().default.underline.dim(`${repos[repoName].webDiffUrl}/?from=${currentVersion}&to=${newVersion}`)}`);\n      }\n    } finally {\n      const excludes = [...defaultExcludes, ...filesThatDontExist, ...filesThatFailedToApply].map(e => `--exclude=${_path().default.join(relativePathFromRoot, e)}`);\n      await (0, _execa().default)('git', ['apply', tmpPatchFile, ...excludes, '-p2', '--3way', `--directory=${relativePathFromRoot}`]);\n    }\n  } catch (error) {\n    if (error.stderr) {\n      _cliTools().logger.debug(`\"git apply\" failed. Error output:\\n${error.stderr}`);\n    }\n    _cliTools().logger.error('Automatically applying diff failed. We did our best to automatically upgrade as many files as possible');\n    return false;\n  }\n  return true;\n};\n\n/**\n * Upgrade application to a new version of React Native.\n */\nasync function upgrade(argv, ctx) {\n  const tmpPatchFile = 'tmp-upgrade-rn.patch';\n  const projectDir = ctx.root;\n  const {\n    name: rnName,\n    version: currentVersion\n  } = require(_path().default.join(projectDir, 'node_modules/react-native/package.json'));\n  const repoName = rnName === 'react-native-tvos' ? 'react-native-tvos' : 'react-native';\n  const newVersion = await getVersionToUpgradeTo(argv, currentVersion, projectDir, repoName);\n  if (!newVersion) {\n    return;\n  }\n  const patch = await getPatch(currentVersion, newVersion, ctx, repoName);\n  if (patch === null) {\n    return;\n  }\n  if (patch === '') {\n    _cliTools().logger.info('Diff has no changes to apply, proceeding further');\n    await installDeps(projectDir, newVersion, repoName);\n    await installCocoaPodsDeps(projectDir);\n    _cliTools().logger.success(`Upgraded React Native to v${newVersion} 🎉. Now you can review and commit the changes`);\n    return;\n  }\n  let patchSuccess;\n  try {\n    _fs().default.writeFileSync(tmpPatchFile, patch);\n    patchSuccess = await applyPatch(currentVersion, newVersion, tmpPatchFile, repoName);\n  } catch (error) {\n    throw new Error(error.stderr || error);\n  } finally {\n    try {\n      _fs().default.unlinkSync(tmpPatchFile);\n    } catch (e) {\n      // ignore\n    }\n    const {\n      stdout\n    } = await (0, _execa().default)('git', ['status', '-s']);\n    if (!patchSuccess) {\n      if (stdout) {\n        _cliTools().logger.warn('Continuing after failure. Some of the files are upgraded but you will need to deal with conflicts manually');\n        await installDeps(projectDir, newVersion, repoName);\n        _cliTools().logger.info('Running \"git status\" to check what changed...');\n        await (0, _execa().default)('git', ['status'], {\n          stdio: 'inherit'\n        });\n      } else {\n        _cliTools().logger.error('Patch failed to apply for unknown reason. Please fall back to manual way of upgrading');\n      }\n    } else {\n      await installDeps(projectDir, newVersion, repoName);\n      await installCocoaPodsDeps(projectDir);\n      _cliTools().logger.info('Running \"git status\" to check what changed...');\n      await (0, _execa().default)('git', ['status'], {\n        stdio: 'inherit'\n      });\n    }\n    if (!patchSuccess) {\n      if (stdout) {\n        _cliTools().logger.warn('Please run \"git diff\" to review the conflicts and resolve them');\n      }\n      if (process.platform === 'darwin') {\n        _cliTools().logger.warn('After resolving conflicts don\\'t forget to run \"pod install\" inside \"ios\" directory');\n      }\n      _cliTools().logger.info(`You may find these resources helpful:\n• Release notes: ${_chalk().default.underline.dim(`https://github.com/facebook/react-native/releases/tag/v${newVersion}`)}\n• Manual Upgrade Helper: ${_chalk().default.underline.dim(`${repos[repoName].webDiffUrl}/?from=${currentVersion}&to=${newVersion}`)}\n• Git diff: ${_chalk().default.underline.dim(`${repos[repoName].rawDiffUrl}/${currentVersion}..${newVersion}.diff`)}`);\n      throw new (_cliTools().CLIError)('Upgrade failed. Please see the messages above for details');\n    }\n  }\n  _cliTools().logger.success(`Upgraded React Native to v${newVersion} 🎉. Now you can review and commit the changes`);\n}\nconst upgradeCommand = {\n  name: 'upgrade [version]',\n  description: \"Upgrade your app's template files to the specified or latest npm version using `rn-diff-purge` project. Only valid semver versions are allowed.\",\n  func: upgrade\n};\nvar _default = upgradeCommand;\nexports.default = _default;\n\n//# sourceMappingURL=upgrade.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}