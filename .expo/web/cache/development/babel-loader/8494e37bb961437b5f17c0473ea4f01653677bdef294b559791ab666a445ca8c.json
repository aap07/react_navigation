{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/dist/doc/directives.d.ts"],"sourcesContent":["import type { Document } from './Document.js';\nexport declare class Directives {\n    static defaultYaml: Directives['yaml'];\n    static defaultTags: Directives['tags'];\n    yaml: {\n        version: '1.1' | '1.2' | 'next';\n        explicit?: boolean;\n    };\n    tags: Record<string, string>;\n    /**\n     * The directives-end/doc-start marker `---`. If `null`, a marker may still be\n     * included in the document's stringified representation.\n     */\n    docStart: true | null;\n    /** The doc-end marker `...`.  */\n    docEnd: boolean;\n    /**\n     * Used when parsing YAML 1.1, where:\n     * > If the document specifies no directives, it is parsed using the same\n     * > settings as the previous document. If the document does specify any\n     * > directives, all directives of previous documents, if any, are ignored.\n     */\n    private atNextDocument?;\n    constructor(yaml?: Directives['yaml'], tags?: Directives['tags']);\n    clone(): Directives;\n    /**\n     * During parsing, get a Directives instance for the current document and\n     * update the stream state according to the current version's spec.\n     */\n    atDocument(): Directives;\n    /**\n     * @param onError - May be called even if the action was successful\n     * @returns `true` on success\n     */\n    add(line: string, onError: (offset: number, message: string, warning?: boolean) => void): boolean;\n    /**\n     * Resolves a tag, matching handles to those defined in %TAG directives.\n     *\n     * @returns Resolved tag, which may also be the non-specific tag `'!'` or a\n     *   `'!local'` tag, or `null` if unresolvable.\n     */\n    tagName(source: string, onError: (message: string) => void): string | null;\n    /**\n     * Given a fully resolved tag, returns its printable string form,\n     * taking into account current tag prefixes and defaults.\n     */\n    tagString(tag: string): string;\n    toString(doc?: Document): string;\n}\n"],"mappings":""},"metadata":{},"sourceType":"script","externalDependencies":[]}