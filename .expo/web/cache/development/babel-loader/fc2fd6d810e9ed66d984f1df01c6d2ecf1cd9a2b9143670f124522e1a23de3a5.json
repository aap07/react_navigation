{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nvar _NativeModulesProxy$E, _NativeModulesProxy$E2;\nimport computeMd5 from 'blueimp-md5';\nimport Constants from 'expo-constants';\nimport * as FileSystem from 'expo-file-system';\nimport { NativeModulesProxy } from 'expo-modules-core';\nimport { getManifestBaseUrl } from \"./AssetUris\";\nexport var IS_MANAGED_ENV = !!Constants.appOwnership;\nexport var IS_BARE_ENV_WITH_UPDATES = !IS_MANAGED_ENV && !!((_NativeModulesProxy$E = NativeModulesProxy.ExpoUpdates) != null && _NativeModulesProxy$E.isEnabled) && !((_NativeModulesProxy$E2 = NativeModulesProxy.ExpoUpdates) != null && _NativeModulesProxy$E2.isUsingEmbeddedAssets);\nexport var IS_ENV_WITH_UPDATES_ENABLED = IS_MANAGED_ENV || IS_BARE_ENV_WITH_UPDATES;\nexport var IS_BARE_ENV_WITHOUT_UPDATES = !IS_MANAGED_ENV && !IS_BARE_ENV_WITH_UPDATES;\nexport function getLocalAssets() {\n  var _NativeModulesProxy$E3, _NativeModulesProxy$E4;\n  return (_NativeModulesProxy$E3 = (_NativeModulesProxy$E4 = NativeModulesProxy.ExpoUpdates) == null ? void 0 : _NativeModulesProxy$E4.localAssets) != null ? _NativeModulesProxy$E3 : {};\n}\nexport function getManifest() {\n  var _Constants$__unsafeNo;\n  return (_Constants$__unsafeNo = Constants.__unsafeNoWarnManifest) != null ? _Constants$__unsafeNo : {};\n}\nexport function getManifest2() {\n  return Constants.__unsafeNoWarnManifest2;\n}\nexport var manifestBaseUrl = Constants.experienceUrl ? getManifestBaseUrl(Constants.experienceUrl) : null;\nexport function downloadAsync(_x, _x2, _x3, _x4) {\n  return _downloadAsync.apply(this, arguments);\n}\nfunction _downloadAsync() {\n  _downloadAsync = _asyncToGenerator(function* (uri, hash, type, name) {\n    if (IS_MANAGED_ENV) {\n      return _downloadAsyncManagedEnv(uri, hash, type, name);\n    }\n    return _downloadAsyncUnmanagedEnv(uri, hash, type);\n  });\n  return _downloadAsync.apply(this, arguments);\n}\nfunction _downloadAsyncManagedEnv(_x5, _x6, _x7, _x8) {\n  return _downloadAsyncManagedEnv2.apply(this, arguments);\n}\nfunction _downloadAsyncManagedEnv2() {\n  _downloadAsyncManagedEnv2 = _asyncToGenerator(function* (uri, hash, type, name) {\n    var cacheFileId = hash || computeMd5(uri);\n    var localUri = `${FileSystem.cacheDirectory}ExponentAsset-${cacheFileId}.${type}`;\n    var fileInfo = yield FileSystem.getInfoAsync(localUri, {\n      md5: true\n    });\n    if (!fileInfo.exists || hash !== null && fileInfo.md5 !== hash) {\n      var _yield$FileSystem$dow = yield FileSystem.downloadAsync(uri, localUri, {\n          md5: true\n        }),\n        md5 = _yield$FileSystem$dow.md5;\n      if (hash !== null && md5 !== hash) {\n        throw new Error(`Downloaded file for asset '${name}.${type}' ` + `Located at ${uri} ` + `failed MD5 integrity check`);\n      }\n    }\n    return localUri;\n  });\n  return _downloadAsyncManagedEnv2.apply(this, arguments);\n}\nfunction _downloadAsyncUnmanagedEnv(_x9, _x10, _x11) {\n  return _downloadAsyncUnmanagedEnv2.apply(this, arguments);\n}\nfunction _downloadAsyncUnmanagedEnv2() {\n  _downloadAsyncUnmanagedEnv2 = _asyncToGenerator(function* (uri, hash, type) {\n    if (uri.startsWith('file://')) {\n      return uri;\n    }\n    var cacheFileId = hash || computeMd5(uri);\n    var localUri = `${FileSystem.cacheDirectory}ExponentAsset-${cacheFileId}.${type}`;\n    yield FileSystem.downloadAsync(uri, localUri);\n    return localUri;\n  });\n  return _downloadAsyncUnmanagedEnv2.apply(this, arguments);\n}","map":{"version":3,"names":["computeMd5","Constants","FileSystem","NativeModulesProxy","getManifestBaseUrl","IS_MANAGED_ENV","appOwnership","IS_BARE_ENV_WITH_UPDATES","_NativeModulesProxy$E","ExpoUpdates","isEnabled","_NativeModulesProxy$E2","isUsingEmbeddedAssets","IS_ENV_WITH_UPDATES_ENABLED","IS_BARE_ENV_WITHOUT_UPDATES","getLocalAssets","_NativeModulesProxy$E3","_NativeModulesProxy$E4","localAssets","getManifest","_Constants$__unsafeNo","__unsafeNoWarnManifest","getManifest2","__unsafeNoWarnManifest2","manifestBaseUrl","experienceUrl","downloadAsync","_x","_x2","_x3","_x4","_downloadAsync","apply","arguments","_asyncToGenerator","uri","hash","type","name","_downloadAsyncManagedEnv","_downloadAsyncUnmanagedEnv","_x5","_x6","_x7","_x8","_downloadAsyncManagedEnv2","cacheFileId","localUri","cacheDirectory","fileInfo","getInfoAsync","md5","exists","_yield$FileSystem$dow","Error","_x9","_x10","_x11","_downloadAsyncUnmanagedEnv2","startsWith"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\expo-asset\\src\\PlatformUtils.ts"],"sourcesContent":["import computeMd5 from 'blueimp-md5';\nimport Constants from 'expo-constants';\nimport { Manifest } from 'expo-constants/build/Constants.types';\nimport * as FileSystem from 'expo-file-system';\nimport { NativeModulesProxy } from 'expo-modules-core';\n\nimport { getManifestBaseUrl } from './AssetUris';\n\n// Constants.appOwnership is only available in managed apps (Expo client and standalone)\nexport const IS_MANAGED_ENV = !!Constants.appOwnership;\n\n// In the future (SDK38+) expo-updates is likely to be used in managed apps, so we decide\n// that you are in a bare app with updates if you're not in a managed app and you have\n// local assets available.\nexport const IS_BARE_ENV_WITH_UPDATES =\n  !IS_MANAGED_ENV &&\n  !!NativeModulesProxy.ExpoUpdates?.isEnabled &&\n  // if expo-updates is installed but we're running directly from the embedded bundle, we don't want\n  // to override the AssetSourceResolver\n  !NativeModulesProxy.ExpoUpdates?.isUsingEmbeddedAssets;\n\nexport const IS_ENV_WITH_UPDATES_ENABLED = IS_MANAGED_ENV || IS_BARE_ENV_WITH_UPDATES;\n\n// If it's not managed or bare w/ updates, then it must be bare w/o updates!\nexport const IS_BARE_ENV_WITHOUT_UPDATES = !IS_MANAGED_ENV && !IS_BARE_ENV_WITH_UPDATES;\n\n// Get the localAssets property from the ExpoUpdates native module so that we do\n// not need to include expo-updates as a dependency of expo-asset\nexport function getLocalAssets() {\n  return NativeModulesProxy.ExpoUpdates?.localAssets ?? {};\n}\n\nexport function getManifest(): { [key: string]: any } {\n  return Constants.__unsafeNoWarnManifest ?? {};\n}\n\nexport function getManifest2(): Manifest | undefined {\n  return Constants.__unsafeNoWarnManifest2;\n}\n\n// Compute manifest base URL if available\nexport const manifestBaseUrl = Constants.experienceUrl\n  ? getManifestBaseUrl(Constants.experienceUrl)\n  : null;\n\n// TODO: how should this behave in bare app with updates? re: hashAssetFiles\nexport async function downloadAsync(uri, hash, type, name): Promise<string> {\n  if (IS_MANAGED_ENV) {\n    return _downloadAsyncManagedEnv(uri, hash, type, name);\n  }\n\n  return _downloadAsyncUnmanagedEnv(uri, hash, type);\n}\n\n/**\n * Check if the file exists on disk already, perform integrity check if so.\n * Otherwise, download it.\n */\nasync function _downloadAsyncManagedEnv(uri, hash, type, name): Promise<string> {\n  const cacheFileId = hash || computeMd5(uri);\n  const localUri = `${FileSystem.cacheDirectory}ExponentAsset-${cacheFileId}.${type}`;\n  const fileInfo = await FileSystem.getInfoAsync(localUri, {\n    md5: true,\n  });\n  if (!fileInfo.exists || (hash !== null && fileInfo.md5 !== hash)) {\n    const { md5 } = await FileSystem.downloadAsync(uri, localUri, {\n      md5: true,\n    });\n    if (hash !== null && md5 !== hash) {\n      throw new Error(\n        `Downloaded file for asset '${name}.${type}' ` +\n          `Located at ${uri} ` +\n          `failed MD5 integrity check`\n      );\n    }\n  }\n  return localUri;\n}\n\n/**\n * Just download the asset, don't perform integrity check because we don't have\n * the hash to compare it with (we don't have hashAssetFiles plugin). Hash is\n * only used for the file name.\n */\nasync function _downloadAsyncUnmanagedEnv(uri, hash, type): Promise<string> {\n  // TODO: does this make sense to bail out if it's already at a file URL\n  // because it's already available locally?\n  if (uri.startsWith('file://')) {\n    return uri;\n  }\n\n  const cacheFileId = hash || computeMd5(uri);\n  const localUri = `${FileSystem.cacheDirectory}ExponentAsset-${cacheFileId}.${type}`;\n\n  // We don't check the FileSystem for an existing version of the asset and we\n  // also don't perform an integrity check!\n  await FileSystem.downloadAsync(uri, localUri);\n  return localUri;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}