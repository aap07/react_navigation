{"ast":null,"code":"import chalk from 'chalk';\nimport path from 'path';\nexport function verifySearchResults(searchResults) {\n  var cwd = process.cwd();\n  var relativePath = function relativePath(pkg) {\n    return path.relative(cwd, pkg.path);\n  };\n  var counter = 0;\n  for (var moduleName in searchResults) {\n    var _revision$duplicates;\n    var revision = searchResults[moduleName];\n    if ((_revision$duplicates = revision.duplicates) != null && _revision$duplicates.length) {\n      console.warn(`⚠️  Found multiple revisions of ${chalk.green(moduleName)}`);\n      console.log(` - ${chalk.magenta(relativePath(revision))} (${chalk.cyan(revision.version)})`);\n      for (var duplicate of revision.duplicates) {\n        console.log(` - ${chalk.gray(relativePath(duplicate))} (${chalk.gray(duplicate.version)})`);\n      }\n      counter++;\n    }\n  }\n  if (counter > 0) {\n    console.warn('⚠️  Please get rid of multiple revisions as it may introduce some side effects or compatibility issues');\n  }\n  return counter;\n}","map":{"version":3,"names":["chalk","path","verifySearchResults","searchResults","cwd","process","relativePath","pkg","relative","counter","moduleName","_revision$duplicates","revision","duplicates","length","console","warn","green","log","magenta","cyan","version","duplicate","gray"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/expo-modules-autolinking/src/autolinking/verifySearchResults.ts"],"sourcesContent":["import chalk from 'chalk';\nimport path from 'path';\n\nimport { PackageRevision, SearchResults } from '../types';\n\n/**\n * Verifies the search results by checking whether there are no duplicates.\n */\nexport function verifySearchResults(searchResults: SearchResults): number {\n  const cwd = process.cwd();\n  const relativePath: (pkg: PackageRevision) => string = (pkg) => path.relative(cwd, pkg.path);\n  let counter = 0;\n\n  for (const moduleName in searchResults) {\n    const revision = searchResults[moduleName];\n\n    if (revision.duplicates?.length) {\n      console.warn(`⚠️  Found multiple revisions of ${chalk.green(moduleName)}`);\n      console.log(` - ${chalk.magenta(relativePath(revision))} (${chalk.cyan(revision.version)})`);\n\n      for (const duplicate of revision.duplicates) {\n        console.log(` - ${chalk.gray(relativePath(duplicate))} (${chalk.gray(duplicate.version)})`);\n      }\n      counter++;\n    }\n  }\n  if (counter > 0) {\n    console.warn(\n      '⚠️  Please get rid of multiple revisions as it may introduce some side effects or compatibility issues'\n    );\n  }\n  return counter;\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,MAAM;AAOvB,OAAO,SAASC,mBAAmBA,CAACC,aAA4B,EAAU;EACxE,IAAMC,GAAG,GAAGC,OAAO,CAACD,GAAG,CAAC,CAAC;EACzB,IAAME,YAA8C,GAAG,SAAjDA,YAA8CA,CAAIC,GAAG;IAAA,OAAKN,IAAI,CAACO,QAAQ,CAACJ,GAAG,EAAEG,GAAG,CAACN,IAAI,CAAC;EAAA;EAC5F,IAAIQ,OAAO,GAAG,CAAC;EAEf,KAAK,IAAMC,UAAU,IAAIP,aAAa,EAAE;IAAA,IAAAQ,oBAAA;IACtC,IAAMC,QAAQ,GAAGT,aAAa,CAACO,UAAU,CAAC;IAE1C,KAAAC,oBAAA,GAAIC,QAAQ,CAACC,UAAU,aAAnBF,oBAAA,CAAqBG,MAAM,EAAE;MAC/BC,OAAO,CAACC,IAAI,CAAE,mCAAkChB,KAAK,CAACiB,KAAK,CAACP,UAAU,CAAE,EAAC,CAAC;MAC1EK,OAAO,CAACG,GAAG,CAAE,MAAKlB,KAAK,CAACmB,OAAO,CAACb,YAAY,CAACM,QAAQ,CAAC,CAAE,KAAIZ,KAAK,CAACoB,IAAI,CAACR,QAAQ,CAACS,OAAO,CAAE,GAAE,CAAC;MAE5F,KAAK,IAAMC,SAAS,IAAIV,QAAQ,CAACC,UAAU,EAAE;QAC3CE,OAAO,CAACG,GAAG,CAAE,MAAKlB,KAAK,CAACuB,IAAI,CAACjB,YAAY,CAACgB,SAAS,CAAC,CAAE,KAAItB,KAAK,CAACuB,IAAI,CAACD,SAAS,CAACD,OAAO,CAAE,GAAE,CAAC;MAC7F;MACAZ,OAAO,EAAE;IACX;EACF;EACA,IAAIA,OAAO,GAAG,CAAC,EAAE;IACfM,OAAO,CAACC,IAAI,CACV,wGACF,CAAC;EACH;EACA,OAAOP,OAAO;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}