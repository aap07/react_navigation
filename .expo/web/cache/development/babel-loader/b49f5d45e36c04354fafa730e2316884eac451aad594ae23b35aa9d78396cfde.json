{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateUniversalIconAsync = generateUniversalIconAsync;\nexports.getIcons = getIcons;\nexports.setIconsAsync = setIconsAsync;\nexports.withIosIcons = void 0;\nfunction _configPlugins() {\n  var data = require(\"@expo/config-plugins\");\n  _configPlugins = function _configPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _imageUtils() {\n  var data = require(\"@expo/image-utils\");\n  _imageUtils = function _imageUtils() {\n    return data;\n  };\n  return data;\n}\nfunction fs() {\n  var data = _interopRequireWildcard(require(\"fs-extra\"));\n  fs = function fs() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = require(\"path\");\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _AssetContents() {\n  var data = require(\"./AssetContents\");\n  _AssetContents = function _AssetContents() {\n    return data;\n  };\n  return data;\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nvar getProjectName = _configPlugins().IOSConfig.XcodeUtils.getProjectName;\nvar IMAGE_CACHE_NAME = 'icons';\nvar IMAGESET_PATH = 'Images.xcassets/AppIcon.appiconset';\nvar withIosIcons = function withIosIcons(config) {\n  return (0, _configPlugins().withDangerousMod)(config, ['ios', function () {\n    var _ref = _asyncToGenerator(function* (config) {\n      yield setIconsAsync(config, config.modRequest.projectRoot);\n      return config;\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }()]);\n};\nexports.withIosIcons = withIosIcons;\nfunction getIcons(config) {\n  var _config$ios;\n  return ((_config$ios = config.ios) === null || _config$ios === void 0 ? void 0 : _config$ios.icon) || config.icon || null;\n}\nfunction setIconsAsync(_x2, _x3) {\n  return _setIconsAsync.apply(this, arguments);\n}\nfunction _setIconsAsync() {\n  _setIconsAsync = _asyncToGenerator(function* (config, projectRoot) {\n    var icon = getIcons(config);\n    if (!icon) {\n      _configPlugins().WarningAggregator.addWarningIOS('icon', 'This is the image that your app uses on your home screen, you will need to configure it manually.');\n      return;\n    }\n    var iosNamedProjectRoot = getIosNamedProjectPath(projectRoot);\n    yield fs().ensureDir((0, _path().join)(iosNamedProjectRoot, IMAGESET_PATH));\n    var imagesJson = yield generateUniversalIconAsync(projectRoot, {\n      icon: icon,\n      cacheKey: 'universal-icon',\n      iosNamedProjectRoot: iosNamedProjectRoot,\n      platform: 'ios'\n    });\n    yield (0, _AssetContents().writeContentsJsonAsync)((0, _path().join)(iosNamedProjectRoot, IMAGESET_PATH), {\n      images: imagesJson\n    });\n  });\n  return _setIconsAsync.apply(this, arguments);\n}\nfunction getIosNamedProjectPath(projectRoot) {\n  var projectName = getProjectName(projectRoot);\n  return (0, _path().join)(projectRoot, 'ios', projectName);\n}\nfunction getAppleIconName(size, scale) {\n  return `App-Icon-${size}x${size}@${scale}x.png`;\n}\nfunction generateUniversalIconAsync(_x4, _x5) {\n  return _generateUniversalIconAsync.apply(this, arguments);\n}\nfunction _generateUniversalIconAsync() {\n  _generateUniversalIconAsync = _asyncToGenerator(function* (projectRoot, _ref2) {\n    var icon = _ref2.icon,\n      cacheKey = _ref2.cacheKey,\n      iosNamedProjectRoot = _ref2.iosNamedProjectRoot,\n      platform = _ref2.platform;\n    var size = 1024;\n    var filename = getAppleIconName(size, 1);\n    var _yield = yield (0, _imageUtils().generateImageAsync)({\n        projectRoot: projectRoot,\n        cacheType: IMAGE_CACHE_NAME + cacheKey\n      }, {\n        src: icon,\n        name: filename,\n        width: size,\n        height: size,\n        removeTransparency: true,\n        resizeMode: 'cover',\n        backgroundColor: '#ffffff'\n      }),\n      source = _yield.source;\n    var assetPath = (0, _path().join)(iosNamedProjectRoot, IMAGESET_PATH, filename);\n    yield fs().writeFile(assetPath, source);\n    return [{\n      filename: getAppleIconName(size, 1),\n      idiom: 'universal',\n      platform: platform,\n      size: `${size}x${size}`\n    }];\n  });\n  return _generateUniversalIconAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_configPlugins","data","require","_imageUtils","fs","_interopRequireWildcard","_path","_AssetContents","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","getProjectName","IOSConfig","XcodeUtils","IMAGE_CACHE_NAME","IMAGESET_PATH","withIosIcons","config","withDangerousMod","_ref","_asyncToGenerator","setIconsAsync","modRequest","projectRoot","_x","apply","arguments","exports","getIcons","_config$ios","ios","icon","_x2","_x3","_setIconsAsync","WarningAggregator","addWarningIOS","iosNamedProjectRoot","getIosNamedProjectPath","ensureDir","join","imagesJson","generateUniversalIconAsync","cacheKey","platform","writeContentsJsonAsync","images","projectName","getAppleIconName","size","scale","_x4","_x5","_generateUniversalIconAsync","_ref2","filename","_yield","generateImageAsync","cacheType","src","name","width","height","removeTransparency","resizeMode","backgroundColor","source","assetPath","writeFile","idiom"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\prebuild-config\\src\\plugins\\icons\\withIosIcons.ts"],"sourcesContent":["import { ConfigPlugin, IOSConfig, WarningAggregator, withDangerousMod } from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\nimport { generateImageAsync } from '@expo/image-utils';\nimport * as fs from 'fs-extra';\nimport { join } from 'path';\n\nimport { ContentsJson, writeContentsJsonAsync } from './AssetContents';\n\nconst { getProjectName } = IOSConfig.XcodeUtils;\n\nconst IMAGE_CACHE_NAME = 'icons';\nconst IMAGESET_PATH = 'Images.xcassets/AppIcon.appiconset';\n\nexport const withIosIcons: ConfigPlugin = (config) => {\n  return withDangerousMod(config, [\n    'ios',\n    async (config) => {\n      await setIconsAsync(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport function getIcons(config: Pick<ExpoConfig, 'icon' | 'ios'>): string | null {\n  // No support for empty strings.\n  return config.ios?.icon || config.icon || null;\n}\n\nexport async function setIconsAsync(config: ExpoConfig, projectRoot: string) {\n  const icon = getIcons(config);\n  if (!icon) {\n    WarningAggregator.addWarningIOS(\n      'icon',\n      'This is the image that your app uses on your home screen, you will need to configure it manually.'\n    );\n    return;\n  }\n\n  // Something like projectRoot/ios/MyApp/\n  const iosNamedProjectRoot = getIosNamedProjectPath(projectRoot);\n\n  // Ensure the Images.xcassets/AppIcon.appiconset path exists\n  await fs.ensureDir(join(iosNamedProjectRoot, IMAGESET_PATH));\n\n  // Store the image JSON data for assigning via the Contents.json\n  const imagesJson: ContentsJson['images'] = await generateUniversalIconAsync(projectRoot, {\n    icon,\n    cacheKey: 'universal-icon',\n    iosNamedProjectRoot,\n    platform: 'ios',\n  });\n\n  // Finally, write the Config.json\n  await writeContentsJsonAsync(join(iosNamedProjectRoot, IMAGESET_PATH), { images: imagesJson });\n}\n\n/**\n * Return the project's named iOS path: ios/MyProject/\n *\n * @param projectRoot Expo project root path.\n */\nfunction getIosNamedProjectPath(projectRoot: string): string {\n  const projectName = getProjectName(projectRoot);\n  return join(projectRoot, 'ios', projectName);\n}\n\nfunction getAppleIconName(size: number, scale: number): string {\n  return `App-Icon-${size}x${size}@${scale}x.png`;\n}\n\nexport async function generateUniversalIconAsync(\n  projectRoot: string,\n  {\n    icon,\n    cacheKey,\n    iosNamedProjectRoot,\n    platform,\n  }: { platform: 'watchos' | 'ios'; icon: string; iosNamedProjectRoot: string; cacheKey: string }\n): Promise<ContentsJson['images']> {\n  const size = 1024;\n  const filename = getAppleIconName(size, 1);\n  // Using this method will cache the images in `.expo` based on the properties used to generate them.\n  // this method also supports remote URLs and using the global sharp instance.\n  const { source } = await generateImageAsync(\n    { projectRoot, cacheType: IMAGE_CACHE_NAME + cacheKey },\n    {\n      src: icon,\n      name: filename,\n      width: size,\n      height: size,\n      removeTransparency: true,\n      // The icon should be square, but if it's not then it will be cropped.\n      resizeMode: 'cover',\n      // Force the background color to solid white to prevent any transparency.\n      // TODO: Maybe use a more adaptive option based on the icon color?\n      backgroundColor: '#ffffff',\n    }\n  );\n  // Write image buffer to the file system.\n  const assetPath = join(iosNamedProjectRoot, IMAGESET_PATH, filename);\n  await fs.writeFile(assetPath, source);\n\n  return [\n    {\n      filename: getAppleIconName(size, 1),\n      idiom: 'universal',\n      platform,\n      size: `${size}x${size}`,\n    },\n  ];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}