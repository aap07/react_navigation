{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/react-native-gesture-handler/lib/typescript/handlers/gestures/gestureObjects.d.ts"],"sourcesContent":["import { FlingGesture } from './flingGesture';\nimport { ForceTouchGesture } from './forceTouchGesture';\nimport { Gesture } from './gesture';\nimport { ComposedGesture, ExclusiveGesture, SimultaneousGesture } from './gestureComposition';\nimport { LongPressGesture } from './longPressGesture';\nimport { PanGesture } from './panGesture';\nimport { PinchGesture } from './pinchGesture';\nimport { RotationGesture } from './rotationGesture';\nimport { TapGesture } from './tapGesture';\nimport { NativeGesture } from './nativeGesture';\nimport { ManualGesture } from './manualGesture';\nexport declare const GestureObjects: {\n    Tap: () => TapGesture;\n    Pan: () => PanGesture;\n    Pinch: () => PinchGesture;\n    Rotation: () => RotationGesture;\n    Fling: () => FlingGesture;\n    LongPress: () => LongPressGesture;\n    ForceTouch: () => ForceTouchGesture;\n    Native: () => NativeGesture;\n    Manual: () => ManualGesture;\n    /**\n     * Builds a composed gesture consisting of gestures provided as parameters.\n     * The first one that becomes active cancels the rest of gestures.\n     */\n    Race: (...gestures: Gesture[]) => ComposedGesture;\n    /**\n     * Builds a composed gesture that allows all base gestures to run simultaneously.\n     */\n    Simultaneous(...gestures: Gesture[]): SimultaneousGesture;\n    /**\n     * Builds a composed gesture where only one of the provided gestures can become active.\n     * Priority is decided through the order of gestures: the first one has higher priority\n     * than the second one, second one has higher priority than the third one, and so on.\n     * For example, to make a gesture that recognizes both single and double tap you need\n     * to call Exclusive(doubleTap, singleTap).\n     */\n    Exclusive(...gestures: Gesture[]): ExclusiveGesture;\n};\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}