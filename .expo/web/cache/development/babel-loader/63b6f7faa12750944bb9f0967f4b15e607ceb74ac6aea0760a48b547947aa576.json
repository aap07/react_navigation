{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _promises = _interopRequireDefault(require(\"fs/promises\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar Log = _interopRequireWildcard(require(\"../../../log\"));\nvar _dir = require(\"../../../utils/dir\");\nvar _env = require(\"../../../utils/env\");\nvar _fn = require(\"../../../utils/fn\");\nvar _glob = require(\"../../../utils/glob\");\nvar _prerequisite = require(\"../Prerequisite\");\nvar _ensureDependenciesAsync = require(\"../dependencies/ensureDependenciesAsync\");\nvar _updateTSConfig = require(\"./updateTSConfig\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar debug = require(\"debug\")(\"expo:doctor:typescriptSupport\");\nvar warnDisabled = (0, _fn).memoize(function () {\n  Log.warn(\"Skipping TypeScript setup: EXPO_NO_TYPESCRIPT_SETUP is enabled.\");\n});\nvar TypeScriptProjectPrerequisite = function (_prerequisite$Project) {\n  _inherits(TypeScriptProjectPrerequisite, _prerequisite$Project);\n  var _super = _createSuper(TypeScriptProjectPrerequisite);\n  function TypeScriptProjectPrerequisite() {\n    _classCallCheck(this, TypeScriptProjectPrerequisite);\n    return _super.apply(this, arguments);\n  }\n  _createClass(TypeScriptProjectPrerequisite, [{\n    key: \"assertImplementation\",\n    value: function () {\n      var _assertImplementation = _asyncToGenerator(function* () {\n        if (_env.env.EXPO_NO_TYPESCRIPT_SETUP) {\n          warnDisabled();\n          return true;\n        }\n        debug(\"Ensuring TypeScript support is setup\");\n        var tsConfigPath = _path.default.join(this.projectRoot, \"tsconfig.json\");\n        var intent = yield this._getSetupRequirements();\n        if (!intent) {\n          return false;\n        }\n        yield this._ensureDependenciesInstalledAsync();\n        yield (0, _updateTSConfig).updateTSConfigAsync({\n          tsConfigPath: tsConfigPath,\n          isBootstrapping: intent.isBootstrapping\n        });\n        return true;\n      });\n      function assertImplementation() {\n        return _assertImplementation.apply(this, arguments);\n      }\n      return assertImplementation;\n    }()\n  }, {\n    key: \"bootstrapAsync\",\n    value: function () {\n      var _bootstrapAsync = _asyncToGenerator(function* () {\n        if (_env.env.EXPO_NO_TYPESCRIPT_SETUP) {\n          warnDisabled();\n          return;\n        }\n        yield this._ensureDependenciesInstalledAsync({\n          skipPrompt: true\n        });\n        var tsConfigPath = _path.default.join(this.projectRoot, \"tsconfig.json\");\n        yield (0, _updateTSConfig).updateTSConfigAsync({\n          tsConfigPath: tsConfigPath,\n          isBootstrapping: true\n        });\n      });\n      function bootstrapAsync() {\n        return _bootstrapAsync.apply(this, arguments);\n      }\n      return bootstrapAsync;\n    }()\n  }, {\n    key: \"_getSetupRequirements\",\n    value: function () {\n      var _getSetupRequirements2 = _asyncToGenerator(function* () {\n        var tsConfigPath = yield this._hasTSConfig();\n        if (tsConfigPath) {\n          var content = yield _promises.default.readFile(tsConfigPath, {\n            encoding: \"utf8\"\n          }).then(function (txt) {\n            return txt.trim();\n          }, function () {\n            return null;\n          });\n          var isBlankConfig = content === \"\" || content === \"{}\";\n          return {\n            isBootstrapping: isBlankConfig\n          };\n        }\n        var typescriptFile = yield this._queryFirstTypeScriptFileAsync();\n        if (typescriptFile) {\n          return {\n            isBootstrapping: true\n          };\n        }\n        return null;\n      });\n      function _getSetupRequirements() {\n        return _getSetupRequirements2.apply(this, arguments);\n      }\n      return _getSetupRequirements;\n    }()\n  }, {\n    key: \"_ensureDependenciesInstalledAsync\",\n    value: function () {\n      var _ensureDependenciesInstalledAsync2 = _asyncToGenerator(function* () {\n        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          exp = _ref.exp,\n          skipPrompt = _ref.skipPrompt;\n        try {\n          return yield (0, _ensureDependenciesAsync).ensureDependenciesAsync(this.projectRoot, {\n            exp: exp,\n            skipPrompt: skipPrompt,\n            installMessage: `It looks like you're trying to use TypeScript but don't have the required dependencies installed.`,\n            warningMessage: \"If you're not using TypeScript, please remove the TypeScript files from your project\",\n            requiredPackages: [{\n              file: \"typescript/package.json\",\n              pkg: \"typescript\"\n            }, {\n              file: \"@types/react/package.json\",\n              pkg: \"@types/react\"\n            }]\n          });\n        } catch (error) {\n          this.resetAssertion();\n          throw error;\n        }\n      });\n      function _ensureDependenciesInstalledAsync() {\n        return _ensureDependenciesInstalledAsync2.apply(this, arguments);\n      }\n      return _ensureDependenciesInstalledAsync;\n    }()\n  }, {\n    key: \"_queryFirstTypeScriptFileAsync\",\n    value: function () {\n      var _queryFirstTypeScriptFileAsync2 = _asyncToGenerator(function* () {\n        var _this = this;\n        var results = yield (0, _glob).wrapGlobWithTimeout(function () {\n          return (0, _glob).everyMatchAsync(\"**/*.@(ts|tsx)\", {\n            cwd: _this.projectRoot,\n            ignore: [\"**/@(Carthage|Pods|node_modules)/**\", \"**/*.d.ts\", \"@(ios|android|web|web-build|dist)/**\"]\n          });\n        }, 5000);\n        if (results === false) {\n          return null;\n        }\n        var ref;\n        return (ref = results[0]) != null ? ref : null;\n      });\n      function _queryFirstTypeScriptFileAsync() {\n        return _queryFirstTypeScriptFileAsync2.apply(this, arguments);\n      }\n      return _queryFirstTypeScriptFileAsync;\n    }()\n  }, {\n    key: \"_hasTSConfig\",\n    value: function () {\n      var _hasTSConfig2 = _asyncToGenerator(function* () {\n        var tsConfigPath = _path.default.join(this.projectRoot, \"tsconfig.json\");\n        if (yield (0, _dir).fileExistsAsync(tsConfigPath)) {\n          return tsConfigPath;\n        }\n        return null;\n      });\n      function _hasTSConfig() {\n        return _hasTSConfig2.apply(this, arguments);\n      }\n      return _hasTSConfig;\n    }()\n  }]);\n  return TypeScriptProjectPrerequisite;\n}(_prerequisite.ProjectPrerequisite);\nexports.TypeScriptProjectPrerequisite = TypeScriptProjectPrerequisite;","map":{"version":3,"names":["_asyncToGenerator","require","_classCallCheck","_createClass","_inherits","_possibleConstructorReturn","_getPrototypeOf","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","_promises","_interopRequireDefault","_path","Log","_interopRequireWildcard","_dir","_env","_fn","_glob","_prerequisite","_ensureDependenciesAsync","_updateTSConfig","debug","warnDisabled","memoize","warn","TypeScriptProjectPrerequisite","_prerequisite$Project","_super","key","value","_assertImplementation","env","EXPO_NO_TYPESCRIPT_SETUP","tsConfigPath","default","join","projectRoot","intent","_getSetupRequirements","_ensureDependenciesInstalledAsync","updateTSConfigAsync","isBootstrapping","assertImplementation","_bootstrapAsync","skipPrompt","bootstrapAsync","_getSetupRequirements2","_hasTSConfig","content","readFile","encoding","then","txt","trim","isBlankConfig","typescriptFile","_queryFirstTypeScriptFileAsync","_ensureDependenciesInstalledAsync2","_ref","length","undefined","exp","ensureDependenciesAsync","installMessage","warningMessage","requiredPackages","file","pkg","error","resetAssertion","_queryFirstTypeScriptFileAsync2","_this","results","wrapGlobWithTimeout","everyMatchAsync","cwd","ignore","ref","_hasTSConfig2","fileExistsAsync","ProjectPrerequisite"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\doctor\\typescript\\TypeScriptProjectPrerequisite.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nimport * as Log from '../../../log';\nimport { fileExistsAsync } from '../../../utils/dir';\nimport { env } from '../../../utils/env';\nimport { memoize } from '../../../utils/fn';\nimport { everyMatchAsync, wrapGlobWithTimeout } from '../../../utils/glob';\nimport { ProjectPrerequisite } from '../Prerequisite';\nimport { ensureDependenciesAsync } from '../dependencies/ensureDependenciesAsync';\nimport { updateTSConfigAsync } from './updateTSConfig';\n\nconst debug = require('debug')('expo:doctor:typescriptSupport') as typeof console.log;\n\nconst warnDisabled = memoize(() => {\n  Log.warn('Skipping TypeScript setup: EXPO_NO_TYPESCRIPT_SETUP is enabled.');\n});\n\n/** Ensure the project has the required TypeScript support settings. */\nexport class TypeScriptProjectPrerequisite extends ProjectPrerequisite<boolean> {\n  /**\n   * Ensure a project that hasn't explicitly disabled typescript support has all the required packages for running in the browser.\n   *\n   * @returns `true` if the setup finished and no longer needs to be run again.\n   */\n  async assertImplementation(): Promise<boolean> {\n    if (env.EXPO_NO_TYPESCRIPT_SETUP) {\n      warnDisabled();\n      return true;\n    }\n    debug('Ensuring TypeScript support is setup');\n\n    const tsConfigPath = path.join(this.projectRoot, 'tsconfig.json');\n\n    // Ensure the project is TypeScript before continuing.\n    const intent = await this._getSetupRequirements();\n    if (!intent) {\n      return false;\n    }\n\n    // Ensure TypeScript packages are installed\n    await this._ensureDependenciesInstalledAsync();\n\n    // Update the config\n    await updateTSConfigAsync({ tsConfigPath, isBootstrapping: intent.isBootstrapping });\n\n    return true;\n  }\n\n  async bootstrapAsync(): Promise<void> {\n    if (env.EXPO_NO_TYPESCRIPT_SETUP) {\n      warnDisabled();\n      return;\n    }\n    // Ensure TypeScript packages are installed\n    await this._ensureDependenciesInstalledAsync({\n      skipPrompt: true,\n    });\n\n    const tsConfigPath = path.join(this.projectRoot, 'tsconfig.json');\n\n    // Update the config\n    await updateTSConfigAsync({ tsConfigPath, isBootstrapping: true });\n  }\n\n  /** Exposed for testing. */\n  async _getSetupRequirements(): Promise<{\n    /** Indicates that TypeScript support is being bootstrapped. */\n    isBootstrapping: boolean;\n  } | null> {\n    const tsConfigPath = await this._hasTSConfig();\n\n    // Enable TS setup if the project has a `tsconfig.json`\n    if (tsConfigPath) {\n      const content = await fs.readFile(tsConfigPath, { encoding: 'utf8' }).then(\n        (txt) => txt.trim(),\n        // null when the file doesn't exist.\n        () => null\n      );\n      const isBlankConfig = content === '' || content === '{}';\n      return { isBootstrapping: isBlankConfig };\n    }\n    // This is a somewhat heavy check in larger projects.\n    // Test that this is reasonably paced by running expo start in `expo/apps/native-component-list`\n    const typescriptFile = await this._queryFirstTypeScriptFileAsync();\n    if (typescriptFile) {\n      return { isBootstrapping: true };\n    }\n\n    return null;\n  }\n\n  /** Exposed for testing. */\n  async _ensureDependenciesInstalledAsync({\n    exp,\n    skipPrompt,\n  }: { exp?: ExpoConfig; skipPrompt?: boolean } = {}): Promise<boolean> {\n    try {\n      return await ensureDependenciesAsync(this.projectRoot, {\n        exp,\n        skipPrompt,\n        installMessage: `It looks like you're trying to use TypeScript but don't have the required dependencies installed.`,\n        warningMessage:\n          \"If you're not using TypeScript, please remove the TypeScript files from your project\",\n        requiredPackages: [\n          // use typescript/package.json to skip node module cache issues when the user installs\n          // the package and attempts to resolve the module in the same process.\n          { file: 'typescript/package.json', pkg: 'typescript' },\n          { file: '@types/react/package.json', pkg: '@types/react' },\n        ],\n      });\n    } catch (error) {\n      // Reset the cached check so we can re-run the check if the user re-runs the command by pressing 'w' in the Terminal UI.\n      this.resetAssertion();\n      throw error;\n    }\n  }\n\n  /** Return the first TypeScript file in the project. */\n  async _queryFirstTypeScriptFileAsync(): Promise<null | string> {\n    const results = await wrapGlobWithTimeout(\n      () =>\n        // TODO(Bacon): Use `everyMatch` since a bug causes `anyMatch` to return inaccurate results when used multiple times.\n        everyMatchAsync('**/*.@(ts|tsx)', {\n          cwd: this.projectRoot,\n          ignore: [\n            '**/@(Carthage|Pods|node_modules)/**',\n            '**/*.d.ts',\n            '@(ios|android|web|web-build|dist)/**',\n          ],\n        }),\n      5000\n    );\n\n    if (results === false) {\n      return null;\n    }\n    return results[0] ?? null;\n  }\n\n  async _hasTSConfig(): Promise<string | null> {\n    const tsConfigPath = path.join(this.projectRoot, 'tsconfig.json');\n    if (await fileExistsAsync(tsConfigPath)) {\n      return tsConfigPath;\n    }\n    return null;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}