{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { Component } from 'react';\nvar DrawerLayout = function (_Component) {\n  _inherits(DrawerLayout, _Component);\n  var _super = _createSuper(DrawerLayout);\n  function DrawerLayout() {\n    _classCallCheck(this, DrawerLayout);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(DrawerLayout);\n}(Component);\nexport { DrawerLayout as default };\nexport {};","map":{"version":3,"names":["Component","DrawerLayout","_Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","default"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/react-native-gesture-handler/lib/typescript/components/DrawerLayout.d.ts"],"sourcesContent":["import * as React from 'react';\nimport { Component } from 'react';\nimport { Animated, StatusBarAnimation, StyleProp, ViewStyle } from 'react-native';\nimport { UserSelect } from '../handlers/gestureHandlerCommon';\nimport { PanGestureHandler } from '../handlers/PanGestureHandler';\nexport declare type DrawerPosition = 'left' | 'right';\nexport declare type DrawerState = 'Idle' | 'Dragging' | 'Settling';\nexport declare type DrawerType = 'front' | 'back' | 'slide';\nexport declare type DrawerLockMode = 'unlocked' | 'locked-closed' | 'locked-open';\nexport declare type DrawerKeyboardDismissMode = 'none' | 'on-drag';\ndeclare type AnimatedInterpolation = ReturnType<Animated.Value['interpolate']>;\nexport interface DrawerLayoutProps {\n    /**\n     * This attribute is present in the standard implementation already and is one\n     * of the required params. Gesture handler version of DrawerLayout make it\n     * possible for the function passed as `renderNavigationView` to take an\n     * Animated value as a parameter that indicates the progress of drawer\n     * opening/closing animation (progress value is 0 when closed and 1 when\n     * opened). This can be used by the drawer component to animated its children\n     * while the drawer is opening or closing.\n     */\n    renderNavigationView: (progressAnimatedValue: Animated.Value) => React.ReactNode;\n    drawerPosition?: DrawerPosition;\n    drawerWidth?: number;\n    drawerBackgroundColor?: string;\n    drawerLockMode?: DrawerLockMode;\n    keyboardDismissMode?: DrawerKeyboardDismissMode;\n    /**\n     * Called when the drawer is closed.\n     */\n    onDrawerClose?: () => void;\n    /**\n     * Called when the drawer is opened.\n     */\n    onDrawerOpen?: () => void;\n    /**\n     * Called when the status of the drawer changes.\n     */\n    onDrawerStateChanged?: (newState: DrawerState, drawerWillShow: boolean) => void;\n    useNativeAnimations?: boolean;\n    drawerType?: DrawerType;\n    /**\n     * Defines how far from the edge of the content view the gesture should\n     * activate.\n     */\n    edgeWidth?: number;\n    minSwipeDistance?: number;\n    /**\n     * When set to true Drawer component will use\n     * {@link https://reactnative.dev/docs/statusbar StatusBar} API to hide the OS\n     * status bar whenever the drawer is pulled or when its in an \"open\" state.\n     */\n    hideStatusBar?: boolean;\n    /**\n     * @default 'slide'\n     *\n     * Can be used when hideStatusBar is set to true and will select the animation\n     * used for hiding/showing the status bar. See\n     * {@link https://reactnative.dev/docs/statusbar StatusBar} documentation for\n     * more details\n     */\n    statusBarAnimation?: StatusBarAnimation;\n    /**\n     * @default black\n     *\n     * Color of a semi-transparent overlay to be displayed on top of the content\n     * view when drawer gets open. A solid color should be used as the opacity is\n     * added by the Drawer itself and the opacity of the overlay is animated (from\n     * 0% to 70%).\n     */\n    overlayColor?: string;\n    contentContainerStyle?: StyleProp<ViewStyle>;\n    drawerContainerStyle?: StyleProp<ViewStyle>;\n    /**\n     * Enables two-finger gestures on supported devices, for example iPads with\n     * trackpads. If not enabled the gesture will require click + drag, with\n     * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n     * the gesture.\n     */\n    enableTrackpadTwoFingerGesture?: boolean;\n    onDrawerSlide?: (position: number) => void;\n    onGestureRef?: (ref: PanGestureHandler) => void;\n    children?: React.ReactNode | ((openValue?: AnimatedInterpolation) => React.ReactNode);\n    /**\n     * @default 'none'\n     * Defines which userSelect property should be used.\n     * Values: 'none'|'text'|'auto'\n     */\n    userSelect?: UserSelect;\n}\nexport declare type DrawerLayoutState = {\n    dragX: Animated.Value;\n    touchX: Animated.Value;\n    drawerTranslation: Animated.Value;\n    containerWidth: number;\n    drawerState: DrawerState;\n    drawerOpened: boolean;\n};\nexport declare type DrawerMovementOption = {\n    velocity?: number;\n    speed?: number;\n};\nexport default class DrawerLayout extends Component<DrawerLayoutProps, DrawerLayoutState> {\n    static defaultProps: {\n        drawerWidth: number;\n        drawerPosition: string;\n        useNativeAnimations: boolean;\n        drawerType: string;\n        edgeWidth: number;\n        minSwipeDistance: number;\n        overlayColor: string;\n        drawerLockMode: string;\n        enableTrackpadTwoFingerGesture: boolean;\n    };\n    constructor(props: DrawerLayoutProps);\n    shouldComponentUpdate(props: DrawerLayoutProps, state: DrawerLayoutState): boolean;\n    private openValue?;\n    private onGestureEvent?;\n    private accessibilityIsModalView;\n    private pointerEventsView;\n    private panGestureHandler;\n    private drawerShown;\n    static positions: {\n        Left: string;\n        Right: string;\n    };\n    private updateAnimatedEvent;\n    private handleContainerLayout;\n    private emitStateChanged;\n    private openingHandlerStateChange;\n    private onTapHandlerStateChange;\n    private handleRelease;\n    private updateShowing;\n    private animateDrawer;\n    openDrawer: (options?: DrawerMovementOption) => void;\n    closeDrawer: (options?: DrawerMovementOption) => void;\n    private renderOverlay;\n    private renderDrawer;\n    private setPanGestureRef;\n    render(): JSX.Element;\n}\nexport {};\n"],"mappings":";;;;;;;AACA,SAASA,SAAS,QAAQ,OAAO;AAAC,IAqGbC,YAAY,aAAAC,UAAA;EAAAC,SAAA,CAAAF,YAAA,EAAAC,UAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,YAAA;EAAA,SAAAA,aAAA;IAAAK,eAAA,OAAAL,YAAA;IAAA,OAAAG,MAAA,CAAAG,KAAA,OAAAC,SAAA;EAAA;EAAA,OAAAC,YAAA,CAAAR,YAAA;AAAA,EAASD,SAAS;AAAA,SAA9BC,YAAY,IAAAS,OAAA;AAuCjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}