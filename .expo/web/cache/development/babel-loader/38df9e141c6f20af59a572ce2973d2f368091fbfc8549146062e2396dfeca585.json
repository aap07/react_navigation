{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.applyPermissions = applyPermissions;\nexports.createPermissionsPlugin = createPermissionsPlugin;\nfunction _debug() {\n  var data = _interopRequireDefault(require(\"debug\"));\n  _debug = function _debug() {\n    return data;\n  };\n  return data;\n}\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = (0, _debug().default)('expo:config-plugins:ios:permissions');\nfunction applyPermissions(defaults, permissions, infoPlist) {\n  var entries = Object.entries(defaults);\n  if (entries.length === 0) {\n    debug(`No defaults provided: ${JSON.stringify(permissions)}`);\n  }\n  for (var _ref of entries) {\n    var _ref2 = _slicedToArray(_ref, 2);\n    var permission = _ref2[0];\n    var description = _ref2[1];\n    if (permissions[permission] === false) {\n      debug(`Deleting \"${permission}\"`);\n      delete infoPlist[permission];\n    } else {\n      infoPlist[permission] = permissions[permission] || infoPlist[permission] || description;\n      debug(`Setting \"${permission}\" to \"${infoPlist[permission]}\"`);\n    }\n  }\n  return infoPlist;\n}\nfunction createPermissionsPlugin(defaults, name) {\n  var withIosPermissions = function withIosPermissions(config, permissions) {\n    return (0, _iosPlugins().withInfoPlist)(config, function () {\n      var _ref3 = _asyncToGenerator(function* (config) {\n        config.modResults = applyPermissions(defaults, permissions, config.modResults);\n        return config;\n      });\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  };\n  if (name) {\n    Object.defineProperty(withIosPermissions, 'name', {\n      value: name\n    });\n  }\n  return withIosPermissions;\n}","map":{"version":3,"names":["_debug","data","_interopRequireDefault","require","_iosPlugins","obj","__esModule","default","debug","applyPermissions","defaults","permissions","infoPlist","entries","Object","length","JSON","stringify","_ref","_ref2","_slicedToArray","permission","description","createPermissionsPlugin","name","withIosPermissions","config","withInfoPlist","_ref3","_asyncToGenerator","modResults","_x","apply","arguments","defineProperty","value"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\ios\\Permissions.ts"],"sourcesContent":["import Debug from 'debug';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withInfoPlist } from '../plugins/ios-plugins';\nimport { InfoPlist } from './IosConfig.types';\n\nconst debug = Debug('expo:config-plugins:ios:permissions');\n\nexport function applyPermissions<Defaults extends Record<string, string> = Record<string, string>>(\n  defaults: Defaults,\n  permissions: Partial<Record<keyof Defaults, string | false>>,\n  infoPlist: InfoPlist\n): InfoPlist {\n  const entries = Object.entries(defaults);\n  if (entries.length === 0) {\n    debug(`No defaults provided: ${JSON.stringify(permissions)}`);\n  }\n  for (const [permission, description] of entries) {\n    if (permissions[permission] === false) {\n      debug(`Deleting \"${permission}\"`);\n      delete infoPlist[permission];\n    } else {\n      infoPlist[permission] = permissions[permission] || infoPlist[permission] || description;\n      debug(`Setting \"${permission}\" to \"${infoPlist[permission]}\"`);\n    }\n  }\n  return infoPlist;\n}\n\n/**\n * Helper method for creating mods to apply default permissions.\n *\n * @param action\n */\nexport function createPermissionsPlugin<\n  Defaults extends Record<string, string> = Record<string, string>\n>(defaults: Defaults, name?: string) {\n  const withIosPermissions: ConfigPlugin<Record<keyof Defaults, string | undefined | false>> = (\n    config,\n    permissions\n  ) =>\n    withInfoPlist(config, async (config) => {\n      config.modResults = applyPermissions(defaults, permissions, config.modResults);\n      return config;\n    });\n  if (name) {\n    Object.defineProperty(withIosPermissions, 'name', {\n      value: name,\n    });\n  }\n  return withIosPermissions;\n}\n"],"mappings":";;;;;;;;;AAAA,SAAAA,OAAA;EAAA,IAAAC,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAH,MAAA,YAAAA,OAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAGA,SAAAG,YAAA;EAAA,IAAAH,IAAA,GAAAE,OAAA;EAAAC,WAAA,YAAAA,YAAA;IAAA,OAAAH,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAAuD,SAAAC,uBAAAG,GAAA;EAAA,OAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA;IAAAE,OAAA,EAAAF;EAAA;AAAA;AAGvD,IAAMG,KAAK,GAAG,IAAAR,MAAA,GAAAO,OAAK,EAAC,qCAAqC,CAAC;AAEnD,SAASE,gBAAgBA,CAC9BC,QAAkB,EAClBC,WAA4D,EAC5DC,SAAoB,EACT;EACX,IAAMC,OAAO,GAAGC,MAAM,CAACD,OAAO,CAACH,QAAQ,CAAC;EACxC,IAAIG,OAAO,CAACE,MAAM,KAAK,CAAC,EAAE;IACxBP,KAAK,CAAE,yBAAwBQ,IAAI,CAACC,SAAS,CAACN,WAAW,CAAE,EAAC,CAAC;EAC/D;EACA,SAAAO,IAAA,IAAwCL,OAAO,EAAE;IAAA,IAAAM,KAAA,GAAAC,cAAA,CAAAF,IAAA;IAAA,IAArCG,UAAU,GAAAF,KAAA;IAAA,IAAEG,WAAW,GAAAH,KAAA;IACjC,IAAIR,WAAW,CAACU,UAAU,CAAC,KAAK,KAAK,EAAE;MACrCb,KAAK,CAAE,aAAYa,UAAW,GAAE,CAAC;MACjC,OAAOT,SAAS,CAACS,UAAU,CAAC;IAC9B,CAAC,MAAM;MACLT,SAAS,CAACS,UAAU,CAAC,GAAGV,WAAW,CAACU,UAAU,CAAC,IAAIT,SAAS,CAACS,UAAU,CAAC,IAAIC,WAAW;MACvFd,KAAK,CAAE,YAAWa,UAAW,SAAQT,SAAS,CAACS,UAAU,CAAE,GAAE,CAAC;IAChE;EACF;EACA,OAAOT,SAAS;AAClB;AAOO,SAASW,uBAAuBA,CAErCb,QAAkB,EAAEc,IAAa,EAAE;EACnC,IAAMC,kBAAoF,GAAG,SAAvFA,kBAAoFA,CACxFC,MAAM,EACNf,WAAW;IAAA,OAEX,IAAAP,WAAA,GAAAuB,aAAa,EAACD,MAAM;MAAA,IAAAE,KAAA,GAAAC,iBAAA,CAAE,WAAOH,MAAM,EAAK;QACtCA,MAAM,CAACI,UAAU,GAAGrB,gBAAgB,CAACC,QAAQ,EAAEC,WAAW,EAAEe,MAAM,CAACI,UAAU,CAAC;QAC9E,OAAOJ,MAAM;MACf,CAAC;MAAA,iBAAAK,EAAA;QAAA,OAAAH,KAAA,CAAAI,KAAA,OAAAC,SAAA;MAAA;IAAA,IAAC;EAAA;EACJ,IAAIT,IAAI,EAAE;IACRV,MAAM,CAACoB,cAAc,CAACT,kBAAkB,EAAE,MAAM,EAAE;MAChDU,KAAK,EAAEX;IACT,CAAC,CAAC;EACJ;EACA,OAAOC,kBAAkB;AAC3B"},"metadata":{},"sourceType":"script","externalDependencies":[]}