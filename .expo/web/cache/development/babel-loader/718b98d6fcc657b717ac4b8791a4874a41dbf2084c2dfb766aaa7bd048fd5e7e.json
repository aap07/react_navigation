{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _excluded = [\"GADApplicationIdentifier\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getGoogleMobileAdsAppId = getGoogleMobileAdsAppId;\nexports.setGoogleMobileAdsAppId = setGoogleMobileAdsAppId;\nexports.withIosAdMob = void 0;\nfunction _configPlugins() {\n  var data = require(\"@expo/config-plugins\");\n  _configPlugins = function _configPlugins() {\n    return data;\n  };\n  return data;\n}\nvar withIosAdMob = function withIosAdMob(config) {\n  return (0, _configPlugins().withInfoPlist)(config, function (config) {\n    config.modResults = setAdMobConfig(config, config.modResults);\n    return config;\n  });\n};\nexports.withIosAdMob = withIosAdMob;\nfunction getGoogleMobileAdsAppId(config) {\n  var _config$ios$config$go, _config$ios, _config$ios$config;\n  return (_config$ios$config$go = (_config$ios = config.ios) === null || _config$ios === void 0 ? void 0 : (_config$ios$config = _config$ios.config) === null || _config$ios$config === void 0 ? void 0 : _config$ios$config.googleMobileAdsAppId) !== null && _config$ios$config$go !== void 0 ? _config$ios$config$go : null;\n}\nfunction setGoogleMobileAdsAppId(config, _ref) {\n  var GADApplicationIdentifier = _ref.GADApplicationIdentifier,\n    infoPlist = _objectWithoutProperties(_ref, _excluded);\n  var appId = getGoogleMobileAdsAppId(config);\n  if (appId === null) {\n    return infoPlist;\n  }\n  return _objectSpread(_objectSpread({}, infoPlist), {}, {\n    GADApplicationIdentifier: appId\n  });\n}\nfunction setAdMobConfig(config, infoPlist) {\n  infoPlist = setGoogleMobileAdsAppId(config, infoPlist);\n  return infoPlist;\n}","map":{"version":3,"names":["_configPlugins","data","require","withIosAdMob","config","withInfoPlist","modResults","setAdMobConfig","exports","getGoogleMobileAdsAppId","_config$ios$config$go","_config$ios","_config$ios$config","ios","googleMobileAdsAppId","setGoogleMobileAdsAppId","_ref","GADApplicationIdentifier","infoPlist","_objectWithoutProperties","_excluded","appId","_objectSpread"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\prebuild-config\\src\\plugins\\unversioned\\expo-ads-admob\\withIosAdMob.ts"],"sourcesContent":["import { ConfigPlugin, InfoPlist, withInfoPlist } from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\n\nexport const withIosAdMob: ConfigPlugin = (config) => {\n  return withInfoPlist(config, (config) => {\n    config.modResults = setAdMobConfig(config, config.modResults);\n    return config;\n  });\n};\n\n// NOTE(brentvatne): if the developer has installed the google ads sdk and does\n// not provide an app id their app will crash. Standalone apps get around this by\n// providing some default value, we will instead here assume that the user can\n// do the right thing if they have installed the package. This is a slight discrepancy\n// that arises in ejecting because it's possible for the package to be installed and\n// not crashing in the managed workflow, then you eject and the app crashes because\n// you don't have an id to fall back to.\nexport function getGoogleMobileAdsAppId(config: Pick<ExpoConfig, 'ios'>) {\n  return config.ios?.config?.googleMobileAdsAppId ?? null;\n}\n\nexport function setGoogleMobileAdsAppId(\n  config: Pick<ExpoConfig, 'ios'>,\n  { GADApplicationIdentifier, ...infoPlist }: InfoPlist\n): InfoPlist {\n  const appId = getGoogleMobileAdsAppId(config);\n\n  if (appId === null) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    GADApplicationIdentifier: appId,\n  };\n}\n\nfunction setAdMobConfig(config: Pick<ExpoConfig, 'ios'>, infoPlist: InfoPlist): InfoPlist {\n  infoPlist = setGoogleMobileAdsAppId(config, infoPlist);\n  return infoPlist;\n}\n"],"mappings":";;;;;;;;;;;;;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA,GAAAC,OAAA;EAAAF,cAAA,YAAAA,eAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAGO,IAAME,YAA0B,GAAI,SAA9BA,YAA0BA,CAAIC,MAAM,EAAK;EACpD,OAAO,IAAAJ,cAAA,GAAAK,aAAa,EAACD,MAAM,EAAG,UAAAA,MAAM,EAAK;IACvCA,MAAM,CAACE,UAAU,GAAGC,cAAc,CAACH,MAAM,EAAEA,MAAM,CAACE,UAAU,CAAC;IAC7D,OAAOF,MAAM;EACf,CAAC,CAAC;AACJ,CAAC;AAQDI,OAAA,CAAAL,YAAA,GAAAA,YAAA;AACO,SAASM,uBAAuBA,CAACL,MAA+B,EAAE;EAAA,IAAAM,qBAAA,EAAAC,WAAA,EAAAC,kBAAA;EACvE,QAAAF,qBAAA,IAAAC,WAAA,GAAOP,MAAM,CAACS,GAAG,cAAAF,WAAA,wBAAAC,kBAAA,GAAVD,WAAA,CAAYP,MAAM,cAAAQ,kBAAA,uBAAlBA,kBAAA,CAAoBE,oBAAoB,cAAAJ,qBAAA,cAAAA,qBAAA,GAAI,IAAI;AACzD;AAEO,SAASK,uBAAuBA,CACrCX,MAA+B,EAAAY,IAAA,EAEpB;EAAA,IADTC,wBAAwB,GAAAD,IAAA,CAAxBC,wBAAwB;IAAKC,SAAA,GAAAC,wBAAA,CAAAH,IAAA,EAAAI,SAAA;EAE/B,IAAMC,KAAK,GAAGZ,uBAAuB,CAACL,MAAM,CAAC;EAE7C,IAAIiB,KAAK,KAAK,IAAI,EAAE;IAClB,OAAOH,SAAS;EAClB;EAEA,OAAAI,aAAA,CAAAA,aAAA,KACKJ,SAAS;IACZD,wBAAwB,EAAEI;EAAA;AAE9B;AAEA,SAASd,cAAcA,CAACH,MAA+B,EAAEc,SAAoB,EAAa;EACxFA,SAAS,GAAGH,uBAAuB,CAACX,MAAM,EAAEc,SAAS,CAAC;EACtD,OAAOA,SAAS;AAClB"},"metadata":{},"sourceType":"script","externalDependencies":[]}