{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/cli/node_modules/type-fest/source/except.d.ts"],"sourcesContent":["/**\nCreate a type from an object type without certain keys.\n\nThis type is a stricter version of [`Omit`](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-5.html#the-omit-helper-type). The `Omit` type does not restrict the omitted keys to be keys present on the given type, while `Except` does. The benefits of a stricter type are avoiding typos and allowing the compiler to pick up on rename refactors automatically.\n\nPlease upvote [this issue](https://github.com/microsoft/TypeScript/issues/30825) if you want to have the stricter version as a built-in in TypeScript.\n\n@example\n```\nimport {Except} from 'type-fest';\n\ntype Foo = {\n\ta: number;\n\tb: string;\n\tc: boolean;\n};\n\ntype FooWithoutA = Except<Foo, 'a' | 'c'>;\n//=> {b: string};\n```\n*/\nexport type Except<ObjectType, KeysType extends keyof ObjectType> = Pick<ObjectType, Exclude<keyof ObjectType, KeysType>>;\n"],"mappings":""},"metadata":{},"sourceType":"script","externalDependencies":[]}