{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar VscodeDebuggerGetPossibleBreakpointsHandler = function () {\n  function VscodeDebuggerGetPossibleBreakpointsHandler() {\n    _classCallCheck(this, VscodeDebuggerGetPossibleBreakpointsHandler);\n  }\n  _createClass(VscodeDebuggerGetPossibleBreakpointsHandler, [{\n    key: \"onDebuggerMessage\",\n    value: function onDebuggerMessage(message, _ref) {\n      var socket = _ref.socket,\n        debuggerType = _ref.debuggerType;\n      if (debuggerType === \"vscode\" && message.method === \"Debugger.getPossibleBreakpoints\") {\n        var response = {\n          id: message.id,\n          result: {\n            locations: []\n          }\n        };\n        socket.send(JSON.stringify(response));\n        return true;\n      }\n      return false;\n    }\n  }]);\n  return VscodeDebuggerGetPossibleBreakpointsHandler;\n}();\nexports.VscodeDebuggerGetPossibleBreakpointsHandler = VscodeDebuggerGetPossibleBreakpointsHandler;","map":{"version":3,"names":["_classCallCheck","require","_createClass","VscodeDebuggerGetPossibleBreakpointsHandler","key","value","onDebuggerMessage","message","_ref","socket","debuggerType","method","response","id","result","locations","send","JSON","stringify"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\metro\\inspector-proxy\\handlers\\VscodeDebuggerGetPossibleBreakpoints.ts"],"sourcesContent":["import Protocol from 'devtools-protocol';\n\nimport { ExpoDebuggerInfo } from '../device';\nimport { CdpMessage, DebuggerRequest, DeviceResponse, InspectorHandler } from './types';\n\n/**\n * Hermes doesn't seem to handle this request, but `locations` have to be returned.\n * Respond with an empty location to make it \"spec compliant\" with Chrome DevTools.\n */\nexport class VscodeDebuggerGetPossibleBreakpointsHandler implements InspectorHandler {\n  onDebuggerMessage(\n    message: DebuggerRequest<DebuggerGetPossibleBreakpoints>,\n    { socket, debuggerType }: ExpoDebuggerInfo\n  ): boolean {\n    if (debuggerType === 'vscode' && message.method === 'Debugger.getPossibleBreakpoints') {\n      const response: DeviceResponse<DebuggerGetPossibleBreakpoints> = {\n        id: message.id,\n        result: { locations: [] },\n      };\n      socket.send(JSON.stringify(response));\n      return true;\n    }\n\n    return false;\n  }\n}\n\n/** @see https://chromedevtools.github.io/devtools-protocol/v8/Debugger/#method-getPossibleBreakpoints */\nexport type DebuggerGetPossibleBreakpoints = CdpMessage<\n  'Debugger.getPossibleBreakpoints',\n  Protocol.Debugger.GetPossibleBreakpointsRequest,\n  Protocol.Debugger.GetPossibleBreakpointsResponse\n>;\n"],"mappings":"AAAA;;AAAA,IAAAA,eAAA,GAAAC,OAAA;AAAA,IAAAC,YAAA,GAAAD,OAAA;;;;IASaE,2CAA2C;EAAA,SAAAA,4CAAA;IAAAH,eAAA,OAAAG,2CAAA;EAAA;EAAAD,YAAA,CAAAC,2CAAA;IAAAC,GAAA;IAAAC,KAAA,EACtD,SAAAC,kBACEC,OAAwD,EAAAC,IAAA,EAE/C;MAAA,IADPC,MAAM,GAAAD,IAAA,CAANC,MAAM;QAAEC,YAAY,GAAAF,IAAA,CAAZE,YAAY;MAEtB,IAAIA,YAAY,KAAK,QAAQ,IAAIH,OAAO,CAACI,MAAM,KAAK,iCAAiC,EAAE;QACrF,IAAMC,QAAQ,GAAmD;UAC/DC,EAAE,EAAEN,OAAO,CAACM,EAAE;UACdC,MAAM,EAAE;YAAEC,SAAS,EAAE;;SACtB;QACDN,MAAM,CAACO,IAAI,CAACC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAAC,CAAC;QACrC,OAAO,IAAI;;MAGb,OAAO,KAAK;;EACb;EAAA,OAAAT,2CAAA;AAAA;QAfUA,2CAA2C,GAA3CA,2CAA2C"},"metadata":{},"sourceType":"script","externalDependencies":[]}