{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSecurityPemAsync = getSecurityPemAsync;\nexports.getCertificateForSigningIdAsync = getCertificateForSigningIdAsync;\nexports.findIdentitiesAsync = findIdentitiesAsync;\nexports.extractCodeSigningInfo = extractCodeSigningInfo;\nexports.resolveIdentitiesAsync = resolveIdentitiesAsync;\nexports.resolveCertificateSigningInfoAsync = resolveCertificateSigningInfoAsync;\nexports.extractSigningId = extractSigningId;\nvar _spawnAsync = _interopRequireDefault(require(\"@expo/spawn-async\"));\nvar _nodeForge = _interopRequireDefault(require(\"node-forge\"));\nvar _securityBinPrerequisite = require(\"../../../start/doctor/SecurityBinPrerequisite\");\nvar _errors = require(\"../../../utils/errors\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getSecurityPemAsync(_x) {\n  return _getSecurityPemAsync.apply(this, arguments);\n}\nfunction _getSecurityPemAsync() {\n  _getSecurityPemAsync = _asyncToGenerator(function* (id) {\n    var ref;\n    var pem = (ref = (yield (0, _spawnAsync).default(\"security\", [\"find-certificate\", \"-c\", id, \"-p\"])).stdout) == null ? void 0 : ref.trim == null ? void 0 : ref.trim();\n    if (!pem) {\n      throw new _errors.CommandError(`Failed to get PEM certificate for ID \"${id}\" using the 'security' bin`);\n    }\n    return pem;\n  });\n  return _getSecurityPemAsync.apply(this, arguments);\n}\nfunction getCertificateForSigningIdAsync(_x2) {\n  return _getCertificateForSigningIdAsync.apply(this, arguments);\n}\nfunction _getCertificateForSigningIdAsync() {\n  _getCertificateForSigningIdAsync = _asyncToGenerator(function* (id) {\n    var pem = yield getSecurityPemAsync(id);\n    return _nodeForge.default.pki.certificateFromPem(pem);\n  });\n  return _getCertificateForSigningIdAsync.apply(this, arguments);\n}\nfunction findIdentitiesAsync() {\n  return _findIdentitiesAsync.apply(this, arguments);\n}\nfunction _findIdentitiesAsync() {\n  _findIdentitiesAsync = _asyncToGenerator(function* () {\n    var _stdout, ref;\n    yield _securityBinPrerequisite.SecurityBinPrerequisite.instance.assertAsync();\n    var results = (ref = (_stdout = (yield (0, _spawnAsync).default(\"security\", [\"find-identity\", \"-p\", \"codesigning\", \"-v\"])).stdout).trim) == null ? void 0 : ref.call(_stdout);\n    var parsed = results.split(\"\\n\").map(function (line) {\n      return extractCodeSigningInfo(line);\n    }).filter(Boolean);\n    return _toConsumableArray(new Set(parsed));\n  });\n  return _findIdentitiesAsync.apply(this, arguments);\n}\nfunction extractCodeSigningInfo(value) {\n  var ref;\n  var ref1;\n  return (ref1 = (ref = value.match(/^\\s*\\d+\\).+\"(.+Develop(ment|er).+)\"$/)) == null ? void 0 : ref[1]) != null ? ref1 : null;\n}\nfunction resolveIdentitiesAsync(_x3) {\n  return _resolveIdentitiesAsync.apply(this, arguments);\n}\nfunction _resolveIdentitiesAsync() {\n  _resolveIdentitiesAsync = _asyncToGenerator(function* (identities) {\n    var values = identities.map(extractSigningId).filter(Boolean);\n    return Promise.all(values.map(resolveCertificateSigningInfoAsync));\n  });\n  return _resolveIdentitiesAsync.apply(this, arguments);\n}\nfunction resolveCertificateSigningInfoAsync(_x4) {\n  return _resolveCertificateSigningInfoAsync.apply(this, arguments);\n}\nfunction _resolveCertificateSigningInfoAsync() {\n  _resolveCertificateSigningInfoAsync = _asyncToGenerator(function* (signingCertificateId) {\n    var ref, ref2, ref3;\n    var certificate = yield getCertificateForSigningIdAsync(signingCertificateId);\n    return {\n      signingCertificateId: signingCertificateId,\n      codeSigningInfo: (ref = certificate.subject.getField(\"CN\")) == null ? void 0 : ref.value,\n      appleTeamName: (ref2 = certificate.subject.getField(\"O\")) == null ? void 0 : ref2.value,\n      appleTeamId: (ref3 = certificate.subject.getField(\"OU\")) == null ? void 0 : ref3.value\n    };\n  });\n  return _resolveCertificateSigningInfoAsync.apply(this, arguments);\n}\nfunction extractSigningId(codeSigningInfo) {\n  var ref;\n  var ref4;\n  return (ref4 = (ref = codeSigningInfo.match(/.*\\(([a-zA-Z0-9]+)\\)/)) == null ? void 0 : ref[1]) != null ? ref4 : null;\n}","map":{"version":3,"names":["_toConsumableArray","require","_asyncToGenerator","getSecurityPemAsync","getCertificateForSigningIdAsync","findIdentitiesAsync","extractCodeSigningInfo","resolveIdentitiesAsync","resolveCertificateSigningInfoAsync","extractSigningId","_spawnAsync","_interopRequireDefault","_nodeForge","_securityBinPrerequisite","_errors","_x","_getSecurityPemAsync","apply","arguments","id","ref","pem","default","stdout","trim","CommandError","_x2","_getCertificateForSigningIdAsync","pki","certificateFromPem","_findIdentitiesAsync","_stdout","SecurityBinPrerequisite","instance","assertAsync","results","call","parsed","split","map","line","filter","Boolean","Set","value","ref1","match","_x3","_resolveIdentitiesAsync","identities","values","Promise","all","_x4","_resolveCertificateSigningInfoAsync","signingCertificateId","ref2","ref3","certificate","codeSigningInfo","subject","getField","appleTeamName","appleTeamId","ref4"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\run\\ios\\codeSigning\\Security.ts"],"sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport forge from 'node-forge';\n\nimport { SecurityBinPrerequisite } from '../../../start/doctor/SecurityBinPrerequisite';\nimport { CommandError } from '../../../utils/errors';\n\nexport type CertificateSigningInfo = {\n  /**\n   * @example 'AA00AABB0A'\n   */\n  signingCertificateId: string;\n  /**\n   * @example 'Apple Development: Evan Bacon (AA00AABB0A)'\n   */\n  codeSigningInfo?: string;\n  /**\n   * @example '650 Industries, Inc.'\n   */\n  appleTeamName?: string;\n  /**\n   * @example 'A1BCDEF234'\n   */\n  appleTeamId?: string;\n};\n\nexport async function getSecurityPemAsync(id: string) {\n  const pem = (await spawnAsync('security', ['find-certificate', '-c', id, '-p'])).stdout?.trim?.();\n  if (!pem) {\n    throw new CommandError(`Failed to get PEM certificate for ID \"${id}\" using the 'security' bin`);\n  }\n  return pem;\n}\n\nexport async function getCertificateForSigningIdAsync(id: string): Promise<forge.pki.Certificate> {\n  const pem = await getSecurityPemAsync(id);\n  return forge.pki.certificateFromPem(pem);\n}\n\n/**\n * Get the signing identities from the security bin. Return a list of parsed values with duplicates removed.\n * @returns A list like ['Apple Development: bacon@expo.io (BB00AABB0A)', 'Apple Developer: Evan Bacon (AA00AABB0A)']\n */\nexport async function findIdentitiesAsync(): Promise<string[]> {\n  await SecurityBinPrerequisite.instance.assertAsync();\n\n  const results = (\n    await spawnAsync('security', ['find-identity', '-p', 'codesigning', '-v'])\n  ).stdout.trim?.();\n  // Returns a string like:\n  // 1) 12222234253761286351826735HGKDHAJGF45283 \"Apple Development: Evan Bacon (AA00AABB0A)\" (CSSMERR_TP_CERT_REVOKED)\n  // 2) 12312234253761286351826735HGKDHAJGF45283 \"Apple Development: bacon@expo.io (BB00AABB0A)\"\n  // 3) 12442234253761286351826735HGKDHAJGF45283 \"iPhone Distribution: Evan Bacon (CC00AABB0B)\" (CSSMERR_TP_CERT_REVOKED)\n  // 4) 15672234253761286351826735HGKDHAJGF45283 \"Apple Development: Evan Bacon (AA00AABB0A)\"\n  //  4 valid identities found\n\n  const parsed = results\n    .split('\\n')\n    .map((line) => extractCodeSigningInfo(line))\n    .filter(Boolean) as string[];\n\n  // Remove duplicates\n  return [...new Set(parsed)];\n}\n\n/**\n * @param value '  2) 12312234253761286351826735HGKDHAJGF45283 \"Apple Development: bacon@expo.io (BB00AABB0A)\"'\n * @returns 'Apple Development: Evan Bacon (PH75MDXG4H)'\n */\nexport function extractCodeSigningInfo(value: string): string | null {\n  return value.match(/^\\s*\\d+\\).+\"(.+Develop(ment|er).+)\"$/)?.[1] ?? null;\n}\n\nexport async function resolveIdentitiesAsync(\n  identities: string[]\n): Promise<CertificateSigningInfo[]> {\n  const values = identities.map(extractSigningId).filter(Boolean) as string[];\n  return Promise.all(values.map(resolveCertificateSigningInfoAsync));\n}\n\n/**\n * @param signingCertificateId 'AA00AABB0A'\n */\nexport async function resolveCertificateSigningInfoAsync(\n  signingCertificateId: string\n): Promise<CertificateSigningInfo> {\n  const certificate = await getCertificateForSigningIdAsync(signingCertificateId);\n  return {\n    signingCertificateId,\n    codeSigningInfo: certificate.subject.getField('CN')?.value,\n    appleTeamName: certificate.subject.getField('O')?.value,\n    appleTeamId: certificate.subject.getField('OU')?.value,\n  };\n}\n\n/**\n * @param codeSigningInfo 'Apple Development: Evan Bacon (AA00AABB0A)'\n * @returns 'AA00AABB0A'\n */\nexport function extractSigningId(codeSigningInfo: string): string | null {\n  return codeSigningInfo.match(/.*\\(([a-zA-Z0-9]+)\\)/)?.[1] ?? null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}