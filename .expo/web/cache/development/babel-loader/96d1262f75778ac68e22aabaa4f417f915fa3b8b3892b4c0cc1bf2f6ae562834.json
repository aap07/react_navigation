{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveWithTsConfigPaths = resolveWithTsConfigPaths;\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _matchTsConfigPathAlias = require(\"./matchTsConfigPathAlias\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = require(\"debug\")(\"expo:metro:tsconfig-paths\");\nvar isAbsolute = process.platform === \"win32\" ? _path.default.win32.isAbsolute : _path.default.posix.isAbsolute;\nfunction resolveWithTsConfigPaths(config, request, resolve) {\n  var aliases = Object.keys(config.paths);\n  if (!aliases.length || /node_modules/.test(request.originModulePath) || isAbsolute(request.moduleName) || /^\\.\\.?($|[\\\\/])/.test(request.moduleName)) {\n    return null;\n  }\n  var matched = (0, _matchTsConfigPathAlias).matchTsConfigPathAlias(aliases, request.moduleName);\n  if (!matched) {\n    return null;\n  }\n  for (var alias of config.paths[matched.text]) {\n    var nextModuleName = matched.star ? alias.replace(\"*\", matched.star) : alias;\n    if (/\\.d\\.ts$/.test(nextModuleName)) continue;\n    var possibleResult = _path.default.join(config.baseUrl, nextModuleName);\n    var result = resolve(possibleResult);\n    if (result) {\n      debug(`${request.moduleName} -> ${possibleResult}`);\n      return result;\n    }\n  }\n  return null;\n}","map":{"version":3,"names":["resolveWithTsConfigPaths","_path","_interopRequireDefault","require","_matchTsConfigPathAlias","debug","isAbsolute","process","platform","default","win32","posix","config","request","resolve","aliases","Object","keys","paths","length","test","originModulePath","moduleName","matched","matchTsConfigPathAlias","alias","text","nextModuleName","star","replace","possibleResult","join","baseUrl","result"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\utils\\tsconfig\\resolveWithTsConfigPaths.ts"],"sourcesContent":["import { Resolution } from 'metro-resolver';\nimport path from 'path';\n\nimport { matchTsConfigPathAlias } from './matchTsConfigPathAlias';\n\ntype Paths = { [match: string]: string[] };\n\nconst debug = require('debug')('expo:metro:tsconfig-paths') as typeof console.log;\n\nconst isAbsolute = process.platform === 'win32' ? path.win32.isAbsolute : path.posix.isAbsolute;\n\nexport function resolveWithTsConfigPaths(\n  config: { paths: Paths; baseUrl: string },\n  request: {\n    /** Import request */\n    moduleName: string;\n    /** Originating file path */\n    originModulePath: string;\n  },\n  resolve: (moduleName: string) => Resolution | null\n): Resolution | null {\n  const aliases = Object.keys(config.paths);\n\n  if (\n    // If no aliases are added bail out\n    !aliases.length ||\n    // Library authors cannot utilize this feature in userspace.\n    /node_modules/.test(request.originModulePath) ||\n    // Absolute paths are not supported\n    isAbsolute(request.moduleName) ||\n    // Relative paths are not supported\n    /^\\.\\.?($|[\\\\/])/.test(request.moduleName)\n  ) {\n    return null;\n  }\n\n  const matched = matchTsConfigPathAlias(aliases, request.moduleName);\n  if (!matched) {\n    return null;\n  }\n\n  for (const alias of config.paths[matched.text]) {\n    const nextModuleName = matched.star ? alias.replace('*', matched.star) : alias;\n\n    if (/\\.d\\.ts$/.test(nextModuleName)) continue;\n\n    const possibleResult = path.join(config.baseUrl, nextModuleName);\n\n    const result = resolve(possibleResult);\n    if (result) {\n      debug(`${request.moduleName} -> ${possibleResult}`);\n      return result;\n    }\n  }\n  return null;\n}\n"],"mappings":"AAAA;;;;;QAWgBA,wBAAwB,GAAxBA,wBAAwB;AAVvB,IAAAC,KAAM,GAAAC,sBAAA,CAAAC,OAAA,CAAN,MAAM;AAEgB,IAAAC,uBAA0B,GAAAD,OAAA;;;;;;AAIjE,IAAME,KAAK,GAAGF,OAAO,CAAC,OAAO,CAAC,CAAC,2BAA2B,CAAC;AAE3D,IAAMG,UAAU,GAAGC,OAAO,CAACC,QAAQ,KAAK,OAAO,GAAGP,KAAI,CAAAQ,OAAA,CAACC,KAAK,CAACJ,UAAU,GAAGL,KAAI,CAAAQ,OAAA,CAACE,KAAK,CAACL,UAAU;AAExF,SAASN,wBAAwBA,CACtCY,MAAyC,EACzCC,OAKC,EACDC,OAAkD,EAC/B;EACnB,IAAMC,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACL,MAAM,CAACM,KAAK,CAAC;EAEzC,IAEE,CAACH,OAAO,CAACI,MAAM,IAEf,eAAeC,IAAI,CAACP,OAAO,CAACQ,gBAAgB,CAAC,IAE7Cf,UAAU,CAACO,OAAO,CAACS,UAAU,CAAC,IAE9B,kBAAkBF,IAAI,CAACP,OAAO,CAACS,UAAU,CAAC,EAC1C;IACA,OAAO,IAAI;;EAGb,IAAMC,OAAO,GAAG,IAAAnB,uBAAsB,EAA6BoB,sBAA7B,CAACT,OAAO,EAAEF,OAAO,CAACS,UAAU,CAAC;EACnE,IAAI,CAACC,OAAO,EAAE;IACZ,OAAO,IAAI;;EAGb,KAAK,IAAME,KAAK,IAAIb,MAAM,CAACM,KAAK,CAACK,OAAO,CAACG,IAAI,CAAC,EAAE;IAC9C,IAAMC,cAAc,GAAGJ,OAAO,CAACK,IAAI,GAAGH,KAAK,CAACI,OAAO,CAAC,GAAG,EAAEN,OAAO,CAACK,IAAI,CAAC,GAAGH,KAAK;IAE9E,IAAI,WAAWL,IAAI,CAACO,cAAc,CAAC,EAAE;IAErC,IAAMG,cAAc,GAAG7B,KAAI,CAAAQ,OAAA,CAACsB,IAAI,CAACnB,MAAM,CAACoB,OAAO,EAAEL,cAAc,CAAC;IAEhE,IAAMM,MAAM,GAAGnB,OAAO,CAACgB,cAAc,CAAC;IACtC,IAAIG,MAAM,EAAE;MACV5B,KAAK,CAAE,GAAEQ,OAAO,CAACS,UAAW,OAAMQ,cAAe,EAAC,CAAC;MACnD,OAAOG,MAAM;;;EAGjB,OAAO,IAAI"},"metadata":{},"sourceType":"script","externalDependencies":[]}