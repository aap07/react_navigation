{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"adb\", {\n  enumerable: true,\n  get: function get() {\n    return _adb.default;\n  }\n});\nexports.default = void 0;\nObject.defineProperty(exports, \"getAdbPath\", {\n  enumerable: true,\n  get: function get() {\n    return _getAdbPath.default;\n  }\n});\nObject.defineProperty(exports, \"listAndroidDevices\", {\n  enumerable: true,\n  get: function get() {\n    return _listAndroidDevices.default;\n  }\n});\nObject.defineProperty(exports, \"tryRunAdbReverse\", {\n  enumerable: true,\n  get: function get() {\n    return _tryRunAdbReverse.default;\n  }\n});\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nvar _adb = _interopRequireDefault(require(\"./adb\"));\nvar _runOnAllDevices = _interopRequireDefault(require(\"./runOnAllDevices\"));\nvar _tryRunAdbReverse = _interopRequireDefault(require(\"./tryRunAdbReverse\"));\nvar _tryLaunchAppOnDevice = _interopRequireDefault(require(\"./tryLaunchAppOnDevice\"));\nvar _tryInstallAppOnDevice = _interopRequireDefault(require(\"./tryInstallAppOnDevice\"));\nvar _getAdbPath = _interopRequireDefault(require(\"./getAdbPath\"));\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function _cliTools() {\n    return data;\n  };\n  return data;\n}\nvar _getAndroidProject = require(\"../../config/getAndroidProject\");\nvar _listAndroidDevices = _interopRequireDefault(require(\"./listAndroidDevices\"));\nvar _tryLaunchEmulator = _interopRequireDefault(require(\"./tryLaunchEmulator\"));\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function _chalk() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nvar _buildAndroid = require(\"../buildAndroid\");\nvar _listAndroidTasks = require(\"./listAndroidTasks\");\nvar _getTaskNames = require(\"./getTaskNames\");\nvar _listAndroidUsers = require(\"./listAndroidUsers\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction runAndroid(_x, _x2, _x3) {\n  return _runAndroid.apply(this, arguments);\n}\nfunction _runAndroid() {\n  _runAndroid = _asyncToGenerator(function* (_argv, config, args) {\n    _cliTools().link.setPlatform('android');\n    if (config.reactNativeVersion !== 'unknown') {\n      _cliTools().link.setVersion(config.reactNativeVersion);\n    }\n    if (args.binaryPath) {\n      if (args.tasks) {\n        throw new (_cliTools().CLIError)('binary-path and tasks were specified, but they are not compatible. Specify only one');\n      }\n      args.binaryPath = _path().default.isAbsolute(args.binaryPath) ? args.binaryPath : _path().default.join(config.root, args.binaryPath);\n      if (args.binaryPath && !_fs().default.existsSync(args.binaryPath)) {\n        throw new (_cliTools().CLIError)('binary-path was specified, but the file was not found.');\n      }\n    }\n    var androidProject = (0, _getAndroidProject.getAndroidProject)(config);\n    yield (0, _buildAndroid.runPackager)(args, config);\n    return buildAndRun(args, androidProject);\n  });\n  return _runAndroid.apply(this, arguments);\n}\nvar defaultPort = 5552;\nfunction getAvailableDevicePort() {\n  return _getAvailableDevicePort.apply(this, arguments);\n}\nfunction _getAvailableDevicePort() {\n  _getAvailableDevicePort = _asyncToGenerator(function* () {\n    var port = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultPort;\n    var adbPath = (0, _getAdbPath.default)();\n    var devices = _adb.default.getDevices(adbPath);\n    if (port > 5682) {\n      throw new (_cliTools().CLIError)('Failed to launch emulator...');\n    }\n    if (devices.some(function (d) {\n      return d.includes(port.toString());\n    })) {\n      return yield getAvailableDevicePort(port + 2);\n    }\n    return port;\n  });\n  return _getAvailableDevicePort.apply(this, arguments);\n}\nfunction buildAndRun(_x4, _x5) {\n  return _buildAndRun.apply(this, arguments);\n}\nfunction _buildAndRun() {\n  _buildAndRun = _asyncToGenerator(function* (args, androidProject) {\n    process.chdir(androidProject.sourceDir);\n    var cmd = process.platform.startsWith('win') ? 'gradlew.bat' : './gradlew';\n    var adbPath = (0, _getAdbPath.default)();\n    var selectedTask;\n    if (args.interactive) {\n      var task = yield (0, _listAndroidTasks.promptForTaskSelection)('install', androidProject.sourceDir);\n      if (task) {\n        selectedTask = task;\n      }\n    }\n    if (args.listDevices || args.interactive) {\n      if (args.deviceId) {\n        _cliTools().logger.warn('Both \"deviceId\" and \"list-devices\" parameters were passed to \"run\" command. We will list available devices and let you choose from one');\n      }\n      var device = yield (0, _listAndroidDevices.default)();\n      if (!device) {\n        throw new (_cliTools().CLIError)(`Failed to select device, please try to run app without ${args.listDevices ? 'list-devices' : 'interactive'} command.`);\n      }\n      if (args.interactive) {\n        var users = (0, _listAndroidUsers.checkUsers)(device.deviceId, adbPath);\n        if (users && users.length > 1) {\n          var user = yield (0, _listAndroidUsers.promptForUser)(users);\n          if (user) {\n            args.user = user.id;\n          }\n        }\n      }\n      if (device.connected) {\n        return runOnSpecificDevice(_objectSpread(_objectSpread({}, args), {}, {\n          deviceId: device.deviceId\n        }), adbPath, androidProject, selectedTask);\n      }\n      var port = yield getAvailableDevicePort();\n      var emulator = `emulator-${port}`;\n      _cliTools().logger.info('Launching emulator...');\n      var result = yield (0, _tryLaunchEmulator.default)(adbPath, device.readableName, port);\n      if (result.success) {\n        _cliTools().logger.info('Successfully launched emulator.');\n        return runOnSpecificDevice(_objectSpread(_objectSpread({}, args), {}, {\n          deviceId: emulator\n        }), adbPath, androidProject, selectedTask);\n      }\n      throw new (_cliTools().CLIError)(`Failed to launch emulator. Reason: ${_chalk().default.dim(result.error || '')}`);\n    }\n    if (args.deviceId) {\n      return runOnSpecificDevice(args, adbPath, androidProject, selectedTask);\n    } else {\n      return (0, _runOnAllDevices.default)(args, cmd, adbPath, androidProject);\n    }\n  });\n  return _buildAndRun.apply(this, arguments);\n}\nfunction runOnSpecificDevice(args, adbPath, androidProject, selectedTask) {\n  var devices = _adb.default.getDevices(adbPath);\n  var deviceId = args.deviceId;\n  var buildTask = selectedTask ? [selectedTask.replace('install', 'assemble')] : [];\n  if (devices.length > 0 && deviceId) {\n    if (devices.indexOf(deviceId) !== -1) {\n      var _args$tasks;\n      var gradleArgs = (0, _getTaskNames.getTaskNames)(androidProject.appName, args.mode || args.variant, (_args$tasks = args.tasks) != null ? _args$tasks : buildTask, 'install', androidProject.sourceDir);\n      gradleArgs.push('-x', 'lint');\n      if (args.extraParams) {\n        gradleArgs.push.apply(gradleArgs, _toConsumableArray(args.extraParams));\n      }\n      if (args.port) {\n        gradleArgs.push(`-PreactNativeDevServerPort=${args.port}`);\n      }\n      if (args.activeArchOnly) {\n        var architecture = _adb.default.getCPU(adbPath, deviceId);\n        if (architecture !== null) {\n          _cliTools().logger.info(`Detected architecture ${architecture}`);\n          gradleArgs.push(`-PreactNativeDebugArchitectures=${architecture}`);\n          gradleArgs.push(`-PreactNativeArchitectures=${architecture}`);\n        }\n      }\n      if (!args.binaryPath) {\n        (0, _buildAndroid.build)(gradleArgs, androidProject.sourceDir);\n      }\n      installAndLaunchOnDevice(args, deviceId, adbPath, androidProject, selectedTask);\n    } else {\n      var _cliTools$logger;\n      (_cliTools$logger = _cliTools().logger).error.apply(_cliTools$logger, [`Could not find device with the id: \"${deviceId}\". Please choose one of the following:`].concat(_toConsumableArray(devices)));\n    }\n  } else {\n    _cliTools().logger.error('No Android device or emulator connected.');\n  }\n}\nfunction installAndLaunchOnDevice(args, selectedDevice, adbPath, androidProject, selectedTask) {\n  (0, _tryRunAdbReverse.default)(args.port, selectedDevice);\n  (0, _tryInstallAppOnDevice.default)(args, adbPath, selectedDevice, androidProject, selectedTask);\n  (0, _tryLaunchAppOnDevice.default)(selectedDevice, androidProject.packageName, adbPath, args);\n}\nvar _default = {\n  name: 'run-android',\n  description: 'builds your app and starts it on a connected Android emulator or device',\n  func: runAndroid,\n  options: [].concat(_toConsumableArray(_buildAndroid.options), [{\n    name: '--appId <string>',\n    description: 'Specify an applicationId to launch after build. If not specified, `package` from AndroidManifest.xml will be used.',\n    default: ''\n  }, {\n    name: '--appIdSuffix <string>',\n    description: 'Specify an applicationIdSuffix to launch after build.',\n    default: ''\n  }, {\n    name: '--main-activity <string>',\n    description: 'Name of the activity to start',\n    default: 'MainActivity'\n  }, {\n    name: '--deviceId <string>',\n    description: 'builds your app and starts it on a specific device/simulator with the ' + 'given device id (listed by running \"adb devices\" on the command line).'\n  }, {\n    name: '--list-devices',\n    description: 'Lists all available Android devices and simulators and let you choose one to run the app',\n    default: false\n  }, {\n    name: '--binary-path <string>',\n    description: 'Path relative to project root where pre-built .apk binary lives.'\n  }, {\n    name: '--user <number>',\n    description: 'Id of the User Profile you want to install the app on.',\n    parse: Number\n  }])\n};\nexports.default = _default;","map":{"version":3,"names":["_defineProperty","require","_toConsumableArray","_asyncToGenerator","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","exports","value","get","_adb","default","_getAdbPath","_listAndroidDevices","_tryRunAdbReverse","_fs","data","_interopRequireDefault","_runOnAllDevices","_tryLaunchAppOnDevice","_tryInstallAppOnDevice","_cliTools","_getAndroidProject","_tryLaunchEmulator","_chalk","_path","_buildAndroid","_listAndroidTasks","_getTaskNames","_listAndroidUsers","obj","__esModule","runAndroid","_x","_x2","_x3","_runAndroid","_argv","config","args","link","setPlatform","reactNativeVersion","setVersion","binaryPath","tasks","CLIError","isAbsolute","join","root","existsSync","androidProject","getAndroidProject","runPackager","buildAndRun","defaultPort","getAvailableDevicePort","_getAvailableDevicePort","port","undefined","adbPath","devices","getDevices","some","d","includes","toString","_x4","_x5","_buildAndRun","process","chdir","sourceDir","cmd","platform","startsWith","selectedTask","interactive","task","promptForTaskSelection","listDevices","deviceId","logger","warn","device","users","checkUsers","user","promptForUser","id","connected","runOnSpecificDevice","emulator","info","result","readableName","success","dim","error","buildTask","replace","indexOf","_args$tasks","gradleArgs","getTaskNames","appName","mode","variant","extraParams","activeArchOnly","architecture","getCPU","build","installAndLaunchOnDevice","_cliTools$logger","concat","selectedDevice","packageName","_default","name","description","func","options","parse","Number"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"adb\", {\n  enumerable: true,\n  get: function () {\n    return _adb.default;\n  }\n});\nexports.default = void 0;\nObject.defineProperty(exports, \"getAdbPath\", {\n  enumerable: true,\n  get: function () {\n    return _getAdbPath.default;\n  }\n});\nObject.defineProperty(exports, \"listAndroidDevices\", {\n  enumerable: true,\n  get: function () {\n    return _listAndroidDevices.default;\n  }\n});\nObject.defineProperty(exports, \"tryRunAdbReverse\", {\n  enumerable: true,\n  get: function () {\n    return _tryRunAdbReverse.default;\n  }\n});\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n  _fs = function () {\n    return data;\n  };\n  return data;\n}\nvar _adb = _interopRequireDefault(require(\"./adb\"));\nvar _runOnAllDevices = _interopRequireDefault(require(\"./runOnAllDevices\"));\nvar _tryRunAdbReverse = _interopRequireDefault(require(\"./tryRunAdbReverse\"));\nvar _tryLaunchAppOnDevice = _interopRequireDefault(require(\"./tryLaunchAppOnDevice\"));\nvar _tryInstallAppOnDevice = _interopRequireDefault(require(\"./tryInstallAppOnDevice\"));\nvar _getAdbPath = _interopRequireDefault(require(\"./getAdbPath\"));\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function () {\n    return data;\n  };\n  return data;\n}\nvar _getAndroidProject = require(\"../../config/getAndroidProject\");\nvar _listAndroidDevices = _interopRequireDefault(require(\"./listAndroidDevices\"));\nvar _tryLaunchEmulator = _interopRequireDefault(require(\"./tryLaunchEmulator\"));\nfunction _chalk() {\n  const data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function () {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n  _path = function () {\n    return data;\n  };\n  return data;\n}\nvar _buildAndroid = require(\"../buildAndroid\");\nvar _listAndroidTasks = require(\"./listAndroidTasks\");\nvar _getTaskNames = require(\"./getTaskNames\");\nvar _listAndroidUsers = require(\"./listAndroidUsers\");\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Starts the app on a connected Android emulator or device.\n */\nasync function runAndroid(_argv, config, args) {\n  _cliTools().link.setPlatform('android');\n  if (config.reactNativeVersion !== 'unknown') {\n    _cliTools().link.setVersion(config.reactNativeVersion);\n  }\n  if (args.binaryPath) {\n    if (args.tasks) {\n      throw new (_cliTools().CLIError)('binary-path and tasks were specified, but they are not compatible. Specify only one');\n    }\n    args.binaryPath = _path().default.isAbsolute(args.binaryPath) ? args.binaryPath : _path().default.join(config.root, args.binaryPath);\n    if (args.binaryPath && !_fs().default.existsSync(args.binaryPath)) {\n      throw new (_cliTools().CLIError)('binary-path was specified, but the file was not found.');\n    }\n  }\n  const androidProject = (0, _getAndroidProject.getAndroidProject)(config);\n  await (0, _buildAndroid.runPackager)(args, config);\n  return buildAndRun(args, androidProject);\n}\nconst defaultPort = 5552;\nasync function getAvailableDevicePort(port = defaultPort) {\n  /**\n   * The default value is 5554 for the first virtual device instance running on your machine. A virtual device normally occupies a pair of adjacent ports: a console port and an adb port. The console of the first virtual device running on a particular machine uses console port 5554 and adb port 5555. Subsequent instances use port numbers increasing by two. For example, 5556/5557, 5558/5559, and so on. The range is 5554 to 5682, allowing for 64 concurrent virtual devices.\n   */\n  const adbPath = (0, _getAdbPath.default)();\n  const devices = _adb.default.getDevices(adbPath);\n  if (port > 5682) {\n    throw new (_cliTools().CLIError)('Failed to launch emulator...');\n  }\n  if (devices.some(d => d.includes(port.toString()))) {\n    return await getAvailableDevicePort(port + 2);\n  }\n  return port;\n}\n\n// Builds the app and runs it on a connected emulator / device.\nasync function buildAndRun(args, androidProject) {\n  process.chdir(androidProject.sourceDir);\n  const cmd = process.platform.startsWith('win') ? 'gradlew.bat' : './gradlew';\n  const adbPath = (0, _getAdbPath.default)();\n  let selectedTask;\n  if (args.interactive) {\n    const task = await (0, _listAndroidTasks.promptForTaskSelection)('install', androidProject.sourceDir);\n    if (task) {\n      selectedTask = task;\n    }\n  }\n  if (args.listDevices || args.interactive) {\n    if (args.deviceId) {\n      _cliTools().logger.warn('Both \"deviceId\" and \"list-devices\" parameters were passed to \"run\" command. We will list available devices and let you choose from one');\n    }\n    const device = await (0, _listAndroidDevices.default)();\n    if (!device) {\n      throw new (_cliTools().CLIError)(`Failed to select device, please try to run app without ${args.listDevices ? 'list-devices' : 'interactive'} command.`);\n    }\n    if (args.interactive) {\n      const users = (0, _listAndroidUsers.checkUsers)(device.deviceId, adbPath);\n      if (users && users.length > 1) {\n        const user = await (0, _listAndroidUsers.promptForUser)(users);\n        if (user) {\n          args.user = user.id;\n        }\n      }\n    }\n    if (device.connected) {\n      return runOnSpecificDevice({\n        ...args,\n        deviceId: device.deviceId\n      }, adbPath, androidProject, selectedTask);\n    }\n    const port = await getAvailableDevicePort();\n    const emulator = `emulator-${port}`;\n    _cliTools().logger.info('Launching emulator...');\n    const result = await (0, _tryLaunchEmulator.default)(adbPath, device.readableName, port);\n    if (result.success) {\n      _cliTools().logger.info('Successfully launched emulator.');\n      return runOnSpecificDevice({\n        ...args,\n        deviceId: emulator\n      }, adbPath, androidProject, selectedTask);\n    }\n    throw new (_cliTools().CLIError)(`Failed to launch emulator. Reason: ${_chalk().default.dim(result.error || '')}`);\n  }\n  if (args.deviceId) {\n    return runOnSpecificDevice(args, adbPath, androidProject, selectedTask);\n  } else {\n    return (0, _runOnAllDevices.default)(args, cmd, adbPath, androidProject);\n  }\n}\nfunction runOnSpecificDevice(args, adbPath, androidProject, selectedTask) {\n  const devices = _adb.default.getDevices(adbPath);\n  const {\n    deviceId\n  } = args;\n\n  // if coming from run-android command and we have selected task\n  // from interactive mode we need to create appropriate build task\n  // eg 'installRelease' -> 'assembleRelease'\n  const buildTask = selectedTask ? [selectedTask.replace('install', 'assemble')] : [];\n  if (devices.length > 0 && deviceId) {\n    if (devices.indexOf(deviceId) !== -1) {\n      let gradleArgs = (0, _getTaskNames.getTaskNames)(androidProject.appName, args.mode || args.variant, args.tasks ?? buildTask, 'install', androidProject.sourceDir);\n\n      // using '-x lint' in order to ignore linting errors while building the apk\n      gradleArgs.push('-x', 'lint');\n      if (args.extraParams) {\n        gradleArgs.push(...args.extraParams);\n      }\n      if (args.port) {\n        gradleArgs.push(`-PreactNativeDevServerPort=${args.port}`);\n      }\n      if (args.activeArchOnly) {\n        const architecture = _adb.default.getCPU(adbPath, deviceId);\n        if (architecture !== null) {\n          _cliTools().logger.info(`Detected architecture ${architecture}`);\n          // `reactNativeDebugArchitectures` was renamed to `reactNativeArchitectures` in 0.68.\n          // Can be removed when 0.67 no longer needs to be supported.\n          gradleArgs.push(`-PreactNativeDebugArchitectures=${architecture}`);\n          gradleArgs.push(`-PreactNativeArchitectures=${architecture}`);\n        }\n      }\n      if (!args.binaryPath) {\n        (0, _buildAndroid.build)(gradleArgs, androidProject.sourceDir);\n      }\n      installAndLaunchOnDevice(args, deviceId, adbPath, androidProject, selectedTask);\n    } else {\n      _cliTools().logger.error(`Could not find device with the id: \"${deviceId}\". Please choose one of the following:`, ...devices);\n    }\n  } else {\n    _cliTools().logger.error('No Android device or emulator connected.');\n  }\n}\nfunction installAndLaunchOnDevice(args, selectedDevice, adbPath, androidProject, selectedTask) {\n  (0, _tryRunAdbReverse.default)(args.port, selectedDevice);\n  (0, _tryInstallAppOnDevice.default)(args, adbPath, selectedDevice, androidProject, selectedTask);\n  (0, _tryLaunchAppOnDevice.default)(selectedDevice, androidProject.packageName, adbPath, args);\n}\nvar _default = {\n  name: 'run-android',\n  description: 'builds your app and starts it on a connected Android emulator or device',\n  func: runAndroid,\n  options: [..._buildAndroid.options, {\n    name: '--appId <string>',\n    description: 'Specify an applicationId to launch after build. If not specified, `package` from AndroidManifest.xml will be used.',\n    default: ''\n  }, {\n    name: '--appIdSuffix <string>',\n    description: 'Specify an applicationIdSuffix to launch after build.',\n    default: ''\n  }, {\n    name: '--main-activity <string>',\n    description: 'Name of the activity to start',\n    default: 'MainActivity'\n  }, {\n    name: '--deviceId <string>',\n    description: 'builds your app and starts it on a specific device/simulator with the ' + 'given device id (listed by running \"adb devices\" on the command line).'\n  }, {\n    name: '--list-devices',\n    description: 'Lists all available Android devices and simulators and let you choose one to run the app',\n    default: false\n  }, {\n    name: '--binary-path <string>',\n    description: 'Path relative to project root where pre-built .apk binary lives.'\n  }, {\n    name: '--user <number>',\n    description: 'Id of the User Profile you want to install the app on.',\n    parse: Number\n  }]\n};\nexports.default = _default;\n\n//# sourceMappingURL=index.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}