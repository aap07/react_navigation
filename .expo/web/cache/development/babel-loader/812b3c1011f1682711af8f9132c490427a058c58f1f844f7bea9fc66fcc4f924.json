{"ast":null,"code":"#!/usr/bin/env node\n'use strict';\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _require = require('metro-source-map'),\n  composeSourceMaps = _require.composeSourceMaps;\nvar fs = require('fs');\nvar argv = process.argv.slice(2);\nvar outputPath;\nfor (var i = 0; i < argv.length;) {\n  if (argv[i] === '-o') {\n    outputPath = argv[i + 1];\n    argv.splice(i, 2);\n    continue;\n  }\n  ++i;\n}\nif (!argv.length) {\n  process.stderr.write('Usage: node compose-source-maps.js <packager_sourcemap> <compiler_sourcemap> [-o output_file]\\n');\n  process.exitCode = -1;\n} else {\n  var _argv$splice = argv.splice(0, 2),\n    _argv$splice2 = _slicedToArray(_argv$splice, 2),\n    packagerSourcemapPath = _argv$splice2[0],\n    compilerSourcemapPath = _argv$splice2[1];\n  var packagerSourcemap = JSON.parse(fs.readFileSync(packagerSourcemapPath, 'utf8'));\n  var compilerSourcemap = JSON.parse(fs.readFileSync(compilerSourcemapPath, 'utf8'));\n  if (packagerSourcemap.x_facebook_offsets != null || compilerSourcemap.x_facebook_offsets != null) {\n    throw new Error('Random Access Bundle (RAM) format is not supported by this tool; ' + 'it cannot process the `x_facebook_offsets` field provided ' + 'in the base and/or target source map(s)');\n  }\n  if (compilerSourcemap.x_facebook_segments != null) {\n    throw new Error('This tool cannot process the `x_facebook_segments` field provided ' + 'in the target source map.');\n  }\n  var composedMapJSON = JSON.stringify(composeSourceMaps([packagerSourcemap, compilerSourcemap]));\n  if (outputPath) {\n    fs.writeFileSync(outputPath, composedMapJSON, 'utf8');\n  } else {\n    process.stdout.write();\n  }\n}","map":{"version":3,"names":["_slicedToArray","require","_require","composeSourceMaps","fs","argv","process","slice","outputPath","i","length","splice","stderr","write","exitCode","_argv$splice","_argv$splice2","packagerSourcemapPath","compilerSourcemapPath","packagerSourcemap","JSON","parse","readFileSync","compilerSourcemap","x_facebook_offsets","Error","x_facebook_segments","composedMapJSON","stringify","writeFileSync","stdout"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/expo/scripts/compose-source-maps.js"],"sourcesContent":["#!/usr/bin/env node\n/**\n * Copyright Â© 2023 650 Industries.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Forked as-is from React Native.\n * @format\n */\n\n'use strict';\n\nconst { composeSourceMaps } = require('metro-source-map');\nconst fs = require('fs');\n\nconst argv = process.argv.slice(2);\nlet outputPath;\nfor (let i = 0; i < argv.length; ) {\n  if (argv[i] === '-o') {\n    outputPath = argv[i + 1];\n    argv.splice(i, 2);\n    continue;\n  }\n  ++i;\n}\nif (!argv.length) {\n  process.stderr.write(\n    'Usage: node compose-source-maps.js <packager_sourcemap> <compiler_sourcemap> [-o output_file]\\n'\n  );\n  process.exitCode = -1;\n} else {\n  const [packagerSourcemapPath, compilerSourcemapPath] = argv.splice(0, 2);\n  const packagerSourcemap = JSON.parse(fs.readFileSync(packagerSourcemapPath, 'utf8'));\n  const compilerSourcemap = JSON.parse(fs.readFileSync(compilerSourcemapPath, 'utf8'));\n\n  if (\n    packagerSourcemap.x_facebook_offsets != null ||\n    compilerSourcemap.x_facebook_offsets != null\n  ) {\n    throw new Error(\n      'Random Access Bundle (RAM) format is not supported by this tool; ' +\n        'it cannot process the `x_facebook_offsets` field provided ' +\n        'in the base and/or target source map(s)'\n    );\n  }\n\n  if (compilerSourcemap.x_facebook_segments != null) {\n    throw new Error(\n      'This tool cannot process the `x_facebook_segments` field provided ' +\n        'in the target source map.'\n    );\n  }\n\n  const composedMapJSON = JSON.stringify(composeSourceMaps([packagerSourcemap, compilerSourcemap]));\n  if (outputPath) {\n    fs.writeFileSync(outputPath, composedMapJSON, 'utf8');\n  } else {\n    process.stdout.write();\n  }\n}\n"],"mappings":"AAAA;AAYA,YAAY;;AAAC,IAAAA,cAAA,GAAAC,OAAA;AAEb,IAAAC,QAAA,GAA8BD,OAAO,CAAC,kBAAkB,CAAC;EAAjDE,iBAAiB,GAAAD,QAAA,CAAjBC,iBAAiB;AACzB,IAAMC,EAAE,GAAGH,OAAO,CAAC,IAAI,CAAC;AAExB,IAAMI,IAAI,GAAGC,OAAO,CAACD,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC;AAClC,IAAIC,UAAU;AACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,CAACK,MAAM,GAAI;EACjC,IAAIL,IAAI,CAACI,CAAC,CAAC,KAAK,IAAI,EAAE;IACpBD,UAAU,GAAGH,IAAI,CAACI,CAAC,GAAG,CAAC,CAAC;IACxBJ,IAAI,CAACM,MAAM,CAACF,CAAC,EAAE,CAAC,CAAC;IACjB;EACF;EACA,EAAEA,CAAC;AACL;AACA,IAAI,CAACJ,IAAI,CAACK,MAAM,EAAE;EAChBJ,OAAO,CAACM,MAAM,CAACC,KAAK,CAClB,iGACF,CAAC;EACDP,OAAO,CAACQ,QAAQ,GAAG,CAAC,CAAC;AACvB,CAAC,MAAM;EACL,IAAAC,YAAA,GAAuDV,IAAI,CAACM,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;IAAAK,aAAA,GAAAhB,cAAA,CAAAe,YAAA;IAAjEE,qBAAqB,GAAAD,aAAA;IAAEE,qBAAqB,GAAAF,aAAA;EACnD,IAAMG,iBAAiB,GAAGC,IAAI,CAACC,KAAK,CAACjB,EAAE,CAACkB,YAAY,CAACL,qBAAqB,EAAE,MAAM,CAAC,CAAC;EACpF,IAAMM,iBAAiB,GAAGH,IAAI,CAACC,KAAK,CAACjB,EAAE,CAACkB,YAAY,CAACJ,qBAAqB,EAAE,MAAM,CAAC,CAAC;EAEpF,IACEC,iBAAiB,CAACK,kBAAkB,IAAI,IAAI,IAC5CD,iBAAiB,CAACC,kBAAkB,IAAI,IAAI,EAC5C;IACA,MAAM,IAAIC,KAAK,CACb,mEAAmE,GACjE,4DAA4D,GAC5D,yCACJ,CAAC;EACH;EAEA,IAAIF,iBAAiB,CAACG,mBAAmB,IAAI,IAAI,EAAE;IACjD,MAAM,IAAID,KAAK,CACb,oEAAoE,GAClE,2BACJ,CAAC;EACH;EAEA,IAAME,eAAe,GAAGP,IAAI,CAACQ,SAAS,CAACzB,iBAAiB,CAAC,CAACgB,iBAAiB,EAAEI,iBAAiB,CAAC,CAAC,CAAC;EACjG,IAAIf,UAAU,EAAE;IACdJ,EAAE,CAACyB,aAAa,CAACrB,UAAU,EAAEmB,eAAe,EAAE,MAAM,CAAC;EACvD,CAAC,MAAM;IACLrB,OAAO,CAACwB,MAAM,CAACjB,KAAK,CAAC,CAAC;EACxB;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}