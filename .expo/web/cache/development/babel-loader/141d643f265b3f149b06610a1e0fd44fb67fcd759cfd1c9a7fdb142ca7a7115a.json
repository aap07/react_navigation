{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRunOncePlugin = createRunOncePlugin;\nexports.withRunOnce = void 0;\nfunction _history() {\n  var data = require(\"../utils/history\");\n  _history = function _history() {\n    return data;\n  };\n  return data;\n}\nvar withRunOnce = function withRunOnce(config, _ref) {\n  var plugin = _ref.plugin,\n    name = _ref.name,\n    version = _ref.version;\n  if ((0, _history().getHistoryItem)(config, name)) {\n    return config;\n  }\n  config = (0, _history().addHistoryItem)(config, {\n    name: name,\n    version: version\n  });\n  return plugin(config);\n};\nexports.withRunOnce = withRunOnce;\nfunction createRunOncePlugin(_plugin, name, version) {\n  return function (config, props) {\n    return withRunOnce(config, {\n      plugin: function plugin(config) {\n        return _plugin(config, props);\n      },\n      name: name,\n      version: version\n    });\n  };\n}","map":{"version":3,"names":["_history","data","require","withRunOnce","config","_ref","plugin","name","version","getHistoryItem","addHistoryItem","exports","createRunOncePlugin","props"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\plugins\\withRunOnce.ts"],"sourcesContent":["import { ConfigPlugin } from '../Plugin.types';\nimport { addHistoryItem, getHistoryItem, PluginHistoryItem } from '../utils/history';\n\n/**\n * Prevents the same plugin from being run twice.\n * Used for migrating from unversioned expo config plugins to versioned plugins.\n *\n * @param config\n * @param name\n */\nexport const withRunOnce: ConfigPlugin<{\n  plugin: ConfigPlugin<void>;\n  name: PluginHistoryItem['name'];\n  version?: PluginHistoryItem['version'];\n}> = (config, { plugin, name, version }) => {\n  // Detect if a plugin has already been run on this config.\n  if (getHistoryItem(config, name)) {\n    return config;\n  }\n\n  // Push the history item so duplicates cannot be run.\n  config = addHistoryItem(config, { name, version });\n\n  return plugin(config);\n};\n\n/**\n * Helper method for creating mods from existing config functions.\n *\n * @param action\n */\nexport function createRunOncePlugin<T>(\n  plugin: ConfigPlugin<T>,\n  name: string,\n  version?: string\n): ConfigPlugin<T> {\n  return (config, props) => {\n    return withRunOnce(config, { plugin: (config) => plugin(config, props), name, version });\n  };\n}\n"],"mappings":";;;;;;;AACA,SAAAA,SAAA;EAAA,IAAAC,IAAA,GAAAC,OAAA;EAAAF,QAAA,YAAAA,SAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AASO,IAAME,WAIX,GAAG,SAJQA,WAIXA,CAAIC,MAAM,EAAAC,IAAA,EAAgC;EAAA,IAA5BC,MAAM,GAAAD,IAAA,CAANC,MAAM;IAAEC,IAAI,GAAAF,IAAA,CAAJE,IAAI;IAAEC,OAAA,GAAAH,IAAA,CAAAG,OAAA;EAE5B,IAAI,IAAAR,QAAA,GAAAS,cAAc,EAACL,MAAM,EAAEG,IAAI,CAAC,EAAE;IAChC,OAAOH,MAAM;EACf;EAGAA,MAAM,GAAG,IAAAJ,QAAA,GAAAU,cAAc,EAACN,MAAM,EAAE;IAAEG,IAAI,EAAJA,IAAI;IAAEC,OAAA,EAAAA;EAAQ,CAAC,CAAC;EAElD,OAAOF,MAAM,CAACF,MAAM,CAAC;AACvB,CAAC;AAEDO,OAAA,CAAAR,WAAA,GAAAA,WAAA;AAKO,SAASS,mBAAmBA,CACjCN,OAAuB,EACvBC,IAAY,EACZC,OAAgB,EACC;EACjB,OAAO,UAACJ,MAAM,EAAES,KAAK,EAAK;IACxB,OAAOV,WAAW,CAACC,MAAM,EAAE;MAAEE,MAAM,EAAG,SAAAA,OAAAF,MAAM;QAAA,OAAKE,OAAM,CAACF,MAAM,EAAES,KAAK,CAAC;MAAA;MAAEN,IAAI,EAAJA,IAAI;MAAEC,OAAA,EAAAA;IAAQ,CAAC,CAAC;EAC1F,CAAC;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}