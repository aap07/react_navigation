{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"GraphqlError\", {\n  enumerable: true,\n  get: function get() {\n    return _core.CombinedError;\n  }\n});\nexports.withErrorHandlingAsync = withErrorHandlingAsync;\nexports.graphqlClient = void 0;\nvar _core = require(\"@urql/core\");\nvar _exchangeRetry = require(\"@urql/exchange-retry\");\nvar _nodeFetch = _interopRequireDefault(require(\"node-fetch\"));\nvar Log = _interopRequireWildcard(require(\"../../log\"));\nvar _endpoint = require(\"../endpoint\");\nvar _wrapFetchWithOffline = require(\"../rest/wrapFetchWithOffline\");\nvar _wrapFetchWithProxy = require(\"../rest/wrapFetchWithProxy\");\nvar _userSettings = _interopRequireDefault(require(\"../user/UserSettings\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar graphqlClient = (0, _core).createClient({\n  url: (0, _endpoint).getExpoApiBaseUrl() + \"/graphql\",\n  exchanges: [_core.dedupExchange, _core.cacheExchange, (0, _exchangeRetry).retryExchange({\n    maxDelayMs: 4000,\n    retryIf: function retryIf(err) {\n      return !!(err && (err.networkError || err.graphQLErrors.some(function (e) {\n        var ref;\n        return e == null ? void 0 : (ref = e.extensions) == null ? void 0 : ref.isTransient;\n      })));\n    }\n  }), _core.fetchExchange],\n  fetch: (0, _wrapFetchWithOffline).wrapFetchWithOffline((0, _wrapFetchWithProxy).wrapFetchWithProxy(_nodeFetch.default)),\n  fetchOptions: function fetchOptions() {\n    var ref;\n    var token = _userSettings.default.getAccessToken();\n    if (token) {\n      return {\n        headers: {\n          authorization: `Bearer ${token}`\n        }\n      };\n    }\n    var sessionSecret = (ref = _userSettings.default.getSession()) == null ? void 0 : ref.sessionSecret;\n    if (sessionSecret) {\n      return {\n        headers: {\n          \"expo-session\": sessionSecret\n        }\n      };\n    }\n    return {};\n  }\n});\nexports.graphqlClient = graphqlClient;\nfunction withErrorHandlingAsync(_x) {\n  return _withErrorHandlingAsync.apply(this, arguments);\n}\nfunction _withErrorHandlingAsync() {\n  _withErrorHandlingAsync = _asyncToGenerator(function* (promise) {\n    var _yield$promise = yield promise,\n      data = _yield$promise.data,\n      error = _yield$promise.error;\n    if (error) {\n      if (error.graphQLErrors.some(function (e) {\n        var ref;\n        return e == null ? void 0 : (ref = e.extensions) == null ? void 0 : ref.isTransient;\n      })) {\n        Log.error(`We've encountered a transient error, please try again shortly.`);\n      }\n      throw error;\n    }\n    if (!data) {\n      throw new Error(\"Returned query result data is null!\");\n    }\n    return data;\n  });\n  return _withErrorHandlingAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","_core","CombinedError","withErrorHandlingAsync","_exchangeRetry","_nodeFetch","_interopRequireDefault","Log","_interopRequireWildcard","_endpoint","_wrapFetchWithOffline","_wrapFetchWithProxy","_userSettings","graphqlClient","createClient","url","getExpoApiBaseUrl","exchanges","dedupExchange","cacheExchange","retryExchange","maxDelayMs","retryIf","err","networkError","graphQLErrors","some","e","ref","extensions","isTransient","fetchExchange","fetch","wrapFetchWithOffline","wrapFetchWithProxy","default","fetchOptions","token","getAccessToken","headers","authorization","sessionSecret","getSession","_x","_withErrorHandlingAsync","apply","arguments","promise","_yield$promise","data","error","Error"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\api\\graphql\\client.ts"],"sourcesContent":["import {\n  cacheExchange,\n  Client,\n  CombinedError as GraphqlError,\n  createClient as createUrqlClient,\n  dedupExchange,\n  fetchExchange,\n  OperationContext,\n  OperationResult,\n  PromisifiedSource,\n  TypedDocumentNode,\n} from '@urql/core';\nimport { retryExchange } from '@urql/exchange-retry';\nimport { DocumentNode } from 'graphql';\nimport fetch from 'node-fetch';\n\nimport * as Log from '../../log';\nimport { getExpoApiBaseUrl } from '../endpoint';\nimport { wrapFetchWithOffline } from '../rest/wrapFetchWithOffline';\nimport { wrapFetchWithProxy } from '../rest/wrapFetchWithProxy';\nimport UserSettings from '../user/UserSettings';\n\ntype AccessTokenHeaders = {\n  authorization: string;\n};\n\ntype SessionHeaders = {\n  'expo-session': string;\n};\n\nexport const graphqlClient = createUrqlClient({\n  url: getExpoApiBaseUrl() + '/graphql',\n  exchanges: [\n    dedupExchange,\n    cacheExchange,\n    retryExchange({\n      maxDelayMs: 4000,\n      retryIf: (err) =>\n        !!(err && (err.networkError || err.graphQLErrors.some((e) => e?.extensions?.isTransient))),\n    }),\n    fetchExchange,\n  ],\n  // @ts-ignore Type 'typeof fetch' is not assignable to type '(input: RequestInfo, init?: RequestInit | undefined) => Promise<Response>'.\n  fetch: wrapFetchWithOffline(wrapFetchWithProxy(fetch)),\n  fetchOptions: (): { headers?: AccessTokenHeaders | SessionHeaders } => {\n    const token = UserSettings.getAccessToken();\n    if (token) {\n      return {\n        headers: {\n          authorization: `Bearer ${token}`,\n        },\n      };\n    }\n    const sessionSecret = UserSettings.getSession()?.sessionSecret;\n    if (sessionSecret) {\n      return {\n        headers: {\n          'expo-session': sessionSecret,\n        },\n      };\n    }\n    return {};\n  },\n}) as StricterClient;\n\n/* Please specify additionalTypenames in your Graphql queries */\nexport interface StricterClient extends Client {\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  query<Data = any, Variables extends object = {}>(\n    query: DocumentNode | TypedDocumentNode<Data, Variables> | string,\n    variables: Variables | undefined,\n    context: Partial<OperationContext> & { additionalTypenames: string[] }\n  ): PromisifiedSource<OperationResult<Data, Variables>>;\n}\n\nexport async function withErrorHandlingAsync<T>(promise: Promise<OperationResult<T>>): Promise<T> {\n  const { data, error } = await promise;\n\n  if (error) {\n    if (error.graphQLErrors.some((e) => e?.extensions?.isTransient)) {\n      Log.error(`We've encountered a transient error, please try again shortly.`);\n    }\n    throw error;\n  }\n\n  // Check for a malformed response. This only checks the root query's existence. It doesn't affect\n  // returning responses with an empty result set.\n  if (!data) {\n    throw new Error('Returned query result data is null!');\n  }\n\n  return data;\n}\n\nexport { GraphqlError };\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}