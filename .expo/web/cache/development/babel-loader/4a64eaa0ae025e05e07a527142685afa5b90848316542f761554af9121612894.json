{"ast":null,"code":"import LogReporter from \"./LogReporter\";\nimport { createDevServerMiddleware } from \"./middleware/devServerMiddleware\";\nexport { LogReporter, createDevServerMiddleware };\nexport * from \"./middlwareMutations\";\nexport * from \"./JsInspector\";","map":{"version":3,"names":["LogReporter","createDevServerMiddleware"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/dev-server/build/MetroDevServer.d.ts"],"sourcesContent":["/// <reference types=\"expo__bunyan\" />\n/// <reference types=\"node\" />\nimport type Log from '@expo/bunyan';\nimport { ExpoConfig } from '@expo/config';\nimport type { LoadOptions } from '@expo/metro-config';\nimport type { Server as ConnectServer } from 'connect';\nimport http from 'http';\nimport type Metro from 'metro';\nimport LogReporter from './LogReporter';\nimport { createDevServerMiddleware } from './middleware/devServerMiddleware';\nexport type MetroDevServerOptions = LoadOptions & {\n    logger: Log;\n    quiet?: boolean;\n    unversioned?: boolean;\n};\nexport type BundleOptions = {\n    entryPoint: string;\n    platform: 'android' | 'ios' | 'web';\n    dev?: boolean;\n    minify?: boolean;\n    sourceMapUrl?: string;\n};\nexport type BundleAssetWithFileHashes = Metro.AssetData & {\n    fileHashes: string[];\n};\nexport type BundleOutput = {\n    code: string;\n    map: string;\n    hermesBytecodeBundle?: Uint8Array;\n    hermesSourcemap?: string;\n    assets: readonly BundleAssetWithFileHashes[];\n};\nexport type MessageSocket = {\n    broadcast: (method: string, params?: Record<string, any> | undefined) => void;\n};\n/** @deprecated */\nexport declare function runMetroDevServerAsync(projectRoot: string, options: MetroDevServerOptions): Promise<{\n    server: http.Server;\n    middleware: any;\n    messageSocket: MessageSocket;\n}>;\n/** @deprecated */\nexport declare function bundleAsync(projectRoot: string, expoConfig: ExpoConfig, options: MetroDevServerOptions, bundles: BundleOptions[]): Promise<BundleOutput[]>;\n/**\n * Attach the inspector proxy to a development server.\n * Inspector proxy is used for viewing the JS context in a browser.\n * This must be attached after the server is listening.\n * Attaching consists of pushing custom middleware and appending WebSockets to the server.\n *\n *\n * @param projectRoot\n * @param props.server dev server to add WebSockets to\n * @param props.middleware dev server middleware to add extra middleware to\n */\nexport declare function attachInspectorProxy(projectRoot: string, { server, middleware }: {\n    server: http.Server;\n    middleware: ConnectServer;\n}): {\n    inspectorProxy: any;\n};\nexport { LogReporter, createDevServerMiddleware };\nexport * from './middlwareMutations';\nexport * from './JsInspector';\n"],"mappings":"AAQA,OAAOA,WAAW;AAClB,SAASC,yBAAyB;AAmDlC,SAASD,WAAW,EAAEC,yBAAyB;AAC/C;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}