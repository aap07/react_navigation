{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAllSpinners = getAllSpinners;\nexports.ora = ora;\nexports.logNewSection = logNewSection;\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _ora = _interopRequireDefault(require(\"ora\"));\nvar _env = require(\"./env\");\nvar _interactive = require(\"./interactive\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar logReal = console.log;\nvar infoReal = console.info;\nvar warnReal = console.warn;\nvar errorReal = console.error;\nvar runningSpinners = [];\nfunction getAllSpinners() {\n  return runningSpinners;\n}\nfunction ora(options1) {\n  var inputOptions = typeof options1 === \"string\" ? {\n    text: options1\n  } : options1 || {};\n  var disabled = !(0, _interactive).isInteractive() || _env.env.EXPO_DEBUG;\n  var spinner = (0, _ora).default(_objectSpread({\n    isEnabled: !disabled,\n    stream: disabled ? process.stdout : process.stderr\n  }, inputOptions));\n  var oraStart = spinner.start.bind(spinner);\n  var oraStop = spinner.stop.bind(spinner);\n  var oraStopAndPersist = spinner.stopAndPersist.bind(spinner);\n  var logWrap = function logWrap(method, args) {\n    oraStop();\n    method.apply(void 0, _toConsumableArray(args));\n    spinner.start();\n  };\n  var wrapNativeLogs = function wrapNativeLogs() {\n    console.log = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return logWrap(logReal, args);\n    };\n    console.info = function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return logWrap(infoReal, args);\n    };\n    console.warn = function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      return logWrap(warnReal, args);\n    };\n    console.error = function () {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      return logWrap(errorReal, args);\n    };\n    runningSpinners.push(spinner);\n  };\n  var resetNativeLogs = function resetNativeLogs() {\n    console.log = logReal;\n    console.info = infoReal;\n    console.warn = warnReal;\n    console.error = errorReal;\n    var index = runningSpinners.indexOf(spinner);\n    if (index >= 0) {\n      runningSpinners.splice(index, 1);\n    }\n  };\n  spinner.start = function (text) {\n    wrapNativeLogs();\n    return oraStart(text);\n  };\n  spinner.stopAndPersist = function (options) {\n    var result = oraStopAndPersist(options);\n    resetNativeLogs();\n    return result;\n  };\n  spinner.stop = function () {\n    var result = oraStop();\n    resetNativeLogs();\n    return result;\n  };\n  return spinner;\n}\nfunction logNewSection(title) {\n  var spinner = ora(_chalk.default.bold(title));\n  spinner.start();\n  return spinner;\n}","map":{"version":3,"names":["_toConsumableArray","require","_defineProperty","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","getAllSpinners","ora","logNewSection","_chalk","_interopRequireDefault","_ora","_env","_interactive","logReal","console","log","infoReal","info","warnReal","warn","errorReal","error","runningSpinners","options1","inputOptions","text","disabled","isInteractive","env","EXPO_DEBUG","spinner","default","isEnabled","stream","process","stdout","stderr","oraStart","start","bind","oraStop","stop","oraStopAndPersist","stopAndPersist","logWrap","method","args","wrapNativeLogs","_len","Array","_key","_len2","_key2","_len3","_key3","_len4","_key4","resetNativeLogs","index","indexOf","splice","options","result","title","bold"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\utils\\ora.ts"],"sourcesContent":["import chalk from 'chalk';\nimport oraReal, { Ora } from 'ora';\n\n// import * as Log from '../log';\nimport { env } from './env';\nimport { isInteractive } from './interactive';\n\nconst logReal = console.log;\nconst infoReal = console.info;\nconst warnReal = console.warn;\nconst errorReal = console.error;\n\nconst runningSpinners: oraReal.Ora[] = [];\n\nexport function getAllSpinners() {\n  return runningSpinners;\n}\n\n/**\n * A custom ora spinner that sends the stream to stdout in CI, non-TTY, or expo's non-interactive flag instead of stderr (the default).\n *\n * @param options\n * @returns\n */\nexport function ora(options?: oraReal.Options | string): oraReal.Ora {\n  const inputOptions = typeof options === 'string' ? { text: options } : options || {};\n  const disabled = !isInteractive() || env.EXPO_DEBUG;\n  const spinner = oraReal({\n    // Ensure our non-interactive mode emulates CI mode.\n    isEnabled: !disabled,\n    // In non-interactive mode, send the stream to stdout so it prevents looking like an error.\n    stream: disabled ? process.stdout : process.stderr,\n    ...inputOptions,\n  });\n\n  const oraStart = spinner.start.bind(spinner);\n  const oraStop = spinner.stop.bind(spinner);\n  const oraStopAndPersist = spinner.stopAndPersist.bind(spinner);\n\n  const logWrap = (method: any, args: any[]): void => {\n    oraStop();\n    method(...args);\n    spinner.start();\n  };\n\n  const wrapNativeLogs = (): void => {\n    console.log = (...args: any) => logWrap(logReal, args);\n    console.info = (...args: any) => logWrap(infoReal, args);\n    console.warn = (...args: any) => logWrap(warnReal, args);\n    console.error = (...args: any) => logWrap(errorReal, args);\n\n    runningSpinners.push(spinner);\n  };\n\n  const resetNativeLogs = (): void => {\n    console.log = logReal;\n    console.info = infoReal;\n    console.warn = warnReal;\n    console.error = errorReal;\n\n    const index = runningSpinners.indexOf(spinner);\n    if (index >= 0) {\n      runningSpinners.splice(index, 1);\n    }\n  };\n\n  spinner.start = (text): Ora => {\n    wrapNativeLogs();\n    return oraStart(text);\n  };\n\n  spinner.stopAndPersist = (options): Ora => {\n    const result = oraStopAndPersist(options);\n    resetNativeLogs();\n    return result;\n  };\n\n  spinner.stop = (): Ora => {\n    const result = oraStop();\n    resetNativeLogs();\n    return result;\n  };\n\n  // Always make the central logging module aware of the current spinner\n  // Log.setSpinner(spinner);\n\n  return spinner;\n}\n\n/**\n * Create a unified section spinner.\n *\n * @param title\n * @returns\n */\nexport function logNewSection(title: string) {\n  const spinner = ora(chalk.bold(title));\n  // Prevent the spinner from clashing with debug logs\n  spinner.start();\n  return spinner;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}