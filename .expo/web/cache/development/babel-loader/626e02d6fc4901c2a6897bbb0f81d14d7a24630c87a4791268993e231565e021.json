{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.promptForTaskSelection = exports.parseTasksFromGradleFile = exports.getGradleTasks = void 0;\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function _cliTools() {\n    return data;\n  };\n  return data;\n}\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function _chalk() {\n    return data;\n  };\n  return data;\n}\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n  _execa = function _execa() {\n    return data;\n  };\n  return data;\n}\nfunction _prompts() {\n  var data = _interopRequireDefault(require(\"prompts\"));\n  _prompts = function _prompts() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar parseTasksFromGradleFile = function parseTasksFromGradleFile(taskType, text) {\n  var instalTasks = [];\n  var taskRegex = new RegExp(taskType === 'build' ? '^assemble|^bundle' : '^install');\n  text.split('\\n').forEach(function (line) {\n    if (taskRegex.test(line.trim()) && /(?!.*?Test)^.*$/.test(line.trim())) {\n      var metadata = line.split(' - ');\n      instalTasks.push({\n        task: metadata[0],\n        description: metadata[1]\n      });\n    }\n  });\n  return instalTasks;\n};\nexports.parseTasksFromGradleFile = parseTasksFromGradleFile;\nvar getGradleTasks = function getGradleTasks(taskType, sourceDir) {\n  var cmd = process.platform.startsWith('win') ? 'gradlew.bat' : './gradlew';\n  var out = _execa().default.sync(cmd, ['tasks'], {\n    cwd: sourceDir\n  }).stdout;\n  return parseTasksFromGradleFile(taskType, out);\n};\nexports.getGradleTasks = getGradleTasks;\nvar promptForTaskSelection = function () {\n  var _ref = _asyncToGenerator(function* (taskType, sourceDir) {\n    var tasks = getGradleTasks(taskType, sourceDir);\n    if (!tasks.length) {\n      throw new (_cliTools().CLIError)(`No actionable ${taskType} tasks were found...`);\n    }\n    var _yield = yield (0, _prompts().default)({\n        type: 'select',\n        name: 'task',\n        message: `Select ${taskType} task you want to perform`,\n        choices: tasks.map(function (t) {\n          return {\n            title: `${_chalk().default.bold(t.task)} - ${t.description}`,\n            value: t.task\n          };\n        }),\n        min: 1\n      }),\n      task = _yield.task;\n    return task;\n  });\n  return function promptForTaskSelection(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexports.promptForTaskSelection = promptForTaskSelection;","map":{"version":3,"names":["_asyncToGenerator","require","Object","defineProperty","exports","value","promptForTaskSelection","parseTasksFromGradleFile","getGradleTasks","_cliTools","data","_chalk","_interopRequireDefault","_execa","_prompts","obj","__esModule","default","taskType","text","instalTasks","taskRegex","RegExp","split","forEach","line","test","trim","metadata","push","task","description","sourceDir","cmd","process","platform","startsWith","out","sync","cwd","stdout","_ref","tasks","length","CLIError","_yield","type","name","message","choices","map","t","title","bold","min","_x","_x2","apply","arguments"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidTasks.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.promptForTaskSelection = exports.parseTasksFromGradleFile = exports.getGradleTasks = void 0;\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function () {\n    return data;\n  };\n  return data;\n}\nfunction _chalk() {\n  const data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function () {\n    return data;\n  };\n  return data;\n}\nfunction _execa() {\n  const data = _interopRequireDefault(require(\"execa\"));\n  _execa = function () {\n    return data;\n  };\n  return data;\n}\nfunction _prompts() {\n  const data = _interopRequireDefault(require(\"prompts\"));\n  _prompts = function () {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nconst parseTasksFromGradleFile = (taskType, text) => {\n  const instalTasks = [];\n  const taskRegex = new RegExp(taskType === 'build' ? '^assemble|^bundle' : '^install');\n  text.split('\\n').forEach(line => {\n    if (taskRegex.test(line.trim()) && /(?!.*?Test)^.*$/.test(line.trim())) {\n      const metadata = line.split(' - ');\n      instalTasks.push({\n        task: metadata[0],\n        description: metadata[1]\n      });\n    }\n  });\n  return instalTasks;\n};\nexports.parseTasksFromGradleFile = parseTasksFromGradleFile;\nconst getGradleTasks = (taskType, sourceDir) => {\n  const cmd = process.platform.startsWith('win') ? 'gradlew.bat' : './gradlew';\n  const out = _execa().default.sync(cmd, ['tasks'], {\n    cwd: sourceDir\n  }).stdout;\n  return parseTasksFromGradleFile(taskType, out);\n};\nexports.getGradleTasks = getGradleTasks;\nconst promptForTaskSelection = async (taskType, sourceDir) => {\n  const tasks = getGradleTasks(taskType, sourceDir);\n  if (!tasks.length) {\n    throw new (_cliTools().CLIError)(`No actionable ${taskType} tasks were found...`);\n  }\n  const {\n    task\n  } = await (0, _prompts().default)({\n    type: 'select',\n    name: 'task',\n    message: `Select ${taskType} task you want to perform`,\n    choices: tasks.map(t => ({\n      title: `${_chalk().default.bold(t.task)} - ${t.description}`,\n      value: t.task\n    })),\n    min: 1\n  });\n  return task;\n};\nexports.promptForTaskSelection = promptForTaskSelection;\n\n//# sourceMappingURL=listAndroidTasks.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}