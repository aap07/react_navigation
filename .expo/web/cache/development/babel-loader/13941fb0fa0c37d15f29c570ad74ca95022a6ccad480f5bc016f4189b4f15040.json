{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.launchBrowserAsync = launchBrowserAsync;\nfunction _os() {\n  var data = _interopRequireDefault(require(\"os\"));\n  _os = function _os() {\n    return data;\n  };\n  return data;\n}\nfunction _LaunchBrowser() {\n  var data = require(\"./LaunchBrowser.types\");\n  _LaunchBrowser = function _LaunchBrowser() {\n    return data;\n  };\n  return data;\n}\nfunction _LaunchBrowserImplLinux() {\n  var data = _interopRequireDefault(require(\"./LaunchBrowserImplLinux\"));\n  _LaunchBrowserImplLinux = function _LaunchBrowserImplLinux() {\n    return data;\n  };\n  return data;\n}\nfunction _LaunchBrowserImplMacOS() {\n  var data = _interopRequireDefault(require(\"./LaunchBrowserImplMacOS\"));\n  _LaunchBrowserImplMacOS = function _LaunchBrowserImplMacOS() {\n    return data;\n  };\n  return data;\n}\nfunction _LaunchBrowserImplWindows() {\n  var data = _interopRequireDefault(require(\"./LaunchBrowserImplWindows\"));\n  _LaunchBrowserImplWindows = function _LaunchBrowserImplWindows() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar IS_WSL = require('is-wsl') && !require('is-docker')();\nfunction launchBrowserAsync(_x) {\n  return _launchBrowserAsync.apply(this, arguments);\n}\nfunction _launchBrowserAsync() {\n  _launchBrowserAsync = _asyncToGenerator(function* (url) {\n    var browser = createBrowser();\n    var tempBrowserDir = yield browser.createTempBrowserDir('expo-inspector');\n    var launchArgs = [`--app=${url}`, '--allow-running-insecure-content', `--user-data-dir=${tempBrowserDir}`, '--no-first-run', '--no-default-browser-check'];\n    for (var browserType of [_LaunchBrowser().LaunchBrowserTypes.CHROME, _LaunchBrowser().LaunchBrowserTypes.EDGE]) {\n      var isSupported = yield browser.isSupportedBrowser(browserType);\n      if (isSupported) {\n        return browser.launchAsync(browserType, launchArgs);\n      }\n    }\n    throw new Error('[LaunchBrowser] Unable to find a browser on the host to open the inspector. Supported browsers: Google Chrome, Microsoft Edge');\n  });\n  return _launchBrowserAsync.apply(this, arguments);\n}\nfunction createBrowser() {\n  if (_os().default.platform() === 'darwin') {\n    return new (_LaunchBrowserImplMacOS().default)();\n  }\n  if (_os().default.platform() === 'win32' || IS_WSL) {\n    return new (_LaunchBrowserImplWindows().default)();\n  }\n  if (_os().default.platform() === 'linux') {\n    return new (_LaunchBrowserImplLinux().default)();\n  }\n  throw new Error('[LaunchBrowser] Unsupported host platform');\n}","map":{"version":3,"names":["_os","data","_interopRequireDefault","require","_LaunchBrowser","_LaunchBrowserImplLinux","_LaunchBrowserImplMacOS","_LaunchBrowserImplWindows","obj","__esModule","default","IS_WSL","launchBrowserAsync","_x","_launchBrowserAsync","apply","arguments","_asyncToGenerator","url","browser","createBrowser","tempBrowserDir","createTempBrowserDir","launchArgs","browserType","LaunchBrowserTypes","CHROME","EDGE","isSupported","isSupportedBrowser","launchAsync","Error","platform"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\dev-server\\src\\LaunchBrowser.ts"],"sourcesContent":["import os from 'os';\n\nimport { LaunchBrowserTypes, type LaunchBrowserInstance } from './LaunchBrowser.types';\nimport LaunchBrowserImplLinux from './LaunchBrowserImplLinux';\nimport LaunchBrowserImplMacOS from './LaunchBrowserImplMacOS';\nimport LaunchBrowserImplWindows from './LaunchBrowserImplWindows';\n\nexport type { LaunchBrowserInstance };\n\nconst IS_WSL = require('is-wsl') && !require('is-docker')();\n\n/**\n * Launch a browser for JavaScript inspector\n */\nexport async function launchBrowserAsync(url: string): Promise<LaunchBrowserInstance> {\n  const browser = createBrowser();\n  const tempBrowserDir = await browser.createTempBrowserDir('expo-inspector');\n\n  // For dev-client connecting metro in LAN, the request to fetch sourcemaps may be blocked by Chromium\n  // with insecure-content (https page send xhr for http resource).\n  // Adding `--allow-running-insecure-content` to overcome this limitation\n  // without users manually allow insecure-content in site settings.\n  // However, if there is existing chromium browser process, the argument will not take effect.\n  // We also pass a `--user-data-dir=` as temporary profile and force chromium to create new browser process.\n  const launchArgs = [\n    `--app=${url}`,\n    '--allow-running-insecure-content',\n    `--user-data-dir=${tempBrowserDir}`,\n    '--no-first-run',\n    '--no-default-browser-check',\n  ];\n\n  for (const browserType of [LaunchBrowserTypes.CHROME, LaunchBrowserTypes.EDGE]) {\n    const isSupported = await browser.isSupportedBrowser(browserType);\n    if (isSupported) {\n      return browser.launchAsync(browserType, launchArgs);\n    }\n  }\n\n  throw new Error(\n    '[LaunchBrowser] Unable to find a browser on the host to open the inspector. Supported browsers: Google Chrome, Microsoft Edge'\n  );\n}\n\nfunction createBrowser() {\n  if (os.platform() === 'darwin') {\n    return new LaunchBrowserImplMacOS();\n  }\n  if (os.platform() === 'win32' || IS_WSL) {\n    return new LaunchBrowserImplWindows();\n  }\n  if (os.platform() === 'linux') {\n    return new LaunchBrowserImplLinux();\n  }\n  throw new Error('[LaunchBrowser] Unsupported host platform');\n}\n"],"mappings":";;;;;;;AAAA,SAAAA,IAAA;EAAA,IAAAC,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAH,GAAA,YAAAA,IAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAEA,SAAAG,eAAA;EAAA,IAAAH,IAAA,GAAAE,OAAA;EAAAC,cAAA,YAAAA,eAAA;IAAA,OAAAH,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAI,wBAAA;EAAA,IAAAJ,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAE,uBAAA,YAAAA,wBAAA;IAAA,OAAAJ,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAK,wBAAA;EAAA,IAAAL,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAG,uBAAA,YAAAA,wBAAA;IAAA,OAAAL,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAM,0BAAA;EAAA,IAAAN,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAI,yBAAA,YAAAA,0BAAA;IAAA,OAAAN,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAAkE,SAAAC,uBAAAM,GAAA;EAAA,OAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA;IAAAE,OAAA,EAAAF;EAAA;AAAA;AAIlE,IAAMG,MAAM,GAAGR,OAAO,CAAC,QAAQ,CAAC,IAAI,CAACA,OAAO,CAAC,WAAW,CAAC,EAAE;AAAA,SAKrCS,kBAAkBA,CAAAC,EAAA;EAAA,OAAAC,mBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,oBAAA;EAAAA,mBAAA,GAAAG,iBAAA,CAAjC,WAAkCC,GAAW,EAAkC;IACpF,IAAMC,OAAO,GAAGC,aAAa,EAAE;IAC/B,IAAMC,cAAc,SAASF,OAAO,CAACG,oBAAoB,CAAC,gBAAgB,CAAC;IAQ3E,IAAMC,UAAU,GAAG,CAChB,SAAQL,GAAI,EAAC,EACd,kCAAkC,EACjC,mBAAkBG,cAAe,EAAC,EACnC,gBAAgB,EAChB,4BAA4B,CAC7B;IAED,KAAK,IAAMG,WAAW,IAAI,CAACpB,cAAA,GAAAqB,kBAAkB,CAACC,MAAM,EAAEtB,cAAA,GAAAqB,kBAAkB,CAACE,IAAI,CAAC,EAAE;MAC9E,IAAMC,WAAW,SAAST,OAAO,CAACU,kBAAkB,CAACL,WAAW,CAAC;MACjE,IAAII,WAAW,EAAE;QACf,OAAOT,OAAO,CAACW,WAAW,CAACN,WAAW,EAAED,UAAU,CAAC;MACrD;IACF;IAEA,MAAM,IAAIQ,KAAK,CACb,+HAA+H,CAChI;EACH;EAAA,OAAAjB,mBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAEA,SAASI,aAAaA,CAAA,EAAG;EACvB,IAAIpB,GAAA,GAAAU,OAAE,CAACsB,QAAQ,EAAE,KAAK,QAAQ,EAAE;IAC9B,OAAO,KAAI1B,uBAAA,GAAAI,OAAsB,GAAE;EACrC;EACA,IAAIV,GAAA,GAAAU,OAAE,CAACsB,QAAQ,EAAE,KAAK,OAAO,IAAIrB,MAAM,EAAE;IACvC,OAAO,KAAIJ,yBAAA,GAAAG,OAAwB,GAAE;EACvC;EACA,IAAIV,GAAA,GAAAU,OAAE,CAACsB,QAAQ,EAAE,KAAK,OAAO,EAAE;IAC7B,OAAO,KAAI3B,uBAAA,GAAAK,OAAsB,GAAE;EACrC;EACA,MAAM,IAAIqB,KAAK,CAAC,2CAA2C,CAAC;AAC9D"},"metadata":{},"sourceType":"script","externalDependencies":[]}