{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ensureNativeProjectAsync = ensureNativeProjectAsync;\nvar _fs = _interopRequireDefault(require(\"fs\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _clearNativeFolder = require(\"../prebuild/clearNativeFolder\");\nvar _prebuildAsync = require(\"../prebuild/prebuildAsync\");\nvar _profile = require(\"../utils/profile\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction ensureNativeProjectAsync(_x, _x2) {\n  return _ensureNativeProjectAsync.apply(this, arguments);\n}\nfunction _ensureNativeProjectAsync() {\n  _ensureNativeProjectAsync = _asyncToGenerator(function* (projectRoot, _ref) {\n    var platform = _ref.platform,\n      install = _ref.install;\n    yield (0, _profile).profile(_clearNativeFolder.promptToClearMalformedNativeProjectsAsync)(projectRoot, [platform]);\n    if (!_fs.default.existsSync(_path.default.join(projectRoot, platform))) {\n      yield (0, _prebuildAsync).prebuildAsync(projectRoot, {\n        install: !!install,\n        platforms: [platform]\n      });\n    } else {\n      return true;\n    }\n    return false;\n  });\n  return _ensureNativeProjectAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","ensureNativeProjectAsync","_fs","_interopRequireDefault","_path","_clearNativeFolder","_prebuildAsync","_profile","_x","_x2","_ensureNativeProjectAsync","apply","arguments","projectRoot","_ref","platform","install","profile","promptToClearMalformedNativeProjectsAsync","default","existsSync","join","prebuildAsync","platforms"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\run\\ensureNativeProject.ts"],"sourcesContent":["import { ModPlatform } from '@expo/config-plugins';\nimport fs from 'fs';\nimport path from 'path';\n\nimport { promptToClearMalformedNativeProjectsAsync } from '../prebuild/clearNativeFolder';\nimport { prebuildAsync } from '../prebuild/prebuildAsync';\nimport { profile } from '../utils/profile';\n\nexport async function ensureNativeProjectAsync(\n  projectRoot: string,\n  { platform, install }: { platform: ModPlatform; install?: boolean }\n) {\n  // If the user has an empty android folder then the project won't build, this can happen when they delete the prebuild files in git.\n  // Check to ensure most of the core files are in place, and prompt to remove the folder if they aren't.\n  await profile(promptToClearMalformedNativeProjectsAsync)(projectRoot, [platform]);\n\n  // If the project doesn't have native code, prebuild it...\n  if (!fs.existsSync(path.join(projectRoot, platform))) {\n    await prebuildAsync(projectRoot, {\n      install: !!install,\n      platforms: [platform],\n    });\n  } else {\n    return true;\n  }\n  return false;\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,iBAAA,GAAAC,OAAA;;;;QAQsBC,wBAAwB,GAAxBA,wBAAwB;AAP/B,IAAAC,GAAI,GAAAC,sBAAA,CAAAH,OAAA,CAAJ,IAAI;AACF,IAAAI,KAAM,GAAAD,sBAAA,CAAAH,OAAA,CAAN,MAAM;AAEmC,IAAAK,kBAA+B,GAAAL,OAAA;AAC3D,IAAAM,cAA2B,GAAAN,OAAA;AACjC,IAAAO,QAAkB,GAAAP,OAAA;;;;;;SAEpBC,wBAAwBA,CAAAO,EAAA,EAAAC,GAAA;EAAA,OAAAC,yBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,0BAAA;EAAAA,yBAAA,GAAAX,iBAAA,CAAvC,WACLc,WAAmB,EAAAC,IAAA,EAEnB;IAAA,IADEC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;MAAEC,OAAO,GAAAF,IAAA,CAAPE,OAAO;IAInB,MAAM,IAAAT,QAAO,EAA2CU,OAA3C,CAACZ,kBAAyC,CAAAa,yCAAA,CAAC,CAACL,WAAW,EAAE,CAACE,QAAQ,CAAC,CAAC;IAGjF,IAAI,CAACb,GAAE,CAAAiB,OAAA,CAACC,UAAU,CAAChB,KAAI,CAAAe,OAAA,CAACE,IAAI,CAACR,WAAW,EAAEE,QAAQ,CAAC,CAAC,EAAE;MACpD,MAAM,IAAAT,cAAa,EAGjBgB,aAHiB,CAACT,WAAW,EAAE;QAC/BG,OAAO,EAAE,CAAC,CAACA,OAAO;QAClBO,SAAS,EAAE,CAACR,QAAQ;OACrB,CAAC;KACH,MAAM;MACL,OAAO,IAAI;;IAEb,OAAO,KAAK;GACb;EAAA,OAAAL,yBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}