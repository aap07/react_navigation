{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GestureStateManager = void 0;\nvar _reanimatedWrapper = require(\"./reanimatedWrapper\");\nvar _State = require(\"../../State\");\nvar _utils = require(\"../../utils\");\nvar warningMessage = (0, _utils.tagMessage)('react-native-reanimated is required in order to use synchronous state management');\nvar REANIMATED_AVAILABLE = (_reanimatedWrapper.Reanimated === null || _reanimatedWrapper.Reanimated === void 0 ? void 0 : _reanimatedWrapper.Reanimated.useSharedValue) !== undefined;\nvar setGestureState = _reanimatedWrapper.Reanimated === null || _reanimatedWrapper.Reanimated === void 0 ? void 0 : _reanimatedWrapper.Reanimated.setGestureState;\nvar GestureStateManager = {\n  create: function create(handlerTag) {\n    'worklet';\n\n    return {\n      begin: function begin() {\n        'worklet';\n\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, _State.State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n      activate: function activate() {\n        'worklet';\n\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, _State.State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n      fail: function fail() {\n        'worklet';\n\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, _State.State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n      end: function end() {\n        'worklet';\n\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, _State.State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      }\n    };\n  }\n};\nexports.GestureStateManager = GestureStateManager;","map":{"version":3,"names":["_reanimatedWrapper","require","_State","_utils","warningMessage","tagMessage","REANIMATED_AVAILABLE","Reanimated","useSharedValue","undefined","setGestureState","GestureStateManager","create","handlerTag","begin","State","BEGAN","console","warn","activate","ACTIVE","fail","FAILED","end","END"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\react-native-gesture-handler\\lib\\commonjs\\handlers\\gestures\\gestureStateManager.ts"],"sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\nimport { tagMessage } from '../../utils';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nconst warningMessage = tagMessage(\n  'react-native-reanimated is required in order to use synchronous state management'\n);\n\n// check if reanimated module is available, but look for useSharedValue as conditional\n// require of reanimated can sometimes return content of `utils.ts` file (?)\nconst REANIMATED_AVAILABLE = Reanimated?.useSharedValue !== undefined;\nconst setGestureState = Reanimated?.setGestureState;\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (REANIMATED_AVAILABLE) {\n          setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n    };\n  },\n};\n"],"mappings":";;;;;;AAAA,IAAAA,kBAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AACA,IAAAE,MAAA,GAAAF,OAAA;AASA,IAAMG,cAAc,GAAG,IAAAD,MAAA,CAAAE,UAAA,EACrB,kFADqB,CAAvB;AAMA,IAAMC,oBAAoB,GAAG,CAAAN,kBAAA,CAAAO,UAAA,aAAAP,kBAAA,CAAAO,UAAA,uBAAAP,kBAAA,CAAAO,UAAA,CAAYC,cAAZ,MAA+BC,SAA5D;AACA,IAAMC,eAAe,GAAGV,kBAAA,CAAAO,UAAH,aAAGP,kBAAA,CAAAO,UAAH,uBAAGP,kBAAA,CAAAO,UAAA,CAAYG,eAApC;AAEO,IAAMC,mBAAmB,GAAG;EACjCC,MAAM,WAAAA,OAACC,UAAD,EAA8C;IAClD;;IACA,OAAO;MACLC,KAAK,EAAE,SAAAA,MAAA,EAAM;QACX;;QACA,IAAIR,oBAAJ,EAA0B;UACxBI,eAAe,CAACG,UAAD,EAAaX,MAAA,CAAAa,KAAA,CAAMC,KAAnB,CAAf;QACD,CAFD,MAEO;UACLC,OAAO,CAACC,IAAR,CAAad,cAAb;QACD;MACF,CARI;MAULe,QAAQ,EAAE,SAAAA,SAAA,EAAM;QACd;;QACA,IAAIb,oBAAJ,EAA0B;UACxBI,eAAe,CAACG,UAAD,EAAaX,MAAA,CAAAa,KAAA,CAAMK,MAAnB,CAAf;QACD,CAFD,MAEO;UACLH,OAAO,CAACC,IAAR,CAAad,cAAb;QACD;MACF,CAjBI;MAmBLiB,IAAI,EAAE,SAAAA,KAAA,EAAM;QACV;;QACA,IAAIf,oBAAJ,EAA0B;UACxBI,eAAe,CAACG,UAAD,EAAaX,MAAA,CAAAa,KAAA,CAAMO,MAAnB,CAAf;QACD,CAFD,MAEO;UACLL,OAAO,CAACC,IAAR,CAAad,cAAb;QACD;MACF,CA1BI;MA4BLmB,GAAG,EAAE,SAAAA,IAAA,EAAM;QACT;;QACA,IAAIjB,oBAAJ,EAA0B;UACxBI,eAAe,CAACG,UAAD,EAAaX,MAAA,CAAAa,KAAA,CAAMS,GAAnB,CAAf;QACD,CAFD,MAEO;UACLP,OAAO,CAACC,IAAR,CAAad,cAAb;QACD;MACF;IAnCI,CAAP;EAqCD;AAxCgC,CAA5B"},"metadata":{},"sourceType":"script","externalDependencies":[]}