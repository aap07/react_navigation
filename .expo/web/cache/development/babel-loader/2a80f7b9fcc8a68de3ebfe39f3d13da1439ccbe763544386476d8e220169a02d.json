{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/dist/visit.d.ts"],"sourcesContent":["import type { Document } from './doc/Document.js';\nimport type { Alias } from './nodes/Alias.js';\nimport { Node } from './nodes/Node.js';\nimport type { Pair } from './nodes/Pair.js';\nimport type { Scalar } from './nodes/Scalar.js';\nimport type { YAMLMap } from './nodes/YAMLMap.js';\nimport type { YAMLSeq } from './nodes/YAMLSeq.js';\nexport type visitorFn<T> = (key: number | 'key' | 'value' | null, node: T, path: readonly (Document | Node | Pair)[]) => void | symbol | number | Node | Pair;\nexport type visitor = visitorFn<unknown> | {\n    Alias?: visitorFn<Alias>;\n    Collection?: visitorFn<YAMLMap | YAMLSeq>;\n    Map?: visitorFn<YAMLMap>;\n    Node?: visitorFn<Alias | Scalar | YAMLMap | YAMLSeq>;\n    Pair?: visitorFn<Pair>;\n    Scalar?: visitorFn<Scalar>;\n    Seq?: visitorFn<YAMLSeq>;\n    Value?: visitorFn<Scalar | YAMLMap | YAMLSeq>;\n};\nexport type asyncVisitorFn<T> = (key: number | 'key' | 'value' | null, node: T, path: readonly (Document | Node | Pair)[]) => void | symbol | number | Node | Pair | Promise<void | symbol | number | Node | Pair>;\nexport type asyncVisitor = asyncVisitorFn<unknown> | {\n    Alias?: asyncVisitorFn<Alias>;\n    Collection?: asyncVisitorFn<YAMLMap | YAMLSeq>;\n    Map?: asyncVisitorFn<YAMLMap>;\n    Node?: asyncVisitorFn<Alias | Scalar | YAMLMap | YAMLSeq>;\n    Pair?: asyncVisitorFn<Pair>;\n    Scalar?: asyncVisitorFn<Scalar>;\n    Seq?: asyncVisitorFn<YAMLSeq>;\n    Value?: asyncVisitorFn<Scalar | YAMLMap | YAMLSeq>;\n};\n/**\n * Apply a visitor to an AST node or document.\n *\n * Walks through the tree (depth-first) starting from `node`, calling a\n * `visitor` function with three arguments:\n *   - `key`: For sequence values and map `Pair`, the node's index in the\n *     collection. Within a `Pair`, `'key'` or `'value'`, correspondingly.\n *     `null` for the root node.\n *   - `node`: The current node.\n *   - `path`: The ancestry of the current node.\n *\n * The return value of the visitor may be used to control the traversal:\n *   - `undefined` (default): Do nothing and continue\n *   - `visit.SKIP`: Do not visit the children of this node, continue with next\n *     sibling\n *   - `visit.BREAK`: Terminate traversal completely\n *   - `visit.REMOVE`: Remove the current node, then continue with the next one\n *   - `Node`: Replace the current node, then continue by visiting it\n *   - `number`: While iterating the items of a sequence or map, set the index\n *     of the next step. This is useful especially if the index of the current\n *     node has changed.\n *\n * If `visitor` is a single function, it will be called with all values\n * encountered in the tree, including e.g. `null` values. Alternatively,\n * separate visitor functions may be defined for each `Map`, `Pair`, `Seq`,\n * `Alias` and `Scalar` node. To define the same visitor function for more than\n * one node type, use the `Collection` (map and seq), `Value` (map, seq & scalar)\n * and `Node` (alias, map, seq & scalar) targets. Of all these, only the most\n * specific defined one will be used for each node.\n */\nexport declare function visit(node: Node | Document | null, visitor: visitor): void;\nexport declare namespace visit {\n    var BREAK: symbol;\n    var SKIP: symbol;\n    var REMOVE: symbol;\n}\n/**\n * Apply an async visitor to an AST node or document.\n *\n * Walks through the tree (depth-first) starting from `node`, calling a\n * `visitor` function with three arguments:\n *   - `key`: For sequence values and map `Pair`, the node's index in the\n *     collection. Within a `Pair`, `'key'` or `'value'`, correspondingly.\n *     `null` for the root node.\n *   - `node`: The current node.\n *   - `path`: The ancestry of the current node.\n *\n * The return value of the visitor may be used to control the traversal:\n *   - `Promise`: Must resolve to one of the following values\n *   - `undefined` (default): Do nothing and continue\n *   - `visit.SKIP`: Do not visit the children of this node, continue with next\n *     sibling\n *   - `visit.BREAK`: Terminate traversal completely\n *   - `visit.REMOVE`: Remove the current node, then continue with the next one\n *   - `Node`: Replace the current node, then continue by visiting it\n *   - `number`: While iterating the items of a sequence or map, set the index\n *     of the next step. This is useful especially if the index of the current\n *     node has changed.\n *\n * If `visitor` is a single function, it will be called with all values\n * encountered in the tree, including e.g. `null` values. Alternatively,\n * separate visitor functions may be defined for each `Map`, `Pair`, `Seq`,\n * `Alias` and `Scalar` node. To define the same visitor function for more than\n * one node type, use the `Collection` (map and seq), `Value` (map, seq & scalar)\n * and `Node` (alias, map, seq & scalar) targets. Of all these, only the most\n * specific defined one will be used for each node.\n */\nexport declare function visitAsync(node: Node | Document | null, visitor: asyncVisitor): Promise<void>;\nexport declare namespace visitAsync {\n    var BREAK: symbol;\n    var SKIP: symbol;\n    var REMOVE: symbol;\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}