{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cleanAssetCatalog = cleanAssetCatalog;\nexports.getImageSet = getImageSet;\nexports.isCatalogAsset = isCatalogAsset;\nexports.writeImageSet = writeImageSet;\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _fsExtra() {\n  var data = _interopRequireDefault(require(\"fs-extra\"));\n  _fsExtra = function _fsExtra() {\n    return data;\n  };\n  return data;\n}\nvar _assetPathUtils = _interopRequireDefault(require(\"./assetPathUtils\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction cleanAssetCatalog(catalogDir) {\n  var files = _fsExtra().default.readdirSync(catalogDir).filter(function (file) {\n    return file.endsWith('.imageset');\n  });\n  for (var file of files) {\n    _fsExtra().default.removeSync(_path().default.join(catalogDir, file));\n  }\n}\nfunction getImageSet(catalogDir, asset, scales) {\n  var fileName = _assetPathUtils.default.getResourceIdentifier(asset);\n  return {\n    basePath: _path().default.join(catalogDir, `${fileName}.imageset`),\n    files: scales.map(function (scale, idx) {\n      var suffix = scale === 1 ? '' : `@${scale}x`;\n      return {\n        name: `${fileName + suffix}.${asset.type}`,\n        scale: scale,\n        src: asset.files[idx]\n      };\n    })\n  };\n}\nfunction isCatalogAsset(asset) {\n  return asset.type === 'png' || asset.type === 'jpg' || asset.type === 'jpeg';\n}\nfunction writeImageSet(imageSet) {\n  _fsExtra().default.mkdirsSync(imageSet.basePath);\n  for (var file of imageSet.files) {\n    var dest = _path().default.join(imageSet.basePath, file.name);\n    _fsExtra().default.copyFileSync(file.src, dest);\n  }\n  _fsExtra().default.writeJSONSync(_path().default.join(imageSet.basePath, 'Contents.json'), {\n    images: imageSet.files.map(function (file) {\n      return {\n        filename: file.name,\n        idiom: 'universal',\n        scale: `${file.scale}x`\n      };\n    }),\n    info: {\n      author: 'xcode',\n      version: 1\n    }\n  });\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","cleanAssetCatalog","getImageSet","isCatalogAsset","writeImageSet","_path","data","_interopRequireDefault","require","_fsExtra","_assetPathUtils","obj","__esModule","default","catalogDir","files","readdirSync","filter","file","endsWith","removeSync","join","asset","scales","fileName","getResourceIdentifier","basePath","map","scale","idx","suffix","name","type","src","imageSet","mkdirsSync","dest","copyFileSync","writeJSONSync","images","filename","idiom","info","author","version"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-plugin-metro/build/commands/bundle/assetCatalogIOS.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cleanAssetCatalog = cleanAssetCatalog;\nexports.getImageSet = getImageSet;\nexports.isCatalogAsset = isCatalogAsset;\nexports.writeImageSet = writeImageSet;\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n  _path = function () {\n    return data;\n  };\n  return data;\n}\nfunction _fsExtra() {\n  const data = _interopRequireDefault(require(\"fs-extra\"));\n  _fsExtra = function () {\n    return data;\n  };\n  return data;\n}\nvar _assetPathUtils = _interopRequireDefault(require(\"./assetPathUtils\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction cleanAssetCatalog(catalogDir) {\n  const files = _fsExtra().default.readdirSync(catalogDir).filter(file => file.endsWith('.imageset'));\n  for (const file of files) {\n    _fsExtra().default.removeSync(_path().default.join(catalogDir, file));\n  }\n}\nfunction getImageSet(catalogDir, asset, scales) {\n  const fileName = _assetPathUtils.default.getResourceIdentifier(asset);\n  return {\n    basePath: _path().default.join(catalogDir, `${fileName}.imageset`),\n    files: scales.map((scale, idx) => {\n      const suffix = scale === 1 ? '' : `@${scale}x`;\n      return {\n        name: `${fileName + suffix}.${asset.type}`,\n        scale,\n        src: asset.files[idx]\n      };\n    })\n  };\n}\nfunction isCatalogAsset(asset) {\n  return asset.type === 'png' || asset.type === 'jpg' || asset.type === 'jpeg';\n}\nfunction writeImageSet(imageSet) {\n  _fsExtra().default.mkdirsSync(imageSet.basePath);\n  for (const file of imageSet.files) {\n    const dest = _path().default.join(imageSet.basePath, file.name);\n    _fsExtra().default.copyFileSync(file.src, dest);\n  }\n  _fsExtra().default.writeJSONSync(_path().default.join(imageSet.basePath, 'Contents.json'), {\n    images: imageSet.files.map(file => ({\n      filename: file.name,\n      idiom: 'universal',\n      scale: `${file.scale}x`\n    })),\n    info: {\n      author: 'xcode',\n      version: 1\n    }\n  });\n}\n\n//# sourceMappingURL=assetCatalogIOS.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}