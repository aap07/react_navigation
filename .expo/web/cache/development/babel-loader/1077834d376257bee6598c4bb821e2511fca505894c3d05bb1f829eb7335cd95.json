{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAndroidManifestAsync = getAndroidManifestAsync;\nexports.getAppBuildGradleAsync = getAppBuildGradleAsync;\nexports.getAppBuildGradleFilePath = getAppBuildGradleFilePath;\nexports.getFileInfo = getFileInfo;\nexports.getGradleFilePath = getGradleFilePath;\nexports.getMainActivityAsync = getMainActivityAsync;\nexports.getMainApplicationAsync = getMainApplicationAsync;\nexports.getProjectBuildGradleAsync = getProjectBuildGradleAsync;\nexports.getProjectBuildGradleFilePath = getProjectBuildGradleFilePath;\nexports.getProjectFilePath = getProjectFilePath;\nexports.getProjectPathOrThrowAsync = getProjectPathOrThrowAsync;\nexports.getResourceFolderAsync = getResourceFolderAsync;\nexports.getResourceXMLPathAsync = getResourceXMLPathAsync;\nexports.getSettingsGradleAsync = getSettingsGradleAsync;\nexports.getSettingsGradleFilePath = getSettingsGradleFilePath;\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n  _assert = function _assert() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _glob() {\n  var data = require(\"glob\");\n  _glob = function _glob() {\n    return data;\n  };\n  return data;\n}\nfunction path() {\n  var data = _interopRequireWildcard(require(\"path\"));\n  path = function path() {\n    return data;\n  };\n  return data;\n}\nfunction _errors() {\n  var data = require(\"../utils/errors\");\n  _errors = function _errors() {\n    return data;\n  };\n  return data;\n}\nfunction _modules() {\n  var data = require(\"../utils/modules\");\n  _modules = function _modules() {\n    return data;\n  };\n  return data;\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getProjectFilePath(projectRoot, name) {\n  var filePath = (0, _glob().sync)(path().join(projectRoot, `android/app/src/main/java/**/${name}.@(java|kt)`))[0];\n  (0, _assert().default)(filePath, `Project file \"${name}\" does not exist in android project for root \"${projectRoot}\"`);\n  return filePath;\n}\nfunction getLanguage(filePath) {\n  var extension = path().extname(filePath);\n  switch (extension) {\n    case '.java':\n      return 'java';\n    case '.kts':\n    case '.kt':\n      return 'kt';\n    case '.groovy':\n    case '.gradle':\n      return 'groovy';\n    default:\n      throw new (_errors().UnexpectedError)(`Unexpected Android file extension: ${extension}`);\n  }\n}\nfunction getFileInfo(filePath) {\n  return {\n    path: path().normalize(filePath),\n    contents: _fs().default.readFileSync(filePath, 'utf8'),\n    language: getLanguage(filePath)\n  };\n}\nfunction getMainApplicationAsync(_x) {\n  return _getMainApplicationAsync.apply(this, arguments);\n}\nfunction _getMainApplicationAsync() {\n  _getMainApplicationAsync = _asyncToGenerator(function* (projectRoot) {\n    var filePath = getProjectFilePath(projectRoot, 'MainApplication');\n    return getFileInfo(filePath);\n  });\n  return _getMainApplicationAsync.apply(this, arguments);\n}\nfunction getMainActivityAsync(_x2) {\n  return _getMainActivityAsync.apply(this, arguments);\n}\nfunction _getMainActivityAsync() {\n  _getMainActivityAsync = _asyncToGenerator(function* (projectRoot) {\n    var filePath = getProjectFilePath(projectRoot, 'MainActivity');\n    return getFileInfo(filePath);\n  });\n  return _getMainActivityAsync.apply(this, arguments);\n}\nfunction getGradleFilePath(projectRoot, gradleName) {\n  var groovyPath = path().resolve(projectRoot, `${gradleName}.gradle`);\n  var ktPath = path().resolve(projectRoot, `${gradleName}.gradle.kts`);\n  var isGroovy = _fs().default.existsSync(groovyPath);\n  var isKotlin = !isGroovy && _fs().default.existsSync(ktPath);\n  if (!isGroovy && !isKotlin) {\n    throw new Error(`Failed to find '${gradleName}.gradle' file for project: ${projectRoot}.`);\n  }\n  var filePath = isGroovy ? groovyPath : ktPath;\n  return filePath;\n}\nfunction getProjectBuildGradleFilePath(projectRoot) {\n  return getGradleFilePath(path().join(projectRoot, 'android'), 'build');\n}\nfunction getProjectBuildGradleAsync(_x3) {\n  return _getProjectBuildGradleAsync.apply(this, arguments);\n}\nfunction _getProjectBuildGradleAsync() {\n  _getProjectBuildGradleAsync = _asyncToGenerator(function* (projectRoot) {\n    return getFileInfo(getProjectBuildGradleFilePath(projectRoot));\n  });\n  return _getProjectBuildGradleAsync.apply(this, arguments);\n}\nfunction getSettingsGradleFilePath(projectRoot) {\n  return getGradleFilePath(path().join(projectRoot, 'android'), 'settings');\n}\nfunction getSettingsGradleAsync(_x4) {\n  return _getSettingsGradleAsync.apply(this, arguments);\n}\nfunction _getSettingsGradleAsync() {\n  _getSettingsGradleAsync = _asyncToGenerator(function* (projectRoot) {\n    return getFileInfo(getSettingsGradleFilePath(projectRoot));\n  });\n  return _getSettingsGradleAsync.apply(this, arguments);\n}\nfunction getAppBuildGradleFilePath(projectRoot) {\n  return getGradleFilePath(path().join(projectRoot, 'android', 'app'), 'build');\n}\nfunction getAppBuildGradleAsync(_x5) {\n  return _getAppBuildGradleAsync.apply(this, arguments);\n}\nfunction _getAppBuildGradleAsync() {\n  _getAppBuildGradleAsync = _asyncToGenerator(function* (projectRoot) {\n    return getFileInfo(getAppBuildGradleFilePath(projectRoot));\n  });\n  return _getAppBuildGradleAsync.apply(this, arguments);\n}\nfunction getProjectPathOrThrowAsync(_x6) {\n  return _getProjectPathOrThrowAsync.apply(this, arguments);\n}\nfunction _getProjectPathOrThrowAsync() {\n  _getProjectPathOrThrowAsync = _asyncToGenerator(function* (projectRoot) {\n    var projectPath = path().join(projectRoot, 'android');\n    if (yield (0, _modules().directoryExistsAsync)(projectPath)) {\n      return projectPath;\n    }\n    throw new Error(`Android project folder is missing in project: ${projectRoot}`);\n  });\n  return _getProjectPathOrThrowAsync.apply(this, arguments);\n}\nfunction getAndroidManifestAsync(_x7) {\n  return _getAndroidManifestAsync.apply(this, arguments);\n}\nfunction _getAndroidManifestAsync() {\n  _getAndroidManifestAsync = _asyncToGenerator(function* (projectRoot) {\n    var projectPath = yield getProjectPathOrThrowAsync(projectRoot);\n    var filePath = path().join(projectPath, 'app/src/main/AndroidManifest.xml');\n    return filePath;\n  });\n  return _getAndroidManifestAsync.apply(this, arguments);\n}\nfunction getResourceFolderAsync(_x8) {\n  return _getResourceFolderAsync.apply(this, arguments);\n}\nfunction _getResourceFolderAsync() {\n  _getResourceFolderAsync = _asyncToGenerator(function* (projectRoot) {\n    var projectPath = yield getProjectPathOrThrowAsync(projectRoot);\n    return path().join(projectPath, `app/src/main/res`);\n  });\n  return _getResourceFolderAsync.apply(this, arguments);\n}\nfunction getResourceXMLPathAsync(_x9, _x10) {\n  return _getResourceXMLPathAsync.apply(this, arguments);\n}\nfunction _getResourceXMLPathAsync() {\n  _getResourceXMLPathAsync = _asyncToGenerator(function* (projectRoot, _ref) {\n    var _ref$kind = _ref.kind,\n      kind = _ref$kind === void 0 ? 'values' : _ref$kind,\n      name = _ref.name;\n    var resourcePath = yield getResourceFolderAsync(projectRoot);\n    var filePath = path().join(resourcePath, `${kind}/${name}.xml`);\n    return filePath;\n  });\n  return _getResourceXMLPathAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_assert","data","_interopRequireDefault","require","_fs","_glob","path","_interopRequireWildcard","_errors","_modules","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","getProjectFilePath","projectRoot","name","filePath","sync","join","getLanguage","extension","extname","UnexpectedError","getFileInfo","normalize","contents","readFileSync","language","getMainApplicationAsync","_x","_getMainApplicationAsync","apply","arguments","_asyncToGenerator","getMainActivityAsync","_x2","_getMainActivityAsync","getGradleFilePath","gradleName","groovyPath","resolve","ktPath","isGroovy","existsSync","isKotlin","Error","getProjectBuildGradleFilePath","getProjectBuildGradleAsync","_x3","_getProjectBuildGradleAsync","getSettingsGradleFilePath","getSettingsGradleAsync","_x4","_getSettingsGradleAsync","getAppBuildGradleFilePath","getAppBuildGradleAsync","_x5","_getAppBuildGradleAsync","getProjectPathOrThrowAsync","_x6","_getProjectPathOrThrowAsync","projectPath","directoryExistsAsync","getAndroidManifestAsync","_x7","_getAndroidManifestAsync","getResourceFolderAsync","_x8","_getResourceFolderAsync","getResourceXMLPathAsync","_x9","_x10","_getResourceXMLPathAsync","_ref","_ref$kind","kind","resourcePath"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\android\\Paths.ts"],"sourcesContent":["import assert from 'assert';\nimport fs from 'fs';\nimport { sync as globSync } from 'glob';\nimport * as path from 'path';\n\nimport { UnexpectedError } from '../utils/errors';\nimport { directoryExistsAsync } from '../utils/modules';\nimport { ResourceKind } from './Resources';\n\nexport interface ProjectFile<L extends string = string> {\n  path: string;\n  language: L;\n  contents: string;\n}\n\nexport type ApplicationProjectFile = ProjectFile<'java' | 'kt'>;\nexport type GradleProjectFile = ProjectFile<'groovy' | 'kt'>;\n\nexport function getProjectFilePath(projectRoot: string, name: string): string {\n  const filePath = globSync(\n    path.join(projectRoot, `android/app/src/main/java/**/${name}.@(java|kt)`)\n  )[0];\n  assert(\n    filePath,\n    `Project file \"${name}\" does not exist in android project for root \"${projectRoot}\"`\n  );\n\n  return filePath;\n}\n\nfunction getLanguage(filePath: string): 'java' | 'groovy' | 'kt' {\n  const extension = path.extname(filePath);\n  switch (extension) {\n    case '.java':\n      return 'java';\n    case '.kts':\n    case '.kt':\n      return 'kt';\n    case '.groovy':\n    case '.gradle':\n      return 'groovy';\n    default:\n      throw new UnexpectedError(`Unexpected Android file extension: ${extension}`);\n  }\n}\n\nexport function getFileInfo(filePath: string) {\n  return {\n    path: path.normalize(filePath),\n    contents: fs.readFileSync(filePath, 'utf8'),\n    language: getLanguage(filePath) as any,\n  };\n}\n\nexport async function getMainApplicationAsync(\n  projectRoot: string\n): Promise<ApplicationProjectFile> {\n  const filePath = getProjectFilePath(projectRoot, 'MainApplication');\n  return getFileInfo(filePath);\n}\n\nexport async function getMainActivityAsync(projectRoot: string): Promise<ApplicationProjectFile> {\n  const filePath = getProjectFilePath(projectRoot, 'MainActivity');\n  return getFileInfo(filePath);\n}\n\nexport function getGradleFilePath(projectRoot: string, gradleName: string): string {\n  const groovyPath = path.resolve(projectRoot, `${gradleName}.gradle`);\n  const ktPath = path.resolve(projectRoot, `${gradleName}.gradle.kts`);\n\n  const isGroovy = fs.existsSync(groovyPath);\n  const isKotlin = !isGroovy && fs.existsSync(ktPath);\n\n  if (!isGroovy && !isKotlin) {\n    throw new Error(`Failed to find '${gradleName}.gradle' file for project: ${projectRoot}.`);\n  }\n  const filePath = isGroovy ? groovyPath : ktPath;\n  return filePath;\n}\n\nexport function getProjectBuildGradleFilePath(projectRoot: string): string {\n  return getGradleFilePath(path.join(projectRoot, 'android'), 'build');\n}\n\nexport async function getProjectBuildGradleAsync(projectRoot: string): Promise<GradleProjectFile> {\n  return getFileInfo(getProjectBuildGradleFilePath(projectRoot));\n}\n\nexport function getSettingsGradleFilePath(projectRoot: string): string {\n  return getGradleFilePath(path.join(projectRoot, 'android'), 'settings');\n}\n\nexport async function getSettingsGradleAsync(projectRoot: string): Promise<GradleProjectFile> {\n  return getFileInfo(getSettingsGradleFilePath(projectRoot));\n}\n\nexport function getAppBuildGradleFilePath(projectRoot: string): string {\n  return getGradleFilePath(path.join(projectRoot, 'android', 'app'), 'build');\n}\n\nexport async function getAppBuildGradleAsync(projectRoot: string): Promise<GradleProjectFile> {\n  return getFileInfo(getAppBuildGradleFilePath(projectRoot));\n}\n\nexport async function getProjectPathOrThrowAsync(projectRoot: string): Promise<string> {\n  const projectPath = path.join(projectRoot, 'android');\n  if (await directoryExistsAsync(projectPath)) {\n    return projectPath;\n  }\n  throw new Error(`Android project folder is missing in project: ${projectRoot}`);\n}\n\nexport async function getAndroidManifestAsync(projectRoot: string): Promise<string> {\n  const projectPath = await getProjectPathOrThrowAsync(projectRoot);\n  const filePath = path.join(projectPath, 'app/src/main/AndroidManifest.xml');\n  return filePath;\n}\n\nexport async function getResourceFolderAsync(projectRoot: string): Promise<string> {\n  const projectPath = await getProjectPathOrThrowAsync(projectRoot);\n  return path.join(projectPath, `app/src/main/res`);\n}\n\nexport async function getResourceXMLPathAsync(\n  projectRoot: string,\n  { kind = 'values', name }: { kind?: ResourceKind; name: 'colors' | 'strings' | 'styles' | string }\n): Promise<string> {\n  const resourcePath = await getResourceFolderAsync(projectRoot);\n\n  const filePath = path.join(resourcePath, `${kind}/${name}.xml`);\n  return filePath;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}