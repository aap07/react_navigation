{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineAccessor(e, r, n, t) { var c = { configurable: !0, enumerable: !0 }; return c[e] = t, Object.defineProperty(r, n, c); }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function _cliTools() {\n    return data;\n  };\n  return data;\n}\nvar _findDependencies = _interopRequireDefault(require(\"./findDependencies\"));\nvar _resolveReactNativePath = _interopRequireDefault(require(\"./resolveReactNativePath\"));\nvar _readConfigFromDisk = require(\"./readConfigFromDisk\");\nvar _assign = _interopRequireDefault(require(\"./assign\"));\nvar _merge = _interopRequireDefault(require(\"./merge\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getDependencyConfig(root, dependencyName, finalConfig, config, userConfig, isPlatform) {\n  return (0, _merge.default)({\n    root: root,\n    name: dependencyName,\n    platforms: Object.keys(finalConfig.platforms).reduce(function (dependency, platform) {\n      var platformConfig = finalConfig.platforms[platform];\n      dependency[platform] = isPlatform || !platformConfig ? null : platformConfig.dependencyConfig(root, config.dependency.platforms[platform]);\n      return dependency;\n    }, {})\n  }, userConfig.dependencies[dependencyName] || {});\n}\nfunction getReactNativeVersion(reactNativePath) {\n  try {\n    var semver = _cliTools().version.current(reactNativePath);\n    if (semver) {\n      return `${semver.major}.${semver.minor}`;\n    }\n  } catch (e) {\n    if (!(e instanceof _cliTools().UnknownProjectError)) {\n      throw e;\n    }\n  }\n  return 'unknown';\n}\nfunction loadConfig() {\n  var projectRoot = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _cliTools().findProjectRoot)();\n  var lazyProject;\n  var userConfig = (0, _readConfigFromDisk.readConfigFromDisk)(projectRoot);\n  var initialConfig = {\n    root: projectRoot,\n    get reactNativePath() {\n      return userConfig.reactNativePath ? _path().default.resolve(projectRoot, userConfig.reactNativePath) : (0, _resolveReactNativePath.default)(projectRoot);\n    },\n    get reactNativeVersion() {\n      return getReactNativeVersion(initialConfig.reactNativePath);\n    },\n    dependencies: userConfig.dependencies,\n    commands: userConfig.commands,\n    healthChecks: [],\n    platforms: userConfig.platforms,\n    get project() {\n      if (lazyProject) {\n        return lazyProject;\n      }\n      lazyProject = {};\n      for (var platform in finalConfig.platforms) {\n        var platformConfig = finalConfig.platforms[platform];\n        if (platformConfig) {\n          lazyProject[platform] = platformConfig.projectConfig(projectRoot, userConfig.project[platform] || {});\n        }\n      }\n      return lazyProject;\n    }\n  };\n  var finalConfig = Array.from(new Set([].concat(_toConsumableArray(Object.keys(userConfig.dependencies)), _toConsumableArray((0, _findDependencies.default)(projectRoot))))).reduce(function (acc, dependencyName) {\n    var localDependencyRoot = userConfig.dependencies[dependencyName] && userConfig.dependencies[dependencyName].root;\n    try {\n      var root = localDependencyRoot || (0, _cliTools().resolveNodeModuleDir)(projectRoot, dependencyName);\n      var config = (0, _readConfigFromDisk.readDependencyConfigFromDisk)(root, dependencyName);\n      var isPlatform = Object.keys(config.platforms).length > 0;\n      return (0, _assign.default)({}, acc, {\n        dependencies: (0, _assign.default)({}, acc.dependencies, _defineAccessor(\"get\", {}, dependencyName, function () {\n          return getDependencyConfig(root, dependencyName, finalConfig, config, userConfig, isPlatform);\n        })),\n        commands: [].concat(_toConsumableArray(acc.commands), _toConsumableArray(config.commands)),\n        platforms: _objectSpread(_objectSpread({}, acc.platforms), config.platforms),\n        healthChecks: [].concat(_toConsumableArray(acc.healthChecks), _toConsumableArray(config.healthChecks))\n      });\n    } catch (_unused) {\n      return acc;\n    }\n  }, initialConfig);\n  return finalConfig;\n}\nvar _default = loadConfig;\nexports.default = _default;","map":{"version":3,"names":["_defineProperty","require","_toConsumableArray","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","_defineAccessor","n","c","configurable","exports","value","default","_path","data","_interopRequireDefault","_cliTools","_findDependencies","_resolveReactNativePath","_readConfigFromDisk","_assign","_merge","obj","__esModule","getDependencyConfig","root","dependencyName","finalConfig","config","userConfig","isPlatform","name","platforms","reduce","dependency","platform","platformConfig","dependencyConfig","dependencies","getReactNativeVersion","reactNativePath","semver","version","current","major","minor","UnknownProjectError","loadConfig","projectRoot","undefined","findProjectRoot","lazyProject","readConfigFromDisk","initialConfig","resolve","reactNativeVersion","commands","healthChecks","project","projectConfig","Array","from","Set","concat","acc","localDependencyRoot","resolveNodeModuleDir","readDependencyConfigFromDisk","_unused","_default"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-config/build/loadConfig.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n  _path = function () {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function () {\n    return data;\n  };\n  return data;\n}\nvar _findDependencies = _interopRequireDefault(require(\"./findDependencies\"));\nvar _resolveReactNativePath = _interopRequireDefault(require(\"./resolveReactNativePath\"));\nvar _readConfigFromDisk = require(\"./readConfigFromDisk\");\nvar _assign = _interopRequireDefault(require(\"./assign\"));\nvar _merge = _interopRequireDefault(require(\"./merge\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction getDependencyConfig(root, dependencyName, finalConfig, config, userConfig, isPlatform) {\n  return (0, _merge.default)({\n    root,\n    name: dependencyName,\n    platforms: Object.keys(finalConfig.platforms).reduce((dependency, platform) => {\n      const platformConfig = finalConfig.platforms[platform];\n      dependency[platform] =\n      // Linking platforms is not supported\n      isPlatform || !platformConfig ? null : platformConfig.dependencyConfig(root, config.dependency.platforms[platform]);\n      return dependency;\n    }, {})\n  }, userConfig.dependencies[dependencyName] || {});\n}\n\n// Try our best to figure out what version of React Native we're running. This is\n// currently being used to get our deeplinks working, so it's only worried with\n// the major and minor version.\nfunction getReactNativeVersion(reactNativePath) {\n  try {\n    let semver = _cliTools().version.current(reactNativePath);\n    if (semver) {\n      // Retain only these version, since they correspond with our documentation.\n      return `${semver.major}.${semver.minor}`;\n    }\n  } catch (e) {\n    // If we don't seem to be in a well formed project, give up quietly.\n    if (!(e instanceof _cliTools().UnknownProjectError)) {\n      throw e;\n    }\n  }\n  return 'unknown';\n}\n\n/**\n * Loads CLI configuration\n */\nfunction loadConfig(projectRoot = (0, _cliTools().findProjectRoot)()) {\n  let lazyProject;\n  const userConfig = (0, _readConfigFromDisk.readConfigFromDisk)(projectRoot);\n  const initialConfig = {\n    root: projectRoot,\n    get reactNativePath() {\n      return userConfig.reactNativePath ? _path().default.resolve(projectRoot, userConfig.reactNativePath) : (0, _resolveReactNativePath.default)(projectRoot);\n    },\n    get reactNativeVersion() {\n      return getReactNativeVersion(initialConfig.reactNativePath);\n    },\n    dependencies: userConfig.dependencies,\n    commands: userConfig.commands,\n    healthChecks: [],\n    platforms: userConfig.platforms,\n    get project() {\n      if (lazyProject) {\n        return lazyProject;\n      }\n      lazyProject = {};\n      for (const platform in finalConfig.platforms) {\n        const platformConfig = finalConfig.platforms[platform];\n        if (platformConfig) {\n          lazyProject[platform] = platformConfig.projectConfig(projectRoot, userConfig.project[platform] || {});\n        }\n      }\n      return lazyProject;\n    }\n  };\n  const finalConfig = Array.from(new Set([...Object.keys(userConfig.dependencies), ...(0, _findDependencies.default)(projectRoot)])).reduce((acc, dependencyName) => {\n    const localDependencyRoot = userConfig.dependencies[dependencyName] && userConfig.dependencies[dependencyName].root;\n    try {\n      let root = localDependencyRoot || (0, _cliTools().resolveNodeModuleDir)(projectRoot, dependencyName);\n      let config = (0, _readConfigFromDisk.readDependencyConfigFromDisk)(root, dependencyName);\n      const isPlatform = Object.keys(config.platforms).length > 0;\n      return (0, _assign.default)({}, acc, {\n        dependencies: (0, _assign.default)({}, acc.dependencies, {\n          get [dependencyName]() {\n            return getDependencyConfig(root, dependencyName, finalConfig, config, userConfig, isPlatform);\n          }\n        }),\n        commands: [...acc.commands, ...config.commands],\n        platforms: {\n          ...acc.platforms,\n          ...config.platforms\n        },\n        healthChecks: [...acc.healthChecks, ...config.healthChecks]\n      });\n    } catch {\n      return acc;\n    }\n  }, initialConfig);\n  return finalConfig;\n}\nvar _default = loadConfig;\nexports.default = _default;\n\n//# sourceMappingURL=loadConfig.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}