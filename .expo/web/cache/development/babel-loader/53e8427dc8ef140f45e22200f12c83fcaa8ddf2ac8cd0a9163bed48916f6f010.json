{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _excluded = [\"requestId\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar NetworkResponseHandler = function () {\n  function NetworkResponseHandler() {\n    _classCallCheck(this, NetworkResponseHandler);\n    this.storage = new Map();\n  }\n  _createClass(NetworkResponseHandler, [{\n    key: \"onDeviceMessage\",\n    value: function onDeviceMessage(message) {\n      if (message.method === \"Expo(Network.receivedResponseBody)\") {\n        var _message$params = message.params,\n          requestId = _message$params.requestId,\n          requestInfo = _objectWithoutProperties(_message$params, _excluded);\n        this.storage.set(requestId, requestInfo);\n        return true;\n      }\n      return false;\n    }\n  }, {\n    key: \"onDebuggerMessage\",\n    value: function onDebuggerMessage(message, _ref) {\n      var socket = _ref.socket;\n      if (message.method === \"Network.getResponseBody\" && this.storage.has(message.params.requestId)) {\n        var response = {\n          id: message.id,\n          result: this.storage.get(message.params.requestId)\n        };\n        socket.send(JSON.stringify(response));\n        return true;\n      }\n      return false;\n    }\n  }]);\n  return NetworkResponseHandler;\n}();\nexports.NetworkResponseHandler = NetworkResponseHandler;","map":{"version":3,"names":["_objectWithoutProperties","require","_classCallCheck","_createClass","_excluded","NetworkResponseHandler","storage","Map","key","value","onDeviceMessage","message","method","_message$params","params","requestId","requestInfo","set","onDebuggerMessage","_ref","socket","has","response","id","result","get","send","JSON","stringify"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\metro\\inspector-proxy\\handlers\\NetworkResponse.ts"],"sourcesContent":["import type { Protocol } from 'devtools-protocol';\n\nimport { ExpoDebuggerInfo } from '../device';\nimport {\n  CdpMessage,\n  InspectorHandler,\n  DeviceRequest,\n  DebuggerRequest,\n  DebuggerResponse,\n  DeviceResponse,\n} from './types';\n\nexport class NetworkResponseHandler implements InspectorHandler {\n  /** All known responses, mapped by request id */\n  storage = new Map<string, DebuggerResponse<NetworkGetResponseBody>['result']>();\n\n  onDeviceMessage(message: DeviceRequest<NetworkReceivedResponseBody>) {\n    if (message.method === 'Expo(Network.receivedResponseBody)') {\n      const { requestId, ...requestInfo } = message.params;\n      this.storage.set(requestId, requestInfo);\n      return true;\n    }\n\n    return false;\n  }\n\n  onDebuggerMessage(\n    message: DebuggerRequest<NetworkGetResponseBody>,\n    { socket }: ExpoDebuggerInfo\n  ) {\n    if (\n      message.method === 'Network.getResponseBody' &&\n      this.storage.has(message.params.requestId)\n    ) {\n      const response: DeviceResponse<NetworkGetResponseBody> = {\n        id: message.id,\n        result: this.storage.get(message.params.requestId)!,\n      };\n\n      socket.send(JSON.stringify(response));\n      return true;\n    }\n\n    return false;\n  }\n}\n\n/** Custom message to transfer the response body data to the proxy */\nexport type NetworkReceivedResponseBody = CdpMessage<\n  'Expo(Network.receivedResponseBody)',\n  Protocol.Network.GetResponseBodyRequest & Protocol.Network.GetResponseBodyResponse,\n  never\n>;\n\n/** @see https://chromedevtools.github.io/devtools-protocol/1-2/Network/#method-getResponseBody */\nexport type NetworkGetResponseBody = CdpMessage<\n  'Network.getResponseBody',\n  Protocol.Network.GetResponseBodyRequest,\n  Protocol.Network.GetResponseBodyResponse\n>;\n"],"mappings":"AAAA;;AAAA,IAAAA,wBAAA,GAAAC,OAAA;AAAA,IAAAC,eAAA,GAAAD,OAAA;AAAA,IAAAE,YAAA,GAAAF,OAAA;AAAA,IAAAG,SAAA;;;;IAYaC,sBAAsB;EAAA,SAAAA,uBAAA;IAAAH,eAAA,OAAAG,sBAAA;IAAA,KAEjCC,OAAO,GAAG,IAAIC,GAAG,EAA8D;EAAA;EAAAJ,YAAA,CAAAE,sBAAA;IAAAG,GAAA;IAAAC,KAAA,EAE/E,SAAAC,gBAAgBC,OAAmD,EAAE;MACnE,IAAIA,OAAO,CAACC,MAAM,KAAK,oCAAoC,EAAE;QAC3D,IAAAC,eAAA,GAAsCF,OAAO,CAACG,MAAM;UAA5CC,SAAS,GAAAF,eAAA,CAATE,SAAS;UAAKC,WAAW,GAAAhB,wBAAA,CAAAa,eAAA,EAAAT,SAAA;QACjC,IAAI,CAACE,OAAO,CAACW,GAAG,CAACF,SAAS,EAAEC,WAAW,CAAC;QACxC,OAAO,IAAI;;MAGb,OAAO,KAAK;;EACb;IAAAR,GAAA;IAAAC,KAAA,EAED,SAAAS,kBACEP,OAAgD,EAAAQ,IAAA,EAEhD;MAAA,IADEC,MAAM,GAAAD,IAAA,CAANC,MAAM;MAER,IACET,OAAO,CAACC,MAAM,KAAK,yBAAyB,IAC5C,IAAI,CAACN,OAAO,CAACe,GAAG,CAACV,OAAO,CAACG,MAAM,CAACC,SAAS,CAAC,EAC1C;QACA,IAAMO,QAAQ,GAA2C;UACvDC,EAAE,EAAEZ,OAAO,CAACY,EAAE;UACdC,MAAM,EAAE,IAAI,CAAClB,OAAO,CAACmB,GAAG,CAACd,OAAO,CAACG,MAAM,CAACC,SAAS;SAClD;QAEDK,MAAM,CAACM,IAAI,CAACC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAAC,CAAC;QACrC,OAAO,IAAI;;MAGb,OAAO,KAAK;;EACb;EAAA,OAAAjB,sBAAA;AAAA;QAhCUA,sBAAsB,GAAtBA,sBAAsB"},"metadata":{},"sourceType":"script","externalDependencies":[]}