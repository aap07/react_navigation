{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _excluded = [\"CFBundleDisplayName\"],\n  _excluded2 = [\"CFBundleName\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getName = getName;\nexports.setDisplayName = setDisplayName;\nexports.setName = setName;\nexports.setProductName = setProductName;\nexports.withProductName = exports.withName = exports.withDisplayName = void 0;\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _Target() {\n  var data = require(\"./Target\");\n  _Target = function _Target() {\n    return data;\n  };\n  return data;\n}\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n  return data;\n}\nvar withDisplayName = (0, _iosPlugins().createInfoPlistPluginWithPropertyGuard)(setDisplayName, {\n  infoPlistProperty: 'CFBundleDisplayName',\n  expoConfigProperty: 'name'\n}, 'withDisplayName');\nexports.withDisplayName = withDisplayName;\nvar withName = (0, _iosPlugins().createInfoPlistPluginWithPropertyGuard)(setName, {\n  infoPlistProperty: 'CFBundleName',\n  expoConfigProperty: 'name'\n}, 'withName');\nexports.withName = withName;\nvar withProductName = function withProductName(config) {\n  return (0, _iosPlugins().withXcodeProject)(config, function (config) {\n    config.modResults = setProductName(config, config.modResults);\n    return config;\n  });\n};\nexports.withProductName = withProductName;\nfunction getName(config) {\n  return typeof config.name === 'string' ? config.name : null;\n}\nfunction setDisplayName(configOrName, _ref) {\n  var CFBundleDisplayName = _ref.CFBundleDisplayName,\n    infoPlist = _objectWithoutProperties(_ref, _excluded);\n  var name = null;\n  if (typeof configOrName === 'string') {\n    name = configOrName;\n  } else {\n    name = getName(configOrName);\n  }\n  if (!name) {\n    return infoPlist;\n  }\n  return _objectSpread(_objectSpread({}, infoPlist), {}, {\n    CFBundleDisplayName: name\n  });\n}\nfunction setName(config, _ref2) {\n  var CFBundleName = _ref2.CFBundleName,\n    infoPlist = _objectWithoutProperties(_ref2, _excluded2);\n  var name = getName(config);\n  if (!name) {\n    return infoPlist;\n  }\n  return _objectSpread(_objectSpread({}, infoPlist), {}, {\n    CFBundleName: name\n  });\n}\nfunction setProductName(config, project) {\n  var _getName;\n  var name = (0, _Xcodeproj().sanitizedName)((_getName = getName(config)) !== null && _getName !== void 0 ? _getName : '');\n  if (!name) {\n    return project;\n  }\n  var quotedName = ensureQuotes(name);\n  var _ref3 = (0, _Target().findFirstNativeTarget)(project),\n    _ref4 = _slicedToArray(_ref3, 2),\n    nativeTarget = _ref4[1];\n  (0, _Xcodeproj().getBuildConfigurationsForListId)(project, nativeTarget.buildConfigurationList).forEach(function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 2),\n      item = _ref6[1];\n    item.buildSettings.PRODUCT_NAME = quotedName;\n  });\n  return project;\n}\nvar ensureQuotes = function ensureQuotes(value) {\n  if (!value.match(/^['\"]/)) {\n    return `\"${value}\"`;\n  }\n  return value;\n};","map":{"version":3,"names":["_iosPlugins","data","require","_Target","_Xcodeproj","withDisplayName","createInfoPlistPluginWithPropertyGuard","setDisplayName","infoPlistProperty","expoConfigProperty","exports","withName","setName","withProductName","config","withXcodeProject","modResults","setProductName","getName","name","configOrName","_ref","CFBundleDisplayName","infoPlist","_objectWithoutProperties","_excluded","_objectSpread","_ref2","CFBundleName","_excluded2","project","_getName","sanitizedName","quotedName","ensureQuotes","_ref3","findFirstNativeTarget","_ref4","_slicedToArray","nativeTarget","getBuildConfigurationsForListId","buildConfigurationList","forEach","_ref5","_ref6","item","buildSettings","PRODUCT_NAME","value","match"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\ios\\Name.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport { XcodeProject } from 'xcode';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { createInfoPlistPluginWithPropertyGuard, withXcodeProject } from '../plugins/ios-plugins';\nimport { InfoPlist } from './IosConfig.types';\nimport { findFirstNativeTarget } from './Target';\nimport {\n  ConfigurationSectionEntry,\n  getBuildConfigurationsForListId,\n  sanitizedName,\n} from './utils/Xcodeproj';\n\nexport const withDisplayName = createInfoPlistPluginWithPropertyGuard(\n  setDisplayName,\n  {\n    infoPlistProperty: 'CFBundleDisplayName',\n    expoConfigProperty: 'name',\n  },\n  'withDisplayName'\n);\n\nexport const withName = createInfoPlistPluginWithPropertyGuard(\n  setName,\n  {\n    infoPlistProperty: 'CFBundleName',\n    expoConfigProperty: 'name',\n  },\n  'withName'\n);\n\n/** Set the PRODUCT_NAME variable in the xcproj file based on the app.json name property. */\nexport const withProductName: ConfigPlugin = (config) => {\n  return withXcodeProject(config, (config) => {\n    config.modResults = setProductName(config, config.modResults);\n    return config;\n  });\n};\n\nexport function getName(config: Pick<ExpoConfig, 'name'>) {\n  return typeof config.name === 'string' ? config.name : null;\n}\n\n/**\n * CFBundleDisplayName is used for most things: the name on the home screen, in\n * notifications, and others.\n */\nexport function setDisplayName(\n  configOrName: Pick<ExpoConfig, 'name'> | string,\n  { CFBundleDisplayName, ...infoPlist }: InfoPlist\n): InfoPlist {\n  let name: string | null = null;\n  if (typeof configOrName === 'string') {\n    name = configOrName;\n  } else {\n    name = getName(configOrName);\n  }\n\n  if (!name) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    CFBundleDisplayName: name,\n  };\n}\n\n/**\n * CFBundleName is recommended to be 16 chars or less and is used in lists, eg:\n * sometimes on the App Store\n */\nexport function setName(\n  config: Pick<ExpoConfig, 'name'>,\n  { CFBundleName, ...infoPlist }: InfoPlist\n): InfoPlist {\n  const name = getName(config);\n\n  if (!name) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    CFBundleName: name,\n  };\n}\n\nexport function setProductName(\n  config: Pick<ExpoConfig, 'name'>,\n  project: XcodeProject\n): XcodeProject {\n  const name = sanitizedName(getName(config) ?? '');\n\n  if (!name) {\n    return project;\n  }\n  const quotedName = ensureQuotes(name);\n\n  const [, nativeTarget] = findFirstNativeTarget(project);\n\n  getBuildConfigurationsForListId(project, nativeTarget.buildConfigurationList).forEach(\n    ([, item]: ConfigurationSectionEntry) => {\n      item.buildSettings.PRODUCT_NAME = quotedName;\n    }\n  );\n\n  return project;\n}\n\nconst ensureQuotes = (value: string) => {\n  if (!value.match(/^['\"]/)) {\n    return `\"${value}\"`;\n  }\n  return value;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}