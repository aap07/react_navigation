{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.startServerInNewWindow = startServerInNewWindow;\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n  _execa = function _execa() {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function _cliTools() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction startServerInNewWindow(port, terminal, projectRoot, reactNativePath) {\n  var isWindows = /^win/.test(process.platform);\n  var scriptFile = isWindows ? 'launchPackager.bat' : 'launchPackager.command';\n  var packagerEnvFilename = isWindows ? '.packager.bat' : '.packager.env';\n  var packagerEnvFileExportContent = isWindows ? `set RCT_METRO_PORT=${port}\\nset PROJECT_ROOT=${projectRoot}\\nset REACT_NATIVE_PATH=${reactNativePath}` : `export RCT_METRO_PORT=${port}\\nexport PROJECT_ROOT=${projectRoot}\\nexport REACT_NATIVE_PATH=${reactNativePath}`;\n  var nodeModulesPath = (0, _cliTools().resolveNodeModuleDir)(projectRoot, '.bin');\n  var cliPluginMetroPath = _path().default.join(_path().default.dirname(require.resolve('@react-native-community/cli-plugin-metro/package.json')), 'build');\n  var packagerEnvFile = _path().default.join(nodeModulesPath, `${packagerEnvFilename}`);\n  var launchPackagerScript = _path().default.join(nodeModulesPath, scriptFile);\n  var procConfig = {\n    cwd: _path().default.dirname(packagerEnvFile)\n  };\n  _fs().default.writeFileSync(packagerEnvFile, packagerEnvFileExportContent, {\n    encoding: 'utf8',\n    flag: 'w'\n  });\n  try {\n    if (isWindows) {\n      _fs().default.copyFileSync(_path().default.join(cliPluginMetroPath, 'launchPackager.bat'), _path().default.join(nodeModulesPath, 'launchPackager.bat'));\n    } else {\n      _fs().default.copyFileSync(_path().default.join(cliPluginMetroPath, 'launchPackager.command'), _path().default.join(nodeModulesPath, 'launchPackager.command'));\n    }\n  } catch (error) {\n    return new (_cliTools().CLIError)(`Couldn't copy the script for running bundler. Please check if the \"${scriptFile}\" file exists in the \"node_modules/@react-native-community/cli-plugin-metro\" folder and try again.`, error);\n  }\n  if (process.platform === 'darwin') {\n    try {\n      return _execa().default.sync('open', ['-a', terminal, launchPackagerScript], procConfig);\n    } catch (error) {\n      return _execa().default.sync('open', [launchPackagerScript], procConfig);\n    }\n  }\n  if (process.platform === 'linux') {\n    try {\n      return _execa().default.sync(terminal, ['-e', `sh ${launchPackagerScript}`], _objectSpread(_objectSpread({}, procConfig), {}, {\n        detached: true\n      }));\n    } catch (error) {\n      return _execa().default.sync('sh', [launchPackagerScript], procConfig);\n    }\n  }\n  if (isWindows) {\n    return (0, _execa().default)('cmd.exe', ['/C', launchPackagerScript], _objectSpread(_objectSpread({}, procConfig), {}, {\n      detached: true,\n      stdio: 'ignore'\n    }));\n  }\n  _cliTools().logger.error(`Cannot start the packager. Unknown platform ${process.platform}`);\n  return;\n}","map":{"version":3,"names":["_defineProperty","require","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","exports","value","startServerInNewWindow","_path","data","_interopRequireDefault","_fs","_execa","_cliTools","obj","__esModule","default","port","terminal","projectRoot","reactNativePath","isWindows","test","process","platform","scriptFile","packagerEnvFilename","packagerEnvFileExportContent","nodeModulesPath","resolveNodeModuleDir","cliPluginMetroPath","join","dirname","resolve","packagerEnvFile","launchPackagerScript","procConfig","cwd","writeFileSync","encoding","flag","copyFileSync","error","CLIError","sync","detached","stdio","logger"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-platform-android/build/commands/buildAndroid/startServerInNewWindow.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.startServerInNewWindow = startServerInNewWindow;\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n  _path = function () {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n  _fs = function () {\n    return data;\n  };\n  return data;\n}\nfunction _execa() {\n  const data = _interopRequireDefault(require(\"execa\"));\n  _execa = function () {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function () {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction startServerInNewWindow(port, terminal, projectRoot, reactNativePath) {\n  /**\n   * Set up OS-specific filenames and commands\n   */\n  const isWindows = /^win/.test(process.platform);\n  const scriptFile = isWindows ? 'launchPackager.bat' : 'launchPackager.command';\n  const packagerEnvFilename = isWindows ? '.packager.bat' : '.packager.env';\n  const packagerEnvFileExportContent = isWindows ? `set RCT_METRO_PORT=${port}\\nset PROJECT_ROOT=${projectRoot}\\nset REACT_NATIVE_PATH=${reactNativePath}` : `export RCT_METRO_PORT=${port}\\nexport PROJECT_ROOT=${projectRoot}\\nexport REACT_NATIVE_PATH=${reactNativePath}`;\n  const nodeModulesPath = (0, _cliTools().resolveNodeModuleDir)(projectRoot, '.bin');\n  const cliPluginMetroPath = _path().default.join(_path().default.dirname(require.resolve('@react-native-community/cli-plugin-metro/package.json')), 'build');\n\n  /**\n   * Set up the `.packager.(env|bat)` file to ensure the packager starts on the right port and in right directory.\n   */\n  const packagerEnvFile = _path().default.join(nodeModulesPath, `${packagerEnvFilename}`);\n\n  /**\n   * Set up the `launchPackager.(command|bat)` file.\n   * It lives next to `.packager.(bat|env)`\n   */\n  const launchPackagerScript = _path().default.join(nodeModulesPath, scriptFile);\n  const procConfig = {\n    cwd: _path().default.dirname(packagerEnvFile)\n  };\n\n  /**\n   * Ensure we overwrite file by passing the `w` flag\n   */\n  _fs().default.writeFileSync(packagerEnvFile, packagerEnvFileExportContent, {\n    encoding: 'utf8',\n    flag: 'w'\n  });\n\n  /**\n   * Copy files into `node_modules/.bin`.\n   */\n\n  try {\n    if (isWindows) {\n      _fs().default.copyFileSync(_path().default.join(cliPluginMetroPath, 'launchPackager.bat'), _path().default.join(nodeModulesPath, 'launchPackager.bat'));\n    } else {\n      _fs().default.copyFileSync(_path().default.join(cliPluginMetroPath, 'launchPackager.command'), _path().default.join(nodeModulesPath, 'launchPackager.command'));\n    }\n  } catch (error) {\n    return new (_cliTools().CLIError)(`Couldn't copy the script for running bundler. Please check if the \"${scriptFile}\" file exists in the \"node_modules/@react-native-community/cli-plugin-metro\" folder and try again.`, error);\n  }\n  if (process.platform === 'darwin') {\n    try {\n      return _execa().default.sync('open', ['-a', terminal, launchPackagerScript], procConfig);\n    } catch (error) {\n      return _execa().default.sync('open', [launchPackagerScript], procConfig);\n    }\n  }\n  if (process.platform === 'linux') {\n    try {\n      return _execa().default.sync(terminal, ['-e', `sh ${launchPackagerScript}`], {\n        ...procConfig,\n        detached: true\n      });\n    } catch (error) {\n      // By default, the child shell process will be attached to the parent\n      return _execa().default.sync('sh', [launchPackagerScript], procConfig);\n    }\n  }\n  if (isWindows) {\n    // Awaiting this causes the CLI to hang indefinitely, so this must execute without await.\n    return (0, _execa().default)('cmd.exe', ['/C', launchPackagerScript], {\n      ...procConfig,\n      detached: true,\n      stdio: 'ignore'\n    });\n  }\n  _cliTools().logger.error(`Cannot start the packager. Unknown platform ${process.platform}`);\n  return;\n}\n\n//# sourceMappingURL=startServerInNewWindow.ts.map"],"mappings":"AAAA,YAAY;;AAAC,IAAAA,eAAA,GAAAC,OAAA;AAAA,SAAAC,QAAAC,CAAA,EAAAC,CAAA,QAAAC,CAAA,GAAAC,MAAA,CAAAC,IAAA,CAAAJ,CAAA,OAAAG,MAAA,CAAAE,qBAAA,QAAAC,CAAA,GAAAH,MAAA,CAAAE,qBAAA,CAAAL,CAAA,GAAAC,CAAA,KAAAK,CAAA,GAAAA,CAAA,CAAAC,MAAA,WAAAN,CAAA,WAAAE,MAAA,CAAAK,wBAAA,CAAAR,CAAA,EAAAC,CAAA,EAAAQ,UAAA,OAAAP,CAAA,CAAAQ,IAAA,CAAAC,KAAA,CAAAT,CAAA,EAAAI,CAAA,YAAAJ,CAAA;AAAA,SAAAU,cAAAZ,CAAA,aAAAC,CAAA,MAAAA,CAAA,GAAAY,SAAA,CAAAC,MAAA,EAAAb,CAAA,UAAAC,CAAA,WAAAW,SAAA,CAAAZ,CAAA,IAAAY,SAAA,CAAAZ,CAAA,QAAAA,CAAA,OAAAF,OAAA,CAAAI,MAAA,CAAAD,CAAA,OAAAa,OAAA,WAAAd,CAAA,IAAAJ,eAAA,CAAAG,CAAA,EAAAC,CAAA,EAAAC,CAAA,CAAAD,CAAA,SAAAE,MAAA,CAAAa,yBAAA,GAAAb,MAAA,CAAAc,gBAAA,CAAAjB,CAAA,EAAAG,MAAA,CAAAa,yBAAA,CAAAd,CAAA,KAAAH,OAAA,CAAAI,MAAA,CAAAD,CAAA,GAAAa,OAAA,WAAAd,CAAA,IAAAE,MAAA,CAAAe,cAAA,CAAAlB,CAAA,EAAAC,CAAA,EAAAE,MAAA,CAAAK,wBAAA,CAAAN,CAAA,EAAAD,CAAA,iBAAAD,CAAA;AAEbG,MAAM,CAACe,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,sBAAsB,GAAGA,sBAAsB;AACvD,SAASC,KAAKA,CAAA,EAAG;EACf,IAAMC,IAAI,GAAGC,sBAAsB,CAAC1B,OAAO,CAAC,MAAM,CAAC,CAAC;EACpDwB,KAAK,GAAG,SAAAA,MAAA,EAAY;IAClB,OAAOC,IAAI;EACb,CAAC;EACD,OAAOA,IAAI;AACb;AACA,SAASE,GAAGA,CAAA,EAAG;EACb,IAAMF,IAAI,GAAGC,sBAAsB,CAAC1B,OAAO,CAAC,IAAI,CAAC,CAAC;EAClD2B,GAAG,GAAG,SAAAA,IAAA,EAAY;IAChB,OAAOF,IAAI;EACb,CAAC;EACD,OAAOA,IAAI;AACb;AACA,SAASG,MAAMA,CAAA,EAAG;EAChB,IAAMH,IAAI,GAAGC,sBAAsB,CAAC1B,OAAO,CAAC,OAAO,CAAC,CAAC;EACrD4B,MAAM,GAAG,SAAAA,OAAA,EAAY;IACnB,OAAOH,IAAI;EACb,CAAC;EACD,OAAOA,IAAI;AACb;AACA,SAASI,SAASA,CAAA,EAAG;EACnB,IAAMJ,IAAI,GAAGzB,OAAO,CAAC,mCAAmC,CAAC;EACzD6B,SAAS,GAAG,SAAAA,UAAA,EAAY;IACtB,OAAOJ,IAAI;EACb,CAAC;EACD,OAAOA,IAAI;AACb;AACA,SAASC,sBAAsBA,CAACI,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEE,OAAO,EAAEF;EAAI,CAAC;AAAE;AAC9F,SAASP,sBAAsBA,CAACU,IAAI,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,eAAe,EAAE;EAI5E,IAAMC,SAAS,GAAG,MAAM,CAACC,IAAI,CAACC,OAAO,CAACC,QAAQ,CAAC;EAC/C,IAAMC,UAAU,GAAGJ,SAAS,GAAG,oBAAoB,GAAG,wBAAwB;EAC9E,IAAMK,mBAAmB,GAAGL,SAAS,GAAG,eAAe,GAAG,eAAe;EACzE,IAAMM,4BAA4B,GAAGN,SAAS,GAAI,sBAAqBJ,IAAK,sBAAqBE,WAAY,2BAA0BC,eAAgB,EAAC,GAAI,yBAAwBH,IAAK,yBAAwBE,WAAY,8BAA6BC,eAAgB,EAAC;EAC3Q,IAAMQ,eAAe,GAAG,CAAC,CAAC,EAAEf,SAAS,CAAC,CAAC,CAACgB,oBAAoB,EAAEV,WAAW,EAAE,MAAM,CAAC;EAClF,IAAMW,kBAAkB,GAAGtB,KAAK,CAAC,CAAC,CAACQ,OAAO,CAACe,IAAI,CAACvB,KAAK,CAAC,CAAC,CAACQ,OAAO,CAACgB,OAAO,CAAChD,OAAO,CAACiD,OAAO,CAAC,uDAAuD,CAAC,CAAC,EAAE,OAAO,CAAC;EAK3J,IAAMC,eAAe,GAAG1B,KAAK,CAAC,CAAC,CAACQ,OAAO,CAACe,IAAI,CAACH,eAAe,EAAG,GAAEF,mBAAoB,EAAC,CAAC;EAMvF,IAAMS,oBAAoB,GAAG3B,KAAK,CAAC,CAAC,CAACQ,OAAO,CAACe,IAAI,CAACH,eAAe,EAAEH,UAAU,CAAC;EAC9E,IAAMW,UAAU,GAAG;IACjBC,GAAG,EAAE7B,KAAK,CAAC,CAAC,CAACQ,OAAO,CAACgB,OAAO,CAACE,eAAe;EAC9C,CAAC;EAKDvB,GAAG,CAAC,CAAC,CAACK,OAAO,CAACsB,aAAa,CAACJ,eAAe,EAAEP,4BAA4B,EAAE;IACzEY,QAAQ,EAAE,MAAM;IAChBC,IAAI,EAAE;EACR,CAAC,CAAC;EAMF,IAAI;IACF,IAAInB,SAAS,EAAE;MACbV,GAAG,CAAC,CAAC,CAACK,OAAO,CAACyB,YAAY,CAACjC,KAAK,CAAC,CAAC,CAACQ,OAAO,CAACe,IAAI,CAACD,kBAAkB,EAAE,oBAAoB,CAAC,EAAEtB,KAAK,CAAC,CAAC,CAACQ,OAAO,CAACe,IAAI,CAACH,eAAe,EAAE,oBAAoB,CAAC,CAAC;IACzJ,CAAC,MAAM;MACLjB,GAAG,CAAC,CAAC,CAACK,OAAO,CAACyB,YAAY,CAACjC,KAAK,CAAC,CAAC,CAACQ,OAAO,CAACe,IAAI,CAACD,kBAAkB,EAAE,wBAAwB,CAAC,EAAEtB,KAAK,CAAC,CAAC,CAACQ,OAAO,CAACe,IAAI,CAACH,eAAe,EAAE,wBAAwB,CAAC,CAAC;IACjK;EACF,CAAC,CAAC,OAAOc,KAAK,EAAE;IACd,OAAO,KAAK7B,SAAS,CAAC,CAAC,CAAC8B,QAAQ,EAAG,sEAAqElB,UAAW,oGAAmG,EAAEiB,KAAK,CAAC;EAChO;EACA,IAAInB,OAAO,CAACC,QAAQ,KAAK,QAAQ,EAAE;IACjC,IAAI;MACF,OAAOZ,MAAM,CAAC,CAAC,CAACI,OAAO,CAAC4B,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE1B,QAAQ,EAAEiB,oBAAoB,CAAC,EAAEC,UAAU,CAAC;IAC1F,CAAC,CAAC,OAAOM,KAAK,EAAE;MACd,OAAO9B,MAAM,CAAC,CAAC,CAACI,OAAO,CAAC4B,IAAI,CAAC,MAAM,EAAE,CAACT,oBAAoB,CAAC,EAAEC,UAAU,CAAC;IAC1E;EACF;EACA,IAAIb,OAAO,CAACC,QAAQ,KAAK,OAAO,EAAE;IAChC,IAAI;MACF,OAAOZ,MAAM,CAAC,CAAC,CAACI,OAAO,CAAC4B,IAAI,CAAC1B,QAAQ,EAAE,CAAC,IAAI,EAAG,MAAKiB,oBAAqB,EAAC,CAAC,EAAArC,aAAA,CAAAA,aAAA,KACtEsC,UAAU;QACbS,QAAQ,EAAE;MAAI,EACf,CAAC;IACJ,CAAC,CAAC,OAAOH,KAAK,EAAE;MAEd,OAAO9B,MAAM,CAAC,CAAC,CAACI,OAAO,CAAC4B,IAAI,CAAC,IAAI,EAAE,CAACT,oBAAoB,CAAC,EAAEC,UAAU,CAAC;IACxE;EACF;EACA,IAAIf,SAAS,EAAE;IAEb,OAAO,CAAC,CAAC,EAAET,MAAM,CAAC,CAAC,CAACI,OAAO,EAAE,SAAS,EAAE,CAAC,IAAI,EAAEmB,oBAAoB,CAAC,EAAArC,aAAA,CAAAA,aAAA,KAC/DsC,UAAU;MACbS,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE;IAAQ,EAChB,CAAC;EACJ;EACAjC,SAAS,CAAC,CAAC,CAACkC,MAAM,CAACL,KAAK,CAAE,+CAA8CnB,OAAO,CAACC,QAAS,EAAC,CAAC;EAC3F;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}