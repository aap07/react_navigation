{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport commander from 'commander';\nimport { patchReactImportsAsync } from \"./ReactImportsPatcher\";\nimport { findModulesAsync, resolveModulesAsync, verifySearchResults, generatePackageListAsync, mergeLinkingOptionsAsync } from \"./autolinking\";\nimport { resolveExtraDependenciesAsync } from \"./autolinking/extraDependencies\";\nfunction registerSearchCommand(commandName, fn) {\n  return commander.command(`${commandName} [paths...]`).option('-i, --ignore-paths <ignorePaths...>', 'Paths to ignore when looking up for modules.', function (value, previous) {\n    return (previous != null ? previous : []).concat(value);\n  }).option('-e, --exclude <exclude...>', 'Package names to exclude when looking up for modules.', function (value, previous) {\n    return (previous != null ? previous : []).concat(value);\n  }).option('-p, --platform [platform]', 'The platform that the resulting modules must support. Available options: \"ios\", \"android\"', 'ios').option('--silent', 'Silence resolution warnings').action(function () {\n    var _ref = _asyncToGenerator(function* (searchPaths, providedOptions) {\n      var options = yield mergeLinkingOptionsAsync(_objectSpread(_objectSpread({}, providedOptions), {}, {\n        searchPaths: searchPaths\n      }));\n      var searchResults = yield findModulesAsync(options);\n      return yield fn(searchResults, options);\n    });\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n}\nfunction registerResolveCommand(commandName, fn) {\n  return registerSearchCommand(commandName, fn);\n}\nfunction registerPatchReactImportsCommand() {\n  return commander.command('patch-react-imports [paths...]').requiredOption('--pods-root <podsRoot>', 'The path to `Pods` directory').option('--dry-run', 'Only list files without writing changes to the file system').action(patchReactImportsAsync);\n}\nmodule.exports = function () {\n  var _ref2 = _asyncToGenerator(function* (args) {\n    registerSearchCommand('search', function () {\n      var _ref3 = _asyncToGenerator(function* (results, options) {\n        if (options.json) {\n          console.log(JSON.stringify(results));\n        } else {\n          console.log(require('util').inspect(results, false, null, true));\n        }\n      });\n      return function (_x4, _x5) {\n        return _ref3.apply(this, arguments);\n      };\n    }()).option('-j, --json', 'Output results in the plain JSON format.', function () {\n      return true;\n    }, false);\n    registerSearchCommand('verify', function (results) {\n      var numberOfDuplicates = verifySearchResults(results);\n      if (!numberOfDuplicates) {\n        console.log('✅ Everything is fine!');\n      }\n    });\n    registerResolveCommand('resolve', function () {\n      var _ref4 = _asyncToGenerator(function* (results, options) {\n        var modules = yield resolveModulesAsync(results, options);\n        var extraDependencies = yield resolveExtraDependenciesAsync();\n        if (options.json) {\n          console.log(JSON.stringify({\n            extraDependencies: extraDependencies,\n            modules: modules\n          }));\n        } else {\n          console.log(require('util').inspect({\n            extraDependencies: extraDependencies,\n            modules: modules\n          }, false, null, true));\n        }\n      });\n      return function (_x6, _x7) {\n        return _ref4.apply(this, arguments);\n      };\n    }()).option('-j, --json', 'Output results in the plain JSON format.', function () {\n      return true;\n    }, false);\n    registerResolveCommand('generate-package-list', function () {\n      var _ref5 = _asyncToGenerator(function* (results, options) {\n        var modules = options.empty ? [] : yield resolveModulesAsync(results, options);\n        generatePackageListAsync(modules, options);\n      });\n      return function (_x8, _x9) {\n        return _ref5.apply(this, arguments);\n      };\n    }()).option('-t, --target <path>', 'Path to the target file, where the package list should be written to.').option('-n, --namespace <namespace>', 'Java package name under which the package list should be placed.').option('--empty', 'Whether to only generate an empty list. Might be used when the user opts-out of autolinking.', false);\n    registerPatchReactImportsCommand();\n    yield commander.version(require('expo-modules-autolinking/package.json').version).description('CLI command that searches for Expo modules to autolink them.').parseAsync(args, {\n      from: 'user'\n    });\n  });\n  return function (_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["commander","patchReactImportsAsync","findModulesAsync","resolveModulesAsync","verifySearchResults","generatePackageListAsync","mergeLinkingOptionsAsync","resolveExtraDependenciesAsync","registerSearchCommand","commandName","fn","command","option","value","previous","concat","action","_ref","_asyncToGenerator","searchPaths","providedOptions","options","_objectSpread","searchResults","_x","_x2","apply","arguments","registerResolveCommand","registerPatchReactImportsCommand","requiredOption","module","exports","_ref2","args","_ref3","results","json","console","log","JSON","stringify","require","inspect","_x4","_x5","numberOfDuplicates","_ref4","modules","extraDependencies","_x6","_x7","_ref5","empty","_x8","_x9","version","description","parseAsync","from","_x3"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/expo-modules-autolinking/src/index.ts"],"sourcesContent":["import commander from 'commander';\n\nimport { patchReactImportsAsync } from './ReactImportsPatcher';\nimport {\n  findModulesAsync,\n  resolveModulesAsync,\n  verifySearchResults,\n  generatePackageListAsync,\n  mergeLinkingOptionsAsync,\n} from './autolinking';\nimport { resolveExtraDependenciesAsync } from './autolinking/extraDependencies';\nimport { GenerateOptions, ResolveOptions, SearchOptions, SearchResults } from './types';\n\n/**\n * Registers a command that only searches for available expo modules.\n */\nfunction registerSearchCommand<OptionsType extends SearchOptions>(\n  commandName: string,\n  fn: (search: SearchResults, options: OptionsType) => any\n) {\n  return commander\n    .command(`${commandName} [paths...]`)\n    .option<string[] | null>(\n      '-i, --ignore-paths <ignorePaths...>',\n      'Paths to ignore when looking up for modules.',\n      (value, previous) => (previous ?? []).concat(value)\n    )\n    .option<string[] | null>(\n      '-e, --exclude <exclude...>',\n      'Package names to exclude when looking up for modules.',\n      (value, previous) => (previous ?? []).concat(value)\n    )\n    .option(\n      '-p, --platform [platform]',\n      'The platform that the resulting modules must support. Available options: \"ios\", \"android\"',\n      'ios'\n    )\n    .option('--silent', 'Silence resolution warnings')\n    .action(async (searchPaths, providedOptions) => {\n      const options = await mergeLinkingOptionsAsync<OptionsType>({\n        ...providedOptions,\n        searchPaths,\n      });\n      const searchResults = await findModulesAsync(options);\n      return await fn(searchResults, options);\n    });\n}\n\n/**\n * Registers a command that searches for modules and then resolves them for specific platform.\n */\nfunction registerResolveCommand<OptionsType extends ResolveOptions>(\n  commandName: string,\n  fn: (search: SearchResults, options: OptionsType) => any\n) {\n  return registerSearchCommand<OptionsType>(commandName, fn);\n}\n\n// Register for `patch-react-imports` command\nfunction registerPatchReactImportsCommand() {\n  return commander\n    .command('patch-react-imports [paths...]')\n    .requiredOption('--pods-root <podsRoot>', 'The path to `Pods` directory')\n    .option('--dry-run', 'Only list files without writing changes to the file system')\n    .action(patchReactImportsAsync);\n}\n\nmodule.exports = async function (args: string[]) {\n  // Searches for available expo modules.\n  registerSearchCommand<SearchOptions & { json?: boolean }>('search', async (results, options) => {\n    if (options.json) {\n      console.log(JSON.stringify(results));\n    } else {\n      console.log(require('util').inspect(results, false, null, true));\n    }\n  }).option<boolean>('-j, --json', 'Output results in the plain JSON format.', () => true, false);\n\n  // Checks whether there are no resolving issues in the current setup.\n  registerSearchCommand('verify', (results) => {\n    const numberOfDuplicates = verifySearchResults(results);\n    if (!numberOfDuplicates) {\n      console.log('✅ Everything is fine!');\n    }\n  });\n\n  // Searches for available expo modules and resolves the results for given platform.\n  registerResolveCommand('resolve', async (results, options) => {\n    const modules = await resolveModulesAsync(results, options);\n    const extraDependencies = await resolveExtraDependenciesAsync();\n\n    if (options.json) {\n      console.log(JSON.stringify({ extraDependencies, modules }));\n    } else {\n      console.log(require('util').inspect({ extraDependencies, modules }, false, null, true));\n    }\n  }).option<boolean>('-j, --json', 'Output results in the plain JSON format.', () => true, false);\n\n  // Generates a source file listing all packages to link.\n  registerResolveCommand<GenerateOptions>('generate-package-list', async (results, options) => {\n    const modules = options.empty ? [] : await resolveModulesAsync(results, options);\n    generatePackageListAsync(modules, options);\n  })\n    .option(\n      '-t, --target <path>',\n      'Path to the target file, where the package list should be written to.'\n    )\n    .option(\n      '-n, --namespace <namespace>',\n      'Java package name under which the package list should be placed.'\n    )\n    .option(\n      '--empty',\n      'Whether to only generate an empty list. Might be used when the user opts-out of autolinking.',\n      false\n    );\n\n  registerPatchReactImportsCommand();\n\n  await commander\n    .version(require('expo-modules-autolinking/package.json').version)\n    .description('CLI command that searches for Expo modules to autolink them.')\n    .parseAsync(args, { from: 'user' });\n};\n"],"mappings":";;;;AAAA,OAAOA,SAAS,MAAM,WAAW;AAEjC,SAASC,sBAAsB;AAC/B,SACEC,gBAAgB,EAChBC,mBAAmB,EACnBC,mBAAmB,EACnBC,wBAAwB,EACxBC,wBAAwB;AAE1B,SAASC,6BAA6B;AAMtC,SAASC,qBAAqBA,CAC5BC,WAAmB,EACnBC,EAAwD,EACxD;EACA,OAAOV,SAAS,CACbW,OAAO,CAAE,GAAEF,WAAY,aAAY,CAAC,CACpCG,MAAM,CACL,qCAAqC,EACrC,8CAA8C,EAC9C,UAACC,KAAK,EAAEC,QAAQ;IAAA,OAAK,CAACA,QAAQ,WAARA,QAAQ,GAAI,EAAE,EAAEC,MAAM,CAACF,KAAK,CAAC;EAAA,CACrD,CAAC,CACAD,MAAM,CACL,4BAA4B,EAC5B,uDAAuD,EACvD,UAACC,KAAK,EAAEC,QAAQ;IAAA,OAAK,CAACA,QAAQ,WAARA,QAAQ,GAAI,EAAE,EAAEC,MAAM,CAACF,KAAK,CAAC;EAAA,CACrD,CAAC,CACAD,MAAM,CACL,2BAA2B,EAC3B,2FAA2F,EAC3F,KACF,CAAC,CACAA,MAAM,CAAC,UAAU,EAAE,6BAA6B,CAAC,CACjDI,MAAM;IAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAC,WAAOC,WAAW,EAAEC,eAAe,EAAK;MAC9C,IAAMC,OAAO,SAASf,wBAAwB,CAAAgB,aAAA,CAAAA,aAAA,KACzCF,eAAe;QAClBD,WAAW,EAAXA;MAAW,EACZ,CAAC;MACF,IAAMI,aAAa,SAASrB,gBAAgB,CAACmB,OAAO,CAAC;MACrD,aAAaX,EAAE,CAACa,aAAa,EAAEF,OAAO,CAAC;IACzC,CAAC;IAAA,iBAAAG,EAAA,EAAAC,GAAA;MAAA,OAAAR,IAAA,CAAAS,KAAA,OAAAC,SAAA;IAAA;EAAA,IAAC;AACN;AAKA,SAASC,sBAAsBA,CAC7BnB,WAAmB,EACnBC,EAAwD,EACxD;EACA,OAAOF,qBAAqB,CAAcC,WAAW,EAAEC,EAAE,CAAC;AAC5D;AAGA,SAASmB,gCAAgCA,CAAA,EAAG;EAC1C,OAAO7B,SAAS,CACbW,OAAO,CAAC,gCAAgC,CAAC,CACzCmB,cAAc,CAAC,wBAAwB,EAAE,8BAA8B,CAAC,CACxElB,MAAM,CAAC,WAAW,EAAE,4DAA4D,CAAC,CACjFI,MAAM,CAACf,sBAAsB,CAAC;AACnC;AAEA8B,MAAM,CAACC,OAAO;EAAA,IAAAC,KAAA,GAAAf,iBAAA,CAAG,WAAgBgB,IAAc,EAAE;IAE/C1B,qBAAqB,CAAqC,QAAQ;MAAA,IAAA2B,KAAA,GAAAjB,iBAAA,CAAE,WAAOkB,OAAO,EAAEf,OAAO,EAAK;QAC9F,IAAIA,OAAO,CAACgB,IAAI,EAAE;UAChBC,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAACL,OAAO,CAAC,CAAC;QACtC,CAAC,MAAM;UACLE,OAAO,CAACC,GAAG,CAACG,OAAO,CAAC,MAAM,CAAC,CAACC,OAAO,CAACP,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAClE;MACF,CAAC;MAAA,iBAAAQ,GAAA,EAAAC,GAAA;QAAA,OAAAV,KAAA,CAAAT,KAAA,OAAAC,SAAA;MAAA;IAAA,IAAC,CAACf,MAAM,CAAU,YAAY,EAAE,0CAA0C,EAAE;MAAA,OAAM,IAAI;IAAA,GAAE,KAAK,CAAC;IAG/FJ,qBAAqB,CAAC,QAAQ,EAAE,UAAC4B,OAAO,EAAK;MAC3C,IAAMU,kBAAkB,GAAG1C,mBAAmB,CAACgC,OAAO,CAAC;MACvD,IAAI,CAACU,kBAAkB,EAAE;QACvBR,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACtC;IACF,CAAC,CAAC;IAGFX,sBAAsB,CAAC,SAAS;MAAA,IAAAmB,KAAA,GAAA7B,iBAAA,CAAE,WAAOkB,OAAO,EAAEf,OAAO,EAAK;QAC5D,IAAM2B,OAAO,SAAS7C,mBAAmB,CAACiC,OAAO,EAAEf,OAAO,CAAC;QAC3D,IAAM4B,iBAAiB,SAAS1C,6BAA6B,CAAC,CAAC;QAE/D,IAAIc,OAAO,CAACgB,IAAI,EAAE;UAChBC,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAAC;YAAEQ,iBAAiB,EAAjBA,iBAAiB;YAAED,OAAO,EAAPA;UAAQ,CAAC,CAAC,CAAC;QAC7D,CAAC,MAAM;UACLV,OAAO,CAACC,GAAG,CAACG,OAAO,CAAC,MAAM,CAAC,CAACC,OAAO,CAAC;YAAEM,iBAAiB,EAAjBA,iBAAiB;YAAED,OAAO,EAAPA;UAAQ,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACzF;MACF,CAAC;MAAA,iBAAAE,GAAA,EAAAC,GAAA;QAAA,OAAAJ,KAAA,CAAArB,KAAA,OAAAC,SAAA;MAAA;IAAA,IAAC,CAACf,MAAM,CAAU,YAAY,EAAE,0CAA0C,EAAE;MAAA,OAAM,IAAI;IAAA,GAAE,KAAK,CAAC;IAG/FgB,sBAAsB,CAAkB,uBAAuB;MAAA,IAAAwB,KAAA,GAAAlC,iBAAA,CAAE,WAAOkB,OAAO,EAAEf,OAAO,EAAK;QAC3F,IAAM2B,OAAO,GAAG3B,OAAO,CAACgC,KAAK,GAAG,EAAE,SAASlD,mBAAmB,CAACiC,OAAO,EAAEf,OAAO,CAAC;QAChFhB,wBAAwB,CAAC2C,OAAO,EAAE3B,OAAO,CAAC;MAC5C,CAAC;MAAA,iBAAAiC,GAAA,EAAAC,GAAA;QAAA,OAAAH,KAAA,CAAA1B,KAAA,OAAAC,SAAA;MAAA;IAAA,IAAC,CACCf,MAAM,CACL,qBAAqB,EACrB,uEACF,CAAC,CACAA,MAAM,CACL,6BAA6B,EAC7B,kEACF,CAAC,CACAA,MAAM,CACL,SAAS,EACT,8FAA8F,EAC9F,KACF,CAAC;IAEHiB,gCAAgC,CAAC,CAAC;IAElC,MAAM7B,SAAS,CACZwD,OAAO,CAACd,OAAO,CAAC,uCAAuC,CAAC,CAACc,OAAO,CAAC,CACjEC,WAAW,CAAC,8DAA8D,CAAC,CAC3EC,UAAU,CAACxB,IAAI,EAAE;MAAEyB,IAAI,EAAE;IAAO,CAAC,CAAC;EACvC,CAAC;EAAA,iBAAAC,GAAA;IAAA,OAAA3B,KAAA,CAAAP,KAAA,OAAAC,SAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}