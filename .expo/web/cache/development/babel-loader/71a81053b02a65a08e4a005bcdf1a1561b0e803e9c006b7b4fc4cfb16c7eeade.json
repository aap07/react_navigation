{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport createDebug from 'debug';\nimport { sync as mkdirp } from 'mkdirp';\nimport { chmodSync as chmod } from 'fs';\nimport { pathForDomain, withDomainSigningRequestConfig, withDomainCertificateConfig } from \"./constants\";\nimport { openssl } from \"./utils\";\nimport { withCertificateAuthorityCredentials } from \"./certificate-authority\";\nvar debug = createDebug('devcert:certificates');\nexport default function generateDomainCertificate(_x) {\n  return _generateDomainCertificate.apply(this, arguments);\n}\nfunction _generateDomainCertificate() {\n  _generateDomainCertificate = _asyncToGenerator(function* (domain) {\n    mkdirp(pathForDomain(domain));\n    debug(`Generating private key for ${domain}`);\n    var domainKeyPath = pathForDomain(domain, 'private-key.key');\n    generateKey(domainKeyPath);\n    debug(`Generating certificate signing request for ${domain}`);\n    var csrFile = pathForDomain(domain, `certificate-signing-request.csr`);\n    withDomainSigningRequestConfig(domain, function (configpath) {\n      openssl(['req', '-new', '-config', configpath, '-key', domainKeyPath, '-out', csrFile]);\n    });\n    debug(`Generating certificate for ${domain} from signing request and signing with root CA`);\n    var domainCertPath = pathForDomain(domain, `certificate.crt`);\n    yield withCertificateAuthorityCredentials(function (_ref) {\n      var caKeyPath = _ref.caKeyPath,\n        caCertPath = _ref.caCertPath;\n      withDomainCertificateConfig(domain, function (domainCertConfigPath) {\n        openssl(['ca', '-config', domainCertConfigPath, '-in', csrFile, '-out', domainCertPath, '-keyfile', caKeyPath, '-cert', caCertPath, '-days', '825', '-batch']);\n      });\n    });\n  });\n  return _generateDomainCertificate.apply(this, arguments);\n}\nexport function generateKey(filename) {\n  debug(`generateKey: ${filename}`);\n  openssl(['genrsa', '-out', filename, '2048']);\n  chmod(filename, 400);\n}","map":{"version":3,"names":["createDebug","sync","mkdirp","chmodSync","chmod","pathForDomain","withDomainSigningRequestConfig","withDomainCertificateConfig","openssl","withCertificateAuthorityCredentials","debug","generateDomainCertificate","_x","_generateDomainCertificate","apply","arguments","_asyncToGenerator","domain","domainKeyPath","generateKey","csrFile","configpath","domainCertPath","_ref","caKeyPath","caCertPath","domainCertConfigPath","filename"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/devcert/src/certificates.ts"],"sourcesContent":["// import path from 'path';\nimport createDebug from 'debug';\nimport { sync as mkdirp } from 'mkdirp';\nimport { chmodSync as chmod } from 'fs';\nimport { pathForDomain, withDomainSigningRequestConfig, withDomainCertificateConfig } from './constants';\nimport { openssl } from './utils';\nimport { withCertificateAuthorityCredentials } from './certificate-authority';\n\nconst debug = createDebug('devcert:certificates');\n\n/**\n * Generate a domain certificate signed by the devcert root CA. Domain\n * certificates are cached in their own directories under\n * CONFIG_ROOT/domains/<domain>, and reused on subsequent requests. Because the\n * individual domain certificates are signed by the devcert root CA (which was\n * added to the OS/browser trust stores), they are trusted.\n */\nexport default async function generateDomainCertificate(domain: string): Promise<void> {\n  mkdirp(pathForDomain(domain));\n\n  debug(`Generating private key for ${ domain }`);\n  let domainKeyPath = pathForDomain(domain, 'private-key.key');\n  generateKey(domainKeyPath);\n\n  debug(`Generating certificate signing request for ${ domain }`);\n  let csrFile = pathForDomain(domain, `certificate-signing-request.csr`);\n  withDomainSigningRequestConfig(domain, (configpath) => {\n    openssl(['req', '-new', '-config', configpath, '-key', domainKeyPath, '-out', csrFile]);\n  });\n\n  debug(`Generating certificate for ${ domain } from signing request and signing with root CA`);\n  let domainCertPath = pathForDomain(domain, `certificate.crt`);\n\n  await withCertificateAuthorityCredentials(({ caKeyPath, caCertPath }) => {\n    withDomainCertificateConfig(domain, (domainCertConfigPath) => {\n      openssl(['ca', '-config', domainCertConfigPath, '-in', csrFile, '-out', domainCertPath, '-keyfile', caKeyPath, '-cert', caCertPath, '-days', '825', '-batch'])\n    });\n  });\n}\n\n// Generate a cryptographic key, used to sign certificates or certificate signing requests.\nexport function generateKey(filename: string): void {\n  debug(`generateKey: ${ filename }`);\n  openssl(['genrsa', '-out', filename, '2048']);\n  chmod(filename, 400);\n}"],"mappings":";AACA,OAAOA,WAAW,MAAM,OAAO;AAC/B,SAASC,IAAI,IAAIC,MAAM,QAAQ,QAAQ;AACvC,SAASC,SAAS,IAAIC,KAAK,QAAQ,IAAI;AACvC,SAASC,aAAa,EAAEC,8BAA8B,EAAEC,2BAA2B;AACnF,SAASC,OAAO;AAChB,SAASC,mCAAmC;AAE5C,IAAMC,KAAK,GAAGV,WAAW,CAAC,sBAAsB,CAAC;AASjD,wBAA8BW,yBAAyBA,CAAAC,EAAA;EAAA,OAAAC,0BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAqBtD,SAAAF,2BAAA;EAAAA,0BAAA,GAAAG,iBAAA,CArBc,WAAyCC,MAAc,EAAiB;IACrFf,MAAM,CAACG,aAAa,CAACY,MAAM,CAAC,CAAC;IAE7BP,KAAK,CAAE,8BAA8BO,MAAQ,EAAC,CAAC;IAC/C,IAAIC,aAAa,GAAGb,aAAa,CAACY,MAAM,EAAE,iBAAiB,CAAC;IAC5DE,WAAW,CAACD,aAAa,CAAC;IAE1BR,KAAK,CAAE,8CAA8CO,MAAQ,EAAC,CAAC;IAC/D,IAAIG,OAAO,GAAGf,aAAa,CAACY,MAAM,EAAG,iCAAgC,CAAC;IACtEX,8BAA8B,CAACW,MAAM,EAAE,UAACI,UAAU,EAAK;MACrDb,OAAO,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,SAAS,EAAEa,UAAU,EAAE,MAAM,EAAEH,aAAa,EAAE,MAAM,EAAEE,OAAO,CAAC,CAAC;IACzF,CAAC,CAAC;IAEFV,KAAK,CAAE,8BAA8BO,MAAQ,gDAA+C,CAAC;IAC7F,IAAIK,cAAc,GAAGjB,aAAa,CAACY,MAAM,EAAG,iBAAgB,CAAC;IAE7D,MAAMR,mCAAmC,CAAC,UAAAc,IAAA,EAA+B;MAAA,IAA5BC,SAAS,GAAAD,IAAA,CAATC,SAAS;QAAEC,UAAU,GAAAF,IAAA,CAAVE,UAAU;MAChElB,2BAA2B,CAACU,MAAM,EAAE,UAACS,oBAAoB,EAAK;QAC5DlB,OAAO,CAAC,CAAC,IAAI,EAAE,SAAS,EAAEkB,oBAAoB,EAAE,KAAK,EAAEN,OAAO,EAAE,MAAM,EAAEE,cAAc,EAAE,UAAU,EAAEE,SAAS,EAAE,OAAO,EAAEC,UAAU,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;MAChK,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAAA,OAAAZ,0BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAGD,OAAO,SAASI,WAAWA,CAACQ,QAAgB,EAAQ;EAClDjB,KAAK,CAAE,gBAAgBiB,QAAU,EAAC,CAAC;EACnCnB,OAAO,CAAC,CAAC,QAAQ,EAAE,MAAM,EAAEmB,QAAQ,EAAE,MAAM,CAAC,CAAC;EAC7CvB,KAAK,CAACuB,QAAQ,EAAE,GAAG,CAAC;AACtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}