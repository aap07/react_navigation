{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseVariadicArguments = parseVariadicArguments;\nexports.assertUnexpectedObjectKeys = assertUnexpectedObjectKeys;\nexports.assertUnexpectedVariadicFlags = assertUnexpectedVariadicFlags;\nvar _errors = require(\"../utils/errors\");\nvar debug = require(\"debug\")(\"expo:utils:variadic\");\nfunction parseVariadicArguments(argv) {\n  var variadic = [];\n  var flags = {};\n  for (var arg of argv) {\n    if (!arg.startsWith(\"-\")) {\n      variadic.push(arg);\n    } else if (arg === \"--\") {\n      break;\n    } else {\n      flags[arg] = true;\n    }\n  }\n  var extras = [];\n  var extraOperator = argv.indexOf(\"--\");\n  if (extraOperator > -1 && argv.length > extraOperator + 1) {\n    var extraArgs = argv.slice(extraOperator + 1);\n    if (extraArgs.includes(\"--\")) {\n      throw new _errors.CommandError(\"BAD_ARGS\", \"Unexpected multiple --\");\n    }\n    extras.push.apply(extras, _toConsumableArray(extraArgs));\n    debug(\"Extra arguments: \" + extras.join(\", \"));\n  }\n  debug(`Parsed arguments (variadic: %O, flags: %O, extra: %O)`, variadic, flags, extras);\n  return {\n    variadic: variadic,\n    flags: flags,\n    extras: extras\n  };\n}\nfunction assertUnexpectedObjectKeys(keys, obj) {\n  var unexpectedKeys = Object.keys(obj).filter(function (key) {\n    return !keys.includes(key);\n  });\n  if (unexpectedKeys.length > 0) {\n    throw new _errors.CommandError(\"BAD_ARGS\", `Unexpected: ${unexpectedKeys.join(\", \")}`);\n  }\n}\nfunction assertUnexpectedVariadicFlags(expectedFlags, _ref) {\n  var extras = _ref.extras,\n    flags = _ref.flags,\n    variadic = _ref.variadic;\n  var prefixCommand = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n  var unexpectedFlags = Object.keys(flags).filter(function (key) {\n    return !expectedFlags.includes(key);\n  });\n  if (unexpectedFlags.length > 0) {\n    var intendedFlags = Object.entries(flags).filter(function (_ref2) {\n      var _ref3 = _slicedToArray(_ref2, 1),\n        key = _ref3[0];\n      return expectedFlags.includes(key);\n    }).map(function (_ref4) {\n      var _ref5 = _slicedToArray(_ref4, 1),\n        key = _ref5[0];\n      return key;\n    });\n    var cmd = [prefixCommand].concat(_toConsumableArray(variadic), _toConsumableArray(intendedFlags), [\"--\"], _toConsumableArray(extras.concat(unexpectedFlags))).join(\" \");\n    throw new _errors.CommandError(\"BAD_ARGS\", `Unexpected: ${unexpectedFlags.join(\", \")}\\nDid you mean: ${cmd.trim()}`);\n  }\n}","map":{"version":3,"names":["_slicedToArray","require","_toConsumableArray","parseVariadicArguments","assertUnexpectedObjectKeys","assertUnexpectedVariadicFlags","_errors","debug","argv","variadic","flags","arg","startsWith","push","extras","extraOperator","indexOf","length","extraArgs","slice","includes","CommandError","apply","join","keys","obj","unexpectedKeys","Object","filter","key","expectedFlags","_ref","prefixCommand","arguments","undefined","unexpectedFlags","intendedFlags","entries","_ref2","_ref3","map","_ref4","_ref5","cmd","concat","trim"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\utils\\variadic.ts"],"sourcesContent":["import { CommandError } from '../utils/errors';\n\nconst debug = require('debug')('expo:utils:variadic') as typeof console.log;\n\n/** Given a list of CLI args, return a sorted set of args based on categories used in a complex command. */\nexport function parseVariadicArguments(argv: string[]): {\n  variadic: string[];\n  extras: string[];\n  flags: Record<string, boolean>;\n} {\n  const variadic: string[] = [];\n  const flags: Record<string, boolean> = {};\n\n  for (const arg of argv) {\n    if (!arg.startsWith('-')) {\n      variadic.push(arg);\n    } else if (arg === '--') {\n      break;\n    } else {\n      flags[arg] = true;\n    }\n  }\n\n  // Everything after `--` that is not an option is passed to the underlying install command.\n  const extras: string[] = [];\n\n  const extraOperator = argv.indexOf('--');\n  if (extraOperator > -1 && argv.length > extraOperator + 1) {\n    const extraArgs = argv.slice(extraOperator + 1);\n    if (extraArgs.includes('--')) {\n      throw new CommandError('BAD_ARGS', 'Unexpected multiple --');\n    }\n    extras.push(...extraArgs);\n    debug('Extra arguments: ' + extras.join(', '));\n  }\n\n  debug(`Parsed arguments (variadic: %O, flags: %O, extra: %O)`, variadic, flags, extras);\n\n  return {\n    variadic,\n    flags,\n    extras,\n  };\n}\n\nexport function assertUnexpectedObjectKeys(keys: string[], obj: Record<string, any>): void {\n  const unexpectedKeys = Object.keys(obj).filter((key) => !keys.includes(key));\n  if (unexpectedKeys.length > 0) {\n    throw new CommandError('BAD_ARGS', `Unexpected: ${unexpectedKeys.join(', ')}`);\n  }\n}\n\nexport function assertUnexpectedVariadicFlags(\n  expectedFlags: string[],\n  { extras, flags, variadic }: ReturnType<typeof parseVariadicArguments>,\n  prefixCommand = ''\n) {\n  const unexpectedFlags = Object.keys(flags).filter((key) => !expectedFlags.includes(key));\n\n  if (unexpectedFlags.length > 0) {\n    const intendedFlags = Object.entries(flags)\n      .filter(([key]) => expectedFlags.includes(key))\n      .map(([key]) => key);\n\n    const cmd = [\n      prefixCommand,\n      ...variadic,\n      ...intendedFlags,\n      '--',\n      ...extras.concat(unexpectedFlags),\n    ].join(' ');\n\n    throw new CommandError(\n      'BAD_ARGS',\n      `Unexpected: ${unexpectedFlags.join(', ')}\\nDid you mean: ${cmd.trim()}`\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}