{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _defineProperty3 = require(\"@babel/runtime/helpers/defineProperty\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _spawnAsync() {\n  var data = _interopRequireDefault(require(\"@expo/spawn-async\"));\n  _spawnAsync = function _spawnAsync() {\n    return data;\n  };\n  return data;\n}\nfunction _open() {\n  var data = _interopRequireDefault(require(\"open\"));\n  _open = function _open() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _LaunchBrowser() {\n  var data = require(\"./LaunchBrowser.types\");\n  _LaunchBrowser = function _LaunchBrowser() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nvar IS_WSL = require('is-wsl') && !require('is-docker')();\nvar LaunchBrowserImplWindows = function () {\n  function LaunchBrowserImplWindows() {\n    var _defineProperty2;\n    _classCallCheck(this, LaunchBrowserImplWindows);\n    _defineProperty(this, \"_appId\", void 0);\n    _defineProperty(this, \"_powershellEnv\", void 0);\n    _defineProperty(this, \"MAP\", (_defineProperty2 = {}, _defineProperty3(_defineProperty2, _LaunchBrowser().LaunchBrowserTypes.CHROME, {\n      appId: 'chrome',\n      fullName: 'Google Chrome'\n    }), _defineProperty3(_defineProperty2, _LaunchBrowser().LaunchBrowserTypes.EDGE, {\n      appId: 'msedge',\n      fullName: 'Microsoft Edge'\n    }), _defineProperty2));\n  }\n  _createClass(LaunchBrowserImplWindows, [{\n    key: \"isSupportedBrowser\",\n    value: function () {\n      var _isSupportedBrowser = _asyncToGenerator(function* (browserType) {\n        var result = false;\n        try {\n          var env = yield this.getPowershellEnv();\n          var _yield = yield (0, _spawnAsync().default)('powershell.exe', ['-c', `Get-Package -Name '${this.MAP[browserType].fullName}'`], {\n              env: env,\n              stdio: 'ignore'\n            }),\n            status = _yield.status;\n          result = status === 0;\n        } catch (_unused) {\n          result = false;\n        }\n        return result;\n      });\n      function isSupportedBrowser(_x) {\n        return _isSupportedBrowser.apply(this, arguments);\n      }\n      return isSupportedBrowser;\n    }()\n  }, {\n    key: \"createTempBrowserDir\",\n    value: function () {\n      var _createTempBrowserDir = _asyncToGenerator(function* (baseDirName) {\n        var tmpDir;\n        if (IS_WSL) {\n          tmpDir = (yield (0, _spawnAsync().default)('powershell.exe', ['-c', 'echo \"$Env:TEMP\"'])).stdout.trim();\n          return `${tmpDir}\\\\${baseDirName}`;\n        } else {\n          tmpDir = require('temp-dir');\n          return _path().default.join(tmpDir, baseDirName);\n        }\n      });\n      function createTempBrowserDir(_x2) {\n        return _createTempBrowserDir.apply(this, arguments);\n      }\n      return createTempBrowserDir;\n    }()\n  }, {\n    key: \"launchAsync\",\n    value: function () {\n      var _launchAsync = _asyncToGenerator(function* (browserType, args) {\n        var appId = this.MAP[browserType].appId;\n        yield openWithSystemRootEnvironment(appId, {\n          arguments: args\n        });\n        this._appId = appId;\n        return this;\n      });\n      function launchAsync(_x3, _x4) {\n        return _launchAsync.apply(this, arguments);\n      }\n      return launchAsync;\n    }()\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = _asyncToGenerator(function* () {\n        if (this._appId != null) {\n          try {\n            var env = yield this.getPowershellEnv();\n            yield (0, _spawnAsync().default)('powershell.exe', ['-c', `taskkill.exe /pid @(Get-WmiObject Win32_Process -Filter \"name = '${this._appId}.exe' AND CommandLine LIKE '%chrome-devtools-frontend.appspot.com%'\" | Select-Object -ExpandProperty ProcessId)`], {\n              env: env,\n              stdio: 'ignore'\n            });\n          } catch (_unused2) {}\n          this._appId = undefined;\n        }\n      });\n      function close() {\n        return _close.apply(this, arguments);\n      }\n      return close;\n    }()\n  }, {\n    key: \"getPowershellEnv\",\n    value: function () {\n      var _getPowershellEnv = _asyncToGenerator(function* () {\n        if (this._powershellEnv) {\n          return this._powershellEnv;\n        }\n        var PSModulePath = (yield (0, _spawnAsync().default)('powershell.exe', ['-c', 'echo \"$PSHOME\\\\Modules\"'])).stdout.trim();\n        this._powershellEnv = {\n          PSModulePath: PSModulePath\n        };\n        return this._powershellEnv;\n      });\n      function getPowershellEnv() {\n        return _getPowershellEnv.apply(this, arguments);\n      }\n      return getPowershellEnv;\n    }()\n  }]);\n  return LaunchBrowserImplWindows;\n}();\nexports.default = LaunchBrowserImplWindows;\nfunction openWithSystemRootEnvironment(_x5, _x6) {\n  return _openWithSystemRootEnvironment.apply(this, arguments);\n}\nfunction _openWithSystemRootEnvironment() {\n  _openWithSystemRootEnvironment = _asyncToGenerator(function* (appId, options) {\n    var oldSystemRoot = process.env.SYSTEMROOT;\n    try {\n      var _process$env$SYSTEMRO;\n      process.env.SYSTEMROOT = (_process$env$SYSTEMRO = process.env.SYSTEMROOT) !== null && _process$env$SYSTEMRO !== void 0 ? _process$env$SYSTEMRO : process.env.SystemRoot;\n      return yield _open().default.openApp(appId, options);\n    } finally {\n      process.env.SYSTEMROOT = oldSystemRoot;\n    }\n  });\n  return _openWithSystemRootEnvironment.apply(this, arguments);\n}","map":{"version":3,"names":["_spawnAsync","data","_interopRequireDefault","require","_open","_path","_LaunchBrowser","obj","__esModule","default","_defineProperty","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","IS_WSL","LaunchBrowserImplWindows","_defineProperty2","_classCallCheck","_defineProperty3","LaunchBrowserTypes","CHROME","appId","fullName","EDGE","_createClass","_isSupportedBrowser","_asyncToGenerator","browserType","result","env","getPowershellEnv","_yield","MAP","stdio","status","_unused","isSupportedBrowser","_x","apply","arguments","_createTempBrowserDir","baseDirName","tmpDir","stdout","trim","join","createTempBrowserDir","_x2","_launchAsync","args","openWithSystemRootEnvironment","_appId","launchAsync","_x3","_x4","_close","_unused2","close","_getPowershellEnv","_powershellEnv","PSModulePath","exports","_x5","_x6","_openWithSystemRootEnvironment","options","oldSystemRoot","process","SYSTEMROOT","_process$env$SYSTEMRO","SystemRoot","openApp"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\dev-server\\src\\LaunchBrowserImplWindows.ts"],"sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport open from 'open';\nimport path from 'path';\n\nimport {\n  LaunchBrowserTypes,\n  type LaunchBrowserImpl,\n  type LaunchBrowserInstance,\n} from './LaunchBrowser.types';\n\nconst IS_WSL = require('is-wsl') && !require('is-docker')();\n\n/**\n * Browser implementation for Windows and WSL\n *\n * To minimize the difference between Windows and WSL, the implementation wraps all spawn calls through powershell.\n */\nexport default class LaunchBrowserImplWindows implements LaunchBrowserImpl, LaunchBrowserInstance {\n  private _appId: string | undefined;\n  private _powershellEnv: { [key: string]: string } | undefined;\n\n  MAP = {\n    [LaunchBrowserTypes.CHROME]: {\n      appId: 'chrome',\n      fullName: 'Google Chrome',\n    },\n    [LaunchBrowserTypes.EDGE]: {\n      appId: 'msedge',\n      fullName: 'Microsoft Edge',\n    },\n  };\n\n  async isSupportedBrowser(browserType: LaunchBrowserTypes): Promise<boolean> {\n    let result = false;\n    try {\n      const env = await this.getPowershellEnv();\n      const { status } = await spawnAsync(\n        'powershell.exe',\n        ['-c', `Get-Package -Name '${this.MAP[browserType].fullName}'`],\n        { env, stdio: 'ignore' }\n      );\n      result = status === 0;\n    } catch {\n      result = false;\n    }\n    return result;\n  }\n\n  async createTempBrowserDir(baseDirName: string) {\n    let tmpDir;\n    if (IS_WSL) {\n      // On WSL, the browser is actually launched in host, the `temp-dir` returns the linux /tmp path where host browsers cannot reach into.\n      // We should get the temp path through the `$TEMP` windows environment variable.\n      tmpDir = (await spawnAsync('powershell.exe', ['-c', 'echo \"$Env:TEMP\"'])).stdout.trim();\n      return `${tmpDir}\\\\${baseDirName}`;\n    } else {\n      tmpDir = require('temp-dir');\n      return path.join(tmpDir, baseDirName);\n    }\n  }\n\n  async launchAsync(\n    browserType: LaunchBrowserTypes,\n    args: string[]\n  ): Promise<LaunchBrowserInstance> {\n    const appId = this.MAP[browserType].appId;\n    await openWithSystemRootEnvironment(appId, { arguments: args });\n    this._appId = appId;\n    return this;\n  }\n\n  async close(): Promise<void> {\n    if (this._appId != null) {\n      try {\n        // Since we wrap all spawn calls through powershell as well as from `open.openApp`, the returned ChildProcess is not the browser process.\n        // And we cannot just call `process.kill()` kill it.\n        // The implementation tries to find the pid of target chromium browser process (with --app=https://chrome-devtools-frontend.appspot.com in command arguments),\n        // and uses taskkill to terminate the process.\n        const env = await this.getPowershellEnv();\n        await spawnAsync(\n          'powershell.exe',\n          [\n            '-c',\n            `taskkill.exe /pid @(Get-WmiObject Win32_Process -Filter \"name = '${this._appId}.exe' AND CommandLine LIKE '%chrome-devtools-frontend.appspot.com%'\" | Select-Object -ExpandProperty ProcessId)`,\n          ],\n          { env, stdio: 'ignore' }\n        );\n      } catch {}\n      this._appId = undefined;\n    }\n  }\n\n  /**\n   * This method is used to get the powershell environment variables for `Get-Package` command.\n   * Especially for powershell 7, its default `PSModulePath` is different from powershell 5 and `Get-Package` command is not available.\n   * We need to set the PSModulePath to include the default value of powershell 5.\n   */\n  private async getPowershellEnv(): Promise<{ [key: string]: string }> {\n    if (this._powershellEnv) {\n      return this._powershellEnv;\n    }\n    const PSModulePath = (\n      await spawnAsync('powershell.exe', ['-c', 'echo \"$PSHOME\\\\Modules\"'])\n    ).stdout.trim();\n    this._powershellEnv = {\n      PSModulePath,\n    };\n    return this._powershellEnv;\n  }\n}\n\n/**\n * Due to a bug in `open` on Windows PowerShell, we need to ensure `process.env.SYSTEMROOT` is set.\n * This environment variable is set by Windows on `SystemRoot`, causing `open` to execute a command with an \"unknown\" drive letter.\n *\n * @see https://github.com/sindresorhus/open/issues/205\n */\nasync function openWithSystemRootEnvironment(\n  appId: string | Readonly<string[]>,\n  options?: open.OpenAppOptions\n): Promise<import('child_process').ChildProcess> {\n  const oldSystemRoot = process.env.SYSTEMROOT;\n  try {\n    process.env.SYSTEMROOT = process.env.SYSTEMROOT ?? process.env.SystemRoot;\n    return await open.openApp(appId, options);\n  } finally {\n    process.env.SYSTEMROOT = oldSystemRoot;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}