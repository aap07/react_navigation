{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction getAndroidAssetSuffix(scale) {\n  switch (scale) {\n    case 0.75:\n      return 'ldpi';\n    case 1:\n      return 'mdpi';\n    case 1.5:\n      return 'hdpi';\n    case 2:\n      return 'xhdpi';\n    case 3:\n      return 'xxhdpi';\n    case 4:\n      return 'xxxhdpi';\n    default:\n      return '';\n  }\n}\nvar drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'png', 'webp', 'xml']);\nfunction getAndroidResourceFolderName(asset, scale) {\n  if (!drawableFileTypes.has(asset.type)) {\n    return 'raw';\n  }\n  var suffix = getAndroidAssetSuffix(scale);\n  if (!suffix) {\n    throw new Error(`Don't know which android drawable suffix to use for asset: ${JSON.stringify(asset)}`);\n  }\n  var androidFolder = `drawable-${suffix}`;\n  return androidFolder;\n}\nfunction getResourceIdentifier(asset) {\n  var folderPath = getBasePath(asset);\n  return `${folderPath}/${asset.name}`.toLowerCase().replace(/\\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');\n}\nfunction getBasePath(asset) {\n  var basePath = asset.httpServerLocation;\n  if (basePath[0] === '/') {\n    basePath = basePath.substr(1);\n  }\n  return basePath;\n}\nvar _default = {\n  getAndroidAssetSuffix: getAndroidAssetSuffix,\n  getAndroidResourceFolderName: getAndroidResourceFolderName,\n  getResourceIdentifier: getResourceIdentifier,\n  getBasePath: getBasePath\n};\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","getAndroidAssetSuffix","scale","drawableFileTypes","Set","getAndroidResourceFolderName","asset","has","type","suffix","Error","JSON","stringify","androidFolder","getResourceIdentifier","folderPath","getBasePath","name","toLowerCase","replace","basePath","httpServerLocation","substr","_default"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-plugin-metro/build/commands/bundle/assetPathUtils.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * FIXME: using number to represent discrete scale numbers is fragile in essence because of\n * floating point numbers imprecision.\n */\nfunction getAndroidAssetSuffix(scale) {\n  switch (scale) {\n    case 0.75:\n      return 'ldpi';\n    case 1:\n      return 'mdpi';\n    case 1.5:\n      return 'hdpi';\n    case 2:\n      return 'xhdpi';\n    case 3:\n      return 'xxhdpi';\n    case 4:\n      return 'xxxhdpi';\n    default:\n      return '';\n  }\n}\n\n// See https://developer.android.com/guide/topics/resources/drawable-resource.html\nconst drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'png', 'webp', 'xml']);\nfunction getAndroidResourceFolderName(asset, scale) {\n  if (!drawableFileTypes.has(asset.type)) {\n    return 'raw';\n  }\n  const suffix = getAndroidAssetSuffix(scale);\n  if (!suffix) {\n    throw new Error(`Don't know which android drawable suffix to use for asset: ${JSON.stringify(asset)}`);\n  }\n  const androidFolder = `drawable-${suffix}`;\n  return androidFolder;\n}\nfunction getResourceIdentifier(asset) {\n  const folderPath = getBasePath(asset);\n  return `${folderPath}/${asset.name}`.toLowerCase().replace(/\\//g, '_') // Encode folder structure in file name\n  .replace(/([^a-z0-9_])/g, '') // Remove illegal chars\n  .replace(/^assets_/, ''); // Remove \"assets_\" prefix\n}\n\nfunction getBasePath(asset) {\n  let basePath = asset.httpServerLocation;\n  if (basePath[0] === '/') {\n    basePath = basePath.substr(1);\n  }\n  return basePath;\n}\nvar _default = {\n  getAndroidAssetSuffix,\n  getAndroidResourceFolderName,\n  getResourceIdentifier,\n  getBasePath\n};\nexports.default = _default;\n\n//# sourceMappingURL=assetPathUtils.ts.map"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AAaxB,SAASC,qBAAqBA,CAACC,KAAK,EAAE;EACpC,QAAQA,KAAK;IACX,KAAK,IAAI;MACP,OAAO,MAAM;IACf,KAAK,CAAC;MACJ,OAAO,MAAM;IACf,KAAK,GAAG;MACN,OAAO,MAAM;IACf,KAAK,CAAC;MACJ,OAAO,OAAO;IAChB,KAAK,CAAC;MACJ,OAAO,QAAQ;IACjB,KAAK,CAAC;MACJ,OAAO,SAAS;IAClB;MACE,OAAO,EAAE;EACb;AACF;AAGA,IAAMC,iBAAiB,GAAG,IAAIC,GAAG,CAAC,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;AAC/E,SAASC,4BAA4BA,CAACC,KAAK,EAAEJ,KAAK,EAAE;EAClD,IAAI,CAACC,iBAAiB,CAACI,GAAG,CAACD,KAAK,CAACE,IAAI,CAAC,EAAE;IACtC,OAAO,KAAK;EACd;EACA,IAAMC,MAAM,GAAGR,qBAAqB,CAACC,KAAK,CAAC;EAC3C,IAAI,CAACO,MAAM,EAAE;IACX,MAAM,IAAIC,KAAK,CAAE,8DAA6DC,IAAI,CAACC,SAAS,CAACN,KAAK,CAAE,EAAC,CAAC;EACxG;EACA,IAAMO,aAAa,GAAI,YAAWJ,MAAO,EAAC;EAC1C,OAAOI,aAAa;AACtB;AACA,SAASC,qBAAqBA,CAACR,KAAK,EAAE;EACpC,IAAMS,UAAU,GAAGC,WAAW,CAACV,KAAK,CAAC;EACrC,OAAQ,GAAES,UAAW,IAAGT,KAAK,CAACW,IAAK,EAAC,CAACC,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CACrEA,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAC5BA,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;AAC1B;AAEA,SAASH,WAAWA,CAACV,KAAK,EAAE;EAC1B,IAAIc,QAAQ,GAAGd,KAAK,CAACe,kBAAkB;EACvC,IAAID,QAAQ,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;IACvBA,QAAQ,GAAGA,QAAQ,CAACE,MAAM,CAAC,CAAC,CAAC;EAC/B;EACA,OAAOF,QAAQ;AACjB;AACA,IAAIG,QAAQ,GAAG;EACbtB,qBAAqB,EAArBA,qBAAqB;EACrBI,4BAA4B,EAA5BA,4BAA4B;EAC5BS,qBAAqB,EAArBA,qBAAqB;EACrBE,WAAW,EAAXA;AACF,CAAC;AACDlB,OAAO,CAACE,OAAO,GAAGuB,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}