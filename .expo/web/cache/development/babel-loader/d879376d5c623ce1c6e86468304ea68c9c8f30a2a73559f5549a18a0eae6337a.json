{"ast":null,"code":"'use strict';\n\nvar _require = require(\"./Utils\"),\n  getModules = _require.getModules;\nvar ModuleClassDeclarationTemplate = function ModuleClassDeclarationTemplate(_ref) {\n  var hasteModuleName = _ref.hasteModuleName;\n  return `/**\n * JNI C++ class for module '${hasteModuleName}'\n */\nclass JSI_EXPORT ${hasteModuleName}SpecJSI : public JavaTurboModule {\npublic:\n  ${hasteModuleName}SpecJSI(const JavaTurboModule::InitParams &params);\n};\n`;\n};\nvar HeaderFileTemplate = function HeaderFileTemplate(_ref2) {\n  var modules = _ref2.modules,\n    libraryName = _ref2.libraryName;\n  return `\n/**\n * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).\n *\n * Do not edit this file as changes may cause incorrect behavior and will be lost\n * once the code is regenerated.\n *\n * ${'@'}generated by codegen project: GenerateModuleJniH.js\n */\n\n#pragma once\n\n#include <ReactCommon/JavaTurboModule.h>\n#include <ReactCommon/TurboModule.h>\n#include <jsi/jsi.h>\n\nnamespace facebook {\nnamespace react {\n\n${modules}\n\nJSI_EXPORT\nstd::shared_ptr<TurboModule> ${libraryName}_ModuleProvider(const std::string &moduleName, const JavaTurboModule::InitParams &params);\n\n} // namespace react\n} // namespace facebook\n`;\n};\nvar CMakeListsTemplate = function CMakeListsTemplate(_ref3) {\n  var libraryName = _ref3.libraryName;\n  return `# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\n\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\nfile(GLOB react_codegen_SRCS CONFIGURE_DEPENDS *.cpp react/renderer/components/${libraryName}/*.cpp)\n\nadd_library(\n  react_codegen_${libraryName}\n  SHARED\n  \\${react_codegen_SRCS}\n)\n\ntarget_include_directories(react_codegen_${libraryName} PUBLIC . react/renderer/components/${libraryName})\n\ntarget_link_libraries(\n  react_codegen_${libraryName}\n  fbjni\n  folly_runtime\n  glog\n  jsi\n  ${libraryName !== 'rncore' ? 'react_codegen_rncore' : ''}\n  react_debug\n  react_nativemodule_core\n  react_render_core\n  react_render_debug\n  react_render_graphics\n  react_render_imagemanager\n  rrc_image\n  rrc_view\n  turbomodulejsijni\n  yoga\n)\n\ntarget_compile_options(\n  react_codegen_${libraryName}\n  PRIVATE\n  -DLOG_TAG=\\\\\"ReactNative\\\\\"\n  -fexceptions\n  -frtti\n  -std=c++17\n  -Wall\n)\n`;\n};\nmodule.exports = {\n  generate: function generate(libraryName, schema, packageName) {\n    var assumeNonnull = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var nativeModules = getModules(schema);\n    var modules = Object.keys(nativeModules).filter(function (hasteModuleName) {\n      var module = nativeModules[hasteModuleName];\n      return !(module.excludedPlatforms != null && module.excludedPlatforms.includes('android'));\n    }).sort().map(function (hasteModuleName) {\n      return ModuleClassDeclarationTemplate({\n        hasteModuleName: hasteModuleName\n      });\n    }).join('\\n');\n    var fileName = `${libraryName}.h`;\n    var replacedTemplate = HeaderFileTemplate({\n      modules: modules,\n      libraryName: libraryName.replace(/-/g, '_')\n    });\n    return new Map([[`jni/${fileName}`, replacedTemplate], ['jni/CMakeLists.txt', CMakeListsTemplate({\n      libraryName: libraryName\n    })]]);\n  }\n};","map":{"version":3,"names":["_require","require","getModules","ModuleClassDeclarationTemplate","_ref","hasteModuleName","HeaderFileTemplate","_ref2","modules","libraryName","CMakeListsTemplate","_ref3","module","exports","generate","schema","packageName","assumeNonnull","arguments","length","undefined","nativeModules","Object","keys","filter","excludedPlatforms","includes","sort","map","join","fileName","replacedTemplate","replace","Map"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native/codegen/lib/generators/modules/GenerateModuleJniH.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * @format\n */\n\n'use strict';\n\nconst _require = require('./Utils'),\n  getModules = _require.getModules;\nconst ModuleClassDeclarationTemplate = ({hasteModuleName}) => {\n  return `/**\n * JNI C++ class for module '${hasteModuleName}'\n */\nclass JSI_EXPORT ${hasteModuleName}SpecJSI : public JavaTurboModule {\npublic:\n  ${hasteModuleName}SpecJSI(const JavaTurboModule::InitParams &params);\n};\n`;\n};\nconst HeaderFileTemplate = ({modules, libraryName}) => {\n  return `\n/**\n * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).\n *\n * Do not edit this file as changes may cause incorrect behavior and will be lost\n * once the code is regenerated.\n *\n * ${'@'}generated by codegen project: GenerateModuleJniH.js\n */\n\n#pragma once\n\n#include <ReactCommon/JavaTurboModule.h>\n#include <ReactCommon/TurboModule.h>\n#include <jsi/jsi.h>\n\nnamespace facebook {\nnamespace react {\n\n${modules}\n\nJSI_EXPORT\nstd::shared_ptr<TurboModule> ${libraryName}_ModuleProvider(const std::string &moduleName, const JavaTurboModule::InitParams &params);\n\n} // namespace react\n} // namespace facebook\n`;\n};\n\n// Note: this CMakeLists.txt template includes dependencies for both NativeModule and components.\nconst CMakeListsTemplate = ({libraryName}) => {\n  return `# Copyright (c) Meta Platforms, Inc. and affiliates.\n#\n# This source code is licensed under the MIT license found in the\n# LICENSE file in the root directory of this source tree.\n\ncmake_minimum_required(VERSION 3.13)\nset(CMAKE_VERBOSE_MAKEFILE on)\n\nfile(GLOB react_codegen_SRCS CONFIGURE_DEPENDS *.cpp react/renderer/components/${libraryName}/*.cpp)\n\nadd_library(\n  react_codegen_${libraryName}\n  SHARED\n  \\${react_codegen_SRCS}\n)\n\ntarget_include_directories(react_codegen_${libraryName} PUBLIC . react/renderer/components/${libraryName})\n\ntarget_link_libraries(\n  react_codegen_${libraryName}\n  fbjni\n  folly_runtime\n  glog\n  jsi\n  ${libraryName !== 'rncore' ? 'react_codegen_rncore' : ''}\n  react_debug\n  react_nativemodule_core\n  react_render_core\n  react_render_debug\n  react_render_graphics\n  react_render_imagemanager\n  rrc_image\n  rrc_view\n  turbomodulejsijni\n  yoga\n)\n\ntarget_compile_options(\n  react_codegen_${libraryName}\n  PRIVATE\n  -DLOG_TAG=\\\\\"ReactNative\\\\\"\n  -fexceptions\n  -frtti\n  -std=c++17\n  -Wall\n)\n`;\n};\nmodule.exports = {\n  generate(libraryName, schema, packageName, assumeNonnull = false) {\n    const nativeModules = getModules(schema);\n    const modules = Object.keys(nativeModules)\n      .filter(hasteModuleName => {\n        const module = nativeModules[hasteModuleName];\n        return !(\n          module.excludedPlatforms != null &&\n          module.excludedPlatforms.includes('android')\n        );\n      })\n      .sort()\n      .map(hasteModuleName =>\n        ModuleClassDeclarationTemplate({\n          hasteModuleName,\n        }),\n      )\n      .join('\\n');\n    const fileName = `${libraryName}.h`;\n    const replacedTemplate = HeaderFileTemplate({\n      modules: modules,\n      libraryName: libraryName.replace(/-/g, '_'),\n    });\n    return new Map([\n      [`jni/${fileName}`, replacedTemplate],\n      [\n        'jni/CMakeLists.txt',\n        CMakeListsTemplate({\n          libraryName: libraryName,\n        }),\n      ],\n    ]);\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}