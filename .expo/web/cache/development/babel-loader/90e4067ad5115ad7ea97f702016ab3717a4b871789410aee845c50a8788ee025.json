{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clearNativeFolder = clearNativeFolder;\nexports.hasRequiredAndroidFilesAsync = hasRequiredAndroidFilesAsync;\nexports.hasRequiredIOSFilesAsync = hasRequiredIOSFilesAsync;\nexports.getMalformedNativeProjectsAsync = getMalformedNativeProjectsAsync;\nexports.promptToClearMalformedNativeProjectsAsync = promptToClearMalformedNativeProjectsAsync;\nvar _configPlugins = require(\"@expo/config-plugins\");\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _fs = _interopRequireDefault(require(\"fs\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar Log = _interopRequireWildcard(require(\"../log\"));\nvar _dir = require(\"../utils/dir\");\nvar _interactive = require(\"../utils/interactive\");\nvar _ora = require(\"../utils/ora\");\nvar _prompts = require(\"../utils/prompts\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction clearNativeFolder(_x, _x2) {\n  return _clearNativeFolder.apply(this, arguments);\n}\nfunction _clearNativeFolder() {\n  _clearNativeFolder = _asyncToGenerator(function* (projectRoot, folders) {\n    var step = (0, _ora).logNewSection(`Clearing ${folders.join(\", \")}`);\n    try {\n      yield Promise.all(folders.map(function (folderName) {\n        return _fs.default.promises.rm(_path.default.join(projectRoot, folderName), {\n          recursive: true,\n          force: true\n        });\n      }));\n      step.succeed(`Cleared ${folders.join(\", \")} code`);\n    } catch (error) {\n      step.fail(`Failed to delete ${folders.join(\", \")} code: ${error.message}`);\n      throw error;\n    }\n  });\n  return _clearNativeFolder.apply(this, arguments);\n}\nfunction hasRequiredAndroidFilesAsync(_x3) {\n  return _hasRequiredAndroidFilesAsync.apply(this, arguments);\n}\nfunction _hasRequiredAndroidFilesAsync() {\n  _hasRequiredAndroidFilesAsync = _asyncToGenerator(function* (projectRoot) {\n    try {\n      yield Promise.all([_configPlugins.AndroidConfig.Paths.getAppBuildGradleAsync(projectRoot), _configPlugins.AndroidConfig.Paths.getProjectBuildGradleAsync(projectRoot), _configPlugins.AndroidConfig.Paths.getAndroidManifestAsync(projectRoot), _configPlugins.AndroidConfig.Paths.getMainApplicationAsync(projectRoot)]);\n      return true;\n    } catch (_unused) {\n      return false;\n    }\n  });\n  return _hasRequiredAndroidFilesAsync.apply(this, arguments);\n}\nfunction hasRequiredIOSFilesAsync(_x4) {\n  return _hasRequiredIOSFilesAsync.apply(this, arguments);\n}\nfunction _hasRequiredIOSFilesAsync() {\n  _hasRequiredIOSFilesAsync = _asyncToGenerator(function* (projectRoot) {\n    try {\n      yield Promise.all([_configPlugins.IOSConfig.Paths.getAllXcodeProjectPaths(projectRoot), _configPlugins.IOSConfig.Paths.getAllPBXProjectPaths(projectRoot)]);\n      return true;\n    } catch (_unused2) {\n      return false;\n    }\n  });\n  return _hasRequiredIOSFilesAsync.apply(this, arguments);\n}\nfunction filterPlatformsThatDoNotExistAsync(_x5, _x6) {\n  return _filterPlatformsThatDoNotExistAsync.apply(this, arguments);\n}\nfunction _filterPlatformsThatDoNotExistAsync() {\n  _filterPlatformsThatDoNotExistAsync = _asyncToGenerator(function* (projectRoot, platforms) {\n    var valid = yield Promise.all(platforms.map(function () {\n      var _ref = _asyncToGenerator(function* (platform) {\n        if (yield (0, _dir).directoryExistsAsync(_path.default.join(projectRoot, platform))) {\n          return platform;\n        }\n        return null;\n      });\n      return function (_x11) {\n        return _ref.apply(this, arguments);\n      };\n    }()));\n    return valid.filter(Boolean);\n  });\n  return _filterPlatformsThatDoNotExistAsync.apply(this, arguments);\n}\nfunction getMalformedNativeProjectsAsync(_x7, _x8) {\n  return _getMalformedNativeProjectsAsync.apply(this, arguments);\n}\nfunction _getMalformedNativeProjectsAsync() {\n  _getMalformedNativeProjectsAsync = _asyncToGenerator(function* (projectRoot, platforms) {\n    var VERIFIERS = {\n      android: hasRequiredAndroidFilesAsync,\n      ios: hasRequiredIOSFilesAsync\n    };\n    var checkablePlatforms = platforms.filter(function (platform) {\n      return platform in VERIFIERS;\n    });\n    var checkPlatforms = yield filterPlatformsThatDoNotExistAsync(projectRoot, checkablePlatforms);\n    return (yield Promise.all(checkPlatforms.map(function () {\n      var _ref2 = _asyncToGenerator(function* (platform) {\n        if (!VERIFIERS[platform]) {\n          return false;\n        }\n        if (yield VERIFIERS[platform](projectRoot)) {\n          return false;\n        }\n        return platform;\n      });\n      return function (_x12) {\n        return _ref2.apply(this, arguments);\n      };\n    }()))).filter(Boolean);\n  });\n  return _getMalformedNativeProjectsAsync.apply(this, arguments);\n}\nfunction promptToClearMalformedNativeProjectsAsync(_x9, _x10) {\n  return _promptToClearMalformedNativeProjectsAsync.apply(this, arguments);\n}\nfunction _promptToClearMalformedNativeProjectsAsync() {\n  _promptToClearMalformedNativeProjectsAsync = _asyncToGenerator(function* (projectRoot, checkPlatforms) {\n    var platforms = yield getMalformedNativeProjectsAsync(projectRoot, checkPlatforms);\n    if (!platforms.length) {\n      return;\n    }\n    var displayPlatforms = platforms.map(function (platform) {\n      return _chalk.default.cyan(platform);\n    });\n    var message = platforms.length > 1 ? `The ${displayPlatforms[0]} and ${displayPlatforms[1]} projects are malformed` : `The ${displayPlatforms[0]} project is malformed`;\n    if (!(0, _interactive).isInteractive() || (yield (0, _prompts).confirmAsync({\n      message: `${message}, would you like to clear the project files and reinitialize them?`,\n      initial: true\n    }))) {\n      if (!(0, _interactive).isInteractive()) {\n        Log.warn(`${message}, project files will be cleared and reinitialized.`);\n      }\n      yield clearNativeFolder(projectRoot, platforms);\n    } else {\n      Log.warn(\"Continuing with malformed native projects\");\n    }\n  });\n  return _promptToClearMalformedNativeProjectsAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","clearNativeFolder","hasRequiredAndroidFilesAsync","hasRequiredIOSFilesAsync","getMalformedNativeProjectsAsync","promptToClearMalformedNativeProjectsAsync","_configPlugins","_chalk","_interopRequireDefault","_fs","_path","Log","_interopRequireWildcard","_dir","_interactive","_ora","_prompts","_x","_x2","_clearNativeFolder","apply","arguments","projectRoot","folders","step","logNewSection","join","Promise","all","map","folderName","default","promises","rm","recursive","force","succeed","error","fail","message","_x3","_hasRequiredAndroidFilesAsync","AndroidConfig","Paths","getAppBuildGradleAsync","getProjectBuildGradleAsync","getAndroidManifestAsync","getMainApplicationAsync","_unused","_x4","_hasRequiredIOSFilesAsync","IOSConfig","getAllXcodeProjectPaths","getAllPBXProjectPaths","_unused2","filterPlatformsThatDoNotExistAsync","_x5","_x6","_filterPlatformsThatDoNotExistAsync","platforms","valid","_ref","platform","directoryExistsAsync","_x11","filter","Boolean","_x7","_x8","_getMalformedNativeProjectsAsync","VERIFIERS","android","ios","checkablePlatforms","checkPlatforms","_ref2","_x12","_x9","_x10","_promptToClearMalformedNativeProjectsAsync","length","displayPlatforms","cyan","isInteractive","confirmAsync","initial","warn"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\prebuild\\clearNativeFolder.ts"],"sourcesContent":["import { AndroidConfig, IOSConfig, ModPlatform } from '@expo/config-plugins';\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\n\nimport * as Log from '../log';\nimport { directoryExistsAsync } from '../utils/dir';\nimport { isInteractive } from '../utils/interactive';\nimport { logNewSection } from '../utils/ora';\nimport { confirmAsync } from '../utils/prompts';\n\ntype ArbitraryPlatform = ModPlatform | string;\n\n/** Delete the input native folders and print a loading step. */\nexport async function clearNativeFolder(projectRoot: string, folders: string[]) {\n  const step = logNewSection(`Clearing ${folders.join(', ')}`);\n  try {\n    await Promise.all(\n      folders.map((folderName) =>\n        fs.promises.rm(path.join(projectRoot, folderName), {\n          recursive: true,\n          force: true,\n        })\n      )\n    );\n    step.succeed(`Cleared ${folders.join(', ')} code`);\n  } catch (error: any) {\n    step.fail(`Failed to delete ${folders.join(', ')} code: ${error.message}`);\n    throw error;\n  }\n}\n\n/**\n * Returns `true` if a certain subset of required Android project files are intact.\n *\n * This isn't perfect but it serves the purpose of indicating that the user should\n * be warned to nuke the project files, most commonly when git is cleared and the root folder\n * remains in memory.\n */\nexport async function hasRequiredAndroidFilesAsync(projectRoot: string): Promise<boolean> {\n  try {\n    await Promise.all([\n      AndroidConfig.Paths.getAppBuildGradleAsync(projectRoot),\n      AndroidConfig.Paths.getProjectBuildGradleAsync(projectRoot),\n      AndroidConfig.Paths.getAndroidManifestAsync(projectRoot),\n      AndroidConfig.Paths.getMainApplicationAsync(projectRoot),\n    ]);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/** Returns `true` if a certain subset of required iOS project files are intact. */\nexport async function hasRequiredIOSFilesAsync(projectRoot: string) {\n  try {\n    // If any of the following required files are missing, then the project is malformed.\n    await Promise.all([\n      IOSConfig.Paths.getAllXcodeProjectPaths(projectRoot),\n      IOSConfig.Paths.getAllPBXProjectPaths(projectRoot),\n    ]);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Filter out platforms that do not have an existing platform folder.\n * If the user wants to validate that neither of ['ios', 'android'] are malformed then we should\n * first check that both `ios` and `android` folders exist.\n *\n * This optimization prevents us from prompting to clear a \"malformed\" project that doesn't exist yet.\n */\nasync function filterPlatformsThatDoNotExistAsync(\n  projectRoot: string,\n  platforms: ArbitraryPlatform[]\n): Promise<ArbitraryPlatform[]> {\n  const valid = await Promise.all(\n    platforms.map(async (platform) => {\n      if (await directoryExistsAsync(path.join(projectRoot, platform))) {\n        return platform;\n      }\n      return null;\n    })\n  );\n  return valid.filter(Boolean) as ArbitraryPlatform[];\n}\n\n/** Get a list of native platforms that have existing directories which contain malformed projects. */\nexport async function getMalformedNativeProjectsAsync(\n  projectRoot: string,\n  platforms: ArbitraryPlatform[]\n): Promise<ArbitraryPlatform[]> {\n  const VERIFIERS: Record<ArbitraryPlatform, (root: string) => Promise<boolean>> = {\n    android: hasRequiredAndroidFilesAsync,\n    ios: hasRequiredIOSFilesAsync,\n  };\n\n  const checkablePlatforms = platforms.filter((platform) => platform in VERIFIERS);\n  const checkPlatforms = await filterPlatformsThatDoNotExistAsync(projectRoot, checkablePlatforms);\n  return (\n    await Promise.all(\n      checkPlatforms.map(async (platform) => {\n        if (!VERIFIERS[platform]) {\n          return false;\n        }\n        if (await VERIFIERS[platform](projectRoot)) {\n          return false;\n        }\n        return platform;\n      })\n    )\n  ).filter(Boolean) as ArbitraryPlatform[];\n}\n\nexport async function promptToClearMalformedNativeProjectsAsync(\n  projectRoot: string,\n  checkPlatforms: ArbitraryPlatform[]\n) {\n  const platforms = await getMalformedNativeProjectsAsync(projectRoot, checkPlatforms);\n\n  if (!platforms.length) {\n    return;\n  }\n\n  const displayPlatforms = platforms.map((platform) => chalk.cyan(platform));\n  // Prompt which platforms to reset.\n  const message =\n    platforms.length > 1\n      ? `The ${displayPlatforms[0]} and ${displayPlatforms[1]} projects are malformed`\n      : `The ${displayPlatforms[0]} project is malformed`;\n\n  if (\n    // If the process is non-interactive, default to clearing the malformed native project.\n    // This would only happen on re-running eject.\n    !isInteractive() ||\n    // Prompt to clear the native folders.\n    (await confirmAsync({\n      message: `${message}, would you like to clear the project files and reinitialize them?`,\n      initial: true,\n    }))\n  ) {\n    if (!isInteractive()) {\n      Log.warn(`${message}, project files will be cleared and reinitialized.`);\n    }\n    await clearNativeFolder(projectRoot, platforms);\n  } else {\n    // Warn the user that the process may fail.\n    Log.warn('Continuing with malformed native projects');\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}