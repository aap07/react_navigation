{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.applySplashScreenStoryboard = applySplashScreenStoryboard;\nexports.withIosSplashScreenImage = void 0;\nfunction _InterfaceBuilder() {\n  var data = require(\"./InterfaceBuilder\");\n  _InterfaceBuilder = function _InterfaceBuilder() {\n    return data;\n  };\n  return data;\n}\nfunction _withIosSplashScreenStoryboard() {\n  var data = require(\"./withIosSplashScreenStoryboard\");\n  _withIosSplashScreenStoryboard = function _withIosSplashScreenStoryboard() {\n    return data;\n  };\n  return data;\n}\nvar withIosSplashScreenImage = function withIosSplashScreenImage(config, splash) {\n  return (0, _withIosSplashScreenStoryboard().withIosSplashScreenStoryboard)(config, function (config) {\n    config.modResults = applySplashScreenStoryboard(config.modResults, splash);\n    return config;\n  });\n};\nexports.withIosSplashScreenImage = withIosSplashScreenImage;\nfunction applySplashScreenStoryboard(obj, splash) {\n  var resizeMode = splash === null || splash === void 0 ? void 0 : splash.resizeMode;\n  var splashScreenImagePresent = Boolean(splash === null || splash === void 0 ? void 0 : splash.image);\n  var imageName = 'SplashScreen';\n  if (splashScreenImagePresent) {\n    var contentMode = getImageContentMode(resizeMode || 'contain');\n    return (0, _InterfaceBuilder().applyImageToSplashScreenXML)(obj, {\n      contentMode: contentMode,\n      imageName: imageName\n    });\n  }\n  return (0, _InterfaceBuilder().removeImageFromSplashScreen)(obj, {\n    imageName: imageName\n  });\n}\nfunction getImageContentMode(resizeMode) {\n  switch (resizeMode) {\n    case 'contain':\n      return 'scaleAspectFit';\n    case 'cover':\n      return 'scaleAspectFill';\n    default:\n      throw new Error(`{ resizeMode: \"${resizeMode}\" } is not supported for iOS platform.`);\n  }\n}","map":{"version":3,"names":["_InterfaceBuilder","data","require","_withIosSplashScreenStoryboard","withIosSplashScreenImage","config","splash","withIosSplashScreenStoryboard","modResults","applySplashScreenStoryboard","exports","obj","resizeMode","splashScreenImagePresent","Boolean","image","imageName","contentMode","getImageContentMode","applyImageToSplashScreenXML","removeImageFromSplashScreen","Error"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\prebuild-config\\src\\plugins\\unversioned\\expo-splash-screen\\wtihIosSplashScreenStoryboardImage.ts"],"sourcesContent":["import { ConfigPlugin } from '@expo/config-plugins';\n\nimport {\n  applyImageToSplashScreenXML,\n  IBSplashScreenDocument,\n  ImageContentMode,\n  removeImageFromSplashScreen,\n} from './InterfaceBuilder';\nimport { IOSSplashConfig } from './getIosSplashConfig';\nimport { withIosSplashScreenStoryboard } from './withIosSplashScreenStoryboard';\n\nexport const withIosSplashScreenImage: ConfigPlugin<IOSSplashConfig> = (config, splash) => {\n  return withIosSplashScreenStoryboard(config, (config) => {\n    config.modResults = applySplashScreenStoryboard(config.modResults, splash);\n    return config;\n  });\n};\n\nexport function applySplashScreenStoryboard(obj: IBSplashScreenDocument, splash: IOSSplashConfig) {\n  const resizeMode = splash?.resizeMode;\n  const splashScreenImagePresent = Boolean(splash?.image);\n  const imageName = 'SplashScreen';\n  // Only get the resize mode when the image is present.\n  if (splashScreenImagePresent) {\n    const contentMode = getImageContentMode(resizeMode || 'contain');\n    return applyImageToSplashScreenXML(obj, {\n      contentMode,\n      imageName,\n    });\n  }\n\n  return removeImageFromSplashScreen(obj, { imageName });\n}\n\nfunction getImageContentMode(resizeMode: string): ImageContentMode {\n  switch (resizeMode) {\n    case 'contain':\n      return 'scaleAspectFit';\n    case 'cover':\n      return 'scaleAspectFill';\n    default:\n      throw new Error(`{ resizeMode: \"${resizeMode}\" } is not supported for iOS platform.`);\n  }\n}\n"],"mappings":";;;;;;;AAEA,SAAAA,kBAAA;EAAA,IAAAC,IAAA,GAAAC,OAAA;EAAAF,iBAAA,YAAAA,kBAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAOA,SAAAE,+BAAA;EAAA,IAAAF,IAAA,GAAAC,OAAA;EAAAC,8BAAA,YAAAA,+BAAA;IAAA,OAAAF,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAEO,IAAMG,wBAAuD,GAAG,SAA1DA,wBAAuDA,CAAIC,MAAM,EAAEC,MAAM,EAAK;EACzF,OAAO,IAAAH,8BAAA,GAAAI,6BAA6B,EAACF,MAAM,EAAG,UAAAA,MAAM,EAAK;IACvDA,MAAM,CAACG,UAAU,GAAGC,2BAA2B,CAACJ,MAAM,CAACG,UAAU,EAAEF,MAAM,CAAC;IAC1E,OAAOD,MAAM;EACf,CAAC,CAAC;AACJ,CAAC;AAACK,OAAA,CAAAN,wBAAA,GAAAA,wBAAA;AAEK,SAASK,2BAA2BA,CAACE,GAA2B,EAAEL,MAAuB,EAAE;EAChG,IAAMM,UAAU,GAAGN,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEM,UAAU;EACrC,IAAMC,wBAAwB,GAAGC,OAAO,CAACR,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAES,KAAK,CAAC;EACvD,IAAMC,SAAS,GAAG,cAAc;EAEhC,IAAIH,wBAAwB,EAAE;IAC5B,IAAMI,WAAW,GAAGC,mBAAmB,CAACN,UAAU,IAAI,SAAS,CAAC;IAChE,OAAO,IAAAZ,iBAAA,GAAAmB,2BAA2B,EAACR,GAAG,EAAE;MACtCM,WAAW,EAAXA,WAAW;MACXD,SAAA,EAAAA;IACF,CAAC,CAAC;EACJ;EAEA,OAAO,IAAAhB,iBAAA,GAAAoB,2BAA2B,EAACT,GAAG,EAAE;IAAEK,SAAA,EAAAA;EAAU,CAAC,CAAC;AACxD;AAEA,SAASE,mBAAmBA,CAACN,UAAkB,EAAoB;EACjE,QAAQA,UAAU;IAChB,KAAK,SAAS;MACZ,OAAO,gBAAgB;IACzB,KAAK,OAAO;MACV,OAAO,iBAAiB;IAC1B;MACE,MAAM,IAAIS,KAAK,CAAE,kBAAiBT,UAAW,wCAAuC,CAAC;EAAC;AAE5F"},"metadata":{},"sourceType":"script","externalDependencies":[]}