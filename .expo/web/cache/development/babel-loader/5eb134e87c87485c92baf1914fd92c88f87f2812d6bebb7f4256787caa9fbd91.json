{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.guessEditor = guessEditor;\nexports.openInEditorAsync = openInEditorAsync;\nvar _spawnAsync = _interopRequireDefault(require(\"@expo/spawn-async\"));\nvar _envEditor = _interopRequireDefault(require(\"env-editor\"));\nvar Log = _interopRequireWildcard(require(\"../log\"));\nvar _env = require(\"./env\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar debug = require(\"debug\")(\"expo:utils:editor\");\nfunction guessEditor() {\n  try {\n    var editor = _env.env.EXPO_EDITOR;\n    if (editor) {\n      debug(\"Using $EXPO_EDITOR:\", editor);\n      return _envEditor.default.getEditor(editor);\n    }\n    debug(\"Falling back on $EDITOR:\", editor);\n    return _envEditor.default.defaultEditor();\n  } catch (_unused) {\n    debug(\"Falling back on vscode\");\n    return _envEditor.default.getEditor(\"vscode\");\n  }\n}\nfunction openInEditorAsync(_x) {\n  return _openInEditorAsync.apply(this, arguments);\n}\nfunction _openInEditorAsync() {\n  _openInEditorAsync = _asyncToGenerator(function* (path) {\n    var editor = guessEditor();\n    debug(`Opening ${path} in ${editor == null ? void 0 : editor.name} (bin: ${editor == null ? void 0 : editor.binary}, id: ${editor == null ? void 0 : editor.id})`);\n    if (editor) {\n      try {\n        yield (0, _spawnAsync).default(editor.binary, [path]);\n        return true;\n      } catch (error) {\n        debug(`Failed to auto open path in editor (path: ${path}, binary: ${editor.binary}):`, error);\n      }\n    }\n    Log.error('Could not open editor, you can set it by defining the $EDITOR environment variable with the binary of your editor. (e.g. \"vscode\" or \"atom\")');\n    return false;\n  });\n  return _openInEditorAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","guessEditor","openInEditorAsync","_spawnAsync","_interopRequireDefault","_envEditor","Log","_interopRequireWildcard","_env","debug","editor","env","EXPO_EDITOR","default","getEditor","defaultEditor","_unused","_x","_openInEditorAsync","apply","arguments","path","name","binary","id","error"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\utils\\editor.ts"],"sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport editors from 'env-editor';\n\nimport * as Log from '../log';\nimport { env } from './env';\n\nconst debug = require('debug')('expo:utils:editor') as typeof console.log;\n\n/** Guess what the default editor is and default to VSCode. */\nexport function guessEditor(): editors.Editor {\n  try {\n    const editor = env.EXPO_EDITOR;\n    if (editor) {\n      debug('Using $EXPO_EDITOR:', editor);\n      return editors.getEditor(editor);\n    }\n    debug('Falling back on $EDITOR:', editor);\n    return editors.defaultEditor();\n  } catch {\n    debug('Falling back on vscode');\n    return editors.getEditor('vscode');\n  }\n}\n\n/** Open a file path in a given editor. */\nexport async function openInEditorAsync(path: string): Promise<boolean> {\n  const editor = guessEditor();\n\n  debug(`Opening ${path} in ${editor?.name} (bin: ${editor?.binary}, id: ${editor?.id})`);\n  if (editor) {\n    try {\n      await spawnAsync(editor.binary, [path]);\n      return true;\n    } catch (error: any) {\n      debug(`Failed to auto open path in editor (path: ${path}, binary: ${editor.binary}):`, error);\n    }\n  }\n\n  Log.error(\n    'Could not open editor, you can set it by defining the $EDITOR environment variable with the binary of your editor. (e.g. \"vscode\" or \"atom\")'\n  );\n  return false;\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,iBAAA,GAAAC,OAAA;;;;QASgBC,WAAW,GAAXA,WAAW;QAgBLC,iBAAiB,GAAjBA,iBAAiB;AAzBhB,IAAAC,WAAmB,GAAAC,sBAAA,CAAAJ,OAAA,CAAnB,mBAAmB;AACtB,IAAAK,UAAY,GAAAD,sBAAA,CAAAJ,OAAA,CAAZ,YAAY;AAEpB,IAAAM,GAAG,GAAAC,uBAAA,CAAAP,OAAA,SAAc,EAAd;AACK,IAAAQ,IAAO,GAAAR,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAE3B,IAAMS,KAAK,GAAGT,OAAO,CAAC,OAAO,CAAC,CAAC,mBAAmB,CAAC;AAG5C,SAASC,WAAWA,CAAA,EAAmB;EAC5C,IAAI;IACF,IAAMS,MAAM,GAAGF,IAAG,CAAAG,GAAA,CAACC,WAAW;IAC9B,IAAIF,MAAM,EAAE;MACVD,KAAK,CAAC,qBAAqB,EAAEC,MAAM,CAAC;MACpC,OAAOL,UAAO,CAAAQ,OAAA,CAACC,SAAS,CAACJ,MAAM,CAAC;;IAElCD,KAAK,CAAC,0BAA0B,EAAEC,MAAM,CAAC;IACzC,OAAOL,UAAO,CAAAQ,OAAA,CAACE,aAAa,EAAE;GAC/B,CAAC,OAAAC,OAAA,EAAM;IACNP,KAAK,CAAC,wBAAwB,CAAC;IAC/B,OAAOJ,UAAO,CAAAQ,OAAA,CAACC,SAAS,CAAC,QAAQ,CAAC;;;AAErC,SAGqBZ,iBAAiBA,CAAAe,EAAA;EAAA,OAAAC,kBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,mBAAA;EAAAA,kBAAA,GAAAnB,iBAAA,CAAhC,WAAiCsB,IAAY,EAAoB;IACtE,IAAMX,MAAM,GAAGT,WAAW,EAAE;IAE5BQ,KAAK,CAAE,WAAUY,IAAK,OAAMX,MAAM,QAAM,GAAZ,MAAY,GAAZA,MAAM,CAAEY,IAAK,UAASZ,MAAM,QAAQ,GAAd,MAAc,GAAdA,MAAM,CAAEa,MAAO,SAAQb,MAAM,QAAI,GAAV,MAAU,GAAVA,MAAM,CAAEc,EAAG,GAAE,CAAC;IACvF,IAAId,MAAM,EAAE;MACV,IAAI;QACF,MAAM,IAAAP,WAAU,EAAuBU,OAAvB,CAACH,MAAM,CAACa,MAAM,EAAE,CAACF,IAAI,CAAC,CAAC;QACvC,OAAO,IAAI;OACZ,CAAC,OAAOI,KAAK,EAAO;QACnBhB,KAAK,CAAE,6CAA4CY,IAAK,aAAYX,MAAM,CAACa,MAAO,IAAG,EAAEE,KAAK,CAAC;;;IAIjGnB,GAAG,CAACmB,KAAK,CACP,8IAA8I,CAC/I;IACD,OAAO,KAAK;GACb;EAAA,OAAAP,kBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}