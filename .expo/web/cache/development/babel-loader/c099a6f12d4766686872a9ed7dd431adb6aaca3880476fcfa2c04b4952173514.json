{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _child_process() {\n  var data = require(\"child_process\");\n  _child_process = function _child_process() {\n    return data;\n  };\n  return data;\n}\nvar _adb = _interopRequireDefault(require(\"./adb\"));\nvar _getAdbPath = _interopRequireDefault(require(\"./getAdbPath\"));\nvar _tryLaunchEmulator = require(\"./tryLaunchEmulator\");\nvar _toPascalCase = require(\"./toPascalCase\");\nfunction _os() {\n  var data = _interopRequireDefault(require(\"os\"));\n  _os = function _os() {\n    return data;\n  };\n  return data;\n}\nfunction _prompts() {\n  var data = _interopRequireDefault(require(\"prompts\"));\n  _prompts = function _prompts() {\n    return data;\n  };\n  return data;\n}\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function _chalk() {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function _cliTools() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getEmulatorName(deviceId) {\n  var adbPath = (0, _getAdbPath.default)();\n  var buffer = (0, _child_process().execSync)(`${adbPath} -s ${deviceId} emu avd name`);\n  return buffer.toString().split(_os().default.EOL)[0].replace(/(\\r\\n|\\n|\\r)/gm, '').trim();\n}\nfunction getPhoneName(deviceId) {\n  var adbPath = (0, _getAdbPath.default)();\n  var buffer = (0, _child_process().execSync)(`${adbPath} -s ${deviceId} shell getprop | grep ro.product.model`);\n  return buffer.toString().replace(/\\[ro\\.product\\.model\\]:\\s*\\[(.*)\\]/, '$1').trim();\n}\nfunction promptForDeviceSelection(_x) {\n  return _promptForDeviceSelection.apply(this, arguments);\n}\nfunction _promptForDeviceSelection() {\n  _promptForDeviceSelection = _asyncToGenerator(function* (allDevices) {\n    if (!allDevices.length) {\n      throw new (_cliTools().CLIError)('No devices and/or emulators connected. Please create emulator with Android Studio or connect Android device.');\n    }\n    var _yield = yield (0, _prompts().default)({\n        type: 'select',\n        name: 'device',\n        message: 'Select the device / emulator you want to use',\n        choices: allDevices.map(function (d) {\n          return {\n            title: `${_chalk().default.bold(`${(0, _toPascalCase.toPascalCase)(d.type)}`)} ${_chalk().default.green(`${d.readableName}`)} (${d.connected ? 'connected' : 'disconnected'})`,\n            value: d\n          };\n        }),\n        min: 1\n      }),\n      device = _yield.device;\n    return device;\n  });\n  return _promptForDeviceSelection.apply(this, arguments);\n}\nfunction listAndroidDevices() {\n  return _listAndroidDevices.apply(this, arguments);\n}\nfunction _listAndroidDevices() {\n  _listAndroidDevices = _asyncToGenerator(function* () {\n    var adbPath = (0, _getAdbPath.default)();\n    var devices = _adb.default.getDevices(adbPath);\n    var allDevices = [];\n    devices.forEach(function (deviceId) {\n      if (deviceId.includes('emulator')) {\n        var emulatorData = {\n          deviceId: deviceId,\n          readableName: getEmulatorName(deviceId),\n          connected: true,\n          type: 'emulator'\n        };\n        allDevices = [].concat(_toConsumableArray(allDevices), [emulatorData]);\n      } else {\n        var phoneData = {\n          deviceId: deviceId,\n          readableName: getPhoneName(deviceId),\n          type: 'phone',\n          connected: true\n        };\n        allDevices = [].concat(_toConsumableArray(allDevices), [phoneData]);\n      }\n    });\n    var emulators = (0, _tryLaunchEmulator.getEmulators)();\n    emulators.forEach(function (emulatorName) {\n      if (allDevices.some(function (device) {\n        return device.readableName === emulatorName;\n      })) {\n        return;\n      }\n      var emulatorData = {\n        deviceId: undefined,\n        readableName: emulatorName,\n        type: 'emulator',\n        connected: false\n      };\n      allDevices = [].concat(_toConsumableArray(allDevices), [emulatorData]);\n    });\n    var selectedDevice = yield promptForDeviceSelection(allDevices);\n    return selectedDevice;\n  });\n  return _listAndroidDevices.apply(this, arguments);\n}\nvar _default = listAndroidDevices;\nexports.default = _default;","map":{"version":3,"names":["_toConsumableArray","require","_asyncToGenerator","Object","defineProperty","exports","value","default","_child_process","data","_adb","_interopRequireDefault","_getAdbPath","_tryLaunchEmulator","_toPascalCase","_os","_prompts","_chalk","_cliTools","obj","__esModule","getEmulatorName","deviceId","adbPath","buffer","execSync","toString","split","EOL","replace","trim","getPhoneName","promptForDeviceSelection","_x","_promptForDeviceSelection","apply","arguments","allDevices","length","CLIError","_yield","type","name","message","choices","map","d","title","bold","toPascalCase","green","readableName","connected","min","device","listAndroidDevices","_listAndroidDevices","devices","getDevices","forEach","includes","emulatorData","concat","phoneData","emulators","getEmulators","emulatorName","some","undefined","selectedDevice","_default"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/listAndroidDevices.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _child_process() {\n  const data = require(\"child_process\");\n  _child_process = function () {\n    return data;\n  };\n  return data;\n}\nvar _adb = _interopRequireDefault(require(\"./adb\"));\nvar _getAdbPath = _interopRequireDefault(require(\"./getAdbPath\"));\nvar _tryLaunchEmulator = require(\"./tryLaunchEmulator\");\nvar _toPascalCase = require(\"./toPascalCase\");\nfunction _os() {\n  const data = _interopRequireDefault(require(\"os\"));\n  _os = function () {\n    return data;\n  };\n  return data;\n}\nfunction _prompts() {\n  const data = _interopRequireDefault(require(\"prompts\"));\n  _prompts = function () {\n    return data;\n  };\n  return data;\n}\nfunction _chalk() {\n  const data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function () {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function () {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n *\n * @param deviceId string\n * @returns name of Android emulator\n */\nfunction getEmulatorName(deviceId) {\n  const adbPath = (0, _getAdbPath.default)();\n  const buffer = (0, _child_process().execSync)(`${adbPath} -s ${deviceId} emu avd name`);\n\n  // 1st line should get us emu name\n  return buffer.toString().split(_os().default.EOL)[0].replace(/(\\r\\n|\\n|\\r)/gm, '').trim();\n}\n\n/**\n *\n * @param deviceId string\n * @returns Android device name in readable format\n */\nfunction getPhoneName(deviceId) {\n  const adbPath = (0, _getAdbPath.default)();\n  const buffer = (0, _child_process().execSync)(`${adbPath} -s ${deviceId} shell getprop | grep ro.product.model`);\n  return buffer.toString().replace(/\\[ro\\.product\\.model\\]:\\s*\\[(.*)\\]/, '$1').trim();\n}\nasync function promptForDeviceSelection(allDevices) {\n  if (!allDevices.length) {\n    throw new (_cliTools().CLIError)('No devices and/or emulators connected. Please create emulator with Android Studio or connect Android device.');\n  }\n  const {\n    device\n  } = await (0, _prompts().default)({\n    type: 'select',\n    name: 'device',\n    message: 'Select the device / emulator you want to use',\n    choices: allDevices.map(d => ({\n      title: `${_chalk().default.bold(`${(0, _toPascalCase.toPascalCase)(d.type)}`)} ${_chalk().default.green(`${d.readableName}`)} (${d.connected ? 'connected' : 'disconnected'})`,\n      value: d\n    })),\n    min: 1\n  });\n  return device;\n}\nasync function listAndroidDevices() {\n  const adbPath = (0, _getAdbPath.default)();\n  const devices = _adb.default.getDevices(adbPath);\n  let allDevices = [];\n  devices.forEach(deviceId => {\n    if (deviceId.includes('emulator')) {\n      const emulatorData = {\n        deviceId,\n        readableName: getEmulatorName(deviceId),\n        connected: true,\n        type: 'emulator'\n      };\n      allDevices = [...allDevices, emulatorData];\n    } else {\n      const phoneData = {\n        deviceId,\n        readableName: getPhoneName(deviceId),\n        type: 'phone',\n        connected: true\n      };\n      allDevices = [...allDevices, phoneData];\n    }\n  });\n  const emulators = (0, _tryLaunchEmulator.getEmulators)();\n\n  // Find not booted ones:\n  emulators.forEach(emulatorName => {\n    // skip those already booted\n    if (allDevices.some(device => device.readableName === emulatorName)) {\n      return;\n    }\n    const emulatorData = {\n      deviceId: undefined,\n      readableName: emulatorName,\n      type: 'emulator',\n      connected: false\n    };\n    allDevices = [...allDevices, emulatorData];\n  });\n  const selectedDevice = await promptForDeviceSelection(allDevices);\n  return selectedDevice;\n}\nvar _default = listAndroidDevices;\nexports.default = _default;\n\n//# sourceMappingURL=listAndroidDevices.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}