{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = clientLogsMiddleware;\nexports.getDevicePlatformFromAppRegistryStartupMessage = getDevicePlatformFromAppRegistryStartupMessage;\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function _chalk() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction clientLogsMiddleware(logger) {\n  return function (req, res, next) {\n    try {\n      var deviceId = req.headers['device-id'];\n      var deviceName = req.headers['device-name'];\n      var expoPlatform = req.headers['expo-platform'];\n      if (!deviceId) {\n        res.writeHead(400).end('Missing Device-Id.');\n        return;\n      }\n      if (!deviceName) {\n        res.writeHead(400).end('Missing Device-Name.');\n        return;\n      }\n      if (!req.body) {\n        res.writeHead(400).end('Missing request body.');\n        return;\n      }\n      handleDeviceLogs(logger, {\n        deviceId: deviceId.toString(),\n        deviceName: deviceName.toString(),\n        logs: req.body,\n        devicePlatform: expoPlatform === null || expoPlatform === void 0 ? void 0 : expoPlatform.toString()\n      });\n    } catch (error) {\n      logger.error({\n        tag: 'expo'\n      }, `Error getting device logs: ${error} ${error.stack}`);\n      next(error);\n    }\n    res.end('Success');\n  };\n}\nfunction isIgnorableBugReportingExtraData(body) {\n  return body.length === 2 && body[0] === 'BugReporting extraData:';\n}\nfunction isAppRegistryStartupMessage(body) {\n  return body.length === 1 && (/^Running application \"main\" with appParams:/.test(body[0]) || /^Running \"main\" with \\{/.test(body[0]));\n}\nfunction getDevicePlatformFromAppRegistryStartupMessage(body) {\n  if (body.length === 1 && typeof body[0] === 'string') {\n    var _body$0$match$, _body$0$match;\n    return (_body$0$match$ = (_body$0$match = body[0].match(/[?|&]platform=(\\w+)[&|\\\\]/)) === null || _body$0$match === void 0 ? void 0 : _body$0$match[1]) !== null && _body$0$match$ !== void 0 ? _body$0$match$ : null;\n  }\n  return null;\n}\nfunction formatDevicePlatform(platform) {\n  var formatted = {\n    ios: 'iOS',\n    android: 'Android',\n    web: 'Web'\n  }[platform] || platform;\n  return `${_chalk().default.bold(formatted)} `;\n}\nfunction handleDeviceLogs(logger, _ref) {\n  var deviceId = _ref.deviceId,\n    deviceName = _ref.deviceName,\n    logs = _ref.logs,\n    devicePlatform = _ref.devicePlatform;\n  for (var log of logs) {\n    var body = Array.isArray(log.body) ? log.body : [log.body];\n    var level = log.level;\n    if (isIgnorableBugReportingExtraData(body)) {\n      level = 'debug';\n    }\n    if (isAppRegistryStartupMessage(body)) {\n      var platformId = devicePlatform ? devicePlatform : getDevicePlatformFromAppRegistryStartupMessage(body);\n      var platform = platformId ? formatDevicePlatform(platformId) : '';\n      body = [`${platform}Running app on ${deviceName}`];\n    }\n    var args = body.map(function (obj) {\n      if (typeof obj === 'undefined') {\n        return 'undefined';\n      }\n      if (obj === 'null') {\n        return 'null';\n      }\n      if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {\n        return obj;\n      }\n      try {\n        return JSON.stringify(obj);\n      } catch (_unused) {\n        return obj.toString();\n      }\n    });\n    var logLevel = level === 'info' || level === 'warn' || level === 'error' || level === 'debug' ? level : 'info';\n    logger[logLevel].apply(logger, [{\n      tag: 'device',\n      deviceId: deviceId,\n      deviceName: deviceName,\n      groupDepth: log.groupDepth,\n      shouldHide: log.shouldHide,\n      includesStack: log.includesStack\n    }].concat(_toConsumableArray(args)));\n  }\n}","map":{"version":3,"names":["_chalk","data","_interopRequireDefault","require","obj","__esModule","default","clientLogsMiddleware","logger","req","res","next","deviceId","headers","deviceName","expoPlatform","writeHead","end","body","handleDeviceLogs","toString","logs","devicePlatform","error","tag","stack","isIgnorableBugReportingExtraData","length","isAppRegistryStartupMessage","test","getDevicePlatformFromAppRegistryStartupMessage","_body$0$match$","_body$0$match","match","formatDevicePlatform","platform","formatted","ios","android","web","bold","_ref","log","Array","isArray","level","platformId","args","map","JSON","stringify","_unused","logLevel","apply","groupDepth","shouldHide","includesStack","concat","_toConsumableArray"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\dev-server\\src\\middleware\\clientLogsMiddleware.ts"],"sourcesContent":["import Log from '@expo/bunyan';\nimport chalk from 'chalk';\nimport { HandleFunction } from 'connect';\nimport http from 'http';\n\ntype ConsoleLogLevel = 'info' | 'warn' | 'error' | 'debug';\n\nexport default function clientLogsMiddleware(logger: Log): HandleFunction {\n  return function (\n    req: http.IncomingMessage & { body?: any },\n    res: http.ServerResponse,\n    next: (err?: Error) => void\n  ) {\n    try {\n      const deviceId = req.headers['device-id'];\n      const deviceName = req.headers['device-name'];\n      const expoPlatform = req.headers['expo-platform'];\n      if (!deviceId) {\n        res.writeHead(400).end('Missing Device-Id.');\n        return;\n      }\n      if (!deviceName) {\n        res.writeHead(400).end('Missing Device-Name.');\n        return;\n      }\n      if (!req.body) {\n        res.writeHead(400).end('Missing request body.');\n        return;\n      }\n      handleDeviceLogs(logger, {\n        deviceId: deviceId.toString(),\n        deviceName: deviceName.toString(),\n        logs: req.body,\n        devicePlatform: expoPlatform?.toString(),\n      });\n    } catch (error: any) {\n      logger.error({ tag: 'expo' }, `Error getting device logs: ${error} ${error.stack}`);\n      next(error);\n    }\n    res.end('Success');\n  };\n}\n\nfunction isIgnorableBugReportingExtraData(body: any[]): boolean {\n  return body.length === 2 && body[0] === 'BugReporting extraData:';\n}\n\nfunction isAppRegistryStartupMessage(body: any[]): boolean {\n  return (\n    body.length === 1 &&\n    (/^Running application \"main\" with appParams:/.test(body[0]) ||\n      /^Running \"main\" with \\{/.test(body[0]))\n  );\n}\n\nexport function getDevicePlatformFromAppRegistryStartupMessage(body: string[]): string | null {\n  if (body.length === 1 && typeof body[0] === 'string') {\n    // Dangerously pick the platform out of the request URL\n    // like: http:\\\\\\\\/\\\\\\\\/192.168.6.113:8081\\\\\\\\/index.bundle&platform=android\\dev=true&hot=false&minify=false\n    return body[0].match(/[?|&]platform=(\\w+)[&|\\\\]/)?.[1] ?? null;\n  }\n  return null;\n}\n\nfunction formatDevicePlatform(platform: string): string {\n  // Map the ID like \"ios\" to \"iOS\"\n  const formatted = { ios: 'iOS', android: 'Android', web: 'Web' }[platform] || platform;\n  return `${chalk.bold(formatted)} `;\n}\n\nfunction handleDeviceLogs(\n  logger: Log,\n  {\n    deviceId,\n    deviceName,\n    logs,\n    devicePlatform,\n  }: { deviceId: string; deviceName: string; devicePlatform?: string; logs: any }\n): void {\n  for (const log of logs) {\n    let body = Array.isArray(log.body) ? log.body : [log.body];\n    let { level } = log;\n\n    if (isIgnorableBugReportingExtraData(body)) {\n      level = 'debug';\n    }\n    if (isAppRegistryStartupMessage(body)) {\n      // If the installed version of expo is sending back the `device-platform` header\n      // then use that, otherwise find it in the query string.\n      const platformId = devicePlatform\n        ? devicePlatform\n        : getDevicePlatformFromAppRegistryStartupMessage(body);\n\n      const platform = platformId ? formatDevicePlatform(platformId) : '';\n      body = [`${platform}Running app on ${deviceName}`];\n    }\n\n    const args = body.map((obj: any) => {\n      if (typeof obj === 'undefined') {\n        return 'undefined';\n      }\n      if (obj === 'null') {\n        return 'null';\n      }\n      if (typeof obj === 'string' || typeof obj === 'number' || typeof obj === 'boolean') {\n        return obj;\n      }\n      try {\n        return JSON.stringify(obj);\n      } catch {\n        return obj.toString();\n      }\n    });\n    const logLevel =\n      level === 'info' || level === 'warn' || level === 'error' || level === 'debug'\n        ? (level as ConsoleLogLevel)\n        : 'info';\n    logger[logLevel](\n      {\n        tag: 'device',\n        deviceId,\n        deviceName,\n        groupDepth: log.groupDepth,\n        shouldHide: log.shouldHide,\n        includesStack: log.includesStack,\n      },\n      ...args\n    );\n  }\n}\n"],"mappings":";;;;;;;;AACA,SAAAA,OAAA;EAAA,IAAAC,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAH,MAAA,YAAAA,OAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAA0B,SAAAC,uBAAAE,GAAA;EAAA,OAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA;IAAAE,OAAA,EAAAF;EAAA;AAAA;AAMX,SAASG,oBAAoBA,CAACC,MAAW,EAAkB;EACxE,OAAO,UACLC,GAA0C,EAC1CC,GAAwB,EACxBC,IAA2B,EAC3B;IACA,IAAI;MACF,IAAMC,QAAQ,GAAGH,GAAG,CAACI,OAAO,CAAC,WAAW,CAAC;MACzC,IAAMC,UAAU,GAAGL,GAAG,CAACI,OAAO,CAAC,aAAa,CAAC;MAC7C,IAAME,YAAY,GAAGN,GAAG,CAACI,OAAO,CAAC,eAAe,CAAC;MACjD,IAAI,CAACD,QAAQ,EAAE;QACbF,GAAG,CAACM,SAAS,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,oBAAoB,CAAC;QAC5C;MACF;MACA,IAAI,CAACH,UAAU,EAAE;QACfJ,GAAG,CAACM,SAAS,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,sBAAsB,CAAC;QAC9C;MACF;MACA,IAAI,CAACR,GAAG,CAACS,IAAI,EAAE;QACbR,GAAG,CAACM,SAAS,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,uBAAuB,CAAC;QAC/C;MACF;MACAE,gBAAgB,CAACX,MAAM,EAAE;QACvBI,QAAQ,EAAEA,QAAQ,CAACQ,QAAQ,EAAE;QAC7BN,UAAU,EAAEA,UAAU,CAACM,QAAQ,EAAE;QACjCC,IAAI,EAAEZ,GAAG,CAACS,IAAI;QACdI,cAAc,EAAEP,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEK,QAAQ;MACxC,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOG,KAAU,EAAE;MACnBf,MAAM,CAACe,KAAK,CAAC;QAAEC,GAAG,EAAE;MAAO,CAAC,EAAG,8BAA6BD,KAAM,IAAGA,KAAK,CAACE,KAAM,EAAC,CAAC;MACnFd,IAAI,CAACY,KAAK,CAAC;IACb;IACAb,GAAG,CAACO,GAAG,CAAC,SAAS,CAAC;EACpB,CAAC;AACH;AAEA,SAASS,gCAAgCA,CAACR,IAAW,EAAW;EAC9D,OAAOA,IAAI,CAACS,MAAM,KAAK,CAAC,IAAIT,IAAI,CAAC,CAAC,CAAC,KAAK,yBAAyB;AACnE;AAEA,SAASU,2BAA2BA,CAACV,IAAW,EAAW;EACzD,OACEA,IAAI,CAACS,MAAM,KAAK,CAAC,KAChB,6CAA6C,CAACE,IAAI,CAACX,IAAI,CAAC,CAAC,CAAC,CAAC,IAC1D,yBAAyB,CAACW,IAAI,CAACX,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AAE9C;AAEO,SAASY,8CAA8CA,CAACZ,IAAc,EAAiB;EAC5F,IAAIA,IAAI,CAACS,MAAM,KAAK,CAAC,IAAI,OAAOT,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;IAAA,IAAAa,cAAA,EAAAC,aAAA;IAGpD,QAAAD,cAAA,IAAAC,aAAA,GAAOd,IAAI,CAAC,CAAC,CAAC,CAACe,KAAK,CAAC,2BAA2B,CAAC,cAAAD,aAAA,uBAA1CA,aAAA,CAA6C,CAAC,CAAC,cAAAD,cAAA,cAAAA,cAAA,GAAI,IAAI;EAChE;EACA,OAAO,IAAI;AACb;AAEA,SAASG,oBAAoBA,CAACC,QAAgB,EAAU;EAEtD,IAAMC,SAAS,GAAG;IAAEC,GAAG,EAAE,KAAK;IAAEC,OAAO,EAAE,SAAS;IAAEC,GAAG,EAAE;EAAM,CAAC,CAACJ,QAAQ,CAAC,IAAIA,QAAQ;EACtF,OAAQ,GAAEnC,MAAA,GAAAM,OAAK,CAACkC,IAAI,CAACJ,SAAS,CAAE,GAAE;AACpC;AAEA,SAASjB,gBAAgBA,CACvBX,MAAW,EAAAiC,IAAA,EAOL;EAAA,IALJ7B,QAAQ,GAAA6B,IAAA,CAAR7B,QAAQ;IACRE,UAAU,GAAA2B,IAAA,CAAV3B,UAAU;IACVO,IAAI,GAAAoB,IAAA,CAAJpB,IAAI;IACJC,cAAA,GAAAmB,IAAA,CAAAnB,cAAA;EAGF,KAAK,IAAMoB,GAAG,IAAIrB,IAAI,EAAE;IACtB,IAAIH,IAAI,GAAGyB,KAAK,CAACC,OAAO,CAACF,GAAG,CAACxB,IAAI,CAAC,GAAGwB,GAAG,CAACxB,IAAI,GAAG,CAACwB,GAAG,CAACxB,IAAI,CAAC;IAC1D,IAAM2B,KAAA,GAAUH,GAAG,CAAbG,KAAA;IAEN,IAAInB,gCAAgC,CAACR,IAAI,CAAC,EAAE;MAC1C2B,KAAK,GAAG,OAAO;IACjB;IACA,IAAIjB,2BAA2B,CAACV,IAAI,CAAC,EAAE;MAGrC,IAAM4B,UAAU,GAAGxB,cAAc,GAC7BA,cAAc,GACdQ,8CAA8C,CAACZ,IAAI,CAAC;MAExD,IAAMiB,QAAQ,GAAGW,UAAU,GAAGZ,oBAAoB,CAACY,UAAU,CAAC,GAAG,EAAE;MACnE5B,IAAI,GAAG,CAAE,GAAEiB,QAAS,kBAAiBrB,UAAW,EAAC,CAAC;IACpD;IAEA,IAAMiC,IAAI,GAAG7B,IAAI,CAAC8B,GAAG,CAAE,UAAA5C,GAAQ,EAAK;MAClC,IAAI,OAAOA,GAAG,KAAK,WAAW,EAAE;QAC9B,OAAO,WAAW;MACpB;MACA,IAAIA,GAAG,KAAK,MAAM,EAAE;QAClB,OAAO,MAAM;MACf;MACA,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAI,OAAOA,GAAG,KAAK,SAAS,EAAE;QAClF,OAAOA,GAAG;MACZ;MACA,IAAI;QACF,OAAO6C,IAAI,CAACC,SAAS,CAAC9C,GAAG,CAAC;MAC5B,CAAC,CAAC,OAAA+C,OAAA,EAAM;QACN,OAAO/C,GAAG,CAACgB,QAAQ,EAAE;MACvB;IACF,CAAC,CAAC;IACF,IAAMgC,QAAQ,GACZP,KAAK,KAAK,MAAM,IAAIA,KAAK,KAAK,MAAM,IAAIA,KAAK,KAAK,OAAO,IAAIA,KAAK,KAAK,OAAO,GACzEA,KAAK,GACN,MAAM;IACZrC,MAAM,CAAC4C,QAAQ,CAAC,CAAAC,KAAA,CAAhB7C,MAAM,GACJ;MACEgB,GAAG,EAAE,QAAQ;MACbZ,QAAQ,EAARA,QAAQ;MACRE,UAAU,EAAVA,UAAU;MACVwC,UAAU,EAAEZ,GAAG,CAACY,UAAU;MAC1BC,UAAU,EAAEb,GAAG,CAACa,UAAU;MAC1BC,aAAa,EAAEd,GAAG,CAACc;IACrB,CAAC,EAAAC,MAAA,CAAAC,kBAAA,CACEX,IAAI,GACR;EACH;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}