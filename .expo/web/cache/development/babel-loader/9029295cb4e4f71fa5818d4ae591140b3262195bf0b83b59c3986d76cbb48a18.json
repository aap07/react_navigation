{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _class;\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _spawnAsync = _interopRequireDefault(require(\"@expo/spawn-async\"));\nvar _promises = _interopRequireDefault(require(\"fs/promises\"));\nvar Log = _interopRequireWildcard(require(\"../../../log\"));\nvar _prerequisite = require(\"../Prerequisite\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar ERROR_CODE = \"XCODE_DEVELOPER_DISK_IMAGE\";\nfunction getXcodePathAsync() {\n  return _getXcodePathAsync.apply(this, arguments);\n}\nfunction _getXcodePathAsync() {\n  _getXcodePathAsync = _asyncToGenerator(function* () {\n    try {\n      var _yield$default = yield (0, _spawnAsync).default(\"xcode-select\", [\"-p\"]),\n        stdout = _yield$default.stdout;\n      if (stdout) {\n        return stdout.trim();\n      }\n    } catch (error) {\n      Log.debug(`Could not find Xcode path: %O`, error);\n    }\n    throw new _prerequisite.PrerequisiteCommandError(ERROR_CODE, \"Unable to locate Xcode.\");\n  });\n  return _getXcodePathAsync.apply(this, arguments);\n}\nvar XcodeDeveloperDiskImagePrerequisite = function (_prerequisite$Prerequ) {\n  _inherits(XcodeDeveloperDiskImagePrerequisite, _prerequisite$Prerequ);\n  var _super = _createSuper(XcodeDeveloperDiskImagePrerequisite);\n  function XcodeDeveloperDiskImagePrerequisite() {\n    _classCallCheck(this, XcodeDeveloperDiskImagePrerequisite);\n    return _super.apply(this, arguments);\n  }\n  _createClass(XcodeDeveloperDiskImagePrerequisite, [{\n    key: \"assertImplementation\",\n    value: function () {\n      var _assertImplementation = _asyncToGenerator(function* (_ref) {\n        var version = _ref.version;\n        var xcodePath = yield getXcodePathAsync();\n        var versions = yield _promises.default.readdir(`${xcodePath}/Platforms/iPhoneOS.platform/DeviceSupport/`);\n        var prefix = version.match(/\\d+\\.\\d+/);\n        if (prefix === null) {\n          throw new _prerequisite.PrerequisiteCommandError(ERROR_CODE, `Invalid iOS version: ${version}`);\n        }\n        for (var directory of versions) {\n          if (directory.includes(prefix[0])) {\n            return `${xcodePath}/Platforms/iPhoneOS.platform/DeviceSupport/${directory}/DeveloperDiskImage.dmg`;\n          }\n        }\n        throw new _prerequisite.PrerequisiteCommandError(ERROR_CODE, `Unable to find Developer Disk Image path for SDK ${version}.`);\n      });\n      function assertImplementation(_x) {\n        return _assertImplementation.apply(this, arguments);\n      }\n      return assertImplementation;\n    }()\n  }]);\n  return XcodeDeveloperDiskImagePrerequisite;\n}(_prerequisite.Prerequisite);\n_class = XcodeDeveloperDiskImagePrerequisite;\nXcodeDeveloperDiskImagePrerequisite.instance = new _class();\nexports.XcodeDeveloperDiskImagePrerequisite = XcodeDeveloperDiskImagePrerequisite;","map":{"version":3,"names":["_classCallCheck","require","_createClass","_inherits","_possibleConstructorReturn","_getPrototypeOf","_asyncToGenerator","_class","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","_spawnAsync","_interopRequireDefault","_promises","Log","_interopRequireWildcard","_prerequisite","ERROR_CODE","getXcodePathAsync","_getXcodePathAsync","_yield$default","default","stdout","trim","error","debug","PrerequisiteCommandError","XcodeDeveloperDiskImagePrerequisite","_prerequisite$Prerequ","_super","key","value","_assertImplementation","_ref","version","xcodePath","versions","readdir","prefix","match","directory","includes","assertImplementation","_x","Prerequisite","instance"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\doctor\\apple\\XcodeDeveloperDiskImagePrerequisite.ts"],"sourcesContent":["import spawnAsync from '@expo/spawn-async';\nimport fs from 'fs/promises';\n\nimport * as Log from '../../../log';\nimport { Prerequisite, PrerequisiteCommandError } from '../Prerequisite';\n\nconst ERROR_CODE = 'XCODE_DEVELOPER_DISK_IMAGE';\nasync function getXcodePathAsync(): Promise<string> {\n  try {\n    const { stdout } = await spawnAsync('xcode-select', ['-p']);\n    if (stdout) {\n      return stdout.trim();\n    }\n  } catch (error: any) {\n    Log.debug(`Could not find Xcode path: %O`, error);\n  }\n  throw new PrerequisiteCommandError(ERROR_CODE, 'Unable to locate Xcode.');\n}\n\nexport class XcodeDeveloperDiskImagePrerequisite extends Prerequisite<string, { version: string }> {\n  static instance = new XcodeDeveloperDiskImagePrerequisite();\n\n  async assertImplementation({ version }: { version: string }): Promise<string> {\n    const xcodePath = await getXcodePathAsync();\n    // Like \"11.2 (15C107)\"\n    const versions = await fs.readdir(`${xcodePath}/Platforms/iPhoneOS.platform/DeviceSupport/`);\n    const prefix = version.match(/\\d+\\.\\d+/);\n    if (prefix === null) {\n      throw new PrerequisiteCommandError(ERROR_CODE, `Invalid iOS version: ${version}`);\n    }\n    for (const directory of versions) {\n      if (directory.includes(prefix[0])) {\n        return `${xcodePath}/Platforms/iPhoneOS.platform/DeviceSupport/${directory}/DeveloperDiskImage.dmg`;\n      }\n    }\n    throw new PrerequisiteCommandError(\n      ERROR_CODE,\n      `Unable to find Developer Disk Image path for SDK ${version}.`\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}