{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDestinationSimulator = getDestinationSimulator;\nfunction _child_process() {\n  var data = _interopRequireDefault(require(\"child_process\"));\n  _child_process = function _child_process() {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function _cliTools() {\n    return data;\n  };\n  return data;\n}\nvar _findMatchingSimulator = _interopRequireDefault(require(\"./findMatchingSimulator\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getDestinationSimulator(args) {\n  var fallbackSimulators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var simulators;\n  try {\n    simulators = JSON.parse(_child_process().default.execFileSync('xcrun', ['simctl', 'list', '--json', 'devices'], {\n      encoding: 'utf8'\n    }));\n  } catch (error) {\n    throw new (_cliTools().CLIError)('Could not get the simulator list from Xcode. Please open Xcode and try running project directly from there to resolve the remaining issues.', error);\n  }\n  var selectedSimulator = fallbackSimulators.reduce(function (simulator, fallback) {\n    return simulator || (0, _findMatchingSimulator.default)(simulators, {\n      simulator: fallback\n    });\n  }, (0, _findMatchingSimulator.default)(simulators, args));\n  if (!selectedSimulator) {\n    throw new (_cliTools().CLIError)(`No simulator available with ${args.simulator ? `name \"${args.simulator}\"` : `udid \"${args.udid}\"`}`);\n  }\n  return selectedSimulator;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","getDestinationSimulator","_child_process","data","_interopRequireDefault","require","_cliTools","_findMatchingSimulator","obj","__esModule","default","args","fallbackSimulators","arguments","length","undefined","simulators","JSON","parse","execFileSync","encoding","error","CLIError","selectedSimulator","reduce","simulator","fallback","udid"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-platform-ios/build/tools/getDestinationSimulator.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDestinationSimulator = getDestinationSimulator;\nfunction _child_process() {\n  const data = _interopRequireDefault(require(\"child_process\"));\n  _child_process = function () {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function () {\n    return data;\n  };\n  return data;\n}\nvar _findMatchingSimulator = _interopRequireDefault(require(\"./findMatchingSimulator\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nfunction getDestinationSimulator(args, fallbackSimulators = []) {\n  let simulators;\n  try {\n    simulators = JSON.parse(_child_process().default.execFileSync('xcrun', ['simctl', 'list', '--json', 'devices'], {\n      encoding: 'utf8'\n    }));\n  } catch (error) {\n    throw new (_cliTools().CLIError)('Could not get the simulator list from Xcode. Please open Xcode and try running project directly from there to resolve the remaining issues.', error);\n  }\n  const selectedSimulator = fallbackSimulators.reduce((simulator, fallback) => {\n    return simulator || (0, _findMatchingSimulator.default)(simulators, {\n      simulator: fallback\n    });\n  }, (0, _findMatchingSimulator.default)(simulators, args));\n  if (!selectedSimulator) {\n    throw new (_cliTools().CLIError)(`No simulator available with ${args.simulator ? `name \"${args.simulator}\"` : `udid \"${args.udid}\"`}`);\n  }\n  return selectedSimulator;\n}\n\n//# sourceMappingURL=getDestinationSimulator.ts.map"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,uBAAuB,GAAGA,uBAAuB;AACzD,SAASC,cAAcA,CAAA,EAAG;EACxB,IAAMC,IAAI,GAAGC,sBAAsB,CAACC,OAAO,CAAC,eAAe,CAAC,CAAC;EAC7DH,cAAc,GAAG,SAAAA,eAAA,EAAY;IAC3B,OAAOC,IAAI;EACb,CAAC;EACD,OAAOA,IAAI;AACb;AACA,SAASG,SAASA,CAAA,EAAG;EACnB,IAAMH,IAAI,GAAGE,OAAO,CAAC,mCAAmC,CAAC;EACzDC,SAAS,GAAG,SAAAA,UAAA,EAAY;IACtB,OAAOH,IAAI;EACb,CAAC;EACD,OAAOA,IAAI;AACb;AACA,IAAII,sBAAsB,GAAGH,sBAAsB,CAACC,OAAO,0BAA0B,CAAC,CAAC;AACvF,SAASD,sBAAsBA,CAACI,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEE,OAAO,EAAEF;EAAI,CAAC;AAAE;AAC9F,SAASP,uBAAuBA,CAACU,IAAI,EAA2B;EAAA,IAAzBC,kBAAkB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAC5D,IAAIG,UAAU;EACd,IAAI;IACFA,UAAU,GAAGC,IAAI,CAACC,KAAK,CAAChB,cAAc,CAAC,CAAC,CAACQ,OAAO,CAACS,YAAY,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,CAAC,EAAE;MAC9GC,QAAQ,EAAE;IACZ,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,KAAKf,SAAS,CAAC,CAAC,CAACgB,QAAQ,EAAE,6IAA6I,EAAED,KAAK,CAAC;EACxL;EACA,IAAME,iBAAiB,GAAGX,kBAAkB,CAACY,MAAM,CAAC,UAACC,SAAS,EAAEC,QAAQ,EAAK;IAC3E,OAAOD,SAAS,IAAI,CAAC,CAAC,EAAElB,sBAAsB,CAACG,OAAO,EAAEM,UAAU,EAAE;MAClES,SAAS,EAAEC;IACb,CAAC,CAAC;EACJ,CAAC,EAAE,CAAC,CAAC,EAAEnB,sBAAsB,CAACG,OAAO,EAAEM,UAAU,EAAEL,IAAI,CAAC,CAAC;EACzD,IAAI,CAACY,iBAAiB,EAAE;IACtB,MAAM,KAAKjB,SAAS,CAAC,CAAC,CAACgB,QAAQ,EAAG,+BAA8BX,IAAI,CAACc,SAAS,GAAI,SAAQd,IAAI,CAACc,SAAU,GAAE,GAAI,SAAQd,IAAI,CAACgB,IAAK,GAAG,EAAC,CAAC;EACxI;EACA,OAAOJ,iBAAiB;AAC1B"},"metadata":{},"sourceType":"script","externalDependencies":[]}