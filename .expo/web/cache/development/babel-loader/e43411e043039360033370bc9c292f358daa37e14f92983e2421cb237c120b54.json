{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.applyImageToSplashScreenXML = applyImageToSplashScreenXML;\nexports.createConstraint = createConstraint;\nexports.createConstraintId = createConstraintId;\nexports.ensureUniquePush = ensureUniquePush;\nexports.removeExisting = removeExisting;\nexports.removeImageFromSplashScreen = removeImageFromSplashScreen;\nexports.toObjectAsync = toObjectAsync;\nexports.toString = toString;\nfunction _crypto() {\n  var data = _interopRequireDefault(require(\"crypto\"));\n  _crypto = function _crypto() {\n    return data;\n  };\n  return data;\n}\nfunction _xml2js() {\n  var data = require(\"xml2js\");\n  _xml2js = function _xml2js() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = require('debug')('expo:prebuild-config:expo-splash-screen:ios:InterfaceBuilder');\nfunction createConstraint(_ref, _ref2, constant) {\n  var _ref3 = _slicedToArray(_ref, 2),\n    firstItem = _ref3[0],\n    firstAttribute = _ref3[1];\n  var _ref4 = _slicedToArray(_ref2, 2),\n    secondItem = _ref4[0],\n    secondAttribute = _ref4[1];\n  return {\n    $: {\n      firstItem: firstItem,\n      firstAttribute: firstAttribute,\n      secondItem: secondItem,\n      secondAttribute: secondAttribute,\n      constant: constant,\n      id: createConstraintId(firstItem, firstAttribute, secondItem, secondAttribute)\n    }\n  };\n}\nfunction createConstraintId() {\n  for (var _len = arguments.length, attributes = new Array(_len), _key = 0; _key < _len; _key++) {\n    attributes[_key] = arguments[_key];\n  }\n  return _crypto().default.createHash('sha1').update(attributes.join('-')).digest('hex');\n}\nvar IMAGE_ID = 'EXPO-SplashScreen';\nvar CONTAINER_ID = 'EXPO-ContainerView';\nfunction removeImageFromSplashScreen(xml, _ref5) {\n  var imageName = _ref5.imageName;\n  var mainView = xml.document.scenes[0].scene[0].objects[0].viewController[0].view[0];\n  debug(`Remove all splash screen image elements`);\n  removeExisting(mainView.subviews[0].imageView, IMAGE_ID);\n  getAbsoluteConstraints(IMAGE_ID, CONTAINER_ID).forEach(function (constraint) {\n    var constrainsArray = mainView.constraints[0].constraint;\n    removeExisting(constrainsArray, constraint);\n  });\n  var imageSection = xml.document.resources[0].image;\n  var existingImageIndex = imageSection.findIndex(function (image) {\n    return image.$.name === imageName;\n  });\n  if (existingImageIndex > -1) {\n    imageSection.splice(existingImageIndex, 1);\n  }\n  return xml;\n}\nfunction getAbsoluteConstraints(childId, parentId) {\n  return [createConstraint([childId, 'top'], [parentId, 'top']), createConstraint([childId, 'leading'], [parentId, 'leading']), createConstraint([childId, 'trailing'], [parentId, 'trailing']), createConstraint([childId, 'bottom'], [parentId, 'bottom'])];\n}\nfunction applyImageToSplashScreenXML(xml, _ref6) {\n  var imageName = _ref6.imageName,\n    contentMode = _ref6.contentMode;\n  var width = 414;\n  var height = 736;\n  var imageView = {\n    $: {\n      id: IMAGE_ID,\n      userLabel: imageName,\n      image: imageName,\n      contentMode: contentMode,\n      horizontalHuggingPriority: 251,\n      verticalHuggingPriority: 251,\n      clipsSubviews: true,\n      userInteractionEnabled: false,\n      translatesAutoresizingMaskIntoConstraints: false\n    },\n    rect: [{\n      $: {\n        key: 'frame',\n        x: 0.0,\n        y: 0.0,\n        width: width,\n        height: height\n      }\n    }]\n  };\n  var mainView = xml.document.scenes[0].scene[0].objects[0].viewController[0].view[0];\n  ensureUniquePush(mainView.subviews[0].imageView, imageView);\n  getAbsoluteConstraints(IMAGE_ID, CONTAINER_ID).forEach(function (constraint) {\n    var constrainsArray = mainView.constraints[0].constraint;\n    ensureUniquePush(constrainsArray, constraint);\n  });\n  var imageSection = xml.document.resources[0].image;\n  var existingImageIndex = imageSection.findIndex(function (image) {\n    return image.$.name === imageName;\n  });\n  if (existingImageIndex > -1) {\n    debug(`Removing existing IB image asset at index ${existingImageIndex}`);\n    imageSection.splice(existingImageIndex, 1);\n  }\n  imageSection.push({\n    $: {\n      name: imageName,\n      width: width,\n      height: height\n    }\n  });\n  return xml;\n}\nfunction ensureUniquePush(array, item) {\n  if (!array) return array;\n  removeExisting(array, item);\n  array.push(item);\n  return array;\n}\nfunction removeExisting(array, item) {\n  var _item$$;\n  var id = typeof item === 'string' ? item : (_item$$ = item.$) === null || _item$$ === void 0 ? void 0 : _item$$.id;\n  var existingItem = array === null || array === void 0 ? void 0 : array.findIndex(function (existingItem) {\n    return existingItem.$.id === id;\n  });\n  if (existingItem > -1) {\n    debug(`Removing existing IB item with id ${id}, from: %O`, array);\n    array.splice(existingItem, 1);\n  }\n  return array;\n}\nfunction toString(xml) {\n  var builder = new (_xml2js().Builder)({\n    preserveChildrenOrder: true,\n    xmldec: {\n      version: '1.0',\n      encoding: 'UTF-8'\n    },\n    renderOpts: {\n      pretty: true,\n      indent: '    '\n    }\n  });\n  return builder.buildObject(xml);\n}\nfunction toObjectAsync(contents) {\n  return new (_xml2js().Parser)().parseStringPromise(contents);\n}","map":{"version":3,"names":["_crypto","data","_interopRequireDefault","require","_xml2js","obj","__esModule","default","debug","createConstraint","_ref","_ref2","constant","_ref3","_slicedToArray","firstItem","firstAttribute","_ref4","secondItem","secondAttribute","$","id","createConstraintId","_len","arguments","length","attributes","Array","_key","createHash","update","join","digest","IMAGE_ID","CONTAINER_ID","removeImageFromSplashScreen","xml","_ref5","imageName","mainView","document","scenes","scene","objects","viewController","view","removeExisting","subviews","imageView","getAbsoluteConstraints","forEach","constraint","constrainsArray","constraints","imageSection","resources","image","existingImageIndex","findIndex","name","splice","childId","parentId","applyImageToSplashScreenXML","_ref6","contentMode","width","height","userLabel","horizontalHuggingPriority","verticalHuggingPriority","clipsSubviews","userInteractionEnabled","translatesAutoresizingMaskIntoConstraints","rect","key","x","y","ensureUniquePush","push","array","item","_item$$","existingItem","toString","builder","Builder","preserveChildrenOrder","xmldec","version","encoding","renderOpts","pretty","indent","buildObject","toObjectAsync","contents","Parser","parseStringPromise"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\prebuild-config\\src\\plugins\\unversioned\\expo-splash-screen\\InterfaceBuilder.ts"],"sourcesContent":["import crypto from 'crypto';\nimport { Builder, Parser } from 'xml2js';\n\nconst debug = require('debug')(\n  'expo:prebuild-config:expo-splash-screen:ios:InterfaceBuilder'\n) as typeof console.log;\n\nexport type IBBoolean = 'YES' | 'NO' | boolean;\n\nexport type IBItem<\n  H extends Record<string, any>,\n  B extends Record<string, any[]> = { [key: string]: any }\n> = {\n  $: H;\n} & B;\n\nexport type Rect = {\n  key: string;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n};\n\nexport type IBRect = IBItem<Rect>;\n\nexport type IBAutoresizingMask = IBItem<{\n  /** @example `autoresizingMask` */\n  key: string;\n  flexibleMaxX: IBBoolean;\n  flexibleMaxY: IBBoolean;\n}>;\n\n/** @example `<color key=\"textColor\" systemColor=\"linkColor\"/>` */\nexport type IBColor = IBItem<\n  {\n    /** @example `textColor` */\n    key: string;\n  } & (\n    | /** Custom color */\n    {\n        /** @example `0.86584504117670746` */\n        red: number;\n        /** @example `0.26445041990630447` */\n        green: number;\n        /** @example `0.3248577810203549` */\n        blue: number;\n        /** @example `1` */\n        alpha: number;\n        colorSpace: 'custom' | string;\n        customColorSpace: 'displayP3' | 'sRGB' | string;\n      }\n    /** Built-in color */\n    | {\n        systemColor: 'linkColor' | string;\n      }\n  )\n>;\n\nexport type IBFontDescription = IBItem<{\n  /** @example `fontDescription` */\n  key: string;\n  /** Font size */\n  pointSize: number;\n\n  /** Custom font */\n  name?: 'HelveticaNeue' | string;\n  family?: 'Helvetica Neue' | string;\n\n  /** Built-in font */\n  type?: 'system' | 'boldSystem' | 'UICTFontTextStyleCallout' | 'UICTFontTextStyleBody' | string;\n}>;\n\nexport type ImageContentMode = 'scaleAspectFit' | 'scaleAspectFill';\n\nexport type ConstraintAttribute = 'top' | 'bottom' | 'trailing' | 'leading';\n\nexport type IBImageView = IBItem<\n  {\n    id: string;\n    userLabel: string;\n    image: string;\n    clipsSubviews?: IBBoolean;\n    userInteractionEnabled: IBBoolean;\n    contentMode: IBContentMode;\n    horizontalHuggingPriority: number;\n    verticalHuggingPriority: number;\n    insetsLayoutMarginsFromSafeArea?: IBBoolean;\n    translatesAutoresizingMaskIntoConstraints?: IBBoolean;\n  },\n  {\n    rect: IBRect[];\n  }\n>;\n\nexport type IBLabel = IBItem<\n  {\n    id: string;\n    /** The main value. */\n    text: string;\n\n    opaque: IBBoolean;\n    fixedFrame: IBBoolean;\n    textAlignment?: IBTextAlignment;\n    lineBreakMode:\n      | 'clip'\n      | 'characterWrap'\n      | 'wordWrap'\n      | 'headTruncation'\n      | 'middleTruncation'\n      | 'tailTruncation';\n    baselineAdjustment?: 'none' | 'alignBaselines';\n    adjustsFontSizeToFit: IBBoolean;\n    userInteractionEnabled: IBBoolean;\n    contentMode: IBContentMode;\n    horizontalHuggingPriority: number;\n    verticalHuggingPriority: number;\n    translatesAutoresizingMaskIntoConstraints?: IBBoolean;\n  },\n  {\n    /** @example `<rect key=\"frame\" x=\"175\" y=\"670\" width=\"35\" height=\"17\"/>` */\n    rect: IBRect[];\n    /** @example `<autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"/>` */\n    autoresizingMask?: IBAutoresizingMask[];\n    /** @example `<fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"19\"/>` */\n    fontDescription?: IBFontDescription[];\n    /** @example `<color key=\"textColor\" red=\"0.0\" green=\"0.0\" blue=\"0.0\" alpha=\"1\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>` */\n    color?: IBColor[];\n    nil?: IBItem<{\n      /** @example `textColor` `highlightedColor` */\n      key: string;\n    }>[];\n  }\n>;\n\nexport type IBTextAlignment = 'left' | 'center' | 'right' | 'justified' | 'natural';\n\nexport type IBContentMode = string | 'left' | 'scaleAspectFill';\n\nexport type IBConstraint = IBItem<{\n  firstItem: string;\n  firstAttribute: ConstraintAttribute;\n  secondItem: string;\n  secondAttribute: ConstraintAttribute;\n  constant?: number;\n  id: string;\n}>;\n\nexport type IBViewController = IBItem<\n  {\n    id: string;\n    placeholderIdentifier?: string;\n    userLabel: string;\n    sceneMemberID: string;\n  },\n  {\n    view: IBItem<\n      {\n        id: string;\n        key: string;\n        userInteractionEnabled: IBBoolean;\n        contentMode: string | 'scaleToFill';\n        insetsLayoutMarginsFromSafeArea: IBBoolean;\n        userLabel: string;\n      },\n      {\n        rect: IBRect[];\n        autoresizingMask: IBItem<{\n          key: string;\n          flexibleMaxX: IBBoolean;\n          flexibleMaxY: IBBoolean;\n        }>[];\n\n        subviews: IBItem<\n          object,\n          {\n            imageView: IBImageView[];\n            label: IBLabel[];\n          }\n        >[];\n        color: IBItem<{\n          key: string | 'backgroundColor';\n          systemColor: string | 'systemBackgroundColor';\n        }>[];\n        constraints: IBItem<\n          object,\n          {\n            constraint: IBConstraint[];\n          }\n        >[];\n        viewLayoutGuide: IBItem<{\n          id: string;\n          key: string | 'safeArea';\n        }>[];\n      }\n    >[];\n  }\n>;\n\nexport type IBPoint = IBItem<{\n  key: string | 'canvasLocation';\n  x: number;\n  y: number;\n}>;\n\nexport type IBScene = IBItem<\n  { sceneID: string },\n  {\n    objects: {\n      viewController: IBViewController[];\n      placeholder: IBItem<{\n        id: string;\n        placeholderIdentifier?: string;\n        userLabel: string;\n        sceneMemberID: string;\n      }>[];\n    }[];\n    point: IBPoint[];\n  }\n>;\n\nexport type IBResourceImage = IBItem<{\n  name: string;\n  width: number;\n  height: number;\n}>;\n\nexport type IBDevice = IBItem<{\n  id: string;\n  orientation: string | 'portrait';\n  appearance: string | 'light';\n}>;\n\nexport type IBSplashScreenDocument = {\n  document: IBItem<\n    {\n      type: 'com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB' | string;\n      version: '3.0' | string;\n      toolsVersion: number;\n      targetRuntime: 'iOS.CocoaTouch' | string;\n      propertyAccessControl: 'none' | string;\n      useAutolayout: IBBoolean;\n      launchScreen: IBBoolean;\n      useTraitCollections: IBBoolean;\n      useSafeAreas: IBBoolean;\n      colorMatched: IBBoolean;\n      initialViewController: string;\n    },\n    {\n      device: IBDevice[];\n      dependencies: unknown[];\n      scenes: {\n        scene: IBScene[];\n      }[];\n      resources: {\n        image: IBResourceImage[];\n      }[];\n    }\n  >;\n};\n\nexport function createConstraint(\n  [firstItem, firstAttribute]: [string, ConstraintAttribute],\n  [secondItem, secondAttribute]: [string, ConstraintAttribute],\n  constant?: number\n): IBConstraint {\n  return {\n    $: {\n      firstItem,\n      firstAttribute,\n      secondItem,\n      secondAttribute,\n      constant,\n      // Prevent updating between runs\n      id: createConstraintId(firstItem, firstAttribute, secondItem, secondAttribute),\n    },\n  };\n}\n\nexport function createConstraintId(...attributes: string[]) {\n  return crypto.createHash('sha1').update(attributes.join('-')).digest('hex');\n}\n\nconst IMAGE_ID = 'EXPO-SplashScreen';\nconst CONTAINER_ID = 'EXPO-ContainerView';\n\nexport function removeImageFromSplashScreen(\n  xml: IBSplashScreenDocument,\n  { imageName }: { imageName: string }\n) {\n  const mainView = xml.document.scenes[0].scene[0].objects[0].viewController[0].view[0];\n\n  debug(`Remove all splash screen image elements`);\n\n  removeExisting(mainView.subviews[0].imageView, IMAGE_ID);\n\n  // Add Constraints\n  getAbsoluteConstraints(IMAGE_ID, CONTAINER_ID).forEach((constraint) => {\n    // <constraint firstItem=\"EXPO-SplashScreen\" firstAttribute=\"top\" secondItem=\"EXPO-ContainerView\" secondAttribute=\"top\" id=\"2VS-Uz-0LU\"/>\n    const constrainsArray = mainView.constraints[0].constraint;\n    removeExisting(constrainsArray, constraint);\n  });\n\n  // Add resource\n  const imageSection = xml.document.resources[0].image;\n\n  const existingImageIndex = imageSection.findIndex((image) => image.$.name === imageName);\n  if (existingImageIndex > -1) {\n    imageSection.splice(existingImageIndex, 1);\n  }\n  return xml;\n}\n\nfunction getAbsoluteConstraints(childId: string, parentId: string) {\n  return [\n    createConstraint([childId, 'top'], [parentId, 'top']),\n    createConstraint([childId, 'leading'], [parentId, 'leading']),\n    createConstraint([childId, 'trailing'], [parentId, 'trailing']),\n    createConstraint([childId, 'bottom'], [parentId, 'bottom']),\n  ];\n}\n\nexport function applyImageToSplashScreenXML(\n  xml: IBSplashScreenDocument,\n  {\n    imageName,\n    contentMode,\n  }: {\n    imageName: string;\n    contentMode: ImageContentMode;\n  }\n): IBSplashScreenDocument {\n  const width = 414;\n  const height = 736;\n\n  const imageView: IBImageView = {\n    $: {\n      id: IMAGE_ID,\n      userLabel: imageName,\n      image: imageName,\n      contentMode,\n      horizontalHuggingPriority: 251,\n      verticalHuggingPriority: 251,\n      clipsSubviews: true,\n      userInteractionEnabled: false,\n      translatesAutoresizingMaskIntoConstraints: false,\n    },\n    rect: [\n      {\n        $: {\n          key: 'frame',\n          x: 0.0,\n          y: 0.0,\n          width,\n          height,\n        },\n      },\n    ],\n  };\n\n  const mainView = xml.document.scenes[0].scene[0].objects[0].viewController[0].view[0];\n\n  // Add ImageView\n  ensureUniquePush(mainView.subviews[0].imageView, imageView);\n\n  // Add Constraints\n  getAbsoluteConstraints(IMAGE_ID, CONTAINER_ID).forEach((constraint) => {\n    // <constraint firstItem=\"EXPO-SplashScreen\" firstAttribute=\"top\" secondItem=\"EXPO-ContainerView\" secondAttribute=\"top\" id=\"2VS-Uz-0LU\"/>\n    const constrainsArray = mainView.constraints[0].constraint;\n    ensureUniquePush(constrainsArray, constraint);\n  });\n\n  // Add resource\n  const imageSection = xml.document.resources[0].image;\n\n  const existingImageIndex = imageSection.findIndex((image) => image.$.name === imageName);\n  if (existingImageIndex > -1) {\n    debug(`Removing existing IB image asset at index ${existingImageIndex}`);\n    imageSection.splice(existingImageIndex, 1);\n  }\n  imageSection.push({\n    // <image name=\"SplashScreen\" width=\"414\" height=\"736\"/>\n    $: {\n      name: imageName,\n      width,\n      height,\n    },\n  });\n\n  return xml;\n}\n\n/**\n * IB does not allow two items to have the same ID.\n * This method will add an item by first removing any existing item with the same `$.id`.\n */\nexport function ensureUniquePush<TItem extends { $: { id: string } }>(array: TItem[], item: TItem) {\n  if (!array) return array;\n  removeExisting(array, item);\n  array.push(item);\n  return array;\n}\n\nexport function removeExisting<TItem extends { $: { id: string } }>(\n  array: TItem[],\n  item: TItem | string\n) {\n  const id = typeof item === 'string' ? item : item.$?.id;\n  const existingItem = array?.findIndex((existingItem) => existingItem.$.id === id);\n  if (existingItem > -1) {\n    debug(`Removing existing IB item with id ${id}, from: %O`, array);\n    array.splice(existingItem, 1);\n  }\n  return array;\n}\n\n// Attempt to copy Xcode formatting.\nexport function toString(xml: any): string {\n  const builder = new Builder({\n    // @ts-expect-error: untyped\n    preserveChildrenOrder: true,\n    xmldec: {\n      version: '1.0',\n      encoding: 'UTF-8',\n    },\n    renderOpts: {\n      pretty: true,\n      indent: '    ',\n    },\n  });\n  return builder.buildObject(xml);\n}\n\n/** Parse string contents into an object. */\nexport function toObjectAsync(contents: string) {\n  return new Parser().parseStringPromise(contents);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}