{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fileNameFromContents = fileNameFromContents;\nexports.filterJsModules = filterJsModules;\nexports.getCssSerialAssets = getCssSerialAssets;\nexports.getFileName = getFileName;\nfunction _js() {\n  var data = require(\"metro/src/DeltaBundler/Serializers/helpers/js\");\n  _js = function _js() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _css() {\n  var data = require(\"../transform-worker/css\");\n  _css = function _css() {\n    return data;\n  };\n  return data;\n}\nfunction _hash() {\n  var data = require(\"../utils/hash\");\n  _hash = function _hash() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar STATIC_EXPORT_DIRECTORY = '_expo/static/css';\nfunction filterJsModules(dependencies, _ref) {\n  var processModuleFilter = _ref.processModuleFilter,\n    projectRoot = _ref.projectRoot;\n  var assets = [];\n  for (var module of dependencies.values()) {\n    if ((0, _js().isJsModule)(module) && processModuleFilter(module) && (0, _js().getJsOutput)(module).type === 'js/module' && _path().default.relative(projectRoot, module.path) !== 'package.json') {\n      assets.push(module);\n    }\n  }\n  return assets;\n}\nfunction getCssSerialAssets(dependencies, _ref2) {\n  var processModuleFilter = _ref2.processModuleFilter,\n    projectRoot = _ref2.projectRoot;\n  var assets = [];\n  for (var module of filterJsModules(dependencies, {\n    processModuleFilter: processModuleFilter,\n    projectRoot: projectRoot\n  })) {\n    var cssMetadata = getCssMetadata(module);\n    if (cssMetadata) {\n      var contents = cssMetadata.code;\n      var filename = _path().default.join(STATIC_EXPORT_DIRECTORY, fileNameFromContents({\n        filepath: module.path,\n        src: contents\n      }) + '.css');\n      var originFilename = _path().default.relative(projectRoot, module.path);\n      assets.push({\n        type: 'css',\n        originFilename: originFilename,\n        filename: filename,\n        source: contents,\n        metadata: {\n          hmrId: (0, _css().pathToHtmlSafeName)(originFilename)\n        }\n      });\n    }\n  }\n  return assets;\n}\nfunction getCssMetadata(module) {\n  var _module$output$;\n  var data = (_module$output$ = module.output[0]) === null || _module$output$ === void 0 ? void 0 : _module$output$.data;\n  if (data && typeof data === 'object' && 'css' in data) {\n    if (typeof data.css !== 'object' || !('code' in data.css)) {\n      throw new Error(`Unexpected CSS metadata in Metro module (${module.path}): ${JSON.stringify(data.css)}`);\n    }\n    return data.css;\n  }\n  return null;\n}\nfunction fileNameFromContents(_ref3) {\n  var filepath = _ref3.filepath,\n    src = _ref3.src;\n  return getFileName(filepath) + '-' + (0, _hash().hashString)(filepath + src);\n}\nfunction getFileName(module) {\n  return _path().default.basename(module).replace(/\\.[^.]+$/, '');\n}","map":{"version":3,"names":["_js","data","require","_path","_interopRequireDefault","_css","_hash","obj","__esModule","default","STATIC_EXPORT_DIRECTORY","filterJsModules","dependencies","_ref","processModuleFilter","projectRoot","assets","module","values","isJsModule","getJsOutput","type","relative","path","push","getCssSerialAssets","_ref2","cssMetadata","getCssMetadata","contents","code","filename","join","fileNameFromContents","filepath","src","originFilename","source","metadata","hmrId","pathToHtmlSafeName","_module$output$","output","css","Error","JSON","stringify","_ref3","getFileName","hashString","basename","replace"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\metro-config\\src\\serializer\\getCssDeps.ts"],"sourcesContent":["import type { Module } from 'metro';\nimport { getJsOutput, isJsModule } from 'metro/src/DeltaBundler/Serializers/helpers/js';\nimport path from 'path';\n\nimport { pathToHtmlSafeName } from '../transform-worker/css';\nimport { hashString } from '../utils/hash';\nimport { SerialAsset } from './serializerAssets';\n\nexport type ReadOnlyDependencies<T = any> = ReadonlyMap<string, Module<T>>;\n\ntype Options = {\n  processModuleFilter: (modules: Module) => boolean;\n  assetPlugins: readonly string[];\n  platform?: string | null;\n  projectRoot: string;\n  publicPath: string;\n};\n\ntype MetroModuleCSSMetadata = {\n  code: string;\n  lineCount: number;\n  map: any[];\n};\n\n// s = static\nconst STATIC_EXPORT_DIRECTORY = '_expo/static/css';\n\nexport type JSModule = Module<{\n  data: {\n    code: string;\n    map: unknown;\n    lineCount: number;\n    css?: {\n      code: string;\n      map: unknown;\n      lineCount: number;\n    };\n  };\n  type: 'js/module';\n}>;\n\nexport function filterJsModules(\n  dependencies: ReadOnlyDependencies,\n  { processModuleFilter, projectRoot }: Pick<Options, 'projectRoot' | 'processModuleFilter'>\n) {\n  const assets: JSModule[] = [];\n\n  for (const module of dependencies.values()) {\n    if (\n      isJsModule(module) &&\n      processModuleFilter(module) &&\n      getJsOutput(module).type === 'js/module' &&\n      path.relative(projectRoot, module.path) !== 'package.json'\n    ) {\n      assets.push(module as JSModule);\n    }\n  }\n  return assets;\n}\n\nexport function getCssSerialAssets<T extends any>(\n  dependencies: ReadOnlyDependencies<T>,\n  { processModuleFilter, projectRoot }: Pick<Options, 'projectRoot' | 'processModuleFilter'>\n): SerialAsset[] {\n  const assets: SerialAsset[] = [];\n\n  for (const module of filterJsModules(dependencies, { processModuleFilter, projectRoot })) {\n    const cssMetadata = getCssMetadata(module);\n    if (cssMetadata) {\n      const contents = cssMetadata.code;\n      const filename = path.join(\n        // Consistent location\n        STATIC_EXPORT_DIRECTORY,\n        // Hashed file contents + name for caching\n        fileNameFromContents({\n          filepath: module.path,\n          src: contents,\n        }) + '.css'\n      );\n      const originFilename = path.relative(projectRoot, module.path);\n      assets.push({\n        type: 'css',\n        originFilename,\n        filename,\n        source: contents,\n        metadata: {\n          hmrId: pathToHtmlSafeName(originFilename),\n        },\n      });\n    }\n  }\n\n  return assets;\n}\n\nfunction getCssMetadata(module: JSModule): MetroModuleCSSMetadata | null {\n  const data = module.output[0]?.data;\n  if (data && typeof data === 'object' && 'css' in data) {\n    if (typeof data.css !== 'object' || !('code' in (data as any).css)) {\n      throw new Error(\n        `Unexpected CSS metadata in Metro module (${module.path}): ${JSON.stringify(data.css)}`\n      );\n    }\n    return data.css as MetroModuleCSSMetadata;\n  }\n  return null;\n}\n\nexport function fileNameFromContents({ filepath, src }: { filepath: string; src: string }): string {\n  return getFileName(filepath) + '-' + hashString(filepath + src);\n}\n\nexport function getFileName(module: string) {\n  return path.basename(module).replace(/\\.[^.]+$/, '');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}