{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDefaultMetroResolver = getDefaultMetroResolver;\nexports.withMetroResolvers = withMetroResolvers;\nvar _metroErrors = require(\"./metroErrors\");\nvar _resolveFromProject = require(\"./resolveFromProject\");\nvar debug = require(\"debug\")(\"expo:metro:withMetroResolvers\");\nfunction getDefaultMetroResolver(projectRoot) {\n  var _importMetroResolverF = (0, _resolveFromProject).importMetroResolverFromProject(projectRoot),\n    resolve = _importMetroResolverF.resolve;\n  return function (context, moduleName, platform) {\n    return resolve(context, moduleName, platform);\n  };\n}\nfunction withMetroResolvers(config, projectRoot, resolvers) {\n  debug(`Appending ${resolvers.length} custom resolvers to Metro config. (has custom resolver: ${!!config.resolver.resolveRequest})`);\n  var originalResolveRequest = config.resolver.resolveRequest || getDefaultMetroResolver(projectRoot);\n  return _objectSpread(_objectSpread({}, config), {}, {\n    resolver: _objectSpread(_objectSpread({}, config.resolver), {}, {\n      resolveRequest: function resolveRequest(context, moduleName, platform) {\n        var universalContext = _objectSpread(_objectSpread({}, context), {}, {\n          preferNativePlatform: platform !== \"web\"\n        });\n        for (var resolver of resolvers) {\n          try {\n            var resolution = resolver(universalContext, moduleName, platform);\n            if (resolution) {\n              return resolution;\n            }\n          } catch (error) {\n            if (!config.resolver.resolveRequest) {\n              throw error;\n            }\n            var isResolutionError = (0, _metroErrors).isFailedToResolveNameError(error) || (0, _metroErrors).isFailedToResolvePathError(error);\n            if (!isResolutionError) {\n              throw error;\n            }\n            debug(`Custom resolver threw: ${error.constructor.name}. (module: ${moduleName}, platform: ${platform})`);\n          }\n        }\n        return originalResolveRequest(universalContext, moduleName, platform);\n      }\n    })\n  });\n}","map":{"version":3,"names":["_defineProperty","require","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","getDefaultMetroResolver","withMetroResolvers","_metroErrors","_resolveFromProject","debug","projectRoot","_importMetroResolverF","importMetroResolverFromProject","resolve","context","moduleName","platform","config","resolvers","resolver","resolveRequest","originalResolveRequest","universalContext","preferNativePlatform","resolution","error","isResolutionError","isFailedToResolveNameError","isFailedToResolvePathError","constructor","name"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\metro\\withMetroResolvers.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { ConfigT as MetroConfig } from 'metro-config';\nimport { ResolutionContext } from 'metro-resolver';\n\nimport { isFailedToResolveNameError, isFailedToResolvePathError } from './metroErrors';\nimport { importMetroResolverFromProject } from './resolveFromProject';\n\nconst debug = require('debug')('expo:metro:withMetroResolvers') as typeof console.log;\n\nexport type MetroResolver = NonNullable<MetroConfig['resolver']['resolveRequest']>;\n\n/** Expo Metro Resolvers can return `null` to skip without throwing an error. Metro Resolvers will throw either a `FailedToResolveNameError` or `FailedToResolvePathError`. */\nexport type ExpoCustomMetroResolver = (\n  ...args: Parameters<MetroResolver>\n) => ReturnType<MetroResolver> | null;\n\n/** @returns `MetroResolver` utilizing the upstream `resolve` method. */\nexport function getDefaultMetroResolver(projectRoot: string): MetroResolver {\n  const { resolve } = importMetroResolverFromProject(projectRoot);\n  return (context: ResolutionContext, moduleName: string, platform: string | null) => {\n    return resolve(context, moduleName, platform);\n  };\n}\n\n/**\n * Extend the Metro config `resolver.resolveRequest` method with additional resolvers that can\n * exit early by returning a `Resolution` or skip to the next resolver by returning `null`.\n *\n * @param config Metro config.\n * @param projectRoot path to the project root used to resolve the default Metro resolver.\n * @param resolvers custom MetroResolver to chain.\n * @returns a new `MetroConfig` with the `resolver.resolveRequest` method chained.\n */\nexport function withMetroResolvers(\n  config: MetroConfig,\n  projectRoot: string,\n  resolvers: ExpoCustomMetroResolver[]\n): MetroConfig {\n  debug(\n    `Appending ${\n      resolvers.length\n    } custom resolvers to Metro config. (has custom resolver: ${!!config.resolver.resolveRequest})`\n  );\n  const originalResolveRequest =\n    config.resolver.resolveRequest || getDefaultMetroResolver(projectRoot);\n\n  return {\n    ...config,\n    resolver: {\n      ...config.resolver,\n      resolveRequest(context, moduleName, platform) {\n        const universalContext = {\n          ...context,\n          preferNativePlatform: platform !== 'web',\n        };\n\n        for (const resolver of resolvers) {\n          try {\n            const resolution = resolver(universalContext, moduleName, platform);\n            if (resolution) {\n              return resolution;\n            }\n          } catch (error: any) {\n            // If no user-defined resolver, use Expo's default behavior.\n            // This prevents extraneous resolution attempts on failure.\n            if (!config.resolver.resolveRequest) {\n              throw error;\n            }\n\n            // If the error is directly related to a resolver not being able to resolve a module, then\n            // we can ignore the error and try the next resolver. Otherwise, we should throw the error.\n            const isResolutionError =\n              isFailedToResolveNameError(error) || isFailedToResolvePathError(error);\n            if (!isResolutionError) {\n              throw error;\n            }\n            debug(\n              `Custom resolver threw: ${error.constructor.name}. (module: ${moduleName}, platform: ${platform})`\n            );\n          }\n        }\n        // If we haven't returned by now, use the original resolver or upstream resolver.\n        return originalResolveRequest(universalContext, moduleName, platform);\n      },\n    },\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}