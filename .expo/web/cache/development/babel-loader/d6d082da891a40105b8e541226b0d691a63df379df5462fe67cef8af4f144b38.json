{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateDevelopmentCertificateFromCSR = exports.generateCSR = exports.signBufferRSASHA256AndVerify = exports.validateSelfSignedCertificate = exports.generateSelfSignedCodeSigningCertificate = exports.convertCSRPEMToCSR = exports.convertCSRToCSRPEM = exports.convertCertificatePEMToCertificate = exports.convertPrivateKeyPEMToPrivateKey = exports.convertPublicKeyPEMToPublicKey = exports.convertKeyPairPEMToKeyPair = exports.convertCertificateToCertificatePEM = exports.convertKeyPairToPEM = exports.generateKeyPair = exports.expoProjectInformationOID = void 0;\nvar assert_1 = __importDefault(require(\"assert\"));\nvar node_forge_1 = require(\"node-forge\");\nvar utils_1 = require(\"./utils\");\nexports.expoProjectInformationOID = '1.2.840.113556.1.8000.2554.43437.254.128.102.157.7894389.20439.2.1';\nfunction generateKeyPair() {\n  return node_forge_1.pki.rsa.generateKeyPair();\n}\nexports.generateKeyPair = generateKeyPair;\nfunction convertKeyPairToPEM(keyPair) {\n  return {\n    privateKeyPEM: node_forge_1.pki.privateKeyToPem(keyPair.privateKey),\n    publicKeyPEM: node_forge_1.pki.publicKeyToPem(keyPair.publicKey)\n  };\n}\nexports.convertKeyPairToPEM = convertKeyPairToPEM;\nfunction convertCertificateToCertificatePEM(certificate) {\n  return node_forge_1.pki.certificateToPem(certificate);\n}\nexports.convertCertificateToCertificatePEM = convertCertificateToCertificatePEM;\nfunction convertKeyPairPEMToKeyPair(_ref) {\n  var privateKeyPEM = _ref.privateKeyPEM,\n    publicKeyPEM = _ref.publicKeyPEM;\n  return {\n    privateKey: node_forge_1.pki.privateKeyFromPem(privateKeyPEM),\n    publicKey: node_forge_1.pki.publicKeyFromPem(publicKeyPEM)\n  };\n}\nexports.convertKeyPairPEMToKeyPair = convertKeyPairPEMToKeyPair;\nfunction convertPublicKeyPEMToPublicKey(publicKeyPEM) {\n  return node_forge_1.pki.publicKeyFromPem(publicKeyPEM);\n}\nexports.convertPublicKeyPEMToPublicKey = convertPublicKeyPEMToPublicKey;\nfunction convertPrivateKeyPEMToPrivateKey(privateKeyPEM) {\n  return node_forge_1.pki.privateKeyFromPem(privateKeyPEM);\n}\nexports.convertPrivateKeyPEMToPrivateKey = convertPrivateKeyPEMToPrivateKey;\nfunction convertCertificatePEMToCertificate(certificatePEM) {\n  return node_forge_1.pki.certificateFromPem(certificatePEM, true);\n}\nexports.convertCertificatePEMToCertificate = convertCertificatePEMToCertificate;\nfunction convertCSRToCSRPEM(csr) {\n  return node_forge_1.pki.certificationRequestToPem(csr);\n}\nexports.convertCSRToCSRPEM = convertCSRToCSRPEM;\nfunction convertCSRPEMToCSR(CSRPEM) {\n  return node_forge_1.pki.certificationRequestFromPem(CSRPEM, true);\n}\nexports.convertCSRPEMToCSR = convertCSRPEMToCSR;\nfunction generateSelfSignedCodeSigningCertificate(_ref2) {\n  var _ref2$keyPair = _ref2.keyPair,\n    publicKey = _ref2$keyPair.publicKey,\n    privateKey = _ref2$keyPair.privateKey,\n    validityNotBefore = _ref2.validityNotBefore,\n    validityNotAfter = _ref2.validityNotAfter,\n    commonName = _ref2.commonName;\n  var cert = node_forge_1.pki.createCertificate();\n  cert.publicKey = publicKey;\n  cert.serialNumber = (0, utils_1.toPositiveHex)(node_forge_1.util.bytesToHex(node_forge_1.random.getBytesSync(9)));\n  (0, assert_1.default)(validityNotAfter > validityNotBefore, 'validityNotAfter must be later than validityNotBefore');\n  cert.validity.notBefore = validityNotBefore;\n  cert.validity.notAfter = validityNotAfter;\n  var attrs = [{\n    name: 'commonName',\n    value: commonName\n  }];\n  cert.setSubject(attrs);\n  cert.setIssuer(attrs);\n  cert.setExtensions([{\n    name: 'keyUsage',\n    critical: true,\n    keyCertSign: false,\n    digitalSignature: true,\n    nonRepudiation: false,\n    keyEncipherment: false,\n    dataEncipherment: false\n  }, {\n    name: 'extKeyUsage',\n    critical: true,\n    serverAuth: false,\n    clientAuth: false,\n    codeSigning: true,\n    emailProtection: false,\n    timeStamping: false\n  }]);\n  cert.sign(privateKey, node_forge_1.md.sha256.create());\n  return cert;\n}\nexports.generateSelfSignedCodeSigningCertificate = generateSelfSignedCodeSigningCertificate;\nfunction arePublicKeysEqual(key1, key2) {\n  return key1.n.equals(key2.n) && key1.e.equals(key2.e);\n}\nfunction doPrivateAndPublicKeysMatch(privateKey, publicKey) {\n  return publicKey.n.equals(privateKey.n) && publicKey.e.equals(privateKey.e);\n}\nfunction validateSelfSignedCertificate(certificate, keyPair) {\n  if (certificate.issuer.hash !== certificate.subject.hash) {\n    throw new Error('Certificate issuer hash does not match subject hash, indicating certificate is not self-signed.');\n  }\n  var now = new Date();\n  if (certificate.validity.notBefore > now || certificate.validity.notAfter < now) {\n    throw new Error('Certificate validity expired');\n  }\n  var keyUsage = certificate.getExtension('keyUsage');\n  var digitalSignature = keyUsage.digitalSignature;\n  if (!keyUsage || !digitalSignature) {\n    throw new Error('X509v3 Key Usage: Digital Signature not present');\n  }\n  var extKeyUsage = certificate.getExtension('extKeyUsage');\n  var codeSigning = extKeyUsage.codeSigning;\n  if (!extKeyUsage || !codeSigning) {\n    throw new Error('X509v3 Extended Key Usage: Code Signing not present');\n  }\n  var isValid = certificate.verify(certificate);\n  if (!isValid) {\n    throw new Error('Certificate signature not valid');\n  }\n  var certificatePublicKey = certificate.publicKey;\n  if (!arePublicKeysEqual(certificatePublicKey, keyPair.publicKey)) {\n    throw new Error('Certificate pubic key does not match key pair public key');\n  }\n  if (!doPrivateAndPublicKeysMatch(keyPair.privateKey, keyPair.publicKey)) {\n    throw new Error('keyPair key mismatch');\n  }\n}\nexports.validateSelfSignedCertificate = validateSelfSignedCertificate;\nfunction signBufferRSASHA256AndVerify(privateKey, certificate, bufferToSign) {\n  var digest = node_forge_1.md.sha256.create().update(bufferToSign.toString('binary'));\n  var digestSignature = privateKey.sign(digest);\n  var isValidSignature = certificate.publicKey.verify(digest.digest().getBytes(), digestSignature);\n  if (!isValidSignature) {\n    throw new Error('Signature generated with private key not valid for certificate');\n  }\n  return node_forge_1.util.encode64(digestSignature);\n}\nexports.signBufferRSASHA256AndVerify = signBufferRSASHA256AndVerify;\nfunction generateCSR(keyPair, commonName) {\n  var csr = node_forge_1.pki.createCertificationRequest();\n  csr.publicKey = keyPair.publicKey;\n  var attrs = [{\n    name: 'commonName',\n    value: commonName\n  }];\n  csr.setSubject(attrs);\n  csr.sign(keyPair.privateKey, node_forge_1.md.sha256.create());\n  return csr;\n}\nexports.generateCSR = generateCSR;\nfunction generateDevelopmentCertificateFromCSR(issuerPrivateKey, issuerCertificate, csr, appId, scopeKey) {\n  (0, assert_1.default)(csr.verify(csr), 'CSR not self-signed');\n  var certificate = node_forge_1.pki.createCertificate();\n  certificate.publicKey = csr.publicKey;\n  certificate.serialNumber = (0, utils_1.toPositiveHex)(node_forge_1.util.bytesToHex(node_forge_1.random.getBytesSync(9)));\n  certificate.setSubject(csr.subject.attributes);\n  certificate.validity.notBefore = new Date();\n  certificate.validity.notBefore.setDate(certificate.validity.notBefore.getDate() - 1);\n  certificate.validity.notAfter = new Date();\n  certificate.validity.notAfter.setDate(certificate.validity.notBefore.getDate() + 30);\n  certificate.setIssuer(issuerCertificate.subject.attributes);\n  certificate.setExtensions([{\n    name: 'keyUsage',\n    critical: true,\n    keyCertSign: false,\n    digitalSignature: true,\n    nonRepudiation: false,\n    keyEncipherment: false,\n    dataEncipherment: false\n  }, {\n    name: 'extKeyUsage',\n    critical: true,\n    serverAuth: false,\n    clientAuth: false,\n    codeSigning: true,\n    emailProtection: false,\n    timeStamping: false\n  }, {\n    name: 'expoProjectInformation',\n    id: exports.expoProjectInformationOID,\n    value: `${appId},${scopeKey}`\n  }]);\n  certificate.sign(issuerPrivateKey, node_forge_1.md.sha256.create());\n  return certificate;\n}\nexports.generateDevelopmentCertificateFromCSR = generateDevelopmentCertificateFromCSR;","map":{"version":3,"names":["assert_1","__importDefault","require","node_forge_1","utils_1","exports","expoProjectInformationOID","generateKeyPair","pki","rsa","convertKeyPairToPEM","keyPair","privateKeyPEM","privateKeyToPem","privateKey","publicKeyPEM","publicKeyToPem","publicKey","convertCertificateToCertificatePEM","certificate","certificateToPem","convertKeyPairPEMToKeyPair","_ref","privateKeyFromPem","publicKeyFromPem","convertPublicKeyPEMToPublicKey","convertPrivateKeyPEMToPrivateKey","convertCertificatePEMToCertificate","certificatePEM","certificateFromPem","convertCSRToCSRPEM","csr","certificationRequestToPem","convertCSRPEMToCSR","CSRPEM","certificationRequestFromPem","generateSelfSignedCodeSigningCertificate","_ref2","_ref2$keyPair","validityNotBefore","validityNotAfter","commonName","cert","createCertificate","serialNumber","toPositiveHex","util","bytesToHex","random","getBytesSync","default","validity","notBefore","notAfter","attrs","name","value","setSubject","setIssuer","setExtensions","critical","keyCertSign","digitalSignature","nonRepudiation","keyEncipherment","dataEncipherment","serverAuth","clientAuth","codeSigning","emailProtection","timeStamping","sign","md","sha256","create","arePublicKeysEqual","key1","key2","n","equals","e","doPrivateAndPublicKeysMatch","validateSelfSignedCertificate","issuer","hash","subject","Error","now","Date","keyUsage","getExtension","extKeyUsage","isValid","verify","certificatePublicKey","signBufferRSASHA256AndVerify","bufferToSign","digest","update","toString","digestSignature","isValidSignature","getBytes","encode64","generateCSR","createCertificationRequest","generateDevelopmentCertificateFromCSR","issuerPrivateKey","issuerCertificate","appId","scopeKey","attributes","setDate","getDate","id"],"sources":["../src/main.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}