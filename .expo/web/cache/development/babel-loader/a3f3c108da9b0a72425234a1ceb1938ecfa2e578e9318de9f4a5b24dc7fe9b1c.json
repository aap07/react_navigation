{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addBuildSourceFileToGroup = addBuildSourceFileToGroup;\nexports.addFileToGroupAndLink = addFileToGroupAndLink;\nexports.addFramework = addFramework;\nexports.addResourceFileToGroup = addResourceFileToGroup;\nexports.ensureGroupRecursively = ensureGroupRecursively;\nexports.getApplicationNativeTarget = getApplicationNativeTarget;\nexports.getBuildConfigurationForListIdAndName = getBuildConfigurationForListIdAndName;\nexports.getBuildConfigurationsForListId = getBuildConfigurationsForListId;\nexports.getHackyProjectName = getHackyProjectName;\nexports.getPbxproj = getPbxproj;\nexports.getProductName = getProductName;\nexports.getProjectName = getProjectName;\nexports.getProjectSection = getProjectSection;\nexports.getXCConfigurationListEntries = getXCConfigurationListEntries;\nexports.isBuildConfig = isBuildConfig;\nexports.isNotComment = isNotComment;\nexports.isNotTestHost = isNotTestHost;\nexports.resolvePathOrProject = resolvePathOrProject;\nexports.sanitizedName = sanitizedName;\nexports.unquote = unquote;\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n  _assert = function _assert() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _slugify() {\n  var data = _interopRequireDefault(require(\"slugify\"));\n  _slugify = function _slugify() {\n    return data;\n  };\n  return data;\n}\nfunction _xcode() {\n  var data = _interopRequireDefault(require(\"xcode\"));\n  _xcode = function _xcode() {\n    return data;\n  };\n  return data;\n}\nfunction _pbxFile() {\n  var data = _interopRequireDefault(require(\"xcode/lib/pbxFile\"));\n  _pbxFile = function _pbxFile() {\n    return data;\n  };\n  return data;\n}\nfunction _warnings() {\n  var data = require(\"../../utils/warnings\");\n  _warnings = function _warnings() {\n    return data;\n  };\n  return data;\n}\nfunction Paths() {\n  var data = _interopRequireWildcard(require(\"../Paths\"));\n  Paths = function Paths() {\n    return data;\n  };\n  return data;\n}\nfunction _string() {\n  var data = require(\"./string\");\n  _string = function _string() {\n    return data;\n  };\n  return data;\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getProjectName(projectRoot) {\n  var sourceRoot = Paths().getSourceRoot(projectRoot);\n  return _path().default.basename(sourceRoot);\n}\nfunction resolvePathOrProject(projectRootOrProject) {\n  if (typeof projectRootOrProject === 'string') {\n    try {\n      return getPbxproj(projectRootOrProject);\n    } catch (_unused) {\n      return null;\n    }\n  }\n  return projectRootOrProject;\n}\nfunction sanitizedName(name) {\n  return sanitizedNameForProjects(name) || sanitizedNameForProjects((0, _slugify().default)(name)) || 'app';\n}\nfunction sanitizedNameForProjects(name) {\n  return name.replace(/[\\W_]+/g, '').normalize('NFD').replace(/[\\u0300-\\u036f]/g, '');\n}\nfunction getHackyProjectName(projectRoot, config) {\n  try {\n    return getProjectName(projectRoot);\n  } catch (_unused2) {\n    var projectName = config.name;\n    (0, _assert().default)(projectName, 'Your project needs a name in app.json/app.config.js.');\n    return sanitizedName(projectName);\n  }\n}\nfunction createProjectFileForGroup(_ref) {\n  var filepath = _ref.filepath,\n    group = _ref.group;\n  var file = new (_pbxFile().default)(filepath);\n  var conflictingFile = group.children.find(function (child) {\n    return child.comment === file.basename;\n  });\n  if (conflictingFile) {\n    return null;\n  }\n  return file;\n}\nfunction addResourceFileToGroup(_ref2) {\n  var filepath = _ref2.filepath,\n    groupName = _ref2.groupName,\n    isBuildFile = _ref2.isBuildFile,\n    project = _ref2.project,\n    verbose = _ref2.verbose,\n    targetUuid = _ref2.targetUuid;\n  return addFileToGroupAndLink({\n    filepath: filepath,\n    groupName: groupName,\n    project: project,\n    verbose: verbose,\n    targetUuid: targetUuid,\n    addFileToProject: function addFileToProject(_ref3) {\n      var project = _ref3.project,\n        file = _ref3.file;\n      project.addToPbxFileReferenceSection(file);\n      if (isBuildFile) {\n        project.addToPbxBuildFileSection(file);\n      }\n      project.addToPbxResourcesBuildPhase(file);\n    }\n  });\n}\nfunction addBuildSourceFileToGroup(_ref4) {\n  var filepath = _ref4.filepath,\n    groupName = _ref4.groupName,\n    project = _ref4.project,\n    verbose = _ref4.verbose,\n    targetUuid = _ref4.targetUuid;\n  return addFileToGroupAndLink({\n    filepath: filepath,\n    groupName: groupName,\n    project: project,\n    verbose: verbose,\n    targetUuid: targetUuid,\n    addFileToProject: function addFileToProject(_ref5) {\n      var project = _ref5.project,\n        file = _ref5.file;\n      project.addToPbxFileReferenceSection(file);\n      project.addToPbxBuildFileSection(file);\n      project.addToPbxSourcesBuildPhase(file);\n    }\n  });\n}\nfunction addFileToGroupAndLink(_ref6) {\n  var filepath = _ref6.filepath,\n    groupName = _ref6.groupName,\n    project = _ref6.project,\n    verbose = _ref6.verbose,\n    addFileToProject = _ref6.addFileToProject,\n    targetUuid = _ref6.targetUuid;\n  var group = pbxGroupByPathOrAssert(project, groupName);\n  var file = createProjectFileForGroup({\n    filepath: filepath,\n    group: group\n  });\n  if (!file) {\n    if (verbose) {\n      (0, _warnings().addWarningIOS)('ios-xcode-project', `Skipped adding duplicate file \"${filepath}\" to PBXGroup named \"${groupName}\"`);\n    }\n    return project;\n  }\n  if (targetUuid != null) {\n    file.target = targetUuid;\n  } else {\n    var applicationNativeTarget = project.getTarget('com.apple.product-type.application');\n    file.target = applicationNativeTarget === null || applicationNativeTarget === void 0 ? void 0 : applicationNativeTarget.uuid;\n  }\n  file.uuid = project.generateUuid();\n  file.fileRef = project.generateUuid();\n  addFileToProject({\n    project: project,\n    file: file\n  });\n  group.children.push({\n    value: file.fileRef,\n    comment: file.basename\n  });\n  return project;\n}\nfunction getApplicationNativeTarget(_ref7) {\n  var project = _ref7.project,\n    projectName = _ref7.projectName;\n  var applicationNativeTarget = project.getTarget('com.apple.product-type.application');\n  (0, _assert().default)(applicationNativeTarget, `Couldn't locate application PBXNativeTarget in '.xcodeproj' file.`);\n  (0, _assert().default)(String(applicationNativeTarget.target.name) === projectName, `Application native target name mismatch. Expected ${projectName}, but found ${applicationNativeTarget.target.name}.`);\n  return applicationNativeTarget;\n}\nfunction addFramework(_ref8) {\n  var project = _ref8.project,\n    projectName = _ref8.projectName,\n    framework = _ref8.framework;\n  var target = getApplicationNativeTarget({\n    project: project,\n    projectName: projectName\n  });\n  return project.addFramework(framework, {\n    target: target.uuid\n  });\n}\nfunction splitPath(path) {\n  return path.split('/');\n}\nvar findGroup = function findGroup(group, name) {\n  if (!group) {\n    return undefined;\n  }\n  return group.children.find(function (group) {\n    return group.comment === name;\n  });\n};\nfunction findGroupInsideGroup(project, group, name) {\n  var foundGroup = findGroup(group, name);\n  if (foundGroup) {\n    var _project$getPBXGroupB;\n    return (_project$getPBXGroupB = project.getPBXGroupByKey(foundGroup.value)) !== null && _project$getPBXGroupB !== void 0 ? _project$getPBXGroupB : null;\n  }\n  return null;\n}\nfunction pbxGroupByPathOrAssert(project, path) {\n  var _project$getFirstProj = project.getFirstProject(),\n    firstProject = _project$getFirstProj.firstProject;\n  var group = project.getPBXGroupByKey(firstProject.mainGroup);\n  var components = splitPath(path);\n  for (var name of components) {\n    var nextGroup = findGroupInsideGroup(project, group, name);\n    if (nextGroup) {\n      group = nextGroup;\n    } else {\n      break;\n    }\n  }\n  if (!group) {\n    throw Error(`Xcode PBXGroup with name \"${path}\" could not be found in the Xcode project.`);\n  }\n  return group;\n}\nfunction ensureGroupRecursively(project, filepath) {\n  var _topMostGroup;\n  var components = splitPath(filepath);\n  var hasChild = function hasChild(group, name) {\n    return group.children.find(function (_ref9) {\n      var comment = _ref9.comment;\n      return comment === name;\n    });\n  };\n  var _project$getFirstProj2 = project.getFirstProject(),\n    firstProject = _project$getFirstProj2.firstProject;\n  var topMostGroup = project.getPBXGroupByKey(firstProject.mainGroup);\n  for (var pathComponent of components) {\n    if (topMostGroup && !hasChild(topMostGroup, pathComponent)) {\n      topMostGroup.children.push({\n        comment: pathComponent,\n        value: project.pbxCreateGroup(pathComponent, '\"\"')\n      });\n    }\n    topMostGroup = project.pbxGroupByName(pathComponent);\n  }\n  return (_topMostGroup = topMostGroup) !== null && _topMostGroup !== void 0 ? _topMostGroup : null;\n}\nfunction getPbxproj(projectRoot) {\n  var projectPath = Paths().getPBXProjectPath(projectRoot);\n  var project = _xcode().default.project(projectPath);\n  project.parseSync();\n  return project;\n}\nfunction getProductName(project) {\n  var productName = '$(TARGET_NAME)';\n  try {\n    productName = project.productName;\n  } catch (_unused3) {}\n  if (productName === '$(TARGET_NAME)') {\n    var _project$getFirstTarg, _project$getFirstTarg2;\n    var targetName = (_project$getFirstTarg = project.getFirstTarget()) === null || _project$getFirstTarg === void 0 ? void 0 : (_project$getFirstTarg2 = _project$getFirstTarg.firstTarget) === null || _project$getFirstTarg2 === void 0 ? void 0 : _project$getFirstTarg2.productName;\n    productName = targetName !== null && targetName !== void 0 ? targetName : productName;\n  }\n  return productName;\n}\nfunction getProjectSection(project) {\n  return project.pbxProjectSection();\n}\nfunction getXCConfigurationListEntries(project) {\n  var lists = project.pbxXCConfigurationList();\n  return Object.entries(lists).filter(isNotComment);\n}\nfunction getBuildConfigurationsForListId(project, configurationListId) {\n  var configurationListEntries = getXCConfigurationListEntries(project);\n  var _configurationListEnt = configurationListEntries.find(function (_ref10) {\n      var _ref11 = _slicedToArray(_ref10, 1),\n        key = _ref11[0];\n      return key === configurationListId;\n    }),\n    _configurationListEnt2 = _slicedToArray(_configurationListEnt, 2),\n    configurationList = _configurationListEnt2[1];\n  var buildConfigurations = configurationList.buildConfigurations.map(function (i) {\n    return i.value;\n  });\n  return Object.entries(project.pbxXCBuildConfigurationSection()).filter(isNotComment).filter(isBuildConfig).filter(function (_ref12) {\n    var _ref13 = _slicedToArray(_ref12, 1),\n      key = _ref13[0];\n    return buildConfigurations.includes(key);\n  });\n}\nfunction getBuildConfigurationForListIdAndName(project, _ref14) {\n  var configurationListId = _ref14.configurationListId,\n    buildConfiguration = _ref14.buildConfiguration;\n  var xcBuildConfigurationEntry = getBuildConfigurationsForListId(project, configurationListId).find(function (i) {\n    return (0, _string().trimQuotes)(i[1].name) === buildConfiguration;\n  });\n  if (!xcBuildConfigurationEntry) {\n    throw new Error(`Build configuration '${buildConfiguration}' does not exist in list with id '${configurationListId}'`);\n  }\n  return xcBuildConfigurationEntry;\n}\nfunction isBuildConfig(_ref15) {\n  var _ref16 = _slicedToArray(_ref15, 2),\n    sectionItem = _ref16[1];\n  return sectionItem.isa === 'XCBuildConfiguration';\n}\nfunction isNotTestHost(_ref17) {\n  var _ref18 = _slicedToArray(_ref17, 2),\n    sectionItem = _ref18[1];\n  return !sectionItem.buildSettings.TEST_HOST;\n}\nfunction isNotComment(_ref19) {\n  var _ref20 = _slicedToArray(_ref19, 1),\n    key = _ref20[0];\n  return !key.endsWith(`_comment`);\n}\nfunction unquote(value) {\n  var _value$match$, _value$match;\n  if (typeof value === 'number') {\n    value = String(value);\n  }\n  return (_value$match$ = (_value$match = value.match(/^\"(.*)\"$/)) === null || _value$match === void 0 ? void 0 : _value$match[1]) !== null && _value$match$ !== void 0 ? _value$match$ : value;\n}","map":{"version":3,"names":["_assert","data","_interopRequireDefault","require","_path","_slugify","_xcode","_pbxFile","_warnings","Paths","_interopRequireWildcard","_string","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","getProjectName","projectRoot","sourceRoot","getSourceRoot","basename","resolvePathOrProject","projectRootOrProject","getPbxproj","_unused","sanitizedName","name","sanitizedNameForProjects","replace","normalize","getHackyProjectName","config","_unused2","projectName","createProjectFileForGroup","_ref","filepath","group","file","conflictingFile","children","find","child","comment","addResourceFileToGroup","_ref2","groupName","isBuildFile","project","verbose","targetUuid","addFileToGroupAndLink","addFileToProject","_ref3","addToPbxFileReferenceSection","addToPbxBuildFileSection","addToPbxResourcesBuildPhase","addBuildSourceFileToGroup","_ref4","_ref5","addToPbxSourcesBuildPhase","_ref6","pbxGroupByPathOrAssert","addWarningIOS","target","applicationNativeTarget","getTarget","uuid","generateUuid","fileRef","push","value","getApplicationNativeTarget","_ref7","String","addFramework","_ref8","framework","splitPath","path","split","findGroup","undefined","findGroupInsideGroup","foundGroup","_project$getPBXGroupB","getPBXGroupByKey","_project$getFirstProj","getFirstProject","firstProject","mainGroup","components","nextGroup","Error","ensureGroupRecursively","_topMostGroup","hasChild","_ref9","_project$getFirstProj2","topMostGroup","pathComponent","pbxCreateGroup","pbxGroupByName","projectPath","getPBXProjectPath","parseSync","getProductName","productName","_unused3","_project$getFirstTarg","_project$getFirstTarg2","targetName","getFirstTarget","firstTarget","getProjectSection","pbxProjectSection","getXCConfigurationListEntries","lists","pbxXCConfigurationList","entries","filter","isNotComment","getBuildConfigurationsForListId","configurationListId","configurationListEntries","_configurationListEnt","_ref10","_ref11","_slicedToArray","_configurationListEnt2","configurationList","buildConfigurations","map","i","pbxXCBuildConfigurationSection","isBuildConfig","_ref12","_ref13","includes","getBuildConfigurationForListIdAndName","_ref14","buildConfiguration","xcBuildConfigurationEntry","trimQuotes","_ref15","_ref16","sectionItem","isa","isNotTestHost","_ref17","_ref18","buildSettings","TEST_HOST","_ref19","_ref20","endsWith","unquote","_value$match$","_value$match","match"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\ios\\utils\\Xcodeproj.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport assert from 'assert';\nimport path from 'path';\nimport slugify from 'slugify';\nimport xcode, {\n  PBXFile,\n  PBXGroup,\n  PBXNativeTarget,\n  PBXProject,\n  UUID,\n  XCBuildConfiguration,\n  XCConfigurationList,\n  XcodeProject,\n} from 'xcode';\nimport pbxFile from 'xcode/lib/pbxFile';\n\nimport { addWarningIOS } from '../../utils/warnings';\nimport * as Paths from '../Paths';\nimport { trimQuotes } from './string';\n\nexport type ProjectSectionEntry = [string, PBXProject];\n\nexport type NativeTargetSection = Record<string, PBXNativeTarget>;\n\nexport type NativeTargetSectionEntry = [string, PBXNativeTarget];\n\nexport type ConfigurationLists = Record<string, XCConfigurationList>;\n\nexport type ConfigurationListEntry = [string, XCConfigurationList];\n\nexport type ConfigurationSectionEntry = [string, XCBuildConfiguration];\n\nexport function getProjectName(projectRoot: string) {\n  const sourceRoot = Paths.getSourceRoot(projectRoot);\n  return path.basename(sourceRoot);\n}\n\nexport function resolvePathOrProject(\n  projectRootOrProject: string | XcodeProject\n): XcodeProject | null {\n  if (typeof projectRootOrProject === 'string') {\n    try {\n      return getPbxproj(projectRootOrProject);\n    } catch {\n      return null;\n    }\n  }\n  return projectRootOrProject;\n}\n\n// TODO: come up with a better solution for using app.json expo.name in various places\nexport function sanitizedName(name: string) {\n  // Default to the name `app` when every safe character has been sanitized\n  return sanitizedNameForProjects(name) || sanitizedNameForProjects(slugify(name)) || 'app';\n}\n\nfunction sanitizedNameForProjects(name: string) {\n  return name\n    .replace(/[\\W_]+/g, '')\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f]/g, '');\n}\n\n// TODO: it's silly and kind of fragile that we look at app config to determine\n// the ios project paths. Overall this function needs to be revamped, just a\n// placeholder for now! Make this more robust when we support applying config\n// at any time (currently it's only applied on eject).\nexport function getHackyProjectName(projectRoot: string, config: ExpoConfig): string {\n  // Attempt to get the current ios folder name (apply).\n  try {\n    return getProjectName(projectRoot);\n  } catch {\n    // If no iOS project exists then create a new one (eject).\n    const projectName = config.name;\n    assert(projectName, 'Your project needs a name in app.json/app.config.js.');\n    return sanitizedName(projectName);\n  }\n}\n\nfunction createProjectFileForGroup({ filepath, group }: { filepath: string; group: PBXGroup }) {\n  const file = new pbxFile(filepath);\n\n  const conflictingFile = group.children.find((child) => child.comment === file.basename);\n  if (conflictingFile) {\n    // This can happen when a file like the GoogleService-Info.plist needs to be added and the eject command is run twice.\n    // Not much we can do here since it might be a conflicting file.\n    return null;\n  }\n  return file;\n}\n\n/**\n * Add a resource file (ex: `SplashScreen.storyboard`, `Images.xcassets`) to an Xcode project.\n * This is akin to creating a new code file in Xcode with `⌘+n`.\n */\nexport function addResourceFileToGroup({\n  filepath,\n  groupName,\n  // Should add to `PBXBuildFile Section`\n  isBuildFile,\n  project,\n  verbose,\n  targetUuid,\n}: {\n  filepath: string;\n  groupName: string;\n  isBuildFile?: boolean;\n  project: XcodeProject;\n  verbose?: boolean;\n  targetUuid?: string;\n}): XcodeProject {\n  return addFileToGroupAndLink({\n    filepath,\n    groupName,\n    project,\n    verbose,\n    targetUuid,\n    addFileToProject({ project, file }) {\n      project.addToPbxFileReferenceSection(file);\n      if (isBuildFile) {\n        project.addToPbxBuildFileSection(file);\n      }\n      project.addToPbxResourcesBuildPhase(file);\n    },\n  });\n}\n\n/**\n * Add a build source file (ex: `AppDelegate.m`, `ViewController.swift`) to an Xcode project.\n * This is akin to creating a new code file in Xcode with `⌘+n`.\n */\nexport function addBuildSourceFileToGroup({\n  filepath,\n  groupName,\n  project,\n  verbose,\n  targetUuid,\n}: {\n  filepath: string;\n  groupName: string;\n  project: XcodeProject;\n  verbose?: boolean;\n  targetUuid?: string;\n}): XcodeProject {\n  return addFileToGroupAndLink({\n    filepath,\n    groupName,\n    project,\n    verbose,\n    targetUuid,\n    addFileToProject({ project, file }) {\n      project.addToPbxFileReferenceSection(file);\n      project.addToPbxBuildFileSection(file);\n      project.addToPbxSourcesBuildPhase(file);\n    },\n  });\n}\n\n// TODO(brentvatne): I couldn't figure out how to do this with an existing\n// higher level function exposed by the xcode library, but we should find out how to do\n// that and replace this with it\nexport function addFileToGroupAndLink({\n  filepath,\n  groupName,\n  project,\n  verbose,\n  addFileToProject,\n  targetUuid,\n}: {\n  filepath: string;\n  groupName: string;\n  project: XcodeProject;\n  verbose?: boolean;\n  targetUuid?: string;\n  addFileToProject: (props: { file: PBXFile; project: XcodeProject }) => void;\n}): XcodeProject {\n  const group = pbxGroupByPathOrAssert(project, groupName);\n\n  const file = createProjectFileForGroup({ filepath, group });\n\n  if (!file) {\n    if (verbose) {\n      // This can happen when a file like the GoogleService-Info.plist needs to be added and the eject command is run twice.\n      // Not much we can do here since it might be a conflicting file.\n      addWarningIOS(\n        'ios-xcode-project',\n        `Skipped adding duplicate file \"${filepath}\" to PBXGroup named \"${groupName}\"`\n      );\n    }\n    return project;\n  }\n\n  if (targetUuid != null) {\n    file.target = targetUuid;\n  } else {\n    const applicationNativeTarget = project.getTarget('com.apple.product-type.application');\n    file.target = applicationNativeTarget?.uuid;\n  }\n\n  file.uuid = project.generateUuid();\n  file.fileRef = project.generateUuid();\n\n  addFileToProject({ project, file });\n\n  group.children.push({\n    value: file.fileRef,\n    comment: file.basename,\n  });\n  return project;\n}\n\nexport function getApplicationNativeTarget({\n  project,\n  projectName,\n}: {\n  project: XcodeProject;\n  projectName: string;\n}) {\n  const applicationNativeTarget = project.getTarget('com.apple.product-type.application');\n  assert(\n    applicationNativeTarget,\n    `Couldn't locate application PBXNativeTarget in '.xcodeproj' file.`\n  );\n  assert(\n    String(applicationNativeTarget.target.name) === projectName,\n    `Application native target name mismatch. Expected ${projectName}, but found ${applicationNativeTarget.target.name}.`\n  );\n  return applicationNativeTarget;\n}\n\n/**\n * Add a framework to the default app native target.\n *\n * @param projectName Name of the PBX project.\n * @param framework String ending in `.framework`, i.e. `StoreKit.framework`\n */\nexport function addFramework({\n  project,\n  projectName,\n  framework,\n}: {\n  project: XcodeProject;\n  projectName: string;\n  framework: string;\n}) {\n  const target = getApplicationNativeTarget({ project, projectName });\n  return project.addFramework(framework, { target: target.uuid });\n}\n\nfunction splitPath(path: string): string[] {\n  // TODO: Should we account for other platforms that may not use `/`\n  return path.split('/');\n}\n\nconst findGroup = (\n  group: PBXGroup | undefined,\n  name: string\n):\n  | {\n      value: UUID;\n      comment?: string;\n    }\n  | undefined => {\n  if (!group) {\n    return undefined;\n  }\n\n  return group.children.find((group) => group.comment === name);\n};\n\nfunction findGroupInsideGroup(\n  project: XcodeProject,\n  group: PBXGroup | undefined,\n  name: string\n): null | PBXGroup {\n  const foundGroup = findGroup(group, name);\n  if (foundGroup) {\n    return project.getPBXGroupByKey(foundGroup.value) ?? null;\n  }\n  return null;\n}\n\nfunction pbxGroupByPathOrAssert(project: XcodeProject, path: string): PBXGroup {\n  const { firstProject } = project.getFirstProject();\n\n  let group = project.getPBXGroupByKey(firstProject.mainGroup);\n\n  const components = splitPath(path);\n  for (const name of components) {\n    const nextGroup = findGroupInsideGroup(project, group, name);\n    if (nextGroup) {\n      group = nextGroup;\n    } else {\n      break;\n    }\n  }\n\n  if (!group) {\n    throw Error(`Xcode PBXGroup with name \"${path}\" could not be found in the Xcode project.`);\n  }\n\n  return group;\n}\n\nexport function ensureGroupRecursively(project: XcodeProject, filepath: string): PBXGroup | null {\n  const components = splitPath(filepath);\n  const hasChild = (group: PBXGroup, name: string) =>\n    group.children.find(({ comment }) => comment === name);\n  const { firstProject } = project.getFirstProject();\n\n  let topMostGroup = project.getPBXGroupByKey(firstProject.mainGroup);\n\n  for (const pathComponent of components) {\n    if (topMostGroup && !hasChild(topMostGroup, pathComponent)) {\n      topMostGroup.children.push({\n        comment: pathComponent,\n        value: project.pbxCreateGroup(pathComponent, '\"\"'),\n      });\n    }\n    topMostGroup = project.pbxGroupByName(pathComponent);\n  }\n  return topMostGroup ?? null;\n}\n\n/**\n * Get the pbxproj for the given path\n */\nexport function getPbxproj(projectRoot: string): XcodeProject {\n  const projectPath = Paths.getPBXProjectPath(projectRoot);\n  const project = xcode.project(projectPath);\n  project.parseSync();\n  return project;\n}\n\n/**\n * Get the productName for a project, if the name is using a variable `$(TARGET_NAME)`, then attempt to get the value of that variable.\n *\n * @param project\n */\nexport function getProductName(project: XcodeProject): string {\n  let productName = '$(TARGET_NAME)';\n  try {\n    // If the product name is numeric, this will fail (it's a getter).\n    // If the bundle identifier' final component is only numeric values, then the PRODUCT_NAME\n    // will be a numeric value, this results in a bug where the product name isn't useful,\n    // i.e. `com.bacon.001` -> `1` -- in this case, use the first target name.\n    productName = project.productName;\n  } catch {}\n\n  if (productName === '$(TARGET_NAME)') {\n    const targetName = project.getFirstTarget()?.firstTarget?.productName;\n    productName = targetName ?? productName;\n  }\n\n  return productName;\n}\n\nexport function getProjectSection(project: XcodeProject) {\n  return project.pbxProjectSection();\n}\n\nexport function getXCConfigurationListEntries(project: XcodeProject): ConfigurationListEntry[] {\n  const lists = project.pbxXCConfigurationList();\n  return Object.entries(lists).filter(isNotComment);\n}\n\nexport function getBuildConfigurationsForListId(\n  project: XcodeProject,\n  configurationListId: string\n): ConfigurationSectionEntry[] {\n  const configurationListEntries = getXCConfigurationListEntries(project);\n  const [, configurationList] = configurationListEntries.find(\n    ([key]) => key === configurationListId\n  ) as ConfigurationListEntry;\n\n  const buildConfigurations = configurationList.buildConfigurations.map((i) => i.value);\n\n  return Object.entries(project.pbxXCBuildConfigurationSection())\n    .filter(isNotComment)\n    .filter(isBuildConfig)\n    .filter(([key]: ConfigurationSectionEntry) => buildConfigurations.includes(key));\n}\n\nexport function getBuildConfigurationForListIdAndName(\n  project: XcodeProject,\n  {\n    configurationListId,\n    buildConfiguration,\n  }: { configurationListId: string; buildConfiguration: string }\n): ConfigurationSectionEntry {\n  const xcBuildConfigurationEntry = getBuildConfigurationsForListId(\n    project,\n    configurationListId\n  ).find((i) => trimQuotes(i[1].name) === buildConfiguration);\n  if (!xcBuildConfigurationEntry) {\n    throw new Error(\n      `Build configuration '${buildConfiguration}' does not exist in list with id '${configurationListId}'`\n    );\n  }\n  return xcBuildConfigurationEntry;\n}\n\nexport function isBuildConfig([, sectionItem]: ConfigurationSectionEntry): boolean {\n  return sectionItem.isa === 'XCBuildConfiguration';\n}\n\nexport function isNotTestHost([, sectionItem]: ConfigurationSectionEntry): boolean {\n  return !sectionItem.buildSettings.TEST_HOST;\n}\n\nexport function isNotComment([key]:\n  | ConfigurationSectionEntry\n  | ProjectSectionEntry\n  | ConfigurationListEntry\n  | NativeTargetSectionEntry): boolean {\n  return !key.endsWith(`_comment`);\n}\n\n// Remove surrounding double quotes if they exist.\nexport function unquote(value: string): string {\n  // projects with numeric names will fail due to a bug in the xcode package.\n  if (typeof value === 'number') {\n    value = String(value);\n  }\n  return value.match(/^\"(.*)\"$/)?.[1] ?? value;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}