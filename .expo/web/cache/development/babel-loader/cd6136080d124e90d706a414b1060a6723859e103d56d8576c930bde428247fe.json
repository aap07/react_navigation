{"ast":null,"code":"\"use strict\";\n\nvar _tsdLite = require(\"tsd-lite\");\nvar _basic = require(\"./fixtures/basic\");\nvar router = (0, _basic).useRouter();\ndescribe(\"router.push()\", function () {\n  describe(\"href\", function () {\n    it(\"will error on non-urls\", function () {\n      (0, _tsdLite).expectError(router.push(\"should-error\"));\n    });\n    it(\"can accept an absolute url\", function () {\n      (0, _tsdLite).expectType(router.push(\"/apple\"));\n      (0, _tsdLite).expectType(router.push(\"/banana\"));\n    });\n    it(\"can accept a ANY relative url\", function () {\n      (0, _tsdLite).expectType(router.push(\"./this/work/but/is/not/valid\"));\n    });\n    it(\"works for dynamic urls\", function () {\n      (0, _tsdLite).expectType(router.push(\"/colors/blue\"));\n    });\n    it(\"works for CatchAll routes\", function () {\n      (0, _tsdLite).expectType(router.push(\"/animals/bear\"));\n      (0, _tsdLite).expectType(router.push(\"/animals/bear/cat/dog\"));\n      (0, _tsdLite).expectType(router.push(\"/mix/apple/blue/cat/dog\"));\n    });\n    it.skip(\"works for optional CatchAll routes\", function () {});\n    it(\"will error when providing extra parameters\", function () {\n      (0, _tsdLite).expectError(router.push(\"/colors/blue/test\"));\n    });\n    it(\"will error when providing too few parameters\", function () {\n      (0, _tsdLite).expectError(router.push(\"/mix/apple\"));\n      (0, _tsdLite).expectError(router.push(\"/mix/apple/cat\"));\n    });\n    it(\"can accept any external url\", function () {\n      (0, _tsdLite).expectType(router.push(\"http://expo.dev\"));\n    });\n  });\n  describe(\"HrefObject\", function () {\n    it(\"will error on non-urls\", function () {\n      (0, _tsdLite).expectError(router.push({\n        pathname: \"should-error\"\n      }));\n    });\n    it(\"can accept an absolute url\", function () {\n      (0, _tsdLite).expectType(router.push({\n        pathname: \"/apple\"\n      }));\n      (0, _tsdLite).expectType(router.push({\n        pathname: \"/banana\"\n      }));\n    });\n    it(\"can accept a ANY relative url\", function () {\n      (0, _tsdLite).expectType(router.push({\n        pathname: \"./this/work/but/is/not/valid\"\n      }));\n    });\n    it(\"works for dynamic urls\", function () {\n      (0, _tsdLite).expectType(router.push({\n        pathname: \"/colors/[color]\",\n        params: {\n          color: \"blue\"\n        }\n      }));\n    });\n    it(\"requires a valid pathname\", function () {\n      (0, _tsdLite).expectError(router.push({\n        pathname: \"/colors/[invalid]\",\n        params: {\n          color: \"blue\"\n        }\n      }));\n    });\n    it(\"requires a valid param\", function () {\n      (0, _tsdLite).expectError(router.push({\n        pathname: \"/colors/[color]\",\n        params: {\n          invalid: \"blue\"\n        }\n      }));\n    });\n    it(\"works for catch all routes\", function () {\n      (0, _tsdLite).expectType(router.push({\n        pathname: \"/animals/[...animal]\",\n        params: {\n          animal: [\"cat\", \"dog\"]\n        }\n      }));\n    });\n    it(\"allows numeric inputs\", function () {\n      (0, _tsdLite).expectType(router.push({\n        pathname: \"/mix/[fruit]/[color]/[...animals]\",\n        params: {\n          color: 1,\n          fruit: \"apple\",\n          animals: [2, \"cat\"]\n        }\n      }));\n    });\n    it(\"requires an array for catch all routes\", function () {\n      (0, _tsdLite).expectError(router.push({\n        pathname: \"/animals/[...animal]\",\n        params: {\n          animal: \"cat\"\n        }\n      }));\n    });\n    it(\"works for mixed routes\", function () {\n      (0, _tsdLite).expectType(router.push({\n        pathname: \"/mix/[fruit]/[color]/[...animals]\",\n        params: {\n          color: \"red\",\n          fruit: \"apple\",\n          animals: []\n        }\n      }));\n    });\n    it(\"requires all params in mixed routes\", function () {\n      (0, _tsdLite).expectError(router.push({\n        pathname: \"/mix/[fruit]/[color]/[...animals]\",\n        params: {\n          color: \"red\",\n          animals: [\"cat\", \"dog\"]\n        }\n      }));\n    });\n  });\n});\ndescribe(\"useSearchParams\", function () {\n  (0, _tsdLite).expectType((0, _basic).useSearchParams());\n  (0, _tsdLite).expectType((0, _basic).useSearchParams());\n  (0, _tsdLite).expectError((0, _basic).useSearchParams());\n  (0, _tsdLite).expectError((0, _basic).useSearchParams());\n});\ndescribe(\"useLocalSearchParams\", function () {\n  (0, _tsdLite).expectType((0, _basic).useLocalSearchParams());\n  (0, _tsdLite).expectType((0, _basic).useLocalSearchParams());\n  (0, _tsdLite).expectError((0, _basic).useSearchParams());\n  (0, _tsdLite).expectError((0, _basic).useSearchParams());\n});\ndescribe(\"useGlobalSearchParams\", function () {\n  (0, _tsdLite).expectType((0, _basic).useGlobalSearchParams());\n  (0, _tsdLite).expectType((0, _basic).useGlobalSearchParams());\n  (0, _tsdLite).expectError((0, _basic).useGlobalSearchParams());\n  (0, _tsdLite).expectError((0, _basic).useGlobalSearchParams());\n});\ndescribe(\"useSegments\", function () {\n  it(\"can accept an absolute url\", function () {\n    (0, _tsdLite).expectType((0, _basic).useSegments());\n  });\n  it(\"only accepts valid possible urls\", function () {\n    (0, _tsdLite).expectError((0, _basic).useSegments());\n  });\n  it(\"can accept an array of segments\", function () {\n    (0, _tsdLite).expectType((0, _basic).useSegments());\n  });\n  it(\"only accepts valid possible segments\", function () {\n    (0, _tsdLite).expectError((0, _basic).useSegments());\n  });\n});","map":{"version":3,"names":["_tsdLite","require","_basic","router","useRouter","describe","it","expectError","push","expectType","skip","pathname","params","color","invalid","animal","fruit","animals","useSearchParams","useLocalSearchParams","useGlobalSearchParams","useSegments"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\type-generation\\__typetests__\\route.test.ts"],"sourcesContent":["import { expectType, expectError } from 'tsd-lite';\n\nimport {\n  useGlobalSearchParams,\n  useSegments,\n  useRouter,\n  useSearchParams,\n  useLocalSearchParams,\n} from './fixtures/basic';\n\n// eslint-disable-next-line react-hooks/rules-of-hooks\nconst router = useRouter();\n\ndescribe('router.push()', () => {\n  // router.push will return void when the type matches, otherwise it should error\n\n  describe('href', () => {\n    it('will error on non-urls', () => {\n      expectError(router.push('should-error'));\n    });\n\n    it('can accept an absolute url', () => {\n      expectType<void>(router.push('/apple'));\n      expectType<void>(router.push('/banana'));\n    });\n\n    it('can accept a ANY relative url', () => {\n      // We only type-check absolute urls\n      expectType<void>(router.push('./this/work/but/is/not/valid'));\n    });\n\n    it('works for dynamic urls', () => {\n      expectType<void>(router.push('/colors/blue'));\n    });\n\n    it('works for CatchAll routes', () => {\n      expectType<void>(router.push('/animals/bear'));\n      expectType<void>(router.push('/animals/bear/cat/dog'));\n      expectType<void>(router.push('/mix/apple/blue/cat/dog'));\n    });\n\n    it.skip('works for optional CatchAll routes', () => {\n      // CatchAll routes are not currently optional\n      // expectType<void>(router.push('/animals/'));\n    });\n\n    it('will error when providing extra parameters', () => {\n      expectError(router.push('/colors/blue/test'));\n    });\n\n    it('will error when providing too few parameters', () => {\n      expectError(router.push('/mix/apple'));\n      expectError(router.push('/mix/apple/cat'));\n    });\n\n    it('can accept any external url', () => {\n      expectType<void>(router.push('http://expo.dev'));\n    });\n  });\n\n  describe('HrefObject', () => {\n    it('will error on non-urls', () => {\n      expectError(router.push({ pathname: 'should-error' }));\n    });\n\n    it('can accept an absolute url', () => {\n      expectType<void>(router.push({ pathname: '/apple' }));\n      expectType<void>(router.push({ pathname: '/banana' }));\n    });\n\n    it('can accept a ANY relative url', () => {\n      // We only type-check absolute urls\n      expectType<void>(router.push({ pathname: './this/work/but/is/not/valid' }));\n    });\n\n    it('works for dynamic urls', () => {\n      expectType<void>(\n        router.push({\n          pathname: '/colors/[color]',\n          params: { color: 'blue' },\n        })\n      );\n    });\n\n    it('requires a valid pathname', () => {\n      expectError(\n        router.push({\n          pathname: '/colors/[invalid]',\n          params: { color: 'blue' },\n        })\n      );\n    });\n\n    it('requires a valid param', () => {\n      expectError(\n        router.push({\n          pathname: '/colors/[color]',\n          params: { invalid: 'blue' },\n        })\n      );\n    });\n\n    it('works for catch all routes', () => {\n      expectType<void>(\n        router.push({\n          pathname: '/animals/[...animal]',\n          params: { animal: ['cat', 'dog'] },\n        })\n      );\n    });\n\n    it('allows numeric inputs', () => {\n      expectType<void>(\n        router.push({\n          pathname: '/mix/[fruit]/[color]/[...animals]',\n          params: { color: 1, fruit: 'apple', animals: [2, 'cat'] },\n        })\n      );\n    });\n\n    it('requires an array for catch all routes', () => {\n      expectError(\n        router.push({\n          pathname: '/animals/[...animal]',\n          params: { animal: 'cat' },\n        })\n      );\n    });\n\n    it('works for mixed routes', () => {\n      expectType<void>(\n        router.push({\n          pathname: '/mix/[fruit]/[color]/[...animals]',\n          params: { color: 'red', fruit: 'apple', animals: [] },\n        })\n      );\n    });\n\n    it('requires all params in mixed routes', () => {\n      expectError(\n        router.push({\n          pathname: '/mix/[fruit]/[color]/[...animals]',\n          params: { color: 'red', animals: ['cat', 'dog'] },\n        })\n      );\n    });\n  });\n});\n\ndescribe('useSearchParams', () => {\n  expectType<Record<'color', string>>(useSearchParams<Record<'color', string>>());\n  expectType<Record<'color', string> & Record<string, string | string[]>>(\n    useSearchParams<'/colors/[color]'>()\n  );\n\n  expectError(useSearchParams<'/invalid'>());\n  expectError(useSearchParams<Record<'custom', Function>>());\n});\n\ndescribe('useLocalSearchParams', () => {\n  expectType<Record<'color', string>>(useLocalSearchParams<Record<'color', string>>());\n  expectType<Record<'color', string> & Record<string, string | string[]>>(\n    useLocalSearchParams<'/colors/[color]'>()\n  );\n\n  expectError(useSearchParams<'/invalid'>());\n  expectError(useSearchParams<Record<'custom', Function>>());\n});\n\ndescribe('useGlobalSearchParams', () => {\n  expectType<Record<'color', string>>(useGlobalSearchParams<Record<'color', string>>());\n  expectType<Record<'color', string> & Record<string, string | string[]>>(\n    useGlobalSearchParams<'/colors/[color]'>()\n  );\n\n  expectError(useGlobalSearchParams<'/invalid'>());\n  expectError(useGlobalSearchParams<Record<'custom', Function>>());\n});\n\ndescribe('useSegments', () => {\n  it('can accept an absolute url', () => {\n    expectType<['apple']>(useSegments<'/apple'>());\n  });\n\n  it('only accepts valid possible urls', () => {\n    expectError(useSegments<'/invalid'>());\n  });\n\n  it('can accept an array of segments', () => {\n    expectType<['apple']>(useSegments<['apple']>());\n  });\n\n  it('only accepts valid possible segments', () => {\n    expectError(useSegments<['invalid segment']>());\n  });\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}