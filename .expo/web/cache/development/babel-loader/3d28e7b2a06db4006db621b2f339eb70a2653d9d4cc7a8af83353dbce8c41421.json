{"ast":null,"code":"export { Directions } from \"./Directions\";\nexport { State } from \"./State\";\nexport { default as gestureHandlerRootHOC } from \"./components/gestureHandlerRootHOC\";\nexport { default as GestureHandlerRootView } from \"./components/GestureHandlerRootView\";\nexport { TapGestureHandler } from \"./handlers/TapGestureHandler\";\nexport { ForceTouchGestureHandler } from \"./handlers/ForceTouchGestureHandler\";\nexport { LongPressGestureHandler } from \"./handlers/LongPressGestureHandler\";\nexport { PanGestureHandler } from \"./handlers/PanGestureHandler\";\nexport { PinchGestureHandler } from \"./handlers/PinchGestureHandler\";\nexport { RotationGestureHandler } from \"./handlers/RotationGestureHandler\";\nexport { FlingGestureHandler } from \"./handlers/FlingGestureHandler\";\nexport { default as createNativeWrapper } from \"./handlers/createNativeWrapper\";\nexport { GestureDetector } from \"./handlers/gestures/GestureDetector\";\nexport { GestureObjects as Gesture } from \"./handlers/gestures/gestureObjects\";\nexport { NativeViewGestureHandler } from \"./handlers/NativeViewGestureHandler\";\nexport { RawButton, BaseButton, RectButton, BorderlessButton, PureNativeButton } from \"./components/GestureButtons\";\nexport { TouchableHighlight, TouchableNativeFeedback, TouchableOpacity, TouchableWithoutFeedback } from \"./components/touchables\";\nexport { ScrollView, Switch, TextInput, DrawerLayoutAndroid, FlatList, RefreshControl } from \"./components/GestureComponents\";\nexport { default as Swipeable } from \"./components/Swipeable\";\nexport { default as DrawerLayout } from \"./components/DrawerLayout\";\nexport { enableExperimentalWebImplementation, enableLegacyWebImplementation } from \"./EnableNewWebImplementation\";","map":{"version":3,"names":["Directions","State","default","gestureHandlerRootHOC","GestureHandlerRootView","TapGestureHandler","ForceTouchGestureHandler","LongPressGestureHandler","PanGestureHandler","PinchGestureHandler","RotationGestureHandler","FlingGestureHandler","createNativeWrapper","GestureDetector","GestureObjects","Gesture","NativeViewGestureHandler","RawButton","BaseButton","RectButton","BorderlessButton","PureNativeButton","TouchableHighlight","TouchableNativeFeedback","TouchableOpacity","TouchableWithoutFeedback","ScrollView","Switch","TextInput","DrawerLayoutAndroid","FlatList","RefreshControl","Swipeable","DrawerLayout","enableExperimentalWebImplementation","enableLegacyWebImplementation"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/react-native-gesture-handler/lib/typescript/index.d.ts"],"sourcesContent":["export { Directions } from './Directions';\nexport { State } from './State';\nexport { default as gestureHandlerRootHOC } from './components/gestureHandlerRootHOC';\nexport { default as GestureHandlerRootView } from './components/GestureHandlerRootView';\nexport type { GestureEvent, HandlerStateChangeEvent, GestureEventPayload, HandlerStateChangeEventPayload, GestureTouchEvent, TouchData, GestureUpdateEvent, GestureStateChangeEvent, } from './handlers/gestureHandlerCommon';\nexport type { GestureType } from './handlers/gestures/gesture';\nexport type { TapGestureHandlerEventPayload, TapGestureHandlerProps, } from './handlers/TapGestureHandler';\nexport type { ForceTouchGestureHandlerEventPayload, ForceTouchGestureHandlerProps, } from './handlers/ForceTouchGestureHandler';\nexport type { ForceTouchGestureChangeEventPayload } from './handlers/gestures/forceTouchGesture';\nexport type { LongPressGestureHandlerEventPayload, LongPressGestureHandlerProps, } from './handlers/LongPressGestureHandler';\nexport type { PanGestureHandlerEventPayload, PanGestureHandlerProps, } from './handlers/PanGestureHandler';\nexport type { PanGestureChangeEventPayload } from './handlers/gestures/panGesture';\nexport type { PinchGestureHandlerEventPayload, PinchGestureHandlerProps, } from './handlers/PinchGestureHandler';\nexport type { PinchGestureChangeEventPayload } from './handlers/gestures/pinchGesture';\nexport type { RotationGestureHandlerEventPayload, RotationGestureHandlerProps, } from './handlers/RotationGestureHandler';\nexport type { FlingGestureHandlerEventPayload, FlingGestureHandlerProps, } from './handlers/FlingGestureHandler';\nexport { TapGestureHandler } from './handlers/TapGestureHandler';\nexport { ForceTouchGestureHandler } from './handlers/ForceTouchGestureHandler';\nexport { LongPressGestureHandler } from './handlers/LongPressGestureHandler';\nexport { PanGestureHandler } from './handlers/PanGestureHandler';\nexport { PinchGestureHandler } from './handlers/PinchGestureHandler';\nexport { RotationGestureHandler } from './handlers/RotationGestureHandler';\nexport { FlingGestureHandler } from './handlers/FlingGestureHandler';\nexport { default as createNativeWrapper } from './handlers/createNativeWrapper';\nexport type { NativeViewGestureHandlerPayload, NativeViewGestureHandlerProps, } from './handlers/NativeViewGestureHandler';\nexport { GestureDetector } from './handlers/gestures/GestureDetector';\nexport { GestureObjects as Gesture } from './handlers/gestures/gestureObjects';\nexport type { TapGestureType as TapGesture } from './handlers/gestures/tapGesture';\nexport type { PanGestureType as PanGesture } from './handlers/gestures/panGesture';\nexport type { FlingGestureType as FlingGesture } from './handlers/gestures/flingGesture';\nexport type { LongPressGestureType as LongPressGesture } from './handlers/gestures/longPressGesture';\nexport type { PinchGestureType as PinchGesture } from './handlers/gestures/pinchGesture';\nexport type { RotationGestureType as RotationGesture } from './handlers/gestures/rotationGesture';\nexport type { ForceTouchGestureType as ForceTouchGesture } from './handlers/gestures/forceTouchGesture';\nexport type { NativeGestureType as NativeGesture } from './handlers/gestures/nativeGesture';\nexport type { ManualGestureType as ManualGesture } from './handlers/gestures/manualGesture';\nexport type { ComposedGestureType as ComposedGesture, RaceGestureType as RaceGesture, SimultaneousGestureType as SimultaneousGesture, ExclusiveGestureType as ExclusiveGesture, } from './handlers/gestures/gestureComposition';\nexport type { GestureStateManagerType as GestureStateManager } from './handlers/gestures/gestureStateManager';\nexport { NativeViewGestureHandler } from './handlers/NativeViewGestureHandler';\nexport type { RawButtonProps, BaseButtonProps, RectButtonProps, BorderlessButtonProps, } from './components/GestureButtons';\nexport { RawButton, BaseButton, RectButton, BorderlessButton, PureNativeButton, } from './components/GestureButtons';\nexport { TouchableHighlight, TouchableNativeFeedback, TouchableOpacity, TouchableWithoutFeedback, } from './components/touchables';\nexport { ScrollView, Switch, TextInput, DrawerLayoutAndroid, FlatList, RefreshControl, } from './components/GestureComponents';\nexport type { GestureHandlerGestureEvent, GestureHandlerStateChangeEvent, GestureHandlerGestureEventNativeEvent, GestureHandlerStateChangeNativeEvent, NativeViewGestureHandlerGestureEvent, NativeViewGestureHandlerStateChangeEvent, TapGestureHandlerGestureEvent, TapGestureHandlerStateChangeEvent, ForceTouchGestureHandlerGestureEvent, ForceTouchGestureHandlerStateChangeEvent, LongPressGestureHandlerGestureEvent, LongPressGestureHandlerStateChangeEvent, PanGestureHandlerGestureEvent, PanGestureHandlerStateChangeEvent, PinchGestureHandlerGestureEvent, PinchGestureHandlerStateChangeEvent, RotationGestureHandlerGestureEvent, RotationGestureHandlerStateChangeEvent, FlingGestureHandlerGestureEvent, FlingGestureHandlerStateChangeEvent, NativeViewGestureHandlerProperties, TapGestureHandlerProperties, LongPressGestureHandlerProperties, PanGestureHandlerProperties, PinchGestureHandlerProperties, RotationGestureHandlerProperties, FlingGestureHandlerProperties, ForceTouchGestureHandlerProperties, RawButtonProperties, BaseButtonProperties, RectButtonProperties, BorderlessButtonProperties, } from './handlers/gestureHandlerTypesCompat';\nexport { default as Swipeable } from './components/Swipeable';\nexport type { DrawerLayoutProps, DrawerPosition, DrawerState, DrawerType, DrawerLockMode, DrawerKeyboardDismissMode, } from './components/DrawerLayout';\nexport { default as DrawerLayout } from './components/DrawerLayout';\nexport { enableExperimentalWebImplementation, enableLegacyWebImplementation, } from './EnableNewWebImplementation';\n"],"mappings":"AAAA,SAASA,UAAU;AACnB,SAASC,KAAK;AACd,SAASC,OAAO,IAAIC,qBAAqB;AACzC,SAASD,OAAO,IAAIE,sBAAsB;AAa1C,SAASC,iBAAiB;AAC1B,SAASC,wBAAwB;AACjC,SAASC,uBAAuB;AAChC,SAASC,iBAAiB;AAC1B,SAASC,mBAAmB;AAC5B,SAASC,sBAAsB;AAC/B,SAASC,mBAAmB;AAC5B,SAAST,OAAO,IAAIU,mBAAmB;AAEvC,SAASC,eAAe;AACxB,SAASC,cAAc,IAAIC,OAAO;AAYlC,SAASC,wBAAwB;AAEjC,SAASC,SAAS,EAAEC,UAAU,EAAEC,UAAU,EAAEC,gBAAgB,EAAEC,gBAAgB;AAC9E,SAASC,kBAAkB,EAAEC,uBAAuB,EAAEC,gBAAgB,EAAEC,wBAAwB;AAChG,SAASC,UAAU,EAAEC,MAAM,EAAEC,SAAS,EAAEC,mBAAmB,EAAEC,QAAQ,EAAEC,cAAc;AAErF,SAAS7B,OAAO,IAAI8B,SAAS;AAE7B,SAAS9B,OAAO,IAAI+B,YAAY;AAChC,SAASC,mCAAmC,EAAEC,6BAA6B"},"metadata":{},"sourceType":"module","externalDependencies":[]}