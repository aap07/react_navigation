{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function _cliTools() {\n    return data;\n  };\n  return data;\n}\nfunction _child_process() {\n  var data = _interopRequireDefault(require(\"child_process\"));\n  _child_process = function _child_process() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar getSimulators = function getSimulators() {\n  var simulators;\n  try {\n    simulators = JSON.parse(_child_process().default.execFileSync('xcrun', ['simctl', 'list', '--json', 'devices'], {\n      encoding: 'utf8'\n    }));\n  } catch (error) {\n    throw new (_cliTools().CLIError)('Could not get the simulator list from Xcode. Please open Xcode and try running project directly from there to resolve the remaining issues.');\n  }\n  return simulators;\n};\nvar _default = getSimulators;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_cliTools","data","require","_child_process","_interopRequireDefault","obj","__esModule","getSimulators","simulators","JSON","parse","execFileSync","encoding","error","CLIError","_default"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-platform-ios/build/tools/getSimulators.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function () {\n    return data;\n  };\n  return data;\n}\nfunction _child_process() {\n  const data = _interopRequireDefault(require(\"child_process\"));\n  _child_process = function () {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nconst getSimulators = () => {\n  let simulators;\n  try {\n    simulators = JSON.parse(_child_process().default.execFileSync('xcrun', ['simctl', 'list', '--json', 'devices'], {\n      encoding: 'utf8'\n    }));\n  } catch (error) {\n    throw new (_cliTools().CLIError)('Could not get the simulator list from Xcode. Please open Xcode and try running project directly from there to resolve the remaining issues.');\n  }\n  return simulators;\n};\nvar _default = getSimulators;\nexports.default = _default;\n\n//# sourceMappingURL=getSimulators.ts.map"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AACxB,SAASC,SAASA,CAAA,EAAG;EACnB,IAAMC,IAAI,GAAGC,OAAO,CAAC,mCAAmC,CAAC;EACzDF,SAAS,GAAG,SAAAA,UAAA,EAAY;IACtB,OAAOC,IAAI;EACb,CAAC;EACD,OAAOA,IAAI;AACb;AACA,SAASE,cAAcA,CAAA,EAAG;EACxB,IAAMF,IAAI,GAAGG,sBAAsB,CAACF,OAAO,CAAC,eAAe,CAAC,CAAC;EAC7DC,cAAc,GAAG,SAAAA,eAAA,EAAY;IAC3B,OAAOF,IAAI;EACb,CAAC;EACD,OAAOA,IAAI;AACb;AACA,SAASG,sBAAsBA,CAACC,GAAG,EAAE;EAAE,OAAOA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAGD,GAAG,GAAG;IAAEN,OAAO,EAAEM;EAAI,CAAC;AAAE;AAC9F,IAAME,aAAa,GAAG,SAAhBA,aAAaA,CAAA,EAAS;EAC1B,IAAIC,UAAU;EACd,IAAI;IACFA,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACP,cAAc,CAAC,CAAC,CAACJ,OAAO,CAACY,YAAY,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,SAAS,CAAC,EAAE;MAC9GC,QAAQ,EAAE;IACZ,CAAC,CAAC,CAAC;EACL,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAM,KAAKb,SAAS,CAAC,CAAC,CAACc,QAAQ,EAAE,6IAA6I,CAAC;EACjL;EACA,OAAON,UAAU;AACnB,CAAC;AACD,IAAIO,QAAQ,GAAGR,aAAa;AAC5BV,OAAO,CAACE,OAAO,GAAGgB,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}