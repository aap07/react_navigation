{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = tryLaunchEmulator;\nexports.getEmulators = void 0;\nfunction _os() {\n  var data = _interopRequireDefault(require(\"os\"));\n  _os = function _os() {\n    return data;\n  };\n  return data;\n}\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n  _execa = function _execa() {\n    return data;\n  };\n  return data;\n}\nvar _adb = _interopRequireDefault(require(\"./adb\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar emulatorCommand = process.env.ANDROID_HOME ? `${process.env.ANDROID_HOME}/emulator/emulator` : 'emulator';\nvar getEmulators = function getEmulators() {\n  try {\n    var emulatorsOutput = _execa().default.sync(emulatorCommand, ['-list-avds']).stdout;\n    return emulatorsOutput.split(_os().default.EOL).filter(function (name) {\n      return name !== '';\n    });\n  } catch (_unused) {\n    return [];\n  }\n};\nexports.getEmulators = getEmulators;\nvar launchEmulator = function () {\n  var _ref2 = _asyncToGenerator(function* (emulatorName, adbPath, port) {\n    var manualCommand = `${emulatorCommand} @${emulatorName}`;\n    var cp = (0, _execa().default)(emulatorCommand, port ? [`@${emulatorName}`, '-port', `${port}`] : [`@${emulatorName}`], {\n      detached: true,\n      stdio: 'ignore'\n    });\n    cp.unref();\n    var timeout = 30;\n    return new Promise(function (resolve, reject) {\n      var bootCheckInterval = setInterval(_asyncToGenerator(function* () {\n        var devices = _adb.default.getDevices(adbPath);\n        var connected = port ? devices.find(function (d) {\n          return d.includes(`${port}`);\n        }) : devices.length > 0;\n        if (connected) {\n          cleanup();\n          resolve(true);\n        }\n      }), 1000);\n      var rejectTimeout = setTimeout(function () {\n        stopWaitingAndReject(`It took too long to start and connect with Android emulator: ${emulatorName}. You can try starting the emulator manually from the terminal with: ${manualCommand}`);\n      }, timeout * 1000);\n      var cleanup = function cleanup() {\n        clearTimeout(rejectTimeout);\n        clearInterval(bootCheckInterval);\n      };\n      var stopWaitingAndReject = function stopWaitingAndReject(message) {\n        cleanup();\n        reject(new Error(message));\n      };\n      cp.on('error', function (_ref4) {\n        var message = _ref4.message;\n        return stopWaitingAndReject(message);\n      });\n      cp.on('exit', function () {\n        stopWaitingAndReject(`The emulator (${emulatorName}) quit before it finished opening. You can try starting the emulator manually from the terminal with: ${manualCommand}`);\n      });\n    });\n  });\n  return function launchEmulator(_x, _x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nfunction tryLaunchEmulator(_x4, _x5, _x6) {\n  return _tryLaunchEmulator.apply(this, arguments);\n}\nfunction _tryLaunchEmulator() {\n  _tryLaunchEmulator = _asyncToGenerator(function* (adbPath, emulatorName, port) {\n    var emulators = getEmulators();\n    if (emulators.length > 0) {\n      try {\n        yield launchEmulator(emulatorName != null ? emulatorName : emulators[0], adbPath, port);\n        return {\n          success: true\n        };\n      } catch (error) {\n        var _ref;\n        return {\n          success: false,\n          error: (_ref = error) === null || _ref === void 0 ? void 0 : _ref.message\n        };\n      }\n    }\n    return {\n      success: false,\n      error: 'No emulators found as an output of `emulator -list-avds`'\n    };\n  });\n  return _tryLaunchEmulator.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","Object","defineProperty","exports","value","default","tryLaunchEmulator","getEmulators","_os","data","_interopRequireDefault","_execa","_adb","obj","__esModule","emulatorCommand","process","env","ANDROID_HOME","emulatorsOutput","sync","stdout","split","EOL","filter","name","_unused","launchEmulator","_ref2","emulatorName","adbPath","port","manualCommand","cp","detached","stdio","unref","timeout","Promise","resolve","reject","bootCheckInterval","setInterval","devices","getDevices","connected","find","d","includes","length","cleanup","rejectTimeout","setTimeout","stopWaitingAndReject","clearTimeout","clearInterval","message","Error","on","_ref4","_x","_x2","_x3","apply","arguments","_x4","_x5","_x6","_tryLaunchEmulator","emulators","success","error","_ref"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/tryLaunchEmulator.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = tryLaunchEmulator;\nexports.getEmulators = void 0;\nfunction _os() {\n  const data = _interopRequireDefault(require(\"os\"));\n  _os = function () {\n    return data;\n  };\n  return data;\n}\nfunction _execa() {\n  const data = _interopRequireDefault(require(\"execa\"));\n  _execa = function () {\n    return data;\n  };\n  return data;\n}\nvar _adb = _interopRequireDefault(require(\"./adb\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nconst emulatorCommand = process.env.ANDROID_HOME ? `${process.env.ANDROID_HOME}/emulator/emulator` : 'emulator';\nconst getEmulators = () => {\n  try {\n    const emulatorsOutput = _execa().default.sync(emulatorCommand, ['-list-avds']).stdout;\n    return emulatorsOutput.split(_os().default.EOL).filter(name => name !== '');\n  } catch {\n    return [];\n  }\n};\nexports.getEmulators = getEmulators;\nconst launchEmulator = async (emulatorName, adbPath, port) => {\n  const manualCommand = `${emulatorCommand} @${emulatorName}`;\n  const cp = (0, _execa().default)(emulatorCommand, port ? [`@${emulatorName}`, '-port', `${port}`] : [`@${emulatorName}`], {\n    detached: true,\n    stdio: 'ignore'\n  });\n  cp.unref();\n  const timeout = 30;\n  return new Promise((resolve, reject) => {\n    const bootCheckInterval = setInterval(async () => {\n      const devices = _adb.default.getDevices(adbPath);\n      const connected = port ? devices.find(d => d.includes(`${port}`)) : devices.length > 0;\n      if (connected) {\n        cleanup();\n        resolve(true);\n      }\n    }, 1000);\n\n    // Reject command after timeout\n    const rejectTimeout = setTimeout(() => {\n      stopWaitingAndReject(`It took too long to start and connect with Android emulator: ${emulatorName}. You can try starting the emulator manually from the terminal with: ${manualCommand}`);\n    }, timeout * 1000);\n    const cleanup = () => {\n      clearTimeout(rejectTimeout);\n      clearInterval(bootCheckInterval);\n    };\n    const stopWaitingAndReject = message => {\n      cleanup();\n      reject(new Error(message));\n    };\n    cp.on('error', ({\n      message\n    }) => stopWaitingAndReject(message));\n    cp.on('exit', () => {\n      stopWaitingAndReject(`The emulator (${emulatorName}) quit before it finished opening. You can try starting the emulator manually from the terminal with: ${manualCommand}`);\n    });\n  });\n};\nasync function tryLaunchEmulator(adbPath, emulatorName, port) {\n  const emulators = getEmulators();\n  if (emulators.length > 0) {\n    try {\n      await launchEmulator(emulatorName ?? emulators[0], adbPath, port);\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _ref;\n      return {\n        success: false,\n        error: (_ref = error) === null || _ref === void 0 ? void 0 : _ref.message\n      };\n    }\n  }\n  return {\n    success: false,\n    error: 'No emulators found as an output of `emulator -list-avds`'\n  };\n}\n\n//# sourceMappingURL=tryLaunchEmulator.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}