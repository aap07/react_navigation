{"ast":null,"code":"#!/usr/bin/env node\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar fs = require('fs');\nvar path = require('path');\nvar yargs = require('yargs');\nvar _require = require(\"../lib/object-utils\"),\n  omit = _require.omit;\nvar _yargs$usage$demand$d = yargs.usage('Usage: $0 [options] path/to/codepoints \\nFor default template please provide --componentName and --fontFamily').demand(1).default('t', path.resolve(__dirname, '..', 'templates/bundled-icon-set.tpl')).describe('t', 'Template in JS template string format').alias('t', 'template').describe('o', 'Save output to file, defaults to STDOUT').alias('o', 'output').describe('g', 'Save glyphmap JSON to file').alias('g', 'glyphmap'),\n  argv = _yargs$usage$demand$d.argv;\nfunction extractGlyphMapFromCodepoints(fileName) {\n  var codepoints = fs.readFileSync(fileName, {\n    encoding: 'utf8'\n  }).split('\\n');\n  var glyphMap = {};\n  codepoints.forEach(function (point) {\n    var parts = point.split(' ');\n    if (parts.length === 2) {\n      glyphMap[parts[0].replace(/_/g, '-')] = parseInt(parts[1], 16);\n    }\n  });\n  return glyphMap;\n}\nvar template;\nif (argv.template) {\n  template = fs.readFileSync(argv.template, {\n    encoding: 'utf8'\n  });\n}\nvar data = omit(argv, '_ $0 o output t template g glyphmap'.split(' '));\nvar glyphMap = extractGlyphMapFromCodepoints(argv._[0]);\nvar content = JSON.stringify(glyphMap, null, '  ');\nif (template) {\n  var templateVariables = _objectSpread({\n    glyphMap: content\n  }, data);\n  content = template.replace(/\\${([^}]*)}/g, function (_, key) {\n    return templateVariables[key];\n  });\n}\nif (argv.output) {\n  fs.writeFileSync(argv.output, content);\n} else {\n  console.log(content);\n}\nif (argv.glyphmap) {\n  fs.writeFileSync(argv.glyphmap, JSON.stringify(glyphMap, null, '  '));\n}","map":{"version":3,"names":["_defineProperty","require","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","fs","path","yargs","_require","omit","_yargs$usage$demand$d","usage","demand","default","resolve","__dirname","describe","alias","argv","extractGlyphMapFromCodepoints","fileName","codepoints","readFileSync","encoding","split","glyphMap","point","parts","replace","parseInt","template","data","_","content","JSON","stringify","templateVariables","key","output","writeFileSync","console","log","glyphmap"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/vector-icons/build/vendor/react-native-vector-icons/bin/generate-material-icons.js"],"sourcesContent":["#!/usr/bin/env node\n/* eslint-disable no-console */\n\nconst fs = require('fs');\nconst path = require('path');\nconst yargs = require('yargs');\nconst { omit } = require('../lib/object-utils');\n\nconst { argv } = yargs\n  .usage(\n    'Usage: $0 [options] path/to/codepoints \\nFor default template please provide --componentName and --fontFamily'\n  )\n  .demand(1)\n  .default('t', path.resolve(__dirname, '..', 'templates/bundled-icon-set.tpl'))\n  .describe('t', 'Template in JS template string format')\n  .alias('t', 'template')\n  .describe('o', 'Save output to file, defaults to STDOUT')\n  .alias('o', 'output')\n  .describe('g', 'Save glyphmap JSON to file')\n  .alias('g', 'glyphmap');\n\nfunction extractGlyphMapFromCodepoints(fileName) {\n  const codepoints = fs\n    .readFileSync(fileName, { encoding: 'utf8' })\n    .split('\\n');\n  const glyphMap = {};\n  codepoints.forEach(point => {\n    const parts = point.split(' ');\n    if (parts.length === 2) {\n      glyphMap[parts[0].replace(/_/g, '-')] = parseInt(parts[1], 16);\n    }\n  });\n\n  return glyphMap;\n}\n\nlet template;\nif (argv.template) {\n  template = fs.readFileSync(argv.template, { encoding: 'utf8' });\n}\n\nconst data = omit(argv, '_ $0 o output t template g glyphmap'.split(' '));\nconst glyphMap = extractGlyphMapFromCodepoints(argv._[0]);\n\nlet content = JSON.stringify(glyphMap, null, '  ');\nif (template) {\n  const templateVariables = { glyphMap: content, ...data };\n  content = template.replace(\n    /\\${([^}]*)}/g,\n    (_, key) => templateVariables[key]\n  );\n}\n\nif (argv.output) {\n  fs.writeFileSync(argv.output, content);\n} else {\n  console.log(content);\n}\n\nif (argv.glyphmap) {\n  fs.writeFileSync(argv.glyphmap, JSON.stringify(glyphMap, null, '  '));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}