{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nvar _wrapNativeSuper = require(\"@babel/runtime/helpers/wrapNativeSuper\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.importMetroFromProject = importMetroFromProject;\nexports.importMetroCreateWebsocketServerFromProject = importMetroCreateWebsocketServerFromProject;\nexports.importMetroHmrServerFromProject = importMetroHmrServerFromProject;\nexports.importExpoMetroConfig = importExpoMetroConfig;\nexports.importFromProjectOrFallback = importFromProjectOrFallback;\nexports.importMetroResolverFromProject = importMetroResolverFromProject;\nexports.importMetroInspectorProxyFromProject = importMetroInspectorProxyFromProject;\nexports.importMetroInspectorDeviceFromProject = importMetroInspectorDeviceFromProject;\nexports.importCliSaveAssetsFromProject = importCliSaveAssetsFromProject;\nexports.importCliBuildBundleWithConfigFromProject = importCliBuildBundleWithConfigFromProject;\nexports.resolveMetroVersionFromProject = resolveMetroVersionFromProject;\nvar _resolveFrom = _interopRequireDefault(require(\"resolve-from\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = require(\"debug\")(\"expo:metro:import\");\nvar MetroImportError = function (_Error) {\n  _inherits(MetroImportError, _Error);\n  var _super = _createSuper(MetroImportError);\n  function MetroImportError(projectRoot, moduleId) {\n    _classCallCheck(this, MetroImportError);\n    return _super.call(this, `Missing package \"${moduleId}\" in the project at: ${projectRoot}\\n` + 'This usually means \"react-native\" is not installed. ' + 'Please verify that dependencies in package.json include \"react-native\" ' + \"and run `yarn` or `npm install`.\");\n  }\n  return _createClass(MetroImportError);\n}(_wrapNativeSuper(Error));\nfunction resolveFromProject(projectRoot, moduleId) {\n  var resolvedPath = _resolveFrom.default.silent(projectRoot, moduleId);\n  if (!resolvedPath) {\n    throw new MetroImportError(projectRoot, moduleId);\n  }\n  return resolvedPath;\n}\nfunction importFromProject(projectRoot, moduleId) {\n  return require(resolveFromProject(projectRoot, moduleId));\n}\nfunction importMetroFromProject(projectRoot) {\n  return importFromProject(projectRoot, \"metro\");\n}\nfunction importMetroCreateWebsocketServerFromProject(projectRoot) {\n  return importFromProject(projectRoot, \"metro/src/lib/createWebsocketServer\");\n}\nfunction importMetroHmrServerFromProject(projectRoot) {\n  return importFromProject(projectRoot, \"metro/src/HmrServer\");\n}\nfunction importExpoMetroConfig(projectRoot) {\n  return importFromProjectOrFallback(projectRoot, \"@expo/metro-config\");\n}\nfunction importFromProjectOrFallback(projectRoot, moduleId) {\n  var resolvedPath = _resolveFrom.default.silent(projectRoot, moduleId);\n  if (!resolvedPath) {\n    debug(`requiring \"${moduleId}\" relative to the CLI`);\n    return require(require.resolve(moduleId));\n  }\n  debug(`requiring \"${moduleId}\" from the project:`, resolvedPath);\n  return require(resolvedPath);\n}\nfunction importMetroResolverFromProject(projectRoot) {\n  return importFromProject(projectRoot, \"metro-resolver\");\n}\nfunction importMetroInspectorProxyFromProject(projectRoot) {\n  return importFromProject(projectRoot, \"metro-inspector-proxy\");\n}\nfunction importMetroInspectorDeviceFromProject(projectRoot) {\n  return importFromProject(projectRoot, \"metro-inspector-proxy/src/Device\");\n}\nfunction importCliSaveAssetsFromProject(projectRoot) {\n  return importFromProject(projectRoot, \"@react-native-community/cli-plugin-metro/build/commands/bundle/saveAssets\").default;\n}\nfunction importCliBuildBundleWithConfigFromProject(projectRoot) {\n  return importFromProject(projectRoot, \"@react-native-community/cli-plugin-metro/build/commands/bundle/buildBundle\").buildBundleWithConfig;\n}\nfunction resolveMetroVersionFromProject(projectRoot) {\n  return importFromProject(projectRoot, \"metro/package.json\").version;\n}","map":{"version":3,"names":["_createClass","require","_classCallCheck","_inherits","_possibleConstructorReturn","_getPrototypeOf","_wrapNativeSuper","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","importMetroFromProject","importMetroCreateWebsocketServerFromProject","importMetroHmrServerFromProject","importExpoMetroConfig","importFromProjectOrFallback","importMetroResolverFromProject","importMetroInspectorProxyFromProject","importMetroInspectorDeviceFromProject","importCliSaveAssetsFromProject","importCliBuildBundleWithConfigFromProject","resolveMetroVersionFromProject","_resolveFrom","_interopRequireDefault","debug","MetroImportError","_Error","_super","projectRoot","moduleId","Error","resolveFromProject","resolvedPath","default","silent","importFromProject","resolve","buildBundleWithConfig","version"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\metro\\resolveFromProject.ts"],"sourcesContent":["import resolveFrom from 'resolve-from';\n\nconst debug = require('debug')('expo:metro:import');\n\n// These resolvers enable us to test the CLI in older projects.\n// We may be able to get rid of this in the future.\n// TODO: Maybe combine with AsyncResolver?\nclass MetroImportError extends Error {\n  constructor(projectRoot: string, moduleId: string) {\n    super(\n      `Missing package \"${moduleId}\" in the project at: ${projectRoot}\\n` +\n        'This usually means \"react-native\" is not installed. ' +\n        'Please verify that dependencies in package.json include \"react-native\" ' +\n        'and run `yarn` or `npm install`.'\n    );\n  }\n}\n\nfunction resolveFromProject(projectRoot: string, moduleId: string) {\n  const resolvedPath = resolveFrom.silent(projectRoot, moduleId);\n  if (!resolvedPath) {\n    throw new MetroImportError(projectRoot, moduleId);\n  }\n  return resolvedPath;\n}\n\nfunction importFromProject(projectRoot: string, moduleId: string) {\n  return require(resolveFromProject(projectRoot, moduleId));\n}\n\n/** Import `metro` from the project. */\nexport function importMetroFromProject(projectRoot: string): typeof import('metro') {\n  return importFromProject(projectRoot, 'metro');\n}\nexport function importMetroCreateWebsocketServerFromProject(\n  projectRoot: string\n): typeof import('metro/src/lib/createWebsocketServer').createWebsocketServer {\n  return importFromProject(projectRoot, 'metro/src/lib/createWebsocketServer');\n}\nexport function importMetroHmrServerFromProject(\n  projectRoot: string\n): typeof import('metro/src/HmrServer').MetroHmrServer {\n  return importFromProject(projectRoot, 'metro/src/HmrServer');\n}\n\nexport function importExpoMetroConfig(projectRoot: string) {\n  return importFromProjectOrFallback<typeof import('@expo/metro-config')>(\n    projectRoot,\n    '@expo/metro-config'\n  );\n}\n\n/**\n * Attempt to use the local version of a module or fallback on the CLI version.\n * This should only ever happen when testing Expo CLI in development.\n */\nexport function importFromProjectOrFallback<TModule>(\n  projectRoot: string,\n  moduleId: string\n): TModule {\n  const resolvedPath = resolveFrom.silent(projectRoot, moduleId);\n  if (!resolvedPath) {\n    debug(`requiring \"${moduleId}\" relative to the CLI`);\n    return require(require.resolve(moduleId));\n  }\n  debug(`requiring \"${moduleId}\" from the project:`, resolvedPath);\n  return require(resolvedPath);\n}\n\n/** Import `metro-resolver` from the project. */\nexport function importMetroResolverFromProject(\n  projectRoot: string\n): typeof import('metro-resolver') {\n  return importFromProject(projectRoot, 'metro-resolver');\n}\n\n/** Import `metro-inspector-proxy` from the project. */\nexport function importMetroInspectorProxyFromProject(\n  projectRoot: string\n): typeof import('metro-inspector-proxy') {\n  return importFromProject(projectRoot, 'metro-inspector-proxy');\n}\n\n/** Import `metro-inspector-proxy/src/Device` from the project. */\nexport function importMetroInspectorDeviceFromProject(\n  projectRoot: string\n): typeof import('metro-inspector-proxy/src/Device') {\n  return importFromProject(projectRoot, 'metro-inspector-proxy/src/Device');\n}\n\n/**\n * Import the internal `saveAssets()` function from `react-native` for the purpose\n * of saving production assets as-is instead of converting them to a hash.\n */\nexport function importCliSaveAssetsFromProject(\n  projectRoot: string\n): typeof import('@react-native-community/cli-plugin-metro/build/commands/bundle/saveAssets').default {\n  return importFromProject(\n    projectRoot,\n    '@react-native-community/cli-plugin-metro/build/commands/bundle/saveAssets'\n  ).default;\n}\n\nexport function importCliBuildBundleWithConfigFromProject(\n  projectRoot: string\n): typeof import('@react-native-community/cli-plugin-metro/build/commands/bundle/buildBundle').buildBundleWithConfig {\n  return importFromProject(\n    projectRoot,\n    '@react-native-community/cli-plugin-metro/build/commands/bundle/buildBundle'\n  ).buildBundleWithConfig;\n}\n\n/** Resolve the installed Metro version from project */\nexport function resolveMetroVersionFromProject(projectRoot: string): string {\n  return importFromProject(projectRoot, 'metro/package.json').version;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}