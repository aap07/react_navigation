{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/config-plugins/build/ios/Target.d.ts"],"sourcesContent":["import { PBXNativeTarget, XCBuildConfiguration, XcodeProject } from 'xcode';\nimport { NativeTargetSectionEntry } from './utils/Xcodeproj';\nexport declare enum TargetType {\n    APPLICATION = \"com.apple.product-type.application\",\n    EXTENSION = \"com.apple.product-type.app-extension\",\n    WATCH = \"com.apple.product-type.application.watchapp\",\n    APP_CLIP = \"com.apple.product-type.application.on-demand-install-capable\",\n    STICKER_PACK_EXTENSION = \"com.apple.product-type.app-extension.messages-sticker-pack\",\n    FRAMEWORK = \"com.apple.product-type.framework\",\n    OTHER = \"other\"\n}\nexport interface Target {\n    name: string;\n    type: TargetType;\n    signable: boolean;\n    dependencies?: Target[];\n}\nexport declare function getXCBuildConfigurationFromPbxproj(project: XcodeProject, { targetName, buildConfiguration, }?: {\n    targetName?: string;\n    buildConfiguration?: string;\n}): XCBuildConfiguration | null;\nexport declare function findApplicationTargetWithDependenciesAsync(projectRoot: string, scheme: string): Promise<Target>;\nexport declare function isTargetOfType(target: PBXNativeTarget, targetType: TargetType): boolean;\nexport declare function getNativeTargets(project: XcodeProject): NativeTargetSectionEntry[];\nexport declare function findSignableTargets(project: XcodeProject): NativeTargetSectionEntry[];\nexport declare function findFirstNativeTarget(project: XcodeProject): NativeTargetSectionEntry;\nexport declare function findNativeTargetByName(project: XcodeProject, targetName: string): NativeTargetSectionEntry;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}