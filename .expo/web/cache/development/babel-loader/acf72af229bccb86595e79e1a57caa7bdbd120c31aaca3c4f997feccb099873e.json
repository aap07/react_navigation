{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { Component } from 'react';\nvar GenericTouchable = function (_Component) {\n  _inherits(GenericTouchable, _Component);\n  var _super = _createSuper(GenericTouchable);\n  function GenericTouchable() {\n    _classCallCheck(this, GenericTouchable);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(GenericTouchable);\n}(Component);\nexport { GenericTouchable as default };\nexport {};","map":{"version":3,"names":["Component","GenericTouchable","_Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","default"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/react-native-gesture-handler/lib/typescript/components/touchables/GenericTouchable.d.ts"],"sourcesContent":["import { Component } from 'react';\nimport { StyleProp, ViewStyle, TouchableWithoutFeedbackProps } from 'react-native';\nimport { GestureEvent, HandlerStateChangeEvent } from '../../handlers/gestureHandlerCommon';\nimport { NativeViewGestureHandlerPayload } from '../../handlers/NativeViewGestureHandler';\nimport { TouchableNativeFeedbackExtraProps } from './TouchableNativeFeedback.android';\n/**\n * Each touchable is a states' machine which preforms transitions.\n * On very beginning (and on the very end or recognition) touchable is\n * UNDETERMINED. Then it moves to BEGAN. If touchable recognizes that finger\n * travel outside it transits to special MOVED_OUTSIDE state. Gesture recognition\n * finishes in UNDETERMINED state.\n */\nexport declare const TOUCHABLE_STATE: {\n    readonly UNDETERMINED: 0;\n    readonly BEGAN: 1;\n    readonly MOVED_OUTSIDE: 2;\n};\ndeclare type TouchableState = typeof TOUCHABLE_STATE[keyof typeof TOUCHABLE_STATE];\nexport interface GenericTouchableProps extends TouchableWithoutFeedbackProps {\n    onPress?: () => void;\n    onPressIn?: () => void;\n    onPressOut?: () => void;\n    onLongPress?: () => void;\n    nativeID?: string;\n    shouldActivateOnStart?: boolean;\n    disallowInterruption?: boolean;\n    containerStyle?: StyleProp<ViewStyle>;\n}\ninterface InternalProps {\n    extraButtonProps: TouchableNativeFeedbackExtraProps;\n    onStateChange?: (oldState: TouchableState, newState: TouchableState) => void;\n}\ndeclare type Timeout = ReturnType<typeof setTimeout> | null | undefined;\n/**\n * GenericTouchable is not intented to be used as it is.\n * Should be treated as a source for the rest of touchables\n */\nexport default class GenericTouchable extends Component<GenericTouchableProps & InternalProps> {\n    static defaultProps: {\n        delayLongPress: number;\n        extraButtonProps: {\n            rippleColor: string;\n            exclusive: boolean;\n        };\n    };\n    pressInTimeout: Timeout;\n    pressOutTimeout: Timeout;\n    longPressTimeout: Timeout;\n    longPressDetected: boolean;\n    pointerInside: boolean;\n    STATE: TouchableState;\n    handlePressIn(): void;\n    handleMoveOutside(): void;\n    handleGoToUndetermined(): void;\n    componentDidMount(): void;\n    reset(): void;\n    moveToState(newState: TouchableState): void;\n    onGestureEvent: ({ nativeEvent: { pointerInside }, }: GestureEvent<NativeViewGestureHandlerPayload>) => void;\n    onHandlerStateChange: ({ nativeEvent, }: HandlerStateChangeEvent<NativeViewGestureHandlerPayload>) => void;\n    onLongPressDetected: () => void;\n    componentWillUnmount(): void;\n    onMoveIn(): void;\n    onMoveOut(): void;\n    render(): JSX.Element;\n}\nexport {};\n"],"mappings":";;;;;;;AAAA,SAASA,SAAS,QAAQ,OAAO;AAAC,IAqCbC,gBAAgB,aAAAC,UAAA;EAAAC,SAAA,CAAAF,gBAAA,EAAAC,UAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,gBAAA;EAAA,SAAAA,iBAAA;IAAAK,eAAA,OAAAL,gBAAA;IAAA,OAAAG,MAAA,CAAAG,KAAA,OAAAC,SAAA;EAAA;EAAA,OAAAC,YAAA,CAAAR,gBAAA;AAAA,EAASD,SAAS;AAAA,SAAlCC,gBAAgB,IAAAS,OAAA;AA4BrC"},"metadata":{},"sourceType":"module","externalDependencies":[]}