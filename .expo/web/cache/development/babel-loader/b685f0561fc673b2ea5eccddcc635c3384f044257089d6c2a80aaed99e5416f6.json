{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UserQuery = void 0;\nvar _graphqlTag = _interopRequireDefault(require(\"graphql-tag\"));\nvar _client = require(\"../client\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar UserQuery = {\n  currentUserAsync: function () {\n    var _currentUserAsync = _asyncToGenerator(function* () {\n      var data = yield (0, _client).withErrorHandlingAsync(_client.graphqlClient.query(_graphqlTag.default`\n            query CurrentUser {\n              meActor {\n                __typename\n                id\n                ... on UserActor {\n                  primaryAccount {\n                    id\n                  }\n                  username\n                }\n                ... on Robot {\n                  firstName\n                }\n                accounts {\n                  id\n                  users {\n                    actor {\n                      id\n                    }\n                    permissions\n                  }\n                }\n              }\n            }\n          `, undefined, {\n        additionalTypenames: [\"User\"]\n      }).toPromise());\n      return data.meActor;\n    });\n    function currentUserAsync() {\n      return _currentUserAsync.apply(this, arguments);\n    }\n    return currentUserAsync;\n  }()\n};\nexports.UserQuery = UserQuery;","map":{"version":3,"names":["_asyncToGenerator","require","_graphqlTag","_interopRequireDefault","_client","UserQuery","currentUserAsync","_currentUserAsync","data","withErrorHandlingAsync","graphqlClient","query","default","undefined","additionalTypenames","toPromise","meActor","apply","arguments"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\api\\graphql\\queries\\UserQuery.ts"],"sourcesContent":["import gql from 'graphql-tag';\n\nimport { CurrentUserQuery } from '../../../graphql/generated';\nimport { graphqlClient, withErrorHandlingAsync } from '../client';\n\nexport const UserQuery = {\n  async currentUserAsync(): Promise<CurrentUserQuery['meActor']> {\n    const data = await withErrorHandlingAsync(\n      graphqlClient\n        .query<CurrentUserQuery>(\n          gql`\n            query CurrentUser {\n              meActor {\n                __typename\n                id\n                ... on UserActor {\n                  primaryAccount {\n                    id\n                  }\n                  username\n                }\n                ... on Robot {\n                  firstName\n                }\n                accounts {\n                  id\n                  users {\n                    actor {\n                      id\n                    }\n                    permissions\n                  }\n                }\n              }\n            }\n          `,\n          /* variables */ undefined,\n          {\n            additionalTypenames: ['User'],\n          }\n        )\n        .toPromise()\n    );\n\n    return data.meActor;\n  },\n};\n"],"mappings":"AAAA;;AAAA,IAAAA,iBAAA,GAAAC,OAAA;;;;;AAAgB,IAAAC,WAAa,GAAAC,sBAAA,CAAAF,OAAA,CAAb,aAAa;AAGyB,IAAAG,OAAW,GAAAH,OAAA;;;;;;AAE1D,IAAMI,SAAS,GAAG;EACjBC,gBAAgB;IAAA,IAAAC,iBAAA,GAAAP,iBAAA,cAAyC;MAC7D,IAAMQ,IAAI,SAAS,IAAAJ,OAAsB,EAmCxCK,sBAnCwC,CACvCL,OAAa,CAAAM,aAAA,CACVC,KAAK,CACJT,WAAG,CAAAU,OAAC;;;;;;;;;;;;;;;;;;;;;;;;;WAyBH,EACeC,SAAS,EACzB;QACEC,mBAAmB,EAAE,CAAC,MAAM;OAC7B,CACF,CACAC,SAAS,EAAE,CACf;MAED,OAAOP,IAAI,CAACQ,OAAO;KACpB;IAAA,SAAAV,iBAAA;MAAA,OAAAC,iBAAA,CAAAU,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAAZ,gBAAA;EAAA;CACF;QAzCYD,SAAS,GAATA,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}