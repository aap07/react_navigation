{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDevelopmentCodeSigningDirectory = getDevelopmentCodeSigningDirectory;\nexports.getCodeSigningInfoAsync = getCodeSigningInfoAsync;\nexports.signManifestString = signManifestString;\nexports.DevelopmentCodeSigningInfoFile = void 0;\nvar _codeSigningCertificates = require(\"@expo/code-signing-certificates\");\nvar _getUserState = require(\"@expo/config/build/getUserState\");\nvar _jsonFile = _interopRequireDefault(require(\"@expo/json-file\"));\nvar _fs = require(\"fs\");\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _structuredHeaders = require(\"structured-headers\");\nvar _getExpoGoIntermediateCertificate = require(\"../api/getExpoGoIntermediateCertificate\");\nvar _getProjectDevelopmentCertificate = require(\"../api/getProjectDevelopmentCertificate\");\nvar _appQuery = require(\"../api/graphql/queries/AppQuery\");\nvar _actions = require(\"../api/user/actions\");\nvar _generated = require(\"../graphql/generated\");\nvar Log = _interopRequireWildcard(require(\"../log\"));\nvar _link = require(\"../utils/link\");\nvar _env = require(\"./env\");\nvar _errors = require(\"./errors\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar debug = require(\"debug\")(\"expo:codesigning\");\nvar DEVELOPMENT_CODE_SIGNING_SETTINGS_FILE_NAME = \"development-code-signing-settings-2.json\";\nfunction getDevelopmentCodeSigningDirectory() {\n  return _path.default.join((0, _getUserState).getExpoHomeDirectory(), \"codesigning\");\n}\nfunction getProjectDevelopmentCodeSigningInfoFile(defaults) {\n  function getFile(easProjectId) {\n    var filePath = _path.default.join(getDevelopmentCodeSigningDirectory(), easProjectId, DEVELOPMENT_CODE_SIGNING_SETTINGS_FILE_NAME);\n    return new _jsonFile.default(filePath);\n  }\n  function readAsync(_x) {\n    return _readAsync.apply(this, arguments);\n  }\n  function _readAsync() {\n    _readAsync = _asyncToGenerator(function* (easProjectId) {\n      var projectSettings;\n      try {\n        projectSettings = yield getFile(easProjectId).readAsync();\n      } catch (_unused) {\n        projectSettings = yield getFile(easProjectId).writeAsync(defaults, {\n          ensureDir: true\n        });\n      }\n      return _objectSpread(_objectSpread({}, defaults), projectSettings);\n    });\n    return _readAsync.apply(this, arguments);\n  }\n  function setAsync(_x2, _x3) {\n    return _setAsync.apply(this, arguments);\n  }\n  function _setAsync() {\n    _setAsync = _asyncToGenerator(function* (easProjectId, json) {\n      try {\n        return yield getFile(easProjectId).mergeAsync(json, {\n          cantReadFileDefault: defaults\n        });\n      } catch (_unused2) {\n        return yield getFile(easProjectId).writeAsync(_objectSpread(_objectSpread({}, defaults), json), {\n          ensureDir: true\n        });\n      }\n    });\n    return _setAsync.apply(this, arguments);\n  }\n  return {\n    getFile: getFile,\n    readAsync: readAsync,\n    setAsync: setAsync\n  };\n}\nvar DevelopmentCodeSigningInfoFile = getProjectDevelopmentCodeSigningInfoFile({\n  easProjectId: null,\n  scopeKey: null,\n  privateKey: null,\n  certificateChain: null\n});\nexports.DevelopmentCodeSigningInfoFile = DevelopmentCodeSigningInfoFile;\nfunction getCodeSigningInfoAsync(_x4, _x5, _x6) {\n  return _getCodeSigningInfoAsync.apply(this, arguments);\n}\nfunction _getCodeSigningInfoAsync() {\n  _getCodeSigningInfoAsync = _asyncToGenerator(function* (exp, expectSignatureHeader, privateKeyPath) {\n    if (!expectSignatureHeader) {\n      return null;\n    }\n    var parsedExpectSignature;\n    try {\n      parsedExpectSignature = (0, _structuredHeaders).parseDictionary(expectSignatureHeader);\n    } catch (_unused3) {\n      throw new _errors.CommandError(\"Invalid value for expo-expect-signature header\");\n    }\n    var expectedKeyIdOuter = parsedExpectSignature.get(\"keyid\");\n    if (!expectedKeyIdOuter) {\n      throw new _errors.CommandError(\"keyid not present in expo-expect-signature header\");\n    }\n    var expectedKeyId = expectedKeyIdOuter[0];\n    if (typeof expectedKeyId !== \"string\") {\n      throw new _errors.CommandError(`Invalid value for keyid in expo-expect-signature header: ${expectedKeyId}`);\n    }\n    var expectedAlg = null;\n    var expectedAlgOuter = parsedExpectSignature.get(\"alg\");\n    if (expectedAlgOuter) {\n      var expectedAlgTemp = expectedAlgOuter[0];\n      if (typeof expectedAlgTemp !== \"string\") {\n        throw new _errors.CommandError(\"Invalid value for alg in expo-expect-signature header\");\n      }\n      expectedAlg = expectedAlgTemp;\n    }\n    if (expectedKeyId === \"expo-root\") {\n      return yield getExpoRootDevelopmentCodeSigningInfoAsync(exp);\n    } else if (expectedKeyId === \"expo-go\") {\n      throw new _errors.CommandError(\"Invalid certificate requested: cannot sign with embedded keyid=expo-go key\");\n    } else {\n      return yield getProjectCodeSigningCertificateAsync(exp, privateKeyPath, expectedKeyId, expectedAlg);\n    }\n  });\n  return _getCodeSigningInfoAsync.apply(this, arguments);\n}\nfunction getExpoRootDevelopmentCodeSigningInfoAsync(_x7) {\n  return _getExpoRootDevelopmentCodeSigningInfoAsync.apply(this, arguments);\n}\nfunction _getExpoRootDevelopmentCodeSigningInfoAsync() {\n  _getExpoRootDevelopmentCodeSigningInfoAsync = _asyncToGenerator(function* (exp) {\n    var ref, ref1;\n    var easProjectId = (ref = exp.extra) == null ? void 0 : (ref1 = ref.eas) == null ? void 0 : ref1.projectId;\n    if (!easProjectId) {\n      debug(`WARN: Expo Application Services (EAS) is not configured for your project. Configuring EAS enables a more secure development experience amongst many other benefits. ${(0, _link).learnMore(\"https://docs.expo.dev/eas/\")}`);\n      return null;\n    }\n    var developmentCodeSigningInfoFromFile = yield DevelopmentCodeSigningInfoFile.readAsync(easProjectId);\n    var validatedCodeSigningInfo = validateStoredDevelopmentExpoRootCertificateCodeSigningInfo(developmentCodeSigningInfoFromFile, easProjectId);\n    if (!_env.env.EXPO_OFFLINE) {\n      try {\n        return yield fetchAndCacheNewDevelopmentCodeSigningInfoAsync(easProjectId);\n      } catch (e) {\n        if (validatedCodeSigningInfo) {\n          Log.warn(\"There was an error fetching the Expo development certificate, falling back to cached certificate\");\n          return validatedCodeSigningInfo;\n        } else {\n          throw e;\n        }\n      }\n    }\n    if (validatedCodeSigningInfo) {\n      return validatedCodeSigningInfo;\n    }\n    Log.warn(\"Offline and no cached development certificate found, unable to sign manifest\");\n    return null;\n  });\n  return _getExpoRootDevelopmentCodeSigningInfoAsync.apply(this, arguments);\n}\nfunction getProjectCodeSigningCertificateAsync(_x8, _x9, _x10, _x11) {\n  return _getProjectCodeSigningCertificateAsync.apply(this, arguments);\n}\nfunction _getProjectCodeSigningCertificateAsync() {\n  _getProjectCodeSigningCertificateAsync = _asyncToGenerator(function* (exp, privateKeyPath, expectedKeyId, expectedAlg) {\n    var ref, ref2;\n    var codeSigningCertificatePath = (ref = exp.updates) == null ? void 0 : ref.codeSigningCertificate;\n    if (!codeSigningCertificatePath) {\n      return null;\n    }\n    if (!privateKeyPath) {\n      throw new _errors.CommandError(\"Must specify --private-key-path argument to sign development manifest for requested code signing key\");\n    }\n    var codeSigningMetadata = (ref2 = exp.updates) == null ? void 0 : ref2.codeSigningMetadata;\n    if (!codeSigningMetadata) {\n      throw new _errors.CommandError('Must specify \"codeSigningMetadata\" under the \"updates\" field of your app config file to use EAS code signing');\n    }\n    var alg = codeSigningMetadata.alg,\n      keyid = codeSigningMetadata.keyid;\n    if (!alg || !keyid) {\n      throw new _errors.CommandError('Must specify \"keyid\" and \"alg\" in the \"codeSigningMetadata\" field under the \"updates\" field of your app config file to use EAS code signing');\n    }\n    if (expectedKeyId !== keyid) {\n      throw new _errors.CommandError(`keyid mismatch: client=${expectedKeyId}, project=${keyid}`);\n    }\n    if (expectedAlg && expectedAlg !== alg) {\n      throw new _errors.CommandError(`\"alg\" field mismatch (client=${expectedAlg}, project=${alg})`);\n    }\n    var _yield$getProjectPriv = yield getProjectPrivateKeyAndCertificateFromFilePathsAsync({\n        codeSigningCertificatePath: codeSigningCertificatePath,\n        privateKeyPath: privateKeyPath\n      }),\n      privateKeyPEM = _yield$getProjectPriv.privateKeyPEM,\n      certificatePEM = _yield$getProjectPriv.certificatePEM;\n    return {\n      keyId: keyid,\n      privateKey: privateKeyPEM,\n      certificateForPrivateKey: certificatePEM,\n      certificateChainForResponse: [],\n      scopeKey: null\n    };\n  });\n  return _getProjectCodeSigningCertificateAsync.apply(this, arguments);\n}\nfunction readFileWithErrorAsync(_x12, _x13) {\n  return _readFileWithErrorAsync.apply(this, arguments);\n}\nfunction _readFileWithErrorAsync() {\n  _readFileWithErrorAsync = _asyncToGenerator(function* (path, errorMessage) {\n    try {\n      return yield _fs.promises.readFile(path, \"utf8\");\n    } catch (_unused4) {\n      throw new _errors.CommandError(errorMessage);\n    }\n  });\n  return _readFileWithErrorAsync.apply(this, arguments);\n}\nfunction getProjectPrivateKeyAndCertificateFromFilePathsAsync(_x14) {\n  return _getProjectPrivateKeyAndCertificateFromFilePathsAsync.apply(this, arguments);\n}\nfunction _getProjectPrivateKeyAndCertificateFromFilePathsAsync() {\n  _getProjectPrivateKeyAndCertificateFromFilePathsAsync = _asyncToGenerator(function* (_ref) {\n    var codeSigningCertificatePath = _ref.codeSigningCertificatePath,\n      privateKeyPath = _ref.privateKeyPath;\n    var _yield$Promise$all = yield Promise.all([readFileWithErrorAsync(codeSigningCertificatePath, `Code signing certificate cannot be read from path: ${codeSigningCertificatePath}`), readFileWithErrorAsync(privateKeyPath, `Code signing private key cannot be read from path: ${privateKeyPath}`)]),\n      _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2),\n      codeSigningCertificatePEM = _yield$Promise$all2[0],\n      privateKeyPEM = _yield$Promise$all2[1];\n    var privateKey = (0, _codeSigningCertificates).convertPrivateKeyPEMToPrivateKey(privateKeyPEM);\n    var certificate = (0, _codeSigningCertificates).convertCertificatePEMToCertificate(codeSigningCertificatePEM);\n    (0, _codeSigningCertificates).validateSelfSignedCertificate(certificate, {\n      publicKey: certificate.publicKey,\n      privateKey: privateKey\n    });\n    return {\n      privateKeyPEM: privateKeyPEM,\n      certificatePEM: codeSigningCertificatePEM\n    };\n  });\n  return _getProjectPrivateKeyAndCertificateFromFilePathsAsync.apply(this, arguments);\n}\nfunction validateStoredDevelopmentExpoRootCertificateCodeSigningInfo(codeSigningInfo, easProjectId) {\n  if (codeSigningInfo.easProjectId !== easProjectId) {\n    return null;\n  }\n  var privateKeyPEM = codeSigningInfo.privateKey,\n    certificatePEMs = codeSigningInfo.certificateChain,\n    scopeKey = codeSigningInfo.scopeKey;\n  if (!privateKeyPEM || !certificatePEMs) {\n    return null;\n  }\n  var certificateChain = certificatePEMs.map(function (certificatePEM) {\n    return (0, _codeSigningCertificates).convertCertificatePEMToCertificate(certificatePEM);\n  });\n  var leafCertificate = certificateChain[0];\n  var now = new Date();\n  if (leafCertificate.validity.notBefore > now || leafCertificate.validity.notAfter < now) {\n    return null;\n  }\n  return {\n    keyId: \"expo-go\",\n    certificateChainForResponse: certificatePEMs,\n    certificateForPrivateKey: certificatePEMs[0],\n    privateKey: privateKeyPEM,\n    scopeKey: scopeKey\n  };\n}\nfunction actorCanGetProjectDevelopmentCertificate(actor, app) {\n  var ref, ref3, ref4, ref5;\n  var owningAccountId = app.ownerAccount.id;\n  var owningAccountIsActorPrimaryAccount = actor.__typename === \"User\" || actor.__typename === \"SSOUser\" ? actor.primaryAccount.id === owningAccountId : false;\n  var userHasPublishPermissionForOwningAccount = !!((ref4 = (ref = actor.accounts.find(function (account) {\n    return account.id === owningAccountId;\n  })) == null ? void 0 : (ref3 = ref.users) == null ? void 0 : ref3.find(function (userPermission) {\n    return userPermission.actor.id === actor.id;\n  })) == null ? void 0 : (ref5 = ref4.permissions) == null ? void 0 : ref5.includes(_generated.Permission.Publish));\n  return owningAccountIsActorPrimaryAccount || userHasPublishPermissionForOwningAccount;\n}\nfunction fetchAndCacheNewDevelopmentCodeSigningInfoAsync(_x15) {\n  return _fetchAndCacheNewDevelopmentCodeSigningInfoAsync.apply(this, arguments);\n}\nfunction _fetchAndCacheNewDevelopmentCodeSigningInfoAsync() {\n  _fetchAndCacheNewDevelopmentCodeSigningInfoAsync = _asyncToGenerator(function* (easProjectId) {\n    var actor = yield (0, _actions).ensureLoggedInAsync();\n    var app = yield _appQuery.AppQuery.byIdAsync(easProjectId);\n    if (!actorCanGetProjectDevelopmentCertificate(actor, app)) {\n      return null;\n    }\n    var keyPair = (0, _codeSigningCertificates).generateKeyPair();\n    var keyPairPEM = (0, _codeSigningCertificates).convertKeyPairToPEM(keyPair);\n    var csr = (0, _codeSigningCertificates).generateCSR(keyPair, `Development Certificate for ${easProjectId}`);\n    var csrPEM = (0, _codeSigningCertificates).convertCSRToCSRPEM(csr);\n    var _yield$Promise$all3 = yield Promise.all([(0, _getProjectDevelopmentCertificate).getProjectDevelopmentCertificateAsync(easProjectId, csrPEM), (0, _getExpoGoIntermediateCertificate).getExpoGoIntermediateCertificateAsync(easProjectId)]),\n      _yield$Promise$all4 = _slicedToArray(_yield$Promise$all3, 2),\n      developmentSigningCertificate = _yield$Promise$all4[0],\n      expoGoIntermediateCertificate = _yield$Promise$all4[1];\n    yield DevelopmentCodeSigningInfoFile.setAsync(easProjectId, {\n      easProjectId: easProjectId,\n      scopeKey: app.scopeKey,\n      privateKey: keyPairPEM.privateKeyPEM,\n      certificateChain: [developmentSigningCertificate, expoGoIntermediateCertificate]\n    });\n    return {\n      keyId: \"expo-go\",\n      certificateChainForResponse: [developmentSigningCertificate, expoGoIntermediateCertificate],\n      certificateForPrivateKey: developmentSigningCertificate,\n      privateKey: keyPairPEM.privateKeyPEM,\n      scopeKey: app.scopeKey\n    };\n  });\n  return _fetchAndCacheNewDevelopmentCodeSigningInfoAsync.apply(this, arguments);\n}\nfunction signManifestString(stringifiedManifest, codeSigningInfo) {\n  var privateKey = (0, _codeSigningCertificates).convertPrivateKeyPEMToPrivateKey(codeSigningInfo.privateKey);\n  var certificate = (0, _codeSigningCertificates).convertCertificatePEMToCertificate(codeSigningInfo.certificateForPrivateKey);\n  return (0, _codeSigningCertificates).signBufferRSASHA256AndVerify(privateKey, certificate, Buffer.from(stringifiedManifest, \"utf8\"));\n}","map":{"version":3,"names":["_slicedToArray","require","_defineProperty","_asyncToGenerator","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","getDevelopmentCodeSigningDirectory","getCodeSigningInfoAsync","signManifestString","_codeSigningCertificates","_getUserState","_jsonFile","_interopRequireDefault","_fs","_path","_structuredHeaders","_getExpoGoIntermediateCertificate","_getProjectDevelopmentCertificate","_appQuery","_actions","_generated","Log","_interopRequireWildcard","_link","_env","_errors","debug","DEVELOPMENT_CODE_SIGNING_SETTINGS_FILE_NAME","default","join","getExpoHomeDirectory","getProjectDevelopmentCodeSigningInfoFile","defaults","getFile","easProjectId","filePath","readAsync","_x","_readAsync","projectSettings","_unused","writeAsync","ensureDir","setAsync","_x2","_x3","_setAsync","json","mergeAsync","cantReadFileDefault","_unused2","DevelopmentCodeSigningInfoFile","scopeKey","privateKey","certificateChain","_x4","_x5","_x6","_getCodeSigningInfoAsync","exp","expectSignatureHeader","privateKeyPath","parsedExpectSignature","parseDictionary","_unused3","CommandError","expectedKeyIdOuter","get","expectedKeyId","expectedAlg","expectedAlgOuter","expectedAlgTemp","getExpoRootDevelopmentCodeSigningInfoAsync","getProjectCodeSigningCertificateAsync","_x7","_getExpoRootDevelopmentCodeSigningInfoAsync","ref","ref1","extra","eas","projectId","learnMore","developmentCodeSigningInfoFromFile","validatedCodeSigningInfo","validateStoredDevelopmentExpoRootCertificateCodeSigningInfo","env","EXPO_OFFLINE","fetchAndCacheNewDevelopmentCodeSigningInfoAsync","warn","_x8","_x9","_x10","_x11","_getProjectCodeSigningCertificateAsync","ref2","codeSigningCertificatePath","updates","codeSigningCertificate","codeSigningMetadata","alg","keyid","_yield$getProjectPriv","getProjectPrivateKeyAndCertificateFromFilePathsAsync","privateKeyPEM","certificatePEM","keyId","certificateForPrivateKey","certificateChainForResponse","readFileWithErrorAsync","_x12","_x13","_readFileWithErrorAsync","path","errorMessage","promises","readFile","_unused4","_x14","_getProjectPrivateKeyAndCertificateFromFilePathsAsync","_ref","_yield$Promise$all","Promise","all","_yield$Promise$all2","codeSigningCertificatePEM","convertPrivateKeyPEMToPrivateKey","certificate","convertCertificatePEMToCertificate","validateSelfSignedCertificate","publicKey","codeSigningInfo","certificatePEMs","map","leafCertificate","now","Date","validity","notBefore","notAfter","actorCanGetProjectDevelopmentCertificate","actor","app","ref3","ref4","ref5","owningAccountId","ownerAccount","id","owningAccountIsActorPrimaryAccount","__typename","primaryAccount","userHasPublishPermissionForOwningAccount","accounts","find","account","users","userPermission","permissions","includes","Permission","Publish","_x15","_fetchAndCacheNewDevelopmentCodeSigningInfoAsync","ensureLoggedInAsync","AppQuery","byIdAsync","keyPair","generateKeyPair","keyPairPEM","convertKeyPairToPEM","csr","generateCSR","csrPEM","convertCSRToCSRPEM","_yield$Promise$all3","getProjectDevelopmentCertificateAsync","getExpoGoIntermediateCertificateAsync","_yield$Promise$all4","developmentSigningCertificate","expoGoIntermediateCertificate","stringifiedManifest","signBufferRSASHA256AndVerify","Buffer","from"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\utils\\codesigning.ts"],"sourcesContent":["import {\n  convertCertificatePEMToCertificate,\n  convertKeyPairToPEM,\n  convertCSRToCSRPEM,\n  generateKeyPair,\n  generateCSR,\n  convertPrivateKeyPEMToPrivateKey,\n  validateSelfSignedCertificate,\n  signBufferRSASHA256AndVerify,\n} from '@expo/code-signing-certificates';\nimport { ExpoConfig } from '@expo/config';\nimport { getExpoHomeDirectory } from '@expo/config/build/getUserState';\nimport JsonFile, { JSONObject } from '@expo/json-file';\nimport { promises as fs } from 'fs';\nimport { pki as PKI } from 'node-forge';\nimport path from 'path';\nimport { Dictionary, parseDictionary } from 'structured-headers';\n\nimport { getExpoGoIntermediateCertificateAsync } from '../api/getExpoGoIntermediateCertificate';\nimport { getProjectDevelopmentCertificateAsync } from '../api/getProjectDevelopmentCertificate';\nimport { AppQuery } from '../api/graphql/queries/AppQuery';\nimport { ensureLoggedInAsync } from '../api/user/actions';\nimport { Actor } from '../api/user/user';\nimport { AppByIdQuery, Permission } from '../graphql/generated';\nimport * as Log from '../log';\nimport { learnMore } from '../utils/link';\nimport { env } from './env';\nimport { CommandError } from './errors';\n\nconst debug = require('debug')('expo:codesigning') as typeof console.log;\n\nexport type CodeSigningInfo = {\n  keyId: string;\n  privateKey: string;\n  certificateForPrivateKey: string;\n  /**\n   * Chain of certificates to serve in the manifest multipart body \"certificate_chain\" part.\n   * The leaf certificate must be the 0th element of the array, followed by any intermediate certificates\n   * necessary to evaluate the chain of trust ending in the implicitly trusted root certificate embedded in\n   * the client.\n   *\n   * An empty array indicates that there is no need to serve the certificate chain in the multipart response.\n   */\n  certificateChainForResponse: string[];\n  /**\n   * Scope key cached for the project when certificate is development Expo Go code signing.\n   * For project-specific code signing (keyId == the project's generated keyId) this is undefined.\n   */\n  scopeKey: string | null;\n};\n\ntype StoredDevelopmentExpoRootCodeSigningInfo = {\n  easProjectId: string | null;\n  scopeKey: string | null;\n  privateKey: string | null;\n  certificateChain: string[] | null;\n};\nconst DEVELOPMENT_CODE_SIGNING_SETTINGS_FILE_NAME = 'development-code-signing-settings-2.json';\n\nexport function getDevelopmentCodeSigningDirectory(): string {\n  return path.join(getExpoHomeDirectory(), 'codesigning');\n}\n\nfunction getProjectDevelopmentCodeSigningInfoFile<T extends JSONObject>(defaults: T) {\n  function getFile(easProjectId: string): JsonFile<T> {\n    const filePath = path.join(\n      getDevelopmentCodeSigningDirectory(),\n      easProjectId,\n      DEVELOPMENT_CODE_SIGNING_SETTINGS_FILE_NAME\n    );\n    return new JsonFile<T>(filePath);\n  }\n\n  async function readAsync(easProjectId: string): Promise<T> {\n    let projectSettings;\n    try {\n      projectSettings = await getFile(easProjectId).readAsync();\n    } catch {\n      projectSettings = await getFile(easProjectId).writeAsync(defaults, { ensureDir: true });\n    }\n    // Set defaults for any missing fields\n    return { ...defaults, ...projectSettings };\n  }\n\n  async function setAsync(easProjectId: string, json: Partial<T>): Promise<T> {\n    try {\n      return await getFile(easProjectId).mergeAsync(json, {\n        cantReadFileDefault: defaults,\n      });\n    } catch {\n      return await getFile(easProjectId).writeAsync(\n        {\n          ...defaults,\n          ...json,\n        },\n        { ensureDir: true }\n      );\n    }\n  }\n\n  return {\n    getFile,\n    readAsync,\n    setAsync,\n  };\n}\n\nexport const DevelopmentCodeSigningInfoFile =\n  getProjectDevelopmentCodeSigningInfoFile<StoredDevelopmentExpoRootCodeSigningInfo>({\n    easProjectId: null,\n    scopeKey: null,\n    privateKey: null,\n    certificateChain: null,\n  });\n\n/**\n * Get info necessary to generate a response `expo-signature` header given a project and incoming request `expo-expect-signature` header.\n * This only knows how to serve two code signing keyids:\n * - `expo-root` indicates that it should use a development certificate in the `expo-root` chain. See {@link getExpoRootDevelopmentCodeSigningInfoAsync}\n * - <developer's expo-updates keyid> indicates that it should sign with the configured certificate. See {@link getProjectCodeSigningCertificateAsync}\n */\nexport async function getCodeSigningInfoAsync(\n  exp: ExpoConfig,\n  expectSignatureHeader: string | null,\n  privateKeyPath: string | undefined\n): Promise<CodeSigningInfo | null> {\n  if (!expectSignatureHeader) {\n    return null;\n  }\n\n  let parsedExpectSignature: Dictionary;\n  try {\n    parsedExpectSignature = parseDictionary(expectSignatureHeader);\n  } catch {\n    throw new CommandError('Invalid value for expo-expect-signature header');\n  }\n\n  const expectedKeyIdOuter = parsedExpectSignature.get('keyid');\n  if (!expectedKeyIdOuter) {\n    throw new CommandError('keyid not present in expo-expect-signature header');\n  }\n\n  const expectedKeyId = expectedKeyIdOuter[0];\n  if (typeof expectedKeyId !== 'string') {\n    throw new CommandError(\n      `Invalid value for keyid in expo-expect-signature header: ${expectedKeyId}`\n    );\n  }\n\n  let expectedAlg: string | null = null;\n  const expectedAlgOuter = parsedExpectSignature.get('alg');\n  if (expectedAlgOuter) {\n    const expectedAlgTemp = expectedAlgOuter[0];\n    if (typeof expectedAlgTemp !== 'string') {\n      throw new CommandError('Invalid value for alg in expo-expect-signature header');\n    }\n    expectedAlg = expectedAlgTemp;\n  }\n\n  if (expectedKeyId === 'expo-root') {\n    return await getExpoRootDevelopmentCodeSigningInfoAsync(exp);\n  } else if (expectedKeyId === 'expo-go') {\n    throw new CommandError(\n      'Invalid certificate requested: cannot sign with embedded keyid=expo-go key'\n    );\n  } else {\n    return await getProjectCodeSigningCertificateAsync(\n      exp,\n      privateKeyPath,\n      expectedKeyId,\n      expectedAlg\n    );\n  }\n}\n\n/**\n * Get a development code signing certificate for the expo-root -> expo-go -> (development certificate) certificate chain.\n * This requires the user be logged in and online, otherwise try to use the cached development certificate.\n */\nasync function getExpoRootDevelopmentCodeSigningInfoAsync(\n  exp: ExpoConfig\n): Promise<CodeSigningInfo | null> {\n  const easProjectId = exp.extra?.eas?.projectId;\n  // can't check for scope key validity since scope key is derived on the server from projectId and we may be offline.\n  // we rely upon the client certificate check to validate the scope key\n  if (!easProjectId) {\n    debug(\n      `WARN: Expo Application Services (EAS) is not configured for your project. Configuring EAS enables a more secure development experience amongst many other benefits. ${learnMore(\n        'https://docs.expo.dev/eas/'\n      )}`\n    );\n    return null;\n  }\n\n  const developmentCodeSigningInfoFromFile = await DevelopmentCodeSigningInfoFile.readAsync(\n    easProjectId\n  );\n  const validatedCodeSigningInfo = validateStoredDevelopmentExpoRootCertificateCodeSigningInfo(\n    developmentCodeSigningInfoFromFile,\n    easProjectId\n  );\n\n  // 1. If online, ensure logged in, generate key pair and CSR, fetch and cache certificate chain for projectId\n  //    (overwriting existing dev cert in case projectId changed or it has expired)\n  if (!env.EXPO_OFFLINE) {\n    try {\n      return await fetchAndCacheNewDevelopmentCodeSigningInfoAsync(easProjectId);\n    } catch (e: any) {\n      if (validatedCodeSigningInfo) {\n        Log.warn(\n          'There was an error fetching the Expo development certificate, falling back to cached certificate'\n        );\n        return validatedCodeSigningInfo;\n      } else {\n        // need to return null here and say a message\n        throw e;\n      }\n    }\n  }\n\n  // 2. check for cached cert/private key matching projectId and scopeKey of project, if found and valid return private key and cert chain including expo-go cert\n  if (validatedCodeSigningInfo) {\n    return validatedCodeSigningInfo;\n  }\n\n  // 3. if offline, return null\n  Log.warn('Offline and no cached development certificate found, unable to sign manifest');\n  return null;\n}\n\n/**\n * Get the certificate configured for expo-updates for this project.\n */\nasync function getProjectCodeSigningCertificateAsync(\n  exp: ExpoConfig,\n  privateKeyPath: string | undefined,\n  expectedKeyId: string,\n  expectedAlg: string | null\n): Promise<CodeSigningInfo | null> {\n  const codeSigningCertificatePath = exp.updates?.codeSigningCertificate;\n  if (!codeSigningCertificatePath) {\n    return null;\n  }\n\n  if (!privateKeyPath) {\n    throw new CommandError(\n      'Must specify --private-key-path argument to sign development manifest for requested code signing key'\n    );\n  }\n\n  const codeSigningMetadata = exp.updates?.codeSigningMetadata;\n  if (!codeSigningMetadata) {\n    throw new CommandError(\n      'Must specify \"codeSigningMetadata\" under the \"updates\" field of your app config file to use EAS code signing'\n    );\n  }\n\n  const { alg, keyid } = codeSigningMetadata;\n  if (!alg || !keyid) {\n    throw new CommandError(\n      'Must specify \"keyid\" and \"alg\" in the \"codeSigningMetadata\" field under the \"updates\" field of your app config file to use EAS code signing'\n    );\n  }\n\n  if (expectedKeyId !== keyid) {\n    throw new CommandError(`keyid mismatch: client=${expectedKeyId}, project=${keyid}`);\n  }\n\n  if (expectedAlg && expectedAlg !== alg) {\n    throw new CommandError(`\"alg\" field mismatch (client=${expectedAlg}, project=${alg})`);\n  }\n\n  const { privateKeyPEM, certificatePEM } =\n    await getProjectPrivateKeyAndCertificateFromFilePathsAsync({\n      codeSigningCertificatePath,\n      privateKeyPath,\n    });\n\n  return {\n    keyId: keyid,\n    privateKey: privateKeyPEM,\n    certificateForPrivateKey: certificatePEM,\n    certificateChainForResponse: [],\n    scopeKey: null,\n  };\n}\n\nasync function readFileWithErrorAsync(path: string, errorMessage: string): Promise<string> {\n  try {\n    return await fs.readFile(path, 'utf8');\n  } catch {\n    throw new CommandError(errorMessage);\n  }\n}\n\nasync function getProjectPrivateKeyAndCertificateFromFilePathsAsync({\n  codeSigningCertificatePath,\n  privateKeyPath,\n}: {\n  codeSigningCertificatePath: string;\n  privateKeyPath: string;\n}): Promise<{ privateKeyPEM: string; certificatePEM: string }> {\n  const [codeSigningCertificatePEM, privateKeyPEM] = await Promise.all([\n    readFileWithErrorAsync(\n      codeSigningCertificatePath,\n      `Code signing certificate cannot be read from path: ${codeSigningCertificatePath}`\n    ),\n    readFileWithErrorAsync(\n      privateKeyPath,\n      `Code signing private key cannot be read from path: ${privateKeyPath}`\n    ),\n  ]);\n\n  const privateKey = convertPrivateKeyPEMToPrivateKey(privateKeyPEM);\n  const certificate = convertCertificatePEMToCertificate(codeSigningCertificatePEM);\n  validateSelfSignedCertificate(certificate, {\n    publicKey: certificate.publicKey as PKI.rsa.PublicKey,\n    privateKey,\n  });\n\n  return { privateKeyPEM, certificatePEM: codeSigningCertificatePEM };\n}\n\n/**\n * Validate that the cached code signing info is still valid for the current project and\n * that it hasn't expired. If invalid, return null.\n */\nfunction validateStoredDevelopmentExpoRootCertificateCodeSigningInfo(\n  codeSigningInfo: StoredDevelopmentExpoRootCodeSigningInfo,\n  easProjectId: string\n): CodeSigningInfo | null {\n  if (codeSigningInfo.easProjectId !== easProjectId) {\n    return null;\n  }\n\n  const {\n    privateKey: privateKeyPEM,\n    certificateChain: certificatePEMs,\n    scopeKey,\n  } = codeSigningInfo;\n  if (!privateKeyPEM || !certificatePEMs) {\n    return null;\n  }\n\n  const certificateChain = certificatePEMs.map((certificatePEM) =>\n    convertCertificatePEMToCertificate(certificatePEM)\n  );\n\n  // TODO(wschurman): maybe move to @expo/code-signing-certificates\n  const leafCertificate = certificateChain[0];\n  const now = new Date();\n  if (leafCertificate.validity.notBefore > now || leafCertificate.validity.notAfter < now) {\n    return null;\n  }\n\n  // TODO(wschurman): maybe do more validation, like validation of projectID and scopeKey within eas certificate extension\n\n  return {\n    keyId: 'expo-go',\n    certificateChainForResponse: certificatePEMs,\n    certificateForPrivateKey: certificatePEMs[0],\n    privateKey: privateKeyPEM,\n    scopeKey,\n  };\n}\n\nfunction actorCanGetProjectDevelopmentCertificate(actor: Actor, app: AppByIdQuery['app']['byId']) {\n  const owningAccountId = app.ownerAccount.id;\n\n  const owningAccountIsActorPrimaryAccount =\n    actor.__typename === 'User' || actor.__typename === 'SSOUser'\n      ? actor.primaryAccount.id === owningAccountId\n      : false;\n  const userHasPublishPermissionForOwningAccount = !!actor.accounts\n    .find((account) => account.id === owningAccountId)\n    ?.users?.find((userPermission) => userPermission.actor.id === actor.id)\n    ?.permissions?.includes(Permission.Publish);\n  return owningAccountIsActorPrimaryAccount || userHasPublishPermissionForOwningAccount;\n}\n\nasync function fetchAndCacheNewDevelopmentCodeSigningInfoAsync(\n  easProjectId: string\n): Promise<CodeSigningInfo | null> {\n  const actor = await ensureLoggedInAsync();\n  const app = await AppQuery.byIdAsync(easProjectId);\n  if (!actorCanGetProjectDevelopmentCertificate(actor, app)) {\n    return null;\n  }\n\n  const keyPair = generateKeyPair();\n  const keyPairPEM = convertKeyPairToPEM(keyPair);\n  const csr = generateCSR(keyPair, `Development Certificate for ${easProjectId}`);\n  const csrPEM = convertCSRToCSRPEM(csr);\n  const [developmentSigningCertificate, expoGoIntermediateCertificate] = await Promise.all([\n    getProjectDevelopmentCertificateAsync(easProjectId, csrPEM),\n    getExpoGoIntermediateCertificateAsync(easProjectId),\n  ]);\n\n  await DevelopmentCodeSigningInfoFile.setAsync(easProjectId, {\n    easProjectId,\n    scopeKey: app.scopeKey,\n    privateKey: keyPairPEM.privateKeyPEM,\n    certificateChain: [developmentSigningCertificate, expoGoIntermediateCertificate],\n  });\n\n  return {\n    keyId: 'expo-go',\n    certificateChainForResponse: [developmentSigningCertificate, expoGoIntermediateCertificate],\n    certificateForPrivateKey: developmentSigningCertificate,\n    privateKey: keyPairPEM.privateKeyPEM,\n    scopeKey: app.scopeKey,\n  };\n}\n/**\n * Generate the `expo-signature` header for a manifest and code signing info.\n */\nexport function signManifestString(\n  stringifiedManifest: string,\n  codeSigningInfo: CodeSigningInfo\n): string {\n  const privateKey = convertPrivateKeyPEMToPrivateKey(codeSigningInfo.privateKey);\n  const certificate = convertCertificatePEMToCertificate(codeSigningInfo.certificateForPrivateKey);\n  return signBufferRSASHA256AndVerify(\n    privateKey,\n    certificate,\n    Buffer.from(stringifiedManifest, 'utf8')\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}