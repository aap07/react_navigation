{"ast":null,"code":"'use strict';\n\nvar identity = require(\"../nodes/identity.js\");\nvar stringify = require(\"./stringify.js\");\nvar stringifyComment = require(\"./stringifyComment.js\");\nfunction stringifyDocument(doc, options) {\n  var _doc$directives;\n  var lines = [];\n  var hasDirectives = options.directives === true;\n  if (options.directives !== false && doc.directives) {\n    var dir = doc.directives.toString(doc);\n    if (dir) {\n      lines.push(dir);\n      hasDirectives = true;\n    } else if (doc.directives.docStart) hasDirectives = true;\n  }\n  if (hasDirectives) lines.push('---');\n  var ctx = stringify.createStringifyContext(doc, options);\n  var commentString = ctx.options.commentString;\n  if (doc.commentBefore) {\n    if (lines.length !== 1) lines.unshift('');\n    var cs = commentString(doc.commentBefore);\n    lines.unshift(stringifyComment.indentComment(cs, ''));\n  }\n  var chompKeep = false;\n  var contentComment = null;\n  if (doc.contents) {\n    if (identity.isNode(doc.contents)) {\n      if (doc.contents.spaceBefore && hasDirectives) lines.push('');\n      if (doc.contents.commentBefore) {\n        var _cs = commentString(doc.contents.commentBefore);\n        lines.push(stringifyComment.indentComment(_cs, ''));\n      }\n      ctx.forceBlockIndent = !!doc.comment;\n      contentComment = doc.contents.comment;\n    }\n    var onChompKeep = contentComment ? undefined : function () {\n      return chompKeep = true;\n    };\n    var body = stringify.stringify(doc.contents, ctx, function () {\n      return contentComment = null;\n    }, onChompKeep);\n    if (contentComment) body += stringifyComment.lineComment(body, '', commentString(contentComment));\n    if ((body[0] === '|' || body[0] === '>') && lines[lines.length - 1] === '---') {\n      lines[lines.length - 1] = `--- ${body}`;\n    } else lines.push(body);\n  } else {\n    lines.push(stringify.stringify(doc.contents, ctx));\n  }\n  if ((_doc$directives = doc.directives) != null && _doc$directives.docEnd) {\n    if (doc.comment) {\n      var _cs2 = commentString(doc.comment);\n      if (_cs2.includes('\\n')) {\n        lines.push('...');\n        lines.push(stringifyComment.indentComment(_cs2, ''));\n      } else {\n        lines.push(`... ${_cs2}`);\n      }\n    } else {\n      lines.push('...');\n    }\n  } else {\n    var dc = doc.comment;\n    if (dc && chompKeep) dc = dc.replace(/^\\n+/, '');\n    if (dc) {\n      if ((!chompKeep || contentComment) && lines[lines.length - 1] !== '') lines.push('');\n      lines.push(stringifyComment.indentComment(commentString(dc), ''));\n    }\n  }\n  return lines.join('\\n') + '\\n';\n}\nexports.stringifyDocument = stringifyDocument;","map":{"version":3,"names":["identity","require","stringify","stringifyComment","stringifyDocument","doc","options","_doc$directives","lines","hasDirectives","directives","dir","toString","push","docStart","ctx","createStringifyContext","commentString","commentBefore","length","unshift","cs","indentComment","chompKeep","contentComment","contents","isNode","spaceBefore","forceBlockIndent","comment","onChompKeep","undefined","body","lineComment","docEnd","includes","dc","replace","join","exports"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/dist/stringify/stringifyDocument.js"],"sourcesContent":["'use strict';\n\nvar identity = require('../nodes/identity.js');\nvar stringify = require('./stringify.js');\nvar stringifyComment = require('./stringifyComment.js');\n\nfunction stringifyDocument(doc, options) {\n    const lines = [];\n    let hasDirectives = options.directives === true;\n    if (options.directives !== false && doc.directives) {\n        const dir = doc.directives.toString(doc);\n        if (dir) {\n            lines.push(dir);\n            hasDirectives = true;\n        }\n        else if (doc.directives.docStart)\n            hasDirectives = true;\n    }\n    if (hasDirectives)\n        lines.push('---');\n    const ctx = stringify.createStringifyContext(doc, options);\n    const { commentString } = ctx.options;\n    if (doc.commentBefore) {\n        if (lines.length !== 1)\n            lines.unshift('');\n        const cs = commentString(doc.commentBefore);\n        lines.unshift(stringifyComment.indentComment(cs, ''));\n    }\n    let chompKeep = false;\n    let contentComment = null;\n    if (doc.contents) {\n        if (identity.isNode(doc.contents)) {\n            if (doc.contents.spaceBefore && hasDirectives)\n                lines.push('');\n            if (doc.contents.commentBefore) {\n                const cs = commentString(doc.contents.commentBefore);\n                lines.push(stringifyComment.indentComment(cs, ''));\n            }\n            // top-level block scalars need to be indented if followed by a comment\n            ctx.forceBlockIndent = !!doc.comment;\n            contentComment = doc.contents.comment;\n        }\n        const onChompKeep = contentComment ? undefined : () => (chompKeep = true);\n        let body = stringify.stringify(doc.contents, ctx, () => (contentComment = null), onChompKeep);\n        if (contentComment)\n            body += stringifyComment.lineComment(body, '', commentString(contentComment));\n        if ((body[0] === '|' || body[0] === '>') &&\n            lines[lines.length - 1] === '---') {\n            // Top-level block scalars with a preceding doc marker ought to use the\n            // same line for their header.\n            lines[lines.length - 1] = `--- ${body}`;\n        }\n        else\n            lines.push(body);\n    }\n    else {\n        lines.push(stringify.stringify(doc.contents, ctx));\n    }\n    if (doc.directives?.docEnd) {\n        if (doc.comment) {\n            const cs = commentString(doc.comment);\n            if (cs.includes('\\n')) {\n                lines.push('...');\n                lines.push(stringifyComment.indentComment(cs, ''));\n            }\n            else {\n                lines.push(`... ${cs}`);\n            }\n        }\n        else {\n            lines.push('...');\n        }\n    }\n    else {\n        let dc = doc.comment;\n        if (dc && chompKeep)\n            dc = dc.replace(/^\\n+/, '');\n        if (dc) {\n            if ((!chompKeep || contentComment) && lines[lines.length - 1] !== '')\n                lines.push('');\n            lines.push(stringifyComment.indentComment(commentString(dc), ''));\n        }\n    }\n    return lines.join('\\n') + '\\n';\n}\n\nexports.stringifyDocument = stringifyDocument;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}