{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\nvar _promises = require(\"fs/promises\");\nvar _path = require(\"path\");\nvar _routes = require(\"../routes\");\nvar fixtures = {\n  basic: {\n    staticRoutes: [\"/apple\", \"/banana\"],\n    dynamicRoutes: [\"/colors/${SingleRoutePart<T>}\", \"/animals/${CatchAllRoutePart<T>}\", \"/mix/${SingleRoutePart<T>}/${SingleRoutePart<T>}/${CatchAllRoutePart<T>}\"],\n    dynamicRouteTemplates: [\"/colors/[color]\", \"/animals/[...animal]\", \"/mix/[fruit]/[color]/[...animals]\"]\n  }\n};\nfunction _default() {\n  return _default2.apply(this, arguments);\n}\nfunction _default2() {\n  _default2 = _asyncToGenerator(function* () {\n    yield Promise.all(Object.entries(fixtures).map(function () {\n      var _ref2 = _asyncToGenerator(function* (_ref) {\n        var _ref3 = _slicedToArray(_ref, 2),\n          key = _ref3[0],\n          value = _ref3[1];\n        var template = (0, _routes).getTemplateString(new Set(value.staticRoutes), new Set(value.dynamicRoutes), new Set(value.dynamicRouteTemplates)).replaceAll(/^  /gm, \"\").replace(/declare module \"expo-router\" {/, \"\").replaceAll(/export function/g, \"export declare function\").replaceAll(/export const/g, \"export declare const\").slice(0, -2);\n        return (0, _promises).writeFile((0, _path).join(__dirname, \"./fixtures/\", key + \".ts\"), template);\n      });\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }()));\n    console.log(\"done\");\n  });\n  return _default2.apply(this, arguments);\n}","map":{"version":3,"names":["_slicedToArray","require","_asyncToGenerator","_promises","_path","_routes","fixtures","basic","staticRoutes","dynamicRoutes","dynamicRouteTemplates","_default","_default2","apply","arguments","Promise","all","Object","entries","map","_ref2","_ref","_ref3","key","value","template","getTemplateString","Set","replaceAll","replace","slice","writeFile","join","__dirname","_x","console","log"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\type-generation\\__typetests__\\generateFixtures.ts"],"sourcesContent":["import { writeFile } from 'fs/promises';\nimport { join } from 'path';\n\nimport { getTemplateString } from '../routes';\n\ntype Fixture = {\n  staticRoutes: string[];\n  dynamicRoutes: string[];\n  dynamicRouteTemplates: string[];\n};\n\nconst fixtures: Record<string, Fixture> = {\n  basic: {\n    staticRoutes: ['/apple', '/banana'],\n    dynamicRoutes: [\n      '/colors/${SingleRoutePart<T>}',\n      '/animals/${CatchAllRoutePart<T>}',\n      '/mix/${SingleRoutePart<T>}/${SingleRoutePart<T>}/${CatchAllRoutePart<T>}',\n    ],\n    dynamicRouteTemplates: [\n      '/colors/[color]',\n      '/animals/[...animal]',\n      '/mix/[fruit]/[color]/[...animals]',\n    ],\n  },\n};\n\nexport default async function () {\n  await Promise.all(\n    Object.entries(fixtures).map(async ([key, value]) => {\n      const template = getTemplateString(\n        new Set(value.staticRoutes),\n        new Set(value.dynamicRoutes),\n        new Set(value.dynamicRouteTemplates)\n      )\n        // The Template produces a global module .d.ts declaration\n        // These replacements turn it into a local module\n        .replaceAll(/^  /gm, '')\n        .replace(/declare module \"expo-router\" {/, '')\n        .replaceAll(/export function/g, 'export declare function')\n        .replaceAll(/export const/g, 'export declare const')\n        // Remove the last `}`\n        .slice(0, -2);\n\n      return writeFile(join(__dirname, './fixtures/', key + '.ts'), template);\n    })\n  );\n\n  console.log('done');\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,cAAA,GAAAC,OAAA;AAAA,IAAAC,iBAAA,GAAAD,OAAA;;;;;AAA0B,IAAAE,SAAa,GAAAF,OAAA,CAAb,aAAa;AAClB,IAAAG,KAAM,GAAAH,OAAA,CAAN,MAAM;AAEO,IAAAI,OAAW,GAAAJ,OAAA;AAQ7C,IAAMK,QAAQ,GAA4B;EACxCC,KAAK,EAAE;IACLC,YAAY,EAAE,CAAC,QAAQ,EAAE,SAAS,CAAC;IACnCC,aAAa,EAAE,CACb,+BAA+B,EAC/B,kCAAkC,EAClC,0EAA0E,CAC3E;IACDC,qBAAqB,EAAE,CACrB,iBAAiB,EACjB,sBAAsB,EACtB,mCAAmC;;CAGxC;AAAC,SAEaC,SAAA;EAAA,OAAAC,SAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,UAAA;EAAAA,SAAA,GAAAV,iBAAA,cAAkB;IAC/B,MAAMa,OAAO,CAACC,GAAG,CACfC,MAAM,CAACC,OAAO,CAACZ,QAAQ,CAAC,CAACa,GAAG;MAAA,IAAAC,KAAA,GAAAlB,iBAAA,CAAC,WAAAmB,IAAA,EAAwB;QAAA,IAAAC,KAAA,GAAAtB,cAAA,CAAAqB,IAAA;UAAhBE,GAAG,GAAAD,KAAA;UAAEE,KAAK,GAAAF,KAAA;QAC7C,IAAMG,QAAQ,GAAG,IAAApB,OAAiB,EAIjCqB,iBAJiC,CAChC,IAAIC,GAAG,CAACH,KAAK,CAAChB,YAAY,CAAC,EAC3B,IAAImB,GAAG,CAACH,KAAK,CAACf,aAAa,CAAC,EAC5B,IAAIkB,GAAG,CAACH,KAAK,CAACd,qBAAqB,CAAC,CACrC,CAGEkB,UAAU,UAAU,EAAE,CAAC,CACvBC,OAAO,mCAAmC,EAAE,CAAC,CAC7CD,UAAU,qBAAqB,yBAAyB,CAAC,CACzDA,UAAU,kBAAkB,sBAAsB,CAAC,CAEnDE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAEf,OAAO,IAAA3B,SAAS,EAAuD4B,SAAvD,CAAC,IAAA3B,KAAI,EAAuC4B,IAAvC,CAACC,SAAS,EAAE,aAAa,EAAEV,GAAG,GAAG,KAAK,CAAC,EAAEE,QAAQ,CAAC;OACxE;MAAA,iBAAAS,EAAA;QAAA,OAAAd,KAAA,CAAAP,KAAA,OAAAC,SAAA;MAAA;IAAA,IAAC,CACH;IAEDqB,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;GACpB;EAAA,OAAAxB,SAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}