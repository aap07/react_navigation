{"ast":null,"code":"'use strict';\n\nvar _require = require(\"./CppHelpers.js\"),\n  getCppTypeForAnnotation = _require.getCppTypeForAnnotation,\n  getEnumMaskName = _require.getEnumMaskName,\n  generateStructName = _require.generateStructName,\n  getImports = _require.getImports;\nvar _require2 = require(\"../Utils\"),\n  getEnumName = _require2.getEnumName;\nfunction getNativeTypeFromAnnotation(componentName, prop, nameParts) {\n  var typeAnnotation = prop.typeAnnotation;\n  switch (typeAnnotation.type) {\n    case 'BooleanTypeAnnotation':\n    case 'StringTypeAnnotation':\n    case 'Int32TypeAnnotation':\n    case 'DoubleTypeAnnotation':\n    case 'FloatTypeAnnotation':\n      return getCppTypeForAnnotation(typeAnnotation.type);\n    case 'ReservedPropTypeAnnotation':\n      switch (typeAnnotation.name) {\n        case 'ColorPrimitive':\n          return 'SharedColor';\n        case 'ImageSourcePrimitive':\n          return 'ImageSource';\n        case 'ImageRequestPrimitive':\n          return 'ImageRequest';\n        case 'PointPrimitive':\n          return 'Point';\n        case 'EdgeInsetsPrimitive':\n          return 'EdgeInsets';\n        case 'DimensionPrimitive':\n          return 'YGValue';\n        default:\n          typeAnnotation.name;\n          throw new Error('Received unknown ReservedPropTypeAnnotation');\n      }\n    case 'ArrayTypeAnnotation':\n      {\n        var arrayType = typeAnnotation.elementType.type;\n        if (arrayType === 'ArrayTypeAnnotation') {\n          return `std::vector<${getNativeTypeFromAnnotation(componentName, {\n            typeAnnotation: typeAnnotation.elementType,\n            name: ''\n          }, nameParts.concat([prop.name]))}>`;\n        }\n        if (arrayType === 'ObjectTypeAnnotation') {\n          var structName = generateStructName(componentName, nameParts.concat([prop.name]));\n          return `std::vector<${structName}>`;\n        }\n        if (arrayType === 'StringEnumTypeAnnotation') {\n          var enumName = getEnumName(componentName, prop.name);\n          return getEnumMaskName(enumName);\n        }\n        var itemAnnotation = getNativeTypeFromAnnotation(componentName, {\n          typeAnnotation: typeAnnotation.elementType,\n          name: componentName\n        }, nameParts.concat([prop.name]));\n        return `std::vector<${itemAnnotation}>`;\n      }\n    case 'ObjectTypeAnnotation':\n      {\n        return generateStructName(componentName, nameParts.concat([prop.name]));\n      }\n    case 'StringEnumTypeAnnotation':\n      return getEnumName(componentName, prop.name);\n    case 'Int32EnumTypeAnnotation':\n      return getEnumName(componentName, prop.name);\n    case 'MixedTypeAnnotation':\n      return 'folly::dynamic';\n    default:\n      typeAnnotation;\n      throw new Error(`Received invalid typeAnnotation for ${componentName} prop ${prop.name}, received ${typeAnnotation.type}`);\n  }\n}\nfunction convertTypesToConstAddressIfNeeded(type, convertibleTypes) {\n  if (convertibleTypes.has(type)) {\n    return `${type} const &`;\n  }\n  return type;\n}\nfunction convertValueToSharedPointerWithMove(type, value, convertibleTypes) {\n  if (convertibleTypes.has(type)) {\n    return `std::make_shared<${type}>(std::move(${value}))`;\n  }\n  return value;\n}\nfunction convertVariableToSharedPointer(type, convertibleTypes) {\n  if (convertibleTypes.has(type)) {\n    return `std::shared_ptr<${type}>`;\n  }\n  return type;\n}\nfunction convertVariableToPointer(type, value, convertibleTypes) {\n  if (convertibleTypes.has(type)) {\n    return `*${value}`;\n  }\n  return value;\n}\nvar convertCtorParamToAddressType = function convertCtorParamToAddressType(type) {\n  var typesToConvert = new Set();\n  typesToConvert.add('ImageSource');\n  return convertTypesToConstAddressIfNeeded(type, typesToConvert);\n};\nvar convertCtorInitToSharedPointers = function convertCtorInitToSharedPointers(type, value) {\n  var typesToConvert = new Set();\n  typesToConvert.add('ImageRequest');\n  return convertValueToSharedPointerWithMove(type, value, typesToConvert);\n};\nvar convertGettersReturnTypeToAddressType = function convertGettersReturnTypeToAddressType(type) {\n  var typesToConvert = new Set();\n  typesToConvert.add('ImageRequest');\n  return convertTypesToConstAddressIfNeeded(type, typesToConvert);\n};\nvar convertVarTypeToSharedPointer = function convertVarTypeToSharedPointer(type) {\n  var typesToConvert = new Set();\n  typesToConvert.add('ImageRequest');\n  return convertVariableToSharedPointer(type, typesToConvert);\n};\nvar convertVarValueToPointer = function convertVarValueToPointer(type, value) {\n  var typesToConvert = new Set();\n  typesToConvert.add('ImageRequest');\n  return convertVariableToPointer(type, value, typesToConvert);\n};\nfunction getLocalImports(properties) {\n  var imports = new Set();\n  function addImportsForNativeName(name) {\n    switch (name) {\n      case 'ColorPrimitive':\n        imports.add('#include <react/renderer/graphics/Color.h>');\n        return;\n      case 'ImageSourcePrimitive':\n        imports.add('#include <react/renderer/imagemanager/primitives.h>');\n        return;\n      case 'ImageRequestPrimitive':\n        imports.add('#include <react/renderer/imagemanager/ImageRequest.h>');\n        return;\n      case 'PointPrimitive':\n        imports.add('#include <react/renderer/graphics/Point.h>');\n        return;\n      case 'EdgeInsetsPrimitive':\n        imports.add('#include <react/renderer/graphics/RectangleEdges.h>');\n        return;\n      case 'DimensionPrimitive':\n        imports.add('#include <yoga/Yoga.h>');\n        return;\n      default:\n        name;\n        throw new Error(`Invalid ReservedPropTypeAnnotation name, got ${name}`);\n    }\n  }\n  properties.forEach(function (prop) {\n    var typeAnnotation = prop.typeAnnotation;\n    if (typeAnnotation.type === 'ReservedPropTypeAnnotation') {\n      addImportsForNativeName(typeAnnotation.name);\n    }\n    if (typeAnnotation.type === 'ArrayTypeAnnotation') {\n      imports.add('#include <vector>');\n      if (typeAnnotation.elementType.type === 'StringEnumTypeAnnotation') {\n        imports.add('#include <cinttypes>');\n      }\n    }\n    if (typeAnnotation.type === 'ArrayTypeAnnotation' && typeAnnotation.elementType.type === 'ReservedPropTypeAnnotation') {\n      addImportsForNativeName(typeAnnotation.elementType.name);\n    }\n    if (typeAnnotation.type === 'ArrayTypeAnnotation' && typeAnnotation.elementType.type === 'ObjectTypeAnnotation') {\n      imports.add('#include <react/renderer/core/propsConversions.h>');\n      var objectProps = typeAnnotation.elementType.properties;\n      var objectImports = getImports(objectProps);\n      var localImports = getLocalImports(objectProps);\n      objectImports.forEach(imports.add, imports);\n      localImports.forEach(imports.add, imports);\n    }\n    if (typeAnnotation.type === 'ObjectTypeAnnotation') {\n      imports.add('#include <react/renderer/core/propsConversions.h>');\n      var _objectImports = getImports(typeAnnotation.properties);\n      var _localImports = getLocalImports(typeAnnotation.properties);\n      _objectImports.forEach(imports.add, imports);\n      _localImports.forEach(imports.add, imports);\n    }\n  });\n  return imports;\n}\nmodule.exports = {\n  getNativeTypeFromAnnotation: getNativeTypeFromAnnotation,\n  convertCtorParamToAddressType: convertCtorParamToAddressType,\n  convertGettersReturnTypeToAddressType: convertGettersReturnTypeToAddressType,\n  convertCtorInitToSharedPointers: convertCtorInitToSharedPointers,\n  convertVarTypeToSharedPointer: convertVarTypeToSharedPointer,\n  convertVarValueToPointer: convertVarValueToPointer,\n  getLocalImports: getLocalImports\n};","map":{"version":3,"names":["_require","require","getCppTypeForAnnotation","getEnumMaskName","generateStructName","getImports","_require2","getEnumName","getNativeTypeFromAnnotation","componentName","prop","nameParts","typeAnnotation","type","name","Error","arrayType","elementType","concat","structName","enumName","itemAnnotation","convertTypesToConstAddressIfNeeded","convertibleTypes","has","convertValueToSharedPointerWithMove","value","convertVariableToSharedPointer","convertVariableToPointer","convertCtorParamToAddressType","typesToConvert","Set","add","convertCtorInitToSharedPointers","convertGettersReturnTypeToAddressType","convertVarTypeToSharedPointer","convertVarValueToPointer","getLocalImports","properties","imports","addImportsForNativeName","forEach","objectProps","objectImports","localImports","module","exports"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native/codegen/lib/generators/components/ComponentsGeneratorUtils.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * @format\n */\n\n'use strict';\n\nconst _require = require('./CppHelpers.js'),\n  getCppTypeForAnnotation = _require.getCppTypeForAnnotation,\n  getEnumMaskName = _require.getEnumMaskName,\n  generateStructName = _require.generateStructName,\n  getImports = _require.getImports;\nconst _require2 = require('../Utils'),\n  getEnumName = _require2.getEnumName;\nfunction getNativeTypeFromAnnotation(componentName, prop, nameParts) {\n  const typeAnnotation = prop.typeAnnotation;\n  switch (typeAnnotation.type) {\n    case 'BooleanTypeAnnotation':\n    case 'StringTypeAnnotation':\n    case 'Int32TypeAnnotation':\n    case 'DoubleTypeAnnotation':\n    case 'FloatTypeAnnotation':\n      return getCppTypeForAnnotation(typeAnnotation.type);\n    case 'ReservedPropTypeAnnotation':\n      switch (typeAnnotation.name) {\n        case 'ColorPrimitive':\n          return 'SharedColor';\n        case 'ImageSourcePrimitive':\n          return 'ImageSource';\n        case 'ImageRequestPrimitive':\n          return 'ImageRequest';\n        case 'PointPrimitive':\n          return 'Point';\n        case 'EdgeInsetsPrimitive':\n          return 'EdgeInsets';\n        case 'DimensionPrimitive':\n          return 'YGValue';\n        default:\n          typeAnnotation.name;\n          throw new Error('Received unknown ReservedPropTypeAnnotation');\n      }\n    case 'ArrayTypeAnnotation': {\n      const arrayType = typeAnnotation.elementType.type;\n      if (arrayType === 'ArrayTypeAnnotation') {\n        return `std::vector<${getNativeTypeFromAnnotation(\n          componentName,\n          {\n            typeAnnotation: typeAnnotation.elementType,\n            name: '',\n          },\n          nameParts.concat([prop.name]),\n        )}>`;\n      }\n      if (arrayType === 'ObjectTypeAnnotation') {\n        const structName = generateStructName(\n          componentName,\n          nameParts.concat([prop.name]),\n        );\n        return `std::vector<${structName}>`;\n      }\n      if (arrayType === 'StringEnumTypeAnnotation') {\n        const enumName = getEnumName(componentName, prop.name);\n        return getEnumMaskName(enumName);\n      }\n      const itemAnnotation = getNativeTypeFromAnnotation(\n        componentName,\n        {\n          typeAnnotation: typeAnnotation.elementType,\n          name: componentName,\n        },\n        nameParts.concat([prop.name]),\n      );\n      return `std::vector<${itemAnnotation}>`;\n    }\n    case 'ObjectTypeAnnotation': {\n      return generateStructName(componentName, nameParts.concat([prop.name]));\n    }\n    case 'StringEnumTypeAnnotation':\n      return getEnumName(componentName, prop.name);\n    case 'Int32EnumTypeAnnotation':\n      return getEnumName(componentName, prop.name);\n    case 'MixedTypeAnnotation':\n      return 'folly::dynamic';\n    default:\n      typeAnnotation;\n      throw new Error(\n        `Received invalid typeAnnotation for ${componentName} prop ${prop.name}, received ${typeAnnotation.type}`,\n      );\n  }\n}\n\n/// This function process some types if we need to customize them\n/// For example, the ImageSource and the reserved types could be trasformed into\n/// const address instead of using them as plain types.\nfunction convertTypesToConstAddressIfNeeded(type, convertibleTypes) {\n  if (convertibleTypes.has(type)) {\n    return `${type} const &`;\n  }\n  return type;\n}\nfunction convertValueToSharedPointerWithMove(type, value, convertibleTypes) {\n  if (convertibleTypes.has(type)) {\n    return `std::make_shared<${type}>(std::move(${value}))`;\n  }\n  return value;\n}\nfunction convertVariableToSharedPointer(type, convertibleTypes) {\n  if (convertibleTypes.has(type)) {\n    return `std::shared_ptr<${type}>`;\n  }\n  return type;\n}\nfunction convertVariableToPointer(type, value, convertibleTypes) {\n  if (convertibleTypes.has(type)) {\n    return `*${value}`;\n  }\n  return value;\n}\nconst convertCtorParamToAddressType = type => {\n  const typesToConvert = new Set();\n  typesToConvert.add('ImageSource');\n  return convertTypesToConstAddressIfNeeded(type, typesToConvert);\n};\nconst convertCtorInitToSharedPointers = (type, value) => {\n  const typesToConvert = new Set();\n  typesToConvert.add('ImageRequest');\n  return convertValueToSharedPointerWithMove(type, value, typesToConvert);\n};\nconst convertGettersReturnTypeToAddressType = type => {\n  const typesToConvert = new Set();\n  typesToConvert.add('ImageRequest');\n  return convertTypesToConstAddressIfNeeded(type, typesToConvert);\n};\nconst convertVarTypeToSharedPointer = type => {\n  const typesToConvert = new Set();\n  typesToConvert.add('ImageRequest');\n  return convertVariableToSharedPointer(type, typesToConvert);\n};\nconst convertVarValueToPointer = (type, value) => {\n  const typesToConvert = new Set();\n  typesToConvert.add('ImageRequest');\n  return convertVariableToPointer(type, value, typesToConvert);\n};\nfunction getLocalImports(properties) {\n  const imports = new Set();\n  function addImportsForNativeName(name) {\n    switch (name) {\n      case 'ColorPrimitive':\n        imports.add('#include <react/renderer/graphics/Color.h>');\n        return;\n      case 'ImageSourcePrimitive':\n        imports.add('#include <react/renderer/imagemanager/primitives.h>');\n        return;\n      case 'ImageRequestPrimitive':\n        imports.add('#include <react/renderer/imagemanager/ImageRequest.h>');\n        return;\n      case 'PointPrimitive':\n        imports.add('#include <react/renderer/graphics/Point.h>');\n        return;\n      case 'EdgeInsetsPrimitive':\n        imports.add('#include <react/renderer/graphics/RectangleEdges.h>');\n        return;\n      case 'DimensionPrimitive':\n        imports.add('#include <yoga/Yoga.h>');\n        return;\n      default:\n        name;\n        throw new Error(`Invalid ReservedPropTypeAnnotation name, got ${name}`);\n    }\n  }\n  properties.forEach(prop => {\n    const typeAnnotation = prop.typeAnnotation;\n    if (typeAnnotation.type === 'ReservedPropTypeAnnotation') {\n      addImportsForNativeName(typeAnnotation.name);\n    }\n    if (typeAnnotation.type === 'ArrayTypeAnnotation') {\n      imports.add('#include <vector>');\n      if (typeAnnotation.elementType.type === 'StringEnumTypeAnnotation') {\n        imports.add('#include <cinttypes>');\n      }\n    }\n    if (\n      typeAnnotation.type === 'ArrayTypeAnnotation' &&\n      typeAnnotation.elementType.type === 'ReservedPropTypeAnnotation'\n    ) {\n      addImportsForNativeName(typeAnnotation.elementType.name);\n    }\n    if (\n      typeAnnotation.type === 'ArrayTypeAnnotation' &&\n      typeAnnotation.elementType.type === 'ObjectTypeAnnotation'\n    ) {\n      imports.add('#include <react/renderer/core/propsConversions.h>');\n      const objectProps = typeAnnotation.elementType.properties;\n      // $FlowFixMe[incompatible-call] the type is guaranteed to be ObjectTypeAnnotation<PropTypeAnnotation>\n      const objectImports = getImports(objectProps);\n      // $FlowFixMe[incompatible-call] the type is guaranteed to be ObjectTypeAnnotation<PropTypeAnnotation>\n      const localImports = getLocalImports(objectProps);\n      // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n      objectImports.forEach(imports.add, imports);\n      // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n      localImports.forEach(imports.add, imports);\n    }\n    if (typeAnnotation.type === 'ObjectTypeAnnotation') {\n      imports.add('#include <react/renderer/core/propsConversions.h>');\n      const objectImports = getImports(typeAnnotation.properties);\n      const localImports = getLocalImports(typeAnnotation.properties);\n      // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n      objectImports.forEach(imports.add, imports);\n      // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n      localImports.forEach(imports.add, imports);\n    }\n  });\n  return imports;\n}\nmodule.exports = {\n  getNativeTypeFromAnnotation,\n  convertCtorParamToAddressType,\n  convertGettersReturnTypeToAddressType,\n  convertCtorInitToSharedPointers,\n  convertVarTypeToSharedPointer,\n  convertVarValueToPointer,\n  getLocalImports,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}