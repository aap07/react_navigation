{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/dist/compose/composer.d.ts"],"sourcesContent":["import { Directives } from '../doc/directives.js';\nimport { Document } from '../doc/Document.js';\nimport { ErrorCode, YAMLParseError, YAMLWarning } from '../errors.js';\nimport type { ParsedNode, Range } from '../nodes/Node.js';\nimport type { DocumentOptions, ParseOptions, SchemaOptions } from '../options.js';\nimport type { Token } from '../parse/cst.js';\ntype ErrorSource = number | [number, number] | Range | {\n    offset: number;\n    source?: string;\n};\nexport type ComposeErrorHandler = (source: ErrorSource, code: ErrorCode, message: string, warning?: boolean) => void;\n/**\n * Compose a stream of CST nodes into a stream of YAML Documents.\n *\n * ```ts\n * import { Composer, Parser } from 'yaml'\n *\n * const src: string = ...\n * const tokens = new Parser().parse(src)\n * const docs = new Composer().compose(tokens)\n * ```\n */\nexport declare class Composer<Contents extends ParsedNode = ParsedNode, Strict extends boolean = true> {\n    private directives;\n    private doc;\n    private options;\n    private atDirectives;\n    private prelude;\n    private errors;\n    private warnings;\n    constructor(options?: ParseOptions & DocumentOptions & SchemaOptions);\n    private onError;\n    private decorate;\n    /**\n     * Current stream status information.\n     *\n     * Mostly useful at the end of input for an empty stream.\n     */\n    streamInfo(): {\n        comment: string;\n        directives: Directives;\n        errors: YAMLParseError[];\n        warnings: YAMLWarning[];\n    };\n    /**\n     * Compose tokens into documents.\n     *\n     * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.\n     * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.\n     */\n    compose(tokens: Iterable<Token>, forceDoc?: boolean, endOffset?: number): Generator<Document.Parsed<Contents, Strict>, void, unknown>;\n    /** Advance the composer by one CST token. */\n    next(token: Token): Generator<Document.Parsed<Contents, Strict>, void, unknown>;\n    /**\n     * Call at end of input to yield any remaining document.\n     *\n     * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.\n     * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.\n     */\n    end(forceDoc?: boolean, endOffset?: number): Generator<Document.Parsed<Contents, Strict>, void, unknown>;\n}\nexport {};\n"],"mappings":"AA6DA"},"metadata":{},"sourceType":"module","externalDependencies":[]}