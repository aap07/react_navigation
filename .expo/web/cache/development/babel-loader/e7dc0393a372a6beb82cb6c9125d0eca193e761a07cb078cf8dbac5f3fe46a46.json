{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCssModulesFromBundler = getCssModulesFromBundler;\nexports.getFileName = getFileName;\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\nvar _js = require(\"metro/src/DeltaBundler/Serializers/helpers/js\");\nvar _splitBundleOptions = _interopRequireDefault(require(\"metro/src/lib/splitBundleOptions\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar STATIC_EXPORT_DIRECTORY = \"_expo/static/css\";\nfunction getCssModulesFromBundler(_x, _x2, _x3) {\n  return _getCssModulesFromBundler.apply(this, arguments);\n}\nfunction _getCssModulesFromBundler() {\n  _getCssModulesFromBundler = _asyncToGenerator(function* (config, incrementalBundler, options) {\n    if (options.platform !== \"web\") {\n      return [];\n    }\n    var _default = (0, _splitBundleOptions).default(options),\n      entryFile = _default.entryFile,\n      onProgress = _default.onProgress,\n      resolverOptions = _default.resolverOptions,\n      transformOptions = _default.transformOptions;\n    var dependencies = yield incrementalBundler.getDependencies([entryFile], transformOptions, resolverOptions, {\n      onProgress: onProgress,\n      shallow: false\n    });\n    var _unstable_serverRoot;\n    return getCssModules(dependencies, {\n      processModuleFilter: config.serializer.processModuleFilter,\n      assetPlugins: config.transformer.assetPlugins,\n      platform: transformOptions.platform,\n      projectRoot: (_unstable_serverRoot = config.server.unstable_serverRoot) != null ? _unstable_serverRoot : config.projectRoot,\n      publicPath: config.transformer.publicPath\n    });\n  });\n  return _getCssModulesFromBundler.apply(this, arguments);\n}\nfunction hashString(str) {\n  return _crypto.default.createHash(\"md5\").update(str).digest(\"hex\");\n}\nfunction getCssModules(dependencies, _ref) {\n  var processModuleFilter = _ref.processModuleFilter,\n    projectRoot = _ref.projectRoot;\n  var promises = [];\n  for (var module of dependencies.values()) {\n    if ((0, _js).isJsModule(module) && processModuleFilter(module) && (0, _js).getJsOutput(module).type === \"js/module\" && _path.default.relative(projectRoot, module.path) !== \"package.json\") {\n      var cssMetadata = getCssMetadata(module);\n      if (cssMetadata) {\n        var contents = cssMetadata.code;\n        var filename = _path.default.join(STATIC_EXPORT_DIRECTORY, getFileName(module.path) + \"-\" + hashString(module.path + contents) + \".css\");\n        promises.push({\n          originFilename: _path.default.relative(projectRoot, module.path),\n          filename: filename,\n          source: contents\n        });\n      }\n    }\n  }\n  return promises;\n}\nfunction getCssMetadata(module) {\n  var ref;\n  var data = (ref = module.output[0]) == null ? void 0 : ref.data;\n  if (data && typeof data === \"object\" && \"css\" in data) {\n    if (typeof data.css !== \"object\" || !(\"code\" in data.css)) {\n      throw new Error(`Unexpected CSS metadata in Metro module (${module.path}): ${JSON.stringify(data.css)}`);\n    }\n    return data.css;\n  }\n  return null;\n}\nfunction getFileName(module) {\n  return _path.default.basename(module).replace(/\\.[^.]+$/, \"\");\n}","map":{"version":3,"names":["_asyncToGenerator","require","getCssModulesFromBundler","getFileName","_crypto","_interopRequireDefault","_js","_splitBundleOptions","_path","STATIC_EXPORT_DIRECTORY","_x","_x2","_x3","_getCssModulesFromBundler","apply","arguments","config","incrementalBundler","options","platform","_default","default","entryFile","onProgress","resolverOptions","transformOptions","dependencies","getDependencies","shallow","_unstable_serverRoot","getCssModules","processModuleFilter","serializer","assetPlugins","transformer","projectRoot","server","unstable_serverRoot","publicPath","hashString","str","createHash","update","digest","_ref","promises","module","values","isJsModule","getJsOutput","type","relative","path","cssMetadata","getCssMetadata","contents","code","filename","join","push","originFilename","source","ref","data","output","css","Error","JSON","stringify","basename","replace"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\metro\\getCssModulesFromBundler.ts"],"sourcesContent":["import { MetroConfig } from '@expo/metro-config';\nimport crypto from 'crypto';\nimport type { Module } from 'metro';\nimport { getJsOutput, isJsModule } from 'metro/src/DeltaBundler/Serializers/helpers/js';\nimport type { ReadOnlyDependencies } from 'metro/src/DeltaBundler/types';\nimport type IncrementalBundler from 'metro/src/IncrementalBundler';\nimport splitBundleOptions from 'metro/src/lib/splitBundleOptions';\nimport path from 'path';\n\n// import { getAssetData } from 'metro/src/Assets';\n\ntype Options = {\n  processModuleFilter: (modules: Module) => boolean;\n  assetPlugins: readonly string[];\n  platform?: string | null;\n  projectRoot: string;\n  publicPath: string;\n};\n\ntype MetroModuleCSSMetadata = {\n  code: string;\n  lineCount: number;\n  map: any[];\n};\n\nexport type CSSAsset = {\n  // 'styles.css'\n  originFilename: string;\n  // '_expo/static/css/bc6aa0a69dcebf8e8cac1faa76705756.css'\n  filename: string;\n  // '\\ndiv {\\n    background: cyan;\\n}\\n\\n'\n  source: string;\n};\n\n// s = static\nconst STATIC_EXPORT_DIRECTORY = '_expo/static/css';\n\n/** @returns the static CSS assets used in a given bundle. CSS assets are only enabled if the `@expo/metro-config` `transformerPath` is used. */\nexport async function getCssModulesFromBundler(\n  config: MetroConfig,\n  incrementalBundler: IncrementalBundler,\n  options: any\n): Promise<CSSAsset[]> {\n  // Static CSS is a web-only feature.\n  if (options.platform !== 'web') {\n    return [];\n  }\n\n  const { entryFile, onProgress, resolverOptions, transformOptions } = splitBundleOptions(options);\n\n  const dependencies = await incrementalBundler.getDependencies(\n    [entryFile],\n    transformOptions,\n    resolverOptions,\n    { onProgress, shallow: false }\n  );\n\n  return getCssModules(dependencies, {\n    processModuleFilter: config.serializer.processModuleFilter,\n    assetPlugins: config.transformer.assetPlugins,\n    platform: transformOptions.platform,\n    projectRoot: config.server.unstable_serverRoot ?? config.projectRoot,\n    publicPath: config.transformer.publicPath,\n  });\n}\n\nfunction hashString(str: string) {\n  return crypto.createHash('md5').update(str).digest('hex');\n}\n\nfunction getCssModules(\n  dependencies: ReadOnlyDependencies,\n  { processModuleFilter, projectRoot }: Options\n) {\n  const promises = [];\n\n  for (const module of dependencies.values()) {\n    if (\n      isJsModule(module) &&\n      processModuleFilter(module) &&\n      getJsOutput(module).type === 'js/module' &&\n      path.relative(projectRoot, module.path) !== 'package.json'\n    ) {\n      const cssMetadata = getCssMetadata(module);\n      if (cssMetadata) {\n        const contents = cssMetadata.code;\n        const filename = path.join(\n          // Consistent location\n          STATIC_EXPORT_DIRECTORY,\n          // Hashed file contents + name for caching\n          getFileName(module.path) + '-' + hashString(module.path + contents) + '.css'\n        );\n        promises.push({\n          originFilename: path.relative(projectRoot, module.path),\n          filename,\n          source: contents,\n        });\n      }\n    }\n  }\n\n  return promises;\n}\n\nfunction getCssMetadata(module: Module): MetroModuleCSSMetadata | null {\n  const data = module.output[0]?.data;\n  if (data && typeof data === 'object' && 'css' in data) {\n    if (typeof data.css !== 'object' || !('code' in (data as any).css)) {\n      throw new Error(\n        `Unexpected CSS metadata in Metro module (${module.path}): ${JSON.stringify(data.css)}`\n      );\n    }\n    return data.css as MetroModuleCSSMetadata;\n  }\n  return null;\n}\n\nexport function getFileName(module: string) {\n  return path.basename(module).replace(/\\.[^.]+$/, '');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}