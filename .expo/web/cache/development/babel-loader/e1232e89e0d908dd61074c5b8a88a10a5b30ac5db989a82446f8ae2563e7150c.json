{"ast":null,"code":"import * as React from 'react';\nexport { default as PureNativeButton } from \"./GestureHandlerButton\";","map":{"version":3,"names":["React","default","PureNativeButton"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/react-native-gesture-handler/lib/typescript/components/GestureButtons.d.ts"],"sourcesContent":["import * as React from 'react';\nimport { StyleProp, ViewStyle } from 'react-native';\nimport { NativeViewGestureHandlerProps } from '../handlers/NativeViewGestureHandler';\nexport interface RawButtonProps extends NativeViewGestureHandlerProps {\n    /**\n     * Defines if more than one button could be pressed simultaneously. By default\n     * set true.\n     */\n    exclusive?: boolean;\n    /**\n     * Android only.\n     *\n     * Defines color of native ripple animation used since API level 21.\n     */\n    rippleColor?: any;\n    /**\n     * Android only.\n     *\n     * Defines radius of native ripple animation used since API level 21.\n     */\n    rippleRadius?: number | null;\n    /**\n     * Android only.\n     *\n     * Set this to true if you want the ripple animation to render outside the view bounds.\n     */\n    borderless?: boolean;\n    /**\n     * Android only.\n     *\n     * Defines whether the ripple animation should be drawn on the foreground of the view.\n     */\n    foreground?: boolean;\n    /**\n     * Android only.\n     *\n     * Set this to true if you don't want the system to play sound when the button is pressed.\n     */\n    touchSoundDisabled?: boolean;\n}\nexport interface BaseButtonProps extends RawButtonProps {\n    /**\n     * Called when the button gets pressed (analogous to `onPress` in\n     * `TouchableHighlight` from RN core).\n     */\n    onPress?: (pointerInside: boolean) => void;\n    /**\n     * Called when the button gets pressed and is held for `delayLongPress`\n     * milliseconds.\n     */\n    onLongPress?: () => void;\n    /**\n     * Called when button changes from inactive to active and vice versa. It\n     * passes active state as a boolean variable as a first parameter for that\n     * method.\n     */\n    onActiveStateChange?: (active: boolean) => void;\n    style?: StyleProp<ViewStyle>;\n    testID?: string;\n    /**\n     * Delay, in milliseconds, after which the `onLongPress` callback gets called.\n     * Defaults to 600.\n     */\n    delayLongPress?: number;\n}\nexport interface RectButtonProps extends BaseButtonProps {\n    /**\n     * Background color that will be dimmed when button is in active state.\n     */\n    underlayColor?: string;\n    /**\n     * iOS only.\n     *\n     * Opacity applied to the underlay when button is in active state.\n     */\n    activeOpacity?: number;\n}\nexport interface BorderlessButtonProps extends BaseButtonProps {\n    /**\n     * iOS only.\n     *\n     * Opacity applied to the button when it is in an active state.\n     */\n    activeOpacity?: number;\n}\nexport declare const RawButton: React.ForwardRefExoticComponent<RawButtonProps & NativeViewGestureHandlerProps & React.RefAttributes<React.ComponentType<any>>>;\nexport declare class BaseButton extends React.Component<BaseButtonProps> {\n    static defaultProps: {\n        delayLongPress: number;\n    };\n    private lastActive;\n    private longPressTimeout;\n    private longPressDetected;\n    constructor(props: BaseButtonProps);\n    private handleEvent;\n    private onLongPress;\n    private onHandlerStateChange;\n    private onGestureEvent;\n    render(): JSX.Element;\n}\nexport declare class RectButton extends React.Component<RectButtonProps> {\n    static defaultProps: {\n        activeOpacity: number;\n        underlayColor: string;\n    };\n    private opacity;\n    constructor(props: RectButtonProps);\n    private onActiveStateChange;\n    render(): JSX.Element;\n}\nexport declare class BorderlessButton extends React.Component<BorderlessButtonProps> {\n    static defaultProps: {\n        activeOpacity: number;\n        borderless: boolean;\n    };\n    private opacity;\n    constructor(props: BorderlessButtonProps);\n    private onActiveStateChange;\n    render(): JSX.Element;\n}\nexport { default as PureNativeButton } from './GestureHandlerButton';\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAwH9B,SAASC,OAAO,IAAIC,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}