{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveGoogleServicesFile = resolveGoogleServicesFile;\nexports.getAssetFieldPathsForManifestAsync = getAssetFieldPathsForManifestAsync;\nexports.resolveManifestAssets = resolveManifestAssets;\nvar _promises = _interopRequireDefault(require(\"fs/promises\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _getExpoSchema = require(\"../../../api/getExpoSchema\");\nvar Log = _interopRequireWildcard(require(\"../../../log\"));\nvar _dir = require(\"../../../utils/dir\");\nvar _errors = require(\"../../../utils/errors\");\nvar _obj = require(\"../../../utils/obj\");\nvar _url = require(\"../../../utils/url\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction resolveGoogleServicesFile(_x, _x2) {\n  return _resolveGoogleServicesFile.apply(this, arguments);\n}\nfunction _resolveGoogleServicesFile() {\n  _resolveGoogleServicesFile = _asyncToGenerator(function* (projectRoot, manifest) {\n    var ref, ref1;\n    if ((ref = manifest.android) == null ? void 0 : ref.googleServicesFile) {\n      try {\n        var contents = yield _promises.default.readFile(_path.default.resolve(projectRoot, manifest.android.googleServicesFile), \"utf8\");\n        manifest.android.googleServicesFile = contents;\n      } catch (_unused) {\n        Log.warn(`Could not parse Expo config: android.googleServicesFile: \"${manifest.android.googleServicesFile}\"`);\n        delete manifest.android.googleServicesFile;\n      }\n    }\n    if ((ref1 = manifest.ios) == null ? void 0 : ref1.googleServicesFile) {\n      try {\n        var _contents = yield _promises.default.readFile(_path.default.resolve(projectRoot, manifest.ios.googleServicesFile), \"base64\");\n        manifest.ios.googleServicesFile = _contents;\n      } catch (_unused2) {\n        Log.warn(`Could not parse Expo config: ios.googleServicesFile: \"${manifest.ios.googleServicesFile}\"`);\n        delete manifest.ios.googleServicesFile;\n      }\n    }\n    return manifest;\n  });\n  return _resolveGoogleServicesFile.apply(this, arguments);\n}\nfunction getAssetFieldPathsForManifestAsync(_x3) {\n  return _getAssetFieldPathsForManifestAsync.apply(this, arguments);\n}\nfunction _getAssetFieldPathsForManifestAsync() {\n  _getAssetFieldPathsForManifestAsync = _asyncToGenerator(function* (manifest) {\n    var sdkAssetFieldPaths = yield (0, _getExpoSchema).getAssetSchemasAsync(manifest.sdkVersion);\n    return sdkAssetFieldPaths.filter(function (assetSchema) {\n      return (0, _obj).get(manifest, assetSchema);\n    });\n  });\n  return _getAssetFieldPathsForManifestAsync.apply(this, arguments);\n}\nfunction resolveManifestAssets(_x4, _x5) {\n  return _resolveManifestAssets.apply(this, arguments);\n}\nfunction _resolveManifestAssets() {\n  _resolveManifestAssets = _asyncToGenerator(function* (projectRoot, _ref) {\n    var manifest = _ref.manifest,\n      resolver = _ref.resolver,\n      strict = _ref.strict;\n    try {\n      var assetSchemas = yield getAssetFieldPathsForManifestAsync(manifest);\n      var urls = yield Promise.all(assetSchemas.map(function () {\n        var _ref2 = _asyncToGenerator(function* (manifestField) {\n          var pathOrURL = (0, _obj).get(manifest, manifestField);\n          if ((0, _url).validateUrl(pathOrURL, {\n            requireProtocol: true\n          })) {\n            return pathOrURL;\n          }\n          if (yield (0, _dir).fileExistsAsync(_path.default.resolve(projectRoot, pathOrURL))) {\n            return yield resolver(pathOrURL);\n          }\n          var err = new _errors.CommandError(\"MANIFEST_ASSET\", \"Could not resolve local asset: \" + pathOrURL);\n          err.localAssetPath = pathOrURL;\n          err.manifestField = manifestField;\n          throw err;\n        });\n        return function (_x6) {\n          return _ref2.apply(this, arguments);\n        };\n      }()));\n      assetSchemas.forEach(function (manifestField, index) {\n        return (0, _obj).set(manifest, `${manifestField}Url`, urls[index]);\n      });\n    } catch (error) {\n      if (error.localAssetPath) {\n        Log.warn(`Unable to resolve asset \"${error.localAssetPath}\" from \"${error.manifestField}\" in your app.json or app.config.js`);\n      } else {\n        Log.warn(`Warning: Unable to resolve manifest assets. Icons and fonts might not work. ${error.message}.`);\n      }\n      if (strict) {\n        throw new _errors.CommandError(\"MANIFEST_ASSET\", \"Failed to export manifest assets: \" + error.message);\n      }\n    }\n  });\n  return _resolveManifestAssets.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","resolveGoogleServicesFile","getAssetFieldPathsForManifestAsync","resolveManifestAssets","_promises","_interopRequireDefault","_path","_getExpoSchema","Log","_interopRequireWildcard","_dir","_errors","_obj","_url","_x","_x2","_resolveGoogleServicesFile","apply","arguments","projectRoot","manifest","ref","ref1","android","googleServicesFile","contents","default","readFile","resolve","_unused","warn","ios","_unused2","_x3","_getAssetFieldPathsForManifestAsync","sdkAssetFieldPaths","getAssetSchemasAsync","sdkVersion","filter","assetSchema","get","_x4","_x5","_resolveManifestAssets","_ref","resolver","strict","assetSchemas","urls","Promise","all","map","_ref2","manifestField","pathOrURL","validateUrl","requireProtocol","fileExistsAsync","err","CommandError","localAssetPath","_x6","forEach","index","set","error","message"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\middleware\\resolveAssets.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config';\nimport { BundleAssetWithFileHashes } from '@expo/dev-server';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nimport { getAssetSchemasAsync } from '../../../api/getExpoSchema';\nimport * as Log from '../../../log';\nimport { fileExistsAsync } from '../../../utils/dir';\nimport { CommandError } from '../../../utils/errors';\nimport { get, set } from '../../../utils/obj';\nimport { validateUrl } from '../../../utils/url';\n\ntype ManifestAsset = { fileHashes: string[]; files: string[]; hash: string };\n\nexport type Asset = ManifestAsset | BundleAssetWithFileHashes;\n\ntype ManifestResolutionError = Error & {\n  localAssetPath?: string;\n  manifestField?: string;\n};\n\n/** Inline the contents of each platform's `googleServicesFile` so runtimes can access them. */\nexport async function resolveGoogleServicesFile(\n  projectRoot: string,\n  manifest: Pick<ExpoConfig, 'android' | 'ios'>\n) {\n  if (manifest.android?.googleServicesFile) {\n    try {\n      const contents = await fs.readFile(\n        path.resolve(projectRoot, manifest.android.googleServicesFile),\n        'utf8'\n      );\n      manifest.android.googleServicesFile = contents;\n    } catch {\n      Log.warn(\n        `Could not parse Expo config: android.googleServicesFile: \"${manifest.android.googleServicesFile}\"`\n      );\n      // Delete the field so Expo Go doesn't attempt to read it.\n      delete manifest.android.googleServicesFile;\n    }\n  }\n  if (manifest.ios?.googleServicesFile) {\n    try {\n      const contents = await fs.readFile(\n        path.resolve(projectRoot, manifest.ios.googleServicesFile),\n        'base64'\n      );\n      manifest.ios.googleServicesFile = contents;\n    } catch {\n      Log.warn(\n        `Could not parse Expo config: ios.googleServicesFile: \"${manifest.ios.googleServicesFile}\"`\n      );\n      // Delete the field so Expo Go doesn't attempt to read it.\n      delete manifest.ios.googleServicesFile;\n    }\n  }\n  return manifest;\n}\n\n/**\n * Get all fields in the manifest that match assets, then filter the ones that aren't set.\n *\n * @param manifest\n * @returns Asset fields that the user has set like [\"icon\", \"splash.image\", ...]\n */\nexport async function getAssetFieldPathsForManifestAsync(manifest: ExpoConfig): Promise<string[]> {\n  // String array like [\"icon\", \"notification.icon\", \"loading.icon\", \"loading.backgroundImage\", \"ios.icon\", ...]\n  const sdkAssetFieldPaths = await getAssetSchemasAsync(manifest.sdkVersion);\n  return sdkAssetFieldPaths.filter((assetSchema) => get(manifest, assetSchema));\n}\n\n/** Resolve all assets in the app.json inline. */\nexport async function resolveManifestAssets(\n  projectRoot: string,\n  {\n    manifest,\n    resolver,\n    strict,\n  }: {\n    manifest: ExpoConfig;\n    resolver: (assetPath: string) => Promise<string>;\n    strict?: boolean;\n  }\n) {\n  try {\n    // Asset fields that the user has set like [\"icon\", \"splash.image\"]\n    const assetSchemas = await getAssetFieldPathsForManifestAsync(manifest);\n    // Get the URLs\n    const urls = await Promise.all(\n      assetSchemas.map(async (manifestField) => {\n        const pathOrURL = get(manifest, manifestField);\n        // URL\n        if (validateUrl(pathOrURL, { requireProtocol: true })) {\n          return pathOrURL;\n        }\n\n        // File path\n        if (await fileExistsAsync(path.resolve(projectRoot, pathOrURL))) {\n          return await resolver(pathOrURL);\n        }\n\n        // Unknown\n        const err: ManifestResolutionError = new CommandError(\n          'MANIFEST_ASSET',\n          'Could not resolve local asset: ' + pathOrURL\n        );\n        err.localAssetPath = pathOrURL;\n        err.manifestField = manifestField;\n        throw err;\n      })\n    );\n\n    // Set the corresponding URL fields\n    assetSchemas.forEach((manifestField, index: number) =>\n      set(manifest, `${manifestField}Url`, urls[index])\n    );\n  } catch (error: any) {\n    if (error.localAssetPath) {\n      Log.warn(\n        `Unable to resolve asset \"${error.localAssetPath}\" from \"${error.manifestField}\" in your app.json or app.config.js`\n      );\n    } else {\n      Log.warn(\n        `Warning: Unable to resolve manifest assets. Icons and fonts might not work. ${error.message}.`\n      );\n    }\n\n    if (strict) {\n      throw new CommandError(\n        'MANIFEST_ASSET',\n        'Failed to export manifest assets: ' + error.message\n      );\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}