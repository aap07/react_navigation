{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/dist/compose/compose-node.d.ts"],"sourcesContent":["import type { Directives } from '../doc/directives.js';\nimport type { ParsedNode } from '../nodes/Node.js';\nimport type { ParseOptions } from '../options.js';\nimport type { SourceToken, Token } from '../parse/cst.js';\nimport type { Schema } from '../schema/Schema.js';\nimport type { ComposeErrorHandler } from './composer.js';\nexport interface ComposeContext {\n    atRoot: boolean;\n    directives: Directives;\n    options: Readonly<Required<Omit<ParseOptions, 'lineCounter'>>>;\n    schema: Readonly<Schema>;\n}\ninterface Props {\n    spaceBefore: boolean;\n    comment: string;\n    anchor: SourceToken | null;\n    tag: SourceToken | null;\n    end: number;\n}\ndeclare const CN: {\n    composeNode: typeof composeNode;\n    composeEmptyNode: typeof composeEmptyNode;\n};\nexport type ComposeNode = typeof CN;\nexport declare function composeNode(ctx: ComposeContext, token: Token, props: Props, onError: ComposeErrorHandler): ParsedNode;\nexport declare function composeEmptyNode(ctx: ComposeContext, offset: number, before: Token[] | undefined, pos: number | null, { spaceBefore, comment, anchor, tag, end }: Props, onError: ComposeErrorHandler): import(\"../index.js\").Scalar.Parsed;\nexport {};\n"],"mappings":"AA0BA"},"metadata":{},"sourceType":"module","externalDependencies":[]}