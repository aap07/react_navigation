{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/prebuild-config/build/plugins/icons/withAndroidIcons.d.ts"],"sourcesContent":["import { AndroidConfig, ConfigPlugin } from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\ntype DPIString = 'mdpi' | 'hdpi' | 'xhdpi' | 'xxhdpi' | 'xxxhdpi';\ntype dpiMap = Record<DPIString, {\n    folderName: string;\n    scale: number;\n}>;\nexport declare const dpiValues: dpiMap;\nexport declare const ANDROID_RES_PATH = \"android/app/src/main/res/\";\nexport declare const withAndroidIcons: ConfigPlugin;\nexport declare function setRoundIconManifest(config: Pick<ExpoConfig, 'android'>, manifest: AndroidConfig.Manifest.AndroidManifest): AndroidConfig.Manifest.AndroidManifest;\nexport declare function getIcon(config: ExpoConfig): string | null;\nexport declare function getAdaptiveIcon(config: ExpoConfig): {\n    foregroundImage: string | null;\n    backgroundColor: string | null;\n    backgroundImage: string | null;\n    monochromeImage: string | null;\n};\n/**\n * Resizes the user-provided icon to create a set of legacy icon files in\n * their respective \"mipmap\" directories for <= Android 7, and creates a set of adaptive\n * icon files for > Android 7 from the adaptive icon files (if provided).\n */\nexport declare function setIconAsync(projectRoot: string, { icon, backgroundColor, backgroundImage, monochromeImage, isAdaptive, }: {\n    icon: string | null;\n    backgroundColor: string | null;\n    backgroundImage: string | null;\n    monochromeImage: string | null;\n    isAdaptive: boolean;\n}): Promise<true | null>;\n/**\n * Configures adaptive icon files to be used on Android 8 and up. A foreground image must be provided,\n * and will have a transparent background unless:\n * - A backgroundImage is provided, or\n * - A backgroundColor was specified\n */\nexport declare function configureAdaptiveIconAsync(projectRoot: string, foregroundImage: string, backgroundImage: string | null, monochromeImage: string | null, isAdaptive: boolean): Promise<void>;\nexport declare const createAdaptiveIconXmlString: (backgroundImage: string | null, monochromeImage: string | null) => string;\nexport {};\n"],"mappings":"AAsCA"},"metadata":{},"sourceType":"module","externalDependencies":[]}