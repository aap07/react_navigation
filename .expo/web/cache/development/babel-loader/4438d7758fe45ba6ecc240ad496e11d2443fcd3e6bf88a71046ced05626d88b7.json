{"ast":null,"code":"'use strict';\n\nfunction extendsForProp(prop, types) {\n  if (!prop.argument) {\n    console.log('null', prop);\n  }\n  var name = prop.argument.id.name;\n  if (types[name] != null) {\n    return null;\n  }\n  switch (name) {\n    case 'ViewProps':\n      return {\n        type: 'ReactNativeBuiltInType',\n        knownTypeName: 'ReactNativeCoreViewProps'\n      };\n    default:\n      {\n        throw new Error(`Unable to handle prop spread: ${name}`);\n      }\n  }\n}\nfunction removeKnownExtends(typeDefinition, types) {\n  return typeDefinition.filter(function (prop) {\n    return prop.type !== 'ObjectTypeSpreadProperty' || extendsForProp(prop, types) === null;\n  });\n}\nfunction getExtendsProps(typeDefinition, types) {\n  return typeDefinition.filter(function (prop) {\n    return prop.type === 'ObjectTypeSpreadProperty';\n  }).map(function (prop) {\n    return extendsForProp(prop, types);\n  }).filter(Boolean);\n}\nmodule.exports = {\n  getExtendsProps: getExtendsProps,\n  removeKnownExtends: removeKnownExtends\n};","map":{"version":3,"names":["extendsForProp","prop","types","argument","console","log","name","id","type","knownTypeName","Error","removeKnownExtends","typeDefinition","filter","getExtendsProps","map","Boolean","module","exports"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native/codegen/lib/parsers/flow/components/extends.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * @format\n */\n\n'use strict';\n\nfunction extendsForProp(prop, types) {\n  if (!prop.argument) {\n    console.log('null', prop);\n  }\n  const name = prop.argument.id.name;\n  if (types[name] != null) {\n    // This type is locally defined in the file\n    return null;\n  }\n  switch (name) {\n    case 'ViewProps':\n      return {\n        type: 'ReactNativeBuiltInType',\n        knownTypeName: 'ReactNativeCoreViewProps',\n      };\n    default: {\n      throw new Error(`Unable to handle prop spread: ${name}`);\n    }\n  }\n}\nfunction removeKnownExtends(typeDefinition, types) {\n  return typeDefinition.filter(\n    prop =>\n      prop.type !== 'ObjectTypeSpreadProperty' ||\n      extendsForProp(prop, types) === null,\n  );\n}\n\n// $FlowFixMe[unclear-type] there's no flowtype for ASTs\n\nfunction getExtendsProps(typeDefinition, types) {\n  return typeDefinition\n    .filter(prop => prop.type === 'ObjectTypeSpreadProperty')\n    .map(prop => extendsForProp(prop, types))\n    .filter(Boolean);\n}\nmodule.exports = {\n  getExtendsProps,\n  removeKnownExtends,\n};\n"],"mappings":"AAUA,YAAY;;AAEZ,SAASA,cAAcA,CAACC,IAAI,EAAEC,KAAK,EAAE;EACnC,IAAI,CAACD,IAAI,CAACE,QAAQ,EAAE;IAClBC,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAAC;EAC3B;EACA,IAAMK,IAAI,GAAGL,IAAI,CAACE,QAAQ,CAACI,EAAE,CAACD,IAAI;EAClC,IAAIJ,KAAK,CAACI,IAAI,CAAC,IAAI,IAAI,EAAE;IAEvB,OAAO,IAAI;EACb;EACA,QAAQA,IAAI;IACV,KAAK,WAAW;MACd,OAAO;QACLE,IAAI,EAAE,wBAAwB;QAC9BC,aAAa,EAAE;MACjB,CAAC;IACH;MAAS;QACP,MAAM,IAAIC,KAAK,CAAE,iCAAgCJ,IAAK,EAAC,CAAC;MAC1D;EACF;AACF;AACA,SAASK,kBAAkBA,CAACC,cAAc,EAAEV,KAAK,EAAE;EACjD,OAAOU,cAAc,CAACC,MAAM,CAC1B,UAAAZ,IAAI;IAAA,OACFA,IAAI,CAACO,IAAI,KAAK,0BAA0B,IACxCR,cAAc,CAACC,IAAI,EAAEC,KAAK,CAAC,KAAK,IAAI;EAAA,CACxC,CAAC;AACH;AAIA,SAASY,eAAeA,CAACF,cAAc,EAAEV,KAAK,EAAE;EAC9C,OAAOU,cAAc,CAClBC,MAAM,CAAC,UAAAZ,IAAI;IAAA,OAAIA,IAAI,CAACO,IAAI,KAAK,0BAA0B;EAAA,EAAC,CACxDO,GAAG,CAAC,UAAAd,IAAI;IAAA,OAAID,cAAc,CAACC,IAAI,EAAEC,KAAK,CAAC;EAAA,EAAC,CACxCW,MAAM,CAACG,OAAO,CAAC;AACpB;AACAC,MAAM,CAACC,OAAO,GAAG;EACfJ,eAAe,EAAfA,eAAe;EACfH,kBAAkB,EAAlBA;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}