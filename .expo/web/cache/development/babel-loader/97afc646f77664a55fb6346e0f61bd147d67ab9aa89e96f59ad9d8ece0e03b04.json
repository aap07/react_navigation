{"ast":null,"code":"import { Collection } from \"./Collection.js\";","map":{"version":3,"names":["Collection"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/dist/nodes/YAMLMap.d.ts"],"sourcesContent":["import type { BlockMap, FlowCollection } from '../parse/cst.js';\nimport type { Schema } from '../schema/Schema.js';\nimport type { StringifyContext } from '../stringify/stringify.js';\nimport { CreateNodeContext } from '../util.js';\nimport { Collection } from './Collection.js';\nimport type { ParsedNode, Range } from './Node.js';\nimport { Pair } from './Pair.js';\nimport { Scalar } from './Scalar.js';\nimport type { ToJSContext } from './toJS.js';\nexport type MapLike = Map<unknown, unknown> | Set<unknown> | Record<string | number | symbol, unknown>;\nexport declare function findPair<K = unknown, V = unknown>(items: Iterable<Pair<K, V>>, key: unknown): Pair<K, V> | undefined;\nexport declare namespace YAMLMap {\n    interface Parsed<K extends ParsedNode = ParsedNode, V extends ParsedNode | null = ParsedNode | null> extends YAMLMap<K, V> {\n        items: Pair<K, V>[];\n        range: Range;\n        srcToken?: BlockMap | FlowCollection;\n    }\n}\nexport declare class YAMLMap<K = unknown, V = unknown> extends Collection {\n    static get tagName(): 'tag:yaml.org,2002:map';\n    items: Pair<K, V>[];\n    constructor(schema?: Schema);\n    /**\n     * A generic collection parsing method that can be extended\n     * to other node classes that inherit from YAMLMap\n     */\n    static from(schema: Schema, obj: unknown, ctx: CreateNodeContext): YAMLMap<unknown, unknown>;\n    /**\n     * Adds a value to the collection.\n     *\n     * @param overwrite - If not set `true`, using a key that is already in the\n     *   collection will throw. Otherwise, overwrites the previous value.\n     */\n    add(pair: Pair<K, V> | {\n        key: K;\n        value: V;\n    }, overwrite?: boolean): void;\n    delete(key: unknown): boolean;\n    get(key: unknown, keepScalar: true): Scalar<V> | undefined;\n    get(key: unknown, keepScalar?: false): V | undefined;\n    get(key: unknown, keepScalar?: boolean): V | Scalar<V> | undefined;\n    has(key: unknown): boolean;\n    set(key: K, value: V): void;\n    /**\n     * @param ctx - Conversion context, originally set in Document#toJS()\n     * @param {Class} Type - If set, forces the returned collection type\n     * @returns Instance of Type, Map, or Object\n     */\n    toJSON<T extends MapLike = Map<unknown, unknown>>(_?: unknown, ctx?: ToJSContext, Type?: {\n        new (): T;\n    }): any;\n    toString(ctx?: StringifyContext, onComment?: () => void, onChompKeep?: () => void): string;\n}\n"],"mappings":"AAIA,SAASA,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}