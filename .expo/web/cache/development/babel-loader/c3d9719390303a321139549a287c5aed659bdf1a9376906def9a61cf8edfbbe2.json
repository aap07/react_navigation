{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setSplashImageDrawablesAsync = setSplashImageDrawablesAsync;\nexports.setSplashImageDrawablesForThemeAsync = setSplashImageDrawablesForThemeAsync;\nexports.withAndroidSplashImages = void 0;\nfunction _configPlugins() {\n  var data = require(\"@expo/config-plugins\");\n  _configPlugins = function _configPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _imageUtils() {\n  var data = require(\"@expo/image-utils\");\n  _imageUtils = function _imageUtils() {\n    return data;\n  };\n  return data;\n}\nfunction _fsExtra() {\n  var data = _interopRequireDefault(require(\"fs-extra\"));\n  _fsExtra = function _fsExtra() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _getAndroidSplashConfig() {\n  var data = require(\"./getAndroidSplashConfig\");\n  _getAndroidSplashConfig = function _getAndroidSplashConfig() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar IMAGE_CACHE_NAME = 'splash-android';\nvar SPLASH_SCREEN_FILENAME = 'splashscreen_image.png';\nvar DRAWABLES_CONFIGS = {\n  default: {\n    modes: {\n      light: {\n        path: `./res/drawable/${SPLASH_SCREEN_FILENAME}`\n      },\n      dark: {\n        path: `./res/drawable-night/${SPLASH_SCREEN_FILENAME}`\n      }\n    },\n    dimensionsMultiplier: 1\n  },\n  mdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-mdpi/${SPLASH_SCREEN_FILENAME}`\n      },\n      dark: {\n        path: `./res/drawable-night-mdpi/${SPLASH_SCREEN_FILENAME}`\n      }\n    },\n    dimensionsMultiplier: 1\n  },\n  hdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-hdpi/${SPLASH_SCREEN_FILENAME}`\n      },\n      dark: {\n        path: `./res/drawable-night-hdpi/${SPLASH_SCREEN_FILENAME}`\n      }\n    },\n    dimensionsMultiplier: 1.5\n  },\n  xhdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-xhdpi/${SPLASH_SCREEN_FILENAME}`\n      },\n      dark: {\n        path: `./res/drawable-night-xhdpi/${SPLASH_SCREEN_FILENAME}`\n      }\n    },\n    dimensionsMultiplier: 2\n  },\n  xxhdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-xxhdpi/${SPLASH_SCREEN_FILENAME}`\n      },\n      dark: {\n        path: `./res/drawable-night-xxhdpi/${SPLASH_SCREEN_FILENAME}`\n      }\n    },\n    dimensionsMultiplier: 3\n  },\n  xxxhdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-xxxhdpi/${SPLASH_SCREEN_FILENAME}`\n      },\n      dark: {\n        path: `./res/drawable-night-xxxhdpi/${SPLASH_SCREEN_FILENAME}`\n      }\n    },\n    dimensionsMultiplier: 4\n  }\n};\nvar withAndroidSplashImages = function withAndroidSplashImages(config) {\n  return (0, _configPlugins().withDangerousMod)(config, ['android', function () {\n    var _ref = _asyncToGenerator(function* (config) {\n      yield setSplashImageDrawablesAsync(config, config.modRequest.projectRoot);\n      return config;\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }()]);\n};\nexports.withAndroidSplashImages = withAndroidSplashImages;\nfunction setSplashImageDrawablesAsync(_x2, _x3) {\n  return _setSplashImageDrawablesAsync.apply(this, arguments);\n}\nfunction _setSplashImageDrawablesAsync() {\n  _setSplashImageDrawablesAsync = _asyncToGenerator(function* (config, projectRoot) {\n    yield clearAllExistingSplashImagesAsync(projectRoot);\n    var splash = (0, _getAndroidSplashConfig().getAndroidSplashConfig)(config);\n    var darkSplash = (0, _getAndroidSplashConfig().getAndroidDarkSplashConfig)(config);\n    yield Promise.all([setSplashImageDrawablesForThemeAsync(splash, 'light', projectRoot), setSplashImageDrawablesForThemeAsync(darkSplash, 'dark', projectRoot)]);\n  });\n  return _setSplashImageDrawablesAsync.apply(this, arguments);\n}\nfunction clearAllExistingSplashImagesAsync(_x4) {\n  return _clearAllExistingSplashImagesAsync.apply(this, arguments);\n}\nfunction _clearAllExistingSplashImagesAsync() {\n  _clearAllExistingSplashImagesAsync = _asyncToGenerator(function* (projectRoot) {\n    var androidMainPath = _path().default.join(projectRoot, 'android/app/src/main');\n    yield Promise.all(Object.values(DRAWABLES_CONFIGS).map(function () {\n      var _ref3 = _asyncToGenerator(function* (_ref2) {\n        var modes = _ref2.modes;\n        yield Promise.all(Object.values(modes).map(function () {\n          var _ref5 = _asyncToGenerator(function* (_ref4) {\n            var filePath = _ref4.path;\n            if (yield _fsExtra().default.pathExists(_path().default.resolve(androidMainPath, filePath))) {\n              yield _fsExtra().default.remove(_path().default.resolve(androidMainPath, filePath));\n            }\n          });\n          return function (_x9) {\n            return _ref5.apply(this, arguments);\n          };\n        }()));\n      });\n      return function (_x8) {\n        return _ref3.apply(this, arguments);\n      };\n    }()));\n  });\n  return _clearAllExistingSplashImagesAsync.apply(this, arguments);\n}\nfunction setSplashImageDrawablesForThemeAsync(_x5, _x6, _x7) {\n  return _setSplashImageDrawablesForThemeAsync.apply(this, arguments);\n}\nfunction _setSplashImageDrawablesForThemeAsync() {\n  _setSplashImageDrawablesForThemeAsync = _asyncToGenerator(function* (config, theme, projectRoot) {\n    if (!config) return;\n    var androidMainPath = _path().default.join(projectRoot, 'android/app/src/main');\n    yield Promise.all(['mdpi', 'hdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi'].map(function () {\n      var _ref6 = _asyncToGenerator(function* (imageKey) {\n        var image = config[imageKey];\n        if (image) {\n          var _yield = yield (0, _imageUtils().generateImageAsync)({\n              projectRoot: projectRoot,\n              cacheType: IMAGE_CACHE_NAME\n            }, {\n              src: image\n            }),\n            source = _yield.source;\n          var outputPath = _path().default.join(androidMainPath, DRAWABLES_CONFIGS[imageKey].modes[theme].path);\n          var folder = _path().default.dirname(outputPath);\n          yield _fsExtra().default.ensureDir(folder);\n          yield _fsExtra().default.writeFile(outputPath, source);\n        }\n        return null;\n      });\n      return function (_x10) {\n        return _ref6.apply(this, arguments);\n      };\n    }()));\n  });\n  return _setSplashImageDrawablesForThemeAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_configPlugins","data","require","_imageUtils","_fsExtra","_interopRequireDefault","_path","_getAndroidSplashConfig","obj","__esModule","default","IMAGE_CACHE_NAME","SPLASH_SCREEN_FILENAME","DRAWABLES_CONFIGS","modes","light","path","dark","dimensionsMultiplier","mdpi","hdpi","xhdpi","xxhdpi","xxxhdpi","withAndroidSplashImages","config","withDangerousMod","_ref","_asyncToGenerator","setSplashImageDrawablesAsync","modRequest","projectRoot","_x","apply","arguments","exports","_x2","_x3","_setSplashImageDrawablesAsync","clearAllExistingSplashImagesAsync","splash","getAndroidSplashConfig","darkSplash","getAndroidDarkSplashConfig","Promise","all","setSplashImageDrawablesForThemeAsync","_x4","_clearAllExistingSplashImagesAsync","androidMainPath","join","Object","values","map","_ref3","_ref2","_ref5","_ref4","filePath","pathExists","resolve","remove","_x9","_x8","_x5","_x6","_x7","_setSplashImageDrawablesForThemeAsync","theme","_ref6","imageKey","image","_yield","generateImageAsync","cacheType","src","source","outputPath","folder","dirname","ensureDir","writeFile","_x10"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\prebuild-config\\src\\plugins\\unversioned\\expo-splash-screen\\withAndroidSplashImages.ts"],"sourcesContent":["import { ConfigPlugin, withDangerousMod } from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\nimport { generateImageAsync } from '@expo/image-utils';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport {\n  getAndroidDarkSplashConfig,\n  getAndroidSplashConfig,\n  SplashScreenConfig,\n} from './getAndroidSplashConfig';\n\ntype DRAWABLE_SIZE = 'default' | 'mdpi' | 'hdpi' | 'xhdpi' | 'xxhdpi' | 'xxxhdpi';\ntype THEME = 'light' | 'dark';\n\nconst IMAGE_CACHE_NAME = 'splash-android';\nconst SPLASH_SCREEN_FILENAME = 'splashscreen_image.png';\nconst DRAWABLES_CONFIGS: {\n  [key in DRAWABLE_SIZE]: {\n    modes: {\n      [key in THEME]: {\n        path: string;\n      };\n    };\n    dimensionsMultiplier: number;\n  };\n} = {\n  default: {\n    modes: {\n      light: {\n        path: `./res/drawable/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 1,\n  },\n  mdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-mdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-mdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 1,\n  },\n  hdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-hdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-hdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 1.5,\n  },\n  xhdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-xhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-xhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 2,\n  },\n  xxhdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-xxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-xxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 3,\n  },\n  xxxhdpi: {\n    modes: {\n      light: {\n        path: `./res/drawable-xxxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n      dark: {\n        path: `./res/drawable-night-xxxhdpi/${SPLASH_SCREEN_FILENAME}`,\n      },\n    },\n    dimensionsMultiplier: 4,\n  },\n};\n\nexport const withAndroidSplashImages: ConfigPlugin = (config) => {\n  return withDangerousMod(config, [\n    'android',\n    async (config) => {\n      await setSplashImageDrawablesAsync(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\n/**\n * Deletes all previous splash_screen_images and copies new one to desired drawable directory.\n * If path isn't provided then no new image is placed in drawable directories.\n * @see https://developer.android.com/training/multiscreen/screendensities\n *\n * @param androidMainPath Absolute path to the main directory containing code and resources in Android project. In general that would be `android/app/src/main`.\n */\nexport async function setSplashImageDrawablesAsync(\n  config: Pick<ExpoConfig, 'android' | 'splash'>,\n  projectRoot: string\n) {\n  await clearAllExistingSplashImagesAsync(projectRoot);\n\n  const splash = getAndroidSplashConfig(config);\n  const darkSplash = getAndroidDarkSplashConfig(config);\n\n  await Promise.all([\n    setSplashImageDrawablesForThemeAsync(splash, 'light', projectRoot),\n    setSplashImageDrawablesForThemeAsync(darkSplash, 'dark', projectRoot),\n  ]);\n}\n\nasync function clearAllExistingSplashImagesAsync(projectRoot: string) {\n  const androidMainPath = path.join(projectRoot, 'android/app/src/main');\n\n  await Promise.all(\n    Object.values(DRAWABLES_CONFIGS).map(async ({ modes }) => {\n      await Promise.all(\n        Object.values(modes).map(async ({ path: filePath }) => {\n          if (await fs.pathExists(path.resolve(androidMainPath, filePath))) {\n            await fs.remove(path.resolve(androidMainPath, filePath));\n          }\n        })\n      );\n    })\n  );\n}\n\nexport async function setSplashImageDrawablesForThemeAsync(\n  config: SplashScreenConfig | null,\n  theme: 'dark' | 'light',\n  projectRoot: string\n) {\n  if (!config) return;\n  const androidMainPath = path.join(projectRoot, 'android/app/src/main');\n\n  await Promise.all(\n    ['mdpi', 'hdpi', 'xhdpi', 'xxhdpi', 'xxxhdpi'].map(async (imageKey) => {\n      // @ts-ignore\n      const image = config[imageKey];\n      if (image) {\n        // Using this method will cache the images in `.expo` based on the properties used to generate them.\n        // this method also supports remote URLs and using the global sharp instance.\n        const { source } = await generateImageAsync({ projectRoot, cacheType: IMAGE_CACHE_NAME }, {\n          src: image,\n        } as any);\n\n        // Get output path for drawable.\n        const outputPath = path.join(\n          androidMainPath,\n          // @ts-ignore\n          DRAWABLES_CONFIGS[imageKey].modes[theme].path\n        );\n        // Ensure directory exists.\n        const folder = path.dirname(outputPath);\n        await fs.ensureDir(folder);\n        // Write image buffer to the file system.\n        await fs.writeFile(outputPath, source);\n      }\n      return null;\n    })\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}