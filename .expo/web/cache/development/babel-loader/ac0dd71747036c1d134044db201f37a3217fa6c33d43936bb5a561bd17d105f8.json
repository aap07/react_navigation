{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.saveAssetsAsync = saveAssetsAsync;\nvar _path = _interopRequireDefault(require(\"path\"));\nvar Log = _interopRequireWildcard(require(\"../log\"));\nvar _array = require(\"../utils/array\");\nvar _dir = require(\"../utils/dir\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar debug = require(\"debug\")(\"expo:export:saveAssets\");\nfunction logAssetTask(projectRoot, action, pathName) {\n  debug(`${action} ${pathName}`);\n  var relativePath = pathName.replace(projectRoot, \"\");\n  Log.log(`${action} ${relativePath}`);\n}\nfunction collectAssetPaths(assets) {\n  var paths = {};\n  assets.forEach(function (asset) {\n    asset.files.forEach(function (path, index) {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n  return paths;\n}\nfunction saveAssetsAsync(_x, _x2) {\n  return _saveAssetsAsync.apply(this, arguments);\n}\nfunction _saveAssetsAsync() {\n  _saveAssetsAsync = _asyncToGenerator(function* (projectRoot, _ref) {\n    var assets = _ref.assets,\n      outputDir = _ref.outputDir;\n    var paths = collectAssetPaths(assets);\n    for (var keys of (0, _array).chunk(Object.entries(paths), 5)) {\n      yield Promise.all(keys.map(function (_ref2) {\n        var _ref3 = _slicedToArray(_ref2, 2),\n          key = _ref3[0],\n          pathName = _ref3[1];\n        logAssetTask(projectRoot, \"saving\", pathName);\n        return (0, _dir).copyAsync(pathName, _path.default.join(outputDir, \"assets\", key));\n      }));\n    }\n    Log.log(\"Files successfully saved.\");\n  });\n  return _saveAssetsAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_slicedToArray","require","_asyncToGenerator","saveAssetsAsync","_path","_interopRequireDefault","Log","_interopRequireWildcard","_array","_dir","debug","logAssetTask","projectRoot","action","pathName","relativePath","replace","log","collectAssetPaths","assets","paths","forEach","asset","files","path","index","fileHashes","_x","_x2","_saveAssetsAsync","apply","arguments","_ref","outputDir","keys","chunk","Object","entries","Promise","all","map","_ref2","_ref3","key","copyAsync","default","join"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\export\\saveAssets.ts"],"sourcesContent":["import { BundleAssetWithFileHashes } from '@expo/dev-server';\nimport path from 'path';\n\nimport * as Log from '../log';\nimport { chunk } from '../utils/array';\nimport { copyAsync } from '../utils/dir';\n\nconst debug = require('debug')('expo:export:saveAssets') as typeof console.log;\n\nexport type ManifestAsset = { fileHashes: string[]; files: string[]; hash: string };\n\nexport type Asset = ManifestAsset | BundleAssetWithFileHashes;\n\nfunction logAssetTask(projectRoot: string, action: 'uploading' | 'saving', pathName: string) {\n  debug(`${action} ${pathName}`);\n\n  const relativePath = pathName.replace(projectRoot, '');\n  Log.log(`${action} ${relativePath}`);\n}\n\nfunction collectAssetPaths(assets: Asset[]): Record<string, string> {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths: { [fileHash: string]: string } = {};\n  assets.forEach((asset) => {\n    asset.files.forEach((path: string, index: number) => {\n      paths[asset.fileHashes[index]] = path;\n    });\n  });\n  return paths;\n}\n\nexport async function saveAssetsAsync(\n  projectRoot: string,\n  { assets, outputDir }: { assets: Asset[]; outputDir: string }\n) {\n  // Collect paths by key, also effectively handles duplicates in the array\n  const paths = collectAssetPaths(assets);\n\n  // save files one chunk at a time\n  for (const keys of chunk(Object.entries(paths), 5)) {\n    await Promise.all(\n      keys.map(([key, pathName]) => {\n        logAssetTask(projectRoot, 'saving', pathName);\n        // copy file over to assetPath\n        return copyAsync(pathName, path.join(outputDir, 'assets', key));\n      })\n    );\n  }\n  Log.log('Files successfully saved.');\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,cAAA,GAAAC,OAAA;AAAA,IAAAC,iBAAA,GAAAD,OAAA;;;;QA+BsBE,eAAe,GAAfA,eAAe;AA9BpB,IAAAC,KAAM,GAAAC,sBAAA,CAAAJ,OAAA,CAAN,MAAM;AAEX,IAAAK,GAAG,GAAAC,uBAAA,CAAAN,OAAA,SAAc,EAAd;AACO,IAAAO,MAAgB,GAAAP,OAAA;AACZ,IAAAQ,IAAc,GAAAR,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAExC,IAAMS,KAAK,GAAGT,OAAO,CAAC,OAAO,CAAC,CAAC,wBAAwB,CAAC;AAMxD,SAASU,YAAYA,CAACC,WAAmB,EAAEC,MAA8B,EAAEC,QAAgB,EAAE;EAC3FJ,KAAK,CAAE,GAAEG,MAAO,IAAGC,QAAS,EAAC,CAAC;EAE9B,IAAMC,YAAY,GAAGD,QAAQ,CAACE,OAAO,CAACJ,WAAW,EAAE,EAAE,CAAC;EACtDN,GAAG,CAACW,GAAG,CAAE,GAAEJ,MAAO,IAAGE,YAAa,EAAC,CAAC;;AAGtC,SAASG,iBAAiBA,CAACC,MAAe,EAA0B;EAElE,IAAMC,KAAK,GAAmC,EAAE;EAChDD,MAAM,CAACE,OAAO,CAAC,UAACC,KAAK,EAAK;IACxBA,KAAK,CAACC,KAAK,CAACF,OAAO,CAAC,UAACG,IAAY,EAAEC,KAAa,EAAK;MACnDL,KAAK,CAACE,KAAK,CAACI,UAAU,CAACD,KAAK,CAAC,CAAC,GAAGD,IAAI;KACtC,CAAC;GACH,CAAC;EACF,OAAOJ,KAAK;;AACb,SAEqBjB,eAAeA,CAAAwB,EAAA,EAAAC,GAAA;EAAA,OAAAC,gBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,iBAAA;EAAAA,gBAAA,GAAA3B,iBAAA,CAA9B,WACLU,WAAmB,EAAAoB,IAAA,EAEnB;IAAA,IADEb,MAAM,GAAAa,IAAA,CAANb,MAAM;MAAEc,SAAS,GAAAD,IAAA,CAATC,SAAS;IAGnB,IAAMb,KAAK,GAAGF,iBAAiB,CAACC,MAAM,CAAC;IAGvC,KAAK,IAAMe,IAAI,IAAI,IAAA1B,MAAK,EAA0B2B,KAA1B,CAACC,MAAM,CAACC,OAAO,CAACjB,KAAK,CAAC,EAAE,CAAC,CAAC,EAAE;MAClD,MAAMkB,OAAO,CAACC,GAAG,CACfL,IAAI,CAACM,GAAG,CAAC,UAAAC,KAAA,EAAqB;QAAA,IAAAC,KAAA,GAAA1C,cAAA,CAAAyC,KAAA;UAAnBE,GAAG,GAAAD,KAAA;UAAE5B,QAAQ,GAAA4B,KAAA;QACtB/B,YAAY,CAACC,WAAW,EAAE,QAAQ,EAAEE,QAAQ,CAAC;QAE7C,OAAO,IAAAL,IAAS,EAA+CmC,SAA/C,CAAC9B,QAAQ,EAAEV,KAAI,CAAAyC,OAAA,CAACC,IAAI,CAACb,SAAS,EAAE,QAAQ,EAAEU,GAAG,CAAC,CAAC;OAChE,CAAC,CACH;;IAEHrC,GAAG,CAACW,GAAG,CAAC,2BAA2B,CAAC;GACrC;EAAA,OAAAY,gBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}