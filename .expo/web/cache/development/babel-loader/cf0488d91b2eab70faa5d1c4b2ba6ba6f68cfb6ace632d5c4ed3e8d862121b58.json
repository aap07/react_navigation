{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nvar _wrapNativeSuper = require(\"@babel/runtime/helpers/wrapNativeSuper\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.importCliServerApiFromProject = importCliServerApiFromProject;\nexports.importExpoMetroConfigFromProject = importExpoMetroConfigFromProject;\nexports.importHermesCommandFromProject = importHermesCommandFromProject;\nexports.importInspectorProxyServerFromProject = importInspectorProxyServerFromProject;\nexports.importMetroConfigFromProject = importMetroConfigFromProject;\nexports.importMetroFromProject = importMetroFromProject;\nexports.importMetroServerFromProject = importMetroServerFromProject;\nexports.importMetroSourceMapComposeSourceMapsFromProject = importMetroSourceMapComposeSourceMapsFromProject;\nfunction _os() {\n  var data = _interopRequireDefault(require(\"os\"));\n  _os = function _os() {\n    return data;\n  };\n  return data;\n}\nfunction _resolveFrom() {\n  var data = _interopRequireDefault(require(\"resolve-from\"));\n  _resolveFrom = function _resolveFrom() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar MetroImportError = function (_Error) {\n  _inherits(MetroImportError, _Error);\n  var _super = _createSuper(MetroImportError);\n  function MetroImportError(projectRoot, moduleId) {\n    _classCallCheck(this, MetroImportError);\n    return _super.call(this, `Missing package \"${moduleId}\" in the project at: ${projectRoot}\\n` + 'This usually means `react-native` is not installed. ' + 'Please verify that dependencies in package.json include \"react-native\" ' + 'and run `yarn` or `npm install`.');\n  }\n  return _createClass(MetroImportError);\n}(_wrapNativeSuper(Error));\nfunction resolveFromProject(projectRoot, moduleId) {\n  var resolvedPath = _resolveFrom().default.silent(projectRoot, moduleId);\n  if (!resolvedPath) {\n    throw new MetroImportError(projectRoot, moduleId);\n  }\n  return resolvedPath;\n}\nfunction importFromProject(projectRoot, moduleId) {\n  return require(resolveFromProject(projectRoot, moduleId));\n}\nfunction importMetroSourceMapComposeSourceMapsFromProject(projectRoot) {\n  return importFromProject(projectRoot, 'metro-source-map/src/composeSourceMaps');\n}\nfunction importMetroConfigFromProject(projectRoot) {\n  return importFromProject(projectRoot, 'metro-config');\n}\nfunction importMetroFromProject(projectRoot) {\n  return importFromProject(projectRoot, 'metro');\n}\nfunction importMetroServerFromProject(projectRoot) {\n  return importFromProject(projectRoot, 'metro/src/Server');\n}\nfunction importCliServerApiFromProject(projectRoot) {\n  return importFromProject(projectRoot, '@react-native-community/cli-server-api');\n}\nfunction importInspectorProxyServerFromProject(projectRoot) {\n  return importFromProject(projectRoot, 'metro-inspector-proxy');\n}\nfunction importExpoMetroConfigFromProject(projectRoot) {\n  return importFromProject(projectRoot, '@expo/metro-config');\n}\nfunction importHermesCommandFromProject(projectRoot) {\n  var platformExecutable = getHermesCommandPlatform();\n  var hermescLocations = [process.env['REACT_NATIVE_OVERRIDE_HERMES_DIR'] ? `${process.env['REACT_NATIVE_OVERRIDE_HERMES_DIR']}/build/bin/hermesc` : '', 'react-native/ReactAndroid/hermes-engine/build/hermes/bin/hermesc', `react-native/sdks/hermesc/${platformExecutable}`, `hermes-engine/${platformExecutable}`];\n  for (var location of hermescLocations) {\n    try {\n      return resolveFromProject(projectRoot, location);\n    } catch (_unused) {}\n  }\n  throw new Error('Cannot find the hermesc executable.');\n}\nfunction getHermesCommandPlatform() {\n  switch (_os().default.platform()) {\n    case 'darwin':\n      return 'osx-bin/hermesc';\n    case 'linux':\n      return 'linux64-bin/hermesc';\n    case 'win32':\n      return 'win64-bin/hermesc.exe';\n    default:\n      throw new Error(`Unsupported host platform for Hermes compiler: ${_os().default.platform()}`);\n  }\n}","map":{"version":3,"names":["_os","data","_interopRequireDefault","require","_resolveFrom","obj","__esModule","default","MetroImportError","_Error","_inherits","_super","_createSuper","projectRoot","moduleId","_classCallCheck","call","_createClass","_wrapNativeSuper","Error","resolveFromProject","resolvedPath","silent","importFromProject","importMetroSourceMapComposeSourceMapsFromProject","importMetroConfigFromProject","importMetroFromProject","importMetroServerFromProject","importCliServerApiFromProject","importInspectorProxyServerFromProject","importExpoMetroConfigFromProject","importHermesCommandFromProject","platformExecutable","getHermesCommandPlatform","hermescLocations","process","env","location","_unused","platform"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\dev-server\\src\\metro\\importMetroFromProject.ts"],"sourcesContent":["import type Metro from 'metro';\nimport type MetroConfig from 'metro-config';\nimport type { composeSourceMaps } from 'metro-source-map';\nimport os from 'os';\nimport resolveFrom from 'resolve-from';\n\nclass MetroImportError extends Error {\n  constructor(projectRoot: string, moduleId: string) {\n    super(\n      `Missing package \"${moduleId}\" in the project at: ${projectRoot}\\n` +\n        'This usually means `react-native` is not installed. ' +\n        'Please verify that dependencies in package.json include \"react-native\" ' +\n        'and run `yarn` or `npm install`.'\n    );\n  }\n}\n\nfunction resolveFromProject(projectRoot: string, moduleId: string) {\n  const resolvedPath = resolveFrom.silent(projectRoot, moduleId);\n  if (!resolvedPath) {\n    throw new MetroImportError(projectRoot, moduleId);\n  }\n  return resolvedPath;\n}\n\nfunction importFromProject(projectRoot: string, moduleId: string) {\n  return require(resolveFromProject(projectRoot, moduleId));\n}\n\nexport function importMetroSourceMapComposeSourceMapsFromProject(\n  projectRoot: string\n): typeof composeSourceMaps {\n  return importFromProject(projectRoot, 'metro-source-map/src/composeSourceMaps');\n}\n\nexport function importMetroConfigFromProject(projectRoot: string): typeof MetroConfig {\n  return importFromProject(projectRoot, 'metro-config');\n}\n\nexport function importMetroFromProject(projectRoot: string): typeof Metro {\n  return importFromProject(projectRoot, 'metro');\n}\n\nexport function importMetroServerFromProject(projectRoot: string): typeof Metro.Server {\n  return importFromProject(projectRoot, 'metro/src/Server');\n}\n\nexport function importCliServerApiFromProject(\n  projectRoot: string\n): typeof import('@react-native-community/cli-server-api') {\n  return importFromProject(projectRoot, '@react-native-community/cli-server-api');\n}\n\nexport function importInspectorProxyServerFromProject(projectRoot: string): {\n  InspectorProxy: any;\n} {\n  return importFromProject(projectRoot, 'metro-inspector-proxy');\n}\n\nexport function importExpoMetroConfigFromProject(\n  projectRoot: string\n): typeof import('@expo/metro-config') {\n  return importFromProject(projectRoot, '@expo/metro-config');\n}\n\nexport function importHermesCommandFromProject(projectRoot: string): string {\n  const platformExecutable = getHermesCommandPlatform();\n  const hermescLocations = [\n    // Override hermesc dir by environment variables\n    process.env['REACT_NATIVE_OVERRIDE_HERMES_DIR']\n      ? `${process.env['REACT_NATIVE_OVERRIDE_HERMES_DIR']}/build/bin/hermesc`\n      : '',\n\n    // Building hermes from source\n    'react-native/ReactAndroid/hermes-engine/build/hermes/bin/hermesc',\n\n    // Prebuilt hermesc in official react-native 0.69+\n    `react-native/sdks/hermesc/${platformExecutable}`,\n\n    // Legacy hermes-engine package\n    `hermes-engine/${platformExecutable}`,\n  ];\n\n  for (const location of hermescLocations) {\n    try {\n      return resolveFromProject(projectRoot, location);\n    } catch {}\n  }\n  throw new Error('Cannot find the hermesc executable.');\n}\n\nfunction getHermesCommandPlatform(): string {\n  switch (os.platform()) {\n    case 'darwin':\n      return 'osx-bin/hermesc';\n    case 'linux':\n      return 'linux64-bin/hermesc';\n    case 'win32':\n      return 'win64-bin/hermesc.exe';\n    default:\n      throw new Error(`Unsupported host platform for Hermes compiler: ${os.platform()}`);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}