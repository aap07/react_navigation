{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar commander_1 = __importDefault(require(\"commander\"));\nvar ReactImportsPatcher_1 = require(\"./ReactImportsPatcher\");\nvar autolinking_1 = require(\"./autolinking\");\nvar extraDependencies_1 = require(\"./autolinking/extraDependencies\");\nfunction registerSearchCommand(commandName, fn) {\n  return commander_1.default.command(`${commandName} [paths...]`).option('-i, --ignore-paths <ignorePaths...>', 'Paths to ignore when looking up for modules.', function (value, previous) {\n    return (previous != null ? previous : []).concat(value);\n  }).option('-e, --exclude <exclude...>', 'Package names to exclude when looking up for modules.', function (value, previous) {\n    return (previous != null ? previous : []).concat(value);\n  }).option('-p, --platform [platform]', 'The platform that the resulting modules must support. Available options: \"ios\", \"android\"', 'ios').option('--silent', 'Silence resolution warnings').action(function () {\n    var _ref = _asyncToGenerator(function* (searchPaths, providedOptions) {\n      var options = yield (0, autolinking_1.mergeLinkingOptionsAsync)(_objectSpread(_objectSpread({}, providedOptions), {}, {\n        searchPaths: searchPaths\n      }));\n      var searchResults = yield (0, autolinking_1.findModulesAsync)(options);\n      return yield fn(searchResults, options);\n    });\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n}\nfunction registerResolveCommand(commandName, fn) {\n  return registerSearchCommand(commandName, fn);\n}\nfunction registerPatchReactImportsCommand() {\n  return commander_1.default.command('patch-react-imports [paths...]').requiredOption('--pods-root <podsRoot>', 'The path to `Pods` directory').option('--dry-run', 'Only list files without writing changes to the file system').action(ReactImportsPatcher_1.patchReactImportsAsync);\n}\nmodule.exports = function () {\n  var _ref2 = _asyncToGenerator(function* (args) {\n    registerSearchCommand('search', function () {\n      var _ref3 = _asyncToGenerator(function* (results, options) {\n        if (options.json) {\n          console.log(JSON.stringify(results));\n        } else {\n          console.log(require('util').inspect(results, false, null, true));\n        }\n      });\n      return function (_x4, _x5) {\n        return _ref3.apply(this, arguments);\n      };\n    }()).option('-j, --json', 'Output results in the plain JSON format.', function () {\n      return true;\n    }, false);\n    registerSearchCommand('verify', function (results) {\n      var numberOfDuplicates = (0, autolinking_1.verifySearchResults)(results);\n      if (!numberOfDuplicates) {\n        console.log('✅ Everything is fine!');\n      }\n    });\n    registerResolveCommand('resolve', function () {\n      var _ref4 = _asyncToGenerator(function* (results, options) {\n        var modules = yield (0, autolinking_1.resolveModulesAsync)(results, options);\n        var extraDependencies = yield (0, extraDependencies_1.resolveExtraDependenciesAsync)();\n        if (options.json) {\n          console.log(JSON.stringify({\n            extraDependencies: extraDependencies,\n            modules: modules\n          }));\n        } else {\n          console.log(require('util').inspect({\n            extraDependencies: extraDependencies,\n            modules: modules\n          }, false, null, true));\n        }\n      });\n      return function (_x6, _x7) {\n        return _ref4.apply(this, arguments);\n      };\n    }()).option('-j, --json', 'Output results in the plain JSON format.', function () {\n      return true;\n    }, false);\n    registerResolveCommand('generate-package-list', function () {\n      var _ref5 = _asyncToGenerator(function* (results, options) {\n        var modules = options.empty ? [] : yield (0, autolinking_1.resolveModulesAsync)(results, options);\n        (0, autolinking_1.generatePackageListAsync)(modules, options);\n      });\n      return function (_x8, _x9) {\n        return _ref5.apply(this, arguments);\n      };\n    }()).option('-t, --target <path>', 'Path to the target file, where the package list should be written to.').option('-n, --namespace <namespace>', 'Java package name under which the package list should be placed.').option('--empty', 'Whether to only generate an empty list. Might be used when the user opts-out of autolinking.', false);\n    registerPatchReactImportsCommand();\n    yield commander_1.default.version(require('expo-modules-autolinking/package.json').version).description('CLI command that searches for Expo modules to autolink them.').parseAsync(args, {\n      from: 'user'\n    });\n  });\n  return function (_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["commander_1","__importDefault","require","ReactImportsPatcher_1","autolinking_1","extraDependencies_1","registerSearchCommand","commandName","fn","default","command","option","value","previous","concat","action","_ref","_asyncToGenerator","searchPaths","providedOptions","options","mergeLinkingOptionsAsync","_objectSpread","searchResults","findModulesAsync","_x","_x2","apply","arguments","registerResolveCommand","registerPatchReactImportsCommand","requiredOption","patchReactImportsAsync","module","exports","_ref2","args","_ref3","results","json","console","log","JSON","stringify","inspect","_x4","_x5","numberOfDuplicates","verifySearchResults","_ref4","modules","resolveModulesAsync","extraDependencies","resolveExtraDependenciesAsync","_x6","_x7","_ref5","empty","generatePackageListAsync","_x8","_x9","version","description","parseAsync","from","_x3"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\expo-modules-autolinking\\src\\index.ts"],"sourcesContent":["import commander from 'commander';\n\nimport { patchReactImportsAsync } from './ReactImportsPatcher';\nimport {\n  findModulesAsync,\n  resolveModulesAsync,\n  verifySearchResults,\n  generatePackageListAsync,\n  mergeLinkingOptionsAsync,\n} from './autolinking';\nimport { resolveExtraDependenciesAsync } from './autolinking/extraDependencies';\nimport { GenerateOptions, ResolveOptions, SearchOptions, SearchResults } from './types';\n\n/**\n * Registers a command that only searches for available expo modules.\n */\nfunction registerSearchCommand<OptionsType extends SearchOptions>(\n  commandName: string,\n  fn: (search: SearchResults, options: OptionsType) => any\n) {\n  return commander\n    .command(`${commandName} [paths...]`)\n    .option<string[] | null>(\n      '-i, --ignore-paths <ignorePaths...>',\n      'Paths to ignore when looking up for modules.',\n      (value, previous) => (previous ?? []).concat(value)\n    )\n    .option<string[] | null>(\n      '-e, --exclude <exclude...>',\n      'Package names to exclude when looking up for modules.',\n      (value, previous) => (previous ?? []).concat(value)\n    )\n    .option(\n      '-p, --platform [platform]',\n      'The platform that the resulting modules must support. Available options: \"ios\", \"android\"',\n      'ios'\n    )\n    .option('--silent', 'Silence resolution warnings')\n    .action(async (searchPaths, providedOptions) => {\n      const options = await mergeLinkingOptionsAsync<OptionsType>({\n        ...providedOptions,\n        searchPaths,\n      });\n      const searchResults = await findModulesAsync(options);\n      return await fn(searchResults, options);\n    });\n}\n\n/**\n * Registers a command that searches for modules and then resolves them for specific platform.\n */\nfunction registerResolveCommand<OptionsType extends ResolveOptions>(\n  commandName: string,\n  fn: (search: SearchResults, options: OptionsType) => any\n) {\n  return registerSearchCommand<OptionsType>(commandName, fn);\n}\n\n// Register for `patch-react-imports` command\nfunction registerPatchReactImportsCommand() {\n  return commander\n    .command('patch-react-imports [paths...]')\n    .requiredOption('--pods-root <podsRoot>', 'The path to `Pods` directory')\n    .option('--dry-run', 'Only list files without writing changes to the file system')\n    .action(patchReactImportsAsync);\n}\n\nmodule.exports = async function (args: string[]) {\n  // Searches for available expo modules.\n  registerSearchCommand<SearchOptions & { json?: boolean }>('search', async (results, options) => {\n    if (options.json) {\n      console.log(JSON.stringify(results));\n    } else {\n      console.log(require('util').inspect(results, false, null, true));\n    }\n  }).option<boolean>('-j, --json', 'Output results in the plain JSON format.', () => true, false);\n\n  // Checks whether there are no resolving issues in the current setup.\n  registerSearchCommand('verify', (results) => {\n    const numberOfDuplicates = verifySearchResults(results);\n    if (!numberOfDuplicates) {\n      console.log('✅ Everything is fine!');\n    }\n  });\n\n  // Searches for available expo modules and resolves the results for given platform.\n  registerResolveCommand('resolve', async (results, options) => {\n    const modules = await resolveModulesAsync(results, options);\n    const extraDependencies = await resolveExtraDependenciesAsync();\n\n    if (options.json) {\n      console.log(JSON.stringify({ extraDependencies, modules }));\n    } else {\n      console.log(require('util').inspect({ extraDependencies, modules }, false, null, true));\n    }\n  }).option<boolean>('-j, --json', 'Output results in the plain JSON format.', () => true, false);\n\n  // Generates a source file listing all packages to link.\n  registerResolveCommand<GenerateOptions>('generate-package-list', async (results, options) => {\n    const modules = options.empty ? [] : await resolveModulesAsync(results, options);\n    generatePackageListAsync(modules, options);\n  })\n    .option(\n      '-t, --target <path>',\n      'Path to the target file, where the package list should be written to.'\n    )\n    .option(\n      '-n, --namespace <namespace>',\n      'Java package name under which the package list should be placed.'\n    )\n    .option(\n      '--empty',\n      'Whether to only generate an empty list. Might be used when the user opts-out of autolinking.',\n      false\n    );\n\n  registerPatchReactImportsCommand();\n\n  await commander\n    .version(require('expo-modules-autolinking/package.json').version)\n    .description('CLI command that searches for Expo modules to autolink them.')\n    .parseAsync(args, { from: 'user' });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}