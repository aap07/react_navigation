{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRewriteRequestUrl = getRewriteRequestUrl;\nfunction _config() {\n  var data = require(\"@expo/config\");\n  _config = function _config() {\n    return data;\n  };\n  return data;\n}\nfunction _paths() {\n  var data = require(\"@expo/config/paths\");\n  _paths = function _paths() {\n    return data;\n  };\n  return data;\n}\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function _chalk() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _getModulesPaths() {\n  var data = require(\"./getModulesPaths\");\n  _getModulesPaths = function _getModulesPaths() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = require('debug')('expo:metro:config:rewriteRequestUrl');\nfunction getRewriteRequestUrl(projectRoot) {\n  function rewriteExpoRequestUrl(url) {\n    if (url.includes('/.expo/.virtual-metro-entry.bundle?')) {\n      var _searchParams$get;\n      var ensured = url.startsWith('/') ? new URL(url, 'https://acme.dev') : new URL(url);\n      var search = ensured.search,\n        searchParams = ensured.searchParams;\n      var platform = (_searchParams$get = searchParams.get('platform')) !== null && _searchParams$get !== void 0 ? _searchParams$get : 'web';\n      debug('Rewriting magic request url to entry point', {\n        url: url,\n        platform: platform\n      });\n      var entry = (0, _paths().resolveEntryPoint)(projectRoot, {\n        platform: platform,\n        projectConfig: {\n          pkg: (0, _config().getPackageJson)(projectRoot)\n        }\n      });\n      if (!entry) {\n        throw new Error((0, _chalk().default)`The project entry file could not be resolved (platform: ${platform}, root: ${projectRoot}). Define it in the {bold package.json} \"main\" field.`);\n      }\n      var serverRoot = (0, _getModulesPaths().getServerRoot)(projectRoot);\n      var relativeEntry = _path().default.relative(serverRoot, entry).replace(/\\.[tj]sx?$/, '');\n      debug('Resolved entry point', {\n        entry: entry,\n        relativeEntry: relativeEntry,\n        serverRoot: serverRoot\n      });\n      if (url.startsWith('/')) {\n        return '/' + relativeEntry + '.bundle' + search;\n      }\n      ensured.pathname = '/' + relativeEntry + '.bundle';\n      return ensured.toString();\n    }\n    return url;\n  }\n  return rewriteExpoRequestUrl;\n}","map":{"version":3,"names":["_config","data","require","_paths","_chalk","_interopRequireDefault","_path","_getModulesPaths","obj","__esModule","default","debug","getRewriteRequestUrl","projectRoot","rewriteExpoRequestUrl","url","includes","_searchParams$get","ensured","startsWith","URL","search","searchParams","platform","get","entry","resolveEntryPoint","projectConfig","pkg","getPackageJson","Error","serverRoot","getServerRoot","relativeEntry","relative","replace","pathname","toString"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\metro-config\\src\\rewriteRequestUrl.ts"],"sourcesContent":["// Copyright 2023-present 650 Industries (Expo). All rights reserved.\nimport { getPackageJson } from '@expo/config';\nimport { resolveEntryPoint } from '@expo/config/paths';\nimport chalk from 'chalk';\nimport path from 'path';\n\nimport { getServerRoot } from './getModulesPaths';\n\nconst debug = require('debug')('expo:metro:config:rewriteRequestUrl');\n\nexport function getRewriteRequestUrl(projectRoot: string) {\n  function rewriteExpoRequestUrl(url: string): string {\n    // Like: `/.expo/.virtual-metro-entry.bundle?platform=ios&dev=true&minify=false&modulesOnly=false&runModule=true&app=com.bacon.test-custom-entry`\n    // Sometimes a fully qualified URL is passed in, e.g. `http://localhost:19001/.expo/.virtual-metro-entry.bundle?platform=ios&dev=true&minify=false&modulesOnly=false&runModule=true&app=com.bacon.test-custom-entry`\n    if (url.includes('/.expo/.virtual-metro-entry.bundle?')) {\n      const ensured = url.startsWith('/') ? new URL(url, 'https://acme.dev') : new URL(url);\n      // TODO: Maybe this function could be memoized in some capacity?\n      const { search, searchParams } = ensured;\n\n      const platform = searchParams.get('platform') ?? 'web';\n\n      debug('Rewriting magic request url to entry point', { url, platform });\n\n      const entry = resolveEntryPoint(projectRoot, {\n        platform,\n        // @ts-ignore\n        projectConfig: {\n          pkg: getPackageJson(projectRoot),\n        },\n      });\n\n      if (!entry) {\n        throw new Error(\n          chalk`The project entry file could not be resolved (platform: ${platform}, root: ${projectRoot}). Define it in the {bold package.json} \"main\" field.`\n        );\n      }\n\n      const serverRoot = getServerRoot(projectRoot);\n      const relativeEntry = path.relative(serverRoot, entry).replace(/\\.[tj]sx?$/, '');\n      debug('Resolved entry point', { entry, relativeEntry, serverRoot });\n\n      // Only return the pathname when url is relative\n      if (url.startsWith('/')) {\n        // Like: `/index.bundle?platform=ios&dev=true&minify=false&modulesOnly=false&runModule=true&app=com.bacon.test-custom-entry`\n        return '/' + relativeEntry + '.bundle' + search;\n      }\n\n      // Modify the pathname within the URL and return the full URL\n      ensured.pathname = '/' + relativeEntry + '.bundle';\n      // Like: `http://localhost:19001/index.bundle?platform=ios&dev=true&minify=false&modulesOnly=false&runModule=true&app=com.bacon.test-custom-entry`\n      return ensured.toString();\n    }\n\n    return url;\n  }\n  return rewriteExpoRequestUrl;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}