{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function _cliTools() {\n    return data;\n  };\n  return data;\n}\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function _chalk() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nvar _downloadAndUnzip = require(\"../downloadAndUnzip\");\nvar _androidWinHelpers = require(\"../windows/androidWinHelpers\");\nvar _environmentVariables = require(\"../windows/environmentVariables\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar getBuildToolsVersion = function getBuildToolsVersion() {\n  var projectRoot = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  try {\n    projectRoot = projectRoot || (0, _cliTools().findProjectRoot)();\n  } catch (_unused) {\n    _cliTools().logger.log();\n    _cliTools().logger.warn(\"We couldn't find a package.json in this directory. Android SDK checks may fail. Doctor works best in a React Native project root.\");\n  }\n  var gradleBuildFilePath = _path().default.join(projectRoot, 'android/build.gradle');\n  var buildToolsVersionEntry = 'buildToolsVersion';\n  if (!_fs().default.existsSync(gradleBuildFilePath)) {\n    return 'Not Found';\n  }\n  var gradleBuildFile = _fs().default.readFileSync(gradleBuildFilePath, 'utf-8');\n  var buildToolsVersionIndex = gradleBuildFile.indexOf(buildToolsVersionEntry);\n  var buildToolsVersion = (gradleBuildFile.substring(buildToolsVersionIndex).split('\\n')[0].match(/\\d|\\../g) || []).join('');\n  return buildToolsVersion || 'Not Found';\n};\nvar installMessage = `Read more about how to update Android SDK at ${_chalk().default.dim('https://developer.android.com/studio')}`;\nvar isSDKInstalled = function isSDKInstalled(environmentInfo) {\n  var version = environmentInfo.SDKs['Android SDK'];\n  return version !== 'Not Found';\n};\nvar _default = {\n  label: 'Android SDK',\n  description: 'Required for building and installing your app on Android',\n  getDiagnostics: function () {\n    var _getDiagnostics = _asyncToGenerator(function* (_ref, config) {\n      var SDKs = _ref.SDKs;\n      var requiredVersion = getBuildToolsVersion(config === null || config === void 0 ? void 0 : config.root);\n      var buildTools = typeof SDKs['Android SDK'] === 'string' ? SDKs['Android SDK'] : SDKs['Android SDK']['Build Tools'];\n      var isAndroidSDKInstalled = Array.isArray(buildTools);\n      var isRequiredVersionInstalled = isAndroidSDKInstalled ? buildTools.includes(requiredVersion) : false;\n      return {\n        versions: isAndroidSDKInstalled ? buildTools : SDKs['Android SDK'],\n        versionRange: requiredVersion,\n        needsToBeFixed: !isRequiredVersionInstalled\n      };\n    });\n    function getDiagnostics(_x, _x2) {\n      return _getDiagnostics.apply(this, arguments);\n    }\n    return getDiagnostics;\n  }(),\n  win32AutomaticFix: function () {\n    var _win32AutomaticFix = _asyncToGenerator(function* (_ref2) {\n      var loader = _ref2.loader;\n      var cliToolsUrl = 'https://dl.google.com/android/repository/commandlinetools-win-8512546_latest.zip';\n      var systemImage = 'system-images;android-31;google_apis;x86_64';\n      var componentsToInstall = ['platform-tools', 'build-tools;31.0.0', 'platforms;android-31', 'build-tools;28.0.3', 'platforms;android-28', 'emulator', systemImage, '--licenses'];\n      var androidSDKRoot = (0, _androidWinHelpers.getAndroidSdkRootInstallation)();\n      if (androidSDKRoot === '') {\n        loader.fail('There was an error finding the Android SDK root');\n        return;\n      }\n      yield (0, _downloadAndUnzip.downloadAndUnzip)({\n        loader: loader,\n        downloadUrl: cliToolsUrl,\n        component: 'Android Command Line Tools',\n        installPath: androidSDKRoot\n      });\n      for (var component of componentsToInstall) {\n        loader.text = `Installing \"${component}\" (this may take a few minutes)`;\n        try {\n          yield (0, _androidWinHelpers.installComponent)(component, androidSDKRoot);\n        } catch (e) {}\n      }\n      loader.text = 'Updating environment variables';\n      yield (0, _environmentVariables.setEnvironment)('ANDROID_SDK_ROOT', androidSDKRoot);\n      yield (0, _environmentVariables.setEnvironment)('ANDROID_HOME', androidSDKRoot);\n      yield (0, _environmentVariables.updateEnvironment)('PATH', _path().default.join(androidSDKRoot, 'tools'));\n      yield (0, _environmentVariables.updateEnvironment)('PATH', _path().default.join(androidSDKRoot, 'platform-tools'));\n      loader.text = 'Configuring Hypervisor for faster emulation, this might prompt UAC';\n      var _yield = yield (0, _androidWinHelpers.getBestHypervisor)(androidSDKRoot),\n        hypervisor = _yield.hypervisor,\n        installed = _yield.installed;\n      if (!installed) {\n        if (hypervisor === 'none') {\n          loader.warn('Android SDK configured but virtualization could not be enabled.');\n          return;\n        }\n        if (hypervisor === 'AMDH') {\n          yield (0, _androidWinHelpers.enableAMDH)(androidSDKRoot);\n        } else if (hypervisor === 'HAXM') {\n          yield (0, _androidWinHelpers.enableHAXM)(androidSDKRoot);\n        } else if (hypervisor === 'WHPX') {\n          yield (0, _androidWinHelpers.enableWHPX)();\n        }\n      }\n      loader.text = 'Creating AVD';\n      yield (0, _androidWinHelpers.createAVD)(androidSDKRoot, 'pixel_9.0', 'pixel', systemImage);\n      loader.succeed('Android SDK configured. You might need to restart your PC for all changes to take effect.');\n    });\n    function win32AutomaticFix(_x3) {\n      return _win32AutomaticFix.apply(this, arguments);\n    }\n    return win32AutomaticFix;\n  }(),\n  runAutomaticFix: function () {\n    var _runAutomaticFix = _asyncToGenerator(function* (_ref3) {\n      var loader = _ref3.loader,\n        logManualInstallation = _ref3.logManualInstallation,\n        environmentInfo = _ref3.environmentInfo;\n      loader.fail();\n      if (isSDKInstalled(environmentInfo)) {\n        return logManualInstallation({\n          message: installMessage\n        });\n      }\n      return logManualInstallation({\n        healthcheck: 'Android SDK',\n        url: _cliTools().link.docs('environment-setup', {\n          hash: 'android-sdk',\n          guide: 'native',\n          platform: 'android'\n        })\n      });\n    });\n    function runAutomaticFix(_x4) {\n      return _runAutomaticFix.apply(this, arguments);\n    }\n    return runAutomaticFix;\n  }()\n};\nexports.default = _default;","map":{"version":3,"names":["_asyncToGenerator","require","Object","defineProperty","exports","value","default","_cliTools","data","_chalk","_interopRequireDefault","_fs","_path","_downloadAndUnzip","_androidWinHelpers","_environmentVariables","obj","__esModule","getBuildToolsVersion","projectRoot","arguments","length","undefined","findProjectRoot","_unused","logger","log","warn","gradleBuildFilePath","join","buildToolsVersionEntry","existsSync","gradleBuildFile","readFileSync","buildToolsVersionIndex","indexOf","buildToolsVersion","substring","split","match","installMessage","dim","isSDKInstalled","environmentInfo","version","SDKs","_default","label","description","getDiagnostics","_getDiagnostics","_ref","config","requiredVersion","root","buildTools","isAndroidSDKInstalled","Array","isArray","isRequiredVersionInstalled","includes","versions","versionRange","needsToBeFixed","_x","_x2","apply","win32AutomaticFix","_win32AutomaticFix","_ref2","loader","cliToolsUrl","systemImage","componentsToInstall","androidSDKRoot","getAndroidSdkRootInstallation","fail","downloadAndUnzip","downloadUrl","component","installPath","text","installComponent","e","setEnvironment","updateEnvironment","_yield","getBestHypervisor","hypervisor","installed","enableAMDH","enableHAXM","enableWHPX","createAVD","succeed","_x3","runAutomaticFix","_runAutomaticFix","_ref3","logManualInstallation","message","healthcheck","url","link","docs","hash","guide","platform","_x4"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/build/tools/healthchecks/androidSDK.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function () {\n    return data;\n  };\n  return data;\n}\nfunction _chalk() {\n  const data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function () {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n  _fs = function () {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n  _path = function () {\n    return data;\n  };\n  return data;\n}\nvar _downloadAndUnzip = require(\"../downloadAndUnzip\");\nvar _androidWinHelpers = require(\"../windows/androidWinHelpers\");\nvar _environmentVariables = require(\"../windows/environmentVariables\");\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nconst getBuildToolsVersion = (projectRoot = '') => {\n  try {\n    // doctor is a detached command, so we may not be in a RN project.\n    projectRoot = projectRoot || (0, _cliTools().findProjectRoot)();\n  } catch {\n    _cliTools().logger.log(); // for extra space\n    _cliTools().logger.warn(\"We couldn't find a package.json in this directory. Android SDK checks may fail. Doctor works best in a React Native project root.\");\n  }\n  const gradleBuildFilePath = _path().default.join(projectRoot, 'android/build.gradle');\n  const buildToolsVersionEntry = 'buildToolsVersion';\n  if (!_fs().default.existsSync(gradleBuildFilePath)) {\n    return 'Not Found';\n  }\n\n  // Read the content of the `build.gradle` file\n  const gradleBuildFile = _fs().default.readFileSync(gradleBuildFilePath, 'utf-8');\n  const buildToolsVersionIndex = gradleBuildFile.indexOf(buildToolsVersionEntry);\n  const buildToolsVersion = (gradleBuildFile\n  // Get only the portion of the declaration of `buildToolsVersion`\n  .substring(buildToolsVersionIndex).split('\\n')[0]\n  // Get only the the value of `buildToolsVersion`\n  .match(/\\d|\\../g) || []).join('');\n  return buildToolsVersion || 'Not Found';\n};\nconst installMessage = `Read more about how to update Android SDK at ${_chalk().default.dim('https://developer.android.com/studio')}`;\nconst isSDKInstalled = environmentInfo => {\n  const version = environmentInfo.SDKs['Android SDK'];\n  return version !== 'Not Found';\n};\nvar _default = {\n  label: 'Android SDK',\n  description: 'Required for building and installing your app on Android',\n  getDiagnostics: async ({\n    SDKs\n  }, config) => {\n    const requiredVersion = getBuildToolsVersion(config === null || config === void 0 ? void 0 : config.root);\n    const buildTools = typeof SDKs['Android SDK'] === 'string' ? SDKs['Android SDK'] : SDKs['Android SDK']['Build Tools'];\n    const isAndroidSDKInstalled = Array.isArray(buildTools);\n    const isRequiredVersionInstalled = isAndroidSDKInstalled ? buildTools.includes(requiredVersion) : false;\n    return {\n      versions: isAndroidSDKInstalled ? buildTools : SDKs['Android SDK'],\n      versionRange: requiredVersion,\n      needsToBeFixed: !isRequiredVersionInstalled\n    };\n  },\n  win32AutomaticFix: async ({\n    loader\n  }) => {\n    // Need a GitHub action to update automatically. See #1180\n    const cliToolsUrl = 'https://dl.google.com/android/repository/commandlinetools-win-8512546_latest.zip';\n    const systemImage = 'system-images;android-31;google_apis;x86_64';\n    // Installing 29 as well so Android Studio does not complain on first boot\n    const componentsToInstall = ['platform-tools', 'build-tools;31.0.0', 'platforms;android-31',\n    // Is 28 still needed?\n    'build-tools;28.0.3', 'platforms;android-28', 'emulator', systemImage, '--licenses' // Accept any pending licenses at the end\n    ];\n\n    const androidSDKRoot = (0, _androidWinHelpers.getAndroidSdkRootInstallation)();\n    if (androidSDKRoot === '') {\n      loader.fail('There was an error finding the Android SDK root');\n      return;\n    }\n    await (0, _downloadAndUnzip.downloadAndUnzip)({\n      loader,\n      downloadUrl: cliToolsUrl,\n      component: 'Android Command Line Tools',\n      installPath: androidSDKRoot\n    });\n    for (const component of componentsToInstall) {\n      loader.text = `Installing \"${component}\" (this may take a few minutes)`;\n      try {\n        await (0, _androidWinHelpers.installComponent)(component, androidSDKRoot);\n      } catch (e) {\n        // Is there a way to persist a line in loader and continue the execution?\n      }\n    }\n    loader.text = 'Updating environment variables';\n\n    // Required for the emulator to work from the CLI\n    await (0, _environmentVariables.setEnvironment)('ANDROID_SDK_ROOT', androidSDKRoot);\n    await (0, _environmentVariables.setEnvironment)('ANDROID_HOME', androidSDKRoot);\n    await (0, _environmentVariables.updateEnvironment)('PATH', _path().default.join(androidSDKRoot, 'tools'));\n    await (0, _environmentVariables.updateEnvironment)('PATH', _path().default.join(androidSDKRoot, 'platform-tools'));\n    loader.text = 'Configuring Hypervisor for faster emulation, this might prompt UAC';\n    const {\n      hypervisor,\n      installed\n    } = await (0, _androidWinHelpers.getBestHypervisor)(androidSDKRoot);\n    if (!installed) {\n      if (hypervisor === 'none') {\n        loader.warn('Android SDK configured but virtualization could not be enabled.');\n        return;\n      }\n      if (hypervisor === 'AMDH') {\n        await (0, _androidWinHelpers.enableAMDH)(androidSDKRoot);\n      } else if (hypervisor === 'HAXM') {\n        await (0, _androidWinHelpers.enableHAXM)(androidSDKRoot);\n      } else if (hypervisor === 'WHPX') {\n        await (0, _androidWinHelpers.enableWHPX)();\n      }\n    }\n    loader.text = 'Creating AVD';\n    await (0, _androidWinHelpers.createAVD)(androidSDKRoot, 'pixel_9.0', 'pixel', systemImage);\n    loader.succeed('Android SDK configured. You might need to restart your PC for all changes to take effect.');\n  },\n  runAutomaticFix: async ({\n    loader,\n    logManualInstallation,\n    environmentInfo\n  }) => {\n    loader.fail();\n    if (isSDKInstalled(environmentInfo)) {\n      return logManualInstallation({\n        message: installMessage\n      });\n    }\n    return logManualInstallation({\n      healthcheck: 'Android SDK',\n      url: _cliTools().link.docs('environment-setup', {\n        hash: 'android-sdk',\n        guide: 'native',\n        platform: 'android'\n      })\n    });\n  }\n};\nexports.default = _default;\n\n//# sourceMappingURL=androidSDK.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}