{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport * as React from 'react';\nimport { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler } from \"../handlers/PanGestureHandler\";\nimport { TapGestureHandler } from \"../handlers/TapGestureHandler\";\nimport { State } from \"../State\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar DRAG_TOSS = 0.05;\nvar Swipeable = function (_Component) {\n  _inherits(Swipeable, _Component);\n  var _super = _createSuper(Swipeable);\n  function Swipeable(_props) {\n    var _this;\n    _classCallCheck(this, Swipeable);\n    _this = _super.call(this, _props);\n    _this.updateAnimatedEvent = function (props, state) {\n      var friction = props.friction,\n        overshootFriction = props.overshootFriction;\n      var dragX = state.dragX,\n        rowTranslation = state.rowTranslation,\n        _state$leftWidth = state.leftWidth,\n        leftWidth = _state$leftWidth === void 0 ? 0 : _state$leftWidth,\n        _state$rowWidth = state.rowWidth,\n        rowWidth = _state$rowWidth === void 0 ? 0 : _state$rowWidth;\n      var _state$rightOffset = state.rightOffset,\n        rightOffset = _state$rightOffset === void 0 ? rowWidth : _state$rightOffset;\n      var rightWidth = Math.max(0, rowWidth - rightOffset);\n      var _props$overshootLeft = props.overshootLeft,\n        overshootLeft = _props$overshootLeft === void 0 ? leftWidth > 0 : _props$overshootLeft,\n        _props$overshootRight = props.overshootRight,\n        overshootRight = _props$overshootRight === void 0 ? rightWidth > 0 : _props$overshootRight;\n      var transX = Animated.add(rowTranslation, dragX.interpolate({\n        inputRange: [0, friction],\n        outputRange: [0, 1]\n      })).interpolate({\n        inputRange: [-rightWidth - 1, -rightWidth, leftWidth, leftWidth + 1],\n        outputRange: [-rightWidth - (overshootRight ? 1 / overshootFriction : 0), -rightWidth, leftWidth, leftWidth + (overshootLeft ? 1 / overshootFriction : 0)]\n      });\n      _this.transX = transX;\n      _this.showLeftAction = leftWidth > 0 ? transX.interpolate({\n        inputRange: [-1, 0, leftWidth],\n        outputRange: [0, 0, 1]\n      }) : new Animated.Value(0);\n      _this.leftActionTranslate = _this.showLeftAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n      _this.showRightAction = rightWidth > 0 ? transX.interpolate({\n        inputRange: [-rightWidth, 0, 1],\n        outputRange: [1, 0, 0]\n      }) : new Animated.Value(0);\n      _this.rightActionTranslate = _this.showRightAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n    };\n    _this.onTapHandlerStateChange = function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n      if (nativeEvent.oldState === State.ACTIVE) {\n        _this.close();\n      }\n    };\n    _this.onHandlerStateChange = function (ev) {\n      if (ev.nativeEvent.oldState === State.ACTIVE) {\n        _this.handleRelease(ev);\n      }\n    };\n    _this.handleRelease = function (ev) {\n      var _ev$nativeEvent = ev.nativeEvent,\n        velocityX = _ev$nativeEvent.velocityX,\n        dragX = _ev$nativeEvent.translationX;\n      var _this$state = _this.state,\n        _this$state$leftWidth = _this$state.leftWidth,\n        leftWidth = _this$state$leftWidth === void 0 ? 0 : _this$state$leftWidth,\n        _this$state$rowWidth = _this$state.rowWidth,\n        rowWidth = _this$state$rowWidth === void 0 ? 0 : _this$state$rowWidth,\n        rowState = _this$state.rowState;\n      var _this$state$rightOffs = _this.state.rightOffset,\n        rightOffset = _this$state$rightOffs === void 0 ? rowWidth : _this$state$rightOffs;\n      var rightWidth = rowWidth - rightOffset;\n      var _this$props = _this.props,\n        friction = _this$props.friction,\n        _this$props$leftThres = _this$props.leftThreshold,\n        leftThreshold = _this$props$leftThres === void 0 ? leftWidth / 2 : _this$props$leftThres,\n        _this$props$rightThre = _this$props.rightThreshold,\n        rightThreshold = _this$props$rightThre === void 0 ? rightWidth / 2 : _this$props$rightThre;\n      var startOffsetX = _this.currentOffset() + dragX / friction;\n      var translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n      var toValue = 0;\n      if (rowState === 0) {\n        if (translationX > leftThreshold) {\n          toValue = leftWidth;\n        } else if (translationX < -rightThreshold) {\n          toValue = -rightWidth;\n        }\n      } else if (rowState === 1) {\n        if (translationX > -leftThreshold) {\n          toValue = leftWidth;\n        }\n      } else {\n        if (translationX < rightThreshold) {\n          toValue = -rightWidth;\n        }\n      }\n      _this.animateRow(startOffsetX, toValue, velocityX / friction);\n    };\n    _this.animateRow = function (fromValue, toValue, velocityX) {\n      var _this$state2 = _this.state,\n        dragX = _this$state2.dragX,\n        rowTranslation = _this$state2.rowTranslation;\n      dragX.setValue(0);\n      rowTranslation.setValue(fromValue);\n      _this.setState({\n        rowState: Math.sign(toValue)\n      });\n      Animated.spring(rowTranslation, _objectSpread({\n        restSpeedThreshold: 1.7,\n        restDisplacementThreshold: 0.4,\n        velocity: velocityX,\n        bounciness: 0,\n        toValue: toValue,\n        useNativeDriver: _this.props.useNativeAnimations\n      }, _this.props.animationOptions)).start(function (_ref2) {\n        var finished = _ref2.finished;\n        if (finished) {\n          if (toValue > 0) {\n            _this.props.onSwipeableLeftOpen == null ? void 0 : _this.props.onSwipeableLeftOpen();\n            _this.props.onSwipeableOpen == null ? void 0 : _this.props.onSwipeableOpen('left', _assertThisInitialized(_this));\n          } else if (toValue < 0) {\n            _this.props.onSwipeableRightOpen == null ? void 0 : _this.props.onSwipeableRightOpen();\n            _this.props.onSwipeableOpen == null ? void 0 : _this.props.onSwipeableOpen('right', _assertThisInitialized(_this));\n          } else {\n            var closingDirection = fromValue > 0 ? 'left' : 'right';\n            _this.props.onSwipeableClose == null ? void 0 : _this.props.onSwipeableClose(closingDirection, _assertThisInitialized(_this));\n          }\n        }\n      });\n      if (toValue > 0) {\n        _this.props.onSwipeableLeftWillOpen == null ? void 0 : _this.props.onSwipeableLeftWillOpen();\n        _this.props.onSwipeableWillOpen == null ? void 0 : _this.props.onSwipeableWillOpen('left');\n      } else if (toValue < 0) {\n        _this.props.onSwipeableRightWillOpen == null ? void 0 : _this.props.onSwipeableRightWillOpen();\n        _this.props.onSwipeableWillOpen == null ? void 0 : _this.props.onSwipeableWillOpen('right');\n      } else {\n        var closingDirection = fromValue > 0 ? 'left' : 'right';\n        _this.props.onSwipeableWillClose == null ? void 0 : _this.props.onSwipeableWillClose(closingDirection);\n      }\n    };\n    _this.onRowLayout = function (_ref3) {\n      var nativeEvent = _ref3.nativeEvent;\n      _this.setState({\n        rowWidth: nativeEvent.layout.width\n      });\n    };\n    _this.currentOffset = function () {\n      var _this$state3 = _this.state,\n        _this$state3$leftWidt = _this$state3.leftWidth,\n        leftWidth = _this$state3$leftWidt === void 0 ? 0 : _this$state3$leftWidt,\n        _this$state3$rowWidth = _this$state3.rowWidth,\n        rowWidth = _this$state3$rowWidth === void 0 ? 0 : _this$state3$rowWidth,\n        rowState = _this$state3.rowState;\n      var _this$state$rightOffs2 = _this.state.rightOffset,\n        rightOffset = _this$state$rightOffs2 === void 0 ? rowWidth : _this$state$rightOffs2;\n      var rightWidth = rowWidth - rightOffset;\n      if (rowState === 1) {\n        return leftWidth;\n      } else if (rowState === -1) {\n        return -rightWidth;\n      }\n      return 0;\n    };\n    _this.close = function () {\n      _this.animateRow(_this.currentOffset(), 0);\n    };\n    _this.openLeft = function () {\n      var _this$state$leftWidth2 = _this.state.leftWidth,\n        leftWidth = _this$state$leftWidth2 === void 0 ? 0 : _this$state$leftWidth2;\n      _this.animateRow(_this.currentOffset(), leftWidth);\n    };\n    _this.openRight = function () {\n      var _this$state$rowWidth2 = _this.state.rowWidth,\n        rowWidth = _this$state$rowWidth2 === void 0 ? 0 : _this$state$rowWidth2;\n      var _this$state$rightOffs3 = _this.state.rightOffset,\n        rightOffset = _this$state$rightOffs3 === void 0 ? rowWidth : _this$state$rightOffs3;\n      var rightWidth = rowWidth - rightOffset;\n      _this.animateRow(_this.currentOffset(), -rightWidth);\n    };\n    _this.reset = function () {\n      var _this$state4 = _this.state,\n        dragX = _this$state4.dragX,\n        rowTranslation = _this$state4.rowTranslation;\n      dragX.setValue(0);\n      rowTranslation.setValue(0);\n      _this.setState({\n        rowState: 0\n      });\n    };\n    var _dragX = new Animated.Value(0);\n    _this.state = {\n      dragX: _dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined\n    };\n    _this.updateAnimatedEvent(_props, _this.state);\n    _this.onGestureEvent = Animated.event([{\n      nativeEvent: {\n        translationX: _dragX\n      }\n    }], {\n      useNativeDriver: _props.useNativeAnimations\n    });\n    return _this;\n  }\n  _createClass(Swipeable, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(props, state) {\n      if (this.props.friction !== props.friction || this.props.overshootLeft !== props.overshootLeft || this.props.overshootRight !== props.overshootRight || this.props.overshootFriction !== props.overshootFriction || this.state.leftWidth !== state.leftWidth || this.state.rightOffset !== state.rightOffset || this.state.rowWidth !== state.rowWidth) {\n        this.updateAnimatedEvent(props, state);\n      }\n      return true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var rowState = this.state.rowState;\n      var _this$props2 = this.props,\n        children = _this$props2.children,\n        renderLeftActions = _this$props2.renderLeftActions,\n        renderRightActions = _this$props2.renderRightActions,\n        _this$props2$dragOffs = _this$props2.dragOffsetFromLeftEdge,\n        dragOffsetFromLeftEdge = _this$props2$dragOffs === void 0 ? 10 : _this$props2$dragOffs,\n        _this$props2$dragOffs2 = _this$props2.dragOffsetFromRightEdge,\n        dragOffsetFromRightEdge = _this$props2$dragOffs2 === void 0 ? 10 : _this$props2$dragOffs2;\n      var left = renderLeftActions && _jsxs(Animated.View, {\n        style: [styles.leftActions, {\n          transform: [{\n            translateX: this.leftActionTranslate\n          }]\n        }],\n        children: [renderLeftActions(this.showLeftAction, this.transX, this), _jsx(View, {\n          onLayout: function onLayout(_ref4) {\n            var nativeEvent = _ref4.nativeEvent;\n            return _this2.setState({\n              leftWidth: nativeEvent.layout.x\n            });\n          }\n        })]\n      });\n      var right = renderRightActions && _jsxs(Animated.View, {\n        style: [styles.rightActions, {\n          transform: [{\n            translateX: this.rightActionTranslate\n          }]\n        }],\n        children: [renderRightActions(this.showRightAction, this.transX, this), _jsx(View, {\n          onLayout: function onLayout(_ref5) {\n            var nativeEvent = _ref5.nativeEvent;\n            return _this2.setState({\n              rightOffset: nativeEvent.layout.x\n            });\n          }\n        })]\n      });\n      return _jsx(PanGestureHandler, _objectSpread(_objectSpread({\n        activeOffsetX: [-dragOffsetFromRightEdge, dragOffsetFromLeftEdge]\n      }, this.props), {}, {\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.onHandlerStateChange,\n        children: _jsxs(Animated.View, {\n          onLayout: this.onRowLayout,\n          style: [styles.container, this.props.containerStyle],\n          children: [left, right, _jsx(TapGestureHandler, {\n            enabled: rowState !== 0,\n            onHandlerStateChange: this.onTapHandlerStateChange,\n            children: _jsx(Animated.View, {\n              pointerEvents: rowState === 0 ? 'auto' : 'box-only',\n              style: [{\n                transform: [{\n                  translateX: this.transX\n                }]\n              }, this.props.childrenContainerStyle],\n              children: children\n            })\n          })]\n        })\n      }));\n    }\n  }]);\n  return Swipeable;\n}(Component);\nSwipeable.defaultProps = {\n  friction: 1,\n  overshootFriction: 1,\n  useNativeAnimations: true\n};\nexport { Swipeable as default };\nvar styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  leftActions: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row'\n  }),\n  rightActions: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse'\n  })\n});","map":{"version":3,"names":["React","Component","Animated","StyleSheet","View","I18nManager","PanGestureHandler","TapGestureHandler","State","jsx","_jsx","jsxs","_jsxs","DRAG_TOSS","Swipeable","_Component","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","updateAnimatedEvent","state","friction","overshootFriction","dragX","rowTranslation","_state$leftWidth","leftWidth","_state$rowWidth","rowWidth","_state$rightOffset","rightOffset","rightWidth","Math","max","_props$overshootLeft","overshootLeft","_props$overshootRight","overshootRight","transX","add","interpolate","inputRange","outputRange","showLeftAction","Value","leftActionTranslate","Number","MIN_VALUE","extrapolate","showRightAction","rightActionTranslate","onTapHandlerStateChange","_ref","nativeEvent","oldState","ACTIVE","close","onHandlerStateChange","ev","handleRelease","_ev$nativeEvent","velocityX","translationX","_this$state","_this$state$leftWidth","_this$state$rowWidth","rowState","_this$state$rightOffs","_this$props","_this$props$leftThres","leftThreshold","_this$props$rightThre","rightThreshold","startOffsetX","currentOffset","toValue","animateRow","fromValue","_this$state2","setValue","setState","sign","spring","_objectSpread","restSpeedThreshold","restDisplacementThreshold","velocity","bounciness","useNativeDriver","useNativeAnimations","animationOptions","start","_ref2","finished","onSwipeableLeftOpen","onSwipeableOpen","_assertThisInitialized","onSwipeableRightOpen","closingDirection","onSwipeableClose","onSwipeableLeftWillOpen","onSwipeableWillOpen","onSwipeableRightWillOpen","onSwipeableWillClose","onRowLayout","_ref3","layout","width","_this$state3","_this$state3$leftWidt","_this$state3$rowWidth","_this$state$rightOffs2","openLeft","_this$state$leftWidth2","openRight","_this$state$rowWidth2","_this$state$rightOffs3","reset","_this$state4","undefined","onGestureEvent","event","_createClass","key","value","shouldComponentUpdate","render","_this2","_this$props2","children","renderLeftActions","renderRightActions","_this$props2$dragOffs","dragOffsetFromLeftEdge","_this$props2$dragOffs2","dragOffsetFromRightEdge","left","style","styles","leftActions","transform","translateX","onLayout","_ref4","x","right","rightActions","_ref5","activeOffsetX","container","containerStyle","enabled","pointerEvents","childrenContainerStyle","defaultProps","default","create","overflow","absoluteFillObject","flexDirection","isRTL"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/react-native-gesture-handler/src/components/Swipeable.tsx"],"sourcesContent":["// Similarily to the DrawerLayout component this deserves to be put in a\n// separate repo. Although, keeping it here for the time being will allow us to\n// move faster and fix possible issues quicker\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  I18nManager,\n  LayoutChangeEvent,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../handlers/gestureHandlerCommon';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerEventPayload,\n  PanGestureHandlerProps,\n} from '../handlers/PanGestureHandler';\nimport {\n  TapGestureHandler,\n  TapGestureHandlerEventPayload,\n} from '../handlers/TapGestureHandler';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\ntype SwipeableExcludes = Exclude<\n  keyof PanGestureHandlerProps,\n  'onGestureEvent' | 'onHandlerStateChange'\n>;\n\n// Animated.AnimatedInterpolation has been converted to a generic type\n// in @types/react-native 0.70. This way we can maintain compatibility\n// with all versions of @types/react-native\ntype AnimatedInterpolation = ReturnType<Animated.Value['interpolate']>;\n\nexport interface SwipeableProps\n  extends Pick<PanGestureHandlerProps, SwipeableExcludes> {\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance. e.g. value of 1 will indicate that the swipeable panel\n   * should exactly follow the gesture, 2 means it is going to be two times\n   * \"slower\".\n   */\n  friction?: number;\n\n  /**\n   * Distance from the left edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  leftThreshold?: number;\n\n  /**\n   * Distance from the right edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  rightThreshold?: number;\n\n  /**\n   * Distance that the panel must be dragged from the left edge to be considered\n   * a swipe. The default value is 10.\n   */\n  dragOffsetFromLeftEdge?: number;\n\n  /**\n   * Distance that the panel must be dragged from the right edge to be considered\n   * a swipe. The default value is 10.\n   */\n  dragOffsetFromRightEdge?: number;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the left\n   * actions panel's width. It is set to true by default as long as the left\n   * panel render method is present.\n   */\n  overshootLeft?: boolean;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the\n   * right actions panel's width. It is set to true by default as long as the\n   * right panel render method is present.\n   */\n  overshootRight?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance at overshoot. Default value is 1, it mean no friction, for\n   * a native feel, try 8 or above.\n   */\n  overshootFriction?: number;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableOpen()\n   *\n   * Called when left action panel gets open.\n   */\n  onSwipeableLeftOpen?: () => void;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableOpen()\n   *\n   * Called when right action panel gets open.\n   */\n  onSwipeableRightOpen?: () => void;\n\n  /**\n   * Called when action panel gets open (either right or left).\n   */\n  onSwipeableOpen?: (direction: 'left' | 'right', swipeable: Swipeable) => void;\n\n  /**\n   * Called when action panel is closed.\n   */\n  onSwipeableClose?: (\n    direction: 'left' | 'right',\n    swipeable: Swipeable\n  ) => void;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableWillOpen()\n   *\n   * Called when left action panel starts animating on open.\n   */\n  onSwipeableLeftWillOpen?: () => void;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableWillOpen()\n   *\n   * Called when right action panel starts animating on open.\n   */\n  onSwipeableRightWillOpen?: () => void;\n\n  /**\n   * Called when action panel starts animating on open (either right or left).\n   */\n  onSwipeableWillOpen?: (direction: 'left' | 'right') => void;\n\n  /**\n   * Called when action panel starts animating on close.\n   */\n  onSwipeableWillClose?: (direction: 'left' | 'right') => void;\n\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, +]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderLeftActions?: (\n    progressAnimatedValue: AnimatedInterpolation,\n    dragAnimatedValue: AnimatedInterpolation,\n    swipeable: Swipeable\n  ) => React.ReactNode;\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, -]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderRightActions?: (\n    progressAnimatedValue: AnimatedInterpolation,\n    dragAnimatedValue: AnimatedInterpolation,\n    swipeable: Swipeable\n  ) => React.ReactNode;\n\n  useNativeAnimations?: boolean;\n\n  animationOptions?: Record<string, unknown>;\n\n  /**\n   * Style object for the container (`Animated.View`), for example to override\n   * `overflow: 'hidden'`.\n   */\n  containerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Style object for the children container (`Animated.View`), for example to\n   * apply `flex: 1`\n   */\n  childrenContainerStyle?: StyleProp<ViewStyle>;\n}\n\ntype SwipeableState = {\n  dragX: Animated.Value;\n  rowTranslation: Animated.Value;\n  rowState: number;\n  leftWidth?: number;\n  rightOffset?: number;\n  rowWidth?: number;\n};\n\nexport default class Swipeable extends Component<\n  SwipeableProps,\n  SwipeableState\n> {\n  static defaultProps = {\n    friction: 1,\n    overshootFriction: 1,\n    useNativeAnimations: true,\n  };\n\n  constructor(props: SwipeableProps) {\n    super(props);\n    const dragX = new Animated.Value(0);\n    this.state = {\n      dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined,\n    };\n    this.updateAnimatedEvent(props, this.state);\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragX } }],\n      { useNativeDriver: props.useNativeAnimations! }\n    );\n  }\n\n  shouldComponentUpdate(props: SwipeableProps, state: SwipeableState) {\n    if (\n      this.props.friction !== props.friction ||\n      this.props.overshootLeft !== props.overshootLeft ||\n      this.props.overshootRight !== props.overshootRight ||\n      this.props.overshootFriction !== props.overshootFriction ||\n      this.state.leftWidth !== state.leftWidth ||\n      this.state.rightOffset !== state.rightOffset ||\n      this.state.rowWidth !== state.rowWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n\n    return true;\n  }\n\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private transX?: AnimatedInterpolation;\n  private showLeftAction?: AnimatedInterpolation | Animated.Value;\n  private leftActionTranslate?: AnimatedInterpolation;\n  private showRightAction?: AnimatedInterpolation | Animated.Value;\n  private rightActionTranslate?: AnimatedInterpolation;\n\n  private updateAnimatedEvent = (\n    props: SwipeableProps,\n    state: SwipeableState\n  ) => {\n    const { friction, overshootFriction } = props;\n    const { dragX, rowTranslation, leftWidth = 0, rowWidth = 0 } = state;\n    const { rightOffset = rowWidth } = state;\n    const rightWidth = Math.max(0, rowWidth - rightOffset);\n\n    const { overshootLeft = leftWidth > 0, overshootRight = rightWidth > 0 } =\n      props;\n\n    const transX = Animated.add(\n      rowTranslation,\n      dragX.interpolate({\n        inputRange: [0, friction!],\n        outputRange: [0, 1],\n      })\n    ).interpolate({\n      inputRange: [-rightWidth - 1, -rightWidth, leftWidth, leftWidth + 1],\n      outputRange: [\n        -rightWidth - (overshootRight ? 1 / overshootFriction! : 0),\n        -rightWidth,\n        leftWidth,\n        leftWidth + (overshootLeft ? 1 / overshootFriction! : 0),\n      ],\n    });\n    this.transX = transX;\n    this.showLeftAction =\n      leftWidth > 0\n        ? transX.interpolate({\n            inputRange: [-1, 0, leftWidth],\n            outputRange: [0, 0, 1],\n          })\n        : new Animated.Value(0);\n    this.leftActionTranslate = this.showLeftAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n    this.showRightAction =\n      rightWidth > 0\n        ? transX.interpolate({\n            inputRange: [-rightWidth, 0, 1],\n            outputRange: [1, 0, 0],\n          })\n        : new Animated.Value(0);\n    this.rightActionTranslate = this.showRightAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.close();\n    }\n  };\n\n  private onHandlerStateChange = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    if (ev.nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease(ev);\n    }\n  };\n\n  private handleRelease = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    const { velocityX, translationX: dragX } = ev.nativeEvent;\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    const {\n      friction,\n      leftThreshold = leftWidth / 2,\n      rightThreshold = rightWidth / 2,\n    } = this.props;\n\n    const startOffsetX = this.currentOffset() + dragX / friction!;\n    const translationX = (dragX + DRAG_TOSS * velocityX) / friction!;\n\n    let toValue = 0;\n    if (rowState === 0) {\n      if (translationX > leftThreshold) {\n        toValue = leftWidth;\n      } else if (translationX < -rightThreshold) {\n        toValue = -rightWidth;\n      }\n    } else if (rowState === 1) {\n      // swiped to left\n      if (translationX > -leftThreshold) {\n        toValue = leftWidth;\n      }\n    } else {\n      // swiped to right\n      if (translationX < rightThreshold) {\n        toValue = -rightWidth;\n      }\n    }\n\n    this.animateRow(startOffsetX, toValue, velocityX / friction!);\n  };\n\n  private animateRow = (\n    fromValue: number,\n    toValue: number,\n    velocityX?:\n      | number\n      | {\n          x: number;\n          y: number;\n        }\n  ) => {\n    const { dragX, rowTranslation } = this.state;\n    dragX.setValue(0);\n    rowTranslation.setValue(fromValue);\n\n    this.setState({ rowState: Math.sign(toValue) });\n    Animated.spring(rowTranslation, {\n      restSpeedThreshold: 1.7,\n      restDisplacementThreshold: 0.4,\n      velocity: velocityX,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      ...this.props.animationOptions,\n    }).start(({ finished }) => {\n      if (finished) {\n        if (toValue > 0) {\n          this.props.onSwipeableLeftOpen?.();\n          this.props.onSwipeableOpen?.('left', this);\n        } else if (toValue < 0) {\n          this.props.onSwipeableRightOpen?.();\n          this.props.onSwipeableOpen?.('right', this);\n        } else {\n          const closingDirection = fromValue > 0 ? 'left' : 'right';\n          this.props.onSwipeableClose?.(closingDirection, this);\n        }\n      }\n    });\n    if (toValue > 0) {\n      this.props.onSwipeableLeftWillOpen?.();\n      this.props.onSwipeableWillOpen?.('left');\n    } else if (toValue < 0) {\n      this.props.onSwipeableRightWillOpen?.();\n      this.props.onSwipeableWillOpen?.('right');\n    } else {\n      const closingDirection = fromValue > 0 ? 'left' : 'right';\n      this.props.onSwipeableWillClose?.(closingDirection);\n    }\n  };\n\n  private onRowLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ rowWidth: nativeEvent.layout.width });\n  };\n\n  private currentOffset = () => {\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    if (rowState === 1) {\n      return leftWidth;\n    } else if (rowState === -1) {\n      return -rightWidth;\n    }\n    return 0;\n  };\n\n  close = () => {\n    this.animateRow(this.currentOffset(), 0);\n  };\n\n  openLeft = () => {\n    const { leftWidth = 0 } = this.state;\n    this.animateRow(this.currentOffset(), leftWidth);\n  };\n\n  openRight = () => {\n    const { rowWidth = 0 } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    this.animateRow(this.currentOffset(), -rightWidth);\n  };\n\n  reset = () => {\n    const { dragX, rowTranslation } = this.state;\n    dragX.setValue(0);\n    rowTranslation.setValue(0);\n    this.setState({ rowState: 0 });\n  };\n\n  render() {\n    const { rowState } = this.state;\n    const {\n      children,\n      renderLeftActions,\n      renderRightActions,\n      dragOffsetFromLeftEdge = 10,\n      dragOffsetFromRightEdge = 10,\n    } = this.props;\n\n    const left = renderLeftActions && (\n      <Animated.View\n        style={[\n          styles.leftActions,\n          // all those and below parameters can have ! since they are all\n          // asigned in constructor in `updateAnimatedEvent` but TS cannot spot\n          // it for some reason\n          { transform: [{ translateX: this.leftActionTranslate! }] },\n        ]}>\n        {renderLeftActions(this.showLeftAction!, this.transX!, this)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ leftWidth: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    const right = renderRightActions && (\n      <Animated.View\n        style={[\n          styles.rightActions,\n          { transform: [{ translateX: this.rightActionTranslate! }] },\n        ]}>\n        {renderRightActions(this.showRightAction!, this.transX!, this)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ rightOffset: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    return (\n      <PanGestureHandler\n        activeOffsetX={[-dragOffsetFromRightEdge, dragOffsetFromLeftEdge]}\n        {...this.props}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.onHandlerStateChange}>\n        <Animated.View\n          onLayout={this.onRowLayout}\n          style={[styles.container, this.props.containerStyle]}>\n          {left}\n          {right}\n          <TapGestureHandler\n            enabled={rowState !== 0}\n            onHandlerStateChange={this.onTapHandlerStateChange}>\n            <Animated.View\n              pointerEvents={rowState === 0 ? 'auto' : 'box-only'}\n              style={[\n                {\n                  transform: [{ translateX: this.transX! }],\n                },\n                this.props.childrenContainerStyle,\n              ]}>\n              {children}\n            </Animated.View>\n          </TapGestureHandler>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n  },\n  leftActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',\n  },\n  rightActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse',\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}