{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.exportWebAsync = exportWebAsync;\nvar _config = require(\"@expo/config\");\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _log = require(\"../../log\");\nvar _webSupportProjectPrerequisite = require(\"../../start/doctor/web/WebSupportProjectPrerequisite\");\nvar _platformBundlers = require(\"../../start/server/platformBundlers\");\nvar _webpackBundlerDevServer = require(\"../../start/server/webpack/WebpackBundlerDevServer\");\nvar _errors = require(\"../../utils/errors\");\nvar _nodeEnv = require(\"../../utils/nodeEnv\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction exportWebAsync(_x, _x2) {\n  return _exportWebAsync.apply(this, arguments);\n}\nfunction _exportWebAsync() {\n  _exportWebAsync = _asyncToGenerator(function* (projectRoot, options) {\n    yield new _webSupportProjectPrerequisite.WebSupportProjectPrerequisite(projectRoot).assertAsync();\n    (0, _nodeEnv).setNodeEnv(options.dev ? \"development\" : \"production\");\n    require(\"@expo/env\").load(projectRoot);\n    var _getConfig = (0, _config).getConfig(projectRoot),\n      exp = _getConfig.exp;\n    var platformBundlers = (0, _platformBundlers).getPlatformBundlers(exp);\n    var bundler = new _webpackBundlerDevServer.WebpackBundlerDevServer(projectRoot, platformBundlers, false);\n    if (!bundler.isTargetingWeb()) {\n      throw new _errors.CommandError(_chalk.default`{bold expo export:web} can only be used with Webpack. Use {bold expo export} for other bundlers.`);\n    }\n    _log.Log.log(`Exporting with Webpack...`);\n    yield bundler.bundleAsync({\n      mode: options.dev ? \"development\" : \"production\",\n      clear: options.clear\n    });\n  });\n  return _exportWebAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","exportWebAsync","_config","_chalk","_interopRequireDefault","_log","_webSupportProjectPrerequisite","_platformBundlers","_webpackBundlerDevServer","_errors","_nodeEnv","_x","_x2","_exportWebAsync","apply","arguments","projectRoot","options","WebSupportProjectPrerequisite","assertAsync","setNodeEnv","dev","load","_getConfig","getConfig","exp","platformBundlers","getPlatformBundlers","bundler","WebpackBundlerDevServer","isTargetingWeb","CommandError","default","Log","log","bundleAsync","mode","clear"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\export\\web\\exportWebAsync.ts"],"sourcesContent":["import { getConfig } from '@expo/config';\nimport chalk from 'chalk';\n\nimport { Log } from '../../log';\nimport { WebSupportProjectPrerequisite } from '../../start/doctor/web/WebSupportProjectPrerequisite';\nimport { getPlatformBundlers } from '../../start/server/platformBundlers';\nimport { WebpackBundlerDevServer } from '../../start/server/webpack/WebpackBundlerDevServer';\nimport { CommandError } from '../../utils/errors';\nimport { setNodeEnv } from '../../utils/nodeEnv';\nimport { Options } from './resolveOptions';\n\nexport async function exportWebAsync(projectRoot: string, options: Options) {\n  // Ensure webpack is available\n  await new WebSupportProjectPrerequisite(projectRoot).assertAsync();\n\n  setNodeEnv(options.dev ? 'development' : 'production');\n  require('@expo/env').load(projectRoot);\n\n  const { exp } = getConfig(projectRoot);\n  const platformBundlers = getPlatformBundlers(exp);\n  // Create a bundler interface\n  const bundler = new WebpackBundlerDevServer(projectRoot, platformBundlers, false);\n\n  // If the user set `web.bundler: 'metro'` then they should use `expo export` instead.\n  if (!bundler.isTargetingWeb()) {\n    throw new CommandError(\n      chalk`{bold expo export:web} can only be used with Webpack. Use {bold expo export} for other bundlers.`\n    );\n  }\n\n  Log.log(`Exporting with Webpack...`);\n\n  // Bundle the app\n  await bundler.bundleAsync({\n    mode: options.dev ? 'development' : 'production',\n    clear: options.clear,\n  });\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,iBAAA,GAAAC,OAAA;;;;QAWsBC,cAAc,GAAdA,cAAc;AAXV,IAAAC,OAAc,GAAAF,OAAA,CAAd,cAAc;AACtB,IAAAG,MAAO,GAAAC,sBAAA,CAAAJ,OAAA,CAAP,OAAO;AAEL,IAAAK,IAAW,GAAAL,OAAA;AACe,IAAAM,8BAAsD,GAAAN,OAAA;AAChE,IAAAO,iBAAqC,GAAAP,OAAA;AACjC,IAAAQ,wBAAoD,GAAAR,OAAA;AAC/D,IAAAS,OAAoB,GAAAT,OAAA;AACtB,IAAAU,QAAqB,GAAAV,OAAA;;;;;;SAG1BC,cAAcA,CAAAU,EAAA,EAAAC,GAAA;EAAA,OAAAC,eAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,gBAAA;EAAAA,eAAA,GAAAd,iBAAA,CAA7B,WAA8BiB,WAAmB,EAAEC,OAAgB,EAAE;IAE1E,MAAM,IAAIX,8BAA6B,CAAAY,6BAAA,CAACF,WAAW,CAAC,CAACG,WAAW,EAAE;IAElE,IAAAT,QAAU,EAA4CU,UAA5C,CAACH,OAAO,CAACI,GAAG,GAAG,aAAa,GAAG,YAAY,CAAC;IACtDrB,OAAO,CAAC,WAAW,CAAC,CAACsB,IAAI,CAACN,WAAW,CAAC;IAEtC,IAAAO,UAAA,GAAgB,IAAArB,OAAS,EAAasB,SAAb,CAACR,WAAW,CAAC;MAA9BS,GAAG,GAAAF,UAAA,CAAHE,GAAG;IACX,IAAMC,gBAAgB,GAAG,IAAAnB,iBAAmB,EAAKoB,mBAAL,CAACF,GAAG,CAAC;IAEjD,IAAMG,OAAO,GAAG,IAAIpB,wBAAuB,CAAAqB,uBAAA,CAACb,WAAW,EAAEU,gBAAgB,EAAE,KAAK,CAAC;IAGjF,IAAI,CAACE,OAAO,CAACE,cAAc,EAAE,EAAE;MAC7B,MAAM,IAAIrB,OAAY,CAAAsB,YAAA,CACpB5B,MAAK,CAAA6B,OAAC,kGAAiG,CACxG;;IAGH3B,IAAG,CAAA4B,GAAA,CAACC,GAAG,CAAE,2BAA0B,CAAC;IAGpC,MAAMN,OAAO,CAACO,WAAW,CAAC;MACxBC,IAAI,EAAEnB,OAAO,CAACI,GAAG,GAAG,aAAa,GAAG,YAAY;MAChDgB,KAAK,EAAEpB,OAAO,CAACoB;KAChB,CAAC;GACH;EAAA,OAAAxB,eAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}