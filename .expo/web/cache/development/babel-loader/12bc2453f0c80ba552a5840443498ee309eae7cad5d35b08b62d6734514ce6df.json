{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.writeExpoEnvDTS = writeExpoEnvDTS;\nexports.removeExpoEnvDTS = removeExpoEnvDTS;\nvar _promises = _interopRequireDefault(require(\"fs/promises\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar template = `/// <reference types=\"expo-router/types\" />\n\n// NOTE: This file should not be edited and should be in your git ignore`;\nfunction writeExpoEnvDTS(_x) {\n  return _writeExpoEnvDTS.apply(this, arguments);\n}\nfunction _writeExpoEnvDTS() {\n  _writeExpoEnvDTS = _asyncToGenerator(function* (projectRoot) {\n    return _promises.default.writeFile(_path.default.join(projectRoot, \"expo-env.d.ts\"), template);\n  });\n  return _writeExpoEnvDTS.apply(this, arguments);\n}\nfunction removeExpoEnvDTS(_x2) {\n  return _removeExpoEnvDTS.apply(this, arguments);\n}\nfunction _removeExpoEnvDTS() {\n  _removeExpoEnvDTS = _asyncToGenerator(function* (projectRoot) {\n    return _promises.default.rm(_path.default.join(projectRoot, \"expo-env.d.ts\"), {\n      force: true\n    });\n  });\n  return _removeExpoEnvDTS.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","writeExpoEnvDTS","removeExpoEnvDTS","_promises","_interopRequireDefault","_path","template","_x","_writeExpoEnvDTS","apply","arguments","projectRoot","default","writeFile","join","_x2","_removeExpoEnvDTS","rm","force"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\type-generation\\expo-env.ts"],"sourcesContent":["import fs from 'fs/promises';\nimport path from 'path';\n\nconst template = `/// <reference types=\"expo-router/types\" />\n\n// NOTE: This file should not be edited and should be in your git ignore`;\n\nexport async function writeExpoEnvDTS(projectRoot: string) {\n  return fs.writeFile(path.join(projectRoot, 'expo-env.d.ts'), template);\n}\n\nexport async function removeExpoEnvDTS(projectRoot: string) {\n  // Force removal of expo-env.d.ts - Ignore any errors if the file does not exist\n  return fs.rm(path.join(projectRoot, 'expo-env.d.ts'), { force: true });\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,iBAAA,GAAAC,OAAA;;;;QAOsBC,eAAe,GAAfA,eAAe;QAIfC,gBAAgB,GAAhBA,gBAAgB;AAXvB,IAAAC,SAAa,GAAAC,sBAAA,CAAAJ,OAAA,CAAb,aAAa;AACX,IAAAK,KAAM,GAAAD,sBAAA,CAAAJ,OAAA,CAAN,MAAM;;;;;;AAEvB,IAAMM,QAAQ,GAAI;;yEAEuD;AAAC,SAEpDL,eAAeA,CAAAM,EAAA;EAAA,OAAAC,gBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,iBAAA;EAAAA,gBAAA,GAAAT,iBAAA,CAA9B,WAA+BY,WAAmB,EAAE;IACzD,OAAOR,SAAE,CAAAS,OAAA,CAACC,SAAS,CAACR,KAAI,CAAAO,OAAA,CAACE,IAAI,CAACH,WAAW,EAAE,eAAe,CAAC,EAAEL,QAAQ,CAAC;GACvE;EAAA,OAAAE,gBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAEqBR,gBAAgBA,CAAAa,GAAA;EAAA,OAAAC,iBAAA,CAAAP,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAM,kBAAA;EAAAA,iBAAA,GAAAjB,iBAAA,CAA/B,WAAgCY,WAAmB,EAAE;IAE1D,OAAOR,SAAE,CAAAS,OAAA,CAACK,EAAE,CAACZ,KAAI,CAAAO,OAAA,CAACE,IAAI,CAACH,WAAW,EAAE,eAAe,CAAC,EAAE;MAAEO,KAAK,EAAE;KAAM,CAAC;GACvE;EAAA,OAAAF,iBAAA,CAAAP,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}