{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getProjectDevelopmentCertificateAsync = getProjectDevelopmentCertificateAsync;\nvar _errors = require(\"../utils/errors\");\nvar _client = require(\"./rest/client\");\nfunction getProjectDevelopmentCertificateAsync(_x, _x2) {\n  return _getProjectDevelopmentCertificateAsync.apply(this, arguments);\n}\nfunction _getProjectDevelopmentCertificateAsync() {\n  _getProjectDevelopmentCertificateAsync = _asyncToGenerator(function* (easProjectId, csrPEM) {\n    var response = yield (0, _client).fetchAsync(`projects/${encodeURIComponent(easProjectId)}/development-certificates`, {\n      method: \"POST\",\n      body: JSON.stringify({\n        csrPEM: csrPEM\n      })\n    });\n    if (!response.ok) {\n      throw new _errors.CommandError(\"API\", `Unexpected error from Expo servers: ${response.statusText}.`);\n    }\n    var buffer = yield response.buffer();\n    return buffer.toString(\"utf8\");\n  });\n  return _getProjectDevelopmentCertificateAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","getProjectDevelopmentCertificateAsync","_errors","_client","_x","_x2","_getProjectDevelopmentCertificateAsync","apply","arguments","easProjectId","csrPEM","response","fetchAsync","encodeURIComponent","method","body","JSON","stringify","ok","CommandError","statusText","buffer","toString"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\api\\getProjectDevelopmentCertificate.ts"],"sourcesContent":["import { CommandError } from '../utils/errors';\nimport { fetchAsync } from './rest/client';\n\nexport async function getProjectDevelopmentCertificateAsync(\n  easProjectId: string,\n  csrPEM: string\n): Promise<string> {\n  const response = await fetchAsync(\n    `projects/${encodeURIComponent(easProjectId)}/development-certificates`,\n    {\n      method: 'POST',\n      body: JSON.stringify({\n        csrPEM,\n      }),\n    }\n  );\n  if (!response.ok) {\n    throw new CommandError('API', `Unexpected error from Expo servers: ${response.statusText}.`);\n  }\n  const buffer = await response.buffer();\n  return buffer.toString('utf8');\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,iBAAA,GAAAC,OAAA;;;;QAGsBC,qCAAqC,GAArCA,qCAAqC;AAH9B,IAAAC,OAAiB,GAAAF,OAAA;AACnB,IAAAG,OAAe,GAAAH,OAAA;AAAA,SAEpBC,qCAAqCA,CAAAG,EAAA,EAAAC,GAAA;EAAA,OAAAC,sCAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,uCAAA;EAAAA,sCAAA,GAAAP,iBAAA,CAApD,WACLU,YAAoB,EACpBC,MAAc,EACG;IACjB,IAAMC,QAAQ,SAAS,IAAAR,OAAU,EAQhCS,UARgC,CAC9B,YAAWC,kBAAkB,CAACJ,YAAY,CAAE,2BAA0B,EACvE;MACEK,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBP,MAAM,EAANA;OACD;KACF,CACF;IACD,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIhB,OAAY,CAAAiB,YAAA,CAAC,KAAK,EAAG,uCAAsCR,QAAQ,CAACS,UAAW,GAAE,CAAC;;IAE9F,IAAMC,MAAM,SAASV,QAAQ,CAACU,MAAM,EAAE;IACtC,OAAOA,MAAM,CAACC,QAAQ,CAAC,MAAM,CAAC;GAC/B;EAAA,OAAAhB,sCAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}