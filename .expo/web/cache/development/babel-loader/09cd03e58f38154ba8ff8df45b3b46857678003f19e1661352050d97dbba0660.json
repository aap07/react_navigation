{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = throwIfNonAllowedProtocol;\nvar ALLOWED_PROTOCOLS = ['http:', 'https:', 'devtools:', 'flipper:'];\nfunction throwIfNonAllowedProtocol(url) {\n  var _url = new URL(url);\n  var urlProtocol = _url.protocol;\n  if (!ALLOWED_PROTOCOLS.includes(urlProtocol)) {\n    throw new Error(`Invalid url protocol ${urlProtocol}.\\nAllowed protocols: ${ALLOWED_PROTOCOLS.join(', ')}`);\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","default","throwIfNonAllowedProtocol","ALLOWED_PROTOCOLS","url","_url","URL","urlProtocol","protocol","includes","Error","join"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-tools/build/throwIfNonAllowedProtocol.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = throwIfNonAllowedProtocol;\n/**\n * Check if a url uses an allowed protocol\n */\n\nconst ALLOWED_PROTOCOLS = ['http:', 'https:', 'devtools:', 'flipper:'];\nfunction throwIfNonAllowedProtocol(url) {\n  const _url = new URL(url);\n  const urlProtocol = _url.protocol;\n  if (!ALLOWED_PROTOCOLS.includes(urlProtocol)) {\n    throw new Error(`Invalid url protocol ${urlProtocol}.\\nAllowed protocols: ${ALLOWED_PROTOCOLS.join(', ')}`);\n  }\n}\n\n//# sourceMappingURL=throwIfNonAllowedProtocol.ts.map"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAGC,yBAAyB;AAK3C,IAAMC,iBAAiB,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,WAAW,EAAE,UAAU,CAAC;AACtE,SAASD,yBAAyBA,CAACE,GAAG,EAAE;EACtC,IAAMC,IAAI,GAAG,IAAIC,GAAG,CAACF,GAAG,CAAC;EACzB,IAAMG,WAAW,GAAGF,IAAI,CAACG,QAAQ;EACjC,IAAI,CAACL,iBAAiB,CAACM,QAAQ,CAACF,WAAW,CAAC,EAAE;IAC5C,MAAM,IAAIG,KAAK,CAAE,wBAAuBH,WAAY,yBAAwBJ,iBAAiB,CAACQ,IAAI,CAAC,IAAI,CAAE,EAAC,CAAC;EAC7G;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}