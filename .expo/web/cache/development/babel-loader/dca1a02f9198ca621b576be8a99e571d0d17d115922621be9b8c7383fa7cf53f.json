{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.HammerGestures = exports.Gestures = void 0;\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _EnableNewWebImplementation = require(\"./EnableNewWebImplementation\");\nvar _InteractionManager = _interopRequireDefault(require(\"./web/tools/InteractionManager\"));\nvar _NodeManager = _interopRequireDefault(require(\"./web/tools/NodeManager\"));\nvar _PanGestureHandler = _interopRequireDefault(require(\"./web/handlers/PanGestureHandler\"));\nvar _TapGestureHandler = _interopRequireDefault(require(\"./web/handlers/TapGestureHandler\"));\nvar _LongPressGestureHandler = _interopRequireDefault(require(\"./web/handlers/LongPressGestureHandler\"));\nvar _PinchGestureHandler = _interopRequireDefault(require(\"./web/handlers/PinchGestureHandler\"));\nvar _RotationGestureHandler = _interopRequireDefault(require(\"./web/handlers/RotationGestureHandler\"));\nvar _FlingGestureHandler = _interopRequireDefault(require(\"./web/handlers/FlingGestureHandler\"));\nvar _NativeViewGestureHandler = _interopRequireDefault(require(\"./web/handlers/NativeViewGestureHandler\"));\nvar _ManualGestureHandler = _interopRequireDefault(require(\"./web/handlers/ManualGestureHandler\"));\nvar HammerNodeManager = _interopRequireWildcard(require(\"./web_hammer/NodeManager\"));\nvar _NativeViewGestureHandler2 = _interopRequireDefault(require(\"./web_hammer/NativeViewGestureHandler\"));\nvar _PanGestureHandler2 = _interopRequireDefault(require(\"./web_hammer/PanGestureHandler\"));\nvar _TapGestureHandler2 = _interopRequireDefault(require(\"./web_hammer/TapGestureHandler\"));\nvar _LongPressGestureHandler2 = _interopRequireDefault(require(\"./web_hammer/LongPressGestureHandler\"));\nvar _PinchGestureHandler2 = _interopRequireDefault(require(\"./web_hammer/PinchGestureHandler\"));\nvar _RotationGestureHandler2 = _interopRequireDefault(require(\"./web_hammer/RotationGestureHandler\"));\nvar _FlingGestureHandler2 = _interopRequireDefault(require(\"./web_hammer/FlingGestureHandler\"));\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n  return cache;\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache();\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar Gestures = {\n  NativeViewGestureHandler: _NativeViewGestureHandler.default,\n  PanGestureHandler: _PanGestureHandler.default,\n  TapGestureHandler: _TapGestureHandler.default,\n  LongPressGestureHandler: _LongPressGestureHandler.default,\n  PinchGestureHandler: _PinchGestureHandler.default,\n  RotationGestureHandler: _RotationGestureHandler.default,\n  FlingGestureHandler: _FlingGestureHandler.default,\n  ManualGestureHandler: _ManualGestureHandler.default\n};\nexports.Gestures = Gestures;\nvar HammerGestures = {\n  NativeViewGestureHandler: _NativeViewGestureHandler2.default,\n  PanGestureHandler: _PanGestureHandler2.default,\n  TapGestureHandler: _TapGestureHandler2.default,\n  LongPressGestureHandler: _LongPressGestureHandler2.default,\n  PinchGestureHandler: _PinchGestureHandler2.default,\n  RotationGestureHandler: _RotationGestureHandler2.default,\n  FlingGestureHandler: _FlingGestureHandler2.default\n};\nexports.HammerGestures = HammerGestures;\nvar _default = {\n  handleSetJSResponder: function handleSetJSResponder(_tag, _blockNativeResponder) {},\n  handleClearJSResponder: function handleClearJSResponder() {},\n  createGestureHandler: function createGestureHandler(handlerName, handlerTag, config) {\n    if ((0, _EnableNewWebImplementation.isNewWebImplementationEnabled)()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(`react-native-gesture-handler: ${handlerName} is not supported on web.`);\n      }\n      var GestureClass = Gestures[handlerName];\n      _NodeManager.default.createGestureHandler(handlerTag, new GestureClass());\n      _InteractionManager.default.getInstance().configureInteractions(_NodeManager.default.getHandler(handlerTag), config);\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(`react-native-gesture-handler: ${handlerName} is not supported on web.`);\n      }\n      var _GestureClass = HammerGestures[handlerName];\n      HammerNodeManager.createGestureHandler(handlerTag, new _GestureClass());\n    }\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler: function attachGestureHandler(handlerTag, newView, _actionType, propsRef) {\n    if (!(newView instanceof HTMLElement || newView instanceof _react.default.Component)) {\n      return;\n    }\n    if ((0, _EnableNewWebImplementation.isNewWebImplementationEnabled)()) {\n      _NodeManager.default.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler: function updateGestureHandler(handlerTag, newConfig) {\n    if ((0, _EnableNewWebImplementation.isNewWebImplementationEnabled)()) {\n      _NodeManager.default.getHandler(handlerTag).updateGestureConfig(newConfig);\n      _InteractionManager.default.getInstance().configureInteractions(_NodeManager.default.getHandler(handlerTag), newConfig);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode: function getGestureHandlerNode(handlerTag) {\n    if ((0, _EnableNewWebImplementation.isNewWebImplementationEnabled)()) {\n      return _NodeManager.default.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler: function dropGestureHandler(handlerTag) {\n    if ((0, _EnableNewWebImplementation.isNewWebImplementationEnabled)()) {\n      _NodeManager.default.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  flushOperations: function flushOperations() {}\n};\nexports.default = _default;","map":{"version":3,"names":["_react","_interopRequireDefault","require","_EnableNewWebImplementation","_InteractionManager","_NodeManager","_PanGestureHandler","_TapGestureHandler","_LongPressGestureHandler","_PinchGestureHandler","_RotationGestureHandler","_FlingGestureHandler","_NativeViewGestureHandler","_ManualGestureHandler","HammerNodeManager","_interopRequireWildcard","_NativeViewGestureHandler2","_PanGestureHandler2","_TapGestureHandler2","_LongPressGestureHandler2","_PinchGestureHandler2","_RotationGestureHandler2","_FlingGestureHandler2","Gestures","NativeViewGestureHandler","default","PanGestureHandler","TapGestureHandler","LongPressGestureHandler","PinchGestureHandler","RotationGestureHandler","FlingGestureHandler","ManualGestureHandler","HammerGestures","handleSetJSResponder","_tag","_blockNativeResponder","handleClearJSResponder","createGestureHandler","handlerName","handlerTag","config","isNewWebImplementationEnabled","Error","GestureClass","getInstance","configureInteractions","getHandler","updateGestureHandler","attachGestureHandler","newView","_actionType","propsRef","HTMLElement","Component","init","setView","newConfig","updateGestureConfig","getGestureHandlerNode","dropGestureHandler","flushOperations"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\react-native-gesture-handler\\lib\\commonjs\\RNGestureHandlerModule.windows.ts"],"sourcesContent":["import React from 'react';\n\nimport { ActionType } from './ActionType';\nimport { isNewWebImplementationEnabled } from './EnableNewWebImplementation';\n\n//GestureHandlers\nimport InteractionManager from './web/tools/InteractionManager';\nimport NodeManager from './web/tools/NodeManager';\nimport PanGestureHandler from './web/handlers/PanGestureHandler';\nimport TapGestureHandler from './web/handlers/TapGestureHandler';\nimport LongPressGestureHandler from './web/handlers/LongPressGestureHandler';\nimport PinchGestureHandler from './web/handlers/PinchGestureHandler';\nimport RotationGestureHandler from './web/handlers/RotationGestureHandler';\nimport FlingGestureHandler from './web/handlers/FlingGestureHandler';\nimport NativeViewGestureHandler from './web/handlers/NativeViewGestureHandler';\nimport ManualGestureHandler from './web/handlers/ManualGestureHandler';\n\n//Hammer Handlers\nimport * as HammerNodeManager from './web_hammer/NodeManager';\nimport HammerNativeViewGestureHandler from './web_hammer/NativeViewGestureHandler';\nimport HammerPanGestureHandler from './web_hammer/PanGestureHandler';\nimport HammerTapGestureHandler from './web_hammer/TapGestureHandler';\nimport HammerLongPressGestureHandler from './web_hammer/LongPressGestureHandler';\nimport HammerPinchGestureHandler from './web_hammer/PinchGestureHandler';\nimport HammerRotationGestureHandler from './web_hammer/RotationGestureHandler';\nimport HammerFlingGestureHandler from './web_hammer/FlingGestureHandler';\nimport { Config } from './web/interfaces';\n\nexport const Gestures = {\n  NativeViewGestureHandler,\n  PanGestureHandler,\n  TapGestureHandler,\n  LongPressGestureHandler,\n  PinchGestureHandler,\n  RotationGestureHandler,\n  FlingGestureHandler,\n  ManualGestureHandler,\n};\n\nexport const HammerGestures = {\n  NativeViewGestureHandler: HammerNativeViewGestureHandler,\n  PanGestureHandler: HammerPanGestureHandler,\n  TapGestureHandler: HammerTapGestureHandler,\n  LongPressGestureHandler: HammerLongPressGestureHandler,\n  PinchGestureHandler: HammerPinchGestureHandler,\n  RotationGestureHandler: HammerRotationGestureHandler,\n  FlingGestureHandler: HammerFlingGestureHandler,\n};\n\nexport default {\n  handleSetJSResponder(_tag: number, _blockNativeResponder: boolean) {\n    // NO-OP\n  },\n  handleClearJSResponder() {\n    // NO-OP\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    if (isNewWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      const GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(handlerTag, new GestureClass());\n      InteractionManager.getInstance().configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        config as unknown as Config\n      );\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      // @ts-ignore If it doesn't exist, the error is thrown\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const GestureClass = HammerGestures[handlerName];\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      HammerNodeManager.createGestureHandler(handlerTag, new GestureClass());\n    }\n\n    this.updateGestureHandler(handlerTag, config as unknown as Config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    newView: any,\n    _actionType: ActionType,\n    propsRef: React.RefObject<unknown>\n  ) {\n    if (\n      !(newView instanceof HTMLElement || newView instanceof React.Component)\n    ) {\n      return;\n    }\n\n    if (isNewWebImplementationEnabled()) {\n      //@ts-ignore Types should be HTMLElement or React.Component\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      //@ts-ignore Types should be HTMLElement or React.Component\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler(handlerTag: number, newConfig: Config) {\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n\n      InteractionManager.getInstance().configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        newConfig\n      );\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    if (isNewWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler(handlerTag: number) {\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  flushOperations() {},\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}