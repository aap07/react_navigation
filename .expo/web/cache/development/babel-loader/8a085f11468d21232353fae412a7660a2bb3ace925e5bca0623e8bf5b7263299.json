{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sortDefaultDeviceToBeginningAsync = sortDefaultDeviceToBeginningAsync;\nexports.promptAppleDeviceAsync = promptAppleDeviceAsync;\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _prompts = require(\"../../../utils/prompts\");\nvar _getBestSimulator = require(\"./getBestSimulator\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction sortDefaultDeviceToBeginningAsync(_x, _x2) {\n  return _sortDefaultDeviceToBeginningAsync.apply(this, arguments);\n}\nfunction _sortDefaultDeviceToBeginningAsync() {\n  _sortDefaultDeviceToBeginningAsync = _asyncToGenerator(function* (devices, osType) {\n    var defaultId = yield (0, _getBestSimulator).getBestSimulatorAsync({\n      osType: osType\n    });\n    if (defaultId) {\n      var iterations = 0;\n      while (devices[0].udid !== defaultId && iterations < devices.length) {\n        devices.push(devices.shift());\n        iterations++;\n      }\n    }\n    return devices;\n  });\n  return _sortDefaultDeviceToBeginningAsync.apply(this, arguments);\n}\nfunction promptAppleDeviceAsync(_x3, _x4) {\n  return _promptAppleDeviceAsync.apply(this, arguments);\n}\nfunction _promptAppleDeviceAsync() {\n  _promptAppleDeviceAsync = _asyncToGenerator(function* (devices, osType) {\n    devices = yield sortDefaultDeviceToBeginningAsync(devices, osType);\n    var results = yield promptAppleDeviceInternalAsync(devices);\n    return devices.find(function (_ref) {\n      var udid = _ref.udid;\n      return results === udid;\n    });\n  });\n  return _promptAppleDeviceAsync.apply(this, arguments);\n}\nfunction promptAppleDeviceInternalAsync(_x5) {\n  return _promptAppleDeviceInternalAsync.apply(this, arguments);\n}\nfunction _promptAppleDeviceInternalAsync() {\n  _promptAppleDeviceInternalAsync = _asyncToGenerator(function* (devices) {\n    var _yield$promptAsync = yield (0, _prompts).promptAsync({\n        type: \"autocomplete\",\n        name: \"value\",\n        limit: 11,\n        message: \"Select a simulator\",\n        choices: devices.map(function (item) {\n          var isActive = item.state === \"Booted\";\n          var format = isActive ? _chalk.default.bold : function (text) {\n            return text;\n          };\n          return {\n            title: `${format(item.name)} ${_chalk.default.dim(`(${item.osVersion})`)}`,\n            value: item.udid\n          };\n        }),\n        suggest: (0, _prompts).createSelectionFilter()\n      }),\n      value = _yield$promptAsync.value;\n    return value;\n  });\n  return _promptAppleDeviceInternalAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","sortDefaultDeviceToBeginningAsync","promptAppleDeviceAsync","_chalk","_interopRequireDefault","_prompts","_getBestSimulator","_x","_x2","_sortDefaultDeviceToBeginningAsync","apply","arguments","devices","osType","defaultId","getBestSimulatorAsync","iterations","udid","length","push","shift","_x3","_x4","_promptAppleDeviceAsync","results","promptAppleDeviceInternalAsync","find","_ref","_x5","_promptAppleDeviceInternalAsync","_yield$promptAsync","promptAsync","type","name","limit","message","choices","map","item","isActive","state","format","default","bold","text","title","dim","osVersion","value","suggest","createSelectionFilter"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\platforms\\ios\\promptAppleDevice.ts"],"sourcesContent":["import chalk from 'chalk';\n\nimport { createSelectionFilter, promptAsync } from '../../../utils/prompts';\nimport { getBestSimulatorAsync } from './getBestSimulator';\nimport { Device } from './simctl';\n\n/**\n * Sort the devices so the last simulator that was opened (user's default) is the first suggested.\n *\n * @param devices list of devices to sort.\n * @param osType optional sort by operating system.\n */\nexport async function sortDefaultDeviceToBeginningAsync(\n  devices: Device[],\n  osType?: Device['osType']\n): Promise<Device[]> {\n  const defaultId = await getBestSimulatorAsync({ osType });\n  if (defaultId) {\n    let iterations = 0;\n    while (devices[0].udid !== defaultId && iterations < devices.length) {\n      devices.push(devices.shift()!);\n      iterations++;\n    }\n  }\n  return devices;\n}\n\n/** Prompt the user to select an Apple device, sorting the most likely option to the beginning. */\nexport async function promptAppleDeviceAsync(\n  devices: Device[],\n  osType?: Device['osType']\n): Promise<Device> {\n  devices = await sortDefaultDeviceToBeginningAsync(devices, osType);\n  const results = await promptAppleDeviceInternalAsync(devices);\n  return devices.find(({ udid }) => results === udid)!;\n}\n\nasync function promptAppleDeviceInternalAsync(devices: Device[]): Promise<string> {\n  // TODO: provide an option to add or download more simulators\n  // TODO: Add support for physical devices too.\n\n  const { value } = await promptAsync({\n    type: 'autocomplete',\n    name: 'value',\n    limit: 11,\n    message: 'Select a simulator',\n    choices: devices.map((item) => {\n      const isActive = item.state === 'Booted';\n      const format = isActive ? chalk.bold : (text: string) => text;\n      return {\n        title: `${format(item.name)} ${chalk.dim(`(${item.osVersion})`)}`,\n        value: item.udid,\n      };\n    }),\n    suggest: createSelectionFilter(),\n  });\n\n  return value;\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,iBAAA,GAAAC,OAAA;;;;QAYsBC,iCAAiC,GAAjCA,iCAAiC;QAgBjCC,sBAAsB,GAAtBA,sBAAsB;AA5B1B,IAAAC,MAAO,GAAAC,sBAAA,CAAAJ,OAAA,CAAP,OAAO;AAE0B,IAAAK,QAAwB,GAAAL,OAAA;AACrC,IAAAM,iBAAoB,GAAAN,OAAA;;;;;;SASpCC,iCAAiCA,CAAAM,EAAA,EAAAC,GAAA;EAAA,OAAAC,kCAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,mCAAA;EAAAA,kCAAA,GAAAV,iBAAA,CAAhD,WACLa,OAAiB,EACjBC,MAAyB,EACN;IACnB,IAAMC,SAAS,SAAS,IAAAR,iBAAqB,EAAYS,qBAAZ,CAAC;MAAEF,MAAM,EAANA;KAAQ,CAAC;IACzD,IAAIC,SAAS,EAAE;MACb,IAAIE,UAAU,GAAG,CAAC;MAClB,OAAOJ,OAAO,CAAC,CAAC,CAAC,CAACK,IAAI,KAAKH,SAAS,IAAIE,UAAU,GAAGJ,OAAO,CAACM,MAAM,EAAE;QACnEN,OAAO,CAACO,IAAI,CAACP,OAAO,CAACQ,KAAK,EAAE,CAAE;QAC9BJ,UAAU,EAAE;;;IAGhB,OAAOJ,OAAO;GACf;EAAA,OAAAH,kCAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAGqBT,sBAAsBA,CAAAmB,GAAA,EAAAC,GAAA;EAAA,OAAAC,uBAAA,CAAAb,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAY,wBAAA;EAAAA,uBAAA,GAAAxB,iBAAA,CAArC,WACLa,OAAiB,EACjBC,MAAyB,EACR;IACjBD,OAAO,SAASX,iCAAiC,CAACW,OAAO,EAAEC,MAAM,CAAC;IAClE,IAAMW,OAAO,SAASC,8BAA8B,CAACb,OAAO,CAAC;IAC7D,OAAOA,OAAO,CAACc,IAAI,CAAC,UAAAC,IAAA;MAAA,IAAGV,IAAI,GAAAU,IAAA,CAAJV,IAAI;MAAA,OAAOO,OAAO,KAAKP,IAAI;IAAA,EAAC;GACpD;EAAA,OAAAM,uBAAA,CAAAb,KAAA,OAAAC,SAAA;AAAA;AAAA,SAEcc,8BAA8BA,CAAAG,GAAA;EAAA,OAAAC,+BAAA,CAAAnB,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAkB,gCAAA;EAAAA,+BAAA,GAAA9B,iBAAA,CAA7C,WAA8Ca,OAAiB,EAAmB;IAIhF,IAAAkB,kBAAA,SAAwB,IAAAzB,QAAW,EAcjC0B,WAdiC,CAAC;QAClCC,IAAI,EAAE,cAAc;QACpBC,IAAI,EAAE,OAAO;QACbC,KAAK,EAAE,EAAE;QACTC,OAAO,EAAE,oBAAoB;QAC7BC,OAAO,EAAExB,OAAO,CAACyB,GAAG,CAAC,UAACC,IAAI,EAAK;UAC7B,IAAMC,QAAQ,GAAGD,IAAI,CAACE,KAAK,KAAK,QAAQ;UACxC,IAAMC,MAAM,GAAGF,QAAQ,GAAGpC,MAAK,CAAAuC,OAAA,CAACC,IAAI,GAAG,UAACC,IAAY;YAAA,OAAKA,IAAI;UAAA;UAC7D,OAAO;YACLC,KAAK,EAAG,GAAEJ,MAAM,CAACH,IAAI,CAACL,IAAI,CAAE,IAAG9B,MAAK,CAAAuC,OAAA,CAACI,GAAG,CAAE,IAAGR,IAAI,CAACS,SAAU,GAAE,CAAE,EAAC;YACjEC,KAAK,EAAEV,IAAI,CAACrB;WACb;SACF,CAAC;QACFgC,OAAO,EAAE,IAAA5C,QAAqB,EAAE6C,qBAAF;OAC/B,CAAC;MAdMF,KAAK,GAAAlB,kBAAA,CAALkB,KAAK;IAgBb,OAAOA,KAAK;GACb;EAAA,OAAAnB,+BAAA,CAAAnB,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}