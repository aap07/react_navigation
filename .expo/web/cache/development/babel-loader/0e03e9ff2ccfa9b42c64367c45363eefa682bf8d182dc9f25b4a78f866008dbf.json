{"ast":null,"code":"'use strict';\n\nvar Collection = require(\"../nodes/Collection.js\");\nvar identity = require(\"../nodes/identity.js\");\nvar stringify = require(\"./stringify.js\");\nvar stringifyComment = require(\"./stringifyComment.js\");\nfunction stringifyCollection(collection, ctx, options) {\n  var _ctx$inFlow;\n  var flow = (_ctx$inFlow = ctx.inFlow) != null ? _ctx$inFlow : collection.flow;\n  var stringify = flow ? stringifyFlowCollection : stringifyBlockCollection;\n  return stringify(collection, ctx, options);\n}\nfunction stringifyBlockCollection(_ref, ctx, _ref2) {\n  var comment = _ref.comment,\n    items = _ref.items;\n  var blockItemPrefix = _ref2.blockItemPrefix,\n    flowChars = _ref2.flowChars,\n    itemIndent = _ref2.itemIndent,\n    onChompKeep = _ref2.onChompKeep,\n    onComment = _ref2.onComment;\n  var indent = ctx.indent,\n    commentString = ctx.options.commentString;\n  var itemCtx = Object.assign({}, ctx, {\n    indent: itemIndent,\n    type: null\n  });\n  var chompKeep = false;\n  var lines = [];\n  var _loop = function _loop() {\n    var item = items[i];\n    var comment = null;\n    if (identity.isNode(item)) {\n      if (!chompKeep && item.spaceBefore) lines.push('');\n      addCommentBefore(ctx, lines, item.commentBefore, chompKeep);\n      if (item.comment) comment = item.comment;\n    } else if (identity.isPair(item)) {\n      var ik = identity.isNode(item.key) ? item.key : null;\n      if (ik) {\n        if (!chompKeep && ik.spaceBefore) lines.push('');\n        addCommentBefore(ctx, lines, ik.commentBefore, chompKeep);\n      }\n    }\n    chompKeep = false;\n    var str = stringify.stringify(item, itemCtx, function () {\n      return comment = null;\n    }, function () {\n      return chompKeep = true;\n    });\n    if (comment) str += stringifyComment.lineComment(str, itemIndent, commentString(comment));\n    if (chompKeep && comment) chompKeep = false;\n    lines.push(blockItemPrefix + str);\n  };\n  for (var i = 0; i < items.length; ++i) {\n    _loop();\n  }\n  var str;\n  if (lines.length === 0) {\n    str = flowChars.start + flowChars.end;\n  } else {\n    str = lines[0];\n    for (var _i = 1; _i < lines.length; ++_i) {\n      var line = lines[_i];\n      str += line ? `\\n${indent}${line}` : '\\n';\n    }\n  }\n  if (comment) {\n    str += '\\n' + stringifyComment.indentComment(commentString(comment), indent);\n    if (onComment) onComment();\n  } else if (chompKeep && onChompKeep) onChompKeep();\n  return str;\n}\nfunction stringifyFlowCollection(_ref3, ctx, _ref4) {\n  var comment = _ref3.comment,\n    items = _ref3.items;\n  var flowChars = _ref4.flowChars,\n    itemIndent = _ref4.itemIndent,\n    onComment = _ref4.onComment;\n  var indent = ctx.indent,\n    indentStep = ctx.indentStep,\n    fcPadding = ctx.flowCollectionPadding,\n    commentString = ctx.options.commentString;\n  itemIndent += indentStep;\n  var itemCtx = Object.assign({}, ctx, {\n    indent: itemIndent,\n    inFlow: true,\n    type: null\n  });\n  var reqNewline = false;\n  var linesAtValue = 0;\n  var lines = [];\n  var _loop2 = function _loop2() {\n    var item = items[i];\n    var comment = null;\n    if (identity.isNode(item)) {\n      if (item.spaceBefore) lines.push('');\n      addCommentBefore(ctx, lines, item.commentBefore, false);\n      if (item.comment) comment = item.comment;\n    } else if (identity.isPair(item)) {\n      var ik = identity.isNode(item.key) ? item.key : null;\n      if (ik) {\n        if (ik.spaceBefore) lines.push('');\n        addCommentBefore(ctx, lines, ik.commentBefore, false);\n        if (ik.comment) reqNewline = true;\n      }\n      var iv = identity.isNode(item.value) ? item.value : null;\n      if (iv) {\n        if (iv.comment) comment = iv.comment;\n        if (iv.commentBefore) reqNewline = true;\n      } else if (item.value == null && ik != null && ik.comment) {\n        comment = ik.comment;\n      }\n    }\n    if (comment) reqNewline = true;\n    var str = stringify.stringify(item, itemCtx, function () {\n      return comment = null;\n    });\n    if (i < items.length - 1) str += ',';\n    if (comment) str += stringifyComment.lineComment(str, itemIndent, commentString(comment));\n    if (!reqNewline && (lines.length > linesAtValue || str.includes('\\n'))) reqNewline = true;\n    lines.push(str);\n    linesAtValue = lines.length;\n  };\n  for (var i = 0; i < items.length; ++i) {\n    _loop2();\n  }\n  var str;\n  var start = flowChars.start,\n    end = flowChars.end;\n  if (lines.length === 0) {\n    str = start + end;\n  } else {\n    if (!reqNewline) {\n      var len = lines.reduce(function (sum, line) {\n        return sum + line.length + 2;\n      }, 2);\n      reqNewline = len > Collection.Collection.maxFlowStringSingleLineLength;\n    }\n    if (reqNewline) {\n      str = start;\n      for (var line of lines) str += line ? `\\n${indentStep}${indent}${line}` : '\\n';\n      str += `\\n${indent}${end}`;\n    } else {\n      str = `${start}${fcPadding}${lines.join(' ')}${fcPadding}${end}`;\n    }\n  }\n  if (comment) {\n    str += stringifyComment.lineComment(str, indent, commentString(comment));\n    if (onComment) onComment();\n  }\n  return str;\n}\nfunction addCommentBefore(_ref5, lines, comment, chompKeep) {\n  var indent = _ref5.indent,\n    commentString = _ref5.options.commentString;\n  if (comment && chompKeep) comment = comment.replace(/^\\n+/, '');\n  if (comment) {\n    var ic = stringifyComment.indentComment(commentString(comment), indent);\n    lines.push(ic.trimStart());\n  }\n}\nexports.stringifyCollection = stringifyCollection;","map":{"version":3,"names":["Collection","require","identity","stringify","stringifyComment","stringifyCollection","collection","ctx","options","_ctx$inFlow","flow","inFlow","stringifyFlowCollection","stringifyBlockCollection","_ref","_ref2","comment","items","blockItemPrefix","flowChars","itemIndent","onChompKeep","onComment","indent","commentString","itemCtx","Object","assign","type","chompKeep","lines","_loop","item","i","isNode","spaceBefore","push","addCommentBefore","commentBefore","isPair","ik","key","str","lineComment","length","start","end","line","indentComment","_ref3","_ref4","indentStep","fcPadding","flowCollectionPadding","reqNewline","linesAtValue","_loop2","iv","value","includes","len","reduce","sum","maxFlowStringSingleLineLength","join","_ref5","replace","ic","trimStart","exports"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/dist/stringify/stringifyCollection.js"],"sourcesContent":["'use strict';\n\nvar Collection = require('../nodes/Collection.js');\nvar identity = require('../nodes/identity.js');\nvar stringify = require('./stringify.js');\nvar stringifyComment = require('./stringifyComment.js');\n\nfunction stringifyCollection(collection, ctx, options) {\n    const flow = ctx.inFlow ?? collection.flow;\n    const stringify = flow ? stringifyFlowCollection : stringifyBlockCollection;\n    return stringify(collection, ctx, options);\n}\nfunction stringifyBlockCollection({ comment, items }, ctx, { blockItemPrefix, flowChars, itemIndent, onChompKeep, onComment }) {\n    const { indent, options: { commentString } } = ctx;\n    const itemCtx = Object.assign({}, ctx, { indent: itemIndent, type: null });\n    let chompKeep = false; // flag for the preceding node's status\n    const lines = [];\n    for (let i = 0; i < items.length; ++i) {\n        const item = items[i];\n        let comment = null;\n        if (identity.isNode(item)) {\n            if (!chompKeep && item.spaceBefore)\n                lines.push('');\n            addCommentBefore(ctx, lines, item.commentBefore, chompKeep);\n            if (item.comment)\n                comment = item.comment;\n        }\n        else if (identity.isPair(item)) {\n            const ik = identity.isNode(item.key) ? item.key : null;\n            if (ik) {\n                if (!chompKeep && ik.spaceBefore)\n                    lines.push('');\n                addCommentBefore(ctx, lines, ik.commentBefore, chompKeep);\n            }\n        }\n        chompKeep = false;\n        let str = stringify.stringify(item, itemCtx, () => (comment = null), () => (chompKeep = true));\n        if (comment)\n            str += stringifyComment.lineComment(str, itemIndent, commentString(comment));\n        if (chompKeep && comment)\n            chompKeep = false;\n        lines.push(blockItemPrefix + str);\n    }\n    let str;\n    if (lines.length === 0) {\n        str = flowChars.start + flowChars.end;\n    }\n    else {\n        str = lines[0];\n        for (let i = 1; i < lines.length; ++i) {\n            const line = lines[i];\n            str += line ? `\\n${indent}${line}` : '\\n';\n        }\n    }\n    if (comment) {\n        str += '\\n' + stringifyComment.indentComment(commentString(comment), indent);\n        if (onComment)\n            onComment();\n    }\n    else if (chompKeep && onChompKeep)\n        onChompKeep();\n    return str;\n}\nfunction stringifyFlowCollection({ comment, items }, ctx, { flowChars, itemIndent, onComment }) {\n    const { indent, indentStep, flowCollectionPadding: fcPadding, options: { commentString } } = ctx;\n    itemIndent += indentStep;\n    const itemCtx = Object.assign({}, ctx, {\n        indent: itemIndent,\n        inFlow: true,\n        type: null\n    });\n    let reqNewline = false;\n    let linesAtValue = 0;\n    const lines = [];\n    for (let i = 0; i < items.length; ++i) {\n        const item = items[i];\n        let comment = null;\n        if (identity.isNode(item)) {\n            if (item.spaceBefore)\n                lines.push('');\n            addCommentBefore(ctx, lines, item.commentBefore, false);\n            if (item.comment)\n                comment = item.comment;\n        }\n        else if (identity.isPair(item)) {\n            const ik = identity.isNode(item.key) ? item.key : null;\n            if (ik) {\n                if (ik.spaceBefore)\n                    lines.push('');\n                addCommentBefore(ctx, lines, ik.commentBefore, false);\n                if (ik.comment)\n                    reqNewline = true;\n            }\n            const iv = identity.isNode(item.value) ? item.value : null;\n            if (iv) {\n                if (iv.comment)\n                    comment = iv.comment;\n                if (iv.commentBefore)\n                    reqNewline = true;\n            }\n            else if (item.value == null && ik?.comment) {\n                comment = ik.comment;\n            }\n        }\n        if (comment)\n            reqNewline = true;\n        let str = stringify.stringify(item, itemCtx, () => (comment = null));\n        if (i < items.length - 1)\n            str += ',';\n        if (comment)\n            str += stringifyComment.lineComment(str, itemIndent, commentString(comment));\n        if (!reqNewline && (lines.length > linesAtValue || str.includes('\\n')))\n            reqNewline = true;\n        lines.push(str);\n        linesAtValue = lines.length;\n    }\n    let str;\n    const { start, end } = flowChars;\n    if (lines.length === 0) {\n        str = start + end;\n    }\n    else {\n        if (!reqNewline) {\n            const len = lines.reduce((sum, line) => sum + line.length + 2, 2);\n            reqNewline = len > Collection.Collection.maxFlowStringSingleLineLength;\n        }\n        if (reqNewline) {\n            str = start;\n            for (const line of lines)\n                str += line ? `\\n${indentStep}${indent}${line}` : '\\n';\n            str += `\\n${indent}${end}`;\n        }\n        else {\n            str = `${start}${fcPadding}${lines.join(' ')}${fcPadding}${end}`;\n        }\n    }\n    if (comment) {\n        str += stringifyComment.lineComment(str, indent, commentString(comment));\n        if (onComment)\n            onComment();\n    }\n    return str;\n}\nfunction addCommentBefore({ indent, options: { commentString } }, lines, comment, chompKeep) {\n    if (comment && chompKeep)\n        comment = comment.replace(/^\\n+/, '');\n    if (comment) {\n        const ic = stringifyComment.indentComment(commentString(comment), indent);\n        lines.push(ic.trimStart()); // Avoid double indent on first line\n    }\n}\n\nexports.stringifyCollection = stringifyCollection;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}