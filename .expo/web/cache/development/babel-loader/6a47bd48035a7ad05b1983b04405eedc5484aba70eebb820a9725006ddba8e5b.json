{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.iosBuildOptions = exports.default = void 0;\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function _chalk() {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function _cliTools() {\n    return data;\n  };\n  return data;\n}\nvar _buildProject = require(\"./buildProject\");\nvar _getDestinationSimulator = require(\"../../tools/getDestinationSimulator\");\nvar _selectFromInteractiveMode = require(\"../../tools/selectFromInteractiveMode\");\nvar _getProjectInfo = require(\"../../tools/getProjectInfo\");\nvar _checkIfConfigurationExists = require(\"../../tools/checkIfConfigurationExists\");\nvar _getConfigurationScheme = require(\"../../tools/getConfigurationScheme\");\nvar _listIOSDevices = _interopRequireDefault(require(\"../../tools/listIOSDevices\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction buildIOS(_x, _x2, _x3) {\n  return _buildIOS.apply(this, arguments);\n}\nfunction _buildIOS() {\n  _buildIOS = _asyncToGenerator(function* (_, ctx, args) {\n    if (!ctx.project.ios) {\n      throw new (_cliTools().CLIError)('iOS project folder not found. Are you sure this is a React Native project?');\n    }\n    var _ctx$project$ios = ctx.project.ios,\n      xcodeProject = _ctx$project$ios.xcodeProject,\n      sourceDir = _ctx$project$ios.sourceDir;\n    if (!xcodeProject) {\n      throw new (_cliTools().CLIError)(`Could not find Xcode project files in \"${sourceDir}\" folder`);\n    }\n    process.chdir(sourceDir);\n    if (args.configuration) {\n      _cliTools().logger.warn('--configuration has been deprecated. Use --mode instead.');\n      _cliTools().logger.warn('Parameters were automatically reassigned to --mode on this run.');\n      args.mode = args.configuration;\n    }\n    var projectInfo = (0, _getProjectInfo.getProjectInfo)();\n    if (args.mode) {\n      (0, _checkIfConfigurationExists.checkIfConfigurationExists)(projectInfo, args.mode);\n    }\n    var inferredSchemeName = _path().default.basename(xcodeProject.name, _path().default.extname(xcodeProject.name));\n    var scheme = args.scheme || inferredSchemeName;\n    var mode = args.mode;\n    if (args.interactive) {\n      var selection = yield (0, _selectFromInteractiveMode.selectFromInteractiveMode)({\n        scheme: scheme,\n        mode: mode\n      });\n      if (selection.scheme) {\n        scheme = selection.scheme;\n      }\n      if (selection.mode) {\n        mode = selection.mode;\n      }\n    }\n    var modifiedArgs = _objectSpread(_objectSpread({}, args), {}, {\n      scheme: scheme,\n      mode: mode\n    });\n    args.mode = (0, _getConfigurationScheme.getConfigurationScheme)({\n      scheme: args.scheme,\n      mode: args.mode\n    }, sourceDir);\n    _cliTools().logger.info(`Found Xcode ${xcodeProject.isWorkspace ? 'workspace' : 'project'} \"${_chalk().default.bold(xcodeProject.name)}\"`);\n    var extendedArgs = _objectSpread(_objectSpread({}, modifiedArgs), {}, {\n      packager: false\n    });\n    if (!args.device && !args.udid) {\n      if (!args.simulator) {\n        return (0, _buildProject.buildProject)(xcodeProject, undefined, scheme, extendedArgs);\n      }\n      var fallbackSimulators = ['iPhone 14', 'iPhone 13', 'iPhone 12', 'iPhone 11'];\n      var selectedSimulator = (0, _getDestinationSimulator.getDestinationSimulator)(args, fallbackSimulators);\n      return (0, _buildProject.buildProject)(xcodeProject, selectedSimulator.udid, scheme, extendedArgs);\n    }\n    if (args.device && args.udid) {\n      return _cliTools().logger.error('The `device` and `udid` options are mutually exclusive.');\n    }\n    var devices = yield (0, _listIOSDevices.default)();\n    if (args.udid) {\n      var device = devices.find(function (d) {\n        return d.udid === args.udid;\n      });\n      if (!device) {\n        return _cliTools().logger.error(`Could not find a device with udid: \"${_chalk().default.bold(args.udid)}\". ${printFoundDevices(devices)}`);\n      }\n      return (0, _buildProject.buildProject)(xcodeProject, device.udid, scheme, extendedArgs);\n    } else {\n      var physicalDevices = devices.filter(function (d) {\n        return d.type !== 'simulator';\n      });\n      var _device = matchingDevice(physicalDevices, args.device);\n      if (_device) {\n        return (0, _buildProject.buildProject)(xcodeProject, _device.udid, scheme, extendedArgs);\n      }\n    }\n  });\n  return _buildIOS.apply(this, arguments);\n}\nfunction matchingDevice(devices, deviceName) {\n  if (deviceName === true) {\n    var firstIOSDevice = devices.find(function (d) {\n      return d.type === 'device';\n    });\n    if (firstIOSDevice) {\n      _cliTools().logger.info(`Using first available device named \"${_chalk().default.bold(firstIOSDevice.name)}\" due to lack of name supplied.`);\n      return firstIOSDevice;\n    } else {\n      _cliTools().logger.error('No iOS devices connected.');\n      return undefined;\n    }\n  }\n  var deviceByName = devices.find(function (device) {\n    return device.name === deviceName || formattedDeviceName(device) === deviceName;\n  });\n  if (!deviceByName) {\n    _cliTools().logger.error(`Could not find a device named: \"${_chalk().default.bold(String(deviceName))}\". ${printFoundDevices(devices)}`);\n  }\n  return deviceByName;\n}\nfunction formattedDeviceName(simulator) {\n  return simulator.version ? `${simulator.name} (${simulator.version})` : simulator.name;\n}\nfunction printFoundDevices(devices) {\n  return ['Available devices:'].concat(_toConsumableArray(devices.map(function (device) {\n    return `  - ${device.name} (${device.udid})`;\n  }))).join('\\n');\n}\nvar iosBuildOptions = [{\n  name: '--simulator <string>',\n  description: 'Explicitly set simulator to use. Optionally include iOS version between ' + 'parenthesis at the end to match an exact version: \"iPhone 6 (10.0)\"'\n}, {\n  name: '--mode <string>',\n  description: 'Explicitly set the scheme configuration to use. This option is case sensitive.'\n}, {\n  name: '--configuration <string>',\n  description: '[Deprecated] Explicitly set the scheme configuration to use'\n}, {\n  name: '--scheme <string>',\n  description: 'Explicitly set Xcode scheme to use'\n}, {\n  name: '--device [string]',\n  description: 'Explicitly set device to use by name.  The value is not required if you have a single device connected.'\n}, {\n  name: '--destination <string>',\n  description: 'Explicitly extend distination e.g. \"arch=x86_64\"'\n}, {\n  name: '--udid <string>',\n  description: 'Explicitly set device to use by udid'\n}, {\n  name: '--verbose',\n  description: 'Do not use xcbeautify or xcpretty even if installed'\n}, {\n  name: '--port <number>',\n  default: process.env.RCT_METRO_PORT || 8081,\n  parse: Number\n}, {\n  name: '--terminal <string>',\n  description: 'Launches the Metro Bundler in a new window using the specified terminal path.',\n  default: (0, _cliTools().getDefaultUserTerminal)()\n}, {\n  name: '--xcconfig [string]',\n  description: 'Explicitly set xcconfig to use'\n}, {\n  name: '--buildFolder <string>',\n  description: 'Location for iOS build artifacts. Corresponds to Xcode\\'s \"-derivedDataPath\".'\n}, {\n  name: '--extra-params <string>',\n  description: 'Custom params that will be passed to xcodebuild command.',\n  parse: function parse(val) {\n    return val.split(' ');\n  }\n}];\nexports.iosBuildOptions = iosBuildOptions;\nvar _default = {\n  name: 'build-ios',\n  description: 'builds your app on iOS simulator',\n  func: buildIOS,\n  examples: [{\n    desc: 'Build the app for the IOS simulator',\n    cmd: 'react-native build-ios'\n  }, {\n    desc: 'Build the app for all IOS devices',\n    cmd: 'react-native build-ios --mode \"Release\"'\n  }, {\n    desc: 'Build the app for a specific IOS device',\n    cmd: 'react-native build-ios --simulator \"IPhone 11\"'\n  }],\n  options: [].concat(iosBuildOptions, [{\n    name: '--interactive',\n    description: 'Explicitly select which scheme and configuration to use before running a build'\n  }])\n};\nexports.default = _default;","map":{"version":3,"names":["_defineProperty","require","_toConsumableArray","_asyncToGenerator","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","exports","value","iosBuildOptions","default","_path","data","_interopRequireDefault","_chalk","_cliTools","_buildProject","_getDestinationSimulator","_selectFromInteractiveMode","_getProjectInfo","_checkIfConfigurationExists","_getConfigurationScheme","_listIOSDevices","obj","__esModule","buildIOS","_x","_x2","_x3","_buildIOS","_","ctx","args","project","ios","CLIError","_ctx$project$ios","xcodeProject","sourceDir","process","chdir","configuration","logger","warn","mode","projectInfo","getProjectInfo","checkIfConfigurationExists","inferredSchemeName","basename","name","extname","scheme","interactive","selection","selectFromInteractiveMode","modifiedArgs","getConfigurationScheme","info","isWorkspace","bold","extendedArgs","packager","device","udid","simulator","buildProject","undefined","fallbackSimulators","selectedSimulator","getDestinationSimulator","error","devices","find","d","printFoundDevices","physicalDevices","type","matchingDevice","deviceName","firstIOSDevice","deviceByName","formattedDeviceName","String","version","concat","map","join","description","env","RCT_METRO_PORT","parse","Number","getDefaultUserTerminal","val","split","_default","func","examples","desc","cmd","options"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-platform-ios/build/commands/buildIOS/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.iosBuildOptions = exports.default = void 0;\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n  _path = function () {\n    return data;\n  };\n  return data;\n}\nfunction _chalk() {\n  const data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function () {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function () {\n    return data;\n  };\n  return data;\n}\nvar _buildProject = require(\"./buildProject\");\nvar _getDestinationSimulator = require(\"../../tools/getDestinationSimulator\");\nvar _selectFromInteractiveMode = require(\"../../tools/selectFromInteractiveMode\");\nvar _getProjectInfo = require(\"../../tools/getProjectInfo\");\nvar _checkIfConfigurationExists = require(\"../../tools/checkIfConfigurationExists\");\nvar _getConfigurationScheme = require(\"../../tools/getConfigurationScheme\");\nvar _listIOSDevices = _interopRequireDefault(require(\"../../tools/listIOSDevices\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nasync function buildIOS(_, ctx, args) {\n  if (!ctx.project.ios) {\n    throw new (_cliTools().CLIError)('iOS project folder not found. Are you sure this is a React Native project?');\n  }\n  const {\n    xcodeProject,\n    sourceDir\n  } = ctx.project.ios;\n  if (!xcodeProject) {\n    throw new (_cliTools().CLIError)(`Could not find Xcode project files in \"${sourceDir}\" folder`);\n  }\n  process.chdir(sourceDir);\n  if (args.configuration) {\n    _cliTools().logger.warn('--configuration has been deprecated. Use --mode instead.');\n    _cliTools().logger.warn('Parameters were automatically reassigned to --mode on this run.');\n    args.mode = args.configuration;\n  }\n  const projectInfo = (0, _getProjectInfo.getProjectInfo)();\n  if (args.mode) {\n    (0, _checkIfConfigurationExists.checkIfConfigurationExists)(projectInfo, args.mode);\n  }\n  const inferredSchemeName = _path().default.basename(xcodeProject.name, _path().default.extname(xcodeProject.name));\n  let scheme = args.scheme || inferredSchemeName;\n  let mode = args.mode;\n  if (args.interactive) {\n    const selection = await (0, _selectFromInteractiveMode.selectFromInteractiveMode)({\n      scheme,\n      mode\n    });\n    if (selection.scheme) {\n      scheme = selection.scheme;\n    }\n    if (selection.mode) {\n      mode = selection.mode;\n    }\n  }\n  const modifiedArgs = {\n    ...args,\n    scheme,\n    mode\n  };\n  args.mode = (0, _getConfigurationScheme.getConfigurationScheme)({\n    scheme: args.scheme,\n    mode: args.mode\n  }, sourceDir);\n  _cliTools().logger.info(`Found Xcode ${xcodeProject.isWorkspace ? 'workspace' : 'project'} \"${_chalk().default.bold(xcodeProject.name)}\"`);\n  const extendedArgs = {\n    ...modifiedArgs,\n    packager: false\n  };\n\n  // // No need to load all available devices\n  if (!args.device && !args.udid) {\n    if (!args.simulator) {\n      return (0, _buildProject.buildProject)(xcodeProject, undefined, scheme, extendedArgs);\n    }\n\n    /**\n     * If provided simulator does not exist, try simulators in following order\n     * - iPhone 14\n     * - iPhone 13\n     * - iPhone 12\n     * - iPhone 11\n     */\n    const fallbackSimulators = ['iPhone 14', 'iPhone 13', 'iPhone 12', 'iPhone 11'];\n    const selectedSimulator = (0, _getDestinationSimulator.getDestinationSimulator)(args, fallbackSimulators);\n    return (0, _buildProject.buildProject)(xcodeProject, selectedSimulator.udid, scheme, extendedArgs);\n  }\n  if (args.device && args.udid) {\n    return _cliTools().logger.error('The `device` and `udid` options are mutually exclusive.');\n  }\n  const devices = await (0, _listIOSDevices.default)();\n  if (args.udid) {\n    const device = devices.find(d => d.udid === args.udid);\n    if (!device) {\n      return _cliTools().logger.error(`Could not find a device with udid: \"${_chalk().default.bold(args.udid)}\". ${printFoundDevices(devices)}`);\n    }\n    return (0, _buildProject.buildProject)(xcodeProject, device.udid, scheme, extendedArgs);\n  } else {\n    const physicalDevices = devices.filter(d => d.type !== 'simulator');\n    const device = matchingDevice(physicalDevices, args.device);\n    if (device) {\n      return (0, _buildProject.buildProject)(xcodeProject, device.udid, scheme, extendedArgs);\n    }\n  }\n}\nfunction matchingDevice(devices, deviceName) {\n  if (deviceName === true) {\n    const firstIOSDevice = devices.find(d => d.type === 'device');\n    if (firstIOSDevice) {\n      _cliTools().logger.info(`Using first available device named \"${_chalk().default.bold(firstIOSDevice.name)}\" due to lack of name supplied.`);\n      return firstIOSDevice;\n    } else {\n      _cliTools().logger.error('No iOS devices connected.');\n      return undefined;\n    }\n  }\n  const deviceByName = devices.find(device => device.name === deviceName || formattedDeviceName(device) === deviceName);\n  if (!deviceByName) {\n    _cliTools().logger.error(`Could not find a device named: \"${_chalk().default.bold(String(deviceName))}\". ${printFoundDevices(devices)}`);\n  }\n  return deviceByName;\n}\nfunction formattedDeviceName(simulator) {\n  return simulator.version ? `${simulator.name} (${simulator.version})` : simulator.name;\n}\nfunction printFoundDevices(devices) {\n  return ['Available devices:', ...devices.map(device => `  - ${device.name} (${device.udid})`)].join('\\n');\n}\nconst iosBuildOptions = [{\n  name: '--simulator <string>',\n  description: 'Explicitly set simulator to use. Optionally include iOS version between ' + 'parenthesis at the end to match an exact version: \"iPhone 6 (10.0)\"'\n}, {\n  name: '--mode <string>',\n  description: 'Explicitly set the scheme configuration to use. This option is case sensitive.'\n}, {\n  name: '--configuration <string>',\n  description: '[Deprecated] Explicitly set the scheme configuration to use'\n}, {\n  name: '--scheme <string>',\n  description: 'Explicitly set Xcode scheme to use'\n}, {\n  name: '--device [string]',\n  description: 'Explicitly set device to use by name.  The value is not required if you have a single device connected.'\n}, {\n  name: '--destination <string>',\n  description: 'Explicitly extend distination e.g. \"arch=x86_64\"'\n}, {\n  name: '--udid <string>',\n  description: 'Explicitly set device to use by udid'\n}, {\n  name: '--verbose',\n  description: 'Do not use xcbeautify or xcpretty even if installed'\n}, {\n  name: '--port <number>',\n  default: process.env.RCT_METRO_PORT || 8081,\n  parse: Number\n}, {\n  name: '--terminal <string>',\n  description: 'Launches the Metro Bundler in a new window using the specified terminal path.',\n  default: (0, _cliTools().getDefaultUserTerminal)()\n}, {\n  name: '--xcconfig [string]',\n  description: 'Explicitly set xcconfig to use'\n}, {\n  name: '--buildFolder <string>',\n  description: 'Location for iOS build artifacts. Corresponds to Xcode\\'s \"-derivedDataPath\".'\n}, {\n  name: '--extra-params <string>',\n  description: 'Custom params that will be passed to xcodebuild command.',\n  parse: val => val.split(' ')\n}];\nexports.iosBuildOptions = iosBuildOptions;\nvar _default = {\n  name: 'build-ios',\n  description: 'builds your app on iOS simulator',\n  func: buildIOS,\n  examples: [{\n    desc: 'Build the app for the IOS simulator',\n    cmd: 'react-native build-ios'\n  }, {\n    desc: 'Build the app for all IOS devices',\n    cmd: 'react-native build-ios --mode \"Release\"'\n  }, {\n    desc: 'Build the app for a specific IOS device',\n    cmd: 'react-native build-ios --simulator \"IPhone 11\"'\n  }],\n  options: [...iosBuildOptions, {\n    name: '--interactive',\n    description: 'Explicitly select which scheme and configuration to use before running a build'\n  }]\n};\nexports.default = _default;\n\n//# sourceMappingURL=index.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}