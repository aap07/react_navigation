{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/dist/nodes/identity.d.ts"],"sourcesContent":["import type { Document } from '../doc/Document.js';\nimport type { Alias } from './Alias.js';\nimport type { Node } from './Node.js';\nimport type { Pair } from './Pair.js';\nimport type { Scalar } from './Scalar.js';\nimport type { YAMLMap } from './YAMLMap.js';\nimport type { YAMLSeq } from './YAMLSeq.js';\nexport declare const ALIAS: unique symbol;\nexport declare const DOC: unique symbol;\nexport declare const MAP: unique symbol;\nexport declare const PAIR: unique symbol;\nexport declare const SCALAR: unique symbol;\nexport declare const SEQ: unique symbol;\nexport declare const NODE_TYPE: unique symbol;\nexport declare const isAlias: (node: any) => node is Alias;\nexport declare const isDocument: <T extends Node = Node>(node: any) => node is Document<T, true>;\nexport declare const isMap: <K = unknown, V = unknown>(node: any) => node is YAMLMap<K, V>;\nexport declare const isPair: <K = unknown, V = unknown>(node: any) => node is Pair<K, V>;\nexport declare const isScalar: <T = unknown>(node: any) => node is Scalar<T>;\nexport declare const isSeq: <T = unknown>(node: any) => node is YAMLSeq<T>;\nexport declare function isCollection<K = unknown, V = unknown>(node: any): node is YAMLMap<K, V> | YAMLSeq<V>;\nexport declare function isNode<T = unknown>(node: any): node is Node<T>;\nexport declare const hasAnchor: <K = unknown, V = unknown>(node: unknown) => node is Scalar<V> | YAMLMap<K, V> | YAMLSeq<V>;\n"],"mappings":""},"metadata":{},"sourceType":"script","externalDependencies":[]}