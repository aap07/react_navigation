{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/package-manager/build/PackageManager.d.ts"],"sourcesContent":["import { SpawnOptions, SpawnPromise, SpawnResult } from '@expo/spawn-async';\nimport { PendingSpawnPromise } from './utils/spawn';\nexport interface PackageManagerOptions extends SpawnOptions {\n    /**\n     * If the package manager should run in silent mode.\n     * Note, this will hide possible error output from executed commands.\n     * When running in silent mode, make sure you handle them properly.\n     */\n    silent?: boolean;\n    /**\n     * The logging method used to communicate the command which is executed.\n     * Without `silent`, this defaults to `console.log`.\n     * When `silent` is set to `true`, this defaults to a no-op.\n     */\n    log?: (...args: any[]) => void;\n}\nexport interface PackageManager {\n    /** The options for this package manager */\n    readonly options: PackageManagerOptions;\n    /** Run any command using the package manager */\n    runAsync(command: string[]): SpawnPromise<SpawnResult>;\n    /** Get the version of the used package manager */\n    versionAsync(): Promise<string>;\n    /** Get a single configuration property from the package manager */\n    getConfigAsync(key: string): Promise<string>;\n    /** Remove the lock file within the project, if any */\n    removeLockfileAsync(): Promise<void>;\n    /** Get the workspace root package manager, if this project is within a workspace/monorepo */\n    workspaceRoot(): PackageManager | null;\n    /** Install all current dependencies using the package manager */\n    installAsync(): Promise<SpawnResult> | SpawnPromise<SpawnResult> | PendingSpawnPromise<SpawnResult>;\n    /** Uninstall all current dependencies by removing the folder containing the packages */\n    uninstallAsync(): Promise<void>;\n    /** Add a normal dependency to the project */\n    addAsync(namesOrFlags: string[]): SpawnPromise<SpawnResult> | PendingSpawnPromise<SpawnResult>;\n    /** Add a development dependency to the project */\n    addDevAsync(namesOrFlags: string[]): SpawnPromise<SpawnResult> | PendingSpawnPromise<SpawnResult>;\n    /** Add a global dependency to the environment */\n    addGlobalAsync(namesOrFlags: string[]): SpawnPromise<SpawnResult> | PendingSpawnPromise<SpawnResult>;\n    /** Remove a normal dependency from the project */\n    removeAsync(namesOrFlags: string[]): SpawnPromise<SpawnResult> | PendingSpawnPromise<SpawnResult>;\n    /** Remove a development dependency from the project */\n    removeDevAsync(namesOrFlags: string[]): SpawnPromise<SpawnResult> | PendingSpawnPromise<SpawnResult>;\n    /** Remove a global dependency from the environments */\n    removeGlobalAsync(namesOrFlags: string[]): SpawnPromise<SpawnResult> | PendingSpawnPromise<SpawnResult>;\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}