{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createEntitlementsPlugin = createEntitlementsPlugin;\nexports.createInfoPlistPlugin = createInfoPlistPlugin;\nexports.createInfoPlistPluginWithPropertyGuard = createInfoPlistPluginWithPropertyGuard;\nexports.withXcodeProject = exports.withPodfileProperties = exports.withInfoPlist = exports.withExpoPlist = exports.withEntitlementsPlist = exports.withAppDelegate = void 0;\nfunction _obj() {\n  var data = require(\"../utils/obj\");\n  _obj = function _obj() {\n    return data;\n  };\n  return data;\n}\nfunction _warnings() {\n  var data = require(\"../utils/warnings\");\n  _warnings = function _warnings() {\n    return data;\n  };\n  return data;\n}\nfunction _withMod() {\n  var data = require(\"./withMod\");\n  _withMod = function _withMod() {\n    return data;\n  };\n  return data;\n}\nfunction createInfoPlistPlugin(action, name) {\n  var withUnknown = function withUnknown(config) {\n    return withInfoPlist(config, function () {\n      var _ref = _asyncToGenerator(function* (config) {\n        config.modResults = yield action(config, config.modResults);\n        return config;\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  };\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name\n    });\n  }\n  return withUnknown;\n}\nfunction createInfoPlistPluginWithPropertyGuard(action, settings, name) {\n  var withUnknown = function withUnknown(config) {\n    return withInfoPlist(config, function () {\n      var _ref2 = _asyncToGenerator(function* (config) {\n        var _config$modRawConfig$, _config$modRawConfig$2;\n        var existingProperty = settings.expoPropertyGetter ? settings.expoPropertyGetter(config) : (0, _obj().get)(config, settings.expoConfigProperty);\n        if (((_config$modRawConfig$ = config.modRawConfig.ios) === null || _config$modRawConfig$ === void 0 ? void 0 : (_config$modRawConfig$2 = _config$modRawConfig$.infoPlist) === null || _config$modRawConfig$2 === void 0 ? void 0 : _config$modRawConfig$2[settings.infoPlistProperty]) === undefined) {\n          config.modResults = yield action(config, config.modResults);\n        } else if (existingProperty !== undefined) {\n          (0, _warnings().addWarningIOS)(settings.expoConfigProperty, `\"ios.infoPlist.${settings.infoPlistProperty}\" is set in the config. Ignoring abstract property \"${settings.expoConfigProperty}\": ${existingProperty}`);\n        }\n        return config;\n      });\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  };\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name\n    });\n  }\n  return withUnknown;\n}\nfunction createEntitlementsPlugin(action, name) {\n  var withUnknown = function withUnknown(config) {\n    return withEntitlementsPlist(config, function () {\n      var _ref3 = _asyncToGenerator(function* (config) {\n        config.modResults = yield action(config, config.modResults);\n        return config;\n      });\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n  };\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name\n    });\n  }\n  return withUnknown;\n}\nvar withAppDelegate = function withAppDelegate(config, action) {\n  return (0, _withMod().withMod)(config, {\n    platform: 'ios',\n    mod: 'appDelegate',\n    action: action\n  });\n};\nexports.withAppDelegate = withAppDelegate;\nvar withInfoPlist = function withInfoPlist(config, _action) {\n  return (0, _withMod().withMod)(config, {\n    platform: 'ios',\n    mod: 'infoPlist',\n    action: function () {\n      var _action2 = _asyncToGenerator(function* (config) {\n        config = yield _action(config);\n        if (!config.ios) {\n          config.ios = {};\n        }\n        config.ios.infoPlist = config.modResults;\n        return config;\n      });\n      function action(_x4) {\n        return _action2.apply(this, arguments);\n      }\n      return action;\n    }()\n  });\n};\nexports.withInfoPlist = withInfoPlist;\nvar withEntitlementsPlist = function withEntitlementsPlist(config, _action3) {\n  return (0, _withMod().withMod)(config, {\n    platform: 'ios',\n    mod: 'entitlements',\n    action: function () {\n      var _action4 = _asyncToGenerator(function* (config) {\n        config = yield _action3(config);\n        if (!config.ios) {\n          config.ios = {};\n        }\n        config.ios.entitlements = config.modResults;\n        return config;\n      });\n      function action(_x5) {\n        return _action4.apply(this, arguments);\n      }\n      return action;\n    }()\n  });\n};\nexports.withEntitlementsPlist = withEntitlementsPlist;\nvar withExpoPlist = function withExpoPlist(config, action) {\n  return (0, _withMod().withMod)(config, {\n    platform: 'ios',\n    mod: 'expoPlist',\n    action: action\n  });\n};\nexports.withExpoPlist = withExpoPlist;\nvar withXcodeProject = function withXcodeProject(config, action) {\n  return (0, _withMod().withMod)(config, {\n    platform: 'ios',\n    mod: 'xcodeproj',\n    action: action\n  });\n};\nexports.withXcodeProject = withXcodeProject;\nvar withPodfileProperties = function withPodfileProperties(config, action) {\n  return (0, _withMod().withMod)(config, {\n    platform: 'ios',\n    mod: 'podfileProperties',\n    action: action\n  });\n};\nexports.withPodfileProperties = withPodfileProperties;","map":{"version":3,"names":["_obj","data","require","_warnings","_withMod","createInfoPlistPlugin","action","name","withUnknown","config","withInfoPlist","_ref","_asyncToGenerator","modResults","_x","apply","arguments","Object","defineProperty","value","createInfoPlistPluginWithPropertyGuard","settings","_ref2","_config$modRawConfig$","_config$modRawConfig$2","existingProperty","expoPropertyGetter","get","expoConfigProperty","modRawConfig","ios","infoPlist","infoPlistProperty","undefined","addWarningIOS","_x2","createEntitlementsPlugin","withEntitlementsPlist","_ref3","_x3","withAppDelegate","withMod","platform","mod","exports","_action2","_x4","_action4","entitlements","_x5","withExpoPlist","withXcodeProject","withPodfileProperties"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\plugins\\ios-plugins.ts"],"sourcesContent":["import type { ExpoConfig } from '@expo/config-types';\nimport type { JSONObject } from '@expo/json-file';\nimport type { XcodeProject } from 'xcode';\n\nimport type { ConfigPlugin, Mod } from '../Plugin.types';\nimport type { ExpoPlist, InfoPlist } from '../ios/IosConfig.types';\nimport type { AppDelegateProjectFile } from '../ios/Paths';\nimport { get } from '../utils/obj';\nimport { addWarningIOS } from '../utils/warnings';\nimport { withMod } from './withMod';\n\ntype MutateInfoPlistAction = (\n  expo: ExpoConfig,\n  infoPlist: InfoPlist\n) => Promise<InfoPlist> | InfoPlist;\n\n/**\n * Helper method for creating mods from existing config functions.\n *\n * @param action\n */\nexport function createInfoPlistPlugin(action: MutateInfoPlistAction, name?: string): ConfigPlugin {\n  const withUnknown: ConfigPlugin = (config) =>\n    withInfoPlist(config, async (config) => {\n      config.modResults = await action(config, config.modResults);\n      return config;\n    });\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name,\n    });\n  }\n  return withUnknown;\n}\n\nexport function createInfoPlistPluginWithPropertyGuard(\n  action: MutateInfoPlistAction,\n  settings: {\n    infoPlistProperty: string;\n    expoConfigProperty: string;\n    expoPropertyGetter?: (config: ExpoConfig) => string;\n  },\n  name?: string\n): ConfigPlugin {\n  const withUnknown: ConfigPlugin = (config) =>\n    withInfoPlist(config, async (config) => {\n      const existingProperty = settings.expoPropertyGetter\n        ? settings.expoPropertyGetter(config)\n        : get(config, settings.expoConfigProperty);\n      // If the user explicitly sets a value in the infoPlist, we should respect that.\n      if (config.modRawConfig.ios?.infoPlist?.[settings.infoPlistProperty] === undefined) {\n        config.modResults = await action(config, config.modResults);\n      } else if (existingProperty !== undefined) {\n        // Only warn if there is a conflict.\n        addWarningIOS(\n          settings.expoConfigProperty,\n          `\"ios.infoPlist.${settings.infoPlistProperty}\" is set in the config. Ignoring abstract property \"${settings.expoConfigProperty}\": ${existingProperty}`\n        );\n      }\n\n      return config;\n    });\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name,\n    });\n  }\n  return withUnknown;\n}\n\ntype MutateEntitlementsPlistAction = (expo: ExpoConfig, entitlements: JSONObject) => JSONObject;\n\n/**\n * Helper method for creating mods from existing config functions.\n *\n * @param action\n */\nexport function createEntitlementsPlugin(\n  action: MutateEntitlementsPlistAction,\n  name: string\n): ConfigPlugin {\n  const withUnknown: ConfigPlugin = (config) =>\n    withEntitlementsPlist(config, async (config) => {\n      config.modResults = await action(config, config.modResults);\n      return config;\n    });\n  if (name) {\n    Object.defineProperty(withUnknown, 'name', {\n      value: name,\n    });\n  }\n  return withUnknown;\n}\n\n/**\n * Provides the AppDelegate file for modification.\n *\n * @param config\n * @param action\n */\nexport const withAppDelegate: ConfigPlugin<Mod<AppDelegateProjectFile>> = (config, action) => {\n  return withMod(config, {\n    platform: 'ios',\n    mod: 'appDelegate',\n    action,\n  });\n};\n\n/**\n * Provides the Info.plist file for modification.\n * Keeps the config's expo.ios.infoPlist object in sync with the data.\n *\n * @param config\n * @param action\n */\nexport const withInfoPlist: ConfigPlugin<Mod<InfoPlist>> = (config, action) => {\n  return withMod<InfoPlist>(config, {\n    platform: 'ios',\n    mod: 'infoPlist',\n    async action(config) {\n      config = await action(config);\n      if (!config.ios) {\n        config.ios = {};\n      }\n      config.ios.infoPlist = config.modResults;\n      return config;\n    },\n  });\n};\n\n/**\n * Provides the main .entitlements file for modification.\n * Keeps the config's expo.ios.entitlements object in sync with the data.\n *\n * @param config\n * @param action\n */\nexport const withEntitlementsPlist: ConfigPlugin<Mod<JSONObject>> = (config, action) => {\n  return withMod<JSONObject>(config, {\n    platform: 'ios',\n    mod: 'entitlements',\n    async action(config) {\n      config = await action(config);\n      if (!config.ios) {\n        config.ios = {};\n      }\n      config.ios.entitlements = config.modResults;\n      return config;\n    },\n  });\n};\n\n/**\n * Provides the Expo.plist for modification.\n *\n * @param config\n * @param action\n */\nexport const withExpoPlist: ConfigPlugin<Mod<ExpoPlist>> = (config, action) => {\n  return withMod(config, {\n    platform: 'ios',\n    mod: 'expoPlist',\n    action,\n  });\n};\n\n/**\n * Provides the main .xcodeproj for modification.\n *\n * @param config\n * @param action\n */\nexport const withXcodeProject: ConfigPlugin<Mod<XcodeProject>> = (config, action) => {\n  return withMod(config, {\n    platform: 'ios',\n    mod: 'xcodeproj',\n    action,\n  });\n};\n\n/**\n * Provides the Podfile.properties.json for modification.\n *\n * @param config\n * @param action\n */\nexport const withPodfileProperties: ConfigPlugin<Mod<Record<string, string>>> = (\n  config,\n  action\n) => {\n  return withMod(config, {\n    platform: 'ios',\n    mod: 'podfileProperties',\n    action,\n  });\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}