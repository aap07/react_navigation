{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { stringifyNumber } from \"../../stringify/stringifyNumber.js\";\nfunction parseSexagesimal(str, asBigInt) {\n  var sign = str[0];\n  var parts = sign === '-' || sign === '+' ? str.substring(1) : str;\n  var num = function num(n) {\n    return asBigInt ? BigInt(n) : Number(n);\n  };\n  var res = parts.replace(/_/g, '').split(':').reduce(function (res, p) {\n    return res * num(60) + num(p);\n  }, num(0));\n  return sign === '-' ? num(-1) * res : res;\n}\nfunction stringifySexagesimal(node) {\n  var value = node.value;\n  var num = function num(n) {\n    return n;\n  };\n  if (typeof value === 'bigint') num = function num(n) {\n    return BigInt(n);\n  };else if (isNaN(value) || !isFinite(value)) return stringifyNumber(node);\n  var sign = '';\n  if (value < 0) {\n    sign = '-';\n    value *= num(-1);\n  }\n  var _60 = num(60);\n  var parts = [value % _60];\n  if (value < 60) {\n    parts.unshift(0);\n  } else {\n    value = (value - parts[0]) / _60;\n    parts.unshift(value % _60);\n    if (value >= 60) {\n      value = (value - parts[0]) / _60;\n      parts.unshift(value);\n    }\n  }\n  return sign + parts.map(function (n) {\n    return String(n).padStart(2, '0');\n  }).join(':').replace(/000000\\d*$/, '');\n}\nvar intTime = {\n  identify: function identify(value) {\n    return typeof value === 'bigint' || Number.isInteger(value);\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  format: 'TIME',\n  test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,\n  resolve: function resolve(str, _onError, _ref) {\n    var intAsBigInt = _ref.intAsBigInt;\n    return parseSexagesimal(str, intAsBigInt);\n  },\n  stringify: stringifySexagesimal\n};\nvar floatTime = {\n  identify: function identify(value) {\n    return typeof value === 'number';\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  format: 'TIME',\n  test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*$/,\n  resolve: function resolve(str) {\n    return parseSexagesimal(str, false);\n  },\n  stringify: stringifySexagesimal\n};\nvar timestamp = {\n  identify: function identify(value) {\n    return value instanceof Date;\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:timestamp',\n  test: RegExp('^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})' + '(?:' + '(?:t|T|[ \\\\t]+)' + '([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\\\.[0-9]+)?)' + '(?:[ \\\\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?' + ')?$'),\n  resolve: function resolve(str) {\n    var match = str.match(timestamp.test);\n    if (!match) throw new Error('!!timestamp expects a date, starting with yyyy-mm-dd');\n    var _match$map = match.map(Number),\n      _match$map2 = _slicedToArray(_match$map, 7),\n      year = _match$map2[1],\n      month = _match$map2[2],\n      day = _match$map2[3],\n      hour = _match$map2[4],\n      minute = _match$map2[5],\n      second = _match$map2[6];\n    var millisec = match[7] ? Number((match[7] + '00').substr(1, 3)) : 0;\n    var date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec);\n    var tz = match[8];\n    if (tz && tz !== 'Z') {\n      var d = parseSexagesimal(tz, false);\n      if (Math.abs(d) < 30) d *= 60;\n      date -= 60000 * d;\n    }\n    return new Date(date);\n  },\n  stringify: function stringify(_ref2) {\n    var value = _ref2.value;\n    return value.toISOString().replace(/((T00:00)?:00)?\\.000Z$/, '');\n  }\n};\nexport { floatTime, intTime, timestamp };","map":{"version":3,"names":["stringifyNumber","parseSexagesimal","str","asBigInt","sign","parts","substring","num","n","BigInt","Number","res","replace","split","reduce","p","stringifySexagesimal","node","value","isNaN","isFinite","_60","unshift","map","String","padStart","join","intTime","identify","isInteger","default","tag","format","test","resolve","_onError","_ref","intAsBigInt","stringify","floatTime","timestamp","Date","RegExp","match","Error","_match$map","_match$map2","_slicedToArray","year","month","day","hour","minute","second","millisec","substr","date","UTC","tz","d","Math","abs","_ref2","toISOString"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/browser/dist/schema/yaml-1.1/timestamp.js"],"sourcesContent":["import { stringifyNumber } from '../../stringify/stringifyNumber.js';\n\n/** Internal types handle bigint as number, because TS can't figure it out. */\nfunction parseSexagesimal(str, asBigInt) {\n    const sign = str[0];\n    const parts = sign === '-' || sign === '+' ? str.substring(1) : str;\n    const num = (n) => asBigInt ? BigInt(n) : Number(n);\n    const res = parts\n        .replace(/_/g, '')\n        .split(':')\n        .reduce((res, p) => res * num(60) + num(p), num(0));\n    return (sign === '-' ? num(-1) * res : res);\n}\n/**\n * hhhh:mm:ss.sss\n *\n * Internal types handle bigint as number, because TS can't figure it out.\n */\nfunction stringifySexagesimal(node) {\n    let { value } = node;\n    let num = (n) => n;\n    if (typeof value === 'bigint')\n        num = n => BigInt(n);\n    else if (isNaN(value) || !isFinite(value))\n        return stringifyNumber(node);\n    let sign = '';\n    if (value < 0) {\n        sign = '-';\n        value *= num(-1);\n    }\n    const _60 = num(60);\n    const parts = [value % _60]; // seconds, including ms\n    if (value < 60) {\n        parts.unshift(0); // at least one : is required\n    }\n    else {\n        value = (value - parts[0]) / _60;\n        parts.unshift(value % _60); // minutes\n        if (value >= 60) {\n            value = (value - parts[0]) / _60;\n            parts.unshift(value); // hours\n        }\n    }\n    return (sign +\n        parts\n            .map(n => String(n).padStart(2, '0'))\n            .join(':')\n            .replace(/000000\\d*$/, '') // % 60 may introduce error\n    );\n}\nconst intTime = {\n    identify: value => typeof value === 'bigint' || Number.isInteger(value),\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'TIME',\n    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,\n    resolve: (str, _onError, { intAsBigInt }) => parseSexagesimal(str, intAsBigInt),\n    stringify: stringifySexagesimal\n};\nconst floatTime = {\n    identify: value => typeof value === 'number',\n    default: true,\n    tag: 'tag:yaml.org,2002:float',\n    format: 'TIME',\n    test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*$/,\n    resolve: str => parseSexagesimal(str, false),\n    stringify: stringifySexagesimal\n};\nconst timestamp = {\n    identify: value => value instanceof Date,\n    default: true,\n    tag: 'tag:yaml.org,2002:timestamp',\n    // If the time zone is omitted, the timestamp is assumed to be specified in UTC. The time part\n    // may be omitted altogether, resulting in a date format. In such a case, the time part is\n    // assumed to be 00:00:00Z (start of day, UTC).\n    test: RegExp('^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})' + // YYYY-Mm-Dd\n        '(?:' + // time is optional\n        '(?:t|T|[ \\\\t]+)' + // t | T | whitespace\n        '([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\\\.[0-9]+)?)' + // Hh:Mm:Ss(.ss)?\n        '(?:[ \\\\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?' + // Z | +5 | -03:30\n        ')?$'),\n    resolve(str) {\n        const match = str.match(timestamp.test);\n        if (!match)\n            throw new Error('!!timestamp expects a date, starting with yyyy-mm-dd');\n        const [, year, month, day, hour, minute, second] = match.map(Number);\n        const millisec = match[7] ? Number((match[7] + '00').substr(1, 3)) : 0;\n        let date = Date.UTC(year, month - 1, day, hour || 0, minute || 0, second || 0, millisec);\n        const tz = match[8];\n        if (tz && tz !== 'Z') {\n            let d = parseSexagesimal(tz, false);\n            if (Math.abs(d) < 30)\n                d *= 60;\n            date -= 60000 * d;\n        }\n        return new Date(date);\n    },\n    stringify: ({ value }) => value.toISOString().replace(/((T00:00)?:00)?\\.000Z$/, '')\n};\n\nexport { floatTime, intTime, timestamp };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}