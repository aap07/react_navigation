{"ast":null,"code":"#!/usr/bin/env node\n\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar chalk_1 = __importDefault(require(\"chalk\"));\nvar commander_1 = require(\"commander\");\nvar fs_1 = __importDefault(require(\"fs\"));\nvar path_1 = require(\"path\");\nvar _1 = require(\".\");\nvar HTML_1 = require(\"./HTML\");\nvar update_1 = __importDefault(require(\"./update\"));\nvar packageJson = function packageJson() {\n  return require(\"../package.json\");\n};\nvar program = new commander_1.Command(packageJson().name).version(packageJson().version);\nvar validateSourceArgument = function validateSourceArgument(src, command) {\n  if (!src) {\n    console.error(chalk_1.default.black.bgRed(`You must supply a valid image path or remote URL. Example:`));\n    console.error(`\\n   $ expo-pwa ${command} -i ./assets/icon.png`);\n    console.error();\n    process.exit(-1);\n  }\n};\nfunction outputCommand(name) {\n  var examples = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return program.command(`${name} [project-root]`).option('-i, --input <file>', 'Input file to process').option('-o, --output <path>', 'Output directory. Default: <project-root/>web').option('-p, --public <path>', 'Public folder. Default: <output>').on('--help', function () {\n    if (!examples.length) return;\n    console.log();\n    console.log('Examples:');\n    console.log();\n    for (var example of examples) {\n      console.log(`  $ expo-pwa ${name} ${example}`);\n    }\n    console.log();\n  });\n}\nfunction assetCommand(name) {\n  var examples = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return outputCommand(name, examples).option('-r, --resize', 'Resize mode to use [contain, cover]', 'contain').option('-c, --color', 'CSS background color for to use for the images (should be opaque).');\n}\nassetCommand('icon', ['--platform safari -i ./icon.png', '--platform chrome -i ./icon.png']).description('Generate the home screen icons for a PWA').option('--platform [string]', 'Platform to generate for: safari, chrome').action(function () {\n  var _ref = _asyncToGenerator(function* (inputProjectRoot, options) {\n    var _a;\n    validateSourceArgument(options.input, 'favicon');\n    var projectRoot = inputProjectRoot !== null && inputProjectRoot !== void 0 ? inputProjectRoot : process.cwd();\n    var output = (_a = options.output) !== null && _a !== void 0 ? _a : (0, path_1.join)(projectRoot, 'web');\n    try {\n      yield generateAssets(projectRoot, options.platform + '-icon', {\n        src: options.input,\n        output: output,\n        publicPath: options.public || output,\n        resizeMode: options.resize,\n        color: options.color || 'transparent'\n      });\n      yield (0, update_1.default)();\n    } catch (error) {\n      yield commandDidThrowAsync(error);\n    }\n  });\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\nassetCommand('favicon', ['-i ./icon.png']).description('Generate the favicons for a website').action(function () {\n  var _ref2 = _asyncToGenerator(function* (inputProjectRoot, options) {\n    var _a;\n    validateSourceArgument(options.input, 'favicon');\n    var projectRoot = inputProjectRoot !== null && inputProjectRoot !== void 0 ? inputProjectRoot : process.cwd();\n    var output = (_a = options.output) !== null && _a !== void 0 ? _a : (0, path_1.join)(projectRoot, 'web');\n    try {\n      yield generateAssets(projectRoot, 'favicon', {\n        src: options.input,\n        output: output,\n        publicPath: options.public || output,\n        resizeMode: options.resize,\n        color: options.color || 'transparent'\n      });\n      yield (0, update_1.default)();\n    } catch (error) {\n      yield commandDidThrowAsync(error);\n    }\n  });\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nassetCommand('splash', ['--color blue --resize cover -i ./splash.png']).description('Generate the Safari splash screens for a PWA').action(function () {\n  var _ref3 = _asyncToGenerator(function* (inputProjectRoot, options) {\n    var _a;\n    validateSourceArgument(options.input, 'favicon');\n    var projectRoot = inputProjectRoot !== null && inputProjectRoot !== void 0 ? inputProjectRoot : process.cwd();\n    var output = (_a = options.output) !== null && _a !== void 0 ? _a : (0, path_1.join)(projectRoot, 'web');\n    try {\n      yield generateAssets(projectRoot, 'splash', {\n        src: options.input,\n        output: output,\n        publicPath: options.public || output,\n        resizeMode: options.resize,\n        color: options.color || 'white'\n      });\n      yield (0, update_1.default)();\n    } catch (error) {\n      yield commandDidThrowAsync(error);\n    }\n  });\n  return function (_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}());\noutputCommand('manifest', ['-i ./random.config.js']).description('Generate the PWA manifest from an Expo project config').action(function () {\n  var _ref4 = _asyncToGenerator(function* (inputProjectRoot, options) {\n    var _a, _b;\n    var projectRoot = (0, path_1.resolve)(inputProjectRoot !== null && inputProjectRoot !== void 0 ? inputProjectRoot : process.cwd());\n    var output = (_a = options.output) !== null && _a !== void 0 ? _a : (0, path_1.join)(projectRoot, 'web');\n    var publicPath = (0, path_1.resolve)((_b = options.public) !== null && _b !== void 0 ? _b : output);\n    var outputPath = (0, path_1.resolve)(output);\n    try {\n      var items = yield (0, _1.generateManifestAsync)({\n        projectRoot: (0, path_1.resolve)(projectRoot),\n        publicPath: publicPath\n      }, options.input ? (0, path_1.resolve)(options.input) : undefined);\n      yield resolveOutputAsync(publicPath, outputPath, items);\n      yield (0, update_1.default)();\n    } catch (error) {\n      yield commandDidThrowAsync(error);\n    }\n  });\n  return function (_x7, _x8) {\n    return _ref4.apply(this, arguments);\n  };\n}());\nprogram.parse(process.argv);\nfunction generateAssets(_x9, _x10, _x11) {\n  return _generateAssets.apply(this, arguments);\n}\nfunction _generateAssets() {\n  _generateAssets = _asyncToGenerator(function* (projectRoot, type, _ref5) {\n    var src = _ref5.src,\n      output = _ref5.output,\n      publicPath = _ref5.publicPath,\n      backgroundColor = _ref5.color,\n      _ref5$resizeMode = _ref5.resizeMode,\n      resizeMode = _ref5$resizeMode === void 0 ? 'contain' : _ref5$resizeMode;\n    if (!isResizeMode(resizeMode)) {\n      console.error(chalk_1.default.black.bgRed(`The provided resizeMode \"${resizeMode}\" is invalid. Please use one of [cover, contain]`));\n      process.exit(-1);\n    }\n    var items = yield (0, _1.generateAsync)(type, {\n      projectRoot: (0, path_1.resolve)(projectRoot || process.cwd()),\n      publicPath: (0, path_1.resolve)(publicPath)\n    }, {\n      src: src,\n      backgroundColor: backgroundColor,\n      resizeMode: resizeMode\n    });\n    var outputPath = (0, path_1.resolve)(output);\n    yield resolveOutputAsync(publicPath, outputPath, items);\n  });\n  return _generateAssets.apply(this, arguments);\n}\nfunction resolveOutputAsync(_x12, _x13, _x14) {\n  return _resolveOutputAsync.apply(this, arguments);\n}\nfunction _resolveOutputAsync() {\n  _resolveOutputAsync = _asyncToGenerator(function* (publicPath, outputPath, items) {\n    var _a, _b, _c, _d, _e;\n    fs_1.default.mkdirSync(outputPath, {\n      recursive: true\n    });\n    var meta = [];\n    var manifest = {};\n    for (var item of items) {\n      if (item.tag) {\n        if ((_b = (_a = item.tag) === null || _a === void 0 ? void 0 : _a.attributes) === null || _b === void 0 ? void 0 : _b.href) {\n          item.tag.attributes.href = '/' + (0, path_1.relative)(publicPath, (_d = (_c = item.tag) === null || _c === void 0 ? void 0 : _c.attributes) === null || _d === void 0 ? void 0 : _d.href);\n        }\n        meta.push((0, HTML_1.htmlTagObjectToString)(item.tag));\n      }\n      if (item.manifest) {\n        if (!Array.isArray(manifest.icons)) manifest.icons = [];\n        if ((_e = item.manifest) === null || _e === void 0 ? void 0 : _e.src) {\n          item.manifest.src = '/' + (0, path_1.relative)(publicPath, item.manifest.src);\n        }\n        manifest.icons.push(item.manifest);\n      }\n      var assetPath = (0, path_1.resolve)(outputPath, item.asset.path);\n      fs_1.default.mkdirSync((0, path_1.dirname)(assetPath), {\n        recursive: true\n      });\n      fs_1.default.writeFileSync(assetPath, item.asset.source);\n    }\n    if (meta.length) {\n      logMeta(meta);\n    }\n    if (Object.keys(manifest).length) {\n      logManifest(manifest);\n    }\n  });\n  return _resolveOutputAsync.apply(this, arguments);\n}\nfunction logManifest(manifest) {\n  if (!Object.keys(manifest).length) return;\n  console.log();\n  console.log(chalk_1.default.magenta(\"\\u203A Copy the following lines into your PWA `manifest.json` to link the new assets.\"));\n  console.log();\n  console.log(JSON.stringify(manifest, null, 2));\n  console.log();\n}\nfunction logMeta(meta) {\n  if (!meta.length) return;\n  console.log();\n  console.log(chalk_1.default.magenta(\"\\u203A Copy the following lines into your HTML <head/> to link the new assets.\"));\n  console.log();\n  for (var metaLine of meta) {\n    console.log(metaLine);\n  }\n  console.log();\n}\nfunction isResizeMode(input) {\n  return input && ['contain', 'cover', 'fill', 'inside', 'outside'].includes(input);\n}\nfunction commandDidThrowAsync(_x15) {\n  return _commandDidThrowAsync.apply(this, arguments);\n}\nfunction _commandDidThrowAsync() {\n  _commandDidThrowAsync = _asyncToGenerator(function* (reason) {\n    console.log();\n    console.log('Aborting run');\n    if (reason.command) {\n      console.log(`  ${chalk_1.default.magenta(reason.command)} has failed.`);\n    } else {\n      console.log(chalk_1.default.black.bgRed`An unexpected error was encountered. Please report it as a bug:`);\n      console.log(reason);\n    }\n    console.log();\n    yield (0, update_1.default)();\n    process.exit(1);\n  });\n  return _commandDidThrowAsync.apply(this, arguments);\n}","map":{"version":3,"names":["chalk_1","__importDefault","require","commander_1","fs_1","path_1","_1","HTML_1","update_1","packageJson","program","Command","name","version","validateSourceArgument","src","command","console","error","default","black","bgRed","process","exit","outputCommand","examples","arguments","length","undefined","option","on","log","example","assetCommand","description","action","_ref","_asyncToGenerator","inputProjectRoot","options","input","projectRoot","cwd","output","_a","join","generateAssets","platform","publicPath","public","resizeMode","resize","color","commandDidThrowAsync","_x","_x2","apply","_ref2","_x3","_x4","_ref3","_x5","_x6","_ref4","resolve","_b","outputPath","items","generateManifestAsync","resolveOutputAsync","_x7","_x8","parse","argv","_x9","_x10","_x11","_generateAssets","type","_ref5","backgroundColor","_ref5$resizeMode","isResizeMode","generateAsync","_x12","_x13","_x14","_resolveOutputAsync","mkdirSync","recursive","meta","manifest","item","tag","attributes","href","relative","_d","_c","push","htmlTagObjectToString","Array","isArray","icons","_e","assetPath","asset","path","dirname","writeFileSync","source","logMeta","Object","keys","logManifest","magenta","JSON","stringify","metaLine","includes","_x15","_commandDidThrowAsync","reason"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\expo-pwa\\src\\cli.ts"],"sourcesContent":["#!/usr/bin/env node\nimport type { ResizeMode } from '@expo/image-utils';\nimport chalk from 'chalk';\nimport { Command } from 'commander';\nimport fs from 'fs';\nimport { dirname, join, relative, resolve } from 'path';\n\nimport { generateAsync, generateManifestAsync } from '.';\nimport { htmlTagObjectToString } from './HTML';\nimport { HTMLOutput } from './Manifest.types';\nimport shouldUpdate from './update';\n\nconst packageJson = () => require('../package.json');\n\nconst program = new Command(packageJson().name).version(packageJson().version);\n\nconst validateSourceArgument = (src: string, command: string) => {\n  if (!src) {\n    console.error(chalk.black.bgRed(`You must supply a valid image path or remote URL. Example:`));\n    console.error(`\\n   $ expo-pwa ${command} -i ./assets/icon.png`);\n    console.error();\n    process.exit(-1);\n  }\n};\n\ntype ManifestCommandOptions = {\n  output: string;\n  input?: string;\n  public?: string;\n};\n\ntype AssetCommandOptions = {\n  output: string;\n  input: string;\n  public?: string;\n  resize?: string;\n  color?: string;\n};\n\ntype IconAssetCommandOptions = AssetCommandOptions & {\n  platform: 'safari' | 'chrome';\n};\n\nfunction outputCommand(name: string, examples: string[] = []): Command {\n  return program\n    .command(`${name} [project-root]`)\n    .option('-i, --input <file>', 'Input file to process')\n    .option('-o, --output <path>', 'Output directory. Default: <project-root/>web')\n    .option('-p, --public <path>', 'Public folder. Default: <output>')\n    .on('--help', () => {\n      if (!examples.length) return;\n\n      console.log();\n      console.log('Examples:');\n      console.log();\n      for (const example of examples) {\n        console.log(`  $ expo-pwa ${name} ${example}`);\n      }\n      console.log();\n    });\n}\n\nfunction assetCommand(name: string, examples: string[] = []): Command {\n  return outputCommand(name, examples)\n    .option('-r, --resize', 'Resize mode to use [contain, cover]', 'contain')\n    .option('-c, --color', 'CSS background color for to use for the images (should be opaque).');\n}\n\nassetCommand('icon', ['--platform safari -i ./icon.png', '--platform chrome -i ./icon.png'])\n  .description('Generate the home screen icons for a PWA')\n  .option('--platform [string]', 'Platform to generate for: safari, chrome')\n  .action(async (inputProjectRoot: string, options: IconAssetCommandOptions) => {\n    validateSourceArgument(options.input, 'favicon');\n    const projectRoot = inputProjectRoot ?? process.cwd();\n    const output = options.output ?? join(projectRoot, 'web');\n\n    try {\n      await generateAssets(projectRoot, options.platform + '-icon', {\n        src: options.input,\n        output,\n        publicPath: options.public || output,\n        resizeMode: options.resize,\n        color: options.color || 'transparent',\n      });\n      await shouldUpdate();\n    } catch (error) {\n      await commandDidThrowAsync(error);\n    }\n  });\n\nassetCommand('favicon', ['-i ./icon.png'])\n  .description('Generate the favicons for a website')\n  .action(async (inputProjectRoot: string, options: AssetCommandOptions) => {\n    validateSourceArgument(options.input, 'favicon');\n    const projectRoot = inputProjectRoot ?? process.cwd();\n    const output = options.output ?? join(projectRoot, 'web');\n\n    try {\n      await generateAssets(projectRoot, 'favicon', {\n        src: options.input,\n        output,\n        publicPath: options.public || output,\n        resizeMode: options.resize,\n        color: options.color || 'transparent',\n      });\n      await shouldUpdate();\n    } catch (error) {\n      await commandDidThrowAsync(error);\n    }\n  });\n\nassetCommand('splash', ['--color blue --resize cover -i ./splash.png'])\n  .description('Generate the Safari splash screens for a PWA')\n  .action(async (inputProjectRoot: string, options: AssetCommandOptions) => {\n    validateSourceArgument(options.input, 'favicon');\n    const projectRoot = inputProjectRoot ?? process.cwd();\n    const output = options.output ?? join(projectRoot, 'web');\n\n    try {\n      await generateAssets(projectRoot, 'splash', {\n        src: options.input,\n        output,\n        publicPath: options.public || output,\n        resizeMode: options.resize,\n        color: options.color || 'white',\n      });\n      await shouldUpdate();\n    } catch (error) {\n      await commandDidThrowAsync(error);\n    }\n  });\n\noutputCommand('manifest', ['-i ./random.config.js'])\n  .description('Generate the PWA manifest from an Expo project config')\n  .action(async (inputProjectRoot: string, options: ManifestCommandOptions) => {\n    const projectRoot = resolve(inputProjectRoot ?? process.cwd());\n    const output = options.output ?? join(projectRoot, 'web');\n    const publicPath = resolve(options.public ?? output);\n    const outputPath = resolve(output);\n\n    try {\n      const items = await generateManifestAsync(\n        {\n          projectRoot: resolve(projectRoot),\n          publicPath,\n        },\n        options.input ? resolve(options.input) : undefined\n      );\n      await resolveOutputAsync(publicPath, outputPath, items);\n      await shouldUpdate();\n    } catch (error) {\n      await commandDidThrowAsync(error);\n    }\n  });\n\nprogram.parse(process.argv);\n\ntype AssetOptions = {\n  src: string;\n  output: string;\n  publicPath: string;\n  color: string;\n  resizeMode?: string;\n};\n\nasync function generateAssets(\n  projectRoot: string | undefined,\n  type: string,\n  { src, output, publicPath, color: backgroundColor, resizeMode = 'contain' }: AssetOptions\n) {\n  if (!isResizeMode(resizeMode)) {\n    console.error(\n      chalk.black.bgRed(\n        `The provided resizeMode \"${resizeMode}\" is invalid. Please use one of [cover, contain]`\n      )\n    );\n    process.exit(-1);\n  }\n  const items = await generateAsync(\n    type,\n    { projectRoot: resolve(projectRoot || process.cwd()), publicPath: resolve(publicPath) },\n    { src, backgroundColor, resizeMode }\n  );\n\n  const outputPath = resolve(output);\n  await resolveOutputAsync(publicPath, outputPath, items);\n}\n\nasync function resolveOutputAsync(publicPath: string, outputPath: string, items: HTMLOutput[]) {\n  fs.mkdirSync(outputPath, { recursive: true });\n\n  const meta: string[] = [];\n  const manifest: Record<string, any> = {};\n\n  for (const item of items) {\n    if (item.tag) {\n      if (item.tag?.attributes?.href) {\n        item.tag.attributes.href = '/' + relative(publicPath, item.tag?.attributes?.href);\n      }\n      // Write HTML\n      meta.push(htmlTagObjectToString(item.tag));\n    }\n    if (item.manifest) {\n      // Write Manifest\n      if (!Array.isArray(manifest.icons)) manifest.icons = [];\n      if (item.manifest?.src) {\n        item.manifest.src = '/' + relative(publicPath, item.manifest.src);\n      }\n      manifest.icons.push(item.manifest);\n    }\n\n    // Write image\n    const assetPath = resolve(outputPath, item.asset.path);\n    fs.mkdirSync(dirname(assetPath), { recursive: true });\n    fs.writeFileSync(assetPath, item.asset.source);\n  }\n\n  if (meta.length) {\n    logMeta(meta);\n  }\n\n  if (Object.keys(manifest).length) {\n    logManifest(manifest);\n  }\n}\n\nfunction logManifest(manifest: Record<string, any>) {\n  if (!Object.keys(manifest).length) return;\n  console.log();\n  console.log(\n    chalk.magenta(\n      '\\u203A Copy the following lines into your PWA `manifest.json` to link the new assets.'\n    )\n  );\n  console.log();\n  console.log(JSON.stringify(manifest, null, 2));\n  console.log();\n}\n\nfunction logMeta(meta: string[]) {\n  if (!meta.length) return;\n  console.log();\n  console.log(\n    chalk.magenta('\\u203A Copy the following lines into your HTML <head/> to link the new assets.')\n  );\n  console.log();\n  for (const metaLine of meta) {\n    console.log(metaLine);\n  }\n  console.log();\n}\n\nfunction isResizeMode(input: any): input is ResizeMode {\n  return input && ['contain', 'cover', 'fill', 'inside', 'outside'].includes(input);\n}\n\nasync function commandDidThrowAsync(reason: any) {\n  console.log();\n  console.log('Aborting run');\n  if (reason.command) {\n    console.log(`  ${chalk.magenta(reason.command)} has failed.`);\n  } else {\n    console.log(chalk.black.bgRed`An unexpected error was encountered. Please report it as a bug:`);\n    console.log(reason);\n  }\n  console.log();\n\n  await shouldUpdate();\n\n  process.exit(1);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}