{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _process() {\n  var data = _interopRequireDefault(require(\"process\"));\n  _process = function _process() {\n    return data;\n  };\n  return data;\n}\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function _chalk() {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function _cliTools() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction printRunInstructions(projectDir, projectName) {\n  var iosInstructions = '';\n  var desktopInstructions = '';\n  if (_process().default.platform === 'darwin') {\n    var iosProjectDir = _path().default.resolve(projectDir, 'ios');\n    var iosPodsFile = _path().default.resolve(iosProjectDir, `${projectName}.xcworkspace`);\n    var isUsingPods = _fs().default.existsSync(iosPodsFile);\n    var relativeXcodeProjectPath = _path().default.relative('..', isUsingPods ? iosPodsFile : _path().default.resolve(iosProjectDir, `${projectName}.xcodeproj`));\n    iosInstructions = `\n  ${_chalk().default.cyan(`Run instructions for ${_chalk().default.bold('iOS')}`)}:\n    • cd \"${projectDir}\" && npx react-native run-ios\n    ${_chalk().default.dim('- or -')}\n    • Open ${relativeXcodeProjectPath} in Xcode or run \"xed -b ios\"\n    • Hit the Run button\n    `;\n    desktopInstructions = `\n  ${_chalk().default.magenta(`Run instructions for ${_chalk().default.bold('macOS')}`)}:\n    • See ${_chalk().default.underline('https://aka.ms/ReactNativeGuideMacOS')} for the latest up-to-date instructions.\n    `;\n  }\n  if (_process().default.platform === 'win32') {\n    desktopInstructions = `\n  ${_chalk().default.cyan(`Run instructions for ${_chalk().default.bold('Windows')}`)}:\n    • See ${_chalk().default.underline('https://aka.ms/ReactNativeGuideWindows')} for the latest up-to-date instructions.\n    `;\n  }\n  var androidInstructions = `\n  ${_chalk().default.green(`Run instructions for ${_chalk().default.bold('Android')}`)}:\n    • Have an Android emulator running (quickest way to get started), or a device connected.\n    • cd \"${projectDir}\" && npx react-native run-android\n  `;\n  _cliTools().logger.log(`\n  ${androidInstructions}${iosInstructions}${desktopInstructions}\n  `);\n}\nvar _default = printRunInstructions;\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_path","data","_interopRequireDefault","require","_fs","_process","_chalk","_cliTools","obj","__esModule","printRunInstructions","projectDir","projectName","iosInstructions","desktopInstructions","platform","iosProjectDir","resolve","iosPodsFile","isUsingPods","existsSync","relativeXcodeProjectPath","relative","cyan","bold","dim","magenta","underline","androidInstructions","green","logger","log","_default"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli/build/commands/init/printRunInstructions.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n  _path = function () {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  const data = _interopRequireDefault(require(\"fs\"));\n  _fs = function () {\n    return data;\n  };\n  return data;\n}\nfunction _process() {\n  const data = _interopRequireDefault(require(\"process\"));\n  _process = function () {\n    return data;\n  };\n  return data;\n}\nfunction _chalk() {\n  const data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function () {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function () {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nfunction printRunInstructions(projectDir, projectName) {\n  let iosInstructions = '';\n  let desktopInstructions = '';\n  if (_process().default.platform === 'darwin') {\n    const iosProjectDir = _path().default.resolve(projectDir, 'ios');\n    const iosPodsFile = _path().default.resolve(iosProjectDir, `${projectName}.xcworkspace`);\n    const isUsingPods = _fs().default.existsSync(iosPodsFile);\n    const relativeXcodeProjectPath = _path().default.relative('..', isUsingPods ? iosPodsFile : _path().default.resolve(iosProjectDir, `${projectName}.xcodeproj`));\n    iosInstructions = `\n  ${_chalk().default.cyan(`Run instructions for ${_chalk().default.bold('iOS')}`)}:\n    • cd \"${projectDir}\" && npx react-native run-ios\n    ${_chalk().default.dim('- or -')}\n    • Open ${relativeXcodeProjectPath} in Xcode or run \"xed -b ios\"\n    • Hit the Run button\n    `;\n    desktopInstructions = `\n  ${_chalk().default.magenta(`Run instructions for ${_chalk().default.bold('macOS')}`)}:\n    • See ${_chalk().default.underline('https://aka.ms/ReactNativeGuideMacOS')} for the latest up-to-date instructions.\n    `;\n  }\n  if (_process().default.platform === 'win32') {\n    desktopInstructions = `\n  ${_chalk().default.cyan(`Run instructions for ${_chalk().default.bold('Windows')}`)}:\n    • See ${_chalk().default.underline('https://aka.ms/ReactNativeGuideWindows')} for the latest up-to-date instructions.\n    `;\n  }\n  const androidInstructions = `\n  ${_chalk().default.green(`Run instructions for ${_chalk().default.bold('Android')}`)}:\n    • Have an Android emulator running (quickest way to get started), or a device connected.\n    • cd \"${projectDir}\" && npx react-native run-android\n  `;\n  _cliTools().logger.log(`\n  ${androidInstructions}${iosInstructions}${desktopInstructions}\n  `);\n}\nvar _default = printRunInstructions;\nexports.default = _default;\n\n//# sourceMappingURL=printRunInstructions.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}