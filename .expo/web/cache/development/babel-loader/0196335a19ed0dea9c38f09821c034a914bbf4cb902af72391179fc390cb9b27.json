{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native/codegen/lib/CodegenSchema.d.ts"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nexport type PlatformType =\n  | 'iOS'\n  | 'android';\n\nexport interface SchemaType {\n  readonly modules: {\n    [hasteModuleName: string]: ComponentSchema | NativeModuleSchema;\n  };\n}\n\nexport interface DoubleTypeAnnotation {\n  readonly type: 'DoubleTypeAnnotation';\n}\n\nexport interface FloatTypeAnnotation {\n  readonly type: 'FloatTypeAnnotation';\n}\n\nexport interface BooleanTypeAnnotation {\n  readonly type: 'BooleanTypeAnnotation';\n}\n\nexport interface Int32TypeAnnotation {\n  readonly type: 'Int32TypeAnnotation';\n}\n\nexport interface StringTypeAnnotation {\n  readonly type: 'StringTypeAnnotation';\n}\n\nexport interface StringEnumTypeAnnotation {\n  readonly type: 'StringEnumTypeAnnotation';\n  readonly options: readonly string[];\n}\n\nexport interface VoidTypeAnnotation {\n  readonly type: 'VoidTypeAnnotation';\n}\n\nexport interface ObjectTypeAnnotation<T> {\n  readonly type: 'ObjectTypeAnnotation';\n  readonly properties: readonly NamedShape<T>[];\n  readonly baseTypes?: readonly string[] | undefined;\n}\n\nexport interface FunctionTypeAnnotation<P, R> {\n  readonly type: 'FunctionTypeAnnotation';\n  readonly params: readonly NamedShape<P>[];\n  readonly returnTypeAnnotation: R;\n}\n\nexport interface NamedShape<T> {\n  readonly name: string;\n  readonly optional: boolean;\n  readonly typeAnnotation: T;\n}\n\nexport interface ComponentSchema {\n  readonly type: 'Component';\n  readonly components: {\n    [componentName: string]: ComponentShape;\n  };\n}\n\nexport interface ComponentShape extends OptionsShape {\n  readonly extendsProps: readonly ExtendsPropsShape[];\n  readonly events: readonly EventTypeShape[];\n  readonly props: readonly NamedShape<PropTypeAnnotation>[];\n  readonly commands: readonly NamedShape<CommandTypeAnnotation>[];\n}\n\nexport interface OptionsShape {\n  readonly interfaceOnly?: boolean | undefined;\n  readonly paperComponentName?: string | undefined;\n  readonly excludedPlatforms?: readonly PlatformType[] | undefined;\n  readonly paperComponentNameDeprecated?: string | undefined;\n}\n\nexport interface ExtendsPropsShape {\n  readonly type: 'ReactNativeBuiltInType';\n  readonly knownTypeName: 'ReactNativeCoreViewProps';\n}\n\nexport interface EventTypeShape {\n  readonly name: string;\n  readonly bubblingType:\n    | 'direct'\n    | 'bubble';\n  readonly optional: boolean;\n  readonly paperTopLevelNameDeprecated?: string | undefined;\n  readonly typeAnnotation: {\n    readonly type: 'EventTypeAnnotation';\n    readonly argument?: ObjectTypeAnnotation<EventTypeAnnotation> | undefined;\n  };\n}\n\nexport type EventTypeAnnotation =\n  | BooleanTypeAnnotation\n  | StringTypeAnnotation\n  | DoubleTypeAnnotation\n  | FloatTypeAnnotation\n  | Int32TypeAnnotation\n  | StringEnumTypeAnnotation\n  | ObjectTypeAnnotation<EventTypeAnnotation>;\n\nexport type PropTypeAnnotation =\n  | {\n      readonly type: 'BooleanTypeAnnotation';\n      readonly default:\n        | boolean\n        | null;\n    }\n  | {\n      readonly type: 'StringTypeAnnotation';\n      readonly default:\n        | string\n        | null;\n    }\n  | {\n      readonly type: 'DoubleTypeAnnotation';\n      readonly default: number;\n    }\n  | {\n      readonly type: 'FloatTypeAnnotation';\n      readonly default:\n        | number\n        | null;\n    }\n  | {\n      readonly type: 'Int32TypeAnnotation';\n      readonly default: number;\n    }\n  | {\n      readonly type: 'StringEnumTypeAnnotation';\n      readonly default: string;\n      readonly options: readonly string[];\n    }\n  | {\n      readonly type: 'Int32EnumTypeAnnotation';\n      readonly default: number;\n      readonly options: readonly number[];\n    }\n  | ReservedPropTypeAnnotation\n  | ObjectTypeAnnotation<PropTypeAnnotation>\n  | {\n      readonly type: 'ArrayTypeAnnotation';\n      readonly elementType:\n        | BooleanTypeAnnotation\n        | StringTypeAnnotation\n        | DoubleTypeAnnotation\n        | FloatTypeAnnotation\n        | Int32TypeAnnotation\n        | {\n            readonly type: 'StringEnumTypeAnnotation';\n            readonly default: string;\n            readonly options: readonly string[];\n          }\n        | ObjectTypeAnnotation<PropTypeAnnotation>\n        | ReservedPropTypeAnnotation\n        | {\n            readonly type: 'ArrayTypeAnnotation';\n            readonly elementType: ObjectTypeAnnotation<PropTypeAnnotation>;\n          };\n    };\n\nexport interface ReservedPropTypeAnnotation {\n  readonly type: 'ReservedPropTypeAnnotation';\n  readonly name:\n    | 'ColorPrimitive'\n    | 'ImageSourcePrimitive'\n    | 'PointPrimitive'\n    | 'EdgeInsetsPrimitive'\n    | 'ImageRequestPrimitive'\n    | 'DimensionPrimitive';\n}\n\nexport type CommandTypeAnnotation = FunctionTypeAnnotation<CommandParamTypeAnnotation, VoidTypeAnnotation>;\n\nexport type CommandParamTypeAnnotation =\n  | ReservedTypeAnnotation\n  | BooleanTypeAnnotation\n  | Int32TypeAnnotation\n  | DoubleTypeAnnotation\n  | FloatTypeAnnotation\n  | StringTypeAnnotation;\n\nexport interface ReservedTypeAnnotation {\n  readonly type: 'ReservedTypeAnnotation';\n  readonly name: 'RootTag';\n}\n\nexport type Nullable<T extends NativeModuleTypeAnnotation> =\n  | NullableTypeAnnotation<T>\n  | T;\n\nexport interface NullableTypeAnnotation<T extends NativeModuleTypeAnnotation> {\n  readonly type: 'NullableTypeAnnotation';\n  readonly typeAnnotation: T;\n}\n\nexport interface NativeModuleSchema {\n  readonly type: 'NativeModule';\n  readonly aliasMap: NativeModuleAliasMap;\n  readonly enumMap: NativeModuleEnumMap;\n  readonly spec: NativeModuleSpec;\n  readonly moduleName: string;\n  readonly excludedPlatforms?: readonly PlatformType[] | undefined;\n}\n\nexport interface NativeModuleSpec {\n  readonly properties: readonly NativeModulePropertyShape[];\n}\n\nexport type NativeModulePropertyShape = NamedShape<Nullable<NativeModuleFunctionTypeAnnotation>>;\n\nexport interface NativeModuleEnumMap {\n  readonly [enumName: string]: NativeModuleEnumDeclarationWithMembers;\n}\n\nexport interface NativeModuleAliasMap {\n  readonly [aliasName: string]: NativeModuleObjectTypeAnnotation;\n}\n\nexport type NativeModuleFunctionTypeAnnotation = FunctionTypeAnnotation<Nullable<NativeModuleParamTypeAnnotation>, Nullable<NativeModuleReturnTypeAnnotation>>;\n\nexport type NativeModuleObjectTypeAnnotation = ObjectTypeAnnotation<Nullable<NativeModuleBaseTypeAnnotation>>;\n\nexport interface NativeModuleArrayTypeAnnotation<T extends Nullable<NativeModuleBaseTypeAnnotation>> {\n  readonly type: 'ArrayTypeAnnotation';\n  readonly elementType?: T | undefined;\n}\n\nexport interface NativeModuleStringTypeAnnotation {\n  readonly type: 'StringTypeAnnotation';\n}\n\nexport interface NativeModuleNumberTypeAnnotation {\n  readonly type: 'NumberTypeAnnotation';\n}\n\nexport interface NativeModuleInt32TypeAnnotation {\n  readonly type: 'Int32TypeAnnotation';\n}\n\nexport interface NativeModuleDoubleTypeAnnotation {\n  readonly type: 'DoubleTypeAnnotation';\n}\n\nexport interface NativeModuleFloatTypeAnnotation {\n  readonly type: 'FloatTypeAnnotation';\n}\n\nexport interface NativeModuleBooleanTypeAnnotation {\n  readonly type: 'BooleanTypeAnnotation';\n}\n\nexport type NativeModuleEnumMembers = readonly {\n  readonly name: string;\n  readonly value: string;\n}[];\n\nexport type NativeModuleEnumMemberType =\n  | 'NumberTypeAnnotation'\n  | 'StringTypeAnnotation';\n\nexport interface NativeModuleEnumDeclaration {\n  readonly name: string;\n  readonly type: 'EnumDeclaration';\n  readonly memberType: NativeModuleEnumMemberType;\n}\n\nexport interface NativeModuleEnumDeclarationWithMembers {\n  name: string;\n  type: 'EnumDeclarationWithMembers';\n  memberType: NativeModuleEnumMemberType;\n  members: NativeModuleEnumMembers;\n}\n\nexport interface NativeModuleGenericObjectTypeAnnotation {\n  readonly type: 'GenericObjectTypeAnnotation';\n}\n\nexport interface NativeModuleTypeAliasTypeAnnotation {\n  readonly type: 'TypeAliasTypeAnnotation';\n  readonly name: string;\n}\n\nexport interface NativeModulePromiseTypeAnnotation {\n  readonly type: 'PromiseTypeAnnotation';\n  readonly elementType?: Nullable<NativeModuleBaseTypeAnnotation> | undefined;\n}\n\nexport type UnionTypeAnnotationMemberType =\n  | 'NumberTypeAnnotation'\n  | 'ObjectTypeAnnotation'\n  | 'StringTypeAnnotation';\n\nexport interface NativeModuleUnionTypeAnnotation {\n  readonly type: 'UnionTypeAnnotation';\n  readonly memberType: UnionTypeAnnotationMemberType;\n}\n\nexport interface NativeModuleMixedTypeAnnotation {\n  readonly type: 'MixedTypeAnnotation';\n}\n\nexport type NativeModuleBaseTypeAnnotation =\n  | NativeModuleStringTypeAnnotation\n  | NativeModuleNumberTypeAnnotation\n  | NativeModuleInt32TypeAnnotation\n  | NativeModuleDoubleTypeAnnotation\n  | NativeModuleFloatTypeAnnotation\n  | NativeModuleBooleanTypeAnnotation\n  | NativeModuleEnumDeclaration\n  | NativeModuleGenericObjectTypeAnnotation\n  | ReservedTypeAnnotation\n  | NativeModuleTypeAliasTypeAnnotation\n  | NativeModuleArrayTypeAnnotation<Nullable<NativeModuleBaseTypeAnnotation>>\n  | NativeModuleObjectTypeAnnotation\n  | NativeModuleUnionTypeAnnotation\n  | NativeModuleMixedTypeAnnotation;\n\nexport type NativeModuleParamTypeAnnotation =\n  | NativeModuleBaseTypeAnnotation\n  | NativeModuleParamOnlyTypeAnnotation;\n\nexport type NativeModuleReturnTypeAnnotation =\n  | NativeModuleBaseTypeAnnotation\n  | NativeModuleReturnOnlyTypeAnnotation;\n\nexport type NativeModuleTypeAnnotation =\n  | NativeModuleBaseTypeAnnotation\n  | NativeModuleParamOnlyTypeAnnotation\n  | NativeModuleReturnOnlyTypeAnnotation;\n\nexport type NativeModuleParamOnlyTypeAnnotation = NativeModuleFunctionTypeAnnotation;\n\nexport type NativeModuleReturnOnlyTypeAnnotation =\n  | NativeModulePromiseTypeAnnotation\n  | VoidTypeAnnotation;\n\n"],"mappings":""},"metadata":{},"sourceType":"script","externalDependencies":[]}