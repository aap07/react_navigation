{"ast":null,"code":"export { createScalarToken, resolveAsScalar, setScalarValue } from \"./cst-scalar.js\";\nexport { stringify } from \"./cst-stringify.js\";\nexport { visit, Visitor, VisitPath } from \"./cst-visit.js\";","map":{"version":3,"names":["createScalarToken","resolveAsScalar","setScalarValue","stringify","visit","Visitor","VisitPath"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/dist/parse/cst.d.ts"],"sourcesContent":["export { createScalarToken, resolveAsScalar, setScalarValue } from './cst-scalar.js';\nexport { stringify } from './cst-stringify.js';\nexport { visit, Visitor, VisitPath } from './cst-visit.js';\nexport interface SourceToken {\n    type: 'byte-order-mark' | 'doc-mode' | 'doc-start' | 'space' | 'comment' | 'newline' | 'directive-line' | 'anchor' | 'tag' | 'seq-item-ind' | 'explicit-key-ind' | 'map-value-ind' | 'flow-map-start' | 'flow-map-end' | 'flow-seq-start' | 'flow-seq-end' | 'flow-error-end' | 'comma' | 'block-scalar-header';\n    offset: number;\n    indent: number;\n    source: string;\n}\nexport interface ErrorToken {\n    type: 'error';\n    offset: number;\n    source: string;\n    message: string;\n}\nexport interface Directive {\n    type: 'directive';\n    offset: number;\n    source: string;\n}\nexport interface Document {\n    type: 'document';\n    offset: number;\n    start: SourceToken[];\n    value?: Token;\n    end?: SourceToken[];\n}\nexport interface DocumentEnd {\n    type: 'doc-end';\n    offset: number;\n    source: string;\n    end?: SourceToken[];\n}\nexport interface FlowScalar {\n    type: 'alias' | 'scalar' | 'single-quoted-scalar' | 'double-quoted-scalar';\n    offset: number;\n    indent: number;\n    source: string;\n    end?: SourceToken[];\n}\nexport interface BlockScalar {\n    type: 'block-scalar';\n    offset: number;\n    indent: number;\n    props: Token[];\n    source: string;\n}\nexport interface BlockMap {\n    type: 'block-map';\n    offset: number;\n    indent: number;\n    items: Array<{\n        start: SourceToken[];\n        key?: never;\n        sep?: never;\n        value?: never;\n    } | {\n        start: SourceToken[];\n        key: Token | null;\n        sep: SourceToken[];\n        value?: Token;\n    }>;\n}\nexport interface BlockSequence {\n    type: 'block-seq';\n    offset: number;\n    indent: number;\n    items: Array<{\n        start: SourceToken[];\n        key?: never;\n        sep?: never;\n        value?: Token;\n    }>;\n}\nexport type CollectionItem = {\n    start: SourceToken[];\n    key?: Token | null;\n    sep?: SourceToken[];\n    value?: Token;\n};\nexport interface FlowCollection {\n    type: 'flow-collection';\n    offset: number;\n    indent: number;\n    start: SourceToken;\n    items: CollectionItem[];\n    end: SourceToken[];\n}\nexport type Token = SourceToken | ErrorToken | Directive | Document | DocumentEnd | FlowScalar | BlockScalar | BlockMap | BlockSequence | FlowCollection;\nexport type TokenType = SourceToken['type'] | DocumentEnd['type'] | FlowScalar['type'];\n/** The byte order mark */\nexport declare const BOM = \"\\uFEFF\";\n/** Start of doc-mode */\nexport declare const DOCUMENT = \"\\u0002\";\n/** Unexpected end of flow-mode */\nexport declare const FLOW_END = \"\\u0018\";\n/** Next token is a scalar value */\nexport declare const SCALAR = \"\\u001F\";\n/** @returns `true` if `token` is a flow or block collection */\nexport declare const isCollection: (token: Token | null | undefined) => token is BlockMap | BlockSequence | FlowCollection;\n/** @returns `true` if `token` is a flow or block scalar; not an alias */\nexport declare const isScalar: (token: Token | null | undefined) => token is BlockScalar | FlowScalar;\n/** Get a printable representation of a lexer token */\nexport declare function prettyToken(token: string): string;\n/** Identify the type of a lexer token. May return `null` for unknown tokens. */\nexport declare function tokenType(source: string): TokenType | null;\n"],"mappings":"AAAA,SAASA,iBAAiB,EAAEC,eAAe,EAAEC,cAAc;AAC3D,SAASC,SAAS;AAClB,SAASC,KAAK,EAAEC,OAAO,EAAEC,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}