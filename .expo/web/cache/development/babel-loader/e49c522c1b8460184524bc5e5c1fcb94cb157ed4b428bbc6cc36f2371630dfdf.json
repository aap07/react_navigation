{"ast":null,"code":"var findProjectRoot = require('@react-native-community/cli-tools').findProjectRoot;\nvar fs = require('fs');\nvar path = require('path');\nvar projectRoot = findProjectRoot();\nfunction isMatchedInFile(filePath, regexp) {\n  var contents = fs.readFileSync(filePath, 'utf8');\n  return !!contents.match(regexp);\n}\nfunction isExpoModulesInstalledIos(projectRoot) {\n  var podfilePath = path.join(projectRoot, 'ios', 'Podfile');\n  if (!fs.existsSync(podfilePath)) {\n    return true;\n  }\n  return isMatchedInFile(podfilePath, /^\\s*require File.join\\(File\\.dirname\\(`node --print \"require\\.resolve\\('expo\\/package\\.json'\\)\"`\\), \"scripts\\/autolinking\"\\)\\s*$/m);\n}\nfunction isExpoModulesInstalledAndroid(projectRoot) {\n  var gradlePath = path.join(projectRoot, 'android', 'settings.gradle');\n  if (!fs.existsSync(gradlePath)) {\n    return true;\n  }\n  return isMatchedInFile(gradlePath, /^\\s*apply from: (new File|file)\\(\\[\"node\", \"--print\", \"require\\.resolve\\('expo\\/package.json'\\)\"\\]\\.execute\\(null, rootDir\\)\\.text\\.trim\\(\\), \"\\.\\.\\/scripts\\/autolinking\\.gradle\"\\);?\\s*$/m);\n}\nmodule.exports = {\n  dependency: {\n    platforms: {\n      ios: !isExpoModulesInstalledIos(projectRoot) ? null : {},\n      android: !isExpoModulesInstalledAndroid(projectRoot) ? null : {\n        packageImportPath: 'import expo.modules.ExpoModulesPackage;'\n      },\n      macos: null,\n      windows: null\n    }\n  }\n};","map":{"version":3,"names":["findProjectRoot","require","fs","path","projectRoot","isMatchedInFile","filePath","regexp","contents","readFileSync","match","isExpoModulesInstalledIos","podfilePath","join","existsSync","isExpoModulesInstalledAndroid","gradlePath","module","exports","dependency","platforms","ios","android","packageImportPath","macos","windows"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/expo/react-native.config.js"],"sourcesContent":["const findProjectRoot = require('@react-native-community/cli-tools').findProjectRoot;\nconst fs = require('fs');\nconst path = require('path');\n\nconst projectRoot = findProjectRoot();\n\nfunction isMatchedInFile(filePath, regexp) {\n  const contents = fs.readFileSync(filePath, 'utf8');\n  return !!contents.match(regexp);\n}\n\n/**\n * Checks if expo-modules-autolinking is setup on iOS\n */\nfunction isExpoModulesInstalledIos(projectRoot) {\n  const podfilePath = path.join(projectRoot, 'ios', 'Podfile');\n  if (!fs.existsSync(podfilePath)) {\n    // Assumes true for managed apps\n    return true;\n  }\n  return isMatchedInFile(\n    podfilePath,\n    /^\\s*require File.join\\(File\\.dirname\\(`node --print \"require\\.resolve\\('expo\\/package\\.json'\\)\"`\\), \"scripts\\/autolinking\"\\)\\s*$/m\n  );\n}\n\n/**\n * Checks if expo-modules-autolinking is setup on Android\n */\nfunction isExpoModulesInstalledAndroid(projectRoot) {\n  const gradlePath = path.join(projectRoot, 'android', 'settings.gradle');\n  if (!fs.existsSync(gradlePath)) {\n    // Assumes true for managed apps\n    return true;\n  }\n  return isMatchedInFile(\n    gradlePath,\n    /^\\s*apply from: (new File|file)\\(\\[\"node\", \"--print\", \"require\\.resolve\\('expo\\/package.json'\\)\"\\]\\.execute\\(null, rootDir\\)\\.text\\.trim\\(\\), \"\\.\\.\\/scripts\\/autolinking\\.gradle\"\\);?\\s*$/m\n  );\n}\n\nmodule.exports = {\n  dependency: {\n    platforms: {\n      // To make Expo CLI works on bare react-native projects without installing Expo Modules, we disable autolinking in this case.\n      ios: !isExpoModulesInstalledIos(projectRoot) ? null : {},\n      android: !isExpoModulesInstalledAndroid(projectRoot)\n        ? null\n        : {\n            packageImportPath: 'import expo.modules.ExpoModulesPackage;',\n          },\n      macos: null,\n      windows: null,\n    },\n  },\n};\n"],"mappings":"AAAA,IAAMA,eAAe,GAAGC,OAAO,CAAC,mCAAmC,CAAC,CAACD,eAAe;AACpF,IAAME,EAAE,GAAGD,OAAO,CAAC,IAAI,CAAC;AACxB,IAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAE5B,IAAMG,WAAW,GAAGJ,eAAe,CAAC,CAAC;AAErC,SAASK,eAAeA,CAACC,QAAQ,EAAEC,MAAM,EAAE;EACzC,IAAMC,QAAQ,GAAGN,EAAE,CAACO,YAAY,CAACH,QAAQ,EAAE,MAAM,CAAC;EAClD,OAAO,CAAC,CAACE,QAAQ,CAACE,KAAK,CAACH,MAAM,CAAC;AACjC;AAKA,SAASI,yBAAyBA,CAACP,WAAW,EAAE;EAC9C,IAAMQ,WAAW,GAAGT,IAAI,CAACU,IAAI,CAACT,WAAW,EAAE,KAAK,EAAE,SAAS,CAAC;EAC5D,IAAI,CAACF,EAAE,CAACY,UAAU,CAACF,WAAW,CAAC,EAAE;IAE/B,OAAO,IAAI;EACb;EACA,OAAOP,eAAe,CACpBO,WAAW,EACX,mIACF,CAAC;AACH;AAKA,SAASG,6BAA6BA,CAACX,WAAW,EAAE;EAClD,IAAMY,UAAU,GAAGb,IAAI,CAACU,IAAI,CAACT,WAAW,EAAE,SAAS,EAAE,iBAAiB,CAAC;EACvE,IAAI,CAACF,EAAE,CAACY,UAAU,CAACE,UAAU,CAAC,EAAE;IAE9B,OAAO,IAAI;EACb;EACA,OAAOX,eAAe,CACpBW,UAAU,EACV,6LACF,CAAC;AACH;AAEAC,MAAM,CAACC,OAAO,GAAG;EACfC,UAAU,EAAE;IACVC,SAAS,EAAE;MAETC,GAAG,EAAE,CAACV,yBAAyB,CAACP,WAAW,CAAC,GAAG,IAAI,GAAG,CAAC,CAAC;MACxDkB,OAAO,EAAE,CAACP,6BAA6B,CAACX,WAAW,CAAC,GAChD,IAAI,GACJ;QACEmB,iBAAiB,EAAE;MACrB,CAAC;MACLC,KAAK,EAAE,IAAI;MACXC,OAAO,EAAE;IACX;EACF;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}