{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.forceUpdateTSConfig = forceUpdateTSConfig;\nexports.getTSConfigUpdates = getTSConfigUpdates;\nexports.forceRemovalTSConfig = forceRemovalTSConfig;\nexports.getTSConfigRemoveUpdates = getTSConfigRemoveUpdates;\nvar _jsonFile = _interopRequireDefault(require(\"@expo/json-file\"));\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _log = require(\"../../../log\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction forceUpdateTSConfig(_x) {\n  return _forceUpdateTSConfig.apply(this, arguments);\n}\nfunction _forceUpdateTSConfig() {\n  _forceUpdateTSConfig = _asyncToGenerator(function* (projectRoot) {\n    var tsConfigPath = _path.default.join(projectRoot, \"tsconfig.json\");\n    var _getTSConfigUpdates = getTSConfigUpdates(_jsonFile.default.read(tsConfigPath, {\n        json5: true\n      })),\n      tsConfig = _getTSConfigUpdates.tsConfig,\n      updates = _getTSConfigUpdates.updates;\n    yield writeUpdates(tsConfigPath, tsConfig, updates);\n  });\n  return _forceUpdateTSConfig.apply(this, arguments);\n}\nfunction getTSConfigUpdates(tsConfig) {\n  var updates = new Set();\n  if (!tsConfig.include) {\n    tsConfig.include = [\"**/*.ts\", \"**/*.tsx\", \".expo/types/**/*.ts\", \"expo-env.d.ts\"];\n    updates.add(\"include\");\n  } else if (Array.isArray(tsConfig.include)) {\n    if (!tsConfig.include.includes(\".expo/types/**/*.ts\")) {\n      tsConfig.include = [].concat(_toConsumableArray(tsConfig.include), [\".expo/types/**/*.ts\"]);\n      updates.add(\"include\");\n    }\n    if (!tsConfig.include.includes(\"expo-env.d.ts\")) {\n      tsConfig.include = [].concat(_toConsumableArray(tsConfig.include), [\"expo-env.d.ts\"]);\n      updates.add(\"include\");\n    }\n  }\n  return {\n    tsConfig: tsConfig,\n    updates: updates\n  };\n}\nfunction forceRemovalTSConfig(_x2) {\n  return _forceRemovalTSConfig.apply(this, arguments);\n}\nfunction _forceRemovalTSConfig() {\n  _forceRemovalTSConfig = _asyncToGenerator(function* (projectRoot) {\n    var tsConfigPath = _path.default.join(projectRoot, \"tsconfig.json\");\n    var _getTSConfigRemoveUpd = getTSConfigRemoveUpdates(_jsonFile.default.read(tsConfigPath, {\n        json5: true\n      })),\n      tsConfig = _getTSConfigRemoveUpd.tsConfig,\n      updates = _getTSConfigRemoveUpd.updates;\n    yield writeUpdates(tsConfigPath, tsConfig, updates);\n  });\n  return _forceRemovalTSConfig.apply(this, arguments);\n}\nfunction getTSConfigRemoveUpdates(tsConfig) {\n  var updates = new Set();\n  if (Array.isArray(tsConfig.include)) {\n    var filtered = tsConfig.include.filter(function (i) {\n      return i !== \"expo-env.d.ts\" && i !== \".expo/types/**/*.ts\";\n    });\n    if (filtered.length !== tsConfig.include.length) {\n      updates.add(\"include\");\n    }\n    tsConfig.include = filtered;\n  }\n  return {\n    tsConfig: tsConfig,\n    updates: updates\n  };\n}\nfunction writeUpdates(_x3, _x4, _x5) {\n  return _writeUpdates.apply(this, arguments);\n}\nfunction _writeUpdates() {\n  _writeUpdates = _asyncToGenerator(function* (tsConfigPath, tsConfig, updates) {\n    if (updates.size) {\n      yield _jsonFile.default.writeAsync(tsConfigPath, tsConfig);\n      for (var update of updates) {\n        _log.Log.log(_chalk.default`{bold TypeScript}: The {cyan tsconfig.json#${update}} property has been updated`);\n      }\n    }\n  });\n  return _writeUpdates.apply(this, arguments);\n}","map":{"version":3,"names":["_toConsumableArray","require","_asyncToGenerator","forceUpdateTSConfig","getTSConfigUpdates","forceRemovalTSConfig","getTSConfigRemoveUpdates","_jsonFile","_interopRequireDefault","_chalk","_path","_log","_x","_forceUpdateTSConfig","apply","arguments","projectRoot","tsConfigPath","default","join","_getTSConfigUpdates","read","json5","tsConfig","updates","writeUpdates","Set","include","add","Array","isArray","includes","concat","_x2","_forceRemovalTSConfig","_getTSConfigRemoveUpd","filtered","filter","i","length","_x3","_x4","_x5","_writeUpdates","size","writeAsync","update","Log","log"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\type-generation\\tsconfig.ts"],"sourcesContent":["import JsonFile, { JSONObject } from '@expo/json-file';\nimport chalk from 'chalk';\nimport path from 'path';\n\nimport { Log } from '../../../log';\n\n/**\n * Force updates a project tsconfig with Expo values.\n */\nexport async function forceUpdateTSConfig(projectRoot: string) {\n  // This runs after the TypeScript prerequisite, so we know the tsconfig.json exists\n  const tsConfigPath = path.join(projectRoot, 'tsconfig.json');\n  const { tsConfig, updates } = getTSConfigUpdates(\n    JsonFile.read(tsConfigPath, {\n      json5: true,\n    })\n  );\n\n  await writeUpdates(tsConfigPath, tsConfig, updates);\n}\n\nexport function getTSConfigUpdates(tsConfig: JSONObject) {\n  const updates = new Set<string>();\n\n  if (!tsConfig.include) {\n    tsConfig.include = ['**/*.ts', '**/*.tsx', '.expo/types/**/*.ts', 'expo-env.d.ts'];\n    updates.add('include');\n  } else if (Array.isArray(tsConfig.include)) {\n    if (!tsConfig.include.includes('.expo/types/**/*.ts')) {\n      tsConfig.include = [...tsConfig.include, '.expo/types/**/*.ts'];\n      updates.add('include');\n    }\n\n    if (!tsConfig.include.includes('expo-env.d.ts')) {\n      tsConfig.include = [...tsConfig.include, 'expo-env.d.ts'];\n      updates.add('include');\n    }\n  }\n\n  return { tsConfig, updates };\n}\n\nexport async function forceRemovalTSConfig(projectRoot: string) {\n  // This runs after the TypeScript prerequisite, so we know the tsconfig.json exists\n  const tsConfigPath = path.join(projectRoot, 'tsconfig.json');\n  const { tsConfig, updates } = getTSConfigRemoveUpdates(\n    JsonFile.read(tsConfigPath, {\n      json5: true,\n    })\n  );\n\n  await writeUpdates(tsConfigPath, tsConfig, updates);\n}\n\nexport function getTSConfigRemoveUpdates(tsConfig: JSONObject) {\n  const updates = new Set<string>();\n\n  if (Array.isArray(tsConfig.include)) {\n    const filtered = (tsConfig.include as string[]).filter(\n      (i) => i !== 'expo-env.d.ts' && i !== '.expo/types/**/*.ts'\n    );\n\n    if (filtered.length !== tsConfig.include.length) {\n      updates.add('include');\n    }\n\n    tsConfig.include = filtered;\n  }\n\n  return { tsConfig, updates };\n}\n\nasync function writeUpdates(tsConfigPath: string, tsConfig: JSONObject, updates: Set<string>) {\n  if (updates.size) {\n    await JsonFile.writeAsync(tsConfigPath, tsConfig);\n    for (const update of updates) {\n      Log.log(\n        chalk`{bold TypeScript}: The {cyan tsconfig.json#${update}} property has been updated`\n      );\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}