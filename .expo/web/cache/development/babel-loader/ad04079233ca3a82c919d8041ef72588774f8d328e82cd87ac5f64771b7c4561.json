{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCopyFilesSuccessMessage = createCopyFilesSuccessMessage;\nexports.copyTemplateFilesAsync = copyTemplateFilesAsync;\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _fs = _interopRequireDefault(require(\"fs\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _dir = require(\"../utils/dir\");\nvar _mergeGitIgnorePaths = require(\"../utils/mergeGitIgnorePaths\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = require(\"debug\")(\"expo:prebuild:copyTemplateFiles\");\nfunction hasAllPlatformSpecificGitIgnores(projectRoot, platforms) {\n  return platforms.reduce(function (p, platform) {\n    return p && _fs.default.existsSync(_path.default.join(projectRoot, platform, \".gitignore\"));\n  }, true);\n}\nfunction createCopyFilesSuccessMessage(platforms, _ref) {\n  var skippedPaths = _ref.skippedPaths,\n    gitignore = _ref.gitignore;\n  var message = `Created native project${platforms.length > 1 ? \"s\" : \"\"}`;\n  if (skippedPaths.length) {\n    message += _chalk.default.dim(` | ${skippedPaths.map(function (path) {\n      return _chalk.default.bold(`/${path}`);\n    }).join(\", \")} already created`);\n  }\n  if (!gitignore) {\n    message += _chalk.default.dim(` | gitignore skipped`);\n  } else if (!gitignore.didMerge) {\n    message += _chalk.default.dim(` | gitignore already synced`);\n  } else if (gitignore.didMerge && gitignore.didClear) {\n    message += _chalk.default.dim(` | synced gitignore`);\n  }\n  return message;\n}\nfunction copyTemplateFilesAsync(_x, _x2) {\n  return _copyTemplateFilesAsync.apply(this, arguments);\n}\nfunction _copyTemplateFilesAsync() {\n  _copyTemplateFilesAsync = _asyncToGenerator(function* (projectRoot, _ref2) {\n    var templateDirectory = _ref2.templateDirectory,\n      platforms = _ref2.platforms;\n    var copyResults = yield copyPathsFromTemplateAsync(projectRoot, {\n      templateDirectory: templateDirectory,\n      copyFilePaths: platforms\n    });\n    var hasPlatformSpecificGitIgnores = hasAllPlatformSpecificGitIgnores(templateDirectory, platforms);\n    debug(`All platforms have an internal gitignore: ${hasPlatformSpecificGitIgnores}`);\n    var gitignore = hasPlatformSpecificGitIgnores ? null : (0, _mergeGitIgnorePaths).mergeGitIgnorePaths(_path.default.join(projectRoot, \".gitignore\"), _path.default.join(templateDirectory, \".gitignore\"));\n    return _objectSpread(_objectSpread({}, copyResults), {}, {\n      gitignore: gitignore\n    });\n  });\n  return _copyTemplateFilesAsync.apply(this, arguments);\n}\nfunction copyPathsFromTemplateAsync(_x3, _x4) {\n  return _copyPathsFromTemplateAsync.apply(this, arguments);\n}\nfunction _copyPathsFromTemplateAsync() {\n  _copyPathsFromTemplateAsync = _asyncToGenerator(function* (projectRoot, _ref3) {\n    var templateDirectory = _ref3.templateDirectory,\n      copyFilePaths = _ref3.copyFilePaths;\n    var copiedPaths = [];\n    var skippedPaths = [];\n    for (var copyFilePath of copyFilePaths) {\n      var projectPath = _path.default.join(projectRoot, copyFilePath);\n      if (!(yield (0, _dir).directoryExistsAsync(projectPath))) {\n        copiedPaths.push(copyFilePath);\n        (0, _dir).copySync(_path.default.join(templateDirectory, copyFilePath), projectPath);\n      } else {\n        skippedPaths.push(copyFilePath);\n      }\n    }\n    debug(`Copied files:`, copiedPaths);\n    debug(`Skipped files:`, copiedPaths);\n    return {\n      copiedPaths: copiedPaths,\n      skippedPaths: skippedPaths\n    };\n  });\n  return _copyPathsFromTemplateAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_defineProperty","require","_asyncToGenerator","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","createCopyFilesSuccessMessage","copyTemplateFilesAsync","_chalk","_interopRequireDefault","_fs","_path","_dir","_mergeGitIgnorePaths","debug","hasAllPlatformSpecificGitIgnores","projectRoot","platforms","reduce","p","platform","default","existsSync","join","_ref","skippedPaths","gitignore","message","dim","map","path","bold","didMerge","didClear","_x","_x2","_copyTemplateFilesAsync","_ref2","templateDirectory","copyResults","copyPathsFromTemplateAsync","copyFilePaths","hasPlatformSpecificGitIgnores","mergeGitIgnorePaths","_x3","_x4","_copyPathsFromTemplateAsync","_ref3","copiedPaths","copyFilePath","projectPath","directoryExistsAsync","copySync"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\prebuild\\copyTemplateFiles.ts"],"sourcesContent":["import { ModPlatform } from '@expo/config-plugins';\nimport { MergeResults } from '@expo/config-plugins/build/utils/generateCode';\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\n\nimport { copySync, directoryExistsAsync } from '../utils/dir';\nimport { mergeGitIgnorePaths } from '../utils/mergeGitIgnorePaths';\n\nconst debug = require('debug')('expo:prebuild:copyTemplateFiles') as typeof console.log;\n\ntype CopyFilesResults = {\n  /** Merge results for the root `.gitignore` file */\n  gitignore: MergeResults | null;\n  /** List of file paths that were copied from the template into the project. */\n  copiedPaths: string[];\n  /** List of file paths that were skipped due to a number of factors. */\n  skippedPaths: string[];\n};\n\n/**\n * Return true if the given platforms all have an internal `.gitignore` file.\n *\n * @param projectRoot\n * @param platforms\n */\nfunction hasAllPlatformSpecificGitIgnores(projectRoot: string, platforms: ModPlatform[]): boolean {\n  return platforms.reduce<boolean>(\n    (p, platform) => p && fs.existsSync(path.join(projectRoot, platform, '.gitignore')),\n    true\n  );\n}\n\n/** Create a custom log message based on the copy file results. */\nexport function createCopyFilesSuccessMessage(\n  platforms: ModPlatform[],\n  { skippedPaths, gitignore }: CopyFilesResults\n): string {\n  let message = `Created native project${platforms.length > 1 ? 's' : ''}`;\n\n  if (skippedPaths.length) {\n    message += chalk.dim(\n      ` | ${skippedPaths.map((path) => chalk.bold(`/${path}`)).join(', ')} already created`\n    );\n  }\n  if (!gitignore) {\n    message += chalk.dim(` | gitignore skipped`);\n  } else if (!gitignore.didMerge) {\n    message += chalk.dim(` | gitignore already synced`);\n  } else if (gitignore.didMerge && gitignore.didClear) {\n    message += chalk.dim(` | synced gitignore`);\n  }\n  return message;\n}\n\n/** Copy template files into the project and possibly merge the `.gitignore` files.  */\nexport async function copyTemplateFilesAsync(\n  projectRoot: string,\n  {\n    templateDirectory,\n    platforms,\n  }: {\n    /** File path to the template directory. */\n    templateDirectory: string;\n    /** List of platforms to copy against. */\n    platforms: ModPlatform[];\n  }\n): Promise<CopyFilesResults> {\n  const copyResults = await copyPathsFromTemplateAsync(projectRoot, {\n    templateDirectory,\n    copyFilePaths: platforms,\n  });\n\n  const hasPlatformSpecificGitIgnores = hasAllPlatformSpecificGitIgnores(\n    templateDirectory,\n    platforms\n  );\n  debug(`All platforms have an internal gitignore: ${hasPlatformSpecificGitIgnores}`);\n\n  // TODO: Remove gitignore modifications -- maybe move to `npx expo-doctor`\n  const gitignore = hasPlatformSpecificGitIgnores\n    ? null\n    : mergeGitIgnorePaths(\n        path.join(projectRoot, '.gitignore'),\n        path.join(templateDirectory, '.gitignore')\n      );\n\n  return { ...copyResults, gitignore };\n}\n\nasync function copyPathsFromTemplateAsync(\n  /** File path to the project. */\n  projectRoot: string,\n  {\n    templateDirectory,\n    copyFilePaths,\n  }: {\n    /** File path to the template project. */\n    templateDirectory: string;\n    /** List of relative paths to copy from the template to the project. */\n    copyFilePaths: string[];\n  }\n): Promise<Pick<CopyFilesResults, 'copiedPaths' | 'skippedPaths'>> {\n  const copiedPaths = [];\n  const skippedPaths = [];\n  for (const copyFilePath of copyFilePaths) {\n    const projectPath = path.join(projectRoot, copyFilePath);\n    if (!(await directoryExistsAsync(projectPath))) {\n      copiedPaths.push(copyFilePath);\n      copySync(path.join(templateDirectory, copyFilePath), projectPath);\n    } else {\n      skippedPaths.push(copyFilePath);\n    }\n  }\n  debug(`Copied files:`, copiedPaths);\n  debug(`Skipped files:`, copiedPaths);\n  return { copiedPaths, skippedPaths };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}