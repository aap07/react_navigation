{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolvePackageManagerOptions = resolvePackageManagerOptions;\nexports.resolveTemplateOption = resolveTemplateOption;\nexports.resolveSkipDependencyUpdate = resolveSkipDependencyUpdate;\nexports.resolvePlatformOption = resolvePlatformOption;\nexports.ensureValidPlatforms = ensureValidPlatforms;\nexports.assertPlatforms = assertPlatforms;\nvar _assert = _interopRequireDefault(require(\"assert\"));\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _fs = _interopRequireDefault(require(\"fs\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar Log = _interopRequireWildcard(require(\"../log\"));\nvar _errors = require(\"../utils/errors\");\nvar _url = require(\"../utils/url\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction resolvePackageManagerOptions(args) {\n  var managers = {\n    npm: args[\"--npm\"],\n    yarn: args[\"--yarn\"],\n    pnpm: args[\"--pnpm\"],\n    bun: args[\"--bun\"]\n  };\n  if ([managers.npm, managers.pnpm, managers.yarn, managers.bun, !!args[\"--no-install\"]].filter(Boolean).length > 1) {\n    throw new _errors.CommandError(\"BAD_ARGS\", \"Specify at most one of: --no-install, --npm, --pnpm, --yarn, --bun\");\n  }\n  return managers;\n}\nfunction resolveTemplateOption(template) {\n  if ((0, _url).validateUrl(template)) {\n    return template;\n  }\n  var templatePath = _path.default.resolve(template);\n  (0, _assert).default(_fs.default.existsSync(templatePath), \"template file does not exist: \" + templatePath);\n  (0, _assert).default(_fs.default.statSync(templatePath).isFile(), \"template must be a tar file created by running `npm pack` in a project: \" + templatePath);\n  return templatePath;\n}\nfunction resolveSkipDependencyUpdate(value) {\n  if (!value || typeof value !== \"string\") {\n    return [];\n  }\n  return value.split(\",\");\n}\nfunction resolvePlatformOption() {\n  var platform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"all\";\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    loose = _ref.loose;\n  switch (platform) {\n    case \"ios\":\n      return [\"ios\"];\n    case \"android\":\n      return [\"android\"];\n    case \"all\":\n      return loose || process.platform !== \"win32\" ? [\"android\", \"ios\"] : [\"android\"];\n    default:\n      return [platform];\n  }\n}\nfunction ensureValidPlatforms(platforms) {\n  if (process.platform === \"win32\" && platforms.includes(\"ios\")) {\n    Log.warn(_chalk.default`⚠️  Skipping generating the iOS native project files. Run {bold expo eject} again from macOS or Linux to generate the iOS project.\\n`);\n    return platforms.filter(function (platform) {\n      return platform !== \"ios\";\n    });\n  }\n  return platforms;\n}\nfunction assertPlatforms(platforms) {\n  if (!(platforms == null ? void 0 : platforms.length)) {\n    throw new _errors.CommandError(\"At least one platform must be enabled when syncing\");\n  }\n}","map":{"version":3,"names":["resolvePackageManagerOptions","resolveTemplateOption","resolveSkipDependencyUpdate","resolvePlatformOption","ensureValidPlatforms","assertPlatforms","_assert","_interopRequireDefault","require","_chalk","_fs","_path","Log","_interopRequireWildcard","_errors","_url","args","managers","npm","yarn","pnpm","bun","filter","Boolean","length","CommandError","template","validateUrl","templatePath","default","resolve","existsSync","statSync","isFile","value","split","platform","arguments","undefined","_ref","loose","process","platforms","includes","warn"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\prebuild\\resolveOptions.ts"],"sourcesContent":["import { ModPlatform } from '@expo/config-plugins';\nimport assert from 'assert';\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\n\nimport * as Log from '../log';\nimport { CommandError } from '../utils/errors';\nimport { validateUrl } from '../utils/url';\n\nexport function resolvePackageManagerOptions(args: any) {\n  const managers: Record<string, boolean> = {\n    npm: args['--npm'],\n    yarn: args['--yarn'],\n    pnpm: args['--pnpm'],\n    bun: args['--bun'],\n  };\n\n  if (\n    [managers.npm, managers.pnpm, managers.yarn, managers.bun, !!args['--no-install']].filter(\n      Boolean\n    ).length > 1\n  ) {\n    throw new CommandError(\n      'BAD_ARGS',\n      'Specify at most one of: --no-install, --npm, --pnpm, --yarn, --bun'\n    );\n  }\n\n  return managers;\n}\n\n/** Resolves a template option as a URL or file path pointing to a tar file. */\nexport function resolveTemplateOption(template: string) {\n  if (validateUrl(template)) {\n    return template;\n  }\n  const templatePath = path.resolve(template);\n  assert(fs.existsSync(templatePath), 'template file does not exist: ' + templatePath);\n  assert(\n    fs.statSync(templatePath).isFile(),\n    'template must be a tar file created by running `npm pack` in a project: ' + templatePath\n  );\n\n  return templatePath;\n}\n\n/** Resolves dependencies to skip from a string joined by `,`. Example: `react-native,expo,lodash` */\nexport function resolveSkipDependencyUpdate(value: any) {\n  if (!value || typeof value !== 'string') {\n    return [];\n  }\n  return value.split(',');\n}\n\n/** Returns an array of platforms based on the input platform identifier and runtime constraints. */\nexport function resolvePlatformOption(\n  platform: string = 'all',\n  { loose }: { loose?: boolean } = {}\n): ModPlatform[] {\n  switch (platform) {\n    case 'ios':\n      return ['ios'];\n    case 'android':\n      return ['android'];\n    case 'all':\n      return loose || process.platform !== 'win32' ? ['android', 'ios'] : ['android'];\n    default:\n      return [platform as ModPlatform];\n  }\n}\n\n/** Warns and filters out unsupported platforms based on the runtime constraints. Essentially this means no iOS on Windows devices. */\nexport function ensureValidPlatforms(platforms: ModPlatform[]): ModPlatform[] {\n  // Skip ejecting for iOS on Windows\n  if (process.platform === 'win32' && platforms.includes('ios')) {\n    Log.warn(\n      chalk`⚠️  Skipping generating the iOS native project files. Run {bold expo eject} again from macOS or Linux to generate the iOS project.\\n`\n    );\n    return platforms.filter((platform) => platform !== 'ios');\n  }\n  return platforms;\n}\n\n/** Asserts platform length must be greater than zero. */\nexport function assertPlatforms(platforms: ModPlatform[]) {\n  if (!platforms?.length) {\n    throw new CommandError('At least one platform must be enabled when syncing');\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}