{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.switchRegex = void 0;\nfunction switchRegex(text, cases) {\n  var isAll = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  for (var _ref of cases) {\n    var _ref2 = _slicedToArray(_ref, 2);\n    var reg = _ref2[0];\n    var callback = _ref2[1];\n    if (!reg) {\n      return callback([]) || '';\n    }\n    var results = text.match(reg);\n    if (results) {\n      var res = callback(results);\n      if (!isAll) {\n        return res || '';\n      }\n    }\n  }\n  return '';\n}\nexports.switchRegex = switchRegex;","map":{"version":3,"names":["switchRegex","text","cases","isAll","arguments","length","undefined","_ref","_ref2","_slicedToArray","reg","callback","results","match","res","exports"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\xcpretty\\src\\switchRegex.ts"],"sourcesContent":["export function switchRegex(\n  text: string,\n  cases: [RegExp | null, (matches: RegExpMatchArray) => string | void][],\n  isAll: boolean = false\n): string {\n  for (const [reg, callback] of cases) {\n    if (!reg) {\n      return callback([]) || '';\n    }\n    const results = text.match(reg);\n    if (results) {\n      const res = callback(results);\n      if (!isAll) {\n        return res || '';\n      }\n    }\n  }\n  return '';\n}\n"],"mappings":";;;;;;;AAAA,SAAgBA,WAAWA,CACzBC,IAAY,EACZC,KAAsE,EAChD;EAAA,IAAtBC,KAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAiB,KAAK;EAEtB,SAAAG,IAAA,IAA8BL,KAAK,EAAE;IAAA,IAAAM,KAAA,GAAAC,cAAA,CAAAF,IAAA;IAAA,IAAzBG,GAAG,GAAAF,KAAA;IAAA,IAAEG,QAAQ,GAAAH,KAAA;IACvB,IAAI,CAACE,GAAG,EAAE;MACR,OAAOC,QAAQ,CAAC,EAAE,CAAC,IAAI,EAAE;;IAE3B,IAAMC,OAAO,GAAGX,IAAI,CAACY,KAAK,CAACH,GAAG,CAAC;IAC/B,IAAIE,OAAO,EAAE;MACX,IAAME,GAAG,GAAGH,QAAQ,CAACC,OAAO,CAAC;MAC7B,IAAI,CAACT,KAAK,EAAE;QACV,OAAOW,GAAG,IAAI,EAAE;;;;EAItB,OAAO,EAAE;AACX;AAlBAC,OAAA,CAAAf,WAAA,GAAAA,WAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}