{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertInternalProjectRoot = assertInternalProjectRoot;\nexports.moduleNameIsDirectFileReference = moduleNameIsDirectFileReference;\nexports.normalizeStaticPlugin = normalizeStaticPlugin;\nexports.pluginFileName = void 0;\nexports.resolveConfigPluginExport = resolveConfigPluginExport;\nexports.resolveConfigPluginFunction = resolveConfigPluginFunction;\nexports.resolveConfigPluginFunctionWithInfo = resolveConfigPluginFunctionWithInfo;\nexports.resolvePluginForModule = resolvePluginForModule;\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n  _assert = function _assert() {\n    return data;\n  };\n  return data;\n}\nfunction _findUp() {\n  var data = _interopRequireDefault(require(\"find-up\"));\n  _findUp = function _findUp() {\n    return data;\n  };\n  return data;\n}\nfunction path() {\n  var data = _interopRequireWildcard(require(\"path\"));\n  path = function path() {\n    return data;\n  };\n  return data;\n}\nfunction _resolveFrom() {\n  var data = _interopRequireDefault(require(\"resolve-from\"));\n  _resolveFrom = function _resolveFrom() {\n    return data;\n  };\n  return data;\n}\nfunction _errors() {\n  var data = require(\"./errors\");\n  _errors = function _errors() {\n    return data;\n  };\n  return data;\n}\nfunction _modules() {\n  var data = require(\"./modules\");\n  _modules = function _modules() {\n    return data;\n  };\n  return data;\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar pluginFileName = 'app.plugin.js';\nexports.pluginFileName = pluginFileName;\nfunction findUpPackageJson(root) {\n  var packageJson = _findUp().default.sync('package.json', {\n    cwd: root\n  });\n  (0, _assert().default)(packageJson, `No package.json found for module \"${root}\"`);\n  return packageJson;\n}\nfunction resolvePluginForModule(projectRoot, modulePath) {\n  var resolved = _resolveFrom().default.silent(projectRoot, modulePath);\n  if (!resolved) {\n    throw new (_errors().PluginError)(`Failed to resolve plugin for module \"${modulePath}\" relative to \"${projectRoot}\"`, 'PLUGIN_NOT_FOUND');\n  }\n  if (moduleNameIsDirectFileReference(modulePath)) {\n    return {\n      isPluginFile: false,\n      filePath: resolved\n    };\n  }\n  return findUpPlugin(resolved);\n}\nfunction pathIsFilePath(name) {\n  return !!name.match(/^(\\.|~\\/|\\/)/g);\n}\nfunction moduleNameIsDirectFileReference(name) {\n  var _name$split;\n  if (pathIsFilePath(name)) {\n    return true;\n  }\n  var slashCount = (_name$split = name.split(path().sep)) === null || _name$split === void 0 ? void 0 : _name$split.length;\n  if (name.startsWith('@')) {\n    return slashCount > 2;\n  }\n  return slashCount > 1;\n}\nfunction resolveExpoPluginFile(root) {\n  var pluginModuleFile = _resolveFrom().default.silent(root, `./${pluginFileName}`);\n  if (pluginModuleFile && (0, _modules().fileExists)(pluginModuleFile)) {\n    return pluginModuleFile;\n  }\n  return null;\n}\nfunction findUpPlugin(root) {\n  var packageJson = findUpPackageJson(root);\n  var moduleRoot = path().dirname(packageJson);\n  var pluginFile = resolveExpoPluginFile(moduleRoot);\n  return {\n    filePath: pluginFile !== null && pluginFile !== void 0 ? pluginFile : root,\n    isPluginFile: !!pluginFile\n  };\n}\nfunction normalizeStaticPlugin(plugin) {\n  if (Array.isArray(plugin)) {\n    (0, _assert().default)(plugin.length > 0 && plugin.length < 3, `Wrong number of arguments provided for static config plugin, expected either 1 or 2, got ${plugin.length}`);\n    return plugin;\n  }\n  return [plugin, undefined];\n}\nfunction assertInternalProjectRoot(projectRoot) {\n  (0, _assert().default)(projectRoot, `Unexpected: Config \\`_internal.projectRoot\\` isn't defined by expo-cli, this is a bug.`);\n}\nfunction resolveConfigPluginFunction(projectRoot, pluginReference) {\n  var _resolveConfigPluginF = resolveConfigPluginFunctionWithInfo(projectRoot, pluginReference),\n    plugin = _resolveConfigPluginF.plugin;\n  return plugin;\n}\nfunction resolveConfigPluginFunctionWithInfo(projectRoot, pluginReference) {\n  var _resolvePluginForModu = resolvePluginForModule(projectRoot, pluginReference),\n    pluginFile = _resolvePluginForModu.filePath,\n    isPluginFile = _resolvePluginForModu.isPluginFile;\n  var result;\n  try {\n    result = requirePluginFile(pluginFile);\n  } catch (error) {\n    if (error instanceof SyntaxError) {\n      var learnMoreLink = `Learn more: https://docs.expo.dev/guides/config-plugins/#creating-a-plugin`;\n      if (!isPluginFile && !moduleNameIsDirectFileReference(pluginReference)) {\n        var pluginError = new (_errors().PluginError)(`Package \"${pluginReference}\" does not contain a valid config plugin.\\n${learnMoreLink}\\n\\n${error.message}`, 'INVALID_PLUGIN_IMPORT');\n        pluginError.stack = error.stack;\n        throw pluginError;\n      }\n    }\n    throw error;\n  }\n  var plugin = resolveConfigPluginExport({\n    plugin: result,\n    pluginFile: pluginFile,\n    pluginReference: pluginReference,\n    isPluginFile: isPluginFile\n  });\n  return {\n    plugin: plugin,\n    pluginFile: pluginFile,\n    pluginReference: pluginReference,\n    isPluginFile: isPluginFile\n  };\n}\nfunction resolveConfigPluginExport(_ref) {\n  var plugin = _ref.plugin,\n    pluginFile = _ref.pluginFile,\n    pluginReference = _ref.pluginReference,\n    isPluginFile = _ref.isPluginFile;\n  if (plugin.default != null) {\n    plugin = plugin.default;\n  }\n  if (typeof plugin !== 'function') {\n    var learnMoreLink = `Learn more: https://docs.expo.dev/guides/config-plugins/#creating-a-plugin`;\n    if (!isPluginFile && !moduleNameIsDirectFileReference(pluginReference)) {\n      throw new (_errors().PluginError)(`Package \"${pluginReference}\" does not contain a valid config plugin. Module must export a function from file: ${pluginFile}\\n${learnMoreLink}`, 'INVALID_PLUGIN_TYPE');\n    }\n    throw new (_errors().PluginError)(`Plugin \"${pluginReference}\" must export a function from file: ${pluginFile}. ${learnMoreLink}`, 'INVALID_PLUGIN_TYPE');\n  }\n  return plugin;\n}\nfunction requirePluginFile(filePath) {\n  try {\n    return require(filePath);\n  } catch (error) {\n    throw error;\n  }\n}","map":{"version":3,"names":["_assert","data","_interopRequireDefault","require","_findUp","path","_interopRequireWildcard","_resolveFrom","_errors","_modules","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","pluginFileName","exports","findUpPackageJson","root","packageJson","sync","cwd","resolvePluginForModule","projectRoot","modulePath","resolved","silent","PluginError","moduleNameIsDirectFileReference","isPluginFile","filePath","findUpPlugin","pathIsFilePath","name","match","_name$split","slashCount","split","sep","length","startsWith","resolveExpoPluginFile","pluginModuleFile","fileExists","moduleRoot","dirname","pluginFile","normalizeStaticPlugin","plugin","Array","isArray","undefined","assertInternalProjectRoot","resolveConfigPluginFunction","pluginReference","_resolveConfigPluginF","resolveConfigPluginFunctionWithInfo","_resolvePluginForModu","result","requirePluginFile","error","SyntaxError","learnMoreLink","pluginError","message","stack","resolveConfigPluginExport","_ref"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\utils\\plugin-resolver.ts"],"sourcesContent":["import assert from 'assert';\nimport findUp from 'find-up';\nimport * as path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { ConfigPlugin, StaticPlugin } from '../Plugin.types';\nimport { PluginError } from './errors';\nimport { fileExists } from './modules';\n\n// Default plugin entry file name.\nexport const pluginFileName = 'app.plugin.js';\n\nfunction findUpPackageJson(root: string): string {\n  const packageJson = findUp.sync('package.json', { cwd: root });\n  assert(packageJson, `No package.json found for module \"${root}\"`);\n  return packageJson;\n}\n\nexport function resolvePluginForModule(projectRoot: string, modulePath: string) {\n  const resolved = resolveFrom.silent(projectRoot, modulePath);\n  if (!resolved) {\n    throw new PluginError(\n      `Failed to resolve plugin for module \"${modulePath}\" relative to \"${projectRoot}\"`,\n      'PLUGIN_NOT_FOUND'\n    );\n  }\n  // If the modulePath is something like `@bacon/package/index.js` or `expo-foo/build/app`\n  // then skip resolving the module `app.plugin.js`\n  if (moduleNameIsDirectFileReference(modulePath)) {\n    return { isPluginFile: false, filePath: resolved };\n  }\n  return findUpPlugin(resolved);\n}\n\n// TODO: Test windows\nfunction pathIsFilePath(name: string): boolean {\n  // Matches lines starting with: . / ~/\n  return !!name.match(/^(\\.|~\\/|\\/)/g);\n}\n\nexport function moduleNameIsDirectFileReference(name: string): boolean {\n  if (pathIsFilePath(name)) {\n    return true;\n  }\n\n  const slashCount = name.split(path.sep)?.length;\n  // Orgs (like @expo/config ) should have more than one slash to be a direct file.\n  if (name.startsWith('@')) {\n    return slashCount > 2;\n  }\n\n  // Regular packages should be considered direct reference if they have more than one slash.\n  return slashCount > 1;\n}\n\nfunction resolveExpoPluginFile(root: string): string | null {\n  // Find the expo plugin root file\n  const pluginModuleFile = resolveFrom.silent(\n    root,\n    // use ./ so it isn't resolved as a node module\n    `./${pluginFileName}`\n  );\n\n  // If the default expo plugin file exists use it.\n  if (pluginModuleFile && fileExists(pluginModuleFile)) {\n    return pluginModuleFile;\n  }\n  return null;\n}\n\nfunction findUpPlugin(root: string): { filePath: string; isPluginFile: boolean } {\n  // Get the closest package.json to the node module\n  const packageJson = findUpPackageJson(root);\n  // resolve the root folder for the node module\n  const moduleRoot = path.dirname(packageJson);\n  // use whatever the initial resolved file was ex: `node_modules/my-package/index.js` or `./something.js`\n  const pluginFile = resolveExpoPluginFile(moduleRoot);\n  return { filePath: pluginFile ?? root, isPluginFile: !!pluginFile };\n}\n\nexport function normalizeStaticPlugin(plugin: StaticPlugin | ConfigPlugin | string): StaticPlugin {\n  if (Array.isArray(plugin)) {\n    assert(\n      plugin.length > 0 && plugin.length < 3,\n      `Wrong number of arguments provided for static config plugin, expected either 1 or 2, got ${plugin.length}`\n    );\n    return plugin;\n  }\n  return [plugin, undefined];\n}\n\nexport function assertInternalProjectRoot(projectRoot?: string): asserts projectRoot {\n  assert(\n    projectRoot,\n    `Unexpected: Config \\`_internal.projectRoot\\` isn't defined by expo-cli, this is a bug.`\n  );\n}\n\n// Resolve the module function and assert type\nexport function resolveConfigPluginFunction(projectRoot: string, pluginReference: string) {\n  const { plugin } = resolveConfigPluginFunctionWithInfo(projectRoot, pluginReference);\n  return plugin;\n}\n\n// Resolve the module function and assert type\nexport function resolveConfigPluginFunctionWithInfo(projectRoot: string, pluginReference: string) {\n  const { filePath: pluginFile, isPluginFile } = resolvePluginForModule(\n    projectRoot,\n    pluginReference\n  );\n  let result: any;\n  try {\n    result = requirePluginFile(pluginFile);\n  } catch (error) {\n    if (error instanceof SyntaxError) {\n      const learnMoreLink = `Learn more: https://docs.expo.dev/guides/config-plugins/#creating-a-plugin`;\n      // If the plugin reference is a node module, and that node module has a syntax error, then it probably doesn't have an official config plugin.\n      if (!isPluginFile && !moduleNameIsDirectFileReference(pluginReference)) {\n        const pluginError = new PluginError(\n          `Package \"${pluginReference}\" does not contain a valid config plugin.\\n${learnMoreLink}\\n\\n${error.message}`,\n          'INVALID_PLUGIN_IMPORT'\n        );\n        pluginError.stack = error.stack;\n        throw pluginError;\n      }\n    }\n    throw error;\n  }\n\n  const plugin = resolveConfigPluginExport({\n    plugin: result,\n    pluginFile,\n    pluginReference,\n    isPluginFile,\n  });\n  return { plugin, pluginFile, pluginReference, isPluginFile };\n}\n\n/**\n * - Resolve the exported contents of an Expo config (be it default or module.exports)\n * - Assert no promise exports\n * - Return config type\n * - Serialize config\n *\n * @param props.plugin plugin results\n * @param props.pluginFile plugin file path\n * @param props.pluginReference the string used to reference the plugin\n * @param props.isPluginFile is file path from the app.plugin.js module root\n */\nexport function resolveConfigPluginExport({\n  plugin,\n  pluginFile,\n  pluginReference,\n  isPluginFile,\n}: {\n  plugin: any;\n  pluginFile: string;\n  pluginReference: string;\n  isPluginFile: boolean;\n}): ConfigPlugin<unknown> {\n  if (plugin.default != null) {\n    plugin = plugin.default;\n  }\n  if (typeof plugin !== 'function') {\n    const learnMoreLink = `Learn more: https://docs.expo.dev/guides/config-plugins/#creating-a-plugin`;\n    // If the plugin reference is a node module, and that node module does not export a function then it probably doesn't have a config plugin.\n    if (!isPluginFile && !moduleNameIsDirectFileReference(pluginReference)) {\n      throw new PluginError(\n        `Package \"${pluginReference}\" does not contain a valid config plugin. Module must export a function from file: ${pluginFile}\\n${learnMoreLink}`,\n        'INVALID_PLUGIN_TYPE'\n      );\n    }\n    throw new PluginError(\n      `Plugin \"${pluginReference}\" must export a function from file: ${pluginFile}. ${learnMoreLink}`,\n      'INVALID_PLUGIN_TYPE'\n    );\n  }\n\n  return plugin;\n}\n\nfunction requirePluginFile(filePath: string): any {\n  try {\n    return require(filePath);\n  } catch (error) {\n    // TODO: Improve error messages\n    throw error;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}