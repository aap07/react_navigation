{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createEventsSocketEndpoint;\nfunction _ws() {\n  var data = require(\"ws\");\n  _ws = function _ws() {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function _cliTools() {\n    return data;\n  };\n  return data;\n}\nfunction _prettyFormat() {\n  var data = _interopRequireDefault(require(\"pretty-format\"));\n  _prettyFormat = function _prettyFormat() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar PROTOCOL_VERSION = 2;\nfunction parseMessage(data) {\n  try {\n    var message = JSON.parse(data);\n    if (message.version === PROTOCOL_VERSION) {\n      return message;\n    }\n    _cliTools().logger.error('Received message had wrong protocol version: ' + message.version);\n  } catch (_unused) {\n    _cliTools().logger.error('Failed to parse the message as JSON:\\n' + data);\n  }\n  return undefined;\n}\nfunction serializeMessage(message) {\n  var toSerialize = message;\n  if (message && message.error && message.error instanceof Error) {\n    toSerialize = _objectSpread(_objectSpread({}, message), {}, {\n      error: (0, _prettyFormat().default)(message.error, {\n        escapeString: true,\n        highlight: true,\n        maxDepth: 3,\n        min: true\n      })\n    });\n  } else if (message && message.type === 'client_log') {\n    toSerialize = _objectSpread(_objectSpread({}, message), {}, {\n      data: message.data.map(function (item) {\n        return typeof item === 'string' ? item : (0, _prettyFormat().default)(item, {\n          escapeString: true,\n          highlight: true,\n          maxDepth: 3,\n          min: true,\n          plugins: [_prettyFormat().default.plugins.ReactElement]\n        });\n      })\n    });\n  }\n  try {\n    return JSON.stringify(toSerialize);\n  } catch (e) {\n    _cliTools().logger.error('Failed to serialize: ' + e);\n    return null;\n  }\n}\nfunction createEventsSocketEndpoint(broadcast) {\n  var wss = new (_ws().Server)({\n    noServer: true,\n    verifyClient: function verifyClient(_ref) {\n      var origin = _ref.origin;\n      return !origin || origin.startsWith('http://localhost:') || origin.startsWith('file:');\n    }\n  });\n  var clients = new Map();\n  var nextClientId = 0;\n  function broadCastEvent(message) {\n    if (!clients.size) {\n      return;\n    }\n    var serialized = serializeMessage(message);\n    if (!serialized) {\n      return;\n    }\n    for (var ws of clients.values()) {\n      try {\n        ws.send(serialized);\n      } catch (e) {\n        _cliTools().logger.error(`Failed to send broadcast to client due to:\\n ${e.toString()}`);\n      }\n    }\n  }\n  wss.on('connection', function (clientWs) {\n    var clientId = `client#${nextClientId++}`;\n    clients.set(clientId, clientWs);\n    clientWs.onclose = clientWs.onerror = function () {\n      clients.delete(clientId);\n    };\n    clientWs.onmessage = function (event) {\n      var message = parseMessage(event.data.toString());\n      if (message == null) {\n        return;\n      }\n      if (message.type === 'command') {\n        try {\n          broadcast(message.command, message.params);\n        } catch (e) {\n          _cliTools().logger.error('Failed to forward message to clients: ', e);\n        }\n      } else {\n        _cliTools().logger.error('Unknown message type: ', message.type);\n      }\n    };\n  });\n  return {\n    server: wss,\n    reportEvent: function reportEvent(event) {\n      broadCastEvent(event);\n    }\n  };\n}","map":{"version":3,"names":["_defineProperty","require","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","exports","value","default","createEventsSocketEndpoint","_ws","data","_cliTools","_prettyFormat","_interopRequireDefault","obj","__esModule","PROTOCOL_VERSION","parseMessage","message","JSON","parse","version","logger","error","_unused","undefined","serializeMessage","toSerialize","Error","escapeString","highlight","maxDepth","min","type","map","item","plugins","ReactElement","stringify","broadcast","wss","Server","noServer","verifyClient","_ref","origin","startsWith","clients","Map","nextClientId","broadCastEvent","size","serialized","ws","values","send","toString","on","clientWs","clientId","set","onclose","onerror","delete","onmessage","event","command","params","server","reportEvent"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-server-api/build/websocket/createEventsSocketEndpoint.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createEventsSocketEndpoint;\nfunction _ws() {\n  const data = require(\"ws\");\n  _ws = function () {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function () {\n    return data;\n  };\n  return data;\n}\nfunction _prettyFormat() {\n  const data = _interopRequireDefault(require(\"pretty-format\"));\n  _prettyFormat = function () {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * This number is used to version the communication protocol between\n * Dev tooling like Flipper and Metro, so that in the future we can recognize\n * messages coming from old clients, so that it will be simpler to implement\n * backward compatibility.\n *\n * We start at 2 as the protocol is currently the same as used internally at FB,\n * which happens to be at version 2 as well.\n */\nconst PROTOCOL_VERSION = 2;\nfunction parseMessage(data) {\n  try {\n    const message = JSON.parse(data);\n    if (message.version === PROTOCOL_VERSION) {\n      return message;\n    }\n    _cliTools().logger.error('Received message had wrong protocol version: ' + message.version);\n  } catch {\n    _cliTools().logger.error('Failed to parse the message as JSON:\\n' + data);\n  }\n  return undefined;\n}\n\n/**\n * Two types of messages will arrive in this function,\n * 1) messages generated by Metro itself (through the reporter abstraction)\n *    those are yet to be serialized, and can contain any kind of data structure\n * 2) a specific event generated by Metro is `client_log`, which describes\n *    console.* calls in the app.\n *    The arguments send to the console are pretty printed so that they can be\n *    displayed in a nicer way in dev tools\n *\n * @param message\n */\nfunction serializeMessage(message) {\n  // We do want to send Metro report messages, but their contents is not guaranteed to be serializable.\n  // For some known types we will pretty print otherwise not serializable parts first:\n  let toSerialize = message;\n  if (message && message.error && message.error instanceof Error) {\n    toSerialize = {\n      ...message,\n      error: (0, _prettyFormat().default)(message.error, {\n        escapeString: true,\n        highlight: true,\n        maxDepth: 3,\n        min: true\n      })\n    };\n  } else if (message && message.type === 'client_log') {\n    toSerialize = {\n      ...message,\n      data: message.data.map(item => typeof item === 'string' ? item : (0, _prettyFormat().default)(item, {\n        escapeString: true,\n        highlight: true,\n        maxDepth: 3,\n        min: true,\n        plugins: [_prettyFormat().default.plugins.ReactElement]\n      }))\n    };\n  }\n  try {\n    return JSON.stringify(toSerialize);\n  } catch (e) {\n    _cliTools().logger.error('Failed to serialize: ' + e);\n    return null;\n  }\n}\n\n/**\n * Starts the eventsSocket at the given path\n *\n */\nfunction createEventsSocketEndpoint(broadcast) {\n  const wss = new (_ws().Server)({\n    noServer: true,\n    verifyClient({\n      origin\n    }) {\n      // This exposes the full JS logs and enables issuing commands like reload\n      // so let's make sure only locally running stuff can connect to it\n      // origin is only checked if it is set, e.g. when the request is made from a (CORS) browser\n      // any 'back-end' connection isn't CORS at all, and has full control over the origin header,\n      // so there is no point in checking it security wise\n      return !origin || origin.startsWith('http://localhost:') || origin.startsWith('file:');\n    }\n  });\n  const clients = new Map();\n  let nextClientId = 0;\n\n  /**\n   * broadCastEvent is called by reportEvent (below), which is called by the\n   * default reporter of this server, to make sure that all Metro events are\n   * broadcasted to all connected clients\n   * (that is, all devtools such as Flipper, _not_: connected apps)\n   *\n   * @param message\n   */\n  function broadCastEvent(message) {\n    if (!clients.size) {\n      return;\n    }\n    const serialized = serializeMessage(message);\n    if (!serialized) {\n      return;\n    }\n    for (const ws of clients.values()) {\n      try {\n        ws.send(serialized);\n      } catch (e) {\n        _cliTools().logger.error(`Failed to send broadcast to client due to:\\n ${e.toString()}`);\n      }\n    }\n  }\n  wss.on('connection', function (clientWs) {\n    const clientId = `client#${nextClientId++}`;\n    clients.set(clientId, clientWs);\n    clientWs.onclose = clientWs.onerror = () => {\n      clients.delete(clientId);\n    };\n    clientWs.onmessage = event => {\n      const message = parseMessage(event.data.toString());\n      if (message == null) {\n        return;\n      }\n      if (message.type === 'command') {\n        try {\n          /**\n           * messageSocket.broadcast (not to be confused with our own broadcast above)\n           * forwards a command to all connected React Native applications.\n           */\n          broadcast(message.command, message.params);\n        } catch (e) {\n          _cliTools().logger.error('Failed to forward message to clients: ', e);\n        }\n      } else {\n        _cliTools().logger.error('Unknown message type: ', message.type);\n      }\n    };\n  });\n  return {\n    server: wss,\n    reportEvent: event => {\n      broadCastEvent(event);\n    }\n  };\n}\n\n//# sourceMappingURL=createEventsSocketEndpoint.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}