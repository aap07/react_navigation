{"ast":null,"code":"'use strict';\n\nfunction capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction indent(nice, spaces) {\n  return nice.split('\\n').map(function (line, index) {\n    if (line.length === 0 || index === 0) {\n      return line;\n    }\n    var emptySpaces = new Array(spaces + 1).join(' ');\n    return emptySpaces + line;\n  }).join('\\n');\n}\nfunction toPascalCase(inString) {\n  if (inString.length === 0) {\n    return inString;\n  }\n  return inString[0].toUpperCase() + inString.slice(1);\n}\nfunction toSafeCppString(input) {\n  return input.split('-').map(toPascalCase).join('');\n}\nfunction getEnumName(moduleName, origEnumName) {\n  var uppercasedPropName = toSafeCppString(origEnumName);\n  return `${moduleName}${uppercasedPropName}`;\n}\nmodule.exports = {\n  capitalize: capitalize,\n  indent: indent,\n  toPascalCase: toPascalCase,\n  toSafeCppString: toSafeCppString,\n  getEnumName: getEnumName\n};","map":{"version":3,"names":["capitalize","string","charAt","toUpperCase","slice","indent","nice","spaces","split","map","line","index","length","emptySpaces","Array","join","toPascalCase","inString","toSafeCppString","input","getEnumName","moduleName","origEnumName","uppercasedPropName","module","exports"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native/codegen/lib/generators/Utils.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * @format\n */\n\n'use strict';\n\nfunction capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction indent(nice, spaces) {\n  return nice\n    .split('\\n')\n    .map((line, index) => {\n      if (line.length === 0 || index === 0) {\n        return line;\n      }\n      const emptySpaces = new Array(spaces + 1).join(' ');\n      return emptySpaces + line;\n    })\n    .join('\\n');\n}\nfunction toPascalCase(inString) {\n  if (inString.length === 0) {\n    return inString;\n  }\n  return inString[0].toUpperCase() + inString.slice(1);\n}\nfunction toSafeCppString(input) {\n  return input.split('-').map(toPascalCase).join('');\n}\nfunction getEnumName(moduleName, origEnumName) {\n  const uppercasedPropName = toSafeCppString(origEnumName);\n  return `${moduleName}${uppercasedPropName}`;\n}\nmodule.exports = {\n  capitalize,\n  indent,\n  toPascalCase,\n  toSafeCppString,\n  getEnumName,\n};\n"],"mappings":"AAUA,YAAY;;AAEZ,SAASA,UAAUA,CAACC,MAAM,EAAE;EAC1B,OAAOA,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGF,MAAM,CAACG,KAAK,CAAC,CAAC,CAAC;AACzD;AACA,SAASC,MAAMA,CAACC,IAAI,EAAEC,MAAM,EAAE;EAC5B,OAAOD,IAAI,CACRE,KAAK,CAAC,IAAI,CAAC,CACXC,GAAG,CAAC,UAACC,IAAI,EAAEC,KAAK,EAAK;IACpB,IAAID,IAAI,CAACE,MAAM,KAAK,CAAC,IAAID,KAAK,KAAK,CAAC,EAAE;MACpC,OAAOD,IAAI;IACb;IACA,IAAMG,WAAW,GAAG,IAAIC,KAAK,CAACP,MAAM,GAAG,CAAC,CAAC,CAACQ,IAAI,CAAC,GAAG,CAAC;IACnD,OAAOF,WAAW,GAAGH,IAAI;EAC3B,CAAC,CAAC,CACDK,IAAI,CAAC,IAAI,CAAC;AACf;AACA,SAASC,YAAYA,CAACC,QAAQ,EAAE;EAC9B,IAAIA,QAAQ,CAACL,MAAM,KAAK,CAAC,EAAE;IACzB,OAAOK,QAAQ;EACjB;EACA,OAAOA,QAAQ,CAAC,CAAC,CAAC,CAACd,WAAW,CAAC,CAAC,GAAGc,QAAQ,CAACb,KAAK,CAAC,CAAC,CAAC;AACtD;AACA,SAASc,eAAeA,CAACC,KAAK,EAAE;EAC9B,OAAOA,KAAK,CAACX,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACO,YAAY,CAAC,CAACD,IAAI,CAAC,EAAE,CAAC;AACpD;AACA,SAASK,WAAWA,CAACC,UAAU,EAAEC,YAAY,EAAE;EAC7C,IAAMC,kBAAkB,GAAGL,eAAe,CAACI,YAAY,CAAC;EACxD,OAAQ,GAAED,UAAW,GAAEE,kBAAmB,EAAC;AAC7C;AACAC,MAAM,CAACC,OAAO,GAAG;EACfzB,UAAU,EAAVA,UAAU;EACVK,MAAM,EAANA,MAAM;EACNW,YAAY,EAAZA,YAAY;EACZE,eAAe,EAAfA,eAAe;EACfE,WAAW,EAAXA;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}