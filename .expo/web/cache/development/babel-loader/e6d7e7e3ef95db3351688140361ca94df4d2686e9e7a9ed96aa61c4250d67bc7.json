{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _excluded = [\"plugins\", \"map\", \"parser\", \"stringifier\", \"syntax\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPostcssConfigHash = getPostcssConfigHash;\nexports.pluginFactory = pluginFactory;\nexports.resolvePostcssConfig = resolvePostcssConfig;\nexports.transformPostCssModule = transformPostCssModule;\nfunction _jsonFile() {\n  var data = _interopRequireDefault(require(\"@expo/json-file\"));\n  _jsonFile = function _jsonFile() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _resolveFrom() {\n  var data = _interopRequireDefault(require(\"resolve-from\"));\n  _resolveFrom = function _resolveFrom() {\n    return data;\n  };\n  return data;\n}\nfunction _require() {\n  var data = require(\"./utils/require\");\n  _require = function _require() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nvar CONFIG_FILE_NAME = 'postcss.config';\nvar debug = require('debug')('expo:metro:transformer:postcss');\nfunction transformPostCssModule(_x, _x2) {\n  return _transformPostCssModule.apply(this, arguments);\n}\nfunction _transformPostCssModule() {\n  _transformPostCssModule = _asyncToGenerator(function* (projectRoot, _ref) {\n    var src = _ref.src,\n      filename = _ref.filename;\n    var inputConfig = resolvePostcssConfig(projectRoot);\n    if (!inputConfig) {\n      return src;\n    }\n    return yield processWithPostcssInputConfigAsync(projectRoot, {\n      inputConfig: inputConfig,\n      src: src,\n      filename: filename\n    });\n  });\n  return _transformPostCssModule.apply(this, arguments);\n}\nfunction processWithPostcssInputConfigAsync(_x3, _x4) {\n  return _processWithPostcssInputConfigAsync.apply(this, arguments);\n}\nfunction _processWithPostcssInputConfigAsync() {\n  _processWithPostcssInputConfigAsync = _asyncToGenerator(function* (projectRoot, _ref2) {\n    var src = _ref2.src,\n      filename = _ref2.filename,\n      inputConfig = _ref2.inputConfig;\n    var _yield$parsePostcssCo = yield parsePostcssConfigAsync(projectRoot, {\n        config: inputConfig,\n        resourcePath: filename\n      }),\n      plugins = _yield$parsePostcssCo.plugins,\n      processOptions = _yield$parsePostcssCo.processOptions;\n    debug('options:', processOptions);\n    debug('plugins:', plugins);\n    var postcss = yield Promise.resolve().then(function () {\n      return _interopRequireWildcard(require('postcss'));\n    });\n    var processor = postcss.default(plugins);\n    var _yield$processor$proc = yield processor.process(src, processOptions),\n      content = _yield$processor$proc.content;\n    return content;\n  });\n  return _processWithPostcssInputConfigAsync.apply(this, arguments);\n}\nfunction parsePostcssConfigAsync(_x5, _x6) {\n  return _parsePostcssConfigAsync.apply(this, arguments);\n}\nfunction _parsePostcssConfigAsync() {\n  _parsePostcssConfigAsync = _asyncToGenerator(function* (projectRoot, _ref3) {\n    var file = _ref3.resourcePath,\n      _ref3$config = _ref3.config;\n    _ref3$config = _ref3$config === void 0 ? {} : _ref3$config;\n    var inputPlugins = _ref3$config.plugins,\n      map = _ref3$config.map,\n      parser = _ref3$config.parser,\n      stringifier = _ref3$config.stringifier,\n      syntax = _ref3$config.syntax,\n      config = _objectWithoutProperties(_ref3$config, _excluded);\n    var factory = pluginFactory();\n    factory(inputPlugins);\n    var plugins = _toConsumableArray(factory()).map(function (item) {\n      var _item = _slicedToArray(item, 2),\n        plugin = _item[0],\n        options = _item[1];\n      if (typeof plugin === 'string') {\n        return loadPlugin(projectRoot, plugin, options, file);\n      }\n      return plugin;\n    });\n    if (config.from) {\n      config.from = _path().default.resolve(projectRoot, config.from);\n    }\n    if (config.to) {\n      config.to = _path().default.resolve(projectRoot, config.to);\n    }\n    var processOptions = {\n      from: file,\n      to: file,\n      map: false\n    };\n    if (typeof parser === 'string') {\n      try {\n        var _resolveFrom$silent;\n        processOptions.parser = yield (0, _require().tryRequireThenImport)((_resolveFrom$silent = _resolveFrom().default.silent(projectRoot, parser)) !== null && _resolveFrom$silent !== void 0 ? _resolveFrom$silent : parser);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new Error(`Loading PostCSS \"${parser}\" parser failed: ${error.message}\\n\\n(@${file})`);\n        }\n        throw error;\n      }\n    }\n    if (typeof stringifier === 'string') {\n      try {\n        var _resolveFrom$silent2;\n        processOptions.stringifier = yield (0, _require().tryRequireThenImport)((_resolveFrom$silent2 = _resolveFrom().default.silent(projectRoot, stringifier)) !== null && _resolveFrom$silent2 !== void 0 ? _resolveFrom$silent2 : stringifier);\n      } catch (error) {\n        if (error instanceof Error) {\n          throw new Error(`Loading PostCSS \"${stringifier}\" stringifier failed: ${error.message}\\n\\n(@${file})`);\n        }\n        throw error;\n      }\n    }\n    if (typeof syntax === 'string') {\n      try {\n        var _resolveFrom$silent3;\n        processOptions.syntax = yield (0, _require().tryRequireThenImport)((_resolveFrom$silent3 = _resolveFrom().default.silent(projectRoot, syntax)) !== null && _resolveFrom$silent3 !== void 0 ? _resolveFrom$silent3 : syntax);\n      } catch (error) {\n        throw new Error(`Loading PostCSS \"${syntax}\" syntax failed: ${error.message}\\n\\n(@${file})`);\n      }\n    }\n    if (map === true) {\n      processOptions.map = {\n        inline: true\n      };\n    }\n    return {\n      plugins: plugins,\n      processOptions: processOptions\n    };\n  });\n  return _parsePostcssConfigAsync.apply(this, arguments);\n}\nfunction loadPlugin(projectRoot, plugin, options, file) {\n  try {\n    debug('load plugin:', plugin);\n    var loadedPlugin = require((0, _resolveFrom().default)(projectRoot, plugin));\n    if (loadedPlugin.default) {\n      loadedPlugin = loadedPlugin.default;\n    }\n    if (!options || !Object.keys(options).length) {\n      return loadedPlugin;\n    }\n    return loadedPlugin(options);\n  } catch (error) {\n    if (error instanceof Error) {\n      throw new Error(`Loading PostCSS \"${plugin}\" plugin failed: ${error.message}\\n\\n(@${file})`);\n    }\n    throw error;\n  }\n}\nfunction pluginFactory() {\n  var listOfPlugins = new Map();\n  return function (plugins) {\n    if (typeof plugins === 'undefined') {\n      return listOfPlugins;\n    }\n    if (Array.isArray(plugins)) {\n      for (var plugin of plugins) {\n        if (Array.isArray(plugin)) {\n          var _plugin = _slicedToArray(plugin, 2),\n            name = _plugin[0],\n            options = _plugin[1];\n          if (typeof name !== 'string') {\n            throw new Error(`PostCSS plugin must be a string, but \"${name}\" was found. Please check your configuration.`);\n          }\n          listOfPlugins.set(name, options);\n        } else if (plugin && typeof plugin === 'function') {\n          listOfPlugins.set(plugin, undefined);\n        } else if (plugin && Object.keys(plugin).length === 1 && (typeof plugin[Object.keys(plugin)[0]] === 'object' || typeof plugin[Object.keys(plugin)[0]] === 'boolean') && plugin[Object.keys(plugin)[0]] !== null) {\n          var _Object$keys = Object.keys(plugin),\n            _Object$keys2 = _slicedToArray(_Object$keys, 1),\n            _name = _Object$keys2[0];\n          var _options = plugin[_name];\n          if (_options === false) {\n            listOfPlugins.delete(_name);\n          } else {\n            listOfPlugins.set(_name, _options);\n          }\n        } else if (plugin) {\n          listOfPlugins.set(plugin, undefined);\n        }\n      }\n    } else {\n      var objectPlugins = Object.entries(plugins);\n      for (var _ref4 of objectPlugins) {\n        var _ref5 = _slicedToArray(_ref4, 2);\n        var _name2 = _ref5[0];\n        var _options2 = _ref5[1];\n        if (_options2 === false) {\n          listOfPlugins.delete(_name2);\n        } else {\n          listOfPlugins.set(_name2, _options2);\n        }\n      }\n    }\n    return listOfPlugins;\n  };\n}\nfunction resolvePostcssConfig(projectRoot) {\n  var jsConfigPath = _path().default.join(projectRoot, CONFIG_FILE_NAME + '.js');\n  if (_fs().default.existsSync(jsConfigPath)) {\n    debug('load file:', jsConfigPath);\n    return (0, _require().requireUncachedFile)(jsConfigPath);\n  }\n  var jsonConfigPath = _path().default.join(projectRoot, CONFIG_FILE_NAME + '.json');\n  if (_fs().default.existsSync(jsonConfigPath)) {\n    debug('load file:', jsonConfigPath);\n    return _jsonFile().default.read(jsonConfigPath, {\n      json5: true\n    });\n  }\n  return null;\n}\nfunction getPostcssConfigHash(projectRoot) {\n  var _require2 = require('metro-cache'),\n    stableHash = _require2.stableHash;\n  var jsConfigPath = _path().default.join(projectRoot, CONFIG_FILE_NAME + '.js');\n  if (_fs().default.existsSync(jsConfigPath)) {\n    return stableHash(_fs().default.readFileSync(jsConfigPath, 'utf8')).toString('hex');\n  }\n  var jsonConfigPath = _path().default.join(projectRoot, CONFIG_FILE_NAME + '.json');\n  if (_fs().default.existsSync(jsonConfigPath)) {\n    return stableHash(_fs().default.readFileSync(jsonConfigPath, 'utf8')).toString('hex');\n  }\n  return null;\n}","map":{"version":3,"names":["_jsonFile","data","_interopRequireDefault","require","_fs","_path","_resolveFrom","_require","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireWildcard","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","CONFIG_FILE_NAME","debug","transformPostCssModule","_x","_x2","_transformPostCssModule","apply","arguments","_asyncToGenerator","projectRoot","_ref","src","filename","inputConfig","resolvePostcssConfig","processWithPostcssInputConfigAsync","_x3","_x4","_processWithPostcssInputConfigAsync","_ref2","_yield$parsePostcssCo","parsePostcssConfigAsync","config","resourcePath","plugins","processOptions","postcss","Promise","resolve","then","processor","_yield$processor$proc","process","content","_x5","_x6","_parsePostcssConfigAsync","_ref3","file","_ref3$config","inputPlugins","map","parser","stringifier","syntax","_objectWithoutProperties","_excluded","factory","pluginFactory","_toConsumableArray","item","_item","_slicedToArray","plugin","options","loadPlugin","from","to","_resolveFrom$silent","tryRequireThenImport","silent","error","Error","message","_resolveFrom$silent2","_resolveFrom$silent3","inline","loadedPlugin","keys","length","listOfPlugins","Map","Array","isArray","_plugin","name","undefined","_Object$keys","_Object$keys2","delete","objectPlugins","entries","_ref4","_ref5","jsConfigPath","join","existsSync","requireUncachedFile","jsonConfigPath","read","json5","getPostcssConfigHash","_require2","stableHash","readFileSync","toString"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\metro-config\\src\\transform-worker\\postcss.ts"],"sourcesContent":["/**\n * Copyright © 2023 650 Industries.\n * Copyright JS Foundation and other contributors\n *\n * https://github.com/webpack-contrib/postcss-loader/\n */\nimport JsonFile from '@expo/json-file';\nimport fs from 'fs';\nimport path from 'path';\nimport type { AcceptedPlugin, ProcessOptions } from 'postcss';\nimport resolveFrom from 'resolve-from';\n\nimport { requireUncachedFile, tryRequireThenImport } from './utils/require';\n\ntype PostCSSInputConfig = {\n  plugins?: any[];\n  from?: string;\n  to?: string;\n  syntax?: string;\n  map?: boolean;\n  parser?: string;\n  stringifier?: string;\n};\n\nconst CONFIG_FILE_NAME = 'postcss.config';\n\nconst debug = require('debug')('expo:metro:transformer:postcss');\n\nexport async function transformPostCssModule(\n  projectRoot: string,\n  { src, filename }: { src: string; filename: string }\n): Promise<string> {\n  const inputConfig = resolvePostcssConfig(projectRoot);\n\n  if (!inputConfig) {\n    return src;\n  }\n\n  return await processWithPostcssInputConfigAsync(projectRoot, {\n    inputConfig,\n    src,\n    filename,\n  });\n}\n\nasync function processWithPostcssInputConfigAsync(\n  projectRoot: string,\n  { src, filename, inputConfig }: { src: string; filename: string; inputConfig: PostCSSInputConfig }\n) {\n  const { plugins, processOptions } = await parsePostcssConfigAsync(projectRoot, {\n    config: inputConfig,\n    resourcePath: filename,\n  });\n\n  debug('options:', processOptions);\n  debug('plugins:', plugins);\n\n  // TODO: Surely this can be cached...\n  const postcss = await import('postcss');\n  const processor = postcss.default(plugins);\n  const { content } = await processor.process(src, processOptions);\n\n  return content;\n}\n\nasync function parsePostcssConfigAsync(\n  projectRoot: string,\n  {\n    resourcePath: file,\n    config: { plugins: inputPlugins, map, parser, stringifier, syntax, ...config } = {},\n  }: {\n    resourcePath: string;\n    config: PostCSSInputConfig;\n  }\n): Promise<{ plugins: AcceptedPlugin[]; processOptions: ProcessOptions }> {\n  const factory = pluginFactory();\n\n  factory(inputPlugins);\n  // delete config.plugins;\n\n  const plugins = [...factory()].map((item) => {\n    const [plugin, options] = item;\n\n    if (typeof plugin === 'string') {\n      return loadPlugin(projectRoot, plugin, options, file);\n    }\n\n    return plugin;\n  });\n\n  if (config.from) {\n    config.from = path.resolve(projectRoot, config.from);\n  }\n\n  if (config.to) {\n    config.to = path.resolve(projectRoot, config.to);\n  }\n\n  const processOptions: Partial<ProcessOptions> = {\n    from: file,\n    to: file,\n    map: false,\n  };\n\n  if (typeof parser === 'string') {\n    try {\n      processOptions.parser = await tryRequireThenImport(\n        resolveFrom.silent(projectRoot, parser) ?? parser\n      );\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        throw new Error(\n          `Loading PostCSS \"${parser}\" parser failed: ${error.message}\\n\\n(@${file})`\n        );\n      }\n      throw error;\n    }\n  }\n\n  if (typeof stringifier === 'string') {\n    try {\n      processOptions.stringifier = await tryRequireThenImport(\n        resolveFrom.silent(projectRoot, stringifier) ?? stringifier\n      );\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        throw new Error(\n          `Loading PostCSS \"${stringifier}\" stringifier failed: ${error.message}\\n\\n(@${file})`\n        );\n      }\n      throw error;\n    }\n  }\n\n  if (typeof syntax === 'string') {\n    try {\n      processOptions.syntax = await tryRequireThenImport(\n        resolveFrom.silent(projectRoot, syntax) ?? syntax\n      );\n    } catch (error: any) {\n      throw new Error(`Loading PostCSS \"${syntax}\" syntax failed: ${error.message}\\n\\n(@${file})`);\n    }\n  }\n\n  if (map === true) {\n    // https://github.com/postcss/postcss/blob/master/docs/source-maps.md\n    processOptions.map = { inline: true };\n  }\n\n  return { plugins, processOptions };\n}\n\nfunction loadPlugin(projectRoot: string, plugin: string, options: unknown, file: string) {\n  try {\n    debug('load plugin:', plugin);\n\n    // e.g. `tailwindcss`\n    let loadedPlugin = require(resolveFrom(projectRoot, plugin));\n\n    if (loadedPlugin.default) {\n      loadedPlugin = loadedPlugin.default;\n    }\n\n    if (!options || !Object.keys(options).length) {\n      return loadedPlugin;\n    }\n\n    return loadedPlugin(options);\n  } catch (error: unknown) {\n    if (error instanceof Error) {\n      throw new Error(`Loading PostCSS \"${plugin}\" plugin failed: ${error.message}\\n\\n(@${file})`);\n    }\n    throw error;\n  }\n}\n\nexport function pluginFactory() {\n  const listOfPlugins = new Map<string, any>();\n\n  return (plugins?: any) => {\n    if (typeof plugins === 'undefined') {\n      return listOfPlugins;\n    }\n\n    if (Array.isArray(plugins)) {\n      for (const plugin of plugins) {\n        if (Array.isArray(plugin)) {\n          const [name, options] = plugin;\n\n          if (typeof name !== 'string') {\n            throw new Error(\n              `PostCSS plugin must be a string, but \"${name}\" was found. Please check your configuration.`\n            );\n          }\n\n          listOfPlugins.set(name, options);\n        } else if (plugin && typeof plugin === 'function') {\n          listOfPlugins.set(plugin, undefined);\n        } else if (\n          plugin &&\n          Object.keys(plugin).length === 1 &&\n          (typeof plugin[Object.keys(plugin)[0]] === 'object' ||\n            typeof plugin[Object.keys(plugin)[0]] === 'boolean') &&\n          plugin[Object.keys(plugin)[0]] !== null\n        ) {\n          const [name] = Object.keys(plugin);\n          const options = plugin[name];\n\n          if (options === false) {\n            listOfPlugins.delete(name);\n          } else {\n            listOfPlugins.set(name, options);\n          }\n        } else if (plugin) {\n          listOfPlugins.set(plugin, undefined);\n        }\n      }\n    } else {\n      const objectPlugins = Object.entries(plugins);\n\n      for (const [name, options] of objectPlugins) {\n        if (options === false) {\n          listOfPlugins.delete(name);\n        } else {\n          listOfPlugins.set(name, options);\n        }\n      }\n    }\n\n    return listOfPlugins;\n  };\n}\n\nexport function resolvePostcssConfig(projectRoot: string): PostCSSInputConfig | null {\n  // TODO: Maybe support platform-specific postcss config files in the future.\n  const jsConfigPath = path.join(projectRoot, CONFIG_FILE_NAME + '.js');\n\n  if (fs.existsSync(jsConfigPath)) {\n    debug('load file:', jsConfigPath);\n    return requireUncachedFile(jsConfigPath);\n  }\n\n  const jsonConfigPath = path.join(projectRoot, CONFIG_FILE_NAME + '.json');\n\n  if (fs.existsSync(jsonConfigPath)) {\n    debug('load file:', jsonConfigPath);\n    return JsonFile.read(jsonConfigPath, { json5: true });\n  }\n\n  return null;\n}\n\nexport function getPostcssConfigHash(projectRoot: string): string | null {\n  // TODO: Maybe recurse plugins and add versions to the hash in the future.\n  const { stableHash } = require('metro-cache');\n\n  const jsConfigPath = path.join(projectRoot, CONFIG_FILE_NAME + '.js');\n  if (fs.existsSync(jsConfigPath)) {\n    return stableHash(fs.readFileSync(jsConfigPath, 'utf8')).toString('hex');\n  }\n\n  const jsonConfigPath = path.join(projectRoot, CONFIG_FILE_NAME + '.json');\n  if (fs.existsSync(jsonConfigPath)) {\n    return stableHash(fs.readFileSync(jsonConfigPath, 'utf8')).toString('hex');\n  }\n  return null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}