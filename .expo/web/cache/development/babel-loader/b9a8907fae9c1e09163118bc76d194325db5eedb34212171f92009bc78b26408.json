{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/cli/node_modules/type-fest/source/value-of.d.ts"],"sourcesContent":["/**\nCreate a union of the given object's values, and optionally specify which keys to get the values from.\n\nPlease upvote [this issue](https://github.com/microsoft/TypeScript/issues/31438) if you want to have this type as a built-in in TypeScript.\n\n@example\n```\n// data.json\n{\n\t'foo': 1,\n\t'bar': 2,\n\t'biz': 3\n}\n\n// main.ts\nimport {ValueOf} from 'type-fest';\nimport data = require('./data.json');\n\nexport function getData(name: string): ValueOf<typeof data> {\n\treturn data[name];\n}\n\nexport function onlyBar(name: string): ValueOf<typeof data, 'bar'> {\n\treturn data[name];\n}\n\n// file.ts\nimport {getData, onlyBar} from './main';\n\ngetData('foo');\n//=> 1\n\nonlyBar('foo');\n//=> TypeError ...\n\nonlyBar('bar');\n//=> 2\n```\n*/\nexport type ValueOf<ObjectType, ValueType extends keyof ObjectType = keyof ObjectType> = ObjectType[ValueType];\n"],"mappings":""},"metadata":{},"sourceType":"script","externalDependencies":[]}