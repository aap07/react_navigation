{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar path_1 = tslib_1.__importDefault(require(\"path\"));\nvar fs_1 = require(\"fs\");\nvar mkdirp_1 = require(\"mkdirp\");\nvar lodash_1 = require(\"lodash\");\nvar applicationConfigPath = require(\"application-config-path\");\nvar eol_1 = tslib_1.__importDefault(require(\"eol\"));\nvar utils_1 = require(\"./utils\");\nexports.VALID_IP = /(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}/;\nexports.VALID_DOMAIN = /^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.?)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$/i;\nexports.isMac = process.platform === 'darwin';\nexports.isLinux = process.platform === 'linux';\nexports.isWindows = process.platform === 'win32';\nexports.configDir = applicationConfigPath('devcert');\nexports.configPath = path_1.default.join.bind(path_1.default, exports.configDir);\nexports.domainsDir = exports.configPath('domains');\nexports.pathForDomain = path_1.default.join.bind(path_1.default, exports.domainsDir);\nexports.caVersionFile = exports.configPath('devcert-ca-version');\nexports.opensslSerialFilePath = exports.configPath('certificate-authority', 'serial');\nexports.opensslDatabaseFilePath = exports.configPath('certificate-authority', 'index.txt');\nexports.caSelfSignConfig = path_1.default.join(__dirname, '../openssl-configurations/certificate-authority-self-signing.conf');\nfunction withDomainSigningRequestConfig(domain, cb) {\n  var tmpFile = utils_1.mktmp();\n  var source = fs_1.readFileSync(path_1.default.join(__dirname, '../openssl-configurations/domain-certificate-signing-requests.conf'), 'utf-8');\n  var template = lodash_1.template(source);\n  var result = template({\n    domain: domain\n  });\n  fs_1.writeFileSync(tmpFile, eol_1.default.auto(result));\n  cb(tmpFile);\n  fs_1.unlinkSync(tmpFile);\n}\nexports.withDomainSigningRequestConfig = withDomainSigningRequestConfig;\nfunction withDomainCertificateConfig(domain, cb) {\n  var tmpFile = utils_1.mktmp();\n  var source = fs_1.readFileSync(path_1.default.join(__dirname, '../openssl-configurations/domain-certificates.conf'), 'utf-8');\n  var template = lodash_1.template(source);\n  var result = template({\n    domain: domain,\n    serialFile: exports.opensslSerialFilePath,\n    databaseFile: exports.opensslDatabaseFilePath,\n    domainDir: exports.pathForDomain(domain)\n  });\n  fs_1.writeFileSync(tmpFile, eol_1.default.auto(result));\n  cb(tmpFile);\n  fs_1.unlinkSync(tmpFile);\n}\nexports.withDomainCertificateConfig = withDomainCertificateConfig;\nexports.rootCADir = exports.configPath('certificate-authority');\nexports.rootCAKeyPath = exports.configPath('certificate-authority', 'private-key.key');\nexports.rootCACertPath = exports.configPath('certificate-authority', 'certificate.cert');\nfunction getLegacyConfigDir() {\n  if (exports.isWindows && process.env.LOCALAPPDATA) {\n    return path_1.default.join(process.env.LOCALAPPDATA, 'devcert', 'config');\n  } else {\n    var uid = process.getuid && process.getuid();\n    var userHome = exports.isLinux && uid === 0 ? path_1.default.resolve('/usr/local/share') : require('os').homedir();\n    return path_1.default.join(userHome, '.config', 'devcert');\n  }\n}\nexports.getLegacyConfigDir = getLegacyConfigDir;\nfunction ensureConfigDirs() {\n  mkdirp_1.sync(exports.configDir);\n  mkdirp_1.sync(exports.domainsDir);\n  mkdirp_1.sync(exports.rootCADir);\n}\nexports.ensureConfigDirs = ensureConfigDirs;\nensureConfigDirs();","map":{"version":3,"names":["path_1","tslib_1","__importDefault","require","fs_1","mkdirp_1","lodash_1","applicationConfigPath","eol_1","utils_1","exports","VALID_IP","VALID_DOMAIN","isMac","process","platform","isLinux","isWindows","configDir","configPath","default","join","bind","domainsDir","pathForDomain","caVersionFile","opensslSerialFilePath","opensslDatabaseFilePath","caSelfSignConfig","__dirname","withDomainSigningRequestConfig","domain","cb","tmpFile","mktmp","source","readFileSync","template","result","writeFileSync","auto","unlinkSync","withDomainCertificateConfig","serialFile","databaseFile","domainDir","rootCADir","rootCAKeyPath","rootCACertPath","getLegacyConfigDir","env","LOCALAPPDATA","uid","getuid","userHome","resolve","homedir","ensureConfigDirs","sync"],"sources":["\\Users\\evanbacon\\Documents\\GitHub\\devcert\\constants.ts"],"sourcesContent":["import path from 'path';\nimport { unlinkSync as rm, writeFileSync as writeFile, readFileSync as readFile } from 'fs';\nimport { sync as mkdirp } from 'mkdirp';\nimport { template as makeTemplate } from 'lodash';\nimport applicationConfigPath = require('application-config-path');\nimport eol from 'eol';\nimport { mktmp } from './utils';\n\nexport const VALID_IP = /(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}/;\nexport const VALID_DOMAIN = /^(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\\.?)+[a-z0-9][a-z0-9-]{0,61}[a-z0-9]$/i;\n\n// Platform shortcuts\nexport const isMac = process.platform === 'darwin';\nexport const isLinux = process.platform === 'linux';\nexport const isWindows = process.platform === 'win32';\n\n// Common paths\nexport const configDir = applicationConfigPath('devcert');\nexport const configPath: (...pathSegments: string[]) => string = path.join.bind(path, configDir);\n\nexport const domainsDir = configPath('domains');\nexport const pathForDomain: (domain: string, ...pathSegments: string[]) => string = path.join.bind(path, domainsDir)\n\nexport const caVersionFile = configPath('devcert-ca-version');\nexport const opensslSerialFilePath = configPath('certificate-authority', 'serial');\nexport const opensslDatabaseFilePath = configPath('certificate-authority', 'index.txt');\nexport const caSelfSignConfig = path.join(__dirname, '../openssl-configurations/certificate-authority-self-signing.conf');\n\nexport function withDomainSigningRequestConfig(domain: string, cb: (filepath: string) => void) {\n  let tmpFile = mktmp();\n  let source = readFile(path.join(__dirname, '../openssl-configurations/domain-certificate-signing-requests.conf'), 'utf-8');\n  let template = makeTemplate(source);\n  let result = template({ domain });\n  writeFile(tmpFile, eol.auto(result));\n  cb(tmpFile);\n  rm(tmpFile);\n}\n\nexport function withDomainCertificateConfig(domain: string, cb: (filepath: string) => void) {\n  let tmpFile = mktmp();\n  let source = readFile(path.join(__dirname, '../openssl-configurations/domain-certificates.conf'), 'utf-8');\n  let template = makeTemplate(source);\n  let result = template({\n    domain,\n    serialFile: opensslSerialFilePath,\n    databaseFile: opensslDatabaseFilePath,\n    domainDir: pathForDomain(domain)\n  });\n  writeFile(tmpFile, eol.auto(result));\n  cb(tmpFile);\n  rm(tmpFile);\n}\n\n  // confTemplate = confTemplate.replace(/DATABASE_PATH/, configPath('index.txt').replace(/\\\\/g, '\\\\\\\\'));\n  // confTemplate = confTemplate.replace(/SERIAL_PATH/, configPath('serial').replace(/\\\\/g, '\\\\\\\\'));\n  // confTemplate = eol.auto(confTemplate);\n\nexport const rootCADir = configPath('certificate-authority');\nexport const rootCAKeyPath = configPath('certificate-authority', 'private-key.key');\nexport const rootCACertPath = configPath('certificate-authority', 'certificate.cert');\n\n\n\n// Exposed for uninstallation purposes.\nexport function getLegacyConfigDir(): string {\n  if (isWindows && process.env.LOCALAPPDATA) {\n    return path.join(process.env.LOCALAPPDATA, 'devcert', 'config');\n  } else {\n    let uid = process.getuid && process.getuid();\n    let userHome = (isLinux && uid === 0) ? path.resolve('/usr/local/share') : require('os').homedir();\n    return path.join(userHome, '.config', 'devcert');\n  }\n}\n\nexport function ensureConfigDirs() {\n  mkdirp(configDir);\n  mkdirp(domainsDir);\n  mkdirp(rootCADir);\n}\n\nensureConfigDirs();\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}