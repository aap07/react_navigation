{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getExpoGoVersionEntryAsync = getExpoGoVersionEntryAsync;\nexports.downloadExpoGoAsync = downloadExpoGoAsync;\nvar _getUserState = require(\"@expo/config/build/getUserState\");\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _semver = require(\"semver\");\nvar _getVersions = require(\"../api/getVersions\");\nvar _log = require(\"../log\");\nvar _downloadAppAsync = require(\"./downloadAppAsync\");\nvar _errors = require(\"./errors\");\nvar _ora = require(\"./ora\");\nvar _profile = require(\"./profile\");\nvar _progress = require(\"./progress\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = require(\"debug\")(\"expo:utils:downloadExpoGo\");\nvar platformSettings = {\n  ios: {\n    versionsKey: \"iosClientUrl\",\n    getFilePath: function getFilePath(filename) {\n      return _path.default.join((0, _getUserState).getExpoHomeDirectory(), \"ios-simulator-app-cache\", `${filename}.app`);\n    },\n    shouldExtractResults: true\n  },\n  android: {\n    versionsKey: \"androidClientUrl\",\n    getFilePath: function getFilePath(filename) {\n      return _path.default.join((0, _getUserState).getExpoHomeDirectory(), \"android-apk-cache\", `${filename}.apk`);\n    },\n    shouldExtractResults: false\n  }\n};\nfunction getExpoGoVersionEntryAsync(_x) {\n  return _getExpoGoVersionEntryAsync.apply(this, arguments);\n}\nfunction _getExpoGoVersionEntryAsync() {\n  _getExpoGoVersionEntryAsync = _asyncToGenerator(function* (sdkVersion) {\n    var _yield$getVersionsAsy = yield (0, _getVersions).getVersionsAsync(),\n      versions = _yield$getVersionsAsy.sdkVersions;\n    var version;\n    if (sdkVersion.toUpperCase() === \"UNVERSIONED\") {\n      var latestVersionKey = Object.keys(versions).reduce(function (a, b) {\n        if ((0, _semver).gt(b, a)) {\n          return b;\n        }\n        return a;\n      }, \"0.0.0\");\n      _log.Log.warn(`Downloading the latest Expo Go client (${latestVersionKey}). This will not fully conform to UNVERSIONED.`);\n      version = versions[latestVersionKey];\n    } else {\n      version = versions[sdkVersion];\n    }\n    if (!version) {\n      throw new _errors.CommandError(`Unable to find a version of Expo Go for SDK ${sdkVersion}`);\n    }\n    return version;\n  });\n  return _getExpoGoVersionEntryAsync.apply(this, arguments);\n}\nfunction downloadExpoGoAsync(_x2, _x3) {\n  return _downloadExpoGoAsync.apply(this, arguments);\n}\nfunction _downloadExpoGoAsync() {\n  _downloadExpoGoAsync = _asyncToGenerator(function* (platform, _ref) {\n    var url = _ref.url,\n      sdkVersion = _ref.sdkVersion;\n    var _platformSettings$pla = platformSettings[platform],\n      getFilePath = _platformSettings$pla.getFilePath,\n      versionsKey = _platformSettings$pla.versionsKey,\n      shouldExtractResults = _platformSettings$pla.shouldExtractResults;\n    var spinner = (0, _ora).ora({\n      text: \"Fetching Expo Go\",\n      color: \"white\"\n    }).start();\n    var bar = null;\n    try {\n      if (!url) {\n        if (!sdkVersion) {\n          throw new _errors.CommandError(`Unable to determine which Expo Go version to install (platform: ${platform})`);\n        }\n        var version = yield getExpoGoVersionEntryAsync(sdkVersion);\n        debug(`Installing Expo Go version for SDK ${sdkVersion} at URL: ${version[versionsKey]}`);\n        url = version[versionsKey];\n      }\n    } catch (error) {\n      spinner.fail();\n      throw error;\n    }\n    var filename = _path.default.parse(url).name;\n    try {\n      var outputPath = getFilePath(filename);\n      debug(`Downloading Expo Go from \"${url}\" to \"${outputPath}\".`);\n      debug(`The requested copy of Expo Go might already be cached in: \"${(0, _getUserState).getExpoHomeDirectory()}\". You can disable the cache with EXPO_NO_CACHE=1`);\n      yield (0, _profile).profile(_downloadAppAsync.downloadAppAsync)({\n        url: url,\n        cacheDirectory: \"expo-go\",\n        outputPath: outputPath,\n        extract: shouldExtractResults,\n        onProgress: function onProgress(_ref2) {\n          var progress = _ref2.progress,\n            total = _ref2.total;\n          if (progress && total) {\n            if (!bar) {\n              if (spinner.isSpinning) {\n                spinner.stop();\n              }\n              bar = (0, _progress).createProgressBar(\"Downloading the Expo Go app [:bar] :percent :etas\", {\n                width: 64,\n                total: 100,\n                complete: \"=\",\n                incomplete: \" \"\n              });\n            } else {\n              bar.update(progress, total);\n            }\n          }\n        }\n      });\n      return outputPath;\n    } finally {\n      spinner.stop();\n      bar == null ? void 0 : bar.terminate();\n    }\n  });\n  return _downloadExpoGoAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","getExpoGoVersionEntryAsync","downloadExpoGoAsync","_getUserState","_path","_interopRequireDefault","_semver","_getVersions","_log","_downloadAppAsync","_errors","_ora","_profile","_progress","debug","platformSettings","ios","versionsKey","getFilePath","filename","default","join","getExpoHomeDirectory","shouldExtractResults","android","_x","_getExpoGoVersionEntryAsync","apply","arguments","sdkVersion","_yield$getVersionsAsy","getVersionsAsync","versions","sdkVersions","version","toUpperCase","latestVersionKey","Object","keys","reduce","a","b","gt","Log","warn","CommandError","_x2","_x3","_downloadExpoGoAsync","platform","_ref","url","_platformSettings$pla","spinner","ora","text","color","start","bar","error","fail","parse","name","outputPath","profile","downloadAppAsync","cacheDirectory","extract","onProgress","_ref2","progress","total","isSpinning","stop","createProgressBar","width","complete","incomplete","update","terminate"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\utils\\downloadExpoGoAsync.ts"],"sourcesContent":["import { getExpoHomeDirectory } from '@expo/config/build/getUserState';\nimport path from 'path';\nimport ProgressBar from 'progress';\nimport { gt } from 'semver';\n\nimport { getVersionsAsync, SDKVersion } from '../api/getVersions';\nimport { Log } from '../log';\nimport { downloadAppAsync } from './downloadAppAsync';\nimport { CommandError } from './errors';\nimport { ora } from './ora';\nimport { profile } from './profile';\nimport { createProgressBar } from './progress';\n\nconst debug = require('debug')('expo:utils:downloadExpoGo') as typeof console.log;\n\nconst platformSettings: Record<\n  string,\n  {\n    shouldExtractResults: boolean;\n    versionsKey: keyof SDKVersion;\n    getFilePath: (filename: string) => string;\n  }\n> = {\n  ios: {\n    versionsKey: 'iosClientUrl',\n    getFilePath: (filename) =>\n      path.join(getExpoHomeDirectory(), 'ios-simulator-app-cache', `${filename}.app`),\n    shouldExtractResults: true,\n  },\n  android: {\n    versionsKey: 'androidClientUrl',\n    getFilePath: (filename) =>\n      path.join(getExpoHomeDirectory(), 'android-apk-cache', `${filename}.apk`),\n    shouldExtractResults: false,\n  },\n};\n\n/**\n * @internal exposed for testing.\n * @returns the matching `SDKVersion` object from the Expo API.\n */\nexport async function getExpoGoVersionEntryAsync(sdkVersion: string): Promise<SDKVersion> {\n  const { sdkVersions: versions } = await getVersionsAsync();\n  let version: SDKVersion;\n\n  if (sdkVersion.toUpperCase() === 'UNVERSIONED') {\n    // find the latest version\n    const latestVersionKey = Object.keys(versions).reduce((a, b) => {\n      if (gt(b, a)) {\n        return b;\n      }\n      return a;\n    }, '0.0.0');\n\n    Log.warn(\n      `Downloading the latest Expo Go client (${latestVersionKey}). This will not fully conform to UNVERSIONED.`\n    );\n    version = versions[latestVersionKey];\n  } else {\n    version = versions[sdkVersion];\n  }\n\n  if (!version) {\n    throw new CommandError(`Unable to find a version of Expo Go for SDK ${sdkVersion}`);\n  }\n  return version;\n}\n\n/** Download the Expo Go app from the Expo servers (if only it was this easy for every app). */\nexport async function downloadExpoGoAsync(\n  platform: keyof typeof platformSettings,\n  {\n    url,\n    sdkVersion,\n  }: {\n    url?: string;\n    sdkVersion?: string;\n  }\n): Promise<string> {\n  const { getFilePath, versionsKey, shouldExtractResults } = platformSettings[platform];\n\n  const spinner = ora({ text: 'Fetching Expo Go', color: 'white' }).start();\n\n  let bar: ProgressBar | null = null;\n\n  try {\n    if (!url) {\n      if (!sdkVersion) {\n        throw new CommandError(\n          `Unable to determine which Expo Go version to install (platform: ${platform})`\n        );\n      }\n\n      const version = await getExpoGoVersionEntryAsync(sdkVersion);\n\n      debug(`Installing Expo Go version for SDK ${sdkVersion} at URL: ${version[versionsKey]}`);\n      url = version[versionsKey] as string;\n    }\n  } catch (error) {\n    spinner.fail();\n    throw error;\n  }\n\n  const filename = path.parse(url).name;\n\n  try {\n    const outputPath = getFilePath(filename);\n    debug(`Downloading Expo Go from \"${url}\" to \"${outputPath}\".`);\n    debug(\n      `The requested copy of Expo Go might already be cached in: \"${getExpoHomeDirectory()}\". You can disable the cache with EXPO_NO_CACHE=1`\n    );\n    await profile(downloadAppAsync)({\n      url,\n      // Save all encrypted cache data to `~/.expo/expo-go`\n      cacheDirectory: 'expo-go',\n      outputPath,\n      extract: shouldExtractResults,\n      onProgress({ progress, total }) {\n        if (progress && total) {\n          if (!bar) {\n            if (spinner.isSpinning) {\n              spinner.stop();\n            }\n            bar = createProgressBar('Downloading the Expo Go app [:bar] :percent :etas', {\n              width: 64,\n              total: 100,\n              // clear: true,\n              complete: '=',\n              incomplete: ' ',\n            });\n          } else {\n            bar!.update(progress, total);\n          }\n        }\n      },\n    });\n    return outputPath;\n  } finally {\n    spinner.stop();\n    // @ts-expect-error\n    bar?.terminate();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}