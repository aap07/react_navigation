{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _configPlugins = require(\"@expo/config-plugins\");\nvar _appIdResolver = require(\"../AppIdResolver\");\nvar debug = require(\"debug\")(\"expo:start:platforms:android:AndroidAppIdResolver\");\nvar AndroidAppIdResolver = function (_appIdResolver$AppIdR) {\n  _inherits(AndroidAppIdResolver, _appIdResolver$AppIdR);\n  var _super = _createSuper(AndroidAppIdResolver);\n  function AndroidAppIdResolver(projectRoot) {\n    _classCallCheck(this, AndroidAppIdResolver);\n    return _super.call(this, projectRoot, \"android\", \"android.package\");\n  }\n  _createClass(AndroidAppIdResolver, [{\n    key: \"hasNativeProjectAsync\",\n    value: function () {\n      var _hasNativeProjectAsync = _asyncToGenerator(function* () {\n        try {\n          yield _configPlugins.AndroidConfig.Paths.getProjectPathOrThrowAsync(this.projectRoot);\n          return true;\n        } catch (error) {\n          debug(\"Expected error checking for native project:\", error);\n          return false;\n        }\n      });\n      function hasNativeProjectAsync() {\n        return _hasNativeProjectAsync.apply(this, arguments);\n      }\n      return hasNativeProjectAsync;\n    }()\n  }, {\n    key: \"resolveAppIdFromNativeAsync\",\n    value: function () {\n      var _resolveAppIdFromNativeAsync = _asyncToGenerator(function* () {\n        var applicationIdFromGradle = yield _configPlugins.AndroidConfig.Package.getApplicationIdAsync(this.projectRoot).catch(function () {\n          return null;\n        });\n        if (applicationIdFromGradle) {\n          return applicationIdFromGradle;\n        }\n        try {\n          var ref, ref1;\n          var filePath = yield _configPlugins.AndroidConfig.Paths.getAndroidManifestAsync(this.projectRoot);\n          var androidManifest = yield _configPlugins.AndroidConfig.Manifest.readAndroidManifestAsync(filePath);\n          yield _configPlugins.AndroidConfig.Manifest.getMainActivityOrThrow(androidManifest);\n          if ((ref = androidManifest.manifest) == null ? void 0 : (ref1 = ref.$) == null ? void 0 : ref1.package) {\n            return androidManifest.manifest.$.package;\n          }\n        } catch (error) {\n          debug(\"Expected error resolving the package name from the AndroidManifest.xml:\", error);\n        }\n        return null;\n      });\n      function resolveAppIdFromNativeAsync() {\n        return _resolveAppIdFromNativeAsync.apply(this, arguments);\n      }\n      return resolveAppIdFromNativeAsync;\n    }()\n  }]);\n  return AndroidAppIdResolver;\n}(_appIdResolver.AppIdResolver);\nexports.AndroidAppIdResolver = AndroidAppIdResolver;","map":{"version":3,"names":["_asyncToGenerator","require","_classCallCheck","_createClass","_inherits","_possibleConstructorReturn","_getPrototypeOf","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","_configPlugins","_appIdResolver","debug","AndroidAppIdResolver","_appIdResolver$AppIdR","_super","projectRoot","key","value","_hasNativeProjectAsync","AndroidConfig","Paths","getProjectPathOrThrowAsync","error","hasNativeProjectAsync","_resolveAppIdFromNativeAsync","applicationIdFromGradle","Package","getApplicationIdAsync","catch","ref","ref1","filePath","getAndroidManifestAsync","androidManifest","Manifest","readAndroidManifestAsync","getMainActivityOrThrow","manifest","$","package","resolveAppIdFromNativeAsync","AppIdResolver"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\platforms\\android\\AndroidAppIdResolver.ts"],"sourcesContent":["import { AndroidConfig } from '@expo/config-plugins';\n\nimport { AppIdResolver } from '../AppIdResolver';\n\nconst debug = require('debug')(\n  'expo:start:platforms:android:AndroidAppIdResolver'\n) as typeof console.log;\n\n/** Resolves the Android package name from the Expo config or native files. */\nexport class AndroidAppIdResolver extends AppIdResolver {\n  constructor(projectRoot: string) {\n    super(projectRoot, 'android', 'android.package');\n  }\n\n  async hasNativeProjectAsync(): Promise<boolean> {\n    try {\n      await AndroidConfig.Paths.getProjectPathOrThrowAsync(this.projectRoot);\n      return true;\n    } catch (error: any) {\n      debug('Expected error checking for native project:', error);\n      return false;\n    }\n  }\n\n  async resolveAppIdFromNativeAsync(): Promise<string | null> {\n    const applicationIdFromGradle = await AndroidConfig.Package.getApplicationIdAsync(\n      this.projectRoot\n    ).catch(() => null);\n    if (applicationIdFromGradle) {\n      return applicationIdFromGradle;\n    }\n\n    try {\n      const filePath = await AndroidConfig.Paths.getAndroidManifestAsync(this.projectRoot);\n      const androidManifest = await AndroidConfig.Manifest.readAndroidManifestAsync(filePath);\n      // Assert MainActivity defined.\n      await AndroidConfig.Manifest.getMainActivityOrThrow(androidManifest);\n      if (androidManifest.manifest?.$?.package) {\n        return androidManifest.manifest.$.package;\n      }\n    } catch (error: any) {\n      debug('Expected error resolving the package name from the AndroidManifest.xml:', error);\n    }\n\n    return null;\n  }\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,iBAAA,GAAAC,OAAA;AAAA,IAAAC,eAAA,GAAAD,OAAA;AAAA,IAAAE,YAAA,GAAAF,OAAA;AAAA,IAAAG,SAAA,GAAAH,OAAA;AAAA,IAAAI,0BAAA,GAAAJ,OAAA;AAAA,IAAAK,eAAA,GAAAL,OAAA;AAAA,SAAAM,aAAAC,OAAA,QAAAC,yBAAA,GAAAC,yBAAA,oBAAAC,qBAAA,QAAAC,KAAA,GAAAN,eAAA,CAAAE,OAAA,GAAAK,MAAA,MAAAJ,yBAAA,QAAAK,SAAA,GAAAR,eAAA,OAAAS,WAAA,EAAAF,MAAA,GAAAG,OAAA,CAAAC,SAAA,CAAAL,KAAA,EAAAM,SAAA,EAAAJ,SAAA,YAAAD,MAAA,GAAAD,KAAA,CAAAO,KAAA,OAAAD,SAAA,YAAAb,0BAAA,OAAAQ,MAAA;AAAA,SAAAH,0BAAA,eAAAM,OAAA,qBAAAA,OAAA,CAAAC,SAAA,oBAAAD,OAAA,CAAAC,SAAA,CAAAG,IAAA,2BAAAC,KAAA,oCAAAC,OAAA,CAAAC,SAAA,CAAAC,OAAA,CAAAC,IAAA,CAAAT,OAAA,CAAAC,SAAA,CAAAK,OAAA,8CAAAI,CAAA;;;;AAA8B,IAAAC,cAAsB,GAAA1B,OAAA,CAAtB,sBAAsB;AAEtB,IAAA2B,cAAkB,GAAA3B,OAAA;AAEhD,IAAM4B,KAAK,GAAG5B,OAAO,CAAC,OAAO,CAAC,CAC5B,mDAAmD,CACpD;AAAuB,IAGX6B,oBAAoB,aAAAC,qBAAA;EAAA3B,SAAA,CAAA0B,oBAAA,EAAAC,qBAAA;EAAA,IAAAC,MAAA,GAAAzB,YAAA,CAAAuB,oBAAA;EAC/B,SAAAA,qBAAYG,WAAmB,EAAE;IAAA/B,eAAA,OAAA4B,oBAAA;IAAA,OAAAE,MAAA,CAAAP,IAAA,OACzBQ,WAAW,EAAE,SAAS,EAAE,iBAAiB;;EAChD9B,YAAA,CAAA2B,oBAAA;IAAAI,GAAA;IAAAC,KAAA;MAAA,IAAAC,sBAAA,GAAApC,iBAAA,CAED,aAAgD;QAC9C,IAAI;UACF,MAAM2B,cAAa,CAAAU,aAAA,CAACC,KAAK,CAACC,0BAA0B,CAAC,IAAI,CAACN,WAAW,CAAC;UACtE,OAAO,IAAI;SACZ,CAAC,OAAOO,KAAK,EAAO;UACnBX,KAAK,CAAC,6CAA6C,EAAEW,KAAK,CAAC;UAC3D,OAAO,KAAK;;OAEf;MAAA,SAAAC,sBAAA;QAAA,OAAAL,sBAAA,CAAAjB,KAAA,OAAAD,SAAA;MAAA;MAAA,OAAAuB,qBAAA;IAAA;EAAA;IAAAP,GAAA;IAAAC,KAAA;MAAA,IAAAO,4BAAA,GAAA1C,iBAAA,CAED,aAA4D;QAC1D,IAAM2C,uBAAuB,SAAShB,cAAa,CAAAU,aAAA,CAACO,OAAO,CAACC,qBAAqB,CAC/E,IAAI,CAACZ,WAAW,CACjB,CAACa,KAAK,CAAC;UAAA,OAAM,IAAI;QAAA,EAAC;QACnB,IAAIH,uBAAuB,EAAE;UAC3B,OAAOA,uBAAuB;;QAGhC,IAAI;cAKEI,GAAwB,EAAAC,IAAA;UAJ5B,IAAMC,QAAQ,SAAStB,cAAa,CAAAU,aAAA,CAACC,KAAK,CAACY,uBAAuB,CAAC,IAAI,CAACjB,WAAW,CAAC;UACpF,IAAMkB,eAAe,SAASxB,cAAa,CAAAU,aAAA,CAACe,QAAQ,CAACC,wBAAwB,CAACJ,QAAQ,CAAC;UAEvF,MAAMtB,cAAa,CAAAU,aAAA,CAACe,QAAQ,CAACE,sBAAsB,CAACH,eAAe,CAAC;UACpE,IAAI,CAAAJ,GAAwB,GAAxBI,eAAe,CAACI,QAAQ,SAAG,GAA3B,MAA2B,GAA3B,CAAAP,IAAA,GAAAD,GAAwB,CAAES,CAAC,YAA3B,MAA2B,GAAAR,IAAA,CAAES,OAAO,EAAE;YACxC,OAAON,eAAe,CAACI,QAAQ,CAACC,CAAC,CAACC,OAAO;;SAE5C,CAAC,OAAOjB,KAAK,EAAO;UACnBX,KAAK,CAAC,yEAAyE,EAAEW,KAAK,CAAC;;QAGzF,OAAO,IAAI;OACZ;MAAA,SAAAkB,4BAAA;QAAA,OAAAhB,4BAAA,CAAAvB,KAAA,OAAAD,SAAA;MAAA;MAAA,OAAAwC,2BAAA;IAAA;EAAA;EAAA,OAAA5B,oBAAA;AAAA,EApCuCF,cAAa,CAAA+B,aAAA;QAA1C7B,oBAAoB,GAApBA,oBAAoB"},"metadata":{},"sourceType":"script","externalDependencies":[]}