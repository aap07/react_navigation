{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateTemplatePlatforms = validateTemplatePlatforms;\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar Log = _interopRequireWildcard(require(\"../log\"));\nvar _dir = require(\"../utils/dir\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction validateTemplatePlatforms(_x) {\n  return _validateTemplatePlatforms.apply(this, arguments);\n}\nfunction _validateTemplatePlatforms() {\n  _validateTemplatePlatforms = _asyncToGenerator(function* (_ref) {\n    var templateDirectory = _ref.templateDirectory,\n      platforms = _ref.platforms;\n    var existingPlatforms = [];\n    for (var platform of platforms) {\n      if (yield (0, _dir).directoryExistsAsync(_path.default.join(templateDirectory, platform))) {\n        existingPlatforms.push(platform);\n      } else {\n        Log.warn(_chalk.default`⚠️  Skipping platform ${platform}. Use a template that contains native files for ${platform} (./${platform}).`);\n      }\n    }\n    return existingPlatforms;\n  });\n  return _validateTemplatePlatforms.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","validateTemplatePlatforms","_chalk","_interopRequireDefault","_path","Log","_interopRequireWildcard","_dir","_x","_validateTemplatePlatforms","apply","arguments","_ref","templateDirectory","platforms","existingPlatforms","platform","directoryExistsAsync","default","join","push","warn"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\prebuild\\validateTemplatePlatforms.ts"],"sourcesContent":["import { ModPlatform } from '@expo/config-plugins';\nimport chalk from 'chalk';\nimport path from 'path';\n\nimport * as Log from '../log';\nimport { directoryExistsAsync } from '../utils/dir';\n\nexport async function validateTemplatePlatforms({\n  templateDirectory,\n  platforms,\n}: {\n  templateDirectory: string;\n  platforms: ModPlatform[];\n}) {\n  const existingPlatforms: ModPlatform[] = [];\n\n  for (const platform of platforms) {\n    if (await directoryExistsAsync(path.join(templateDirectory, platform))) {\n      existingPlatforms.push(platform);\n    } else {\n      Log.warn(\n        chalk`⚠️  Skipping platform ${platform}. Use a template that contains native files for ${platform} (./${platform}).`\n      );\n    }\n  }\n\n  return existingPlatforms;\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,iBAAA,GAAAC,OAAA;;;;QAOsBC,yBAAyB,GAAzBA,yBAAyB;AAN7B,IAAAC,MAAO,GAAAC,sBAAA,CAAAH,OAAA,CAAP,OAAO;AACR,IAAAI,KAAM,GAAAD,sBAAA,CAAAH,OAAA,CAAN,MAAM;AAEX,IAAAK,GAAG,GAAAC,uBAAA,CAAAN,OAAA,SAAc,EAAd;AACsB,IAAAO,IAAc,GAAAP,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;SAE7BC,yBAAyBA,CAAAO,EAAA;EAAA,OAAAC,0BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,2BAAA;EAAAA,0BAAA,GAAAV,iBAAA,CAAxC,WAAAa,IAAA,EAMJ;IAAA,IALDC,iBAAiB,GAAAD,IAAA,CAAjBC,iBAAiB;MACjBC,SAAS,GAAAF,IAAA,CAATE,SAAS;IAKT,IAAMC,iBAAiB,GAAkB,EAAE;IAE3C,KAAK,IAAMC,QAAQ,IAAIF,SAAS,EAAE;MAChC,UAAU,IAAAP,IAAoB,EAAwCU,oBAAxC,CAACb,KAAI,CAAAc,OAAA,CAACC,IAAI,CAACN,iBAAiB,EAAEG,QAAQ,CAAC,CAAC,EAAE;QACtED,iBAAiB,CAACK,IAAI,CAACJ,QAAQ,CAAC;OACjC,MAAM;QACLX,GAAG,CAACgB,IAAI,CACNnB,MAAK,CAAAgB,OAAC,yBAAAF,QAAwB,mDAASA,QAAkD,OAASA,QAAM,IAAQ,CAAC;;;IAKvH,OAAOD,iBAAiB;GACzB;EAAA,OAAAN,0BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}