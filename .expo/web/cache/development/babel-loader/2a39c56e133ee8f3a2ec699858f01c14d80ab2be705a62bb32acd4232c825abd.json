{"ast":null,"code":"var _NativeModulesProxy$E;\nimport \"./environment/validate.fx\";\nimport \"./environment/logging.fx\";\nimport 'expo-asset';\nimport Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as Font from 'expo-font';\nimport { NativeModulesProxy, Platform } from 'expo-modules-core';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { createErrorHandler } from \"./errors/ExpoErrorManager\";\nif (StyleSheet.setStyleAttributePreprocessor) {\n  StyleSheet.setStyleAttributePreprocessor('fontFamily', Font.processFontFamily);\n}\nif ((_NativeModulesProxy$E = NativeModulesProxy.ExpoUpdates) != null && _NativeModulesProxy$E.isMissingRuntimeVersion) {\n  var message = 'expo-updates is installed but there is no runtime or SDK version configured. ' + \"You'll need to configure one of these two properties in \" + Platform.select({\n    ios: 'Expo.plist',\n    android: 'AndroidManifest.xml'\n  }) + ' before OTA updates will work properly.';\n  if (__DEV__) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n}\nif (Constants.executionEnvironment === ExecutionEnvironment.StoreClient) {\n  var globalHandler = ErrorUtils.getGlobalHandler();\n  ErrorUtils.setGlobalHandler(createErrorHandler(globalHandler));\n}","map":{"version":3,"names":["Constants","ExecutionEnvironment","Font","NativeModulesProxy","Platform","StyleSheet","createErrorHandler","setStyleAttributePreprocessor","processFontFamily","_NativeModulesProxy$E","ExpoUpdates","isMissingRuntimeVersion","message","select","ios","android","__DEV__","console","warn","Error","executionEnvironment","StoreClient","globalHandler","ErrorUtils","getGlobalHandler","setGlobalHandler"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\expo\\src\\Expo.fx.tsx"],"sourcesContent":["import './environment/validate.fx';\n// load remote logging for compatibility with custom development clients\nimport './environment/logging.fx';\n// load expo-asset immediately to set a custom `source` transformer in React Native\nimport 'expo-asset';\n\nimport Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as Font from 'expo-font';\nimport { NativeModulesProxy, Platform } from 'expo-modules-core';\nimport { StyleSheet } from 'react-native';\n\nimport { createErrorHandler } from './errors/ExpoErrorManager';\n\n// If expo-font is installed and the style preprocessor is available, use it to parse fonts.\nif (StyleSheet.setStyleAttributePreprocessor) {\n  StyleSheet.setStyleAttributePreprocessor('fontFamily', Font.processFontFamily);\n}\n\n// Asserts if bare workflow isn't setup correctly.\nif (NativeModulesProxy.ExpoUpdates?.isMissingRuntimeVersion) {\n  const message =\n    'expo-updates is installed but there is no runtime or SDK version configured. ' +\n    \"You'll need to configure one of these two properties in \" +\n    Platform.select({ ios: 'Expo.plist', android: 'AndroidManifest.xml' }) +\n    ' before OTA updates will work properly.';\n  if (__DEV__) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n}\n\nif (Constants.executionEnvironment === ExecutionEnvironment.StoreClient) {\n  // set up some improvements to commonly logged error messages stemming from react-native\n  const globalHandler = ErrorUtils.getGlobalHandler();\n  ErrorUtils.setGlobalHandler(createErrorHandler(globalHandler));\n}\n"],"mappings":";AAAA;AAEA;AAEA,OAAO,YAAY;AAEnB,OAAOA,SAAS,IAAIC,oBAAoB,QAAQ,gBAAgB;AAChE,OAAO,KAAKC,IAAI,MAAM,WAAW;AACjC,SAASC,kBAAkB,EAAEC,QAAQ,QAAQ,mBAAmB;AAAC,OAAAC,UAAA;AAGjE,SAASC,kBAAkB;AAG3B,IAAID,UAAU,CAACE,6BAA6B,EAAE;EAC5CF,UAAU,CAACE,6BAA6B,CAAC,YAAY,EAAEL,IAAI,CAACM,iBAAiB,CAAC;;AAIhF,KAAAC,qBAAA,GAAIN,kBAAkB,CAACO,WAAW,aAA9BD,qBAAA,CAAgCE,uBAAuB,EAAE;EAC3D,IAAMC,OAAO,GACX,+EAA+E,GAC/E,0DAA0D,GAC1DR,QAAQ,CAACS,MAAM,CAAC;IAAEC,GAAG,EAAE,YAAY;IAAEC,OAAO,EAAE;EAAqB,CAAE,CAAC,GACtE,yCAAyC;EAC3C,IAAIC,OAAO,EAAE;IACXC,OAAO,CAACC,IAAI,CAACN,OAAO,CAAC;GACtB,MAAM;IACL,MAAM,IAAIO,KAAK,CAACP,OAAO,CAAC;;;AAI5B,IAAIZ,SAAS,CAACoB,oBAAoB,KAAKnB,oBAAoB,CAACoB,WAAW,EAAE;EAEvE,IAAMC,aAAa,GAAGC,UAAU,CAACC,gBAAgB,EAAE;EACnDD,UAAU,CAACE,gBAAgB,CAACnB,kBAAkB,CAACgB,aAAa,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}