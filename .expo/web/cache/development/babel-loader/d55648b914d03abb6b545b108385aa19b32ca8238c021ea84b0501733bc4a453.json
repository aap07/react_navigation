{"ast":null,"code":"import DiscreteGestureHandler from \"./DiscreteGestureHandler\";","map":{"version":3,"names":["DiscreteGestureHandler"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/react-native-gesture-handler/lib/typescript/web_hammer/PressGestureHandler.d.ts"],"sourcesContent":["import { State } from '../State';\nimport { HammerInputNames } from './constants';\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { Config, HammerInputExt } from './GestureHandler';\ndeclare class PressGestureHandler extends DiscreteGestureHandler {\n    private visualFeedbackTimer;\n    private initialEvent;\n    get name(): string;\n    get minDurationMs(): any;\n    get maxDist(): number | undefined;\n    get NativeGestureClass(): PressRecognizerStatic;\n    shouldDelayTouches: boolean;\n    simulateCancelEvent(inputData: HammerInputExt): void;\n    updateHasCustomActivationCriteria({ shouldCancelWhenOutside, maxDistSq, }: Config & {\n        shouldCancelWhenOutside: boolean;\n    }): boolean;\n    getState(type: keyof typeof HammerInputNames): State;\n    getConfig(): Partial<{\n        enabled: boolean;\n        minPointers: number;\n        maxPointers: number;\n        minDist: number;\n        minDistSq: number;\n        minVelocity: number;\n        minVelocitySq: number;\n        maxDist: number;\n        maxDistSq: number;\n        failOffsetXStart: number;\n        failOffsetYStart: number;\n        failOffsetXEnd: number;\n        failOffsetYEnd: number;\n        activeOffsetXStart: number;\n        activeOffsetXEnd: number;\n        activeOffsetYStart: number;\n        activeOffsetYEnd: number;\n        waitFor: any[] | null;\n        simultaneousHandlers: any[] | null;\n    }> | {\n        shouldCancelWhenOutside: boolean;\n        maxDistSq: number;\n    };\n    getHammerConfig(): {\n        time: any;\n        pointers: number | undefined;\n    };\n    onGestureActivated(ev: HammerInputExt): void;\n    shouldDelayTouchForEvent({ pointerType }: HammerInputExt): boolean;\n    onGestureStart(ev: HammerInputExt): void;\n    sendGestureStartedEvent(ev: HammerInputExt): void;\n    forceInvalidate(event: HammerInputExt): void;\n    onRawEvent(ev: HammerInputExt): void;\n    updateGestureConfig({ shouldActivateOnStart, disallowInterruption, shouldCancelWhenOutside, minDurationMs, maxDist, minPointers, maxPointers, ...props }: {\n        [x: string]: any;\n        shouldActivateOnStart?: boolean | undefined;\n        disallowInterruption?: boolean | undefined;\n        shouldCancelWhenOutside?: boolean | undefined;\n        minDurationMs?: number | undefined;\n        maxDist?: number | undefined;\n        minPointers?: number | undefined;\n        maxPointers?: number | undefined;\n    }): Partial<{\n        enabled: boolean;\n        minPointers: number;\n        maxPointers: number;\n        minDist: number;\n        minDistSq: number;\n        minVelocity: number;\n        minVelocitySq: number;\n        maxDist: number;\n        maxDistSq: number;\n        failOffsetXStart: number;\n        failOffsetYStart: number;\n        failOffsetXEnd: number;\n        failOffsetYEnd: number;\n        activeOffsetXStart: number;\n        activeOffsetXEnd: number;\n        activeOffsetYStart: number;\n        activeOffsetYEnd: number;\n        waitFor: any[] | null;\n        simultaneousHandlers: any[] | null;\n    }>;\n}\nexport default PressGestureHandler;\n"],"mappings":"AAEA,OAAOA,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}