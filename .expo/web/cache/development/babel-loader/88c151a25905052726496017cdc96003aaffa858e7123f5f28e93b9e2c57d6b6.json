{"ast":null,"code":"'use strict';\n\nvar _require = require(\"./parseTopLevelType\"),\n  parseTopLevelType = _require.parseTopLevelType;\nvar invariant = require('invariant');\nfunction resolveTypeAnnotation(typeAnnotation, types) {\n  invariant(typeAnnotation != null, 'resolveTypeAnnotation(): typeAnnotation cannot be null');\n  var node = typeAnnotation.type === 'TSTypeAnnotation' ? typeAnnotation.typeAnnotation : typeAnnotation;\n  var nullable = false;\n  var typeResolutionStatus = {\n    successful: false\n  };\n  for (;;) {\n    var topLevelType = parseTopLevelType(node);\n    nullable = nullable || topLevelType.optional;\n    node = topLevelType.type;\n    if (node.type !== 'TSTypeReference') {\n      break;\n    }\n    var resolvedTypeAnnotation = types[node.typeName.name];\n    if (resolvedTypeAnnotation == null) {\n      break;\n    }\n    switch (resolvedTypeAnnotation.type) {\n      case 'TSTypeAliasDeclaration':\n        {\n          typeResolutionStatus = {\n            successful: true,\n            type: 'alias',\n            name: node.typeName.name\n          };\n          node = resolvedTypeAnnotation.typeAnnotation;\n          break;\n        }\n      case 'TSInterfaceDeclaration':\n        {\n          typeResolutionStatus = {\n            successful: true,\n            type: 'alias',\n            name: node.typeName.name\n          };\n          node = resolvedTypeAnnotation;\n          break;\n        }\n      case 'TSEnumDeclaration':\n        {\n          typeResolutionStatus = {\n            successful: true,\n            type: 'enum',\n            name: node.typeName.name\n          };\n          node = resolvedTypeAnnotation;\n          break;\n        }\n      default:\n        {\n          throw new TypeError(`A non GenericTypeAnnotation must be a type declaration ('TSTypeAliasDeclaration'), an interface ('TSInterfaceDeclaration'), or enum ('TSEnumDeclaration'). Instead, got the unsupported ${resolvedTypeAnnotation.type}.`);\n        }\n    }\n  }\n  return {\n    nullable: nullable,\n    typeAnnotation: node,\n    typeResolutionStatus: typeResolutionStatus\n  };\n}\nmodule.exports = {\n  resolveTypeAnnotation: resolveTypeAnnotation\n};","map":{"version":3,"names":["_require","require","parseTopLevelType","invariant","resolveTypeAnnotation","typeAnnotation","types","node","type","nullable","typeResolutionStatus","successful","topLevelType","optional","resolvedTypeAnnotation","typeName","name","TypeError","module","exports"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native/codegen/lib/parsers/typescript/utils.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * @format\n */\n\n'use strict';\n\nconst _require = require('./parseTopLevelType'),\n  parseTopLevelType = _require.parseTopLevelType;\n\n// $FlowFixMe[unclear-type] Use flow-types for @babel/parser\n\nconst invariant = require('invariant');\nfunction resolveTypeAnnotation(\n  // TODO(T108222691): Use flow-types for @babel/parser\n  typeAnnotation,\n  types,\n) {\n  invariant(\n    typeAnnotation != null,\n    'resolveTypeAnnotation(): typeAnnotation cannot be null',\n  );\n  let node =\n    typeAnnotation.type === 'TSTypeAnnotation'\n      ? typeAnnotation.typeAnnotation\n      : typeAnnotation;\n  let nullable = false;\n  let typeResolutionStatus = {\n    successful: false,\n  };\n  for (;;) {\n    const topLevelType = parseTopLevelType(node);\n    nullable = nullable || topLevelType.optional;\n    node = topLevelType.type;\n    if (node.type !== 'TSTypeReference') {\n      break;\n    }\n    const resolvedTypeAnnotation = types[node.typeName.name];\n    if (resolvedTypeAnnotation == null) {\n      break;\n    }\n    switch (resolvedTypeAnnotation.type) {\n      case 'TSTypeAliasDeclaration': {\n        typeResolutionStatus = {\n          successful: true,\n          type: 'alias',\n          name: node.typeName.name,\n        };\n        node = resolvedTypeAnnotation.typeAnnotation;\n        break;\n      }\n      case 'TSInterfaceDeclaration': {\n        typeResolutionStatus = {\n          successful: true,\n          type: 'alias',\n          name: node.typeName.name,\n        };\n        node = resolvedTypeAnnotation;\n        break;\n      }\n      case 'TSEnumDeclaration': {\n        typeResolutionStatus = {\n          successful: true,\n          type: 'enum',\n          name: node.typeName.name,\n        };\n        node = resolvedTypeAnnotation;\n        break;\n      }\n      default: {\n        throw new TypeError(\n          `A non GenericTypeAnnotation must be a type declaration ('TSTypeAliasDeclaration'), an interface ('TSInterfaceDeclaration'), or enum ('TSEnumDeclaration'). Instead, got the unsupported ${resolvedTypeAnnotation.type}.`,\n        );\n      }\n    }\n  }\n  return {\n    nullable: nullable,\n    typeAnnotation: node,\n    typeResolutionStatus,\n  };\n}\nmodule.exports = {\n  resolveTypeAnnotation,\n};\n"],"mappings":"AAUA,YAAY;;AAEZ,IAAMA,QAAQ,GAAGC,OAAO,sBAAsB,CAAC;EAC7CC,iBAAiB,GAAGF,QAAQ,CAACE,iBAAiB;AAIhD,IAAMC,SAAS,GAAGF,OAAO,CAAC,WAAW,CAAC;AACtC,SAASG,qBAAqBA,CAE5BC,cAAc,EACdC,KAAK,EACL;EACAH,SAAS,CACPE,cAAc,IAAI,IAAI,EACtB,wDACF,CAAC;EACD,IAAIE,IAAI,GACNF,cAAc,CAACG,IAAI,KAAK,kBAAkB,GACtCH,cAAc,CAACA,cAAc,GAC7BA,cAAc;EACpB,IAAII,QAAQ,GAAG,KAAK;EACpB,IAAIC,oBAAoB,GAAG;IACzBC,UAAU,EAAE;EACd,CAAC;EACD,SAAS;IACP,IAAMC,YAAY,GAAGV,iBAAiB,CAACK,IAAI,CAAC;IAC5CE,QAAQ,GAAGA,QAAQ,IAAIG,YAAY,CAACC,QAAQ;IAC5CN,IAAI,GAAGK,YAAY,CAACJ,IAAI;IACxB,IAAID,IAAI,CAACC,IAAI,KAAK,iBAAiB,EAAE;MACnC;IACF;IACA,IAAMM,sBAAsB,GAAGR,KAAK,CAACC,IAAI,CAACQ,QAAQ,CAACC,IAAI,CAAC;IACxD,IAAIF,sBAAsB,IAAI,IAAI,EAAE;MAClC;IACF;IACA,QAAQA,sBAAsB,CAACN,IAAI;MACjC,KAAK,wBAAwB;QAAE;UAC7BE,oBAAoB,GAAG;YACrBC,UAAU,EAAE,IAAI;YAChBH,IAAI,EAAE,OAAO;YACbQ,IAAI,EAAET,IAAI,CAACQ,QAAQ,CAACC;UACtB,CAAC;UACDT,IAAI,GAAGO,sBAAsB,CAACT,cAAc;UAC5C;QACF;MACA,KAAK,wBAAwB;QAAE;UAC7BK,oBAAoB,GAAG;YACrBC,UAAU,EAAE,IAAI;YAChBH,IAAI,EAAE,OAAO;YACbQ,IAAI,EAAET,IAAI,CAACQ,QAAQ,CAACC;UACtB,CAAC;UACDT,IAAI,GAAGO,sBAAsB;UAC7B;QACF;MACA,KAAK,mBAAmB;QAAE;UACxBJ,oBAAoB,GAAG;YACrBC,UAAU,EAAE,IAAI;YAChBH,IAAI,EAAE,MAAM;YACZQ,IAAI,EAAET,IAAI,CAACQ,QAAQ,CAACC;UACtB,CAAC;UACDT,IAAI,GAAGO,sBAAsB;UAC7B;QACF;MACA;QAAS;UACP,MAAM,IAAIG,SAAS,CAChB,2LAA0LH,sBAAsB,CAACN,IAAK,GACzN,CAAC;QACH;IACF;EACF;EACA,OAAO;IACLC,QAAQ,EAAEA,QAAQ;IAClBJ,cAAc,EAAEE,IAAI;IACpBG,oBAAoB,EAApBA;EACF,CAAC;AACH;AACAQ,MAAM,CAACC,OAAO,GAAG;EACff,qBAAqB,EAArBA;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}