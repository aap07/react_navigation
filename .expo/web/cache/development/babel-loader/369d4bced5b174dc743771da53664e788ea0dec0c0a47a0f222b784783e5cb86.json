{"ast":null,"code":"'use strict';\n\nfunction compareSnaps(flowFixtures, flowSnaps, flowExtraCases, tsFixtures, tsSnaps, tsExtraCases, ignoredCases) {\n  var flowCases = Object.keys(flowFixtures).sort();\n  var tsCases = Object.keys(tsFixtures).sort();\n  var commonCases = flowCases.filter(function (name) {\n    return tsCases.indexOf(name) !== -1;\n  });\n  describe('RN Codegen Parsers', function () {\n    it('should not unintentionally contains test case for Flow but not for TypeScript', function () {\n      expect(flowCases.filter(function (name) {\n        return commonCases.indexOf(name) === -1;\n      })).toEqual(flowExtraCases);\n    });\n    it('should not unintentionally contains test case for TypeScript but not for Flow', function () {\n      expect(tsCases.filter(function (name) {\n        return commonCases.indexOf(name) === -1;\n      })).toEqual(tsExtraCases);\n    });\n    var _loop = function _loop() {\n      var flowSnap = flowSnaps[`RN Codegen Flow Parser can generate fixture ${commonCase} 1`];\n      var tsSnap = tsSnaps[`RN Codegen TypeScript Parser can generate fixture ${commonCase} 1`];\n      it(`should be able to find the snapshot for Flow for case ${commonCase}`, function () {\n        expect(typeof flowSnap).toEqual('string');\n      });\n      it(`should be able to find the snapshot for TypeScript for case ${commonCase}`, function () {\n        expect(typeof tsSnap).toEqual('string');\n      });\n      if (ignoredCases.indexOf(commonCase) === -1) {\n        it(`should generate the same snapshot from Flow and TypeScript for fixture ${commonCase}`, function () {\n          expect(flowSnap).toEqual(tsSnap);\n        });\n      } else {\n        it(`should generate the different snapshot from Flow and TypeScript for fixture ${commonCase}`, function () {\n          expect(flowSnap).not.toEqual(tsSnap);\n        });\n      }\n    };\n    for (var commonCase of commonCases) {\n      _loop();\n    }\n  });\n}\nfunction compareTsArraySnaps(tsSnaps, tsExtraCases) {\n  var _loop2 = function _loop2(array2Case) {\n    var arrayCase = array2Case.replace('ARRAY2', 'ARRAY');\n    it(`should generate the same snap from fixture ${arrayCase} and ${array2Case}`, function () {\n      expect(tsSnaps[`RN Codegen TypeScript Parser can generate fixture ${arrayCase}`]).toEqual(tsSnaps[`RN Codegen TypeScript Parser can generate fixture ${array2Case}`]);\n    });\n  };\n  for (var array2Case of tsExtraCases.filter(function (name) {\n    return name.indexOf('ARRAY2') !== -1;\n  })) {\n    _loop2(array2Case);\n  }\n}\nmodule.exports = {\n  compareSnaps: compareSnaps,\n  compareTsArraySnaps: compareTsArraySnaps\n};","map":{"version":3,"names":["compareSnaps","flowFixtures","flowSnaps","flowExtraCases","tsFixtures","tsSnaps","tsExtraCases","ignoredCases","flowCases","Object","keys","sort","tsCases","commonCases","filter","name","indexOf","describe","it","expect","toEqual","_loop","flowSnap","commonCase","tsSnap","not","compareTsArraySnaps","_loop2","array2Case","arrayCase","replace","module","exports"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native/codegen/lib/parsers/consistency/compareSnaps.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @oncall react_native\n */\n\n'use strict';\n\nfunction compareSnaps(\n  flowFixtures,\n  flowSnaps,\n  flowExtraCases,\n  tsFixtures,\n  tsSnaps,\n  tsExtraCases,\n  ignoredCases,\n) {\n  const flowCases = Object.keys(flowFixtures).sort();\n  const tsCases = Object.keys(tsFixtures).sort();\n  const commonCases = flowCases.filter(name => tsCases.indexOf(name) !== -1);\n  describe('RN Codegen Parsers', () => {\n    it('should not unintentionally contains test case for Flow but not for TypeScript', () => {\n      expect(\n        flowCases.filter(name => commonCases.indexOf(name) === -1),\n      ).toEqual(flowExtraCases);\n    });\n    it('should not unintentionally contains test case for TypeScript but not for Flow', () => {\n      expect(tsCases.filter(name => commonCases.indexOf(name) === -1)).toEqual(\n        tsExtraCases,\n      );\n    });\n    for (const commonCase of commonCases) {\n      const flowSnap =\n        flowSnaps[\n          `RN Codegen Flow Parser can generate fixture ${commonCase} 1`\n        ];\n      const tsSnap =\n        tsSnaps[\n          `RN Codegen TypeScript Parser can generate fixture ${commonCase} 1`\n        ];\n      it(`should be able to find the snapshot for Flow for case ${commonCase}`, () => {\n        expect(typeof flowSnap).toEqual('string');\n      });\n      it(`should be able to find the snapshot for TypeScript for case ${commonCase}`, () => {\n        expect(typeof tsSnap).toEqual('string');\n      });\n      if (ignoredCases.indexOf(commonCase) === -1) {\n        it(`should generate the same snapshot from Flow and TypeScript for fixture ${commonCase}`, () => {\n          expect(flowSnap).toEqual(tsSnap);\n        });\n      } else {\n        it(`should generate the different snapshot from Flow and TypeScript for fixture ${commonCase}`, () => {\n          expect(flowSnap).not.toEqual(tsSnap);\n        });\n      }\n    }\n  });\n}\nfunction compareTsArraySnaps(tsSnaps, tsExtraCases) {\n  for (const array2Case of tsExtraCases.filter(\n    name => name.indexOf('ARRAY2') !== -1,\n  )) {\n    const arrayCase = array2Case.replace('ARRAY2', 'ARRAY');\n    it(`should generate the same snap from fixture ${arrayCase} and ${array2Case}`, () => {\n      expect(\n        tsSnaps[\n          `RN Codegen TypeScript Parser can generate fixture ${arrayCase}`\n        ],\n      ).toEqual(\n        tsSnaps[\n          `RN Codegen TypeScript Parser can generate fixture ${array2Case}`\n        ],\n      );\n    });\n  }\n}\nmodule.exports = {\n  compareSnaps,\n  compareTsArraySnaps,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}