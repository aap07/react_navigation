{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _class;\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _osascript = require(\"@expo/osascript\");\nvar _spawnAsync = _interopRequireDefault(require(\"@expo/spawn-async\"));\nvar Log = _interopRequireWildcard(require(\"../../../log\"));\nvar _prerequisite = require(\"../Prerequisite\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar debug = require(\"debug\")(\"expo:doctor:apple:simulatorApp\");\nfunction getSimulatorAppIdAsync() {\n  return _getSimulatorAppIdAsync.apply(this, arguments);\n}\nfunction _getSimulatorAppIdAsync() {\n  _getSimulatorAppIdAsync = _asyncToGenerator(function* () {\n    try {\n      return (yield (0, _osascript).execAsync('id of app \"Simulator\"')).trim();\n    } catch (_unused) {}\n    return null;\n  });\n  return _getSimulatorAppIdAsync.apply(this, arguments);\n}\nvar SimulatorAppPrerequisite = function (_prerequisite$Prerequ) {\n  _inherits(SimulatorAppPrerequisite, _prerequisite$Prerequ);\n  var _super = _createSuper(SimulatorAppPrerequisite);\n  function SimulatorAppPrerequisite() {\n    _classCallCheck(this, SimulatorAppPrerequisite);\n    return _super.apply(this, arguments);\n  }\n  _createClass(SimulatorAppPrerequisite, [{\n    key: \"assertImplementation\",\n    value: function () {\n      var _assertImplementation = _asyncToGenerator(function* () {\n        var result = yield getSimulatorAppIdAsync();\n        if (!result) {\n          throw new _prerequisite.PrerequisiteCommandError(\"SIMULATOR_APP\", \"Can't determine id of Simulator app; the Simulator is most likely not installed on this machine. Run `sudo xcode-select -s /Applications/Xcode.app`\");\n        }\n        if (result !== \"com.apple.iphonesimulator\" && result !== \"com.apple.CoreSimulator.SimulatorTrampoline\") {\n          throw new _prerequisite.PrerequisiteCommandError(\"SIMULATOR_APP\", \"Simulator is installed but is identified as '\" + result + \"'; don't know what that is.\");\n        }\n        debug(`Simulator app id: ${result}`);\n        try {\n          yield (0, _spawnAsync).default(\"xcrun\", [\"simctl\", \"help\"]);\n        } catch (error) {\n          Log.warn(`Unable to run simctl:\\n${error.toString()}`);\n          throw new _prerequisite.PrerequisiteCommandError(\"SIMCTL\", \"xcrun is not configured correctly. Ensure `sudo xcode-select --reset` works before running this command again.\");\n        }\n      });\n      function assertImplementation() {\n        return _assertImplementation.apply(this, arguments);\n      }\n      return assertImplementation;\n    }()\n  }]);\n  return SimulatorAppPrerequisite;\n}(_prerequisite.Prerequisite);\n_class = SimulatorAppPrerequisite;\nSimulatorAppPrerequisite.instance = new _class();\nexports.SimulatorAppPrerequisite = SimulatorAppPrerequisite;","map":{"version":3,"names":["_classCallCheck","require","_createClass","_inherits","_possibleConstructorReturn","_getPrototypeOf","_asyncToGenerator","_class","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","_osascript","_spawnAsync","_interopRequireDefault","Log","_interopRequireWildcard","_prerequisite","debug","getSimulatorAppIdAsync","_getSimulatorAppIdAsync","execAsync","trim","_unused","SimulatorAppPrerequisite","_prerequisite$Prerequ","_super","key","value","_assertImplementation","PrerequisiteCommandError","default","error","warn","toString","assertImplementation","Prerequisite","instance"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\doctor\\apple\\SimulatorAppPrerequisite.ts"],"sourcesContent":["import { execAsync } from '@expo/osascript';\nimport spawnAsync from '@expo/spawn-async';\n\nimport * as Log from '../../../log';\nimport { Prerequisite, PrerequisiteCommandError } from '../Prerequisite';\n\nconst debug = require('debug')('expo:doctor:apple:simulatorApp') as typeof console.log;\n\nasync function getSimulatorAppIdAsync(): Promise<string | null> {\n  try {\n    return (await execAsync('id of app \"Simulator\"')).trim();\n  } catch {\n    // This error may occur in CI where the users intends to install just the simulators but no Xcode.\n  }\n  return null;\n}\n\nexport class SimulatorAppPrerequisite extends Prerequisite {\n  static instance = new SimulatorAppPrerequisite();\n\n  async assertImplementation(): Promise<void> {\n    const result = await getSimulatorAppIdAsync();\n    if (!result) {\n      // This error may occur in CI where the users intends to install just the simulators but no Xcode.\n      throw new PrerequisiteCommandError(\n        'SIMULATOR_APP',\n        \"Can't determine id of Simulator app; the Simulator is most likely not installed on this machine. Run `sudo xcode-select -s /Applications/Xcode.app`\"\n      );\n    }\n    if (\n      result !== 'com.apple.iphonesimulator' &&\n      result !== 'com.apple.CoreSimulator.SimulatorTrampoline'\n    ) {\n      throw new PrerequisiteCommandError(\n        'SIMULATOR_APP',\n        \"Simulator is installed but is identified as '\" + result + \"'; don't know what that is.\"\n      );\n    }\n    debug(`Simulator app id: ${result}`);\n\n    try {\n      // make sure we can run simctl\n      await spawnAsync('xcrun', ['simctl', 'help']);\n    } catch (error: any) {\n      Log.warn(`Unable to run simctl:\\n${error.toString()}`);\n      throw new PrerequisiteCommandError(\n        'SIMCTL',\n        'xcrun is not configured correctly. Ensure `sudo xcode-select --reset` works before running this command again.'\n      );\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}