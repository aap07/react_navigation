{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAssetSchemasAsync = getAssetSchemasAsync;\nvar _fs = _interopRequireDefault(require(\"fs\"));\nvar _jsonSchemaDerefSync = _interopRequireDefault(require(\"json-schema-deref-sync\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _env = require(\"../utils/env\");\nvar _errors = require(\"../utils/errors\");\nvar _client = require(\"./rest/client\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar schemaJson = {};\nfunction getSchemaAsync(_x) {\n  return _getSchemaAsync.apply(this, arguments);\n}\nfunction _getSchemaAsync() {\n  _getSchemaAsync = _asyncToGenerator(function* (sdkVersion) {\n    var json = yield getSchemaJSONAsync(sdkVersion);\n    return (0, _jsonSchemaDerefSync).default(json.schema);\n  });\n  return _getSchemaAsync.apply(this, arguments);\n}\nfunction getAssetSchemasAsync() {\n  return _getAssetSchemasAsync.apply(this, arguments);\n}\nfunction _getAssetSchemasAsync() {\n  _getAssetSchemasAsync = _asyncToGenerator(function* () {\n    var sdkVersion = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"UNVERSIONED\";\n    var schema = yield getSchemaAsync(sdkVersion);\n    var assetSchemas = [];\n    var visit = function visit(node, fieldPath) {\n      if (node.meta && node.meta.asset) {\n        assetSchemas.push(fieldPath);\n      }\n      var properties = node.properties;\n      if (properties) {\n        Object.keys(properties).forEach(function (property) {\n          return visit(properties[property], `${fieldPath}${fieldPath.length > 0 ? \".\" : \"\"}${property}`);\n        });\n      }\n    };\n    visit(schema, \"\");\n    return assetSchemas;\n  });\n  return _getAssetSchemasAsync.apply(this, arguments);\n}\nfunction getSchemaJSONAsync(_x2) {\n  return _getSchemaJSONAsync.apply(this, arguments);\n}\nfunction _getSchemaJSONAsync() {\n  _getSchemaJSONAsync = _asyncToGenerator(function* (sdkVersion) {\n    if (_env.env.EXPO_UNIVERSE_DIR) {\n      return JSON.parse(_fs.default.readFileSync(_path.default.join(_env.env.EXPO_UNIVERSE_DIR, \"server\", \"www\", \"xdl-schemas\", \"UNVERSIONED-schema.json\")).toString());\n    }\n    if (!schemaJson[sdkVersion]) {\n      try {\n        schemaJson[sdkVersion] = yield getConfigurationSchemaAsync(sdkVersion);\n      } catch (e) {\n        if (e.code === \"INVALID_JSON\") {\n          throw new _errors.CommandError(\"INVALID_JSON\", `Couldn't read schema from server`);\n        }\n        throw e;\n      }\n    }\n    return schemaJson[sdkVersion];\n  });\n  return _getSchemaJSONAsync.apply(this, arguments);\n}\nfunction getConfigurationSchemaAsync(_x3) {\n  return _getConfigurationSchemaAsync.apply(this, arguments);\n}\nfunction _getConfigurationSchemaAsync() {\n  _getConfigurationSchemaAsync = _asyncToGenerator(function* (sdkVersion) {\n    var fetchAsync = (0, _client).createCachedFetch({\n      cacheDirectory: \"schema-cache\",\n      ttl: 1000 * 60 * 60 * 24 * 7\n    });\n    var response = yield fetchAsync(`project/configuration/schema/${sdkVersion}`);\n    var _yield$response$json = yield response.json(),\n      data = _yield$response$json.data;\n    return data;\n  });\n  return _getConfigurationSchemaAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","getAssetSchemasAsync","_fs","_interopRequireDefault","_jsonSchemaDerefSync","_path","_env","_errors","_client","schemaJson","getSchemaAsync","_x","_getSchemaAsync","apply","arguments","sdkVersion","json","getSchemaJSONAsync","default","schema","_getAssetSchemasAsync","length","undefined","assetSchemas","visit","node","fieldPath","meta","asset","push","properties","Object","keys","forEach","property","_x2","_getSchemaJSONAsync","env","EXPO_UNIVERSE_DIR","JSON","parse","readFileSync","join","toString","getConfigurationSchemaAsync","e","code","CommandError","_x3","_getConfigurationSchemaAsync","fetchAsync","createCachedFetch","cacheDirectory","ttl","response","_yield$response$json","data"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\api\\getExpoSchema.ts"],"sourcesContent":["import { JSONObject } from '@expo/json-file';\nimport fs from 'fs';\nimport schemaDerefSync from 'json-schema-deref-sync';\nimport path from 'path';\n\nimport { env } from '../utils/env';\nimport { CommandError } from '../utils/errors';\nimport { createCachedFetch } from './rest/client';\n\nexport type Schema = any;\n\nexport type AssetSchema = {\n  fieldPath: string;\n};\n\nconst schemaJson: { [sdkVersion: string]: Schema } = {};\n\n// TODO: Maybe move json-schema-deref-sync out of api (1.58MB -- lodash)\n// https://packagephobia.com/result?p=json-schema-deref-sync\nasync function getSchemaAsync(sdkVersion: string): Promise<Schema> {\n  const json = await getSchemaJSONAsync(sdkVersion);\n  return schemaDerefSync(json.schema);\n}\n\n/**\n * Array of schema nodes that refer to assets along with their field path (eg. 'notification.icon')\n *\n * @param sdkVersion\n */\nexport async function getAssetSchemasAsync(sdkVersion: string = 'UNVERSIONED'): Promise<string[]> {\n  // If no SDK version is available then fall back to unversioned\n  const schema = await getSchemaAsync(sdkVersion);\n  const assetSchemas: string[] = [];\n  const visit = (node: Schema, fieldPath: string) => {\n    if (node.meta && node.meta.asset) {\n      assetSchemas.push(fieldPath);\n    }\n    const properties = node.properties;\n    if (properties) {\n      Object.keys(properties).forEach((property) =>\n        visit(properties[property], `${fieldPath}${fieldPath.length > 0 ? '.' : ''}${property}`)\n      );\n    }\n  };\n  visit(schema, '');\n\n  return assetSchemas;\n}\n\nasync function getSchemaJSONAsync(sdkVersion: string): Promise<{ schema: Schema }> {\n  if (env.EXPO_UNIVERSE_DIR) {\n    return JSON.parse(\n      fs\n        .readFileSync(\n          path.join(\n            env.EXPO_UNIVERSE_DIR,\n            'server',\n            'www',\n            'xdl-schemas',\n            'UNVERSIONED-schema.json'\n          )\n        )\n        .toString()\n    );\n  }\n\n  if (!schemaJson[sdkVersion]) {\n    try {\n      schemaJson[sdkVersion] = await getConfigurationSchemaAsync(sdkVersion);\n    } catch (e: any) {\n      if (e.code === 'INVALID_JSON') {\n        throw new CommandError('INVALID_JSON', `Couldn't read schema from server`);\n      }\n\n      throw e;\n    }\n  }\n\n  return schemaJson[sdkVersion];\n}\n\nasync function getConfigurationSchemaAsync(sdkVersion: string): Promise<JSONObject> {\n  // Reconstruct the cached fetch since caching could be disabled.\n  const fetchAsync = createCachedFetch({\n    cacheDirectory: 'schema-cache',\n    // We'll use a 1 week cache for versions so older versions get flushed out eventually.\n    ttl: 1000 * 60 * 60 * 24 * 7,\n  });\n  const response = await fetchAsync(`project/configuration/schema/${sdkVersion}`);\n  const { data } = await response.json();\n  return data;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}