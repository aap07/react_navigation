{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.output = exports.default = void 0;\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n  _execa = function _execa() {\n    return data;\n  };\n  return data;\n}\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function _chalk() {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function _cliTools() {\n    return data;\n  };\n  return data;\n}\nvar _versionRanges = _interopRequireDefault(require(\"../versionRanges\"));\nvar _checkInstallation = require(\"../checkInstallation\");\nvar _common = require(\"./common\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar output = {\n  OK: 'Ok',\n  NO_GEMFILE: 'No Gemfile',\n  NO_RUBY: 'No Ruby',\n  BUNDLE_INVALID_RUBY: 'Bundle invalid Ruby',\n  UNKNOWN: 'Unknown'\n};\nexports.output = output;\nfunction checkRubyGemfileRequirement(_x) {\n  return _checkRubyGemfileRequirement.apply(this, arguments);\n}\nfunction _checkRubyGemfileRequirement() {\n  _checkRubyGemfileRequirement = _asyncToGenerator(function* (projectRoot) {\n    var evaluateGemfile = (0, _common.inline)`\n  require \"Bundler\"\n  gemfile = Bundler::Definition.build(\"Gemfile\", nil, {})\n  version = gemfile.ruby_version.engine_versions.join(\", \")\n  begin\n    gemfile.validate_runtime!\n  rescue Bundler::GemfileNotFound\n    puts \"${output.NO_GEMFILE}\"\n    exit 1\n  rescue Bundler::RubyVersionMismatch\n    puts \"${output.BUNDLE_INVALID_RUBY}\"\n    STDERR.puts version\n    exit 2\n  rescue => e\n    STDERR e.message\n    exit 3\n  else\n    puts \"${output.OK}\"\n    STDERR.puts version\n  end`;\n    try {\n      yield (0, _execa().default)('ruby', ['-e', evaluateGemfile], {\n        cwd: projectRoot\n      });\n      return [output.OK];\n    } catch (e) {\n      switch (e.code) {\n        case 'ENOENT':\n          return [output.NO_RUBY];\n        case 1:\n          return [output.NO_GEMFILE];\n        case 2:\n          return [output.BUNDLE_INVALID_RUBY, e.stderr];\n        default:\n          return [output.UNKNOWN, e.message];\n      }\n    }\n  });\n  return _checkRubyGemfileRequirement.apply(this, arguments);\n}\nvar _default = {\n  label: 'Ruby',\n  isRequired: false,\n  description: 'Required for installing iOS dependencies',\n  getDiagnostics: function () {\n    var _getDiagnostics = _asyncToGenerator(function* (_ref) {\n      var Languages = _ref.Languages;\n      var projectRoot;\n      try {\n        projectRoot = (0, _cliTools().findProjectRoot)();\n      } catch (e) {\n        _cliTools().logger.debug(e.message);\n      }\n      var fallbackResult = {\n        needsToBeFixed: (0, _checkInstallation.doesSoftwareNeedToBeFixed)({\n          version: Languages.Ruby.version,\n          versionRange: _versionRanges.default.RUBY\n        }),\n        version: Languages.Ruby.version,\n        versionRange: _versionRanges.default.RUBY,\n        description: ''\n      };\n      if (!projectRoot) {\n        return fallbackResult;\n      }\n      var _yield$checkRubyGemfi = yield checkRubyGemfileRequirement(projectRoot),\n        _yield$checkRubyGemfi2 = _slicedToArray(_yield$checkRubyGemfi, 2),\n        code = _yield$checkRubyGemfi2[0],\n        versionOrError = _yield$checkRubyGemfi2[1];\n      switch (code) {\n        case output.OK:\n          {\n            return {\n              needsToBeFixed: false,\n              version: Languages.Ruby.version,\n              versionRange: versionOrError\n            };\n          }\n        case output.BUNDLE_INVALID_RUBY:\n          return {\n            needsToBeFixed: true,\n            version: Languages.Ruby.version,\n            versionRange: versionOrError\n          };\n        case output.NO_RUBY:\n          return {\n            needsToBeFixed: true,\n            description: 'Cannot find a working copy of Ruby.'\n          };\n        case output.NO_GEMFILE:\n          fallbackResult.description = `Could not find the project ${_chalk().default.bold('Gemfile')} in your project folder (${_chalk().default.dim(projectRoot)}), guessed using my built-in version.`;\n          break;\n        default:\n          if (versionOrError) {\n            _cliTools().logger.warn(versionOrError);\n          }\n          break;\n      }\n      return fallbackResult;\n    });\n    function getDiagnostics(_x2) {\n      return _getDiagnostics.apply(this, arguments);\n    }\n    return getDiagnostics;\n  }(),\n  runAutomaticFix: function () {\n    var _runAutomaticFix = _asyncToGenerator(function* (_ref2) {\n      var loader = _ref2.loader,\n        logManualInstallation = _ref2.logManualInstallation;\n      loader.fail();\n      logManualInstallation({\n        healthcheck: 'Ruby',\n        url: _cliTools().link.docs('environment-setup', {\n          hash: 'ruby',\n          guide: 'native',\n          platform: 'ios'\n        })\n      });\n    });\n    function runAutomaticFix(_x3) {\n      return _runAutomaticFix.apply(this, arguments);\n    }\n    return runAutomaticFix;\n  }()\n};\nexports.default = _default;","map":{"version":3,"names":["_slicedToArray","require","_asyncToGenerator","Object","defineProperty","exports","value","output","default","_execa","data","_interopRequireDefault","_chalk","_cliTools","_versionRanges","_checkInstallation","_common","obj","__esModule","OK","NO_GEMFILE","NO_RUBY","BUNDLE_INVALID_RUBY","UNKNOWN","checkRubyGemfileRequirement","_x","_checkRubyGemfileRequirement","apply","arguments","projectRoot","evaluateGemfile","inline","cwd","e","code","stderr","message","_default","label","isRequired","description","getDiagnostics","_getDiagnostics","_ref","Languages","findProjectRoot","logger","debug","fallbackResult","needsToBeFixed","doesSoftwareNeedToBeFixed","version","Ruby","versionRange","RUBY","_yield$checkRubyGemfi","_yield$checkRubyGemfi2","versionOrError","bold","dim","warn","_x2","runAutomaticFix","_runAutomaticFix","_ref2","loader","logManualInstallation","fail","healthcheck","url","link","docs","hash","guide","platform","_x3"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/build/tools/healthchecks/ruby.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.output = exports.default = void 0;\nfunction _execa() {\n  const data = _interopRequireDefault(require(\"execa\"));\n  _execa = function () {\n    return data;\n  };\n  return data;\n}\nfunction _chalk() {\n  const data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function () {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function () {\n    return data;\n  };\n  return data;\n}\nvar _versionRanges = _interopRequireDefault(require(\"../versionRanges\"));\nvar _checkInstallation = require(\"../checkInstallation\");\nvar _common = require(\"./common\");\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n// Exposed for testing only\nconst output = {\n  OK: 'Ok',\n  NO_GEMFILE: 'No Gemfile',\n  NO_RUBY: 'No Ruby',\n  BUNDLE_INVALID_RUBY: 'Bundle invalid Ruby',\n  UNKNOWN: 'Unknown'\n};\n\n// The Change:\n// -----------\n//\n// React Native 0.72 primarily defines the compatible version of Ruby in the\n// project's Gemfile [1]. It does this because it allows for ranges instead of\n// pinning to a version of Ruby.\n//\n// In previous versions the .ruby-version file defined the compatible version,\n// and it was derived in the Gemfile [2]:\n//\n// > ruby File.read(File.join(__dir__, '.ruby-version')).strip\n//\n// Why all of the changes with Ruby?\n// ---------------------------------\n//\n// React Native has had to weigh up a couple of concerns:\n//\n// - Cocoapods: we don't control the minimum supported version, although that\n//   was defined almost a decade ago [3]. Practically system Ruby on macOS works\n//   for our users.\n//\n// - Apple may drop support for scripting language runtimes in future version of\n//   macOS [4]. Ruby 2.7 is effectively EOL, which means many supporting tools and\n//   developer environments _may_ not support it going forward, and 3.0 is becoming\n//   the default in, for example, places like our CI. Some users may be unable to\n//   install Ruby 2.7 on their devices as a matter of policy.\n//\n// - Our Codegen is extensively built in Ruby 2.7.\n//\n// - A common pain-point for users (old and new) setting up their environment is\n//   configuring a Ruby version manager or managing multiple Ruby versions on their\n//   device. This occurs so frequently that we've removed the step from our docs [6]\n//\n// After users suggested bumping Ruby to 3.1.3 [5], a discussion concluded that\n// allowing a range of version of Ruby (>= 2.6.10) was the best way forward. This\n// balanced the need to make the platform easier to start with, but unblocked more\n// sophisticated users.\n//\n// [1] https://github.com/facebook/react-native/pull/36281\n// [2] https://github.com/facebook/react-native/blob/v0.71.3/Gemfile#L4\n// [3] https://github.com/CocoaPods/guides.cocoapods.org/commit/30881800ac2bd431d9c5d7ee74404b13e7f43888\n// [4] https://developer.apple.com/documentation/macos-release-notes/macos-catalina-10_15-release-notes#Scripting-Language-Runtimes\n// [5] https://github.com/facebook/react-native/pull/36074\n// [6] https://github.com/facebook/react-native-website/commit/8db97602347a8623f21e3e516245d04bdf6f1a29\nexports.output = output;\nasync function checkRubyGemfileRequirement(projectRoot) {\n  const evaluateGemfile = (0, _common.inline)`\n  require \"Bundler\"\n  gemfile = Bundler::Definition.build(\"Gemfile\", nil, {})\n  version = gemfile.ruby_version.engine_versions.join(\", \")\n  begin\n    gemfile.validate_runtime!\n  rescue Bundler::GemfileNotFound\n    puts \"${output.NO_GEMFILE}\"\n    exit 1\n  rescue Bundler::RubyVersionMismatch\n    puts \"${output.BUNDLE_INVALID_RUBY}\"\n    STDERR.puts version\n    exit 2\n  rescue => e\n    STDERR e.message\n    exit 3\n  else\n    puts \"${output.OK}\"\n    STDERR.puts version\n  end`;\n  try {\n    await (0, _execa().default)('ruby', ['-e', evaluateGemfile], {\n      cwd: projectRoot\n    });\n    return [output.OK];\n  } catch (e) {\n    switch (e.code) {\n      case 'ENOENT':\n        return [output.NO_RUBY];\n      case 1:\n        return [output.NO_GEMFILE];\n      case 2:\n        return [output.BUNDLE_INVALID_RUBY, e.stderr];\n      default:\n        return [output.UNKNOWN, e.message];\n    }\n  }\n}\nvar _default = {\n  label: 'Ruby',\n  isRequired: false,\n  description: 'Required for installing iOS dependencies',\n  getDiagnostics: async ({\n    Languages\n  }) => {\n    let projectRoot;\n    try {\n      projectRoot = (0, _cliTools().findProjectRoot)();\n    } catch (e) {\n      _cliTools().logger.debug(e.message);\n    }\n    const fallbackResult = {\n      needsToBeFixed: (0, _checkInstallation.doesSoftwareNeedToBeFixed)({\n        version: Languages.Ruby.version,\n        versionRange: _versionRanges.default.RUBY\n      }),\n      version: Languages.Ruby.version,\n      versionRange: _versionRanges.default.RUBY,\n      description: ''\n    };\n\n    // No guidance from the project, so we make the best guess\n    if (!projectRoot) {\n      return fallbackResult;\n    }\n\n    // Gemfile\n    let [code, versionOrError] = await checkRubyGemfileRequirement(projectRoot);\n    switch (code) {\n      case output.OK:\n        {\n          return {\n            needsToBeFixed: false,\n            version: Languages.Ruby.version,\n            versionRange: versionOrError\n          };\n        }\n      case output.BUNDLE_INVALID_RUBY:\n        return {\n          needsToBeFixed: true,\n          version: Languages.Ruby.version,\n          versionRange: versionOrError\n        };\n      case output.NO_RUBY:\n        return {\n          needsToBeFixed: true,\n          description: 'Cannot find a working copy of Ruby.'\n        };\n      case output.NO_GEMFILE:\n        fallbackResult.description = `Could not find the project ${_chalk().default.bold('Gemfile')} in your project folder (${_chalk().default.dim(projectRoot)}), guessed using my built-in version.`;\n        break;\n      default:\n        if (versionOrError) {\n          _cliTools().logger.warn(versionOrError);\n        }\n        break;\n    }\n    return fallbackResult;\n  },\n  runAutomaticFix: async ({\n    loader,\n    logManualInstallation\n  }) => {\n    loader.fail();\n    logManualInstallation({\n      healthcheck: 'Ruby',\n      url: _cliTools().link.docs('environment-setup', {\n        hash: 'ruby',\n        guide: 'native',\n        platform: 'ios'\n      })\n    });\n  }\n};\nexports.default = _default;\n\n//# sourceMappingURL=ruby.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}