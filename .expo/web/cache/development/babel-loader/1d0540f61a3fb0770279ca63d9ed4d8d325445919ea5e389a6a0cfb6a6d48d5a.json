{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/react-native-gesture-handler/lib/typescript/handlers/handlersRegistry.d.ts"],"sourcesContent":["import { GestureType } from './gestures/gesture';\nimport { GestureEvent, HandlerStateChangeEvent } from './gestureHandlerCommon';\nexport declare const handlerIDToTag: Record<string, number>;\nexport declare function getNextHandlerTag(): number;\nexport declare function registerHandler(handlerTag: number, handler: GestureType, testID?: string): void;\nexport declare function registerOldGestureHandler(handlerTag: number, handler: GestureHandlerCallbacks): void;\nexport declare function unregisterHandler(handlerTag: number, testID?: string): void;\nexport declare function findHandler(handlerTag: number): GestureType | undefined;\nexport declare function findOldGestureHandler(handlerTag: number): GestureHandlerCallbacks | undefined;\nexport declare function findHandlerByTestID(testID: string): import(\"./gestures/gesture\").BaseGesture<Record<string, unknown>> | import(\"./gestures/gesture\").BaseGesture<Record<string, never>> | import(\"./gestures/gesture\").BaseGesture<import(\"./TapGestureHandler\").TapGestureHandlerEventPayload> | import(\"./gestures/gesture\").BaseGesture<import(\"./PanGestureHandler\").PanGestureHandlerEventPayload> | import(\"./gestures/gesture\").BaseGesture<import(\"./LongPressGestureHandler\").LongPressGestureHandlerEventPayload> | import(\"./gestures/gesture\").BaseGesture<import(\"./RotationGestureHandler\").RotationGestureHandlerEventPayload> | import(\"./gestures/gesture\").BaseGesture<import(\"./PinchGestureHandler\").PinchGestureHandlerEventPayload> | import(\"./gestures/gesture\").BaseGesture<import(\"./ForceTouchGestureHandler\").ForceTouchGestureHandlerEventPayload> | import(\"./gestures/gesture\").BaseGesture<import(\"./NativeViewGestureHandler\").NativeViewGestureHandlerPayload> | null;\nexport interface GestureHandlerCallbacks {\n    onGestureEvent: (event: GestureEvent<any>) => void;\n    onGestureStateChange: (event: HandlerStateChangeEvent<any>) => void;\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}