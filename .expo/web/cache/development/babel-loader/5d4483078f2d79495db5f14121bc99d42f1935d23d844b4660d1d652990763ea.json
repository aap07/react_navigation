{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateChecksum = validateChecksum;\nvar _debug = _interopRequireDefault(require(\"debug\"));\nvar _errors = require(\"../../../../utils/errors\");\nvar _abstractProtocol = require(\"./AbstractProtocol\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = (0, _debug).default(\"expo:apple-device:protocol:gdb\");\nvar ACK_SUCCESS = \"+\".charCodeAt(0);\nvar GDBProtocolClient = function (_abstractProtocol$Pro) {\n  _inherits(GDBProtocolClient, _abstractProtocol$Pro);\n  var _super = _createSuper(GDBProtocolClient);\n  function GDBProtocolClient(socket) {\n    _classCallCheck(this, GDBProtocolClient);\n    return _super.call(this, socket, new _abstractProtocol.ProtocolReaderFactory(GDBProtocolReader), new GDBProtocolWriter());\n  }\n  return _createClass(GDBProtocolClient);\n}(_abstractProtocol.ProtocolClient);\nexports.GDBProtocolClient = GDBProtocolClient;\nvar GDBProtocolReader = function (_abstractProtocol$Pro2) {\n  _inherits(GDBProtocolReader, _abstractProtocol$Pro2);\n  var _super2 = _createSuper(GDBProtocolReader);\n  function GDBProtocolReader(callback) {\n    _classCallCheck(this, GDBProtocolReader);\n    return _super2.call(this, 1, callback);\n  }\n  _createClass(GDBProtocolReader, [{\n    key: \"onData\",\n    value: function onData(data) {\n      try {\n        this.buffer = data ? Buffer.concat([this.buffer, data]) : this.buffer;\n        if (this.buffer.length < this.headerSize) {\n          return;\n        }\n        if (this.parseHeader(this.buffer) === -1) {\n          var packetData = this.buffer.toString().match(\"\\\\$.*#[0-9a-f]{2}\");\n          if (packetData == null) {\n            return;\n          }\n          var body = Buffer.from(packetData[0]);\n          this.buffer = this.buffer.slice(this.headerSize + body.length);\n          this.callback(this.parseBody(body));\n          if (this.buffer.length) {\n            this.onData();\n          }\n        }\n      } catch (err) {\n        this.callback(null, err);\n      }\n    }\n  }, {\n    key: \"parseHeader\",\n    value: function parseHeader(data) {\n      if (data[0] !== ACK_SUCCESS) {\n        throw new _errors.CommandError(\"APPLE_DEVICE_GDB\", \"Unsuccessful debugserver response\");\n      }\n      return -1;\n    }\n  }, {\n    key: \"parseBody\",\n    value: function parseBody(buffer) {\n      debug(`Response body: ${buffer.toString()}`);\n      var checksum = buffer.slice(-3).toString();\n      if (checksum.match(/#[0-9a-f]{2}/)) {\n        var msg = buffer.slice(1, -3).toString();\n        if (validateChecksum(checksum, msg)) {\n          return msg;\n        } else if (msg.startsWith(\"E\")) {\n          if (msg.match(/the device was not, or could not be, unlocked/)) {\n            throw new _errors.CommandError(\"APPLE_DEVICE_LOCKED\", \"Device is currently locked.\");\n          }\n          return msg.slice(1);\n        } else {\n          throw new _errors.CommandError(\"APPLE_DEVICE_GDB\", `Invalid checksum received from debugserver. (checksum: ${checksum}, msg: ${msg})`);\n        }\n      } else {\n        throw new _errors.CommandError(\"APPLE_DEVICE_GDB\", \"Didn't receive checksum\");\n      }\n    }\n  }]);\n  return GDBProtocolReader;\n}(_abstractProtocol.ProtocolReader);\nexports.GDBProtocolReader = GDBProtocolReader;\nvar GDBProtocolWriter = function () {\n  function GDBProtocolWriter() {\n    _classCallCheck(this, GDBProtocolWriter);\n  }\n  _createClass(GDBProtocolWriter, [{\n    key: \"write\",\n    value: function write(socket, msg) {\n      var cmd = msg.cmd,\n        args = msg.args;\n      debug(`Socket write: ${cmd}, args: ${args}`);\n      var encodedArgs = args.map(function (arg) {\n        return Buffer.from(arg).toString(\"hex\");\n      }).join().toUpperCase();\n      var checksumStr = calculateChecksum(cmd + encodedArgs);\n      var formattedCmd = `$${cmd}${encodedArgs}#${checksumStr}`;\n      socket.write(formattedCmd);\n    }\n  }]);\n  return GDBProtocolWriter;\n}();\nexports.GDBProtocolWriter = GDBProtocolWriter;\nfunction calculateChecksum(cmdStr) {\n  var checksum = 0;\n  for (var i = 0; i < cmdStr.length; i++) {\n    checksum += cmdStr.charCodeAt(i);\n  }\n  var result = (checksum % 256).toString(16);\n  if (result.length === 1) {\n    result = `0${result}`;\n  }\n  return result;\n}\nfunction validateChecksum(checksum, msg) {\n  var checksumVal = checksum.startsWith(\"#\") ? checksum.slice(1) : checksum;\n  var computedChecksum = calculateChecksum(msg);\n  return checksumVal === computedChecksum;\n}","map":{"version":3,"names":["_createClass","require","_classCallCheck","_inherits","_possibleConstructorReturn","_getPrototypeOf","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","validateChecksum","_debug","_interopRequireDefault","_errors","_abstractProtocol","debug","default","ACK_SUCCESS","charCodeAt","GDBProtocolClient","_abstractProtocol$Pro","_super","socket","ProtocolReaderFactory","GDBProtocolReader","GDBProtocolWriter","ProtocolClient","_abstractProtocol$Pro2","_super2","callback","key","value","onData","data","buffer","Buffer","concat","length","headerSize","parseHeader","packetData","toString","match","body","from","slice","parseBody","err","CommandError","checksum","msg","startsWith","ProtocolReader","write","cmd","args","encodedArgs","map","arg","join","toUpperCase","checksumStr","calculateChecksum","formattedCmd","cmdStr","i","checksumVal","computedChecksum"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\run\\ios\\appleDevice\\protocol\\GDBProtocol.ts"],"sourcesContent":["/**\n * Copyright (c) 2021 Expo, Inc.\n * Copyright (c) 2018 Drifty Co.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport Debug from 'debug';\nimport { Socket } from 'net';\n\nimport { CommandError } from '../../../../utils/errors';\nimport {\n  ProtocolClient,\n  ProtocolReader,\n  ProtocolReaderCallback,\n  ProtocolReaderFactory,\n  ProtocolWriter,\n} from './AbstractProtocol';\n\nconst debug = Debug('expo:apple-device:protocol:gdb');\nconst ACK_SUCCESS = '+'.charCodeAt(0);\n\nexport interface GDBMessage {\n  cmd: string;\n  args: string[];\n}\n\nexport class GDBProtocolClient extends ProtocolClient<GDBMessage> {\n  constructor(socket: Socket) {\n    super(socket, new ProtocolReaderFactory(GDBProtocolReader), new GDBProtocolWriter());\n  }\n}\n\nexport class GDBProtocolReader extends ProtocolReader {\n  constructor(callback: ProtocolReaderCallback) {\n    super(1 /* \"Header\" is '+' or '-' */, callback);\n  }\n\n  onData(data?: Buffer) {\n    // the GDB protocol does not support body length in its header so we cannot rely on\n    // the parent implementation to determine when a payload is complete\n    try {\n      // if there's data, add it to the existing buffer\n      this.buffer = data ? Buffer.concat([this.buffer, data]) : this.buffer;\n\n      // do we have enough bytes to proceed\n      if (this.buffer.length < this.headerSize) {\n        return; // incomplete header, wait for more\n      }\n\n      // first, check the header\n      if (this.parseHeader(this.buffer) === -1) {\n        // we have a valid header so check the body. GDB packets will always be a leading '$', data bytes,\n        // a trailing '#', and a two digit checksum. minimum valid body is the empty response '$#00'\n        // https://developer.apple.com/library/archive/documentation/DeveloperTools/gdb/gdb/gdb_33.html\n        const packetData = this.buffer.toString().match('\\\\$.*#[0-9a-f]{2}');\n        if (packetData == null) {\n          return; // incomplete body, wait for more\n        }\n        // extract the body and update the buffer\n        const body = Buffer.from(packetData[0]);\n        this.buffer = this.buffer.slice(this.headerSize + body.length);\n        // parse the payload and recurse if there is more data to process\n        this.callback(this.parseBody(body));\n        if (this.buffer.length) {\n          this.onData();\n        }\n      }\n    } catch (err: any) {\n      this.callback(null, err);\n    }\n  }\n\n  parseHeader(data: Buffer) {\n    if (data[0] !== ACK_SUCCESS) {\n      throw new CommandError('APPLE_DEVICE_GDB', 'Unsuccessful debugserver response');\n    } // TODO: retry?\n    return -1;\n  }\n\n  parseBody(buffer: Buffer) {\n    debug(`Response body: ${buffer.toString()}`);\n    // check for checksum\n    const checksum = buffer.slice(-3).toString();\n    if (checksum.match(/#[0-9a-f]{2}/)) {\n      // remove '$' prefix and checksum\n      const msg = buffer.slice(1, -3).toString();\n      if (validateChecksum(checksum, msg)) {\n        return msg;\n      } else if (msg.startsWith('E')) {\n        if (msg.match(/the device was not, or could not be, unlocked/)) {\n          throw new CommandError('APPLE_DEVICE_LOCKED', 'Device is currently locked.');\n        }\n\n        // Error message from debugserver -- Drop the `E`\n        return msg.slice(1);\n      } else {\n        throw new CommandError(\n          'APPLE_DEVICE_GDB',\n          `Invalid checksum received from debugserver. (checksum: ${checksum}, msg: ${msg})`\n        );\n      }\n    } else {\n      throw new CommandError('APPLE_DEVICE_GDB', \"Didn't receive checksum\");\n    }\n  }\n}\n\nexport class GDBProtocolWriter implements ProtocolWriter {\n  write(socket: Socket, msg: GDBMessage) {\n    const { cmd, args } = msg;\n    debug(`Socket write: ${cmd}, args: ${args}`);\n    // hex encode and concat all args\n    const encodedArgs = args\n      .map((arg) => Buffer.from(arg).toString('hex'))\n      .join()\n      .toUpperCase();\n    const checksumStr = calculateChecksum(cmd + encodedArgs);\n    const formattedCmd = `$${cmd}${encodedArgs}#${checksumStr}`;\n    socket.write(formattedCmd);\n  }\n}\n\n// hex value of (sum of cmd chars mod 256)\nfunction calculateChecksum(cmdStr: string) {\n  let checksum = 0;\n  for (let i = 0; i < cmdStr.length; i++) {\n    checksum += cmdStr.charCodeAt(i);\n  }\n  let result = (checksum % 256).toString(16);\n  // pad if necessary\n  if (result.length === 1) {\n    result = `0${result}`;\n  }\n  return result;\n}\n\nexport function validateChecksum(checksum: string, msg: string) {\n  // remove '#' from checksum\n  const checksumVal = checksum.startsWith('#') ? checksum.slice(1) : checksum;\n  // remove '$' from msg and calculate its checksum\n  const computedChecksum = calculateChecksum(msg);\n  // debug(`Checksum: ${checksumVal}, computed checksum: ${computedChecksum}`);\n  return checksumVal === computedChecksum;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}