{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { isMap, isPair, isScalar } from \"../../nodes/identity.js\";\nimport { Pair, createPair } from \"../../nodes/Pair.js\";\nimport { YAMLMap, findPair } from \"../../nodes/YAMLMap.js\";\nvar YAMLSet = function (_YAMLMap) {\n  _inherits(YAMLSet, _YAMLMap);\n  var _super = _createSuper(YAMLSet);\n  function YAMLSet(schema) {\n    var _this;\n    _classCallCheck(this, YAMLSet);\n    _this = _super.call(this, schema);\n    _this.tag = YAMLSet.tag;\n    return _this;\n  }\n  _createClass(YAMLSet, [{\n    key: \"add\",\n    value: function add(key) {\n      var pair;\n      if (isPair(key)) pair = key;else if (key && typeof key === 'object' && 'key' in key && 'value' in key && key.value === null) pair = new Pair(key.key, null);else pair = new Pair(key, null);\n      var prev = findPair(this.items, pair.key);\n      if (!prev) this.items.push(pair);\n    }\n  }, {\n    key: \"get\",\n    value: function get(key, keepPair) {\n      var pair = findPair(this.items, key);\n      return !keepPair && isPair(pair) ? isScalar(pair.key) ? pair.key.value : pair.key : pair;\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      if (typeof value !== 'boolean') throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof value}`);\n      var prev = findPair(this.items, key);\n      if (prev && !value) {\n        this.items.splice(this.items.indexOf(prev), 1);\n      } else if (!prev && value) {\n        this.items.push(new Pair(key));\n      }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON(_, ctx) {\n      return _get(_getPrototypeOf(YAMLSet.prototype), \"toJSON\", this).call(this, _, ctx, Set);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(ctx, onComment, onChompKeep) {\n      if (!ctx) return JSON.stringify(this);\n      if (this.hasAllNullValues(true)) return _get(_getPrototypeOf(YAMLSet.prototype), \"toString\", this).call(this, Object.assign({}, ctx, {\n        allNullValues: true\n      }), onComment, onChompKeep);else throw new Error('Set items must all have null values');\n    }\n  }], [{\n    key: \"from\",\n    value: function from(schema, iterable, ctx) {\n      var replacer = ctx.replacer;\n      var set = new this(schema);\n      if (iterable && Symbol.iterator in Object(iterable)) for (var value of iterable) {\n        if (typeof replacer === 'function') value = replacer.call(iterable, value, value);\n        set.items.push(createPair(value, null, ctx));\n      }\n      return set;\n    }\n  }]);\n  return YAMLSet;\n}(YAMLMap);\nYAMLSet.tag = 'tag:yaml.org,2002:set';\nvar set = {\n  collection: 'map',\n  identify: function identify(value) {\n    return value instanceof Set;\n  },\n  nodeClass: YAMLSet,\n  default: false,\n  tag: 'tag:yaml.org,2002:set',\n  createNode: function createNode(schema, iterable, ctx) {\n    return YAMLSet.from(schema, iterable, ctx);\n  },\n  resolve: function resolve(map, onError) {\n    if (isMap(map)) {\n      if (map.hasAllNullValues(true)) return Object.assign(new YAMLSet(), map);else onError('Set items must all have null values');\n    } else onError('Expected a mapping for this tag');\n    return map;\n  }\n};\nexport { YAMLSet, set };","map":{"version":3,"names":["isMap","isPair","isScalar","Pair","createPair","YAMLMap","findPair","YAMLSet","_YAMLMap","_inherits","_super","_createSuper","schema","_this","_classCallCheck","call","tag","_createClass","key","value","add","pair","prev","items","push","get","keepPair","set","Error","splice","indexOf","toJSON","_","ctx","_get","_getPrototypeOf","prototype","Set","toString","onComment","onChompKeep","JSON","stringify","hasAllNullValues","Object","assign","allNullValues","from","iterable","replacer","Symbol","iterator","collection","identify","nodeClass","default","createNode","resolve","map","onError"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/browser/dist/schema/yaml-1.1/set.js"],"sourcesContent":["import { isMap, isPair, isScalar } from '../../nodes/identity.js';\nimport { Pair, createPair } from '../../nodes/Pair.js';\nimport { YAMLMap, findPair } from '../../nodes/YAMLMap.js';\n\nclass YAMLSet extends YAMLMap {\n    constructor(schema) {\n        super(schema);\n        this.tag = YAMLSet.tag;\n    }\n    add(key) {\n        let pair;\n        if (isPair(key))\n            pair = key;\n        else if (key &&\n            typeof key === 'object' &&\n            'key' in key &&\n            'value' in key &&\n            key.value === null)\n            pair = new Pair(key.key, null);\n        else\n            pair = new Pair(key, null);\n        const prev = findPair(this.items, pair.key);\n        if (!prev)\n            this.items.push(pair);\n    }\n    /**\n     * If `keepPair` is `true`, returns the Pair matching `key`.\n     * Otherwise, returns the value of that Pair's key.\n     */\n    get(key, keepPair) {\n        const pair = findPair(this.items, key);\n        return !keepPair && isPair(pair)\n            ? isScalar(pair.key)\n                ? pair.key.value\n                : pair.key\n            : pair;\n    }\n    set(key, value) {\n        if (typeof value !== 'boolean')\n            throw new Error(`Expected boolean value for set(key, value) in a YAML set, not ${typeof value}`);\n        const prev = findPair(this.items, key);\n        if (prev && !value) {\n            this.items.splice(this.items.indexOf(prev), 1);\n        }\n        else if (!prev && value) {\n            this.items.push(new Pair(key));\n        }\n    }\n    toJSON(_, ctx) {\n        return super.toJSON(_, ctx, Set);\n    }\n    toString(ctx, onComment, onChompKeep) {\n        if (!ctx)\n            return JSON.stringify(this);\n        if (this.hasAllNullValues(true))\n            return super.toString(Object.assign({}, ctx, { allNullValues: true }), onComment, onChompKeep);\n        else\n            throw new Error('Set items must all have null values');\n    }\n    static from(schema, iterable, ctx) {\n        const { replacer } = ctx;\n        const set = new this(schema);\n        if (iterable && Symbol.iterator in Object(iterable))\n            for (let value of iterable) {\n                if (typeof replacer === 'function')\n                    value = replacer.call(iterable, value, value);\n                set.items.push(createPair(value, null, ctx));\n            }\n        return set;\n    }\n}\nYAMLSet.tag = 'tag:yaml.org,2002:set';\nconst set = {\n    collection: 'map',\n    identify: value => value instanceof Set,\n    nodeClass: YAMLSet,\n    default: false,\n    tag: 'tag:yaml.org,2002:set',\n    createNode: (schema, iterable, ctx) => YAMLSet.from(schema, iterable, ctx),\n    resolve(map, onError) {\n        if (isMap(map)) {\n            if (map.hasAllNullValues(true))\n                return Object.assign(new YAMLSet(), map);\n            else\n                onError('Set items must all have null values');\n        }\n        else\n            onError('Expected a mapping for this tag');\n        return map;\n    }\n};\n\nexport { YAMLSet, set };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}