{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSchemesForIosAsync = getSchemesForIosAsync;\nexports.getSchemesForAndroidAsync = getSchemesForAndroidAsync;\nexports.getOptionalDevClientSchemeAsync = getOptionalDevClientSchemeAsync;\nvar _config = require(\"@expo/config\");\nvar _configPlugins = require(\"@expo/config-plugins\");\nvar _getInfoPlistPath = require(\"@expo/config-plugins/build/ios/utils/getInfoPlistPath\");\nvar _plist = _interopRequireDefault(require(\"@expo/plist\"));\nvar _fs = _interopRequireDefault(require(\"fs\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _resolveFrom = _interopRequireDefault(require(\"resolve-from\"));\nvar Log = _interopRequireWildcard(require(\"../log\"));\nvar _clearNativeFolder = require(\"../prebuild/clearNativeFolder\");\nvar _array = require(\"./array\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar debug = require(\"debug\")(\"expo:utils:scheme\");\nfunction sortLongest(obj) {\n  return obj.sort(function (a, b) {\n    return b.length - a.length;\n  });\n}\nfunction resolveExpoOrLongestScheme(schemes) {\n  var expoOnlySchemes = schemes.filter(function (scheme) {\n    return scheme.startsWith(\"exp+\");\n  });\n  return expoOnlySchemes.length > 0 ? sortLongest(expoOnlySchemes) : sortLongest(schemes);\n}\nfunction getSchemesForIosAsync(_x) {\n  return _getSchemesForIosAsync.apply(this, arguments);\n}\nfunction _getSchemesForIosAsync() {\n  _getSchemesForIosAsync = _asyncToGenerator(function* (projectRoot) {\n    try {\n      var infoPlistBuildProperty = (0, _getInfoPlistPath).getInfoPlistPathFromPbxproj(projectRoot);\n      debug(`ios application Info.plist path:`, infoPlistBuildProperty);\n      if (infoPlistBuildProperty) {\n        var configPath = _path.default.join(projectRoot, \"ios\", infoPlistBuildProperty);\n        var rawPlist = _fs.default.readFileSync(configPath, \"utf8\");\n        var plistObject = _plist.default.parse(rawPlist);\n        var schemes = _configPlugins.IOSConfig.Scheme.getSchemesFromPlist(plistObject);\n        debug(`ios application schemes:`, schemes);\n        return resolveExpoOrLongestScheme(schemes);\n      }\n    } catch (error) {\n      debug(`expected error collecting ios application schemes for the main target:`, error);\n    }\n    return [];\n  });\n  return _getSchemesForIosAsync.apply(this, arguments);\n}\nfunction getSchemesForAndroidAsync(_x2) {\n  return _getSchemesForAndroidAsync.apply(this, arguments);\n}\nfunction _getSchemesForAndroidAsync() {\n  _getSchemesForAndroidAsync = _asyncToGenerator(function* (projectRoot) {\n    try {\n      var configPath = yield _configPlugins.AndroidConfig.Paths.getAndroidManifestAsync(projectRoot);\n      var manifest = yield _configPlugins.AndroidConfig.Manifest.readAndroidManifestAsync(configPath);\n      var schemes = yield _configPlugins.AndroidConfig.Scheme.getSchemesFromManifest(manifest);\n      debug(`android application schemes:`, schemes);\n      return resolveExpoOrLongestScheme(schemes);\n    } catch (error) {\n      debug(`expected error collecting android application schemes for the main activity:`, error);\n      return [];\n    }\n  });\n  return _getSchemesForAndroidAsync.apply(this, arguments);\n}\nfunction getManagedDevClientSchemeAsync(_x3) {\n  return _getManagedDevClientSchemeAsync.apply(this, arguments);\n}\nfunction _getManagedDevClientSchemeAsync() {\n  _getManagedDevClientSchemeAsync = _asyncToGenerator(function* (projectRoot) {\n    var _getConfig = (0, _config).getConfig(projectRoot),\n      exp = _getConfig.exp;\n    try {\n      var getDefaultScheme = require((0, _resolveFrom).default(projectRoot, \"expo-dev-client/getDefaultScheme\"));\n      var scheme = getDefaultScheme(exp);\n      return scheme;\n    } catch (_unused) {\n      Log.warn(\"\\nDevelopment build: Unable to get the default URI scheme for the project. Please make sure the expo-dev-client package is installed.\");\n      return null;\n    }\n  });\n  return _getManagedDevClientSchemeAsync.apply(this, arguments);\n}\nfunction getOptionalDevClientSchemeAsync(_x4) {\n  return _getOptionalDevClientSchemeAsync.apply(this, arguments);\n}\nfunction _getOptionalDevClientSchemeAsync() {\n  _getOptionalDevClientSchemeAsync = _asyncToGenerator(function* (projectRoot) {\n    var _yield$Promise$all = yield Promise.all([(0, _clearNativeFolder).hasRequiredIOSFilesAsync(projectRoot), (0, _clearNativeFolder).hasRequiredAndroidFilesAsync(projectRoot)]),\n      _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2),\n      hasIos = _yield$Promise$all2[0],\n      hasAndroid = _yield$Promise$all2[1];\n    var _yield$Promise$all3 = yield Promise.all([getSchemesForIosAsync(projectRoot), getSchemesForAndroidAsync(projectRoot)]),\n      _yield$Promise$all4 = _slicedToArray(_yield$Promise$all3, 2),\n      ios = _yield$Promise$all4[0],\n      android = _yield$Promise$all4[1];\n    if (!hasIos && !hasAndroid) {\n      return getManagedDevClientSchemeAsync(projectRoot);\n    }\n    var matching;\n    if (!hasIos) {\n      matching = android[0];\n    } else if (!hasAndroid) {\n      matching = ios[0];\n    } else {\n      var _intersecting = (0, _array).intersecting(ios, android);\n      var _intersecting2 = _slicedToArray(_intersecting, 1);\n      matching = _intersecting2[0];\n    }\n    return matching != null ? matching : null;\n  });\n  return _getOptionalDevClientSchemeAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_slicedToArray","require","_asyncToGenerator","getSchemesForIosAsync","getSchemesForAndroidAsync","getOptionalDevClientSchemeAsync","_config","_configPlugins","_getInfoPlistPath","_plist","_interopRequireDefault","_fs","_path","_resolveFrom","Log","_interopRequireWildcard","_clearNativeFolder","_array","debug","sortLongest","obj","sort","a","b","length","resolveExpoOrLongestScheme","schemes","expoOnlySchemes","filter","scheme","startsWith","_x","_getSchemesForIosAsync","apply","arguments","projectRoot","infoPlistBuildProperty","getInfoPlistPathFromPbxproj","configPath","default","join","rawPlist","readFileSync","plistObject","parse","IOSConfig","Scheme","getSchemesFromPlist","error","_x2","_getSchemesForAndroidAsync","AndroidConfig","Paths","getAndroidManifestAsync","manifest","Manifest","readAndroidManifestAsync","getSchemesFromManifest","getManagedDevClientSchemeAsync","_x3","_getManagedDevClientSchemeAsync","_getConfig","getConfig","exp","getDefaultScheme","_unused","warn","_x4","_getOptionalDevClientSchemeAsync","_yield$Promise$all","Promise","all","hasRequiredIOSFilesAsync","hasRequiredAndroidFilesAsync","_yield$Promise$all2","hasIos","hasAndroid","_yield$Promise$all3","_yield$Promise$all4","ios","android","matching","_intersecting","intersecting","_intersecting2"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\utils\\scheme.ts"],"sourcesContent":["import { getConfig } from '@expo/config';\nimport { AndroidConfig, IOSConfig } from '@expo/config-plugins';\nimport { getInfoPlistPathFromPbxproj } from '@expo/config-plugins/build/ios/utils/getInfoPlistPath';\nimport plist from '@expo/plist';\nimport fs from 'fs';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport * as Log from '../log';\nimport {\n  hasRequiredAndroidFilesAsync,\n  hasRequiredIOSFilesAsync,\n} from '../prebuild/clearNativeFolder';\nimport { intersecting } from './array';\n\nconst debug = require('debug')('expo:utils:scheme') as typeof console.log;\n\n// sort longest to ensure uniqueness.\n// this might be undesirable as it causes the QR code to be longer.\nfunction sortLongest(obj: string[]): string[] {\n  return obj.sort((a, b) => b.length - a.length);\n}\n\n/**\n * Resolve the scheme for the dev client using two methods:\n *   - filter on known Expo schemes, starting with `exp+`, avoiding 3rd party schemes.\n *   - filter on longest to ensure uniqueness.\n */\nfunction resolveExpoOrLongestScheme(schemes: string[]): string[] {\n  const expoOnlySchemes = schemes.filter((scheme) => scheme.startsWith('exp+'));\n  return expoOnlySchemes.length > 0 ? sortLongest(expoOnlySchemes) : sortLongest(schemes);\n}\n\n// TODO: Revisit and test after run code is merged.\nexport async function getSchemesForIosAsync(projectRoot: string): Promise<string[]> {\n  try {\n    const infoPlistBuildProperty = getInfoPlistPathFromPbxproj(projectRoot);\n    debug(`ios application Info.plist path:`, infoPlistBuildProperty);\n    if (infoPlistBuildProperty) {\n      const configPath = path.join(projectRoot, 'ios', infoPlistBuildProperty);\n      const rawPlist = fs.readFileSync(configPath, 'utf8');\n      const plistObject = plist.parse(rawPlist);\n      const schemes = IOSConfig.Scheme.getSchemesFromPlist(plistObject);\n      debug(`ios application schemes:`, schemes);\n      return resolveExpoOrLongestScheme(schemes);\n    }\n  } catch (error) {\n    debug(`expected error collecting ios application schemes for the main target:`, error);\n  }\n  // No ios folder or some other error\n  return [];\n}\n\n// TODO: Revisit and test after run code is merged.\nexport async function getSchemesForAndroidAsync(projectRoot: string): Promise<string[]> {\n  try {\n    const configPath = await AndroidConfig.Paths.getAndroidManifestAsync(projectRoot);\n    const manifest = await AndroidConfig.Manifest.readAndroidManifestAsync(configPath);\n    const schemes = await AndroidConfig.Scheme.getSchemesFromManifest(manifest);\n    debug(`android application schemes:`, schemes);\n    return resolveExpoOrLongestScheme(schemes);\n  } catch (error) {\n    debug(`expected error collecting android application schemes for the main activity:`, error);\n    // No android folder or some other error\n    return [];\n  }\n}\n\n// TODO: Revisit and test after run code is merged.\nasync function getManagedDevClientSchemeAsync(projectRoot: string): Promise<string | null> {\n  const { exp } = getConfig(projectRoot);\n  try {\n    const getDefaultScheme = require(resolveFrom(projectRoot, 'expo-dev-client/getDefaultScheme'));\n    const scheme = getDefaultScheme(exp);\n    return scheme;\n  } catch {\n    Log.warn(\n      '\\nDevelopment build: Unable to get the default URI scheme for the project. Please make sure the expo-dev-client package is installed.'\n    );\n    return null;\n  }\n}\n\n// TODO: Revisit and test after run code is merged.\nexport async function getOptionalDevClientSchemeAsync(projectRoot: string): Promise<string | null> {\n  const [hasIos, hasAndroid] = await Promise.all([\n    hasRequiredIOSFilesAsync(projectRoot),\n    hasRequiredAndroidFilesAsync(projectRoot),\n  ]);\n\n  const [ios, android] = await Promise.all([\n    getSchemesForIosAsync(projectRoot),\n    getSchemesForAndroidAsync(projectRoot),\n  ]);\n\n  // Allow managed projects\n  if (!hasIos && !hasAndroid) {\n    return getManagedDevClientSchemeAsync(projectRoot);\n  }\n\n  let matching: string;\n  // Allow for only one native project to exist.\n  if (!hasIos) {\n    matching = android[0];\n  } else if (!hasAndroid) {\n    matching = ios[0];\n  } else {\n    [matching] = intersecting(ios, android);\n  }\n  return matching ?? null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}