{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.logConfig = logConfig;\nexports.configAsync = configAsync;\nvar _config = require(\"@expo/config\");\nvar _assert = _interopRequireDefault(require(\"assert\"));\nvar _util = _interopRequireDefault(require(\"util\"));\nvar Log = _interopRequireWildcard(require(\"../log\"));\nvar _errors = require(\"../utils/errors\");\nvar _nodeEnv = require(\"../utils/nodeEnv\");\nvar _profile = require(\"../utils/profile\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction logConfig(config) {\n  var isObjStr = function isObjStr(str) {\n    return /^\\w+: {/g.test(str);\n  };\n  Log.log(_util.default.inspect(config, {\n    colors: true,\n    compact: false,\n    sorted: function sorted(a, b) {\n      if (isObjStr(a)) return 1;\n      if (isObjStr(b)) return -1;\n      return 0;\n    },\n    showHidden: false,\n    depth: null\n  }));\n}\nfunction configAsync(_x, _x2) {\n  return _configAsync.apply(this, arguments);\n}\nfunction _configAsync() {\n  _configAsync = _asyncToGenerator(function* (projectRoot, options) {\n    (0, _nodeEnv).setNodeEnv(\"development\");\n    require(\"@expo/env\").load(projectRoot);\n    if (options.type) {\n      _assert.default.match(options.type, /^(public|prebuild|introspect)$/);\n    }\n    var config;\n    if (options.type === \"prebuild\") {\n      var _yield$Promise$resolv = yield Promise.resolve().then(function () {\n          return _interopRequireWildcard(require(\"@expo/prebuild-config\"));\n        }),\n        getPrebuildConfigAsync = _yield$Promise$resolv.getPrebuildConfigAsync;\n      config = yield (0, _profile).profile(getPrebuildConfigAsync)(projectRoot, {\n        platforms: [\"ios\", \"android\"]\n      });\n    } else if (options.type === \"introspect\") {\n      var _yield$Promise$resolv2 = yield Promise.resolve().then(function () {\n          return _interopRequireWildcard(require(\"@expo/prebuild-config\"));\n        }),\n        _getPrebuildConfigAsync = _yield$Promise$resolv2.getPrebuildConfigAsync;\n      var _yield$Promise$resolv3 = yield Promise.resolve().then(function () {\n          return _interopRequireWildcard(require(\"@expo/config-plugins/build/plugins/mod-compiler\"));\n        }),\n        compileModsAsync = _yield$Promise$resolv3.compileModsAsync;\n      config = yield (0, _profile).profile(_getPrebuildConfigAsync)(projectRoot, {\n        platforms: [\"ios\", \"android\"]\n      });\n      yield compileModsAsync(config.exp, {\n        projectRoot: projectRoot,\n        introspect: true,\n        platforms: [\"ios\", \"android\"],\n        assertMissingModProviders: false\n      });\n      delete config.modRequest;\n      delete config.modResults;\n    } else if (options.type === \"public\") {\n      config = (0, _profile).profile(_config.getConfig)(projectRoot, {\n        skipSDKVersionRequirement: true,\n        isPublicConfig: true\n      });\n    } else if (options.type) {\n      throw new _errors.CommandError(`Invalid option: --type ${options.type}. Valid options are: public, prebuild`);\n    } else {\n      config = (0, _profile).profile(_config.getConfig)(projectRoot, {\n        skipSDKVersionRequirement: true\n      });\n    }\n    var configOutput = options.full ? config : config.exp;\n    if (!options.json) {\n      Log.log();\n      logConfig(configOutput);\n      Log.log();\n    } else {\n      Log.log(JSON.stringify(configOutput));\n    }\n  });\n  return _configAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","logConfig","configAsync","_config","_assert","_interopRequireDefault","_util","Log","_interopRequireWildcard","_errors","_nodeEnv","_profile","config","isObjStr","str","test","log","default","inspect","colors","compact","sorted","a","b","showHidden","depth","_x","_x2","_configAsync","apply","arguments","projectRoot","options","setNodeEnv","load","type","match","_yield$Promise$resolv","Promise","resolve","then","getPrebuildConfigAsync","profile","platforms","_yield$Promise$resolv2","_yield$Promise$resolv3","compileModsAsync","exp","introspect","assertMissingModProviders","modRequest","modResults","getConfig","skipSDKVersionRequirement","isPublicConfig","CommandError","configOutput","full","json","JSON","stringify"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\config\\configAsync.ts"],"sourcesContent":["import { ExpoConfig, getConfig, ProjectConfig } from '@expo/config';\nimport assert from 'assert';\nimport util from 'util';\n\nimport * as Log from '../log';\nimport { CommandError } from '../utils/errors';\nimport { setNodeEnv } from '../utils/nodeEnv';\nimport { profile } from '../utils/profile';\n\ntype Options = {\n  type?: string;\n  full?: boolean;\n  json?: boolean;\n};\n\nexport function logConfig(config: ExpoConfig | ProjectConfig) {\n  const isObjStr = (str: string): boolean => /^\\w+: {/g.test(str);\n  Log.log(\n    util.inspect(config, {\n      colors: true,\n      compact: false,\n      // Sort objects to the end so that smaller values aren't hidden between large objects.\n      sorted(a: string, b: string) {\n        if (isObjStr(a)) return 1;\n        if (isObjStr(b)) return -1;\n        return 0;\n      },\n      showHidden: false,\n      depth: null,\n    })\n  );\n}\n\nexport async function configAsync(projectRoot: string, options: Options) {\n  setNodeEnv('development');\n  require('@expo/env').load(projectRoot);\n\n  if (options.type) {\n    assert.match(options.type, /^(public|prebuild|introspect)$/);\n  }\n\n  let config: ProjectConfig;\n\n  if (options.type === 'prebuild') {\n    const { getPrebuildConfigAsync } = await import('@expo/prebuild-config');\n\n    config = await profile(getPrebuildConfigAsync)(projectRoot, {\n      platforms: ['ios', 'android'],\n    });\n  } else if (options.type === 'introspect') {\n    const { getPrebuildConfigAsync } = await import('@expo/prebuild-config');\n    const { compileModsAsync } = await import('@expo/config-plugins/build/plugins/mod-compiler');\n\n    config = await profile(getPrebuildConfigAsync)(projectRoot, {\n      platforms: ['ios', 'android'],\n    });\n\n    await compileModsAsync(config.exp, {\n      projectRoot,\n      introspect: true,\n      platforms: ['ios', 'android'],\n      assertMissingModProviders: false,\n    });\n    // @ts-ignore\n    delete config.modRequest;\n    // @ts-ignore\n    delete config.modResults;\n  } else if (options.type === 'public') {\n    config = profile(getConfig)(projectRoot, {\n      skipSDKVersionRequirement: true,\n      isPublicConfig: true,\n    });\n  } else if (options.type) {\n    throw new CommandError(\n      `Invalid option: --type ${options.type}. Valid options are: public, prebuild`\n    );\n  } else {\n    config = profile(getConfig)(projectRoot, {\n      skipSDKVersionRequirement: true,\n    });\n  }\n\n  const configOutput = options.full ? config : config.exp;\n\n  if (!options.json) {\n    Log.log();\n    logConfig(configOutput);\n    Log.log();\n  } else {\n    Log.log(JSON.stringify(configOutput));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}