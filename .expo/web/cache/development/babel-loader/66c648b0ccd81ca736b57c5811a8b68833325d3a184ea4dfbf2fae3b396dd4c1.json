{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport pack from 'react-native/package.json';\nvar _pack$version$split = pack.version.split('.'),\n  _pack$version$split2 = _slicedToArray(_pack$version$split, 2),\n  majorStr = _pack$version$split2[0],\n  minorStr = _pack$version$split2[1];\nexport var REACT_NATIVE_VERSION = {\n  major: parseInt(majorStr, 10),\n  minor: parseInt(minorStr, 10)\n};\nexport function toArray(object) {\n  if (!Array.isArray(object)) {\n    return [object];\n  }\n  return object;\n}\nexport function withPrevAndCurrent(array, mapFn) {\n  var previousArr = [null];\n  var currentArr = _toConsumableArray(array);\n  var transformedArr = [];\n  currentArr.forEach(function (current, i) {\n    var previous = previousArr[i];\n    var transformed = mapFn(previous, current);\n    previousArr.push(transformed);\n    transformedArr.push(transformed);\n  });\n  return transformedArr;\n}\nexport function hasProperty(object, key) {\n  return Object.prototype.hasOwnProperty.call(object, key);\n}\nexport function isJestEnv() {\n  return hasProperty(global, 'process') && !!process.env.JEST_WORKER_ID;\n}\nexport function tagMessage(msg) {\n  return `[react-native-gesture-handler] ${msg}`;\n}\nexport function isFabric() {\n  var _global;\n  return !!((_global = global) != null && _global.nativeFabricUIManager);\n}\nexport function isRemoteDebuggingEnabled() {\n  return !global.nativeCallSyncHook || global.__REMOTEDEV__;\n}","map":{"version":3,"names":["pack","_pack$version$split","version","split","_pack$version$split2","_slicedToArray","majorStr","minorStr","REACT_NATIVE_VERSION","major","parseInt","minor","toArray","object","Array","isArray","withPrevAndCurrent","array","mapFn","previousArr","currentArr","_toConsumableArray","transformedArr","forEach","current","i","previous","transformed","push","hasProperty","key","Object","prototype","hasOwnProperty","call","isJestEnv","global","process","env","JEST_WORKER_ID","tagMessage","msg","isFabric","_global","nativeFabricUIManager","isRemoteDebuggingEnabled","nativeCallSyncHook","__REMOTEDEV__"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/react-native-gesture-handler/src/utils.ts"],"sourcesContent":["import pack from 'react-native/package.json';\n\nconst [majorStr, minorStr] = pack.version.split('.');\nexport const REACT_NATIVE_VERSION = {\n  major: parseInt(majorStr, 10),\n  minor: parseInt(minorStr, 10),\n};\n\nexport function toArray<T>(object: T | T[]): T[] {\n  if (!Array.isArray(object)) {\n    return [object];\n  }\n\n  return object;\n}\n\nexport type withPrevAndCurrentMapFn<T, Transformed> = (\n  previous: Transformed | null,\n  current: T\n) => Transformed;\nexport function withPrevAndCurrent<T, Transformed>(\n  array: T[],\n  mapFn: withPrevAndCurrentMapFn<T, Transformed>\n): Transformed[] {\n  const previousArr: (null | Transformed)[] = [null];\n  const currentArr = [...array];\n  const transformedArr: Transformed[] = [];\n  currentArr.forEach((current, i) => {\n    const previous = previousArr[i];\n    const transformed = mapFn(previous, current);\n    previousArr.push(transformed);\n    transformedArr.push(transformed);\n  });\n  return transformedArr;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function hasProperty(object: object, key: string) {\n  return Object.prototype.hasOwnProperty.call(object, key);\n}\n\nexport function isJestEnv(): boolean {\n  // @ts-ignore Do not use `@types/node` because it will prioritise Node types over RN types which breaks the types (ex. setTimeout) in React Native projects.\n  return hasProperty(global, 'process') && !!process.env.JEST_WORKER_ID;\n}\n\nexport function tagMessage(msg: string) {\n  return `[react-native-gesture-handler] ${msg}`;\n}\n\n// helper method to check whether Fabric is enabled, however global.nativeFabricUIManager\n// may not be initialized before the first render\nexport function isFabric(): boolean {\n  // @ts-expect-error nativeFabricUIManager is not yet included in the RN types\n  return !!global?.nativeFabricUIManager;\n}\n\nexport function isRemoteDebuggingEnabled(): boolean {\n  // react-native-reanimated checks if in remote debugging in the same way\n  // @ts-ignore global is available but node types are not included\n  return !(global as any).nativeCallSyncHook || (global as any).__REMOTEDEV__;\n}\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,2BAA2B;AAE5C,IAAAC,mBAAA,GAA6BD,IAAI,CAACE,OAAO,CAACC,KAAK,CAAC,GAAG,CAAC;EAAAC,oBAAA,GAAAC,cAAA,CAAAJ,mBAAA;EAA7CK,QAAQ,GAAAF,oBAAA;EAAEG,QAAQ,GAAAH,oBAAA;AACzB,OAAO,IAAMI,oBAAoB,GAAG;EAClCC,KAAK,EAAEC,QAAQ,CAACJ,QAAQ,EAAE,EAAE,CAAC;EAC7BK,KAAK,EAAED,QAAQ,CAACH,QAAQ,EAAE,EAAE;AAC9B,CAAC;AAED,OAAO,SAASK,OAAOA,CAAIC,MAAe,EAAO;EAC/C,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,EAAE;IAC1B,OAAO,CAACA,MAAM,CAAC;EACjB;EAEA,OAAOA,MAAM;AACf;AAMA,OAAO,SAASG,kBAAkBA,CAChCC,KAAU,EACVC,KAA8C,EAC/B;EACf,IAAMC,WAAmC,GAAG,CAAC,IAAI,CAAC;EAClD,IAAMC,UAAU,GAAAC,kBAAA,CAAOJ,KAAK,CAAC;EAC7B,IAAMK,cAA6B,GAAG,EAAE;EACxCF,UAAU,CAACG,OAAO,CAAC,UAACC,OAAO,EAAEC,CAAC,EAAK;IACjC,IAAMC,QAAQ,GAAGP,WAAW,CAACM,CAAC,CAAC;IAC/B,IAAME,WAAW,GAAGT,KAAK,CAACQ,QAAQ,EAAEF,OAAO,CAAC;IAC5CL,WAAW,CAACS,IAAI,CAACD,WAAW,CAAC;IAC7BL,cAAc,CAACM,IAAI,CAACD,WAAW,CAAC;EAClC,CAAC,CAAC;EACF,OAAOL,cAAc;AACvB;AAGA,OAAO,SAASO,WAAWA,CAAChB,MAAc,EAAEiB,GAAW,EAAE;EACvD,OAAOC,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACrB,MAAM,EAAEiB,GAAG,CAAC;AAC1D;AAEA,OAAO,SAASK,SAASA,CAAA,EAAY;EAEnC,OAAON,WAAW,CAACO,MAAM,EAAE,SAAS,CAAC,IAAI,CAAC,CAACC,OAAO,CAACC,GAAG,CAACC,cAAc;AACvE;AAEA,OAAO,SAASC,UAAUA,CAACC,GAAW,EAAE;EACtC,OAAQ,kCAAiCA,GAAI,EAAC;AAChD;AAIA,OAAO,SAASC,QAAQA,CAAA,EAAY;EAAA,IAAAC,OAAA;EAElC,OAAO,CAAC,GAAAA,OAAA,GAACP,MAAM,aAANO,OAAA,CAAQC,qBAAqB;AACxC;AAEA,OAAO,SAASC,wBAAwBA,CAAA,EAAY;EAGlD,OAAO,CAAET,MAAM,CAASU,kBAAkB,IAAKV,MAAM,CAASW,aAAa;AAC7E"},"metadata":{},"sourceType":"module","externalDependencies":[]}