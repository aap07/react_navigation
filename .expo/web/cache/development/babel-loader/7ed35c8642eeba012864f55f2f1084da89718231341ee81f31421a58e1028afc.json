{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _get = require(\"@babel/runtime/helpers/get\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createEntryResolver = createEntryResolver;\nexports.createFileTransform = createFileTransform;\nvar _configPlugins = require(\"@expo/config-plugins\");\nvar _minipass = _interopRequireDefault(require(\"minipass\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction escapeXMLCharacters(original) {\n  var noAmps = original.replace(\"&\", \"&amp;\");\n  var noLt = noAmps.replace(\"<\", \"&lt;\");\n  var noGt = noLt.replace(\">\", \"&gt;\");\n  var noApos = noGt.replace('\"', '\\\\\"');\n  return noApos.replace(\"'\", \"\\\\'\");\n}\nvar Transformer = function (_minipass$default) {\n  _inherits(Transformer, _minipass$default);\n  var _super = _createSuper(Transformer);\n  function Transformer(settings) {\n    var _this;\n    _classCallCheck(this, Transformer);\n    _this = _super.call(this);\n    _this.settings = settings;\n    _this.data = \"\";\n    return _this;\n  }\n  _createClass(Transformer, [{\n    key: \"write\",\n    value: function write(data) {\n      this.data += data;\n      return true;\n    }\n  }, {\n    key: \"getNormalizedName\",\n    value: function getNormalizedName() {\n      if ([\".xml\", \".plist\"].includes(this.settings.extension)) {\n        return escapeXMLCharacters(this.settings.name);\n      }\n      return this.settings.name;\n    }\n  }, {\n    key: \"end\",\n    value: function end() {\n      var name = this.getNormalizedName();\n      var replaced = this.data.replace(/Hello App Display Name/g, name).replace(/HelloWorld/g, _configPlugins.IOSConfig.XcodeUtils.sanitizedName(name)).replace(/helloworld/g, _configPlugins.IOSConfig.XcodeUtils.sanitizedName(name.toLowerCase()));\n      _get(_getPrototypeOf(Transformer.prototype), \"write\", this).call(this, replaced);\n      return _get(_getPrototypeOf(Transformer.prototype), \"end\", this).call(this);\n    }\n  }]);\n  return Transformer;\n}(_minipass.default);\nfunction createEntryResolver(name) {\n  return function (entry) {\n    if (name) {\n      entry.path = entry.path.replace(/HelloWorld/g, entry.path.includes(\"android\") ? _configPlugins.IOSConfig.XcodeUtils.sanitizedName(name.toLowerCase()) : _configPlugins.IOSConfig.XcodeUtils.sanitizedName(name)).replace(/helloworld/g, _configPlugins.IOSConfig.XcodeUtils.sanitizedName(name).toLowerCase());\n    }\n    if (entry.type && /^file$/i.test(entry.type) && _path.default.basename(entry.path) === \"gitignore\") {\n      entry.path = entry.path.replace(/gitignore$/, \".gitignore\");\n    }\n  };\n}\nfunction createFileTransform(name) {\n  return function (entry) {\n    var extension = _path.default.extname(entry.path);\n    if (![\".png\", \".jpg\", \".jpeg\", \".gif\", \".webp\", \".psd\", \".tiff\", \".svg\", \".jar\", \".keystore\", \".otf\", \".ttf\"].includes(extension) && name) {\n      return new Transformer({\n        name: name,\n        extension: extension\n      });\n    }\n    return undefined;\n  };\n}","map":{"version":3,"names":["_classCallCheck","require","_createClass","_get","_inherits","_possibleConstructorReturn","_getPrototypeOf","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","createEntryResolver","createFileTransform","_configPlugins","_minipass","_interopRequireDefault","_path","escapeXMLCharacters","original","noAmps","replace","noLt","noGt","noApos","Transformer","_minipass$default","_super","settings","_this","data","key","value","write","getNormalizedName","includes","extension","name","end","replaced","IOSConfig","XcodeUtils","sanitizedName","toLowerCase","default","entry","path","type","test","basename","extname","undefined"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\utils\\createFileTransform.ts"],"sourcesContent":["import { IOSConfig } from '@expo/config-plugins';\nimport Minipass from 'minipass';\nimport path from 'path';\nimport { ReadEntry } from 'tar';\n\nfunction escapeXMLCharacters(original: string): string {\n  const noAmps = original.replace('&', '&amp;');\n  const noLt = noAmps.replace('<', '&lt;');\n  const noGt = noLt.replace('>', '&gt;');\n  const noApos = noGt.replace('\"', '\\\\\"');\n  return noApos.replace(\"'\", \"\\\\'\");\n}\n\nclass Transformer extends Minipass {\n  data = '';\n\n  constructor(private settings: { name: string; extension: string }) {\n    super();\n  }\n\n  write(data: string) {\n    this.data += data;\n    return true;\n  }\n\n  getNormalizedName(): string {\n    if (['.xml', '.plist'].includes(this.settings.extension)) {\n      return escapeXMLCharacters(this.settings.name);\n    }\n    return this.settings.name;\n  }\n\n  end() {\n    const name = this.getNormalizedName();\n    const replaced = this.data\n      .replace(/Hello App Display Name/g, name)\n      .replace(/HelloWorld/g, IOSConfig.XcodeUtils.sanitizedName(name))\n      .replace(/helloworld/g, IOSConfig.XcodeUtils.sanitizedName(name.toLowerCase()));\n    super.write(replaced);\n    return super.end();\n  }\n}\n\nexport function createEntryResolver(name: string) {\n  return (entry: ReadEntry) => {\n    if (name) {\n      // Rewrite paths for bare workflow\n      entry.path = entry.path\n        .replace(\n          /HelloWorld/g,\n          entry.path.includes('android')\n            ? IOSConfig.XcodeUtils.sanitizedName(name.toLowerCase())\n            : IOSConfig.XcodeUtils.sanitizedName(name)\n        )\n        .replace(/helloworld/g, IOSConfig.XcodeUtils.sanitizedName(name).toLowerCase());\n    }\n    if (entry.type && /^file$/i.test(entry.type) && path.basename(entry.path) === 'gitignore') {\n      // Rename `gitignore` because npm ignores files named `.gitignore` when publishing.\n      // See: https://github.com/npm/npm/issues/1862\n      entry.path = entry.path.replace(/gitignore$/, '.gitignore');\n    }\n  };\n}\n\nexport function createFileTransform(name: string) {\n  return (entry: ReadEntry) => {\n    const extension = path.extname(entry.path);\n\n    // Binary files, don't process these (avoid decoding as utf8)\n    if (\n      ![\n        '.png',\n        '.jpg',\n        '.jpeg',\n        '.gif',\n        '.webp',\n        '.psd',\n        '.tiff',\n        '.svg',\n        '.jar',\n        '.keystore',\n\n        // Font files\n        '.otf',\n        '.ttf',\n      ].includes(extension) &&\n      name\n    ) {\n      return new Transformer({ name, extension });\n    }\n    return undefined;\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}