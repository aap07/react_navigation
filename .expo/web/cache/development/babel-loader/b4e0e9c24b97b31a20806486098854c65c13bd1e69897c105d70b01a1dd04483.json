{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ensureEnvironmentSupportsTLSAsync = ensureEnvironmentSupportsTLSAsync;\nexports.getTLSCertAsync = getTLSCertAsync;\nvar _devcert = require(\"@expo/devcert\");\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _promises = _interopRequireDefault(require(\"fs/promises\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar Log = _interopRequireWildcard(require(\"../../../log\"));\nvar _dir = require(\"../../../utils/dir\");\nvar _dotExpo = require(\"../../project/dotExpo\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction ensureEnvironmentSupportsTLSAsync(_x) {\n  return _ensureEnvironmentSupportsTLSAsync.apply(this, arguments);\n}\nfunction _ensureEnvironmentSupportsTLSAsync() {\n  _ensureEnvironmentSupportsTLSAsync = _asyncToGenerator(function* (projectRoot) {\n    if (!process.env.SSL_CRT_FILE || !process.env.SSL_KEY_FILE) {\n      var tls = yield getTLSCertAsync(projectRoot);\n      if (tls) {\n        process.env.SSL_CRT_FILE = tls.certPath;\n        process.env.SSL_KEY_FILE = tls.keyPath;\n      }\n    }\n  });\n  return _ensureEnvironmentSupportsTLSAsync.apply(this, arguments);\n}\nfunction getTLSCertAsync(_x2) {\n  return _getTLSCertAsync.apply(this, arguments);\n}\nfunction _getTLSCertAsync() {\n  _getTLSCertAsync = _asyncToGenerator(function* (projectRoot) {\n    Log.log(_chalk.default`Creating TLS certificate for localhost. {dim This functionality may not work on all computers.}`);\n    var name = \"localhost\";\n    var result = yield (0, _devcert).certificateFor(name);\n    if (result) {\n      var dotExpoDir = (0, _dotExpo).ensureDotExpoProjectDirectoryInitialized(projectRoot);\n      var key = result.key,\n        cert = result.cert;\n      var folder = _path.default.join(dotExpoDir, \"tls\");\n      var keyPath = _path.default.join(folder, `key-${name}.pem`);\n      var certPath = _path.default.join(folder, `cert-${name}.pem`);\n      yield (0, _dir).ensureDirectoryAsync(folder);\n      yield Promise.allSettled([_promises.default.writeFile(keyPath, key), _promises.default.writeFile(certPath, cert)]);\n      return {\n        keyPath: keyPath,\n        certPath: certPath\n      };\n    }\n    return result;\n  });\n  return _getTLSCertAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","ensureEnvironmentSupportsTLSAsync","getTLSCertAsync","_devcert","_chalk","_interopRequireDefault","_promises","_path","Log","_interopRequireWildcard","_dir","_dotExpo","_x","_ensureEnvironmentSupportsTLSAsync","apply","arguments","projectRoot","process","env","SSL_CRT_FILE","SSL_KEY_FILE","tls","certPath","keyPath","_x2","_getTLSCertAsync","log","default","name","result","certificateFor","dotExpoDir","ensureDotExpoProjectDirectoryInitialized","key","cert","folder","join","ensureDirectoryAsync","Promise","allSettled","writeFile"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\webpack\\tls.ts"],"sourcesContent":["import { certificateFor } from '@expo/devcert';\nimport chalk from 'chalk';\nimport fs from 'fs/promises';\nimport path from 'path';\n\nimport * as Log from '../../../log';\nimport { ensureDirectoryAsync } from '../../../utils/dir';\nimport { ensureDotExpoProjectDirectoryInitialized } from '../../project/dotExpo';\n\n// TODO: Move to doctor as a prereq.\n\n/** Ensure TLS is setup and environment variables are set. */\nexport async function ensureEnvironmentSupportsTLSAsync(projectRoot: string) {\n  if (!process.env.SSL_CRT_FILE || !process.env.SSL_KEY_FILE) {\n    const tls = await getTLSCertAsync(projectRoot);\n    if (tls) {\n      process.env.SSL_CRT_FILE = tls.certPath;\n      process.env.SSL_KEY_FILE = tls.keyPath;\n    }\n  }\n}\n\n/** Create TLS and write to files in the temporary directory. Exposed for testing. */\nexport async function getTLSCertAsync(\n  projectRoot: string\n): Promise<{ keyPath: string; certPath: string } | false> {\n  Log.log(\n    chalk`Creating TLS certificate for localhost. {dim This functionality may not work on all computers.}`\n  );\n\n  const name = 'localhost';\n  const result = await certificateFor(name);\n  if (result) {\n    const dotExpoDir = ensureDotExpoProjectDirectoryInitialized(projectRoot);\n\n    const { key, cert } = result;\n    const folder = path.join(dotExpoDir, 'tls');\n    const keyPath = path.join(folder, `key-${name}.pem`);\n    const certPath = path.join(folder, `cert-${name}.pem`);\n\n    await ensureDirectoryAsync(folder);\n    await Promise.allSettled([fs.writeFile(keyPath, key), fs.writeFile(certPath, cert)]);\n\n    return {\n      keyPath,\n      certPath,\n    };\n  }\n  return result;\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,iBAAA,GAAAC,OAAA;;;;QAYsBC,iCAAiC,GAAjCA,iCAAiC;QAWjCC,eAAe,GAAfA,eAAe;AAvBN,IAAAC,QAAe,GAAAH,OAAA,CAAf,eAAe;AAC5B,IAAAI,MAAO,GAAAC,sBAAA,CAAAL,OAAA,CAAP,OAAO;AACV,IAAAM,SAAa,GAAAD,sBAAA,CAAAL,OAAA,CAAb,aAAa;AACX,IAAAO,KAAM,GAAAF,sBAAA,CAAAL,OAAA,CAAN,MAAM;AAEX,IAAAQ,GAAG,GAAAC,uBAAA,CAAAT,OAAA,eAAoB,EAApB;AACsB,IAAAU,IAAoB,GAAAV,OAAA;AACA,IAAAW,QAAuB,GAAAX,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;SAK1DC,iCAAiCA,CAAAW,EAAA;EAAA,OAAAC,kCAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,mCAAA;EAAAA,kCAAA,GAAAd,iBAAA,CAAhD,WAAiDiB,WAAmB,EAAE;IAC3E,IAAI,CAACC,OAAO,CAACC,GAAG,CAACC,YAAY,IAAI,CAACF,OAAO,CAACC,GAAG,CAACE,YAAY,EAAE;MAC1D,IAAMC,GAAG,SAASnB,eAAe,CAACc,WAAW,CAAC;MAC9C,IAAIK,GAAG,EAAE;QACPJ,OAAO,CAACC,GAAG,CAACC,YAAY,GAAGE,GAAG,CAACC,QAAQ;QACvCL,OAAO,CAACC,GAAG,CAACE,YAAY,GAAGC,GAAG,CAACE,OAAO;;;GAG3C;EAAA,OAAAV,kCAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAGqBb,eAAeA,CAAAsB,GAAA;EAAA,OAAAC,gBAAA,CAAAX,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAU,iBAAA;EAAAA,gBAAA,GAAA1B,iBAAA,CAA9B,WACLiB,WAAmB,EACqC;IACxDR,GAAG,CAACkB,GAAG,CACLtB,MAAK,CAAAuB,OAAC,iGAAgG,CACvG;IAED,IAAMC,IAAI,GAAG,WAAW;IACxB,IAAMC,MAAM,SAAS,IAAA1B,QAAc,EAAM2B,cAAN,CAACF,IAAI,CAAC;IACzC,IAAIC,MAAM,EAAE;MACV,IAAME,UAAU,GAAG,IAAApB,QAAwC,EAAaqB,wCAAb,CAAChB,WAAW,CAAC;MAExE,IAAQiB,GAAG,GAAWJ,MAAM,CAApBI,GAAG;QAAEC,IAAI,GAAKL,MAAM,CAAfK,IAAI;MACjB,IAAMC,MAAM,GAAG5B,KAAI,CAAAoB,OAAA,CAACS,IAAI,CAACL,UAAU,EAAE,KAAK,CAAC;MAC3C,IAAMR,OAAO,GAAGhB,KAAI,CAAAoB,OAAA,CAACS,IAAI,CAACD,MAAM,EAAG,OAAMP,IAAK,MAAK,CAAC;MACpD,IAAMN,QAAQ,GAAGf,KAAI,CAAAoB,OAAA,CAACS,IAAI,CAACD,MAAM,EAAG,QAAOP,IAAK,MAAK,CAAC;MAEtD,MAAM,IAAAlB,IAAoB,EAAQ2B,oBAAR,CAACF,MAAM,CAAC;MAClC,MAAMG,OAAO,CAACC,UAAU,CAAC,CAACjC,SAAE,CAAAqB,OAAA,CAACa,SAAS,CAACjB,OAAO,EAAEU,GAAG,CAAC,EAAE3B,SAAE,CAAAqB,OAAA,CAACa,SAAS,CAAClB,QAAQ,EAAEY,IAAI,CAAC,CAAC,CAAC;MAEpF,OAAO;QACLX,OAAO,EAAPA,OAAO;QACPD,QAAQ,EAARA;OACD;;IAEH,OAAOO,MAAM;GACd;EAAA,OAAAJ,gBAAA,CAAAX,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}