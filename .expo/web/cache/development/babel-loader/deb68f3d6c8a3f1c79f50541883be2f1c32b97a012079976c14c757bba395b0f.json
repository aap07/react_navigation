{"ast":null,"code":"import { getActionFromState as getActionFromStateDefault, getStateFromPath as getStateFromPathDefault } from '@react-navigation/core';\nimport * as React from 'react';\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport extractPathFromURL from \"./extractPathFromURL\";\nvar linkingHandlers = [];\nexport default function useLinking(ref, _ref) {\n  var independent = _ref.independent,\n    _ref$enabled = _ref.enabled,\n    enabled = _ref$enabled === void 0 ? true : _ref$enabled,\n    prefixes = _ref.prefixes,\n    filter = _ref.filter,\n    config = _ref.config,\n    _ref$getInitialURL = _ref.getInitialURL,\n    getInitialURL = _ref$getInitialURL === void 0 ? function () {\n      return Promise.race([Linking.getInitialURL(), new Promise(function (resolve) {\n        return setTimeout(resolve, 150);\n      })]);\n    } : _ref$getInitialURL,\n    _ref$subscribe = _ref.subscribe,\n    subscribe = _ref$subscribe === void 0 ? function (listener) {\n      var _Linking$removeEventL;\n      var callback = function callback(_ref2) {\n        var url = _ref2.url;\n        return listener(url);\n      };\n      var subscription = Linking.addEventListener('url', callback);\n      var removeEventListener = (_Linking$removeEventL = Linking.removeEventListener) === null || _Linking$removeEventL === void 0 ? void 0 : _Linking$removeEventL.bind(Linking);\n      return function () {\n        if (subscription !== null && subscription !== void 0 && subscription.remove) {\n          subscription.remove();\n        } else {\n          removeEventListener === null || removeEventListener === void 0 ? void 0 : removeEventListener('url', callback);\n        }\n      };\n    } : _ref$subscribe,\n    _ref$getStateFromPath = _ref.getStateFromPath,\n    getStateFromPath = _ref$getStateFromPath === void 0 ? getStateFromPathDefault : _ref$getStateFromPath,\n    _ref$getActionFromSta = _ref.getActionFromState,\n    getActionFromState = _ref$getActionFromSta === void 0 ? getActionFromStateDefault : _ref$getActionFromSta;\n  React.useEffect(function () {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n    if (independent) {\n      return undefined;\n    }\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\", '- Only a single instance of the root component is rendered', Platform.OS === 'android' ? \"- You have set 'android:launchMode=singleTask' in the '<activity />' section of the 'AndroidManifest.xml' file to avoid launching multiple instances\" : ''].join('\\n').trim());\n    }\n    var handler = Symbol();\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n    return function () {\n      var index = linkingHandlers.indexOf(handler);\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n  var enabledRef = React.useRef(enabled);\n  var prefixesRef = React.useRef(prefixes);\n  var filterRef = React.useRef(filter);\n  var configRef = React.useRef(config);\n  var getInitialURLRef = React.useRef(getInitialURL);\n  var getStateFromPathRef = React.useRef(getStateFromPath);\n  var getActionFromStateRef = React.useRef(getActionFromState);\n  React.useEffect(function () {\n    enabledRef.current = enabled;\n    prefixesRef.current = prefixes;\n    filterRef.current = filter;\n    configRef.current = config;\n    getInitialURLRef.current = getInitialURL;\n    getStateFromPathRef.current = getStateFromPath;\n    getActionFromStateRef.current = getActionFromState;\n  });\n  var getStateFromURL = React.useCallback(function (url) {\n    if (!url || filterRef.current && !filterRef.current(url)) {\n      return undefined;\n    }\n    var path = extractPathFromURL(prefixesRef.current, url);\n    return path !== undefined ? getStateFromPathRef.current(path, configRef.current) : undefined;\n  }, []);\n  var getInitialState = React.useCallback(function () {\n    var state;\n    if (enabledRef.current) {\n      var url = getInitialURLRef.current();\n      if (url != null && typeof url !== 'string') {\n        return url.then(function (url) {\n          var state = getStateFromURL(url);\n          return state;\n        });\n      }\n      state = getStateFromURL(url);\n    }\n    var thenable = {\n      then: function then(onfulfilled) {\n        return Promise.resolve(onfulfilled ? onfulfilled(state) : state);\n      },\n      catch: function _catch() {\n        return thenable;\n      }\n    };\n    return thenable;\n  }, [getStateFromURL]);\n  React.useEffect(function () {\n    var listener = function listener(url) {\n      if (!enabled) {\n        return;\n      }\n      var navigation = ref.current;\n      var state = navigation ? getStateFromURL(url) : undefined;\n      if (navigation && state) {\n        var rootState = navigation.getRootState();\n        if (state.routes.some(function (r) {\n          return !(rootState !== null && rootState !== void 0 && rootState.routeNames.includes(r.name));\n        })) {\n          console.warn(\"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");\n          return;\n        }\n        var action = getActionFromStateRef.current(state, configRef.current);\n        if (action !== undefined) {\n          try {\n            navigation.dispatch(action);\n          } catch (e) {\n            console.warn(`An error occurred when trying to handle the link '${url}': ${typeof e === 'object' && e != null && 'message' in e ? e.message : e}`);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      }\n    };\n    return subscribe(listener);\n  }, [enabled, getStateFromURL, ref, subscribe]);\n  return {\n    getInitialState: getInitialState\n  };\n}","map":{"version":3,"names":["getActionFromState","getActionFromStateDefault","getStateFromPath","getStateFromPathDefault","React","Linking","Platform","extractPathFromURL","linkingHandlers","useLinking","ref","_ref","independent","_ref$enabled","enabled","prefixes","filter","config","_ref$getInitialURL","getInitialURL","Promise","race","resolve","setTimeout","_ref$subscribe","subscribe","listener","_Linking$removeEventL","callback","_ref2","url","subscription","addEventListener","removeEventListener","bind","remove","_ref$getStateFromPath","_ref$getActionFromSta","useEffect","process","env","NODE_ENV","undefined","length","console","error","OS","join","trim","handler","Symbol","push","index","indexOf","splice","enabledRef","useRef","prefixesRef","filterRef","configRef","getInitialURLRef","getStateFromPathRef","getActionFromStateRef","current","getStateFromURL","useCallback","path","getInitialState","state","then","thenable","onfulfilled","catch","_catch","navigation","rootState","getRootState","routes","some","r","routeNames","includes","name","warn","action","dispatch","e","message","resetRoot"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@react-navigation\\native\\src\\useLinking.native.tsx"],"sourcesContent":["import {\n  getActionFromState as getActionFromStateDefault,\n  getStateFromPath as getStateFromPathDefault,\n  NavigationContainerRef,\n  ParamListBase,\n} from '@react-navigation/core';\nimport * as React from 'react';\nimport { Linking, Platform } from 'react-native';\n\nimport extractPathFromURL from './extractPathFromURL';\nimport type { LinkingOptions } from './types';\n\ntype ResultState = ReturnType<typeof getStateFromPathDefault>;\n\ntype Options = LinkingOptions<ParamListBase> & {\n  independent?: boolean;\n};\n\nlet linkingHandlers: Symbol[] = [];\n\nexport default function useLinking(\n  ref: React.RefObject<NavigationContainerRef<ParamListBase>>,\n  {\n    independent,\n    enabled = true,\n    prefixes,\n    filter,\n    config,\n    getInitialURL = () =>\n      Promise.race([\n        Linking.getInitialURL(),\n        new Promise<undefined>((resolve) =>\n          // Timeout in 150ms if `getInitialState` doesn't resolve\n          // Workaround for https://github.com/facebook/react-native/issues/25675\n          setTimeout(resolve, 150)\n        ),\n      ]),\n    subscribe = (listener) => {\n      const callback = ({ url }: { url: string }) => listener(url);\n\n      const subscription = Linking.addEventListener('url', callback) as\n        | { remove(): void }\n        | undefined;\n\n      // Storing this in a local variable stops Jest from complaining about import after teardown\n      // @ts-expect-error: removeEventListener is not present in newer RN versions\n      const removeEventListener = Linking.removeEventListener?.bind(Linking);\n\n      return () => {\n        // https://github.com/facebook/react-native/commit/6d1aca806cee86ad76de771ed3a1cc62982ebcd7\n        if (subscription?.remove) {\n          subscription.remove();\n        } else {\n          removeEventListener?.('url', callback);\n        }\n      };\n    },\n    getStateFromPath = getStateFromPathDefault,\n    getActionFromState = getActionFromStateDefault,\n  }: Options\n) {\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n\n    if (independent) {\n      return undefined;\n    }\n\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(\n        [\n          'Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\n          \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",\n          '- Only a single instance of the root component is rendered',\n          Platform.OS === 'android'\n            ? \"- You have set 'android:launchMode=singleTask' in the '<activity />' section of the 'AndroidManifest.xml' file to avoid launching multiple instances\"\n            : '',\n        ]\n          .join('\\n')\n          .trim()\n      );\n    }\n\n    const handler = Symbol();\n\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const prefixesRef = React.useRef(prefixes);\n  const filterRef = React.useRef(filter);\n  const configRef = React.useRef(config);\n  const getInitialURLRef = React.useRef(getInitialURL);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    prefixesRef.current = prefixes;\n    filterRef.current = filter;\n    configRef.current = config;\n    getInitialURLRef.current = getInitialURL;\n    getStateFromPathRef.current = getStateFromPath;\n    getActionFromStateRef.current = getActionFromState;\n  });\n\n  const getStateFromURL = React.useCallback(\n    (url: string | null | undefined) => {\n      if (!url || (filterRef.current && !filterRef.current(url))) {\n        return undefined;\n      }\n\n      const path = extractPathFromURL(prefixesRef.current, url);\n\n      return path !== undefined\n        ? getStateFromPathRef.current(path, configRef.current)\n        : undefined;\n    },\n    []\n  );\n\n  const getInitialState = React.useCallback(() => {\n    let state: ResultState | undefined;\n\n    if (enabledRef.current) {\n      const url = getInitialURLRef.current();\n\n      if (url != null && typeof url !== 'string') {\n        return url.then((url) => {\n          const state = getStateFromURL(url);\n\n          return state;\n        });\n      }\n\n      state = getStateFromURL(url);\n    }\n\n    const thenable = {\n      then(onfulfilled?: (state: ResultState | undefined) => void) {\n        return Promise.resolve(onfulfilled ? onfulfilled(state) : state);\n      },\n      catch() {\n        return thenable;\n      },\n    };\n\n    return thenable as PromiseLike<ResultState | undefined>;\n  }, [getStateFromURL]);\n\n  React.useEffect(() => {\n    const listener = (url: string) => {\n      if (!enabled) {\n        return;\n      }\n\n      const navigation = ref.current;\n      const state = navigation ? getStateFromURL(url) : undefined;\n\n      if (navigation && state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n\n        if (state.routes.some((r) => !rootState?.routeNames.includes(r.name))) {\n          console.warn(\n            \"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\"\n          );\n          return;\n        }\n\n        const action = getActionFromStateRef.current(state, configRef.current);\n\n        if (action !== undefined) {\n          try {\n            navigation.dispatch(action);\n          } catch (e) {\n            // Ignore any errors from deep linking.\n            // This could happen in case of malformed links, navigation object not being initialized etc.\n            console.warn(\n              `An error occurred when trying to handle the link '${url}': ${\n                typeof e === 'object' && e != null && 'message' in e\n                  ? e.message\n                  : e\n              }`\n            );\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      }\n    };\n\n    return subscribe(listener);\n  }, [enabled, getStateFromURL, ref, subscribe]);\n\n  return {\n    getInitialState,\n  };\n}\n"],"mappings":"AAAA,SACEA,kBAAkB,IAAIC,yBAAyB,EAC/CC,gBAAgB,IAAIC,uBAAuB,QAGtC,wBAAwB;AAC/B,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAA,OAAAC,OAAA;AAAA,OAAAC,QAAA;AAG9B,OAAOC,kBAAkB;AASzB,IAAIC,eAAyB,GAAG,EAAE;AAElC,eAAe,SAASC,UAAUA,CAChCC,GAA2D,EAAAC,IAAA,EAuC3D;EAAA,IArCEC,WAAW,GAoCHD,IAAA,CApCRC,WAAW;IAAAC,YAAA,GAoCHF,IAAA,CAnCRG,OAAO;IAAPA,OAAO,GAAAD,YAAA,cAAG,IAAI,GAAAA,YAAA;IACdE,QAAQ,GAkCAJ,IAAA,CAlCRI,QAAQ;IACRC,MAAM,GAiCEL,IAAA,CAjCRK,MAAM;IACNC,MAAM,GAgCEN,IAAA,CAhCRM,MAAM;IAAAC,kBAAA,GAgCEP,IAAA,CA/BRQ,aAAa;IAAbA,aAAa,GAAAD,kBAAA,cAAG;MAAA,OACdE,OAAO,CAACC,IAAI,CAAC,CACXhB,OAAO,CAACc,aAAa,EAAE,EACvB,IAAIC,OAAO,CAAa,UAAAE,OAAO;QAAA,OAG7BC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC;MAAA,EACzB,CACF,CAAC;IAAA,IAAAJ,kBAAA;IAAAM,cAAA,GAuBIb,IAAA,CAtBRc,SAAS;IAATA,SAAS,GAAAD,cAAA,cAAI,UAAAE,QAAQ,EAAK;MAAA,IAAAC,qBAAA;MACxB,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAGC,KAAA;QAAA,IAAGC,GAAA,GAAsBD,KAAA,CAAtBC,GAAA;QAAsB,OAAKJ,QAAQ,CAACI,GAAG,CAAC;MAAA;MAE5D,IAAMC,YAAY,GAAG1B,OAAO,CAAC2B,gBAAgB,CAAC,KAAK,EAAEJ,QAAQ,CAEhD;MAIb,IAAMK,mBAAmB,IAAAN,qBAAA,GAAGtB,OAAO,CAAC4B,mBAAmB,cAAAN,qBAAA,uBAA3BA,qBAAA,CAA6BO,IAAI,CAAC7B,OAAO,CAAC;MAEtE,OAAO,YAAM;QAEX,IAAI0B,YAAY,aAAZA,YAAY,eAAZA,YAAY,CAAEI,MAAM,EAAE;UACxBJ,YAAY,CAACI,MAAM,EAAE;QACvB,CAAC,MAAM;UACLF,mBAAmB,aAAnBA,mBAAmB,uBAAnBA,mBAAmB,CAAG,KAAK,EAAEL,QAAQ,CAAC;QACxC;MACF,CAAC;IACH,CAAC,GAAAJ,cAAA;IAAAY,qBAAA,GAGOzB,IAAA,CAFRT,gBAAgB;IAAhBA,gBAAgB,GAAAkC,qBAAA,cAAGjC,uBAAuB,GAAAiC,qBAAA;IAAAC,qBAAA,GAElC1B,IAAA,CADRX,kBAAkB;IAAlBA,kBAAkB,GAAAqC,qBAAA,cAAGpC,yBAAA,GAAAoC,qBAAA;EAGvBjC,KAAK,CAACkC,SAAS,CAAC,YAAM;IACpB,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACzC,OAAOC,SAAS;IAClB;IAEA,IAAI9B,WAAW,EAAE;MACf,OAAO8B,SAAS;IAClB;IAEA,IAAI5B,OAAO,KAAK,KAAK,IAAIN,eAAe,CAACmC,MAAM,EAAE;MAC/CC,OAAO,CAACC,KAAK,CACX,CACE,6KAA6K,EAC7K,uFAAuF,EACvF,4DAA4D,EAC5DvC,QAAQ,CAACwC,EAAE,KAAK,SAAS,GACrB,sJAAsJ,GACtJ,EAAE,CACP,CACEC,IAAI,CAAC,IAAI,CAAC,CACVC,IAAI,EAAE,CACV;IACH;IAEA,IAAMC,OAAO,GAAGC,MAAM,EAAE;IAExB,IAAIpC,OAAO,KAAK,KAAK,EAAE;MACrBN,eAAe,CAAC2C,IAAI,CAACF,OAAO,CAAC;IAC/B;IAEA,OAAO,YAAM;MACX,IAAMG,KAAK,GAAG5C,eAAe,CAAC6C,OAAO,CAACJ,OAAO,CAAC;MAE9C,IAAIG,KAAK,GAAG,CAAC,CAAC,EAAE;QACd5C,eAAe,CAAC8C,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MAClC;IACF,CAAC;EACH,CAAC,EAAE,CAACtC,OAAO,EAAEF,WAAW,CAAC,CAAC;EAK1B,IAAM2C,UAAU,GAAGnD,KAAK,CAACoD,MAAM,CAAC1C,OAAO,CAAC;EACxC,IAAM2C,WAAW,GAAGrD,KAAK,CAACoD,MAAM,CAACzC,QAAQ,CAAC;EAC1C,IAAM2C,SAAS,GAAGtD,KAAK,CAACoD,MAAM,CAACxC,MAAM,CAAC;EACtC,IAAM2C,SAAS,GAAGvD,KAAK,CAACoD,MAAM,CAACvC,MAAM,CAAC;EACtC,IAAM2C,gBAAgB,GAAGxD,KAAK,CAACoD,MAAM,CAACrC,aAAa,CAAC;EACpD,IAAM0C,mBAAmB,GAAGzD,KAAK,CAACoD,MAAM,CAACtD,gBAAgB,CAAC;EAC1D,IAAM4D,qBAAqB,GAAG1D,KAAK,CAACoD,MAAM,CAACxD,kBAAkB,CAAC;EAE9DI,KAAK,CAACkC,SAAS,CAAC,YAAM;IACpBiB,UAAU,CAACQ,OAAO,GAAGjD,OAAO;IAC5B2C,WAAW,CAACM,OAAO,GAAGhD,QAAQ;IAC9B2C,SAAS,CAACK,OAAO,GAAG/C,MAAM;IAC1B2C,SAAS,CAACI,OAAO,GAAG9C,MAAM;IAC1B2C,gBAAgB,CAACG,OAAO,GAAG5C,aAAa;IACxC0C,mBAAmB,CAACE,OAAO,GAAG7D,gBAAgB;IAC9C4D,qBAAqB,CAACC,OAAO,GAAG/D,kBAAkB;EACpD,CAAC,CAAC;EAEF,IAAMgE,eAAe,GAAG5D,KAAK,CAAC6D,WAAW,CACtC,UAAAnC,GAA8B,EAAK;IAClC,IAAI,CAACA,GAAG,IAAK4B,SAAS,CAACK,OAAO,IAAI,CAACL,SAAS,CAACK,OAAO,CAACjC,GAAG,CAAE,EAAE;MAC1D,OAAOY,SAAS;IAClB;IAEA,IAAMwB,IAAI,GAAG3D,kBAAkB,CAACkD,WAAW,CAACM,OAAO,EAAEjC,GAAG,CAAC;IAEzD,OAAOoC,IAAI,KAAKxB,SAAS,GACrBmB,mBAAmB,CAACE,OAAO,CAACG,IAAI,EAAEP,SAAS,CAACI,OAAO,CAAC,GACpDrB,SAAS;EACf,CAAC,EACD,EAAE,CACH;EAED,IAAMyB,eAAe,GAAG/D,KAAK,CAAC6D,WAAW,CAAC,YAAM;IAC9C,IAAIG,KAA8B;IAElC,IAAIb,UAAU,CAACQ,OAAO,EAAE;MACtB,IAAMjC,GAAG,GAAG8B,gBAAgB,CAACG,OAAO,EAAE;MAEtC,IAAIjC,GAAG,IAAI,IAAI,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;QAC1C,OAAOA,GAAG,CAACuC,IAAI,CAAE,UAAAvC,GAAG,EAAK;UACvB,IAAMsC,KAAK,GAAGJ,eAAe,CAAClC,GAAG,CAAC;UAElC,OAAOsC,KAAK;QACd,CAAC,CAAC;MACJ;MAEAA,KAAK,GAAGJ,eAAe,CAAClC,GAAG,CAAC;IAC9B;IAEA,IAAMwC,QAAQ,GAAG;MACfD,IAAI,WAAAA,KAACE,WAAsD,EAAE;QAC3D,OAAOnD,OAAO,CAACE,OAAO,CAACiD,WAAW,GAAGA,WAAW,CAACH,KAAK,CAAC,GAAGA,KAAK,CAAC;MAClE,CAAC;MACDI,KAAK,WAAAC,OAAA,EAAG;QACN,OAAOH,QAAQ;MACjB;IACF,CAAC;IAED,OAAOA,QAAQ;EACjB,CAAC,EAAE,CAACN,eAAe,CAAC,CAAC;EAErB5D,KAAK,CAACkC,SAAS,CAAC,YAAM;IACpB,IAAMZ,QAAQ,GAAI,SAAZA,QAAQA,CAAII,GAAW,EAAK;MAChC,IAAI,CAAChB,OAAO,EAAE;QACZ;MACF;MAEA,IAAM4D,UAAU,GAAGhE,GAAG,CAACqD,OAAO;MAC9B,IAAMK,KAAK,GAAGM,UAAU,GAAGV,eAAe,CAAClC,GAAG,CAAC,GAAGY,SAAS;MAE3D,IAAIgC,UAAU,IAAIN,KAAK,EAAE;QAGvB,IAAMO,SAAS,GAAGD,UAAU,CAACE,YAAY,EAAE;QAE3C,IAAIR,KAAK,CAACS,MAAM,CAACC,IAAI,CAAE,UAAAC,CAAC;UAAA,OAAK,EAACJ,SAAS,aAATA,SAAS,eAATA,SAAS,CAAEK,UAAU,CAACC,QAAQ,CAACF,CAAC,CAACG,IAAI,CAAC;QAAA,EAAC,EAAE;UACrEtC,OAAO,CAACuC,IAAI,CACV,0SAA0S,CAC3S;UACD;QACF;QAEA,IAAMC,MAAM,GAAGtB,qBAAqB,CAACC,OAAO,CAACK,KAAK,EAAET,SAAS,CAACI,OAAO,CAAC;QAEtE,IAAIqB,MAAM,KAAK1C,SAAS,EAAE;UACxB,IAAI;YACFgC,UAAU,CAACW,QAAQ,CAACD,MAAM,CAAC;UAC7B,CAAC,CAAC,OAAOE,CAAC,EAAE;YAGV1C,OAAO,CAACuC,IAAI,CACT,qDAAoDrD,GAAI,MACvD,OAAOwD,CAAC,KAAK,QAAQ,IAAIA,CAAC,IAAI,IAAI,IAAI,SAAS,IAAIA,CAAC,GAChDA,CAAC,CAACC,OAAO,GACTD,CACL,EAAC,CACH;UACH;QACF,CAAC,MAAM;UACLZ,UAAU,CAACc,SAAS,CAACpB,KAAK,CAAC;QAC7B;MACF;IACF,CAAC;IAED,OAAO3C,SAAS,CAACC,QAAQ,CAAC;EAC5B,CAAC,EAAE,CAACZ,OAAO,EAAEkD,eAAe,EAAEtD,GAAG,EAAEe,SAAS,CAAC,CAAC;EAE9C,OAAO;IACL0C,eAAA,EAAAA;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}