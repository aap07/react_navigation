{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport spawnAsync from '@expo/spawn-async';\nimport { spawnSync } from 'child_process';\nimport { join } from 'path';\nexport var AUTOLINKINNG_CLI = join(__dirname, '../bin/expo-modules-autolinking.js');\nfunction isSpawnResult(errorOrResult) {\n  return 'pid' in errorOrResult && 'stdout' in errorOrResult && 'stderr' in errorOrResult;\n}\nexport function autolinkingRunAsync(_x, _x2) {\n  return _autolinkingRunAsync.apply(this, arguments);\n}\nfunction _autolinkingRunAsync() {\n  _autolinkingRunAsync = _asyncToGenerator(function* (args, options) {\n    var promise = spawnAsync(AUTOLINKINNG_CLI, args, _objectSpread(_objectSpread({}, options), {}, {\n      env: _objectSpread(_objectSpread({}, process.env), {}, {\n        EXPO_SHOULD_USE_LEGACY_PACKAGE_INTERFACE: '1'\n      })\n    }));\n    try {\n      return yield promise;\n    } catch (error) {\n      if (isSpawnResult(error)) {\n        if (error.stdout) error.message += `\\n------\\nSTDOUT:\\n${error.stdout}`;\n        if (error.stderr) error.message += `\\n------\\nSTDERR:\\n${error.stderr}`;\n      }\n      throw error;\n    }\n  });\n  return _autolinkingRunAsync.apply(this, arguments);\n}\nexport function yarnSync(options) {\n  spawnSync('yarn', ['install', '--silent'], options);\n}\nexport function combinations(aKey, a, bKey, b) {\n  var result = [];\n  a.forEach(function (aValue) {\n    b.forEach(function (bValue) {\n      var _result$push;\n      result.push((_result$push = {}, _defineProperty(_result$push, aKey, aValue), _defineProperty(_result$push, bKey, bValue), _result$push));\n    });\n  });\n  return result;\n}","map":{"version":3,"names":["spawnAsync","spawnSync","join","AUTOLINKINNG_CLI","__dirname","isSpawnResult","errorOrResult","autolinkingRunAsync","_x","_x2","_autolinkingRunAsync","apply","arguments","_asyncToGenerator","args","options","promise","_objectSpread","env","process","EXPO_SHOULD_USE_LEGACY_PACKAGE_INTERFACE","error","stdout","message","stderr","yarnSync","combinations","aKey","a","bKey","b","result","forEach","aValue","bValue","_result$push","push","_defineProperty"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/expo-modules-autolinking/e2e/TestUtils.ts"],"sourcesContent":["import spawnAsync, { SpawnOptions, SpawnResult } from '@expo/spawn-async';\nimport { spawnSync } from 'child_process';\nimport { join } from 'path';\n\nexport const AUTOLINKINNG_CLI = join(__dirname, '../bin/expo-modules-autolinking.js');\n\nfunction isSpawnResult(errorOrResult: Error): errorOrResult is Error & SpawnResult {\n  return 'pid' in errorOrResult && 'stdout' in errorOrResult && 'stderr' in errorOrResult;\n}\n\nexport async function autolinkingRunAsync(\n  args: string[],\n  options?: SpawnOptions\n): Promise<SpawnResult> {\n  const promise = spawnAsync(AUTOLINKINNG_CLI, args, {\n    ...options,\n    env: { ...process.env, EXPO_SHOULD_USE_LEGACY_PACKAGE_INTERFACE: '1' },\n  });\n\n  try {\n    return await promise;\n  } catch (error) {\n    if (isSpawnResult(error)) {\n      if (error.stdout) error.message += `\\n------\\nSTDOUT:\\n${error.stdout}`;\n      if (error.stderr) error.message += `\\n------\\nSTDERR:\\n${error.stderr}`;\n    }\n    throw error;\n  }\n}\n\n// For some reason, it can't be async, cause otherwise we will get `yarn did not print valid JSON:` error\nexport function yarnSync(options?: SpawnOptions) {\n  spawnSync('yarn', ['install', '--silent'], options);\n}\n\nexport function combinations<T, U>(\n  aKey: string,\n  a: T[],\n  bKey: string,\n  b: U[]\n): { [key: string]: T | U }[] {\n  const result = [];\n  a.forEach(aValue => {\n    b.forEach(bValue => {\n      result.push({\n        [aKey]: aValue,\n        [bKey]: bValue,\n      });\n    });\n  });\n\n  return result;\n}\n"],"mappings":";;;;AAAA,OAAOA,UAAU,MAAqC,mBAAmB;AACzE,SAASC,SAAS,QAAQ,eAAe;AACzC,SAASC,IAAI,QAAQ,MAAM;AAE3B,OAAO,IAAMC,gBAAgB,GAAGD,IAAI,CAACE,SAAS,EAAE,oCAAoC,CAAC;AAErF,SAASC,aAAaA,CAACC,aAAoB,EAAwC;EACjF,OAAO,KAAK,IAAIA,aAAa,IAAI,QAAQ,IAAIA,aAAa,IAAI,QAAQ,IAAIA,aAAa;AACzF;AAEA,gBAAsBC,mBAAmBA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,oBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAkBxC,SAAAF,qBAAA;EAAAA,oBAAA,GAAAG,iBAAA,CAlBM,WACLC,IAAc,EACdC,OAAsB,EACA;IACtB,IAAMC,OAAO,GAAGhB,UAAU,CAACG,gBAAgB,EAAEW,IAAI,EAAAG,aAAA,CAAAA,aAAA,KAC5CF,OAAO;MACVG,GAAG,EAAAD,aAAA,CAAAA,aAAA,KAAOE,OAAO,CAACD,GAAG;QAAEE,wCAAwC,EAAE;MAAG;IAAE,EACvE,CAAC;IAEF,IAAI;MACF,aAAaJ,OAAO;IACtB,CAAC,CAAC,OAAOK,KAAK,EAAE;MACd,IAAIhB,aAAa,CAACgB,KAAK,CAAC,EAAE;QACxB,IAAIA,KAAK,CAACC,MAAM,EAAED,KAAK,CAACE,OAAO,IAAK,sBAAqBF,KAAK,CAACC,MAAO,EAAC;QACvE,IAAID,KAAK,CAACG,MAAM,EAAEH,KAAK,CAACE,OAAO,IAAK,sBAAqBF,KAAK,CAACG,MAAO,EAAC;MACzE;MACA,MAAMH,KAAK;IACb;EACF,CAAC;EAAA,OAAAX,oBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAGD,OAAO,SAASa,QAAQA,CAACV,OAAsB,EAAE;EAC/Cd,SAAS,CAAC,MAAM,EAAE,CAAC,SAAS,EAAE,UAAU,CAAC,EAAEc,OAAO,CAAC;AACrD;AAEA,OAAO,SAASW,YAAYA,CAC1BC,IAAY,EACZC,CAAM,EACNC,IAAY,EACZC,CAAM,EACsB;EAC5B,IAAMC,MAAM,GAAG,EAAE;EACjBH,CAAC,CAACI,OAAO,CAAC,UAAAC,MAAM,EAAI;IAClBH,CAAC,CAACE,OAAO,CAAC,UAAAE,MAAM,EAAI;MAAA,IAAAC,YAAA;MAClBJ,MAAM,CAACK,IAAI,EAAAD,YAAA,OAAAE,eAAA,CAAAF,YAAA,EACRR,IAAI,EAAGM,MAAM,GAAAI,eAAA,CAAAF,YAAA,EACbN,IAAI,EAAGK,MAAM,GAAAC,YAAA,CACf,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAOJ,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}