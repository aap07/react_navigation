{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.activateWindowAsync = activateWindowAsync;\nvar osascript = _interopRequireWildcard(require(\"@expo/osascript\"));\nvar _childProcess = require(\"child_process\");\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar debug = require(\"debug\")(\"expo:start:platforms:android:activateWindow\");\nfunction getUnixPID(port) {\n  var ref;\n  var args = [`-i:${port}`, \"-P\", \"-t\", \"-sTCP:LISTEN\"];\n  debug(\"lsof \" + args.join(\" \"));\n  return (ref = (0, _childProcess).execFileSync(\"lsof\", args, {\n    encoding: \"utf8\",\n    stdio: [\"pipe\", \"pipe\", \"ignore\"]\n  }).split(\"\\n\")[0]) == null ? void 0 : ref.trim == null ? void 0 : ref.trim();\n}\nfunction activateWindowAsync(_x) {\n  return _activateWindowAsync.apply(this, arguments);\n}\nfunction _activateWindowAsync() {\n  _activateWindowAsync = _asyncToGenerator(function* (device) {\n    var ref;\n    debug(`Activating window for device (pid: ${device.pid}, type: ${device.type})`);\n    if (process.platform !== \"darwin\" || device.type !== \"emulator\") {\n      return false;\n    }\n    var androidPid = (ref = device.pid.match(/-(\\d+)/)) == null ? void 0 : ref[1];\n    if (!androidPid) {\n      return false;\n    }\n    var pid = getUnixPID(androidPid);\n    if (!pid) {\n      return false;\n    }\n    debug(`Activate window for pid:`, pid);\n    try {\n      yield osascript.execAsync(`\n    tell application \"System Events\"\n      set frontmost of the first process whose unix id is ${pid} to true\n    end tell`);\n      return true;\n    } catch (_unused) {\n      return false;\n    }\n  });\n  return _activateWindowAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","activateWindowAsync","osascript","_interopRequireWildcard","_childProcess","debug","getUnixPID","port","ref","args","join","execFileSync","encoding","stdio","split","trim","_x","_activateWindowAsync","apply","arguments","device","pid","type","process","platform","androidPid","match","execAsync","_unused"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\platforms\\android\\activateWindow.ts"],"sourcesContent":["import * as osascript from '@expo/osascript';\nimport { execFileSync } from 'child_process';\n\nimport { Device } from './adb';\n\nconst debug = require('debug')('expo:start:platforms:android:activateWindow') as typeof console.log;\n\nfunction getUnixPID(port: number | string): string {\n  // Runs like `lsof -i:8081 -P -t -sTCP:LISTEN`\n  const args = [`-i:${port}`, '-P', '-t', '-sTCP:LISTEN'];\n  debug('lsof ' + args.join(' '));\n  return execFileSync('lsof', args, {\n    encoding: 'utf8',\n    stdio: ['pipe', 'pipe', 'ignore'],\n  })\n    .split('\\n')[0]\n    ?.trim?.();\n}\n\n/** Activate the Emulator window on macOS. */\nexport async function activateWindowAsync(device: Pick<Device, 'type' | 'pid'>): Promise<boolean> {\n  debug(`Activating window for device (pid: ${device.pid}, type: ${device.type})`);\n  if (\n    // only mac is supported for now.\n    process.platform !== 'darwin' ||\n    // can only focus emulators\n    device.type !== 'emulator'\n  ) {\n    return false;\n  }\n\n  // Google Emulator ID: `emulator-5554` -> `5554`\n  const androidPid = device.pid!.match(/-(\\d+)/)?.[1];\n  if (!androidPid) {\n    return false;\n  }\n  // Unix PID\n  const pid = getUnixPID(androidPid);\n\n  if (!pid) {\n    return false;\n  }\n  debug(`Activate window for pid:`, pid);\n  try {\n    await osascript.execAsync(`\n    tell application \"System Events\"\n      set frontmost of the first process whose unix id is ${pid} to true\n    end tell`);\n    return true;\n  } catch {\n    // noop -- this feature is very specific and subject to failure.\n    return false;\n  }\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,iBAAA,GAAAC,OAAA;;;;QAoBsBC,mBAAmB,GAAnBA,mBAAmB;AApB7B,IAAAC,SAAS,GAAAC,uBAAA,CAAAH,OAAA,CAAM,iBAAiB,EAAvB;AACQ,IAAAI,aAAe,GAAAJ,OAAA,CAAf,eAAe;;;;;;;;;;;;;;;;;;;;;;AAI5C,IAAMK,KAAK,GAAGL,OAAO,CAAC,OAAO,CAAC,CAAC,6CAA6C,CAAC;AAE7E,SAASM,UAAUA,CAACC,IAAqB,EAAU;MAI1CC,GAIU;EANjB,IAAMC,IAAI,GAAG,CAAE,MAAKF,IAAK,EAAC,EAAE,IAAI,EAAE,IAAI,EAAE,cAAc,CAAC;EACvDF,KAAK,CAAC,OAAO,GAAGI,IAAI,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC;EAC/B,OAAO,CAAAF,GAIU,GAJV,IAAAJ,aAAY,EAGjBO,YAHiB,CAAC,MAAM,EAAEF,IAAI,EAAE;IAChCG,QAAQ,EAAE,MAAM;IAChBC,KAAK,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ;GACjC,CAAC,CACCC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SACT,GALD,MAKC,GALDN,GAIU,CACbO,IAAI,QAAI,GALL,MAKK,GALLP,GAIU,CACbO,IAAI,EAAI;;AACb,SAGqBd,mBAAmBA,CAAAe,EAAA;EAAA,OAAAC,oBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,qBAAA;EAAAA,oBAAA,GAAAlB,iBAAA,CAAlC,WAAmCqB,MAAoC,EAAoB;QAY7EZ,GAA2B;IAX9CH,KAAK,CAAE,sCAAqCe,MAAM,CAACC,GAAI,WAAUD,MAAM,CAACE,IAAK,GAAE,CAAC;IAChF,IAEEC,OAAO,CAACC,QAAQ,KAAK,QAAQ,IAE7BJ,MAAM,CAACE,IAAI,KAAK,UAAU,EAC1B;MACA,OAAO,KAAK;;IAId,IAAMG,UAAU,GAAG,CAAAjB,GAA2B,GAA3BY,MAAM,CAACC,GAAG,CAAEK,KAAK,UAAU,SAAK,GAAhC,MAAgC,GAAhClB,GAA2B,CAAG,CAAC,CAAC;IACnD,IAAI,CAACiB,UAAU,EAAE;MACf,OAAO,KAAK;;IAGd,IAAMJ,GAAG,GAAGf,UAAU,CAACmB,UAAU,CAAC;IAElC,IAAI,CAACJ,GAAG,EAAE;MACR,OAAO,KAAK;;IAEdhB,KAAK,CAAE,0BAAyB,EAAEgB,GAAG,CAAC;IACtC,IAAI;MACF,MAAMnB,SAAS,CAACyB,SAAS,CAAE;;4DAE6BN,GAAI;aACnD,CAAC;MACV,OAAO,IAAI;KACZ,CAAC,OAAAO,OAAA,EAAM;MAEN,OAAO,KAAK;;GAEf;EAAA,OAAAX,oBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}