{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setSplashStoryboardAsync = setSplashStoryboardAsync;\nexports.withIosSplashXcodeProject = void 0;\nfunction _configPlugins() {\n  var data = require(\"@expo/config-plugins\");\n  _configPlugins = function _configPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _withIosSplashScreenStoryboard() {\n  var data = require(\"./withIosSplashScreenStoryboard\");\n  _withIosSplashScreenStoryboard = function _withIosSplashScreenStoryboard() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = require('debug')('expo:prebuild-config:expo-splash-screen:ios:xcodeproj');\nvar withIosSplashXcodeProject = function withIosSplashXcodeProject(config) {\n  return (0, _configPlugins().withXcodeProject)(config, function () {\n    var _ref = _asyncToGenerator(function* (config) {\n      config.modResults = yield setSplashStoryboardAsync({\n        projectName: config.modRequest.projectName,\n        project: config.modResults\n      });\n      return config;\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};\nexports.withIosSplashXcodeProject = withIosSplashXcodeProject;\nfunction setSplashStoryboardAsync(_x2) {\n  return _setSplashStoryboardAsync.apply(this, arguments);\n}\nfunction _setSplashStoryboardAsync() {\n  _setSplashStoryboardAsync = _asyncToGenerator(function* (_ref2) {\n    var projectName = _ref2.projectName,\n      project = _ref2.project;\n    var storyboardFilePath = _path().default.join(projectName, _withIosSplashScreenStoryboard().STORYBOARD_FILE_PATH);\n    if (!project.hasFile(storyboardFilePath)) {\n      debug(`Adding ${storyboardFilePath} to Xcode project`);\n      _configPlugins().IOSConfig.XcodeUtils.addResourceFileToGroup({\n        filepath: storyboardFilePath,\n        groupName: projectName,\n        project: project\n      });\n    }\n    return project;\n  });\n  return _setSplashStoryboardAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_configPlugins","data","require","_path","_interopRequireDefault","_withIosSplashScreenStoryboard","obj","__esModule","default","debug","withIosSplashXcodeProject","config","withXcodeProject","_ref","_asyncToGenerator","modResults","setSplashStoryboardAsync","projectName","modRequest","project","_x","apply","arguments","exports","_x2","_setSplashStoryboardAsync","_ref2","storyboardFilePath","join","STORYBOARD_FILE_PATH","hasFile","IOSConfig","XcodeUtils","addResourceFileToGroup","filepath","groupName"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\prebuild-config\\src\\plugins\\unversioned\\expo-splash-screen\\withIosSplashXcodeProject.ts"],"sourcesContent":["import { ConfigPlugin, IOSConfig, withXcodeProject } from '@expo/config-plugins';\nimport path from 'path';\nimport { XcodeProject } from 'xcode';\n\nimport { STORYBOARD_FILE_PATH } from './withIosSplashScreenStoryboard';\n\nconst debug = require('debug')(\n  'expo:prebuild-config:expo-splash-screen:ios:xcodeproj'\n) as typeof console.log;\n\nexport const withIosSplashXcodeProject: ConfigPlugin = (config) => {\n  return withXcodeProject(config, async (config) => {\n    config.modResults = await setSplashStoryboardAsync({\n      projectName: config.modRequest.projectName!,\n      project: config.modResults,\n    });\n    return config;\n  });\n};\n\n/**\n * Modifies `.pbxproj` by:\n * - adding reference for `.storyboard` file\n */\nexport async function setSplashStoryboardAsync({\n  projectName,\n  project,\n}: {\n  projectName: string;\n  project: XcodeProject;\n}): Promise<XcodeProject> {\n  // Check if `${projectName}/SplashScreen.storyboard` already exists\n  // Path relative to `ios` directory\n  const storyboardFilePath = path.join(projectName, STORYBOARD_FILE_PATH);\n  if (!project.hasFile(storyboardFilePath)) {\n    debug(`Adding ${storyboardFilePath} to Xcode project`);\n    IOSConfig.XcodeUtils.addResourceFileToGroup({\n      filepath: storyboardFilePath,\n      groupName: projectName,\n      project,\n    });\n  }\n\n  return project;\n}\n"],"mappings":";;;;;;;;AAAA,SAAAA,eAAA;EAAA,IAAAC,IAAA,GAAAC,OAAA;EAAAF,cAAA,YAAAA,eAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAE,MAAA;EAAA,IAAAF,IAAA,GAAAG,sBAAA,CAAAF,OAAA;EAAAC,KAAA,YAAAA,MAAA;IAAA,OAAAF,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAGA,SAAAI,+BAAA;EAAA,IAAAJ,IAAA,GAAAC,OAAA;EAAAG,8BAAA,YAAAA,+BAAA;IAAA,OAAAJ,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAAuE,SAAAG,uBAAAE,GAAA;EAAA,OAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA;IAAAE,OAAA,EAAAF;EAAA;AAAA;AAEvE,IAAMG,KAAK,GAAGP,OAAO,CAAC,OAAO,CAAC,CAC5B,uDAAuD,CAClC;AAEhB,IAAMQ,yBAAuC,GAAI,SAA3CA,yBAAuCA,CAAIC,MAAM,EAAK;EACjE,OAAO,IAAAX,cAAA,GAAAY,gBAAgB,EAACD,MAAM;IAAA,IAAAE,IAAA,GAAAC,iBAAA,CAAE,WAAOH,MAAM,EAAK;MAChDA,MAAM,CAACI,UAAU,SAASC,wBAAwB,CAAC;QACjDC,WAAW,EAAEN,MAAM,CAACO,UAAU,CAACD,WAAY;QAC3CE,OAAO,EAAER,MAAM,CAACI;MAClB,CAAC,CAAC;MACF,OAAOJ,MAAM;IACf,CAAC;IAAA,iBAAAS,EAAA;MAAA,OAAAP,IAAA,CAAAQ,KAAA,OAAAC,SAAA;IAAA;EAAA,IAAC;AACJ,CAAC;AAEDC,OAAA,CAAAb,yBAAA,GAAAA,yBAAA;AAAA,SAIsBM,wBAAwBA,CAAAQ,GAAA;EAAA,OAAAC,yBAAA,CAAAJ,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAG,0BAAA;EAAAA,yBAAA,GAAAX,iBAAA,CAAvC,WAAAY,KAAA,EAMmB;IAAA,IALxBT,WAAW,GAAAS,KAAA,CAAXT,WAAW;MACXE,OAAA,GAAAO,KAAA,CAAAP,OAAA;IAOA,IAAMQ,kBAAkB,GAAGxB,KAAA,GAAAK,OAAI,CAACoB,IAAI,CAACX,WAAW,EAAEZ,8BAAA,GAAAwB,oBAAoB,CAAC;IACvE,IAAI,CAACV,OAAO,CAACW,OAAO,CAACH,kBAAkB,CAAC,EAAE;MACxClB,KAAK,CAAE,UAASkB,kBAAmB,mBAAkB,CAAC;MACtD3B,cAAA,GAAA+B,SAAS,CAACC,UAAU,CAACC,sBAAsB,CAAC;QAC1CC,QAAQ,EAAEP,kBAAkB;QAC5BQ,SAAS,EAAElB,WAAW;QACtBE,OAAA,EAAAA;MACF,CAAC,CAAC;IACJ;IAEA,OAAOA,OAAO;EAChB;EAAA,OAAAM,yBAAA,CAAAJ,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}