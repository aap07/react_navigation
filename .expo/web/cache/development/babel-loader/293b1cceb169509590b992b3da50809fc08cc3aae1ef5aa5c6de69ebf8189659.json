{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createMetadataJson = createMetadataJson;\nvar _path = _interopRequireDefault(require(\"path\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction createMetadataJson(_ref) {\n  var bundles = _ref.bundles,\n    fileNames = _ref.fileNames;\n  return {\n    version: 0,\n    bundler: \"metro\",\n    fileMetadata: Object.entries(bundles).reduce(function (metadata, _ref2) {\n      var _ref3 = _slicedToArray(_ref2, 2),\n        platform = _ref3[0],\n        bundle = _ref3[1];\n      return _objectSpread(_objectSpread({}, metadata), {}, _defineProperty({}, platform, {\n        bundle: _path.default.join(\"bundles\", fileNames[platform]),\n        assets: bundle.assets.map(function (asset) {\n          var ref;\n          return (ref = asset.fileHashes) == null ? void 0 : ref.map(function (hash) {\n            return {\n              path: _path.default.join(\"assets\", hash),\n              ext: asset.type\n            };\n          });\n        }).filter(Boolean).flat()\n      }));\n    }, {})\n  };\n}","map":{"version":3,"names":["_defineProperty","require","_slicedToArray","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","createMetadataJson","_path","_interopRequireDefault","_ref","bundles","fileNames","version","bundler","fileMetadata","entries","reduce","metadata","_ref2","_ref3","platform","bundle","default","join","assets","map","asset","ref","fileHashes","hash","path","ext","type","Boolean","flat"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\export\\createMetadataJson.ts"],"sourcesContent":["import path from 'path';\n\nimport { BundleOutput } from './fork-bundleAsync';\n\nexport type BundlePlatform = 'android' | 'ios';\n\ntype PlatformMetadataAsset = { path: string; ext: string };\n\ntype PlatformMetadata = { bundle: string; assets: PlatformMetadataAsset[] };\n\ntype FileMetadata = {\n  [key in BundlePlatform]: PlatformMetadata;\n};\n\nexport function createMetadataJson({\n  bundles,\n  fileNames,\n}: {\n  bundles: Partial<Record<BundlePlatform, Pick<BundleOutput, 'assets'>>>;\n  fileNames: Record<string, string>;\n}): {\n  version: 0;\n  bundler: 'metro';\n  fileMetadata: FileMetadata;\n} {\n  // Build metadata.json\n  return {\n    version: 0,\n    bundler: 'metro',\n    fileMetadata: Object.entries(bundles).reduce<Record<string, Partial<PlatformMetadata>>>(\n      (metadata, [platform, bundle]) => ({\n        ...metadata,\n        [platform]: {\n          // Get the filename for each platform's bundle.\n          bundle: path.join('bundles', fileNames[platform]!),\n          // Collect all of the assets and convert them to the serial format.\n          assets: bundle.assets\n            .map((asset) =>\n              // Each asset has multiple hashes which we convert and then flatten.\n              asset.fileHashes?.map((hash) => ({\n                path: path.join('assets', hash),\n                ext: asset.type,\n              }))\n            )\n            .filter(Boolean)\n            .flat(),\n        },\n      }),\n      {}\n    ) as FileMetadata,\n  };\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,eAAA,GAAAC,OAAA;AAAA,IAAAC,cAAA,GAAAD,OAAA;AAAA,SAAAE,QAAAC,CAAA,EAAAC,CAAA,QAAAC,CAAA,GAAAC,MAAA,CAAAC,IAAA,CAAAJ,CAAA,OAAAG,MAAA,CAAAE,qBAAA,QAAAC,CAAA,GAAAH,MAAA,CAAAE,qBAAA,CAAAL,CAAA,GAAAC,CAAA,KAAAK,CAAA,GAAAA,CAAA,CAAAC,MAAA,WAAAN,CAAA,WAAAE,MAAA,CAAAK,wBAAA,CAAAR,CAAA,EAAAC,CAAA,EAAAQ,UAAA,OAAAP,CAAA,CAAAQ,IAAA,CAAAC,KAAA,CAAAT,CAAA,EAAAI,CAAA,YAAAJ,CAAA;AAAA,SAAAU,cAAAZ,CAAA,aAAAC,CAAA,MAAAA,CAAA,GAAAY,SAAA,CAAAC,MAAA,EAAAb,CAAA,UAAAC,CAAA,WAAAW,SAAA,CAAAZ,CAAA,IAAAY,SAAA,CAAAZ,CAAA,QAAAA,CAAA,OAAAF,OAAA,CAAAI,MAAA,CAAAD,CAAA,OAAAa,OAAA,WAAAd,CAAA,IAAAL,eAAA,CAAAI,CAAA,EAAAC,CAAA,EAAAC,CAAA,CAAAD,CAAA,SAAAE,MAAA,CAAAa,yBAAA,GAAAb,MAAA,CAAAc,gBAAA,CAAAjB,CAAA,EAAAG,MAAA,CAAAa,yBAAA,CAAAd,CAAA,KAAAH,OAAA,CAAAI,MAAA,CAAAD,CAAA,GAAAa,OAAA,WAAAd,CAAA,IAAAE,MAAA,CAAAe,cAAA,CAAAlB,CAAA,EAAAC,CAAA,EAAAE,MAAA,CAAAK,wBAAA,CAAAN,CAAA,EAAAD,CAAA,iBAAAD,CAAA;;;;QAcgBmB,kBAAkB,GAAlBA,kBAAkB;AAdjB,IAAAC,KAAM,GAAAC,sBAAA,CAAAxB,OAAA,CAAN,MAAM;;;;;;AAchB,SAASsB,kBAAkBA,CAAAG,IAAA,EAUhC;EAAA,IATAC,OAAO,GAAAD,IAAA,CAAPC,OAAO;IACPC,SAAS,GAAAF,IAAA,CAATE,SAAS;EAUT,OAAO;IACLC,OAAO,EAAE,CAAC;IACVC,OAAO,EAAE,OAAO;IAChBC,YAAY,EAAExB,MAAM,CAACyB,OAAO,CAACL,OAAO,CAAC,CAACM,MAAM,CAC1C,UAACC,QAAQ,EAAAC,KAAA,EAAoB;MAAA,IAAAC,KAAA,GAAAlC,cAAA,CAAAiC,KAAA;QAAjBE,QAAQ,GAAAD,KAAA;QAAEE,MAAM,GAAAF,KAAA;MAAM,OAAApB,aAAA,CAAAA,aAAA,KAC7BkB,QAAQ,OAAAlC,eAAA,KACVqC,QAAQ,EAAG;QAEVC,MAAM,EAAEd,KAAI,CAAAe,OAAA,CAACC,IAAI,CAAC,SAAS,EAAEZ,SAAS,CAACS,QAAQ,CAAC,CAAE;QAElDI,MAAM,EAAEH,MAAM,CAACG,MAAM,CAClBC,GAAG,CAAC,UAACC,KAAK;cAETC,GAAgB;UAAhB,QAAAA,GAAgB,GAAhBD,KAAK,CAACE,UAAU,SAAK,GAArB,MAAqB,GAArBD,GAAgB,CAAEF,GAAG,CAAC,UAACI,IAAI;YAAA,OAAM;cAC/BC,IAAI,EAAEvB,KAAI,CAAAe,OAAA,CAACC,IAAI,CAAC,QAAQ,EAAEM,IAAI,CAAC;cAC/BE,GAAG,EAAEL,KAAK,CAACM;aACZ;UAAA,CAAC,CAAC;SAAA,CACJ,CACAtC,MAAM,CAACuC,OAAO,CAAC,CACfC,IAAI;OACR;KACD,EACF,EAAE;GAEL"},"metadata":{},"sourceType":"script","externalDependencies":[]}