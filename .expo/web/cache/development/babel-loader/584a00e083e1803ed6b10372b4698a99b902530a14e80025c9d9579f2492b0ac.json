{"ast":null,"code":"'use strict';\n\nvar Scalar = require(\"../../nodes/Scalar.js\");\nvar map = require(\"../common/map.js\");\nvar seq = require(\"../common/seq.js\");\nfunction intIdentify(value) {\n  return typeof value === 'bigint' || Number.isInteger(value);\n}\nvar stringifyJSON = function stringifyJSON(_ref) {\n  var value = _ref.value;\n  return JSON.stringify(value);\n};\nvar jsonScalars = [{\n  identify: function identify(value) {\n    return typeof value === 'string';\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:str',\n  resolve: function resolve(str) {\n    return str;\n  },\n  stringify: stringifyJSON\n}, {\n  identify: function identify(value) {\n    return value == null;\n  },\n  createNode: function createNode() {\n    return new Scalar.Scalar(null);\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:null',\n  test: /^null$/,\n  resolve: function resolve() {\n    return null;\n  },\n  stringify: stringifyJSON\n}, {\n  identify: function identify(value) {\n    return typeof value === 'boolean';\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:bool',\n  test: /^true|false$/,\n  resolve: function resolve(str) {\n    return str === 'true';\n  },\n  stringify: stringifyJSON\n}, {\n  identify: intIdentify,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  test: /^-?(?:0|[1-9][0-9]*)$/,\n  resolve: function resolve(str, _onError, _ref2) {\n    var intAsBigInt = _ref2.intAsBigInt;\n    return intAsBigInt ? BigInt(str) : parseInt(str, 10);\n  },\n  stringify: function stringify(_ref3) {\n    var value = _ref3.value;\n    return intIdentify(value) ? value.toString() : JSON.stringify(value);\n  }\n}, {\n  identify: function identify(value) {\n    return typeof value === 'number';\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:float',\n  test: /^-?(?:0|[1-9][0-9]*)(?:\\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,\n  resolve: function resolve(str) {\n    return parseFloat(str);\n  },\n  stringify: stringifyJSON\n}];\nvar jsonError = {\n  default: true,\n  tag: '',\n  test: /^/,\n  resolve: function resolve(str, onError) {\n    onError(`Unresolved plain scalar ${JSON.stringify(str)}`);\n    return str;\n  }\n};\nvar schema = [map.map, seq.seq].concat(jsonScalars, jsonError);\nexports.schema = schema;","map":{"version":3,"names":["Scalar","require","map","seq","intIdentify","value","Number","isInteger","stringifyJSON","_ref","JSON","stringify","jsonScalars","identify","default","tag","resolve","str","createNode","test","_onError","_ref2","intAsBigInt","BigInt","parseInt","_ref3","toString","parseFloat","jsonError","onError","schema","concat","exports"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/dist/schema/json/schema.js"],"sourcesContent":["'use strict';\n\nvar Scalar = require('../../nodes/Scalar.js');\nvar map = require('../common/map.js');\nvar seq = require('../common/seq.js');\n\nfunction intIdentify(value) {\n    return typeof value === 'bigint' || Number.isInteger(value);\n}\nconst stringifyJSON = ({ value }) => JSON.stringify(value);\nconst jsonScalars = [\n    {\n        identify: value => typeof value === 'string',\n        default: true,\n        tag: 'tag:yaml.org,2002:str',\n        resolve: str => str,\n        stringify: stringifyJSON\n    },\n    {\n        identify: value => value == null,\n        createNode: () => new Scalar.Scalar(null),\n        default: true,\n        tag: 'tag:yaml.org,2002:null',\n        test: /^null$/,\n        resolve: () => null,\n        stringify: stringifyJSON\n    },\n    {\n        identify: value => typeof value === 'boolean',\n        default: true,\n        tag: 'tag:yaml.org,2002:bool',\n        test: /^true|false$/,\n        resolve: str => str === 'true',\n        stringify: stringifyJSON\n    },\n    {\n        identify: intIdentify,\n        default: true,\n        tag: 'tag:yaml.org,2002:int',\n        test: /^-?(?:0|[1-9][0-9]*)$/,\n        resolve: (str, _onError, { intAsBigInt }) => intAsBigInt ? BigInt(str) : parseInt(str, 10),\n        stringify: ({ value }) => intIdentify(value) ? value.toString() : JSON.stringify(value)\n    },\n    {\n        identify: value => typeof value === 'number',\n        default: true,\n        tag: 'tag:yaml.org,2002:float',\n        test: /^-?(?:0|[1-9][0-9]*)(?:\\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,\n        resolve: str => parseFloat(str),\n        stringify: stringifyJSON\n    }\n];\nconst jsonError = {\n    default: true,\n    tag: '',\n    test: /^/,\n    resolve(str, onError) {\n        onError(`Unresolved plain scalar ${JSON.stringify(str)}`);\n        return str;\n    }\n};\nconst schema = [map.map, seq.seq].concat(jsonScalars, jsonError);\n\nexports.schema = schema;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,MAAM,GAAGC,OAAO,wBAAwB,CAAC;AAC7C,IAAIC,GAAG,GAAGD,OAAO,mBAAmB,CAAC;AACrC,IAAIE,GAAG,GAAGF,OAAO,mBAAmB,CAAC;AAErC,SAASG,WAAWA,CAACC,KAAK,EAAE;EACxB,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAIC,MAAM,CAACC,SAAS,CAACF,KAAK,CAAC;AAC/D;AACA,IAAMG,aAAa,GAAG,SAAhBA,aAAaA,CAAAC,IAAA;EAAA,IAAMJ,KAAK,GAAAI,IAAA,CAALJ,KAAK;EAAA,OAAOK,IAAI,CAACC,SAAS,CAACN,KAAK,CAAC;AAAA;AAC1D,IAAMO,WAAW,GAAG,CAChB;EACIC,QAAQ,EAAE,SAAAA,SAAAR,KAAK;IAAA,OAAI,OAAOA,KAAK,KAAK,QAAQ;EAAA;EAC5CS,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,uBAAuB;EAC5BC,OAAO,EAAE,SAAAA,QAAAC,GAAG;IAAA,OAAIA,GAAG;EAAA;EACnBN,SAAS,EAAEH;AACf,CAAC,EACD;EACIK,QAAQ,EAAE,SAAAA,SAAAR,KAAK;IAAA,OAAIA,KAAK,IAAI,IAAI;EAAA;EAChCa,UAAU,EAAE,SAAAA,WAAA;IAAA,OAAM,IAAIlB,MAAM,CAACA,MAAM,CAAC,IAAI,CAAC;EAAA;EACzCc,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,wBAAwB;EAC7BI,IAAI,EAAE,QAAQ;EACdH,OAAO,EAAE,SAAAA,QAAA;IAAA,OAAM,IAAI;EAAA;EACnBL,SAAS,EAAEH;AACf,CAAC,EACD;EACIK,QAAQ,EAAE,SAAAA,SAAAR,KAAK;IAAA,OAAI,OAAOA,KAAK,KAAK,SAAS;EAAA;EAC7CS,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,wBAAwB;EAC7BI,IAAI,EAAE,cAAc;EACpBH,OAAO,EAAE,SAAAA,QAAAC,GAAG;IAAA,OAAIA,GAAG,KAAK,MAAM;EAAA;EAC9BN,SAAS,EAAEH;AACf,CAAC,EACD;EACIK,QAAQ,EAAET,WAAW;EACrBU,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,uBAAuB;EAC5BI,IAAI,EAAE,uBAAuB;EAC7BH,OAAO,EAAE,SAAAA,QAACC,GAAG,EAAEG,QAAQ,EAAAC,KAAA;IAAA,IAAIC,WAAW,GAAAD,KAAA,CAAXC,WAAW;IAAA,OAAOA,WAAW,GAAGC,MAAM,CAACN,GAAG,CAAC,GAAGO,QAAQ,CAACP,GAAG,EAAE,EAAE,CAAC;EAAA;EAC1FN,SAAS,EAAE,SAAAA,UAAAc,KAAA;IAAA,IAAGpB,KAAK,GAAAoB,KAAA,CAALpB,KAAK;IAAA,OAAOD,WAAW,CAACC,KAAK,CAAC,GAAGA,KAAK,CAACqB,QAAQ,CAAC,CAAC,GAAGhB,IAAI,CAACC,SAAS,CAACN,KAAK,CAAC;EAAA;AAC3F,CAAC,EACD;EACIQ,QAAQ,EAAE,SAAAA,SAAAR,KAAK;IAAA,OAAI,OAAOA,KAAK,KAAK,QAAQ;EAAA;EAC5CS,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,yBAAyB;EAC9BI,IAAI,EAAE,wDAAwD;EAC9DH,OAAO,EAAE,SAAAA,QAAAC,GAAG;IAAA,OAAIU,UAAU,CAACV,GAAG,CAAC;EAAA;EAC/BN,SAAS,EAAEH;AACf,CAAC,CACJ;AACD,IAAMoB,SAAS,GAAG;EACdd,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,EAAE;EACPI,IAAI,EAAE,GAAG;EACTH,OAAO,WAAAA,QAACC,GAAG,EAAEY,OAAO,EAAE;IAClBA,OAAO,CAAE,2BAA0BnB,IAAI,CAACC,SAAS,CAACM,GAAG,CAAE,EAAC,CAAC;IACzD,OAAOA,GAAG;EACd;AACJ,CAAC;AACD,IAAMa,MAAM,GAAG,CAAC5B,GAAG,CAACA,GAAG,EAAEC,GAAG,CAACA,GAAG,CAAC,CAAC4B,MAAM,CAACnB,WAAW,EAAEgB,SAAS,CAAC;AAEhEI,OAAO,CAACF,MAAM,GAAGA,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}