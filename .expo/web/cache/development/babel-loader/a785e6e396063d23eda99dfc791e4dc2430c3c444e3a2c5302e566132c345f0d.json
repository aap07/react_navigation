{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar path_1 = __importDefault(require(\"path\"));\nvar spawnAsync_1 = __importDefault(require(\"../spawnAsync\"));\nit(`receives output from completed processes`, _asyncToGenerator(function* () {\n  var result = yield spawnAsync_1.default('echo', ['hi']);\n  expect(typeof result.pid).toBe('number');\n  expect(result.stdout).toBe('hi\\n');\n  expect(result.stderr).toBe('');\n  expect(result.output[0]).toBe(result.stdout);\n  expect(result.output[1]).toBe(result.stderr);\n  expect(result.status).toBe(0);\n  expect(result.signal).toBe(null);\n}));\nit(`throws errors when processes return non-zero exit codes`, _asyncToGenerator(function* () {\n  var didThrow = false;\n  try {\n    yield spawnAsync_1.default('false');\n  } catch (e) {\n    didThrow = true;\n    expect(typeof e.pid).toBe('number');\n    expect(e.status).toBe(1);\n    expect(e.signal).toBe(null);\n  }\n  expect(didThrow).toBe(true);\n}));\nit(`returns when processes are killed with signals with non-zero exit codes`, _asyncToGenerator(function* () {\n  var didThrow = false;\n  try {\n    yield spawnAsync_1.default(path_1.default.join(__dirname, 'signal-self.sh'));\n  } catch (e) {\n    didThrow = true;\n    expect(typeof e.pid).toBe('number');\n    expect(e.status).toBe(null);\n    expect(e.signal).toBe('SIGKILL');\n  }\n  expect(didThrow).toBe(true);\n}));\nit(`throws errors when processes don't exist`, _asyncToGenerator(function* () {\n  var didThrow = false;\n  try {\n    yield spawnAsync_1.default('nonexistent-program');\n  } catch (e) {\n    didThrow = true;\n    expect(e.pid).not.toBeDefined();\n    expect(e.code).toBe('ENOENT');\n    expect(e.status).toBe(null);\n    expect(e.signal).toBe(null);\n  }\n  expect(didThrow).toBe(true);\n}));\nit(`exposes the child process through a property named \"child\"`, _asyncToGenerator(function* () {\n  var spawnTask = spawnAsync_1.default('echo', ['hi']);\n  var childProcess = spawnTask.child;\n  expect(childProcess).toBeDefined();\n  var result = yield spawnTask;\n  expect(result.pid).toBe(childProcess.pid);\n}));\nit(`runs extra listeners added to the child process`, _asyncToGenerator(function* () {\n  var spawnTask = spawnAsync_1.default('echo', ['hi']);\n  var mockExitListener = jest.fn();\n  var mockCloseListener = jest.fn();\n  spawnTask.child.on('exit', mockExitListener);\n  spawnTask.child.on('close', mockCloseListener);\n  yield spawnTask;\n  expect(mockExitListener).toHaveBeenCalledTimes(1);\n  expect(mockCloseListener).toHaveBeenCalledTimes(1);\n}));\nit(`runs extra error listeners added to the child process when there is an error`, _asyncToGenerator(function* () {\n  var spawnTask = spawnAsync_1.default('nonexistent-program');\n  var mockErrorListener = jest.fn();\n  spawnTask.child.on('error', mockErrorListener);\n  yield expect(spawnTask).rejects.toThrowError();\n  expect(mockErrorListener).toHaveBeenCalledTimes(1);\n}));\nit(`returns empty strings when ignoring stdio`, _asyncToGenerator(function* () {\n  var result = yield spawnAsync_1.default('echo', ['hi'], {\n    ignoreStdio: true\n  });\n  expect(typeof result.pid).toBe('number');\n  expect(result.stdout).toBe('');\n  expect(result.stderr).toBe('');\n  expect(result.output[0]).toBe(result.stdout);\n  expect(result.output[1]).toBe(result.stderr);\n  expect(result.status).toBe(0);\n  expect(result.signal).toBe(null);\n}));\nit(`returns even if stdout is open when ignoring stdio`, _asyncToGenerator(function* () {\n  var sourceTask = spawnAsync_1.default('yes', [], {\n    ignoreStdio: true\n  });\n  expect(sourceTask.child.listenerCount('exit')).toBe(1);\n  expect(sourceTask.child.listenerCount('close')).toBe(0);\n  var sinkTask = spawnAsync_1.default('cat');\n  sourceTask.child.stdout.pipe(sinkTask.child.stdin);\n  sinkTask.child.stdin.cork();\n  yield new Promise(function (resolve) {\n    return setTimeout(resolve, 5);\n  });\n  sourceTask.child.kill();\n  yield expect(sourceTask).rejects.toThrowError();\n  sinkTask.child.stdin.destroy();\n  yield expect(sinkTask).resolves.toMatchObject({\n    status: 0,\n    stdout: '',\n    stderr: ''\n  });\n}));\nit('throws errors with preserved stack traces when processes return non-zero exit codes', _asyncToGenerator(function* () {\n  expect.assertions(2);\n  try {\n    yield spawnAsync_1.default('false');\n  } catch (e) {\n    expect(e.stack).toMatch(/\\n    \\.\\.\\.\\n/);\n    expect(e.stack).toMatch(/at Object\\.spawnAsync/);\n  }\n}));","map":{"version":3,"names":["path_1","__importDefault","require","spawnAsync_1","it","_asyncToGenerator","result","default","expect","pid","toBe","stdout","stderr","output","status","signal","didThrow","e","join","__dirname","not","toBeDefined","code","spawnTask","childProcess","child","mockExitListener","jest","fn","mockCloseListener","on","toHaveBeenCalledTimes","mockErrorListener","rejects","toThrowError","ignoreStdio","sourceTask","listenerCount","sinkTask","pipe","stdin","cork","Promise","resolve","setTimeout","kill","destroy","resolves","toMatchObject","assertions","stack","toMatch"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\spawn-async\\src\\__tests__\\spawnAsync-test.ts"],"sourcesContent":["import path from 'path';\n\nimport spawnAsync from '../spawnAsync';\n\nit(`receives output from completed processes`, async () => {\n  let result = await spawnAsync('echo', ['hi']);\n  expect(typeof result.pid).toBe('number');\n  expect(result.stdout).toBe('hi\\n');\n  expect(result.stderr).toBe('');\n\n  expect(result.output[0]).toBe(result.stdout);\n  expect(result.output[1]).toBe(result.stderr);\n\n  expect(result.status).toBe(0);\n  expect(result.signal).toBe(null);\n});\n\nit(`throws errors when processes return non-zero exit codes`, async () => {\n  let didThrow = false;\n  try {\n    await spawnAsync('false');\n  } catch (e) {\n    didThrow = true;\n    expect(typeof e.pid).toBe('number');\n    expect(e.status).toBe(1);\n    expect(e.signal).toBe(null);\n  }\n  expect(didThrow).toBe(true);\n});\n\nit(`returns when processes are killed with signals with non-zero exit codes`, async () => {\n  let didThrow = false;\n  try {\n    await spawnAsync(path.join(__dirname, 'signal-self.sh'));\n  } catch (e) {\n    didThrow = true;\n    expect(typeof e.pid).toBe('number');\n    expect(e.status).toBe(null);\n    expect(e.signal).toBe('SIGKILL');\n  }\n  expect(didThrow).toBe(true);\n});\n\nit(`throws errors when processes don't exist`, async () => {\n  let didThrow = false;\n  try {\n    await spawnAsync('nonexistent-program');\n  } catch (e) {\n    didThrow = true;\n    expect(e.pid).not.toBeDefined();\n    expect(e.code).toBe('ENOENT');\n    expect(e.status).toBe(null);\n    expect(e.signal).toBe(null);\n  }\n  expect(didThrow).toBe(true);\n});\n\nit(`exposes the child process through a property named \"child\"`, async () => {\n  let spawnTask = spawnAsync('echo', ['hi']);\n  let childProcess = spawnTask.child;\n  expect(childProcess).toBeDefined();\n\n  let result = await spawnTask;\n  expect(result.pid).toBe(childProcess.pid);\n});\n\nit(`runs extra listeners added to the child process`, async () => {\n  let spawnTask = spawnAsync('echo', ['hi']);\n  let mockExitListener = jest.fn();\n  let mockCloseListener = jest.fn();\n  spawnTask.child.on('exit', mockExitListener);\n  spawnTask.child.on('close', mockCloseListener);\n\n  await spawnTask;\n  expect(mockExitListener).toHaveBeenCalledTimes(1);\n  expect(mockCloseListener).toHaveBeenCalledTimes(1);\n});\n\nit(`runs extra error listeners added to the child process when there is an error`, async () => {\n  let spawnTask = spawnAsync('nonexistent-program');\n  let mockErrorListener = jest.fn();\n  spawnTask.child.on('error', mockErrorListener);\n\n  await expect(spawnTask).rejects.toThrowError();\n  expect(mockErrorListener).toHaveBeenCalledTimes(1);\n});\n\nit(`returns empty strings when ignoring stdio`, async () => {\n  let result = await spawnAsync('echo', ['hi'], { ignoreStdio: true });\n  expect(typeof result.pid).toBe('number');\n  expect(result.stdout).toBe('');\n  expect(result.stderr).toBe('');\n\n  expect(result.output[0]).toBe(result.stdout);\n  expect(result.output[1]).toBe(result.stderr);\n\n  expect(result.status).toBe(0);\n  expect(result.signal).toBe(null);\n});\n\nit(`returns even if stdout is open when ignoring stdio`, async () => {\n  // Without ignoring stdio, the promise will never resolve as stdout remains open indefinitely\n  let sourceTask = spawnAsync('yes', [], { ignoreStdio: true });\n  expect(sourceTask.child.listenerCount('exit')).toBe(1);\n  expect(sourceTask.child.listenerCount('close')).toBe(0);\n\n  // Create a sink that keeps the source's stdout open even after the source process exits\n  let sinkTask = spawnAsync('cat');\n  sourceTask.child.stdout.pipe(sinkTask.child.stdin);\n  sinkTask.child.stdin.cork();\n\n  // Allow the source's stdout to buffer with a short delay\n  await new Promise(resolve => setTimeout(resolve, 5));\n\n  // The source's stdout stays open even after killing the process\n  sourceTask.child.kill();\n  await expect(sourceTask).rejects.toThrowError();\n\n  // Destroy the sink's stdin stream to let the process exit\n  sinkTask.child.stdin.destroy();\n  await expect(sinkTask).resolves.toMatchObject({ status: 0, stdout: '', stderr: '' });\n});\n\nit('throws errors with preserved stack traces when processes return non-zero exit codes', async () => {\n  expect.assertions(2);\n  try {\n    await spawnAsync('false');\n  } catch (e) {\n    expect(e.stack).toMatch(/\\n    \\.\\.\\.\\n/);\n    expect(e.stack).toMatch(/at Object\\.spawnAsync/);\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}