{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createTemplateHtmlFromExpoConfigAsync = createTemplateHtmlFromExpoConfigAsync;\nexports.createTemplateHtmlAsync = createTemplateHtmlAsync;\nvar _config = require(\"@expo/config\");\nvar _fs = _interopRequireDefault(require(\"fs\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _templates = require(\"../../customize/templates\");\nvar _html = require(\"../../export/html\");\nvar _env = require(\"../../utils/env\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction createTemplateHtmlFromExpoConfigAsync(_x, _x2) {\n  return _createTemplateHtmlFromExpoConfigAsync.apply(this, arguments);\n}\nfunction _createTemplateHtmlFromExpoConfigAsync() {\n  _createTemplateHtmlFromExpoConfigAsync = _asyncToGenerator(function* (projectRoot, _ref) {\n    var scripts = _ref.scripts,\n      cssLinks = _ref.cssLinks,\n      _ref$exp = _ref.exp,\n      exp = _ref$exp === void 0 ? (0, _config).getConfig(projectRoot, {\n        skipSDKVersionRequirement: true\n      }).exp : _ref$exp;\n    var ref, ref1, ref2;\n    var ref3, _webName;\n    return createTemplateHtmlAsync(projectRoot, {\n      langIsoCode: (ref3 = (ref = exp.web) == null ? void 0 : ref.lang) != null ? ref3 : \"en\",\n      scripts: scripts,\n      cssLinks: cssLinks,\n      title: (_webName = (0, _config).getNameFromConfig(exp).webName) != null ? _webName : \"Expo App\",\n      description: (ref1 = exp.web) == null ? void 0 : ref1.description,\n      themeColor: (ref2 = exp.web) == null ? void 0 : ref2.themeColor\n    });\n  });\n  return _createTemplateHtmlFromExpoConfigAsync.apply(this, arguments);\n}\nfunction getFileFromLocalPublicFolder(projectRoot, _ref2) {\n  var publicFolder = _ref2.publicFolder,\n    filePath = _ref2.filePath;\n  var localFilePath = _path.default.resolve(projectRoot, publicFolder, filePath);\n  if (!_fs.default.existsSync(localFilePath)) {\n    return null;\n  }\n  return localFilePath;\n}\nfunction getTemplateIndexHtmlAsync(_x3) {\n  return _getTemplateIndexHtmlAsync.apply(this, arguments);\n}\nfunction _getTemplateIndexHtmlAsync() {\n  _getTemplateIndexHtmlAsync = _asyncToGenerator(function* (projectRoot) {\n    var filePath = getFileFromLocalPublicFolder(projectRoot, {\n      publicFolder: _env.env.EXPO_PUBLIC_FOLDER,\n      filePath: \"index.html\"\n    });\n    if (!filePath) {\n      filePath = _templates.TEMPLATES.find(function (value) {\n        return value.id === \"index.html\";\n      }).file(projectRoot);\n    }\n    return _fs.default.promises.readFile(filePath, \"utf8\");\n  });\n  return _getTemplateIndexHtmlAsync.apply(this, arguments);\n}\nfunction createTemplateHtmlAsync(_x4, _x5) {\n  return _createTemplateHtmlAsync.apply(this, arguments);\n}\nfunction _createTemplateHtmlAsync() {\n  _createTemplateHtmlAsync = _asyncToGenerator(function* (projectRoot, _ref3) {\n    var scripts = _ref3.scripts,\n      cssLinks = _ref3.cssLinks,\n      description = _ref3.description,\n      langIsoCode = _ref3.langIsoCode,\n      title = _ref3.title,\n      themeColor = _ref3.themeColor;\n    var contents = yield getTemplateIndexHtmlAsync(projectRoot);\n    contents = contents.replace(\"%LANG_ISO_CODE%\", langIsoCode);\n    contents = contents.replace(\"%WEB_TITLE%\", title);\n    contents = (0, _html).appendScriptsToHtml(contents, scripts);\n    if (cssLinks) {\n      contents = (0, _html).appendLinkToHtml(contents, cssLinks.map(function (href) {\n        return [{\n          as: \"style\",\n          rel: \"preload\",\n          href: href\n        }, {\n          rel: \"stylesheet\",\n          href: href\n        }];\n      }).flat());\n    }\n    if (themeColor) {\n      contents = addMeta(contents, `name=\"theme-color\" content=\"${themeColor}\"`);\n    }\n    if (description) {\n      contents = addMeta(contents, `name=\"description\" content=\"${description}\"`);\n    }\n    return contents;\n  });\n  return _createTemplateHtmlAsync.apply(this, arguments);\n}\nfunction addMeta(contents, meta) {\n  return contents.replace(\"</head>\", `<meta ${meta}>\\n</head>`);\n}","map":{"version":3,"names":["_asyncToGenerator","require","createTemplateHtmlFromExpoConfigAsync","createTemplateHtmlAsync","_config","_fs","_interopRequireDefault","_path","_templates","_html","_env","_x","_x2","_createTemplateHtmlFromExpoConfigAsync","apply","arguments","projectRoot","_ref","scripts","cssLinks","_ref$exp","exp","getConfig","skipSDKVersionRequirement","ref","ref1","ref2","ref3","_webName","langIsoCode","web","lang","title","getNameFromConfig","webName","description","themeColor","getFileFromLocalPublicFolder","_ref2","publicFolder","filePath","localFilePath","default","resolve","existsSync","getTemplateIndexHtmlAsync","_x3","_getTemplateIndexHtmlAsync","env","EXPO_PUBLIC_FOLDER","TEMPLATES","find","value","id","file","promises","readFile","_x4","_x5","_createTemplateHtmlAsync","_ref3","contents","replace","appendScriptsToHtml","appendLinkToHtml","map","href","as","rel","flat","addMeta","meta"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\webTemplate.ts"],"sourcesContent":["import { ExpoConfig, getConfig, getNameFromConfig } from '@expo/config';\nimport fs from 'fs';\nimport path from 'path';\n\nimport { TEMPLATES } from '../../customize/templates';\nimport { appendLinkToHtml, appendScriptsToHtml } from '../../export/html';\nimport { env } from '../../utils/env';\n\n/**\n * Create a static HTML for SPA styled websites.\n * This method attempts to reuse the same patterns as `@expo/webpack-config`.\n */\nexport async function createTemplateHtmlFromExpoConfigAsync(\n  projectRoot: string,\n  {\n    scripts,\n    cssLinks,\n    exp = getConfig(projectRoot, { skipSDKVersionRequirement: true }).exp,\n  }: {\n    scripts: string[];\n    cssLinks?: string[];\n    exp?: ExpoConfig;\n  }\n) {\n  return createTemplateHtmlAsync(projectRoot, {\n    langIsoCode: exp.web?.lang ?? 'en',\n    scripts,\n    cssLinks,\n    title: getNameFromConfig(exp).webName ?? 'Expo App',\n    description: exp.web?.description,\n    themeColor: exp.web?.themeColor,\n  });\n}\n\nfunction getFileFromLocalPublicFolder(\n  projectRoot: string,\n  { publicFolder, filePath }: { publicFolder: string; filePath: string }\n): string | null {\n  const localFilePath = path.resolve(projectRoot, publicFolder, filePath);\n  if (!fs.existsSync(localFilePath)) {\n    return null;\n  }\n  return localFilePath;\n}\n\n/** Attempt to read the `index.html` from the local project before falling back on the template `index.html`. */\nasync function getTemplateIndexHtmlAsync(projectRoot: string): Promise<string> {\n  let filePath = getFileFromLocalPublicFolder(projectRoot, {\n    // TODO: Maybe use the app.json override.\n    publicFolder: env.EXPO_PUBLIC_FOLDER,\n    filePath: 'index.html',\n  });\n  if (!filePath) {\n    filePath = TEMPLATES.find((value) => value.id === 'index.html')!.file(projectRoot);\n  }\n  return fs.promises.readFile(filePath, 'utf8');\n}\n\n/** Return an `index.html` string with template values added. */\nexport async function createTemplateHtmlAsync(\n  projectRoot: string,\n  {\n    scripts,\n    cssLinks,\n    description,\n    langIsoCode,\n    title,\n    themeColor,\n  }: {\n    scripts: string[];\n    cssLinks?: string[];\n    description?: string;\n    langIsoCode: string;\n    title: string;\n    themeColor?: string;\n  }\n): Promise<string> {\n  // Resolve the best possible index.html template file.\n  let contents = await getTemplateIndexHtmlAsync(projectRoot);\n\n  contents = contents.replace('%LANG_ISO_CODE%', langIsoCode);\n  contents = contents.replace('%WEB_TITLE%', title);\n\n  contents = appendScriptsToHtml(contents, scripts);\n\n  if (cssLinks) {\n    contents = appendLinkToHtml(\n      contents,\n      cssLinks\n        .map((href) => [\n          // NOTE: We probably don't have to preload the CSS files for SPA-styled websites.\n          {\n            as: 'style',\n            rel: 'preload',\n            href,\n          },\n          {\n            rel: 'stylesheet',\n            href,\n          },\n        ])\n        .flat()\n    );\n  }\n\n  if (themeColor) {\n    contents = addMeta(contents, `name=\"theme-color\" content=\"${themeColor}\"`);\n  }\n\n  if (description) {\n    contents = addMeta(contents, `name=\"description\" content=\"${description}\"`);\n  }\n\n  return contents;\n}\n\n/** Add a `<meta />` tag to the `<head />` element. */\nfunction addMeta(contents: string, meta: string): string {\n  return contents.replace('</head>', `<meta ${meta}>\\n</head>`);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}