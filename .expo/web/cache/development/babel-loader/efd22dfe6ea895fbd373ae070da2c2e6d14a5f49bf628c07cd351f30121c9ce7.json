{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/webpack-config/webpack/loaders/createAllLoaders.d.ts"],"sourcesContent":["import { RuleSetRule } from 'webpack';\nimport { Environment } from '../types';\nexport declare const avifImageLoaderRule: RuleSetRule;\n/**\n * This is needed for webpack to import static images in JavaScript files.\n * \"url\" loader works like \"file\" loader except that it embeds assets\n * smaller than specified limit in bytes as data URLs to avoid requests.\n * A missing `test` is equivalent to a match.\n *\n * @category loaders\n */\nexport declare const imageLoaderRule: RuleSetRule;\n/**\n * \"file\" loader makes sure those assets get served by WebpackDevServer.\n * When you `import` an asset, you get its (virtual) filename.\n * In production, they would get copied to the `build` folder.\n * This loader doesn't use a \"test\" so it will catch all modules\n * that fall through the other loaders.\n *\n * @category loaders\n */\nexport declare const fallbackLoaderRule: RuleSetRule;\n/**\n * Default CSS loader.\n *\n * @category loaders\n */\nexport declare const styleLoaderRule: RuleSetRule;\n/**\n * Create the fallback loader for parsing any unhandled file type.\n *\n * @param env\n * @category loaders\n */\nexport default function createAllLoaders(env: Pick<Environment, 'projectRoot' | 'locations' | 'mode' | 'config' | 'platform' | 'babel'>): RuleSetRule[];\n/**\n * Creates a Rule for loading application code and packages that work with the Expo ecosystem.\n * This method attempts to emulate how Metro loads ES modules in the `node_modules` folder.\n *\n * @param env partial Environment object.\n * @category loaders\n */\nexport declare function getBabelLoaderRule(env: Pick<Environment, 'projectRoot' | 'config' | 'locations' | 'mode' | 'platform' | 'babel'>): RuleSetRule;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}