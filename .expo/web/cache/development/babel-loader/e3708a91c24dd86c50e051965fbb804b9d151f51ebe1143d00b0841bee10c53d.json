{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPID = getPID;\nexports.getDirectoryOfProcessById = getDirectoryOfProcessById;\nexports.getRunningProcess = getRunningProcess;\nvar _childProcess = require(\"child_process\");\nvar path = _interopRequireWildcard(require(\"path\"));\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar debug = require(\"debug\")(\"expo:utils:getRunningProcess\");\nvar defaultOptions = {\n  encoding: \"utf8\",\n  stdio: [\"pipe\", \"pipe\", \"ignore\"]\n};\nfunction getPID(port) {\n  try {\n    var results = (0, _childProcess).execFileSync(\"lsof\", [`-i:${port}`, \"-P\", \"-t\", \"-sTCP:LISTEN\"], defaultOptions).split(\"\\n\")[0].trim();\n    var pid = Number(results);\n    debug(`pid: ${pid} for port: ${port}`);\n    return pid;\n  } catch (error) {\n    debug(`No pid found for port: ${port}. Error: ${error}`);\n    return null;\n  }\n}\nfunction getPackageName(packageRoot) {\n  var packageJson = path.join(packageRoot, \"package.json\");\n  try {\n    return require(packageJson).name || null;\n  } catch (_unused) {\n    return null;\n  }\n}\nfunction getProcessCommand(pid, procDirectory) {\n  var name = getPackageName(procDirectory);\n  if (name) {\n    return name;\n  }\n  return (0, _childProcess).execSync(`ps -o command -p ${pid} | sed -n 2p`, defaultOptions).replace(/\\n$/, \"\").trim();\n}\nfunction getDirectoryOfProcessById(processId) {\n  return (0, _childProcess).execSync(`lsof -p ${processId} | awk '$4==\"cwd\" {for (i=9; i<=NF; i++) printf \"%s \", $i}'`, defaultOptions).trim();\n}\nfunction getRunningProcess(port) {\n  var pid = getPID(port);\n  if (!pid) {\n    return null;\n  }\n  try {\n    var directory = getDirectoryOfProcessById(pid);\n    var command = getProcessCommand(pid, directory);\n    return {\n      pid: pid,\n      directory: directory,\n      command: command\n    };\n  } catch (_unused2) {\n    return null;\n  }\n}","map":{"version":3,"names":["getPID","getDirectoryOfProcessById","getRunningProcess","_childProcess","require","path","_interopRequireWildcard","debug","defaultOptions","encoding","stdio","port","results","execFileSync","split","trim","pid","Number","error","getPackageName","packageRoot","packageJson","join","name","_unused","getProcessCommand","procDirectory","execSync","replace","processId","directory","command","_unused2"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\utils\\getRunningProcess.ts"],"sourcesContent":["import { execFileSync, execSync, ExecSyncOptionsWithStringEncoding } from 'child_process';\nimport * as path from 'path';\n\nconst debug = require('debug')('expo:utils:getRunningProcess') as typeof console.log;\n\nconst defaultOptions: ExecSyncOptionsWithStringEncoding = {\n  encoding: 'utf8',\n  stdio: ['pipe', 'pipe', 'ignore'],\n};\n\n/** Returns a pid value for a running port like `63828` or null if nothing is running on the given port. */\nexport function getPID(port: number): number | null {\n  try {\n    const results = execFileSync('lsof', [`-i:${port}`, '-P', '-t', '-sTCP:LISTEN'], defaultOptions)\n      .split('\\n')[0]\n      .trim();\n    const pid = Number(results);\n    debug(`pid: ${pid} for port: ${port}`);\n    return pid;\n  } catch (error: any) {\n    debug(`No pid found for port: ${port}. Error: ${error}`);\n    return null;\n  }\n}\n\n/** Get `package.json` `name` field for a given directory. Returns `null` if none exist. */\nfunction getPackageName(packageRoot: string): string | null {\n  const packageJson = path.join(packageRoot, 'package.json');\n  try {\n    return require(packageJson).name || null;\n  } catch {\n    return null;\n  }\n}\n\n/** Returns a command like `node /Users/evanbacon/.../bin/expo start` or the package.json name. */\nfunction getProcessCommand(pid: number, procDirectory: string): string {\n  const name = getPackageName(procDirectory);\n\n  if (name) {\n    return name;\n  }\n  return execSync(`ps -o command -p ${pid} | sed -n 2p`, defaultOptions).replace(/\\n$/, '').trim();\n}\n\n/** Get directory for a given process ID. */\nexport function getDirectoryOfProcessById(processId: number): string {\n  return execSync(\n    `lsof -p ${processId} | awk '$4==\"cwd\" {for (i=9; i<=NF; i++) printf \"%s \", $i}'`,\n    defaultOptions\n  ).trim();\n}\n\n/** Get information about a running process given a port. Returns null if no process is running on the given port. */\nexport function getRunningProcess(port: number): {\n  /** The PID value for the port. */\n  pid: number;\n  /** Get the directory for the running process. */\n  directory: string;\n  /** The command running the process like `node /Users/evanbacon/.../bin/expo start` or the `package.json` name like `my-app`. */\n  command: string;\n} | null {\n  // 63828\n  const pid = getPID(port);\n  if (!pid) {\n    return null;\n  }\n\n  try {\n    // /Users/evanbacon/Documents/GitHub/lab/myapp\n    const directory = getDirectoryOfProcessById(pid);\n    // /Users/evanbacon/Documents/GitHub/lab/myapp/package.json\n    const command = getProcessCommand(pid, directory);\n    // TODO: Have a better message for reusing another process.\n    return { pid, directory, command };\n  } catch {\n    return null;\n  }\n}\n"],"mappings":"AAAA;;;;;QAWgBA,MAAM,GAANA,MAAM;QAmCNC,yBAAyB,GAAzBA,yBAAyB;QAQzBC,iBAAiB,GAAjBA,iBAAiB;AAtDyC,IAAAC,aAAe,GAAAC,OAAA,CAAf,eAAe;AAC7E,IAAAC,IAAI,GAAAC,uBAAA,CAAAF,OAAA,CAAM,MAAM,EAAZ;;;;;;;;;;;;;;;;;;;;;;AAEhB,IAAMG,KAAK,GAAGH,OAAO,CAAC,OAAO,CAAC,CAAC,8BAA8B,CAAC;AAE9D,IAAMI,cAAc,GAAsC;EACxDC,QAAQ,EAAE,MAAM;EAChBC,KAAK,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ;CACjC;AAGM,SAASV,MAAMA,CAACW,IAAY,EAAiB;EAClD,IAAI;IACF,IAAMC,OAAO,GAAG,IAAAT,aAAY,EAAoEU,YAApE,CAAC,MAAM,EAAE,CAAE,MAAKF,IAAK,EAAC,EAAE,IAAI,EAAE,IAAI,EAAE,cAAc,CAAC,EAAEH,cAAc,CAAC,CAC7FM,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CACdC,IAAI,EAAE;IACT,IAAMC,GAAG,GAAGC,MAAM,CAACL,OAAO,CAAC;IAC3BL,KAAK,CAAE,QAAOS,GAAI,cAAaL,IAAK,EAAC,CAAC;IACtC,OAAOK,GAAG;GACX,CAAC,OAAOE,KAAK,EAAO;IACnBX,KAAK,CAAE,0BAAyBI,IAAK,YAAWO,KAAM,EAAC,CAAC;IACxD,OAAO,IAAI;;;AAKf,SAASC,cAAcA,CAACC,WAAmB,EAAiB;EAC1D,IAAMC,WAAW,GAAGhB,IAAI,CAACiB,IAAI,CAACF,WAAW,EAAE,cAAc,CAAC;EAC1D,IAAI;IACF,OAAOhB,OAAO,CAACiB,WAAW,CAAC,CAACE,IAAI,IAAI,IAAI;GACzC,CAAC,OAAAC,OAAA,EAAM;IACN,OAAO,IAAI;;;AAKf,SAASC,iBAAiBA,CAACT,GAAW,EAAEU,aAAqB,EAAU;EACrE,IAAMH,IAAI,GAAGJ,cAAc,CAACO,aAAa,CAAC;EAE1C,IAAIH,IAAI,EAAE;IACR,OAAOA,IAAI;;EAEb,OAAO,IAAApB,aAAQ,EAAuDwB,QAAvD,CAAE,oBAAmBX,GAAI,cAAa,EAAER,cAAc,CAAC,CAACoB,OAAO,QAAQ,EAAE,CAAC,CAACb,IAAI,EAAE;;AAI3F,SAASd,yBAAyBA,CAAC4B,SAAiB,EAAU;EACnE,OAAO,IAAA1B,aAAQ,EAGdwB,QAHc,CACZ,WAAUE,SAAU,6DAA4D,EACjFrB,cAAc,CACf,CAACO,IAAI,EAAE;;AAIH,SAASb,iBAAiBA,CAACS,IAAY,EAOrC;EAEP,IAAMK,GAAG,GAAGhB,MAAM,CAACW,IAAI,CAAC;EACxB,IAAI,CAACK,GAAG,EAAE;IACR,OAAO,IAAI;;EAGb,IAAI;IAEF,IAAMc,SAAS,GAAG7B,yBAAyB,CAACe,GAAG,CAAC;IAEhD,IAAMe,OAAO,GAAGN,iBAAiB,CAACT,GAAG,EAAEc,SAAS,CAAC;IAEjD,OAAO;MAAEd,GAAG,EAAHA,GAAG;MAAEc,SAAS,EAATA,SAAS;MAAEC,OAAO,EAAPA;KAAS;GACnC,CAAC,OAAAC,QAAA,EAAM;IACN,OAAO,IAAI"},"metadata":{},"sourceType":"script","externalDependencies":[]}