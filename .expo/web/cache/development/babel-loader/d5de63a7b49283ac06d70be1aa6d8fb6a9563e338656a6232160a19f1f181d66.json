{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport findUp from 'find-up';\nimport fs from 'fs-extra';\nimport path from 'path';\nexport var projectPackageJsonPath = findUp.sync('package.json', {\n  cwd: process.cwd()\n});\nif (!projectPackageJsonPath) {\n  throw new Error(`Couldn't find \"package.json\" up from path \"${process.cwd()}\"`);\n}\nexport function mergeLinkingOptionsAsync(_x) {\n  return _mergeLinkingOptionsAsync.apply(this, arguments);\n}\nfunction _mergeLinkingOptionsAsync() {\n  _mergeLinkingOptionsAsync = _asyncToGenerator(function* (providedOptions) {\n    var _packageJson$expo;\n    var packageJson = require(projectPackageJsonPath);\n    var baseOptions = (_packageJson$expo = packageJson.expo) == null ? void 0 : _packageJson$expo.autolinking;\n    var platformOptions = providedOptions.platform && (baseOptions == null ? void 0 : baseOptions[providedOptions.platform]);\n    var finalOptions = Object.assign({}, baseOptions, platformOptions, providedOptions);\n    finalOptions.searchPaths = yield resolveSearchPathsAsync(finalOptions.searchPaths, process.cwd());\n    finalOptions.nativeModulesDir = yield resolveNativeModulesDirAsync(finalOptions.nativeModulesDir, process.cwd());\n    return finalOptions;\n  });\n  return _mergeLinkingOptionsAsync.apply(this, arguments);\n}\nexport function resolveSearchPathsAsync(_x2, _x3) {\n  return _resolveSearchPathsAsync.apply(this, arguments);\n}\nfunction _resolveSearchPathsAsync() {\n  _resolveSearchPathsAsync = _asyncToGenerator(function* (searchPaths, cwd) {\n    return searchPaths && searchPaths.length > 0 ? searchPaths.map(function (searchPath) {\n      return path.resolve(cwd, searchPath);\n    }) : yield findDefaultPathsAsync(cwd);\n  });\n  return _resolveSearchPathsAsync.apply(this, arguments);\n}\nfunction findDefaultPathsAsync(_x4) {\n  return _findDefaultPathsAsync.apply(this, arguments);\n}\nfunction _findDefaultPathsAsync() {\n  _findDefaultPathsAsync = _asyncToGenerator(function* (cwd) {\n    var paths = [];\n    var dir = cwd;\n    var pkgJsonPath;\n    while (pkgJsonPath = yield findUp('package.json', {\n      cwd: dir\n    })) {\n      dir = path.dirname(path.dirname(pkgJsonPath));\n      paths.push(path.join(pkgJsonPath, '..', 'node_modules'));\n      if (path.dirname(dir) === dir) {\n        break;\n      }\n    }\n    return paths;\n  });\n  return _findDefaultPathsAsync.apply(this, arguments);\n}\nfunction resolveNativeModulesDirAsync(_x5, _x6) {\n  return _resolveNativeModulesDirAsync.apply(this, arguments);\n}\nfunction _resolveNativeModulesDirAsync() {\n  _resolveNativeModulesDirAsync = _asyncToGenerator(function* (nativeModulesDir, cwd) {\n    var packageJsonPath = yield findUp('package.json', {\n      cwd: cwd\n    });\n    var projectRoot = packageJsonPath != null ? path.join(packageJsonPath, '..') : cwd;\n    var resolvedPath = path.resolve(projectRoot, nativeModulesDir || 'modules');\n    return fs.existsSync(resolvedPath) ? resolvedPath : null;\n  });\n  return _resolveNativeModulesDirAsync.apply(this, arguments);\n}","map":{"version":3,"names":["findUp","fs","path","projectPackageJsonPath","sync","cwd","process","Error","mergeLinkingOptionsAsync","_x","_mergeLinkingOptionsAsync","apply","arguments","_asyncToGenerator","providedOptions","_packageJson$expo","packageJson","require","baseOptions","expo","autolinking","platformOptions","platform","finalOptions","Object","assign","searchPaths","resolveSearchPathsAsync","nativeModulesDir","resolveNativeModulesDirAsync","_x2","_x3","_resolveSearchPathsAsync","length","map","searchPath","resolve","findDefaultPathsAsync","_x4","_findDefaultPathsAsync","paths","dir","pkgJsonPath","dirname","push","join","_x5","_x6","_resolveNativeModulesDirAsync","packageJsonPath","projectRoot","resolvedPath","existsSync"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/expo-modules-autolinking/src/autolinking/mergeLinkingOptions.ts"],"sourcesContent":["import findUp from 'find-up';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { SearchOptions } from '../types';\n\n/**\n * Path to the `package.json` of the closest project in the current working dir.\n */\nexport const projectPackageJsonPath = findUp.sync('package.json', { cwd: process.cwd() }) as string;\n\n// This won't happen in usual scenarios, but we need to unwrap the optional path :)\nif (!projectPackageJsonPath) {\n  throw new Error(`Couldn't find \"package.json\" up from path \"${process.cwd()}\"`);\n}\n\n/**\n * Merges autolinking options from different sources (the later the higher priority)\n * - options defined in package.json's `expo.autolinking` field\n * - platform-specific options from the above (e.g. `expo.autolinking.ios`)\n * - options provided to the CLI command\n */\nexport async function mergeLinkingOptionsAsync<OptionsType extends SearchOptions>(\n  providedOptions: OptionsType\n): Promise<OptionsType> {\n  const packageJson = require(projectPackageJsonPath);\n  const baseOptions = packageJson.expo?.autolinking;\n  const platformOptions = providedOptions.platform && baseOptions?.[providedOptions.platform];\n  const finalOptions = Object.assign(\n    {},\n    baseOptions,\n    platformOptions,\n    providedOptions\n  ) as OptionsType;\n\n  // Makes provided paths absolute or falls back to default paths if none was provided.\n  finalOptions.searchPaths = await resolveSearchPathsAsync(finalOptions.searchPaths, process.cwd());\n\n  finalOptions.nativeModulesDir = await resolveNativeModulesDirAsync(\n    finalOptions.nativeModulesDir,\n    process.cwd()\n  );\n\n  return finalOptions;\n}\n\n/**\n * Resolves autolinking search paths. If none is provided, it accumulates all node_modules when\n * going up through the path components. This makes workspaces work out-of-the-box without any configs.\n */\nexport async function resolveSearchPathsAsync(\n  searchPaths: string[] | null,\n  cwd: string\n): Promise<string[]> {\n  return searchPaths && searchPaths.length > 0\n    ? searchPaths.map((searchPath) => path.resolve(cwd, searchPath))\n    : await findDefaultPathsAsync(cwd);\n}\n\n/**\n * Looks up for workspace's `node_modules` paths.\n */\nasync function findDefaultPathsAsync(cwd: string): Promise<string[]> {\n  const paths = [];\n  let dir = cwd;\n  let pkgJsonPath: string | undefined;\n\n  while ((pkgJsonPath = await findUp('package.json', { cwd: dir }))) {\n    dir = path.dirname(path.dirname(pkgJsonPath));\n    paths.push(path.join(pkgJsonPath, '..', 'node_modules'));\n\n    // This stops the infinite loop when the package.json is placed at the root dir.\n    if (path.dirname(dir) === dir) {\n      break;\n    }\n  }\n  return paths;\n}\n\n/**\n * Finds the real path to custom native modules directory.\n * - When {@link cwd} is inside the project directory, the path is searched relatively\n * to the project root (directory with the `package.json` file).\n * - When {@link cwd} is outside project directory (no `package.json` found), it is relative to\n * the current working directory (the {@link cwd} param).\n *\n * @param nativeModulesDir path to custom native modules directory. Defaults to `\"./modules\"` if null.\n * @param cwd current working directory\n * @returns resolved native modules directory or `null` if it is not found or doesn't exist.\n */\nasync function resolveNativeModulesDirAsync(\n  nativeModulesDir: string | null | undefined,\n  cwd: string\n): Promise<string | null> {\n  const packageJsonPath = await findUp('package.json', { cwd });\n  const projectRoot = packageJsonPath != null ? path.join(packageJsonPath, '..') : cwd;\n  const resolvedPath = path.resolve(projectRoot, nativeModulesDir || 'modules');\n  return fs.existsSync(resolvedPath) ? resolvedPath : null;\n}\n"],"mappings":";AAAA,OAAOA,MAAM,MAAM,SAAS;AAC5B,OAAOC,EAAE,MAAM,UAAU;AACzB,OAAOC,IAAI,MAAM,MAAM;AAOvB,OAAO,IAAMC,sBAAsB,GAAGH,MAAM,CAACI,IAAI,CAAC,cAAc,EAAE;EAAEC,GAAG,EAAEC,OAAO,CAACD,GAAG,CAAC;AAAE,CAAC,CAAW;AAGnG,IAAI,CAACF,sBAAsB,EAAE;EAC3B,MAAM,IAAII,KAAK,CAAE,8CAA6CD,OAAO,CAACD,GAAG,CAAC,CAAE,GAAE,CAAC;AACjF;AAQA,gBAAsBG,wBAAwBA,CAAAC,EAAA;EAAA,OAAAC,yBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAsB7C,SAAAF,0BAAA;EAAAA,yBAAA,GAAAG,iBAAA,CAtBM,WACLC,eAA4B,EACN;IAAA,IAAAC,iBAAA;IACtB,IAAMC,WAAW,GAAGC,OAAO,CAACd,sBAAsB,CAAC;IACnD,IAAMe,WAAW,IAAAH,iBAAA,GAAGC,WAAW,CAACG,IAAI,qBAAhBJ,iBAAA,CAAkBK,WAAW;IACjD,IAAMC,eAAe,GAAGP,eAAe,CAACQ,QAAQ,KAAIJ,WAAW,oBAAXA,WAAW,CAAGJ,eAAe,CAACQ,QAAQ,CAAC;IAC3F,IAAMC,YAAY,GAAGC,MAAM,CAACC,MAAM,CAChC,CAAC,CAAC,EACFP,WAAW,EACXG,eAAe,EACfP,eACF,CAAgB;IAGhBS,YAAY,CAACG,WAAW,SAASC,uBAAuB,CAACJ,YAAY,CAACG,WAAW,EAAEpB,OAAO,CAACD,GAAG,CAAC,CAAC,CAAC;IAEjGkB,YAAY,CAACK,gBAAgB,SAASC,4BAA4B,CAChEN,YAAY,CAACK,gBAAgB,EAC7BtB,OAAO,CAACD,GAAG,CAAC,CACd,CAAC;IAED,OAAOkB,YAAY;EACrB,CAAC;EAAA,OAAAb,yBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAMD,gBAAsBe,uBAAuBA,CAAAG,GAAA,EAAAC,GAAA;EAAA,OAAAC,wBAAA,CAAArB,KAAA,OAAAC,SAAA;AAAA;AAO5C,SAAAoB,yBAAA;EAAAA,wBAAA,GAAAnB,iBAAA,CAPM,WACLa,WAA4B,EAC5BrB,GAAW,EACQ;IACnB,OAAOqB,WAAW,IAAIA,WAAW,CAACO,MAAM,GAAG,CAAC,GACxCP,WAAW,CAACQ,GAAG,CAAC,UAACC,UAAU;MAAA,OAAKjC,IAAI,CAACkC,OAAO,CAAC/B,GAAG,EAAE8B,UAAU,CAAC;IAAA,EAAC,SACxDE,qBAAqB,CAAChC,GAAG,CAAC;EACtC,CAAC;EAAA,OAAA2B,wBAAA,CAAArB,KAAA,OAAAC,SAAA;AAAA;AAAA,SAKcyB,qBAAqBA,CAAAC,GAAA;EAAA,OAAAC,sBAAA,CAAA5B,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAA2B,uBAAA;EAAAA,sBAAA,GAAA1B,iBAAA,CAApC,WAAqCR,GAAW,EAAqB;IACnE,IAAMmC,KAAK,GAAG,EAAE;IAChB,IAAIC,GAAG,GAAGpC,GAAG;IACb,IAAIqC,WAA+B;IAEnC,OAAQA,WAAW,SAAS1C,MAAM,CAAC,cAAc,EAAE;MAAEK,GAAG,EAAEoC;IAAI,CAAC,CAAC,EAAG;MACjEA,GAAG,GAAGvC,IAAI,CAACyC,OAAO,CAACzC,IAAI,CAACyC,OAAO,CAACD,WAAW,CAAC,CAAC;MAC7CF,KAAK,CAACI,IAAI,CAAC1C,IAAI,CAAC2C,IAAI,CAACH,WAAW,EAAE,IAAI,EAAE,cAAc,CAAC,CAAC;MAGxD,IAAIxC,IAAI,CAACyC,OAAO,CAACF,GAAG,CAAC,KAAKA,GAAG,EAAE;QAC7B;MACF;IACF;IACA,OAAOD,KAAK;EACd,CAAC;EAAA,OAAAD,sBAAA,CAAA5B,KAAA,OAAAC,SAAA;AAAA;AAAA,SAaciB,4BAA4BA,CAAAiB,GAAA,EAAAC,GAAA;EAAA,OAAAC,6BAAA,CAAArC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAoC,8BAAA;EAAAA,6BAAA,GAAAnC,iBAAA,CAA3C,WACEe,gBAA2C,EAC3CvB,GAAW,EACa;IACxB,IAAM4C,eAAe,SAASjD,MAAM,CAAC,cAAc,EAAE;MAAEK,GAAG,EAAHA;IAAI,CAAC,CAAC;IAC7D,IAAM6C,WAAW,GAAGD,eAAe,IAAI,IAAI,GAAG/C,IAAI,CAAC2C,IAAI,CAACI,eAAe,EAAE,IAAI,CAAC,GAAG5C,GAAG;IACpF,IAAM8C,YAAY,GAAGjD,IAAI,CAACkC,OAAO,CAACc,WAAW,EAAEtB,gBAAgB,IAAI,SAAS,CAAC;IAC7E,OAAO3B,EAAE,CAACmD,UAAU,CAACD,YAAY,CAAC,GAAGA,YAAY,GAAG,IAAI;EAC1D,CAAC;EAAA,OAAAH,6BAAA,CAAArC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}