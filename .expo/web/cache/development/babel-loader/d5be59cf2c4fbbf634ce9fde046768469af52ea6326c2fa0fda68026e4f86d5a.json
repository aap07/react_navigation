{"ast":null,"code":"#!/usr/bin/env node\n\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.expoStart = void 0;\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _args = require(\"../utils/args\");\nvar _errors = require(\"../utils/errors\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar expoStart = function () {\n  var _ref = _asyncToGenerator(function* (argv) {\n    var args = (0, _args).assertArgs({\n      \"--help\": Boolean,\n      \"--clear\": Boolean,\n      \"--max-workers\": Number,\n      \"--no-dev\": Boolean,\n      \"--minify\": Boolean,\n      \"--https\": Boolean,\n      \"--force-manifest-type\": String,\n      \"--private-key-path\": String,\n      \"--port\": Number,\n      \"--dev-client\": Boolean,\n      \"--scheme\": String,\n      \"--android\": Boolean,\n      \"--ios\": Boolean,\n      \"--web\": Boolean,\n      \"--host\": String,\n      \"--tunnel\": Boolean,\n      \"--lan\": Boolean,\n      \"--localhost\": Boolean,\n      \"--offline\": Boolean,\n      \"--go\": Boolean,\n      \"-h\": \"--help\",\n      \"-c\": \"--clear\",\n      \"-p\": \"--port\",\n      \"-a\": \"--android\",\n      \"-i\": \"--ios\",\n      \"-w\": \"--web\",\n      \"-m\": \"--host\",\n      \"-d\": \"--dev-client\",\n      \"-g\": \"--go\",\n      \"--reset-cache\": \"--clear\"\n    }, argv);\n    if (args[\"--help\"]) {\n      (0, _args).printHelp(`Start a local dev server for the app`, _chalk.default`npx expo start {dim <dir>}`, [_chalk.default`<dir>                           Directory of the Expo project. {dim Default: Current working directory}`, `-a, --android                   Open on a connected Android device`, `-i, --ios                       Open in an iOS simulator`, `-w, --web                       Open in a web browser`, ``, _chalk.default`-d, --dev-client                Launch in a custom native app`, _chalk.default`-g, --go                        Launch in Expo Go`, ``, `-c, --clear                     Clear the bundler cache`, `--max-workers <number>          Maximum number of tasks to allow Metro to spawn`, `--no-dev                        Bundle in production mode`, `--minify                        Minify JavaScript`, ``, _chalk.default`-m, --host <string>             Dev server hosting type. {dim Default: lan}`, _chalk.default`                                {bold lan}: Use the local network`, _chalk.default`                                {bold tunnel}: Use any network by tunnel through ngrok`, _chalk.default`                                {bold localhost}: Connect to the dev server over localhost`, `--tunnel                        Same as --host tunnel`, `--lan                           Same as --host lan`, `--localhost                     Same as --host localhost`, ``, `--offline                       Skip network requests and use anonymous manifest signatures`, `--https                         Start the dev server with https protocol`, `--scheme <scheme>               Custom URI protocol to use when launching an app`, _chalk.default`-p, --port <number>             Port to start the dev server on (does not apply to web or tunnel). {dim Default: 8081}`, ``, _chalk.default`--force-manifest-type <string>  Override auto detection of manifest type. {dim Options: expo-updates, classic}`, _chalk.default`--private-key-path <path>       Path to private key for code signing. {dim Default: \"private-key.pem\" in the same directory as the certificate specified by the expo-updates configuration in app.json.}`, `-h, --help                      Usage info`].join(\"\\n\"));\n    }\n    var projectRoot = (0, _args).getProjectRoot(args);\n    var _yield$Promise$resolv = yield Promise.resolve().then(function () {\n        return _interopRequireWildcard(require(\"./resolveOptions\"));\n      }),\n      resolveOptionsAsync = _yield$Promise$resolv.resolveOptionsAsync;\n    var options = yield resolveOptionsAsync(projectRoot, args).catch(_errors.logCmdError);\n    if (options.offline) {\n      var _yield$Promise$resolv2 = yield Promise.resolve().then(function () {\n          return _interopRequireWildcard(require(\"../api/settings\"));\n        }),\n        disableNetwork = _yield$Promise$resolv2.disableNetwork;\n      disableNetwork();\n    }\n    var _yield$Promise$resolv3 = yield Promise.resolve().then(function () {\n        return _interopRequireWildcard(require(\"./startAsync\"));\n      }),\n      startAsync = _yield$Promise$resolv3.startAsync;\n    return startAsync(projectRoot, options, {\n      webOnly: false\n    }).catch(_errors.logCmdError);\n  });\n  return function expoStart(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexports.expoStart = expoStart;","map":{"version":3,"names":["_chalk","_interopRequireDefault","require","_args","_errors","expoStart","_ref","_asyncToGenerator","argv","args","assertArgs","Boolean","Number","String","printHelp","default","join","projectRoot","getProjectRoot","_yield$Promise$resolv","Promise","resolve","then","resolveOptionsAsync","options","catch","logCmdError","offline","_yield$Promise$resolv2","disableNetwork","_yield$Promise$resolv3","startAsync","webOnly","_x","apply","arguments"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\index.ts"],"sourcesContent":["#!/usr/bin/env node\nimport chalk from 'chalk';\n\nimport { Command } from '../../bin/cli';\nimport { assertArgs, getProjectRoot, printHelp } from '../utils/args';\nimport { logCmdError } from '../utils/errors';\n\nexport const expoStart: Command = async (argv) => {\n  const args = assertArgs(\n    {\n      // Types\n      '--help': Boolean,\n      '--clear': Boolean,\n      '--max-workers': Number,\n      '--no-dev': Boolean,\n      '--minify': Boolean,\n      '--https': Boolean,\n      '--force-manifest-type': String,\n      '--private-key-path': String,\n      '--port': Number,\n      '--dev-client': Boolean,\n      '--scheme': String,\n      '--android': Boolean,\n      '--ios': Boolean,\n      '--web': Boolean,\n      '--host': String,\n      '--tunnel': Boolean,\n      '--lan': Boolean,\n      '--localhost': Boolean,\n      '--offline': Boolean,\n      '--go': Boolean,\n      // Aliases\n      '-h': '--help',\n      '-c': '--clear',\n      '-p': '--port',\n      '-a': '--android',\n      '-i': '--ios',\n      '-w': '--web',\n      '-m': '--host',\n      '-d': '--dev-client',\n      '-g': '--go',\n      // Alias for adding interop with the Metro docs and RedBox errors.\n      '--reset-cache': '--clear',\n    },\n    argv\n  );\n\n  if (args['--help']) {\n    printHelp(\n      `Start a local dev server for the app`,\n      chalk`npx expo start {dim <dir>}`,\n      [\n        chalk`<dir>                           Directory of the Expo project. {dim Default: Current working directory}`,\n        `-a, --android                   Open on a connected Android device`,\n        `-i, --ios                       Open in an iOS simulator`,\n        `-w, --web                       Open in a web browser`,\n        ``,\n        chalk`-d, --dev-client                Launch in a custom native app`,\n        chalk`-g, --go                        Launch in Expo Go`,\n        ``,\n        `-c, --clear                     Clear the bundler cache`,\n        `--max-workers <number>          Maximum number of tasks to allow Metro to spawn`,\n        `--no-dev                        Bundle in production mode`,\n        `--minify                        Minify JavaScript`,\n        ``,\n        chalk`-m, --host <string>             Dev server hosting type. {dim Default: lan}`,\n        chalk`                                {bold lan}: Use the local network`,\n        chalk`                                {bold tunnel}: Use any network by tunnel through ngrok`,\n        chalk`                                {bold localhost}: Connect to the dev server over localhost`,\n        `--tunnel                        Same as --host tunnel`,\n        `--lan                           Same as --host lan`,\n        `--localhost                     Same as --host localhost`,\n        ``,\n        `--offline                       Skip network requests and use anonymous manifest signatures`,\n        `--https                         Start the dev server with https protocol`,\n        `--scheme <scheme>               Custom URI protocol to use when launching an app`,\n        chalk`-p, --port <number>             Port to start the dev server on (does not apply to web or tunnel). {dim Default: 8081}`,\n        ``,\n        chalk`--force-manifest-type <string>  Override auto detection of manifest type. {dim Options: expo-updates, classic}`,\n        chalk`--private-key-path <path>       Path to private key for code signing. {dim Default: \"private-key.pem\" in the same directory as the certificate specified by the expo-updates configuration in app.json.}`,\n        `-h, --help                      Usage info`,\n      ].join('\\n')\n    );\n  }\n\n  const projectRoot = getProjectRoot(args);\n  const { resolveOptionsAsync } = await import('./resolveOptions');\n  const options = await resolveOptionsAsync(projectRoot, args).catch(logCmdError);\n\n  if (options.offline) {\n    const { disableNetwork } = await import('../api/settings');\n    disableNetwork();\n  }\n\n  const { startAsync } = await import('./startAsync');\n  return startAsync(projectRoot, options, { webOnly: false }).catch(logCmdError);\n};\n"],"mappings":"AAAA;;;;;;;;AACkB,IAAAA,MAAO,GAAAC,sBAAA,CAAAC,OAAA,CAAP,OAAO;AAG6B,IAAAC,KAAe,GAAAD,OAAA;AACzC,IAAAE,OAAiB,GAAAF,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEtC,IAAMG,SAAS;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAY,WAAOC,IAAI,EAAK;IAChD,IAAMC,IAAI,GAAG,IAAAN,KAAU,EAqCtBO,UArCsB,CACrB;MAEE,QAAQ,EAAEC,OAAO;MACjB,SAAS,EAAEA,OAAO;MAClB,eAAe,EAAEC,MAAM;MACvB,UAAU,EAAED,OAAO;MACnB,UAAU,EAAEA,OAAO;MACnB,SAAS,EAAEA,OAAO;MAClB,uBAAuB,EAAEE,MAAM;MAC/B,oBAAoB,EAAEA,MAAM;MAC5B,QAAQ,EAAED,MAAM;MAChB,cAAc,EAAED,OAAO;MACvB,UAAU,EAAEE,MAAM;MAClB,WAAW,EAAEF,OAAO;MACpB,OAAO,EAAEA,OAAO;MAChB,OAAO,EAAEA,OAAO;MAChB,QAAQ,EAAEE,MAAM;MAChB,UAAU,EAAEF,OAAO;MACnB,OAAO,EAAEA,OAAO;MAChB,aAAa,EAAEA,OAAO;MACtB,WAAW,EAAEA,OAAO;MACpB,MAAM,EAAEA,OAAO;MAEf,IAAI,EAAE,QAAQ;MACd,IAAI,EAAE,SAAS;MACf,IAAI,EAAE,QAAQ;MACd,IAAI,EAAE,WAAW;MACjB,IAAI,EAAE,OAAO;MACb,IAAI,EAAE,OAAO;MACb,IAAI,EAAE,QAAQ;MACd,IAAI,EAAE,cAAc;MACpB,IAAI,EAAE,MAAM;MAEZ,eAAe,EAAE;KAClB,EACDH,IAAI,CACL;IAED,IAAIC,IAAI,CAAC,QAAQ,CAAC,EAAE;MAClB,IAAAN,KAAS,EAkCRW,SAlCQ,CACN,sCAAqC,EACtCd,MAAK,CAAAe,OAAC,4BAA2B,EACjC,CACEf,MAAK,CAAAe,OAAC,yGAAwG,EAC7G,oEAAmE,EACnE,0DAAyD,EACzD,uDAAsD,EACtD,EAAC,EACFf,MAAK,CAAAe,OAAC,+DAA8D,EACpEf,MAAK,CAAAe,OAAC,mDAAkD,EACvD,EAAC,EACD,yDAAwD,EACxD,iFAAgF,EAChF,2DAA0D,EAC1D,mDAAkD,EAClD,EAAC,EACFf,MAAK,CAAAe,OAAC,6EAA4E,EAClFf,MAAK,CAAAe,OAAC,mEAAkE,EACxEf,MAAK,CAAAe,OAAC,wFAAuF,EAC7Ff,MAAK,CAAAe,OAAC,4FAA2F,EAChG,uDAAsD,EACtD,oDAAmD,EACnD,0DAAyD,EACzD,EAAC,EACD,6FAA4F,EAC5F,0EAAyE,EACzE,kFAAiF,EAClFf,MAAK,CAAAe,OAAC,wHAAuH,EAC5H,EAAC,EACFf,MAAK,CAAAe,OAAC,gHAA+G,EACrHf,MAAK,CAAAe,OAAC,0MAAyM,EAC9M,4CAA2C,CAC7C,CAACC,IAAI,CAAC,IAAI,CAAC,CACb;;IAGH,IAAMC,WAAW,GAAG,IAAAd,KAAc,EAAMe,cAAN,CAACT,IAAI,CAAC;IACxC,IAAAU,qBAAA,SAAsCC,OAAA,CAAAC,OAAA,GAAAC,IAAA;iEAAyB;QAAC;MAAxDC,mBAAmB,GAAAJ,qBAAA,CAAnBI,mBAAmB;IAC3B,IAAMC,OAAO,SAASD,mBAAmB,CAACN,WAAW,EAAER,IAAI,CAAC,CAACgB,KAAK,CAACrB,OAAW,CAAAsB,WAAA,CAAC;IAE/E,IAAIF,OAAO,CAACG,OAAO,EAAE;MACnB,IAAAC,sBAAA,SAAiCR,OAAA,CAAAC,OAAA,GAAAC,IAAA;kEAAwB;UAAC;QAAlDO,cAAc,GAAAD,sBAAA,CAAdC,cAAc;MACtBA,cAAc,EAAE;;IAGlB,IAAAC,sBAAA,SAA6BV,OAAA,CAAAC,OAAA,GAAAC,IAAA;6DAAqB;QAAC;MAA3CS,UAAU,GAAAD,sBAAA,CAAVC,UAAU;IAClB,OAAOA,UAAU,CAACd,WAAW,EAAEO,OAAO,EAAE;MAAEQ,OAAO,EAAE;KAAO,CAAC,CAACP,KAAK,CAACrB,OAAW,CAAAsB,WAAA,CAAC;GAC/E;EAAA,gBAzFYrB,SAASA,CAAA4B,EAAA;IAAA,OAAA3B,IAAA,CAAA4B,KAAA,OAAAC,SAAA;EAAA;AAAA,GAyFrB;QAzFY9B,SAAS,GAATA,SAAS"},"metadata":{},"sourceType":"script","externalDependencies":[]}