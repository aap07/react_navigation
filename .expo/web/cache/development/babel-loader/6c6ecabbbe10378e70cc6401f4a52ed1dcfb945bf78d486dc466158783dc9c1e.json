{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar EMULATOR_LOCALHOST_ADDRESSES = [\"10.0.2.2\", \"10.0.3.2\"];\nvar FILE_PREFIX = \"file://\";\nvar VscodeDebuggerScriptParsedHandler = function () {\n  function VscodeDebuggerScriptParsedHandler(device) {\n    _classCallCheck(this, VscodeDebuggerScriptParsedHandler);\n    this.device = device;\n  }\n  _createClass(VscodeDebuggerScriptParsedHandler, [{\n    key: \"onDeviceMessage\",\n    value: function onDeviceMessage(message, debuggerInfo) {\n      if (debuggerInfo.debuggerType !== \"vscode\" || message.method !== \"Debugger.scriptParsed\") {\n        return false;\n      }\n      if (message.params.sourceMapURL) {\n        for (var i = 0; i < EMULATOR_LOCALHOST_ADDRESSES.length; ++i) {\n          var address = EMULATOR_LOCALHOST_ADDRESSES[i];\n          if (message.params.sourceMapURL.indexOf(address) >= 0) {\n            message.params.sourceMapURL = message.params.sourceMapURL.replace(address, \"localhost\");\n            debuggerInfo.originalSourceURLAddress = address;\n          }\n        }\n      }\n      if (message.params.url) {\n        for (var _i = 0; _i < EMULATOR_LOCALHOST_ADDRESSES.length; ++_i) {\n          var _address = EMULATOR_LOCALHOST_ADDRESSES[_i];\n          if (message.params.url.indexOf(_address) >= 0) {\n            message.params.url = message.params.url.replace(_address, \"localhost\");\n            debuggerInfo.originalSourceURLAddress = _address;\n          }\n        }\n        if (message.params.url.match(/^[0-9a-z]+$/)) {\n          message.params.url = FILE_PREFIX + message.params.url;\n          debuggerInfo.prependedFilePrefix = true;\n        }\n        if (message.params.scriptId != null) {\n          this.device._scriptIdToSourcePathMapping.set(message.params.scriptId, message.params.url);\n        }\n      }\n      return true;\n    }\n  }]);\n  return VscodeDebuggerScriptParsedHandler;\n}();\nexports.VscodeDebuggerScriptParsedHandler = VscodeDebuggerScriptParsedHandler;","map":{"version":3,"names":["_classCallCheck","require","_createClass","EMULATOR_LOCALHOST_ADDRESSES","FILE_PREFIX","VscodeDebuggerScriptParsedHandler","device","key","value","onDeviceMessage","message","debuggerInfo","debuggerType","method","params","sourceMapURL","i","length","address","indexOf","replace","originalSourceURLAddress","url","match","prependedFilePrefix","scriptId","_scriptIdToSourcePathMapping","set"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\metro\\inspector-proxy\\handlers\\VscodeDebuggerScriptParsed.ts"],"sourcesContent":["import Protocol from 'devtools-protocol';\nimport { Device as MetroDevice } from 'metro-inspector-proxy';\n\nimport { ExpoDebuggerInfo } from '../device';\nimport { CdpMessage, DeviceRequest, InspectorHandler } from './types';\n\n/** Android's stock emulator and other emulators such as genymotion use a standard localhost alias. */\nconst EMULATOR_LOCALHOST_ADDRESSES: Readonly<string[]> = ['10.0.2.2', '10.0.3.2'];\n/** Prefix for script URLs that are alphanumeric IDs. */\nconst FILE_PREFIX = 'file://';\n\n/**\n * Some debug clients does not support fetching source maps by URL.\n * By default, the `metro-inspector-proxy` inlines the source map as base64 string.\n * Unfortunately, that causes a multi-second delay in VS Code (Â±5s).\n * This handler disables inlining the source maps for VS Code only.\n */\nexport class VscodeDebuggerScriptParsedHandler implements InspectorHandler {\n  constructor(private readonly device: MetroDevice) {}\n\n  onDeviceMessage(message: DeviceRequest<DebuggerScriptParsed>, debuggerInfo: ExpoDebuggerInfo) {\n    if (debuggerInfo.debuggerType !== 'vscode' || message.method !== 'Debugger.scriptParsed') {\n      return false;\n    }\n\n    // See: https://github.com/facebook/metro/blob/f43caa371a813b257cb0b42028079645a1e85e0e/packages/metro-inspector-proxy/src/Device.js#L401-L410\n    if (message.params.sourceMapURL) {\n      for (let i = 0; i < EMULATOR_LOCALHOST_ADDRESSES.length; ++i) {\n        const address = EMULATOR_LOCALHOST_ADDRESSES[i];\n        if (message.params.sourceMapURL.indexOf(address) >= 0) {\n          message.params.sourceMapURL = message.params.sourceMapURL.replace(address, 'localhost');\n          debuggerInfo.originalSourceURLAddress = address;\n        }\n      }\n    }\n\n    // See: https://github.com/facebook/metro/blob/f43caa371a813b257cb0b42028079645a1e85e0e/packages/metro-inspector-proxy/src/Device.js#L431-L453\n    if (message.params.url) {\n      for (let i = 0; i < EMULATOR_LOCALHOST_ADDRESSES.length; ++i) {\n        const address = EMULATOR_LOCALHOST_ADDRESSES[i];\n        if (message.params.url.indexOf(address) >= 0) {\n          message.params.url = message.params.url.replace(address, 'localhost');\n          debuggerInfo.originalSourceURLAddress = address;\n        }\n      }\n\n      // Chrome doesn't download source maps if URL param is not a valid\n      // URL. Some frameworks pass alphanumeric script ID instead of URL which causes\n      // Chrome to not download source maps. In this case we want to prepend script ID\n      // with 'file://' prefix.\n      if (message.params.url.match(/^[0-9a-z]+$/)) {\n        message.params.url = FILE_PREFIX + message.params.url;\n        debuggerInfo.prependedFilePrefix = true;\n      }\n\n      if (message.params.scriptId != null) {\n        this.device._scriptIdToSourcePathMapping.set(message.params.scriptId, message.params.url);\n      }\n    }\n\n    // Block `metro-inspector-proxy`'s default source map inlining\n    return true;\n  }\n}\n\n/** @see https://chromedevtools.github.io/devtools-protocol/v8/Debugger/#event-scriptParsed */\nexport type DebuggerScriptParsed = CdpMessage<\n  'Debugger.scriptParsed',\n  Protocol.Debugger.ScriptParsedEvent,\n  never\n>;\n"],"mappings":"AAAA;;AAAA,IAAAA,eAAA,GAAAC,OAAA;AAAA,IAAAC,YAAA,GAAAD,OAAA;;;;AAOA,IAAME,4BAA4B,GAAuB,CAAC,UAAU,EAAE,UAAU,CAAC;AAEjF,IAAMC,WAAW,GAAG,SAAS;AAAC,IAQjBC,iCAAiC;EAC5C,SAAAA,kCAA6BC,MAAmB,EAAE;IAAAN,eAAA,OAAAK,iCAAA;SAArBC,MAAmB,GAAnBA,MAAmB;;EAAIJ,YAAA,CAAAG,iCAAA;IAAAE,GAAA;IAAAC,KAAA,EAEpD,SAAAC,gBAAgBC,OAA4C,EAAEC,YAA8B,EAAE;MAC5F,IAAIA,YAAY,CAACC,YAAY,KAAK,QAAQ,IAAIF,OAAO,CAACG,MAAM,KAAK,uBAAuB,EAAE;QACxF,OAAO,KAAK;;MAId,IAAIH,OAAO,CAACI,MAAM,CAACC,YAAY,EAAE;QAC/B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,4BAA4B,CAACc,MAAM,EAAE,EAAED,CAAC,EAAE;UAC5D,IAAME,OAAO,GAAGf,4BAA4B,CAACa,CAAC,CAAC;UAC/C,IAAIN,OAAO,CAACI,MAAM,CAACC,YAAY,CAACI,OAAO,CAACD,OAAO,CAAC,IAAI,CAAC,EAAE;YACrDR,OAAO,CAACI,MAAM,CAACC,YAAY,GAAGL,OAAO,CAACI,MAAM,CAACC,YAAY,CAACK,OAAO,CAACF,OAAO,EAAE,WAAW,CAAC;YACvFP,YAAY,CAACU,wBAAwB,GAAGH,OAAO;;;;MAMrD,IAAIR,OAAO,CAACI,MAAM,CAACQ,GAAG,EAAE;QACtB,KAAK,IAAIN,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAGb,4BAA4B,CAACc,MAAM,EAAE,EAAED,EAAC,EAAE;UAC5D,IAAME,QAAO,GAAGf,4BAA4B,CAACa,EAAC,CAAC;UAC/C,IAAIN,OAAO,CAACI,MAAM,CAACQ,GAAG,CAACH,OAAO,CAACD,QAAO,CAAC,IAAI,CAAC,EAAE;YAC5CR,OAAO,CAACI,MAAM,CAACQ,GAAG,GAAGZ,OAAO,CAACI,MAAM,CAACQ,GAAG,CAACF,OAAO,CAACF,QAAO,EAAE,WAAW,CAAC;YACrEP,YAAY,CAACU,wBAAwB,GAAGH,QAAO;;;QAQnD,IAAIR,OAAO,CAACI,MAAM,CAACQ,GAAG,CAACC,KAAK,eAAe,EAAE;UAC3Cb,OAAO,CAACI,MAAM,CAACQ,GAAG,GAAGlB,WAAW,GAAGM,OAAO,CAACI,MAAM,CAACQ,GAAG;UACrDX,YAAY,CAACa,mBAAmB,GAAG,IAAI;;QAGzC,IAAId,OAAO,CAACI,MAAM,CAACW,QAAQ,IAAI,IAAI,EAAE;UACnC,IAAI,CAACnB,MAAM,CAACoB,4BAA4B,CAACC,GAAG,CAACjB,OAAO,CAACI,MAAM,CAACW,QAAQ,EAAEf,OAAO,CAACI,MAAM,CAACQ,GAAG,CAAC;;;MAK7F,OAAO,IAAI;;EACZ;EAAA,OAAAjB,iCAAA;AAAA;QA7CUA,iCAAiC,GAAjCA,iCAAiC"},"metadata":{},"sourceType":"script","externalDependencies":[]}