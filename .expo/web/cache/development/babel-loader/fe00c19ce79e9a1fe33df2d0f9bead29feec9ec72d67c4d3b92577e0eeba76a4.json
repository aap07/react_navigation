{"ast":null,"code":"import React from 'react';\nimport { isNewWebImplementationEnabled } from \"./EnableNewWebImplementation\";\nimport InteractionManager from \"./web/tools/InteractionManager\";\nimport NodeManager from \"./web/tools/NodeManager\";\nimport PanGestureHandler from \"./web/handlers/PanGestureHandler\";\nimport TapGestureHandler from \"./web/handlers/TapGestureHandler\";\nimport LongPressGestureHandler from \"./web/handlers/LongPressGestureHandler\";\nimport PinchGestureHandler from \"./web/handlers/PinchGestureHandler\";\nimport RotationGestureHandler from \"./web/handlers/RotationGestureHandler\";\nimport FlingGestureHandler from \"./web/handlers/FlingGestureHandler\";\nimport NativeViewGestureHandler from \"./web/handlers/NativeViewGestureHandler\";\nimport ManualGestureHandler from \"./web/handlers/ManualGestureHandler\";\nimport * as HammerNodeManager from \"./web_hammer/NodeManager\";\nimport HammerNativeViewGestureHandler from \"./web_hammer/NativeViewGestureHandler\";\nimport HammerPanGestureHandler from \"./web_hammer/PanGestureHandler\";\nimport HammerTapGestureHandler from \"./web_hammer/TapGestureHandler\";\nimport HammerLongPressGestureHandler from \"./web_hammer/LongPressGestureHandler\";\nimport HammerPinchGestureHandler from \"./web_hammer/PinchGestureHandler\";\nimport HammerRotationGestureHandler from \"./web_hammer/RotationGestureHandler\";\nimport HammerFlingGestureHandler from \"./web_hammer/FlingGestureHandler\";\nexport var Gestures = {\n  NativeViewGestureHandler: NativeViewGestureHandler,\n  PanGestureHandler: PanGestureHandler,\n  TapGestureHandler: TapGestureHandler,\n  LongPressGestureHandler: LongPressGestureHandler,\n  PinchGestureHandler: PinchGestureHandler,\n  RotationGestureHandler: RotationGestureHandler,\n  FlingGestureHandler: FlingGestureHandler,\n  ManualGestureHandler: ManualGestureHandler\n};\nexport var HammerGestures = {\n  NativeViewGestureHandler: HammerNativeViewGestureHandler,\n  PanGestureHandler: HammerPanGestureHandler,\n  TapGestureHandler: HammerTapGestureHandler,\n  LongPressGestureHandler: HammerLongPressGestureHandler,\n  PinchGestureHandler: HammerPinchGestureHandler,\n  RotationGestureHandler: HammerRotationGestureHandler,\n  FlingGestureHandler: HammerFlingGestureHandler\n};\nexport default {\n  handleSetJSResponder: function handleSetJSResponder(tag, blockNativeResponder) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder: function handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler: function createGestureHandler(handlerName, handlerTag, config) {\n    if (isNewWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(`react-native-gesture-handler: ${handlerName} is not supported on web.`);\n      }\n      var GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(handlerTag, new GestureClass());\n      InteractionManager.getInstance().configureInteractions(NodeManager.getHandler(handlerTag), config);\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(`react-native-gesture-handler: ${handlerName} is not supported on web.`);\n      }\n      var _GestureClass = HammerGestures[handlerName];\n      HammerNodeManager.createGestureHandler(handlerTag, new _GestureClass());\n    }\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler: function attachGestureHandler(handlerTag, newView, _actionType, propsRef) {\n    if (!(newView instanceof HTMLElement || newView instanceof React.Component)) {\n      return;\n    }\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler: function updateGestureHandler(handlerTag, newConfig) {\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n      InteractionManager.getInstance().configureInteractions(NodeManager.getHandler(handlerTag), newConfig);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode: function getGestureHandlerNode(handlerTag) {\n    if (isNewWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler: function dropGestureHandler(handlerTag) {\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  flushOperations: function flushOperations() {}\n};","map":{"version":3,"names":["React","isNewWebImplementationEnabled","InteractionManager","NodeManager","PanGestureHandler","TapGestureHandler","LongPressGestureHandler","PinchGestureHandler","RotationGestureHandler","FlingGestureHandler","NativeViewGestureHandler","ManualGestureHandler","HammerNodeManager","HammerNativeViewGestureHandler","HammerPanGestureHandler","HammerTapGestureHandler","HammerLongPressGestureHandler","HammerPinchGestureHandler","HammerRotationGestureHandler","HammerFlingGestureHandler","Gestures","HammerGestures","handleSetJSResponder","tag","blockNativeResponder","console","warn","handleClearJSResponder","createGestureHandler","handlerName","handlerTag","config","Error","GestureClass","getInstance","configureInteractions","getHandler","updateGestureHandler","attachGestureHandler","newView","_actionType","propsRef","HTMLElement","Component","init","setView","newConfig","updateGestureConfig","getGestureHandlerNode","dropGestureHandler","flushOperations"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/react-native-gesture-handler/src/RNGestureHandlerModule.web.ts"],"sourcesContent":["import React from 'react';\n\nimport { ActionType } from './ActionType';\nimport { isNewWebImplementationEnabled } from './EnableNewWebImplementation';\n\n//GestureHandlers\nimport InteractionManager from './web/tools/InteractionManager';\nimport NodeManager from './web/tools/NodeManager';\nimport PanGestureHandler from './web/handlers/PanGestureHandler';\nimport TapGestureHandler from './web/handlers/TapGestureHandler';\nimport LongPressGestureHandler from './web/handlers/LongPressGestureHandler';\nimport PinchGestureHandler from './web/handlers/PinchGestureHandler';\nimport RotationGestureHandler from './web/handlers/RotationGestureHandler';\nimport FlingGestureHandler from './web/handlers/FlingGestureHandler';\nimport NativeViewGestureHandler from './web/handlers/NativeViewGestureHandler';\nimport ManualGestureHandler from './web/handlers/ManualGestureHandler';\n\n//Hammer Handlers\nimport * as HammerNodeManager from './web_hammer/NodeManager';\nimport HammerNativeViewGestureHandler from './web_hammer/NativeViewGestureHandler';\nimport HammerPanGestureHandler from './web_hammer/PanGestureHandler';\nimport HammerTapGestureHandler from './web_hammer/TapGestureHandler';\nimport HammerLongPressGestureHandler from './web_hammer/LongPressGestureHandler';\nimport HammerPinchGestureHandler from './web_hammer/PinchGestureHandler';\nimport HammerRotationGestureHandler from './web_hammer/RotationGestureHandler';\nimport HammerFlingGestureHandler from './web_hammer/FlingGestureHandler';\nimport { Config } from './web/interfaces';\n\nexport const Gestures = {\n  NativeViewGestureHandler,\n  PanGestureHandler,\n  TapGestureHandler,\n  LongPressGestureHandler,\n  PinchGestureHandler,\n  RotationGestureHandler,\n  FlingGestureHandler,\n  ManualGestureHandler,\n};\n\nexport const HammerGestures = {\n  NativeViewGestureHandler: HammerNativeViewGestureHandler,\n  PanGestureHandler: HammerPanGestureHandler,\n  TapGestureHandler: HammerTapGestureHandler,\n  LongPressGestureHandler: HammerLongPressGestureHandler,\n  PinchGestureHandler: HammerPinchGestureHandler,\n  RotationGestureHandler: HammerRotationGestureHandler,\n  FlingGestureHandler: HammerFlingGestureHandler,\n};\n\nexport default {\n  handleSetJSResponder(tag: number, blockNativeResponder: boolean) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    if (isNewWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      const GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(handlerTag, new GestureClass());\n      InteractionManager.getInstance().configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        config as unknown as Config\n      );\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      // @ts-ignore If it doesn't exist, the error is thrown\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const GestureClass = HammerGestures[handlerName];\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      HammerNodeManager.createGestureHandler(handlerTag, new GestureClass());\n    }\n\n    this.updateGestureHandler(handlerTag, config as unknown as Config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    newView: any,\n    _actionType: ActionType,\n    propsRef: React.RefObject<unknown>\n  ) {\n    if (\n      !(newView instanceof HTMLElement || newView instanceof React.Component)\n    ) {\n      return;\n    }\n\n    if (isNewWebImplementationEnabled()) {\n      //@ts-ignore Types should be HTMLElement or React.Component\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      //@ts-ignore Types should be HTMLElement or React.Component\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler(handlerTag: number, newConfig: Config) {\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n\n      InteractionManager.getInstance().configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        newConfig\n      );\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    if (isNewWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler(handlerTag: number) {\n    if (isNewWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  flushOperations() {},\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}