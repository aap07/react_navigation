{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isWebPlatformExcluded = isWebPlatformExcluded;\nvar _config = require(\"@expo/config\");\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar Log = _interopRequireWildcard(require(\"../../../log\"));\nvar _env = require(\"../../../utils/env\");\nvar _platformBundlers = require(\"../../server/platformBundlers\");\nvar _prerequisite = require(\"../Prerequisite\");\nvar _ensureDependenciesAsync = require(\"../dependencies/ensureDependenciesAsync\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar debug = require(\"debug\")(\"expo:doctor:webSupport\");\nvar WebSupportProjectPrerequisite = function (_prerequisite$Project) {\n  _inherits(WebSupportProjectPrerequisite, _prerequisite$Project);\n  var _super = _createSuper(WebSupportProjectPrerequisite);\n  function WebSupportProjectPrerequisite() {\n    _classCallCheck(this, WebSupportProjectPrerequisite);\n    return _super.apply(this, arguments);\n  }\n  _createClass(WebSupportProjectPrerequisite, [{\n    key: \"assertImplementation\",\n    value: function () {\n      var _assertImplementation = _asyncToGenerator(function* () {\n        if (_env.env.EXPO_NO_WEB_SETUP) {\n          Log.warn(\"Skipping web setup: EXPO_NO_WEB_SETUP is enabled.\");\n          return;\n        }\n        debug(\"Ensuring web support is setup\");\n        var result = yield this._shouldSetupWebSupportAsync();\n        yield this._ensureWebDependenciesInstalledAsync({\n          exp: result.exp\n        });\n      });\n      function assertImplementation() {\n        return _assertImplementation.apply(this, arguments);\n      }\n      return assertImplementation;\n    }()\n  }, {\n    key: \"_shouldSetupWebSupportAsync\",\n    value: function () {\n      var _shouldSetupWebSupportAsync2 = _asyncToGenerator(function* () {\n        var config = (0, _config).getConfig(this.projectRoot);\n        if (isWebPlatformExcluded(config.rootConfig)) {\n          var configName = (0, _config).getProjectConfigDescriptionWithPaths(this.projectRoot, config);\n          throw new _prerequisite.PrerequisiteCommandError(\"WEB_SUPPORT\", _chalk.default`Skipping web setup: {bold \"web\"} is not included in the project ${configName} {bold \"platforms\"} array.`);\n        }\n        return config;\n      });\n      function _shouldSetupWebSupportAsync() {\n        return _shouldSetupWebSupportAsync2.apply(this, arguments);\n      }\n      return _shouldSetupWebSupportAsync;\n    }()\n  }, {\n    key: \"_ensureWebDependenciesInstalledAsync\",\n    value: function () {\n      var _ensureWebDependenciesInstalledAsync2 = _asyncToGenerator(function* (_ref) {\n        var exp = _ref.exp;\n        var requiredPackages = [{\n          file: \"react-native-web/package.json\",\n          pkg: \"react-native-web\"\n        }, {\n          file: \"react-dom/package.json\",\n          pkg: \"react-dom\"\n        }];\n        var bundler = (0, _platformBundlers).getPlatformBundlers(exp).web;\n        if (bundler === \"webpack\") {\n          requiredPackages.push({\n            file: \"@expo/webpack-config/package.json\",\n            pkg: \"@expo/webpack-config\",\n            dev: true\n          });\n        }\n        try {\n          return yield (0, _ensureDependenciesAsync).ensureDependenciesAsync(this.projectRoot, {\n            skipPrompt: true,\n            isProjectMutable: false,\n            exp: exp,\n            installMessage: `It looks like you're trying to use web support but don't have the required dependencies installed.`,\n            warningMessage: _chalk.default`If you're not using web, please ensure you remove the {bold \"web\"} string from the platforms array in the project Expo config.`,\n            requiredPackages: requiredPackages\n          });\n        } catch (error) {\n          this.resetAssertion();\n          throw error;\n        }\n      });\n      function _ensureWebDependenciesInstalledAsync(_x) {\n        return _ensureWebDependenciesInstalledAsync2.apply(this, arguments);\n      }\n      return _ensureWebDependenciesInstalledAsync;\n    }()\n  }]);\n  return WebSupportProjectPrerequisite;\n}(_prerequisite.ProjectPrerequisite);\nexports.WebSupportProjectPrerequisite = WebSupportProjectPrerequisite;\nfunction isWebPlatformExcluded(rootConfig) {\n  var ref, ref1, ref2;\n  var isWebExcluded = Array.isArray((ref = rootConfig.expo) == null ? void 0 : ref.platforms) && !!((ref1 = rootConfig.expo) == null ? void 0 : ref1.platforms.length) && !((ref2 = rootConfig.expo) == null ? void 0 : ref2.platforms.includes(\"web\"));\n  return isWebExcluded;\n}","map":{"version":3,"names":["_asyncToGenerator","require","_classCallCheck","_createClass","_inherits","_possibleConstructorReturn","_getPrototypeOf","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","isWebPlatformExcluded","_config","_chalk","_interopRequireDefault","Log","_interopRequireWildcard","_env","_platformBundlers","_prerequisite","_ensureDependenciesAsync","debug","WebSupportProjectPrerequisite","_prerequisite$Project","_super","key","value","_assertImplementation","env","EXPO_NO_WEB_SETUP","warn","_shouldSetupWebSupportAsync","_ensureWebDependenciesInstalledAsync","exp","assertImplementation","_shouldSetupWebSupportAsync2","config","getConfig","projectRoot","rootConfig","configName","getProjectConfigDescriptionWithPaths","PrerequisiteCommandError","default","_ensureWebDependenciesInstalledAsync2","_ref","requiredPackages","file","pkg","bundler","getPlatformBundlers","web","push","dev","ensureDependenciesAsync","skipPrompt","isProjectMutable","installMessage","warningMessage","error","resetAssertion","_x","ProjectPrerequisite","ref","ref1","ref2","isWebExcluded","Array","isArray","expo","platforms","length","includes"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\doctor\\web\\WebSupportProjectPrerequisite.ts"],"sourcesContent":["import {\n  AppJSONConfig,\n  ExpoConfig,\n  getConfig,\n  getProjectConfigDescriptionWithPaths,\n  ProjectConfig,\n} from '@expo/config';\nimport chalk from 'chalk';\n\nimport * as Log from '../../../log';\nimport { env } from '../../../utils/env';\nimport { getPlatformBundlers } from '../../server/platformBundlers';\nimport { PrerequisiteCommandError, ProjectPrerequisite } from '../Prerequisite';\nimport { ensureDependenciesAsync } from '../dependencies/ensureDependenciesAsync';\nimport { ResolvedPackage } from '../dependencies/getMissingPackages';\n\nconst debug = require('debug')('expo:doctor:webSupport') as typeof console.log;\n\n/** Ensure the project has the required web support settings. */\nexport class WebSupportProjectPrerequisite extends ProjectPrerequisite {\n  /** Ensure a project that hasn't explicitly disabled web support has all the required packages for running in the browser. */\n  async assertImplementation(): Promise<void> {\n    if (env.EXPO_NO_WEB_SETUP) {\n      Log.warn('Skipping web setup: EXPO_NO_WEB_SETUP is enabled.');\n      return;\n    }\n    debug('Ensuring web support is setup');\n\n    const result = await this._shouldSetupWebSupportAsync();\n\n    // Ensure web packages are installed\n    await this._ensureWebDependenciesInstalledAsync({ exp: result.exp });\n  }\n\n  /** Exposed for testing. */\n  async _shouldSetupWebSupportAsync(): Promise<ProjectConfig> {\n    const config = getConfig(this.projectRoot);\n\n    // Detect if the 'web' string is purposefully missing from the platforms array.\n    if (isWebPlatformExcluded(config.rootConfig)) {\n      // Get exact config description with paths.\n      const configName = getProjectConfigDescriptionWithPaths(this.projectRoot, config);\n      throw new PrerequisiteCommandError(\n        'WEB_SUPPORT',\n        chalk`Skipping web setup: {bold \"web\"} is not included in the project ${configName} {bold \"platforms\"} array.`\n      );\n    }\n\n    return config;\n  }\n\n  /** Exposed for testing. */\n  async _ensureWebDependenciesInstalledAsync({ exp }: { exp: ExpoConfig }): Promise<boolean> {\n    const requiredPackages: ResolvedPackage[] = [\n      // use react-native-web/package.json to skip node module cache issues when the user installs\n      // the package and attempts to resolve the module in the same process.\n      { file: 'react-native-web/package.json', pkg: 'react-native-web' },\n      { file: 'react-dom/package.json', pkg: 'react-dom' },\n    ];\n\n    const bundler = getPlatformBundlers(exp).web;\n    // Only include webpack-config if bundler is webpack.\n    if (bundler === 'webpack') {\n      requiredPackages.push(\n        // `webpack` and `webpack-dev-server` should be installed in the `@expo/webpack-config`\n        {\n          file: '@expo/webpack-config/package.json',\n          pkg: '@expo/webpack-config',\n          dev: true,\n        }\n      );\n    }\n\n    try {\n      return await ensureDependenciesAsync(this.projectRoot, {\n        // This never seems to work when prompting, installing, and running -- instead just inform the user to run the install command and try again.\n        skipPrompt: true,\n        isProjectMutable: false,\n        exp,\n        installMessage: `It looks like you're trying to use web support but don't have the required dependencies installed.`,\n        warningMessage: chalk`If you're not using web, please ensure you remove the {bold \"web\"} string from the platforms array in the project Expo config.`,\n        requiredPackages,\n      });\n    } catch (error) {\n      // Reset the cached check so we can re-run the check if the user re-runs the command by pressing 'w' in the Terminal UI.\n      this.resetAssertion();\n      throw error;\n    }\n  }\n}\n\n/** Return `true` if the `web` platform is purposefully excluded from the project Expo config. */\nexport function isWebPlatformExcluded(rootConfig: AppJSONConfig): boolean {\n  // Detect if the 'web' string is purposefully missing from the platforms array.\n  const isWebExcluded =\n    Array.isArray(rootConfig.expo?.platforms) &&\n    !!rootConfig.expo?.platforms.length &&\n    !rootConfig.expo?.platforms.includes('web');\n  return isWebExcluded;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}