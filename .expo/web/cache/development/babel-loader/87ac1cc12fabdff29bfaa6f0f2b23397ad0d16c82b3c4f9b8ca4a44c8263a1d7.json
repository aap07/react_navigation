{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _cliPlatformAndroid() {\n  var data = require(\"@react-native-community/cli-platform-android\");\n  _cliPlatformAndroid = function _cliPlatformAndroid() {\n    return data;\n  };\n  return data;\n}\nfunction _child_process() {\n  var data = require(\"child_process\");\n  _child_process = function _child_process() {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function _cliTools() {\n    return data;\n  };\n  return data;\n}\nvar _default = {\n  label: 'Adb',\n  description: 'Required to verify if the android device is attached correctly',\n  getDiagnostics: function () {\n    var _getDiagnostics = _asyncToGenerator(function* () {\n      var adbPath = (0, _cliPlatformAndroid().getAdbPath)();\n      var devices = _cliPlatformAndroid().adb.getDevices(adbPath);\n      if (devices.length > 0) {\n        var adbArgs = ['reverse', '--list'];\n        var reverseList = (0, _child_process().execFileSync)(adbPath, adbArgs, {\n          encoding: 'utf8'\n        });\n        if (reverseList.length > 0) {\n          return {\n            needsToBeFixed: false\n          };\n        } else {\n          return {\n            description: 'The reverse proxy for the Android device has not been set.',\n            needsToBeFixed: true\n          };\n        }\n      } else {\n        return {\n          description: 'No devices and/or emulators connected. Please create emulator with Android Studio or connect Android device.',\n          needsToBeFixed: true\n        };\n      }\n    });\n    function getDiagnostics() {\n      return _getDiagnostics.apply(this, arguments);\n    }\n    return getDiagnostics;\n  }(),\n  runAutomaticFix: function () {\n    var _runAutomaticFix = _asyncToGenerator(function* (_ref) {\n      var loader = _ref.loader,\n        logManualInstallation = _ref.logManualInstallation;\n      loader.fail();\n      var hash;\n      switch (_cliTools().link.getOS()) {\n        case 'macos':\n          hash = 'method-1-using-adb-reverse-recommended';\n          break;\n        case 'windows':\n          hash = 'method-1-using-adb-reverse-recommended-1';\n          break;\n        case 'linux':\n          hash = 'method-1-using-adb-reverse-recommended-2';\n          break;\n        default:\n          hash = '';\n          break;\n      }\n      try {\n        var device = yield (0, _cliPlatformAndroid().listAndroidDevices)();\n        if (device && device.connected) {\n          (0, _cliPlatformAndroid().tryRunAdbReverse)(process.env.RCT_METRO_PORT || 8081, device.deviceId);\n        }\n        return loader.succeed();\n      } catch (e) {\n        return logManualInstallation({\n          healthcheck: 'Adb',\n          url: _cliTools().link.docs('running-on-device', {\n            hash: hash,\n            guide: 'native',\n            platform: 'android'\n          })\n        });\n      }\n    });\n    function runAutomaticFix(_x) {\n      return _runAutomaticFix.apply(this, arguments);\n    }\n    return runAutomaticFix;\n  }()\n};\nexports.default = _default;","map":{"version":3,"names":["_asyncToGenerator","require","Object","defineProperty","exports","value","default","_cliPlatformAndroid","data","_child_process","_cliTools","_default","label","description","getDiagnostics","_getDiagnostics","adbPath","getAdbPath","devices","adb","getDevices","length","adbArgs","reverseList","execFileSync","encoding","needsToBeFixed","apply","arguments","runAutomaticFix","_runAutomaticFix","_ref","loader","logManualInstallation","fail","hash","link","getOS","device","listAndroidDevices","connected","tryRunAdbReverse","process","env","RCT_METRO_PORT","deviceId","succeed","e","healthcheck","url","docs","guide","platform","_x"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/build/tools/healthchecks/adb.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _cliPlatformAndroid() {\n  const data = require(\"@react-native-community/cli-platform-android\");\n  _cliPlatformAndroid = function () {\n    return data;\n  };\n  return data;\n}\nfunction _child_process() {\n  const data = require(\"child_process\");\n  _child_process = function () {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function () {\n    return data;\n  };\n  return data;\n}\nvar _default = {\n  label: 'Adb',\n  description: 'Required to verify if the android device is attached correctly',\n  getDiagnostics: async () => {\n    const adbPath = (0, _cliPlatformAndroid().getAdbPath)();\n    const devices = _cliPlatformAndroid().adb.getDevices(adbPath);\n    if (devices.length > 0) {\n      const adbArgs = ['reverse', '--list'];\n      const reverseList = (0, _child_process().execFileSync)(adbPath, adbArgs, {\n        encoding: 'utf8'\n      });\n      if (reverseList.length > 0) {\n        return {\n          needsToBeFixed: false\n        };\n      } else {\n        return {\n          description: 'The reverse proxy for the Android device has not been set.',\n          needsToBeFixed: true\n        };\n      }\n    } else {\n      return {\n        description: 'No devices and/or emulators connected. Please create emulator with Android Studio or connect Android device.',\n        needsToBeFixed: true\n      };\n    }\n  },\n  runAutomaticFix: async ({\n    loader,\n    logManualInstallation\n  }) => {\n    loader.fail();\n    let hash;\n    switch (_cliTools().link.getOS()) {\n      case 'macos':\n        hash = 'method-1-using-adb-reverse-recommended';\n        break;\n      case 'windows':\n        hash = 'method-1-using-adb-reverse-recommended-1';\n        break;\n      case 'linux':\n        hash = 'method-1-using-adb-reverse-recommended-2';\n        break;\n      default:\n        hash = '';\n        break;\n    }\n    try {\n      const device = await (0, _cliPlatformAndroid().listAndroidDevices)();\n      if (device && device.connected) {\n        (0, _cliPlatformAndroid().tryRunAdbReverse)(process.env.RCT_METRO_PORT || 8081, device.deviceId);\n      }\n      return loader.succeed();\n    } catch (e) {\n      return logManualInstallation({\n        healthcheck: 'Adb',\n        url: _cliTools().link.docs('running-on-device', {\n          hash: hash,\n          guide: 'native',\n          platform: 'android'\n        })\n      });\n    }\n  }\n};\nexports.default = _default;\n\n//# sourceMappingURL=adb.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}