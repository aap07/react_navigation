{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveDeviceAsync = resolveDeviceAsync;\nvar _androidDeviceManager = require(\"../../start/platforms/android/AndroidDeviceManager\");\nvar _hints = require(\"../hints\");\nvar debug = require(\"debug\")(\"expo:android:resolveDevice\");\nfunction resolveDeviceAsync(_x) {\n  return _resolveDeviceAsync.apply(this, arguments);\n}\nfunction _resolveDeviceAsync() {\n  _resolveDeviceAsync = _asyncToGenerator(function* (device) {\n    if (!device) {\n      var _manager = yield _androidDeviceManager.AndroidDeviceManager.resolveAsync();\n      debug(`Resolved default device (name: ${_manager.device.name}, pid: ${_manager.device.pid})`);\n      return _manager;\n    }\n    debug(`Resolving device from argument: ${device}`);\n    var manager = device === true ? yield _androidDeviceManager.AndroidDeviceManager.resolveAsync({\n      shouldPrompt: true\n    }) : yield _androidDeviceManager.AndroidDeviceManager.resolveFromNameAsync(device);\n    (0, _hints).logDeviceArgument(manager.device.name);\n    return manager;\n  });\n  return _resolveDeviceAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","resolveDeviceAsync","_androidDeviceManager","_hints","debug","_x","_resolveDeviceAsync","apply","arguments","device","manager","AndroidDeviceManager","resolveAsync","name","pid","shouldPrompt","resolveFromNameAsync","logDeviceArgument"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\run\\android\\resolveDevice.ts"],"sourcesContent":["import { AndroidDeviceManager } from '../../start/platforms/android/AndroidDeviceManager';\nimport { logDeviceArgument } from '../hints';\n\nconst debug = require('debug')('expo:android:resolveDevice');\n\n/** Given a `device` argument from the CLI, parse and prompt our way to a usable device for building. */\nexport async function resolveDeviceAsync(device?: string | boolean) {\n  if (!device) {\n    const manager = await AndroidDeviceManager.resolveAsync();\n    debug(`Resolved default device (name: ${manager.device.name}, pid: ${manager.device.pid})`);\n    return manager;\n  }\n\n  debug(`Resolving device from argument: ${device}`);\n  const manager =\n    device === true\n      ? // `--device` (no props after)\n        await AndroidDeviceManager.resolveAsync({ shouldPrompt: true })\n      : // `--device <name>`\n        await AndroidDeviceManager.resolveFromNameAsync(device);\n  logDeviceArgument(manager.device.name);\n  return manager;\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,iBAAA,GAAAC,OAAA;;;;QAMsBC,kBAAkB,GAAlBA,kBAAkB;AANH,IAAAC,qBAAoD,GAAAF,OAAA;AACvD,IAAAG,MAAU,GAAAH,OAAA;AAE5C,IAAMI,KAAK,GAAGJ,OAAO,CAAC,OAAO,CAAC,CAAC,4BAA4B,CAAC;AAAC,SAGvCC,kBAAkBA,CAAAI,EAAA;EAAA,OAAAC,mBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,oBAAA;EAAAA,mBAAA,GAAAP,iBAAA,CAAjC,WAAkCU,MAAyB,EAAE;IAClE,IAAI,CAACA,MAAM,EAAE;MACX,IAAMC,QAAO,SAASR,qBAAoB,CAAAS,oBAAA,CAACC,YAAY,EAAE;MACzDR,KAAK,CAAE,kCAAiCM,QAAO,CAACD,MAAM,CAACI,IAAK,UAASH,QAAO,CAACD,MAAM,CAACK,GAAI,GAAE,CAAC;MAC3F,OAAOJ,QAAO;;IAGhBN,KAAK,CAAE,mCAAkCK,MAAO,EAAC,CAAC;IAClD,IAAMC,OAAO,GACXD,MAAM,KAAK,IAAI,SAELP,qBAAoB,CAAAS,oBAAA,CAACC,YAAY,CAAC;MAAEG,YAAY,EAAE;KAAM,CAAC,SAEzDb,qBAAoB,CAAAS,oBAAA,CAACK,oBAAoB,CAACP,MAAM,CAAC;IAC7D,IAAAN,MAAiB,EAAqBc,iBAArB,CAACP,OAAO,CAACD,MAAM,CAACI,IAAI,CAAC;IACtC,OAAOH,OAAO;GACf;EAAA,OAAAJ,mBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}