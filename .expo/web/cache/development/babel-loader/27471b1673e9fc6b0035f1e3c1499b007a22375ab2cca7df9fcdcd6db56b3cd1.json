{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/config-plugins/build/android/Resources.d.ts"],"sourcesContent":["import { XMLObject } from '../utils/XML';\nexport type ResourceGroupXML = {\n    $: {\n        name: string;\n        parent: string;\n    };\n    item: ResourceItemXML[];\n};\nexport type ResourceXML = {\n    resources: {\n        $?: {\n            'xmlns:tools'?: string;\n        };\n        color?: ResourceItemXML[];\n        string?: ResourceItemXML[];\n        style?: ResourceGroupXML[];\n    };\n};\nexport type ResourceItemXML = {\n    _: string;\n    $: {\n        name: string;\n        'tools:targetApi'?: string;\n        translatable?: string;\n    };\n};\n/**\n * Name of the resource folder.\n */\nexport type ResourceKind = 'values' | 'values-night' | 'values-v23' | 'values-night-v23' | 'drawable';\n/**\n * Read an XML file while providing a default fallback for resource files.\n *\n * @param options path to the XML file, returns a fallback XML if the path doesn't exist.\n */\nexport declare function readResourcesXMLAsync({ path, fallback, }: {\n    path: string;\n    fallback?: string | null;\n}): Promise<ResourceXML>;\n/**\n * Ensure the provided xml has a `resources` object (the expected shape).\n *\n * @param xml\n */\nexport declare function ensureDefaultResourceXML(xml: XMLObject): ResourceXML;\n/**\n * Build a `ResourceItemXML` given its `name` and `value`. This makes things a bit more readable.\n *\n * - JSON: `{ $: { name }, _: value }`\n * - XML: `<item name=\"NAME\">VALUE</item>`\n *\n * @param props name and value strings.\n */\nexport declare function buildResourceItem({ name, value, targetApi, translatable, }: {\n    name: string;\n    value: string;\n    targetApi?: string;\n    translatable?: boolean;\n}): ResourceItemXML;\nexport declare function buildResourceGroup(parent: {\n    name: string;\n    parent: string;\n    items?: ResourceItemXML[];\n}): ResourceGroupXML;\nexport declare function findResourceGroup(xml: ResourceGroupXML[] | undefined, group: {\n    name: string;\n    parent?: string;\n}): ResourceGroupXML | null;\n/**\n * Helper to convert a basic XML object into a simple k/v pair.\n *\n * @param xml\n * @returns\n */\nexport declare function getResourceItemsAsObject(xml: ResourceItemXML[]): Record<string, string> | null;\n/**\n * Helper to convert a basic k/v object to a ResourceItemXML array.\n *\n * @param xml\n * @returns\n */\nexport declare function getObjectAsResourceItems(obj: Record<string, string>): ResourceItemXML[];\nexport declare function getObjectAsResourceGroup(group: {\n    name: string;\n    parent: string;\n    item: Record<string, string>;\n}): ResourceGroupXML;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}