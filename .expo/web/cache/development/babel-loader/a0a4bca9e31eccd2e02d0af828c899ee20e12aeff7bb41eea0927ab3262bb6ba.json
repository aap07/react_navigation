{"ast":null,"code":"\"use strict\";\n\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nvar _wrapNativeSuper = require(\"@babel/runtime/helpers/wrapNativeSuper\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.logCmdError = logCmdError;\nvar _assert = require(\"assert\");\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _log = require(\"../log\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar ERROR_PREFIX = \"Error: \";\nvar CommandError = function (_Error) {\n  _inherits(CommandError, _Error);\n  var _super = _createSuper(CommandError);\n  function CommandError(code) {\n    var _this;\n    var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n    _classCallCheck(this, CommandError);\n    _this = _super.call(this, \"\");\n    _this.code = code;\n    _this.name = \"CommandError\";\n    _this.isCommandError = true;\n    if (message.startsWith(ERROR_PREFIX)) {\n      message = message.substring(ERROR_PREFIX.length);\n    }\n    _this.message = message || code;\n    return _this;\n  }\n  return _createClass(CommandError);\n}(_wrapNativeSuper(Error));\nexports.CommandError = CommandError;\nvar AbortCommandError = function (_CommandError) {\n  _inherits(AbortCommandError, _CommandError);\n  var _super2 = _createSuper(AbortCommandError);\n  function AbortCommandError() {\n    _classCallCheck(this, AbortCommandError);\n    return _super2.call(this, \"ABORTED\", \"Interactive prompt was cancelled.\");\n  }\n  return _createClass(AbortCommandError);\n}(CommandError);\nexports.AbortCommandError = AbortCommandError;\nvar SilentError = function (_CommandError2) {\n  _inherits(SilentError, _CommandError2);\n  var _super3 = _createSuper(SilentError);\n  function SilentError(messageOrError) {\n    var _this2;\n    _classCallCheck(this, SilentError);\n    var ref;\n    var message = (ref = typeof messageOrError === \"string\" ? messageOrError : messageOrError == null ? void 0 : messageOrError.message) != null ? ref : \"This error should fail silently in the CLI\";\n    _this2 = _super3.call(this, \"SILENT\", message);\n    if (typeof messageOrError !== \"string\") {\n      var ref1;\n      _this2.stack = (ref1 = messageOrError == null ? void 0 : messageOrError.stack) != null ? ref1 : _this2.stack;\n      var ref2;\n      _this2.name = (ref2 = messageOrError == null ? void 0 : messageOrError.name) != null ? ref2 : _this2.name;\n    }\n    return _this2;\n  }\n  return _createClass(SilentError);\n}(CommandError);\nexports.SilentError = SilentError;\nfunction logCmdError(error) {\n  if (error instanceof AbortCommandError || error instanceof SilentError) {\n    process.exit(0);\n  } else if (error instanceof CommandError || error instanceof _assert.AssertionError || error.name === \"ApiV2Error\" || error.name === \"ConfigError\") {\n    (0, _log).exit(error);\n  }\n  var errorDetails = error.stack ? \"\\n\" + _chalk.default.gray(error.stack) : \"\";\n  (0, _log).exit(_chalk.default.red(error.toString()) + errorDetails);\n}\nvar UnimplementedError = function (_Error2) {\n  _inherits(UnimplementedError, _Error2);\n  var _super4 = _createSuper(UnimplementedError);\n  function UnimplementedError() {\n    var _this3;\n    _classCallCheck(this, UnimplementedError);\n    _this3 = _super4.call(this, \"Unimplemented\");\n    _this3.name = \"UnimplementedError\";\n    return _this3;\n  }\n  return _createClass(UnimplementedError);\n}(_wrapNativeSuper(Error));\nexports.UnimplementedError = UnimplementedError;","map":{"version":3,"names":["_createClass","require","_classCallCheck","_inherits","_possibleConstructorReturn","_getPrototypeOf","_wrapNativeSuper","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","logCmdError","_assert","_chalk","_interopRequireDefault","_log","ERROR_PREFIX","CommandError","_Error","_super","code","_this","message","length","undefined","name","isCommandError","startsWith","substring","Error","AbortCommandError","_CommandError","_super2","SilentError","_CommandError2","_super3","messageOrError","_this2","ref","ref1","stack","ref2","error","process","exit","AssertionError","errorDetails","default","gray","red","toString","UnimplementedError","_Error2","_super4","_this3"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\utils\\errors.ts"],"sourcesContent":["import { AssertionError } from 'assert';\nimport chalk from 'chalk';\n\nimport { exit } from '../log';\n\nconst ERROR_PREFIX = 'Error: ';\n\n/**\n * General error, formatted as a message in red text when caught by expo-cli (no stack trace is printed). Should be used in favor of `log.error()` in most cases.\n */\nexport class CommandError extends Error {\n  name = 'CommandError';\n  readonly isCommandError = true;\n\n  constructor(public code: string, message: string = '') {\n    super('');\n    // If e.toString() was called to get `message` we don't want it to look\n    // like \"Error: Error:\".\n    if (message.startsWith(ERROR_PREFIX)) {\n      message = message.substring(ERROR_PREFIX.length);\n    }\n\n    this.message = message || code;\n  }\n}\n\nexport class AbortCommandError extends CommandError {\n  constructor() {\n    super('ABORTED', 'Interactive prompt was cancelled.');\n  }\n}\n\n/**\n * Used to end a CLI process without printing a stack trace in the Expo CLI. Should be used in favor of `process.exit`.\n */\nexport class SilentError extends CommandError {\n  constructor(messageOrError?: string | Error) {\n    const message =\n      (typeof messageOrError === 'string' ? messageOrError : messageOrError?.message) ??\n      'This error should fail silently in the CLI';\n    super('SILENT', message);\n    if (typeof messageOrError !== 'string') {\n      // forward the props of the incoming error for tests or processes outside of expo-cli that use expo cli internals.\n      this.stack = messageOrError?.stack ?? this.stack;\n      this.name = messageOrError?.name ?? this.name;\n    }\n  }\n}\n\nexport function logCmdError(error: Error): never {\n  if (error instanceof AbortCommandError || error instanceof SilentError) {\n    // Do nothing, this is used for prompts or other cases that were custom logged.\n    process.exit(0);\n  } else if (\n    error instanceof CommandError ||\n    error instanceof AssertionError ||\n    error.name === 'ApiV2Error' ||\n    error.name === 'ConfigError'\n  ) {\n    // Print the stack trace in debug mode only.\n    exit(error);\n  }\n\n  const errorDetails = error.stack ? '\\n' + chalk.gray(error.stack) : '';\n\n  exit(chalk.red(error.toString()) + errorDetails);\n}\n\n/** This should never be thrown in production. */\nexport class UnimplementedError extends Error {\n  constructor() {\n    super('Unimplemented');\n    this.name = 'UnimplementedError';\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}