{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createBuildSourceFile = createBuildSourceFile;\nexports.withBuildSourceFile = void 0;\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _Xcodeproj() {\n  var data = require(\"./utils/Xcodeproj\");\n  _Xcodeproj = function _Xcodeproj() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar withBuildSourceFile = function withBuildSourceFile(config, _ref) {\n  var filePath = _ref.filePath,\n    contents = _ref.contents,\n    overwrite = _ref.overwrite;\n  return (0, _iosPlugins().withXcodeProject)(config, function (config) {\n    var projectName = (0, _Xcodeproj().getProjectName)(config.modRequest.projectRoot);\n    config.modResults = createBuildSourceFile({\n      project: config.modResults,\n      nativeProjectRoot: config.modRequest.platformProjectRoot,\n      fileContents: contents,\n      filePath: _path().default.join(projectName, filePath),\n      overwrite: overwrite\n    });\n    return config;\n  });\n};\nexports.withBuildSourceFile = withBuildSourceFile;\nfunction createBuildSourceFile(_ref2) {\n  var project = _ref2.project,\n    nativeProjectRoot = _ref2.nativeProjectRoot,\n    filePath = _ref2.filePath,\n    fileContents = _ref2.fileContents,\n    overwrite = _ref2.overwrite;\n  var absoluteFilePath = _path().default.join(nativeProjectRoot, filePath);\n  if (overwrite || !_fs().default.existsSync(absoluteFilePath)) {\n    _fs().default.writeFileSync(absoluteFilePath, fileContents, 'utf8');\n  }\n  var groupName = _path().default.dirname(filePath);\n  if (!project.hasFile(filePath)) {\n    project = (0, _Xcodeproj().addBuildSourceFileToGroup)({\n      filepath: filePath,\n      groupName: groupName,\n      project: project\n    });\n  }\n  return project;\n}","map":{"version":3,"names":["_fs","data","_interopRequireDefault","require","_path","_iosPlugins","_Xcodeproj","obj","__esModule","default","withBuildSourceFile","config","_ref","filePath","contents","overwrite","withXcodeProject","projectName","getProjectName","modRequest","projectRoot","modResults","createBuildSourceFile","project","nativeProjectRoot","platformProjectRoot","fileContents","join","exports","_ref2","absoluteFilePath","existsSync","writeFileSync","groupName","dirname","hasFile","addBuildSourceFileToGroup","filepath"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\ios\\XcodeProjectFile.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport { ConfigPlugin, XcodeProject } from '../Plugin.types';\nimport { withXcodeProject } from '../plugins/ios-plugins';\nimport { addBuildSourceFileToGroup, getProjectName } from './utils/Xcodeproj';\n\n/**\n * Create a build source file and link it to Xcode.\n *\n * @param config\n * @param props.filePath relative to the build source folder. ex: `ViewController.swift` would be created in `ios/myapp/ViewController.swift`.\n * @param props.contents file contents to write.\n * @param props.overwrite should the contents overwrite any existing file in the same location on disk.\n * @returns\n */\nexport const withBuildSourceFile: ConfigPlugin<{\n  filePath: string;\n  contents: string;\n  overwrite?: boolean;\n}> = (config, { filePath, contents, overwrite }) => {\n  return withXcodeProject(config, (config) => {\n    const projectName = getProjectName(config.modRequest.projectRoot);\n\n    config.modResults = createBuildSourceFile({\n      project: config.modResults,\n      nativeProjectRoot: config.modRequest.platformProjectRoot,\n      fileContents: contents,\n      filePath: path.join(projectName, filePath),\n      overwrite,\n    });\n    return config;\n  });\n};\n\n/**\n * Add a source file to the Xcode project and write it to the file system.\n *\n * @param nativeProjectRoot absolute path to the native app root `user/app/ios`\n * @param filePath path relative to the `nativeProjectRoot` for the file to create `user/app/ios/myapp/foobar.swift`\n * @param fileContents string file contents to write to the `filePath`\n * @param overwrite should write file even if one already exists\n */\nexport function createBuildSourceFile({\n  project,\n  nativeProjectRoot,\n  filePath,\n  fileContents,\n  overwrite,\n}: {\n  project: XcodeProject;\n  nativeProjectRoot: string;\n  filePath: string;\n  fileContents: string;\n  overwrite?: boolean;\n}): XcodeProject {\n  const absoluteFilePath = path.join(nativeProjectRoot, filePath);\n  if (overwrite || !fs.existsSync(absoluteFilePath)) {\n    // Create the file\n    fs.writeFileSync(absoluteFilePath, fileContents, 'utf8');\n  }\n\n  // `myapp`\n  const groupName = path.dirname(filePath);\n\n  // Ensure the file is linked with Xcode resource files\n  if (!project.hasFile(filePath)) {\n    project = addBuildSourceFileToGroup({\n      filepath: filePath,\n      groupName,\n      project,\n    });\n  }\n  return project;\n}\n"],"mappings":";;;;;;;AAAA,SAAAA,IAAA;EAAA,IAAAC,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAH,GAAA,YAAAA,IAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAG,MAAA;EAAA,IAAAH,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAC,KAAA,YAAAA,MAAA;IAAA,OAAAH,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAGA,SAAAI,YAAA;EAAA,IAAAJ,IAAA,GAAAE,OAAA;EAAAE,WAAA,YAAAA,YAAA;IAAA,OAAAJ,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAK,WAAA;EAAA,IAAAL,IAAA,GAAAE,OAAA;EAAAG,UAAA,YAAAA,WAAA;IAAA,OAAAL,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAA8E,SAAAC,uBAAAK,GAAA;EAAA,OAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA;IAAAE,OAAA,EAAAF;EAAA;AAAA;AAWvE,IAAMG,mBAIX,GAAG,SAJQA,mBAIXA,CAAIC,MAAM,EAAAC,IAAA,EAAwC;EAAA,IAApCC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;IAAEC,QAAQ,GAAAF,IAAA,CAARE,QAAQ;IAAEC,SAAA,GAAAH,IAAA,CAAAG,SAAA;EAClC,OAAO,IAAAV,WAAA,GAAAW,gBAAgB,EAACL,MAAM,EAAG,UAAAA,MAAM,EAAK;IAC1C,IAAMM,WAAW,GAAG,IAAAX,UAAA,GAAAY,cAAc,EAACP,MAAM,CAACQ,UAAU,CAACC,WAAW,CAAC;IAEjET,MAAM,CAACU,UAAU,GAAGC,qBAAqB,CAAC;MACxCC,OAAO,EAAEZ,MAAM,CAACU,UAAU;MAC1BG,iBAAiB,EAAEb,MAAM,CAACQ,UAAU,CAACM,mBAAmB;MACxDC,YAAY,EAAEZ,QAAQ;MACtBD,QAAQ,EAAET,KAAA,GAAAK,OAAI,CAACkB,IAAI,CAACV,WAAW,EAAEJ,QAAQ,CAAC;MAC1CE,SAAA,EAAAA;IACF,CAAC,CAAC;IACF,OAAOJ,MAAM;EACf,CAAC,CAAC;AACJ,CAAC;AAEDiB,OAAA,CAAAlB,mBAAA,GAAAA,mBAAA;AAQO,SAASY,qBAAqBA,CAAAO,KAAA,EAYpB;EAAA,IAXfN,OAAO,GAAAM,KAAA,CAAPN,OAAO;IACPC,iBAAiB,GAAAK,KAAA,CAAjBL,iBAAiB;IACjBX,QAAQ,GAAAgB,KAAA,CAARhB,QAAQ;IACRa,YAAY,GAAAG,KAAA,CAAZH,YAAY;IACZX,SAAA,GAAAc,KAAA,CAAAd,SAAA;EAQA,IAAMe,gBAAgB,GAAG1B,KAAA,GAAAK,OAAI,CAACkB,IAAI,CAACH,iBAAiB,EAAEX,QAAQ,CAAC;EAC/D,IAAIE,SAAS,IAAI,CAACf,GAAA,GAAAS,OAAE,CAACsB,UAAU,CAACD,gBAAgB,CAAC,EAAE;IAEjD9B,GAAA,GAAAS,OAAE,CAACuB,aAAa,CAACF,gBAAgB,EAAEJ,YAAY,EAAE,MAAM,CAAC;EAC1D;EAGA,IAAMO,SAAS,GAAG7B,KAAA,GAAAK,OAAI,CAACyB,OAAO,CAACrB,QAAQ,CAAC;EAGxC,IAAI,CAACU,OAAO,CAACY,OAAO,CAACtB,QAAQ,CAAC,EAAE;IAC9BU,OAAO,GAAG,IAAAjB,UAAA,GAAA8B,yBAAyB,EAAC;MAClCC,QAAQ,EAAExB,QAAQ;MAClBoB,SAAS,EAATA,SAAS;MACTV,OAAA,EAAAA;IACF,CAAC,CAAC;EACJ;EACA,OAAOA,OAAO;AAChB"},"metadata":{},"sourceType":"script","externalDependencies":[]}