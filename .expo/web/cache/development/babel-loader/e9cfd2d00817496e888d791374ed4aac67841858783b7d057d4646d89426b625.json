{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/config-plugins/build/utils/plugin-resolver.d.ts"],"sourcesContent":["import { ConfigPlugin, StaticPlugin } from '../Plugin.types';\nexport declare const pluginFileName = \"app.plugin.js\";\nexport declare function resolvePluginForModule(projectRoot: string, modulePath: string): {\n    isPluginFile: boolean;\n    filePath: string;\n};\nexport declare function moduleNameIsDirectFileReference(name: string): boolean;\nexport declare function normalizeStaticPlugin(plugin: StaticPlugin | ConfigPlugin | string): StaticPlugin;\nexport declare function assertInternalProjectRoot(projectRoot?: string): asserts projectRoot;\nexport declare function resolveConfigPluginFunction(projectRoot: string, pluginReference: string): ConfigPlugin<unknown>;\nexport declare function resolveConfigPluginFunctionWithInfo(projectRoot: string, pluginReference: string): {\n    plugin: ConfigPlugin<unknown>;\n    pluginFile: string;\n    pluginReference: string;\n    isPluginFile: boolean;\n};\n/**\n * - Resolve the exported contents of an Expo config (be it default or module.exports)\n * - Assert no promise exports\n * - Return config type\n * - Serialize config\n *\n * @param props.plugin plugin results\n * @param props.pluginFile plugin file path\n * @param props.pluginReference the string used to reference the plugin\n * @param props.isPluginFile is file path from the app.plugin.js module root\n */\nexport declare function resolveConfigPluginExport({ plugin, pluginFile, pluginReference, isPluginFile, }: {\n    plugin: any;\n    pluginFile: string;\n    pluginReference: string;\n    isPluginFile: boolean;\n}): ConfigPlugin<unknown>;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}