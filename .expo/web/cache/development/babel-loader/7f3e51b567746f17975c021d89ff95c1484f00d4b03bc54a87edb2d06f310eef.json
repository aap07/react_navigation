{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createJsInspectorMiddleware;\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function _chalk() {\n    return data;\n  };\n  return data;\n}\nfunction _net() {\n  var data = _interopRequireDefault(require(\"net\"));\n  _net = function _net() {\n    return data;\n  };\n  return data;\n}\nfunction _tls() {\n  var data = require(\"tls\");\n  _tls = function _tls() {\n    return data;\n  };\n  return data;\n}\nfunction _url() {\n  var data = require(\"url\");\n  _url = function _url() {\n    return data;\n  };\n  return data;\n}\nfunction _JsInspector() {\n  var data = require(\"../JsInspector\");\n  _JsInspector = function _JsInspector() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction createJsInspectorMiddleware() {\n  return function () {\n    var _ref = _asyncToGenerator(function* (req, res, next) {\n      var _req$url;\n      var _url$URL = new (_url().URL)((_req$url = req.url) !== null && _req$url !== void 0 ? _req$url : '/', getServerBase(req)),\n        origin = _url$URL.origin,\n        searchParams = _url$URL.searchParams;\n      var applicationId = searchParams.get('applicationId');\n      if (!applicationId) {\n        res.writeHead(400).end('Missing applicationId');\n        return;\n      }\n      var app = yield (0, _JsInspector().queryInspectorAppAsync)(origin, applicationId);\n      if (!app) {\n        res.writeHead(404).end('Unable to find inspector target from metro-inspector-proxy');\n        console.warn(_chalk().default.yellow('No compatible apps connected. JavaScript Debugging can only be used with the Hermes engine.'));\n        return;\n      }\n      if (req.method === 'GET') {\n        var data = JSON.stringify(app);\n        res.writeHead(200, {\n          'Content-Type': 'application/json; charset=UTF-8',\n          'Cache-Control': 'no-cache',\n          'Content-Length': data.length.toString()\n        });\n        res.end(data);\n      } else if (req.method === 'POST' || req.method === 'PUT') {\n        try {\n          yield (0, _JsInspector().openJsInspector)(app);\n        } catch (error) {\n          var _error$message;\n          console.error(_chalk().default.red('Error launching JS inspector: ' + ((_error$message = error === null || error === void 0 ? void 0 : error.message) !== null && _error$message !== void 0 ? _error$message : 'Unknown error occurred')));\n          res.writeHead(500);\n          res.end();\n          return;\n        }\n        res.end();\n      } else {\n        res.writeHead(405);\n      }\n    });\n    return function (_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}\nfunction getServerBase(req) {\n  var scheme = req.socket instanceof _tls().TLSSocket && req.socket.encrypted === true ? 'https' : 'http';\n  var _req$socket = req.socket,\n    localAddress = _req$socket.localAddress,\n    localPort = _req$socket.localPort;\n  var address = localAddress && _net().default.isIPv6(localAddress) ? `[${localAddress}]` : localAddress;\n  return `${scheme}:${address}:${localPort}`;\n}","map":{"version":3,"names":["_chalk","data","_interopRequireDefault","require","_net","_tls","_url","_JsInspector","obj","__esModule","default","createJsInspectorMiddleware","_ref","_asyncToGenerator","req","res","next","_req$url","_url$URL","URL","url","getServerBase","origin","searchParams","applicationId","get","writeHead","end","app","queryInspectorAppAsync","console","warn","yellow","method","JSON","stringify","length","toString","openJsInspector","error","_error$message","red","message","_x","_x2","_x3","apply","arguments","scheme","socket","TLSSocket","encrypted","_req$socket","localAddress","localPort","address","isIPv6"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\dev-server\\src\\middleware\\createJsInspectorMiddleware.ts"],"sourcesContent":["import chalk from 'chalk';\nimport type { NextHandleFunction } from 'connect';\nimport type { IncomingMessage, ServerResponse } from 'http';\nimport net from 'net';\nimport { TLSSocket } from 'tls';\nimport { URL } from 'url';\n\nimport { openJsInspector, queryInspectorAppAsync } from '../JsInspector';\n\nexport default function createJsInspectorMiddleware(): NextHandleFunction {\n  return async function (req: IncomingMessage, res: ServerResponse, next: (err?: Error) => void) {\n    const { origin, searchParams } = new URL(req.url ?? '/', getServerBase(req));\n    const applicationId = searchParams.get('applicationId');\n    if (!applicationId) {\n      res.writeHead(400).end('Missing applicationId');\n      return;\n    }\n\n    const app = await queryInspectorAppAsync(origin, applicationId);\n    if (!app) {\n      res.writeHead(404).end('Unable to find inspector target from metro-inspector-proxy');\n      console.warn(\n        chalk.yellow(\n          'No compatible apps connected. JavaScript Debugging can only be used with the Hermes engine.'\n        )\n      );\n      return;\n    }\n\n    if (req.method === 'GET') {\n      const data = JSON.stringify(app);\n      res.writeHead(200, {\n        'Content-Type': 'application/json; charset=UTF-8',\n        'Cache-Control': 'no-cache',\n        'Content-Length': data.length.toString(),\n      });\n      res.end(data);\n    } else if (req.method === 'POST' || req.method === 'PUT') {\n      try {\n        await openJsInspector(app);\n      } catch (error: any) {\n        // abort(Error: Command failed: osascript -e POSIX path of (path to application \"google chrome\")\n        // 15:50: execution error: Google Chrome got an error: Application isnâ€™t running. (-600)\n\n        console.error(\n          chalk.red('Error launching JS inspector: ' + (error?.message ?? 'Unknown error occurred'))\n        );\n        res.writeHead(500);\n        res.end();\n        return;\n      }\n      res.end();\n    } else {\n      res.writeHead(405);\n    }\n  };\n}\n\nfunction getServerBase(req: IncomingMessage): string {\n  const scheme =\n    req.socket instanceof TLSSocket && req.socket.encrypted === true ? 'https' : 'http';\n  const { localAddress, localPort } = req.socket;\n  const address = localAddress && net.isIPv6(localAddress) ? `[${localAddress}]` : localAddress;\n  return `${scheme}:${address}:${localPort}`;\n}\n"],"mappings":";;;;;;;AAAA,SAAAA,OAAA;EAAA,IAAAC,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAH,MAAA,YAAAA,OAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAGA,SAAAG,KAAA;EAAA,IAAAH,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAC,IAAA,YAAAA,KAAA;IAAA,OAAAH,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAI,KAAA;EAAA,IAAAJ,IAAA,GAAAE,OAAA;EAAAE,IAAA,YAAAA,KAAA;IAAA,OAAAJ,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAK,KAAA;EAAA,IAAAL,IAAA,GAAAE,OAAA;EAAAG,IAAA,YAAAA,KAAA;IAAA,OAAAL,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAEA,SAAAM,aAAA;EAAA,IAAAN,IAAA,GAAAE,OAAA;EAAAI,YAAA,YAAAA,aAAA;IAAA,OAAAN,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAAyE,SAAAC,uBAAAM,GAAA;EAAA,OAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA;IAAAE,OAAA,EAAAF;EAAA;AAAA;AAE1D,SAASG,2BAA2BA,CAAA,EAAuB;EACxE;IAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAO,WAAgBC,GAAoB,EAAEC,GAAmB,EAAEC,IAA2B,EAAE;MAAA,IAAAC,QAAA;MAC7F,IAAAC,QAAA,GAAiC,KAAIZ,IAAA,GAAAa,GAAG,GAAAF,QAAA,GAACH,GAAG,CAACM,GAAG,cAAAH,QAAA,cAAAA,QAAA,GAAI,GAAG,EAAEI,aAAa,CAACP,GAAG,CAAC,CAAC;QAApEQ,MAAM,GAAAJ,QAAA,CAANI,MAAM;QAAEC,YAAA,GAAAL,QAAA,CAAAK,YAAA;MAChB,IAAMC,aAAa,GAAGD,YAAY,CAACE,GAAG,CAAC,eAAe,CAAC;MACvD,IAAI,CAACD,aAAa,EAAE;QAClBT,GAAG,CAACW,SAAS,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,uBAAuB,CAAC;QAC/C;MACF;MAEA,IAAMC,GAAG,SAAS,IAAArB,YAAA,GAAAsB,sBAAsB,EAACP,MAAM,EAAEE,aAAa,CAAC;MAC/D,IAAI,CAACI,GAAG,EAAE;QACRb,GAAG,CAACW,SAAS,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,4DAA4D,CAAC;QACpFG,OAAO,CAACC,IAAI,CACV/B,MAAA,GAAAU,OAAK,CAACsB,MAAM,CACV,6FAA6F,CAC9F,CACF;QACD;MACF;MAEA,IAAIlB,GAAG,CAACmB,MAAM,KAAK,KAAK,EAAE;QACxB,IAAMhC,IAAI,GAAGiC,IAAI,CAACC,SAAS,CAACP,GAAG,CAAC;QAChCb,GAAG,CAACW,SAAS,CAAC,GAAG,EAAE;UACjB,cAAc,EAAE,iCAAiC;UACjD,eAAe,EAAE,UAAU;UAC3B,gBAAgB,EAAEzB,IAAI,CAACmC,MAAM,CAACC,QAAQ;QACxC,CAAC,CAAC;QACFtB,GAAG,CAACY,GAAG,CAAC1B,IAAI,CAAC;MACf,CAAC,MAAM,IAAIa,GAAG,CAACmB,MAAM,KAAK,MAAM,IAAInB,GAAG,CAACmB,MAAM,KAAK,KAAK,EAAE;QACxD,IAAI;UACF,MAAM,IAAA1B,YAAA,GAAA+B,eAAe,EAACV,GAAG,CAAC;QAC5B,CAAC,CAAC,OAAOW,KAAU,EAAE;UAAA,IAAAC,cAAA;UAInBV,OAAO,CAACS,KAAK,CACXvC,MAAA,GAAAU,OAAK,CAAC+B,GAAG,CAAC,gCAAgC,KAAAD,cAAA,GAAID,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEG,OAAO,cAAAF,cAAA,cAAAA,cAAA,GAAI,wBAAwB,CAAC,CAAC,CAC3F;UACDzB,GAAG,CAACW,SAAS,CAAC,GAAG,CAAC;UAClBX,GAAG,CAACY,GAAG,EAAE;UACT;QACF;QACAZ,GAAG,CAACY,GAAG,EAAE;MACX,CAAC,MAAM;QACLZ,GAAG,CAACW,SAAS,CAAC,GAAG,CAAC;MACpB;IACF,CAAC;IAAA,iBAAAiB,EAAA,EAAAC,GAAA,EAAAC,GAAA;MAAA,OAAAjC,IAAA,CAAAkC,KAAA,OAAAC,SAAA;IAAA;EAAA;AACH;AAEA,SAAS1B,aAAaA,CAACP,GAAoB,EAAU;EACnD,IAAMkC,MAAM,GACVlC,GAAG,CAACmC,MAAM,YAAY5C,IAAA,GAAA6C,SAAS,IAAIpC,GAAG,CAACmC,MAAM,CAACE,SAAS,KAAK,IAAI,GAAG,OAAO,GAAG,MAAM;EACrF,IAAAC,WAAA,GAAoCtC,GAAG,CAACmC,MAAM;IAAtCI,YAAY,GAAAD,WAAA,CAAZC,YAAY;IAAEC,SAAA,GAAAF,WAAA,CAAAE,SAAA;EACtB,IAAMC,OAAO,GAAGF,YAAY,IAAIjD,IAAA,GAAAM,OAAG,CAAC8C,MAAM,CAACH,YAAY,CAAC,GAAI,IAAGA,YAAa,GAAE,GAAGA,YAAY;EAC7F,OAAQ,GAAEL,MAAO,IAAGO,OAAQ,IAAGD,SAAU,EAAC;AAC5C"},"metadata":{},"sourceType":"script","externalDependencies":[]}