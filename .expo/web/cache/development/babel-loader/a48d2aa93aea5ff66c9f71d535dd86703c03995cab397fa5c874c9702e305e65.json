{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _child_process() {\n  var data = require(\"child_process\");\n  _child_process = function _child_process() {\n    return data;\n  };\n  return data;\n}\nfunction parseDevicesResult(result) {\n  if (!result) {\n    return [];\n  }\n  var devices = [];\n  var lines = result.trim().split(/\\r?\\n/);\n  for (var i = 0; i < lines.length; i++) {\n    var words = lines[i].split(/[ ,\\t]+/).filter(function (w) {\n      return w !== '';\n    });\n    if (words[1] === 'device') {\n      devices.push(words[0]);\n    }\n  }\n  return devices;\n}\nfunction getDevices(adbPath) {\n  try {\n    var devicesResult = (0, _child_process().execSync)(`\"${adbPath}\" devices`);\n    return parseDevicesResult(devicesResult.toString());\n  } catch (e) {\n    return [];\n  }\n}\nfunction getAvailableCPUs(adbPath, device) {\n  try {\n    var baseArgs = ['-s', device, 'shell', 'getprop'];\n    var cpus = (0, _child_process().execFileSync)(adbPath, baseArgs.concat(['ro.product.cpu.abilist'])).toString();\n    if (!cpus || cpus.trim().length === 0) {\n      cpus = (0, _child_process().execFileSync)(adbPath, baseArgs.concat(['ro.product.cpu.abi'])).toString();\n    }\n    return (cpus || '').trim().split(',');\n  } catch (e) {\n    return [];\n  }\n}\nfunction getCPU(adbPath, device) {\n  try {\n    var cpus = (0, _child_process().execFileSync)(adbPath, ['-s', device, 'shell', 'getprop', 'ro.product.cpu.abi']).toString().trim();\n    return cpus.length > 0 ? cpus : null;\n  } catch (e) {\n    return null;\n  }\n}\nvar _default = {\n  getDevices: getDevices,\n  getAvailableCPUs: getAvailableCPUs,\n  getCPU: getCPU\n};\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_child_process","data","require","parseDevicesResult","result","devices","lines","trim","split","i","length","words","filter","w","push","getDevices","adbPath","devicesResult","execSync","toString","e","getAvailableCPUs","device","baseArgs","cpus","execFileSync","concat","getCPU","_default"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/adb.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _child_process() {\n  const data = require(\"child_process\");\n  _child_process = function () {\n    return data;\n  };\n  return data;\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Parses the output of the 'adb devices' command\n */\nfunction parseDevicesResult(result) {\n  if (!result) {\n    return [];\n  }\n  const devices = [];\n  const lines = result.trim().split(/\\r?\\n/);\n  for (let i = 0; i < lines.length; i++) {\n    const words = lines[i].split(/[ ,\\t]+/).filter(w => w !== '');\n    if (words[1] === 'device') {\n      devices.push(words[0]);\n    }\n  }\n  return devices;\n}\n\n/**\n * Executes the commands needed to get a list of devices from ADB\n */\nfunction getDevices(adbPath) {\n  try {\n    const devicesResult = (0, _child_process().execSync)(`\"${adbPath}\" devices`);\n    return parseDevicesResult(devicesResult.toString());\n  } catch (e) {\n    return [];\n  }\n}\n\n/**\n * Gets available CPUs of devices from ADB\n */\nfunction getAvailableCPUs(adbPath, device) {\n  try {\n    const baseArgs = ['-s', device, 'shell', 'getprop'];\n    let cpus = (0, _child_process().execFileSync)(adbPath, baseArgs.concat(['ro.product.cpu.abilist'])).toString();\n\n    // pre-Lollipop\n    if (!cpus || cpus.trim().length === 0) {\n      cpus = (0, _child_process().execFileSync)(adbPath, baseArgs.concat(['ro.product.cpu.abi'])).toString();\n    }\n    return (cpus || '').trim().split(',');\n  } catch (e) {\n    return [];\n  }\n}\n\n/**\n * Gets the CPU architecture of a device from ADB\n */\nfunction getCPU(adbPath, device) {\n  try {\n    const cpus = (0, _child_process().execFileSync)(adbPath, ['-s', device, 'shell', 'getprop', 'ro.product.cpu.abi']).toString().trim();\n    return cpus.length > 0 ? cpus : null;\n  } catch (e) {\n    return null;\n  }\n}\nvar _default = {\n  getDevices,\n  getAvailableCPUs,\n  getCPU\n};\nexports.default = _default;\n\n//# sourceMappingURL=adb.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}