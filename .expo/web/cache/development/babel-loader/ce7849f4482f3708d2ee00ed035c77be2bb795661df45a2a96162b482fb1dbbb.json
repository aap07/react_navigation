{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hasPackageJsonDependencyListChangedAsync = hasPackageJsonDependencyListChangedAsync;\nexports.installCocoaPodsAsync = installCocoaPodsAsync;\nexports.maybePromptToSyncPodsAsync = maybePromptToSyncPodsAsync;\nvar _config = require(\"@expo/config\");\nvar _jsonFile = _interopRequireDefault(require(\"@expo/json-file\"));\nvar PackageManager = _interopRequireWildcard(require(\"@expo/package-manager\"));\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _fs = _interopRequireDefault(require(\"fs\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar Log = _interopRequireWildcard(require(\"../log\"));\nvar _updatePackageJson = require(\"../prebuild/updatePackageJson\");\nvar _dir = require(\"./dir\");\nvar _env = require(\"./env\");\nvar _errors = require(\"./errors\");\nvar _ora = require(\"./ora\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar PROJECT_PREBUILD_SETTINGS = \".expo/prebuild\";\nvar CACHED_PACKAGE_JSON = \"cached-packages.json\";\nfunction getTempPrebuildFolder(projectRoot) {\n  return _path.default.join(projectRoot, PROJECT_PREBUILD_SETTINGS);\n}\nfunction hasNewDependenciesSinceLastBuild(projectRoot, packageChecksums) {\n  var templateDirectory = getTempPrebuildFolder(projectRoot);\n  var tempPkgJsonPath = _path.default.join(templateDirectory, CACHED_PACKAGE_JSON);\n  if (!_fs.default.existsSync(tempPkgJsonPath)) {\n    return true;\n  }\n  var _jsonFile$default$rea = _jsonFile.default.read(tempPkgJsonPath),\n    dependencies = _jsonFile$default$rea.dependencies,\n    devDependencies = _jsonFile$default$rea.devDependencies;\n  var hasNewDependencies = packageChecksums.dependencies !== dependencies;\n  var hasNewDevDependencies = packageChecksums.devDependencies !== devDependencies;\n  return hasNewDependencies || hasNewDevDependencies;\n}\nfunction createPackageChecksums(pkg) {\n  return {\n    dependencies: (0, _updatePackageJson).hashForDependencyMap(pkg.dependencies || {}),\n    devDependencies: (0, _updatePackageJson).hashForDependencyMap(pkg.devDependencies || {})\n  };\n}\nfunction hasPackageJsonDependencyListChangedAsync(_x) {\n  return _hasPackageJsonDependencyListChangedAsync.apply(this, arguments);\n}\nfunction _hasPackageJsonDependencyListChangedAsync() {\n  _hasPackageJsonDependencyListChangedAsync = _asyncToGenerator(function* (projectRoot) {\n    var pkg = (0, _config).getPackageJson(projectRoot);\n    var packages = createPackageChecksums(pkg);\n    var hasNewDependencies = hasNewDependenciesSinceLastBuild(projectRoot, packages);\n    yield (0, _dir).ensureDirectoryAsync(getTempPrebuildFolder(projectRoot));\n    var templateDirectory = _path.default.join(getTempPrebuildFolder(projectRoot), CACHED_PACKAGE_JSON);\n    yield _jsonFile.default.writeAsync(templateDirectory, packages);\n    return hasNewDependencies;\n  });\n  return _hasPackageJsonDependencyListChangedAsync.apply(this, arguments);\n}\nfunction installCocoaPodsAsync(_x2) {\n  return _installCocoaPodsAsync.apply(this, arguments);\n}\nfunction _installCocoaPodsAsync() {\n  _installCocoaPodsAsync = _asyncToGenerator(function* (projectRoot) {\n    var step = (0, _ora).logNewSection(\"Installing CocoaPods...\");\n    if (process.platform !== \"darwin\") {\n      step.succeed(\"Skipped installing CocoaPods because operating system is not on macOS.\");\n      return false;\n    }\n    var packageManager = new PackageManager.CocoaPodsPackageManager({\n      cwd: _path.default.join(projectRoot, \"ios\"),\n      silent: !(_env.env.EXPO_DEBUG || _env.env.CI)\n    });\n    if (!(yield packageManager.isCLIInstalledAsync())) {\n      try {\n        step.text = \"CocoaPods CLI not found in your PATH, installing it now.\";\n        step.stopAndPersist();\n        yield PackageManager.CocoaPodsPackageManager.installCLIAsync({\n          nonInteractive: true,\n          spawnOptions: _objectSpread(_objectSpread({}, packageManager.options), {}, {\n            stdio: [\"inherit\", \"inherit\", \"pipe\"]\n          })\n        });\n        step.succeed(\"Installed CocoaPods CLI.\");\n        step = (0, _ora).logNewSection(\"Running `pod install` in the `ios` directory.\");\n      } catch (error) {\n        step.stopAndPersist({\n          symbol: \"\\u26A0\\uFE0F \",\n          text: _chalk.default.red(\"Unable to install the CocoaPods CLI.\")\n        });\n        if (error instanceof PackageManager.CocoaPodsError) {\n          Log.log(error.message);\n        } else {\n          Log.log(`Unknown error: ${error.message}`);\n        }\n        return false;\n      }\n    }\n    try {\n      yield packageManager.installAsync({\n        spinner: step\n      });\n      yield hasPackageJsonDependencyListChangedAsync(projectRoot).catch(function () {\n        return null;\n      });\n      step.succeed(\"Installed pods and initialized Xcode workspace.\");\n      return true;\n    } catch (error) {\n      step.stopAndPersist({\n        symbol: \"\\u26A0\\uFE0F \",\n        text: _chalk.default.red(\"Something went wrong running `pod install` in the `ios` directory.\")\n      });\n      if (error instanceof PackageManager.CocoaPodsError) {\n        Log.log(error.message);\n      } else {\n        Log.log(`Unknown error: ${error.message}`);\n      }\n      return false;\n    }\n  });\n  return _installCocoaPodsAsync.apply(this, arguments);\n}\nfunction doesProjectUseCocoaPods(projectRoot) {\n  return _fs.default.existsSync(_path.default.join(projectRoot, \"ios\", \"Podfile\"));\n}\nfunction isLockfileCreated(projectRoot) {\n  var podfileLockPath = _path.default.join(projectRoot, \"ios\", \"Podfile.lock\");\n  return _fs.default.existsSync(podfileLockPath);\n}\nfunction isPodFolderCreated(projectRoot) {\n  var podFolderPath = _path.default.join(projectRoot, \"ios\", \"Pods\");\n  return _fs.default.existsSync(podFolderPath);\n}\nfunction maybePromptToSyncPodsAsync(_x3) {\n  return _maybePromptToSyncPodsAsync.apply(this, arguments);\n}\nfunction _maybePromptToSyncPodsAsync() {\n  _maybePromptToSyncPodsAsync = _asyncToGenerator(function* (projectRoot) {\n    if (!doesProjectUseCocoaPods(projectRoot)) {\n      return;\n    }\n    if (!isLockfileCreated(projectRoot) || !isPodFolderCreated(projectRoot)) {\n      if (!(yield installCocoaPodsAsync(projectRoot))) {\n        throw new _errors.AbortCommandError();\n      }\n      return;\n    }\n    if (!(yield hasPackageJsonDependencyListChangedAsync(projectRoot))) {\n      return;\n    }\n    yield promptToInstallPodsAsync(projectRoot, []);\n  });\n  return _maybePromptToSyncPodsAsync.apply(this, arguments);\n}\nfunction promptToInstallPodsAsync(_x4, _x5) {\n  return _promptToInstallPodsAsync.apply(this, arguments);\n}\nfunction _promptToInstallPodsAsync() {\n  _promptToInstallPodsAsync = _asyncToGenerator(function* (projectRoot, missingPods) {\n    if (missingPods == null ? void 0 : missingPods.length) {\n      Log.log(`Could not find the following native modules: ${missingPods.map(function (pod) {\n        return _chalk.default.bold(pod);\n      }).join(\", \")}. Did you forget to run \"${_chalk.default.bold(\"pod install\")}\" ?`);\n    }\n    try {\n      if (!(yield installCocoaPodsAsync(projectRoot))) {\n        throw new _errors.AbortCommandError();\n      }\n    } catch (error) {\n      yield _fs.default.promises.rm(_path.default.join(getTempPrebuildFolder(projectRoot), CACHED_PACKAGE_JSON), {\n        recursive: true,\n        force: true\n      });\n      throw error;\n    }\n  });\n  return _promptToInstallPodsAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_defineProperty","require","_asyncToGenerator","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","hasPackageJsonDependencyListChangedAsync","installCocoaPodsAsync","maybePromptToSyncPodsAsync","_config","_jsonFile","_interopRequireDefault","PackageManager","_interopRequireWildcard","_chalk","_fs","_path","Log","_updatePackageJson","_dir","_env","_errors","_ora","PROJECT_PREBUILD_SETTINGS","CACHED_PACKAGE_JSON","getTempPrebuildFolder","projectRoot","default","join","hasNewDependenciesSinceLastBuild","packageChecksums","templateDirectory","tempPkgJsonPath","existsSync","_jsonFile$default$rea","read","dependencies","devDependencies","hasNewDependencies","hasNewDevDependencies","createPackageChecksums","pkg","hashForDependencyMap","_x","_hasPackageJsonDependencyListChangedAsync","getPackageJson","packages","ensureDirectoryAsync","writeAsync","_x2","_installCocoaPodsAsync","step","logNewSection","process","platform","succeed","packageManager","CocoaPodsPackageManager","cwd","silent","env","EXPO_DEBUG","CI","isCLIInstalledAsync","text","stopAndPersist","installCLIAsync","nonInteractive","spawnOptions","options","stdio","error","symbol","red","CocoaPodsError","log","message","installAsync","spinner","catch","doesProjectUseCocoaPods","isLockfileCreated","podfileLockPath","isPodFolderCreated","podFolderPath","_x3","_maybePromptToSyncPodsAsync","AbortCommandError","promptToInstallPodsAsync","_x4","_x5","_promptToInstallPodsAsync","missingPods","map","pod","bold","promises","rm","recursive","force"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\utils\\cocoapods.ts"],"sourcesContent":["import { getPackageJson, PackageJSONConfig } from '@expo/config';\nimport JsonFile from '@expo/json-file';\nimport * as PackageManager from '@expo/package-manager';\nimport chalk from 'chalk';\nimport fs from 'fs';\nimport path from 'path';\n\nimport * as Log from '../log';\nimport { hashForDependencyMap } from '../prebuild/updatePackageJson';\nimport { ensureDirectoryAsync } from './dir';\nimport { env } from './env';\nimport { AbortCommandError } from './errors';\nimport { logNewSection } from './ora';\n\ntype PackageChecksums = {\n  /** checksum for the `package.json` dependency object. */\n  dependencies: string;\n  /** checksum for the `package.json` devDependency object. */\n  devDependencies: string;\n};\n\nconst PROJECT_PREBUILD_SETTINGS = '.expo/prebuild';\nconst CACHED_PACKAGE_JSON = 'cached-packages.json';\n\nfunction getTempPrebuildFolder(projectRoot: string): string {\n  return path.join(projectRoot, PROJECT_PREBUILD_SETTINGS);\n}\n\nfunction hasNewDependenciesSinceLastBuild(\n  projectRoot: string,\n  packageChecksums: PackageChecksums\n): boolean {\n  // TODO: Maybe comparing lock files would be better...\n  const templateDirectory = getTempPrebuildFolder(projectRoot);\n  const tempPkgJsonPath = path.join(templateDirectory, CACHED_PACKAGE_JSON);\n  if (!fs.existsSync(tempPkgJsonPath)) {\n    return true;\n  }\n  const { dependencies, devDependencies } = JsonFile.read(tempPkgJsonPath);\n  // Only change the dependencies if the normalized hash changes, this helps to reduce meaningless changes.\n  const hasNewDependencies = packageChecksums.dependencies !== dependencies;\n  const hasNewDevDependencies = packageChecksums.devDependencies !== devDependencies;\n\n  return hasNewDependencies || hasNewDevDependencies;\n}\n\nfunction createPackageChecksums(pkg: PackageJSONConfig): PackageChecksums {\n  return {\n    dependencies: hashForDependencyMap(pkg.dependencies || {}),\n    devDependencies: hashForDependencyMap(pkg.devDependencies || {}),\n  };\n}\n\n/** @returns `true` if the package.json dependency hash does not match the cached hash from the last run. */\nexport async function hasPackageJsonDependencyListChangedAsync(\n  projectRoot: string\n): Promise<boolean> {\n  const pkg = getPackageJson(projectRoot);\n\n  const packages = createPackageChecksums(pkg);\n  const hasNewDependencies = hasNewDependenciesSinceLastBuild(projectRoot, packages);\n\n  // Cache package.json\n  await ensureDirectoryAsync(getTempPrebuildFolder(projectRoot));\n  const templateDirectory = path.join(getTempPrebuildFolder(projectRoot), CACHED_PACKAGE_JSON);\n  await JsonFile.writeAsync(templateDirectory, packages);\n\n  return hasNewDependencies;\n}\n\nexport async function installCocoaPodsAsync(projectRoot: string): Promise<boolean> {\n  let step = logNewSection('Installing CocoaPods...');\n  if (process.platform !== 'darwin') {\n    step.succeed('Skipped installing CocoaPods because operating system is not on macOS.');\n    return false;\n  }\n\n  const packageManager = new PackageManager.CocoaPodsPackageManager({\n    cwd: path.join(projectRoot, 'ios'),\n    silent: !(env.EXPO_DEBUG || env.CI),\n  });\n\n  if (!(await packageManager.isCLIInstalledAsync())) {\n    try {\n      // prompt user -- do you want to install cocoapods right now?\n      step.text = 'CocoaPods CLI not found in your PATH, installing it now.';\n      step.stopAndPersist();\n      await PackageManager.CocoaPodsPackageManager.installCLIAsync({\n        nonInteractive: true,\n        spawnOptions: {\n          ...packageManager.options,\n          // Don't silence this part\n          stdio: ['inherit', 'inherit', 'pipe'],\n        },\n      });\n      step.succeed('Installed CocoaPods CLI.');\n      step = logNewSection('Running `pod install` in the `ios` directory.');\n    } catch (error: any) {\n      step.stopAndPersist({\n        symbol: '⚠️ ',\n        text: chalk.red('Unable to install the CocoaPods CLI.'),\n      });\n      if (error instanceof PackageManager.CocoaPodsError) {\n        Log.log(error.message);\n      } else {\n        Log.log(`Unknown error: ${error.message}`);\n      }\n      return false;\n    }\n  }\n\n  try {\n    await packageManager.installAsync({ spinner: step });\n    // Create cached list for later\n    await hasPackageJsonDependencyListChangedAsync(projectRoot).catch(() => null);\n    step.succeed('Installed pods and initialized Xcode workspace.');\n    return true;\n  } catch (error: any) {\n    step.stopAndPersist({\n      symbol: '⚠️ ',\n      text: chalk.red('Something went wrong running `pod install` in the `ios` directory.'),\n    });\n    if (error instanceof PackageManager.CocoaPodsError) {\n      Log.log(error.message);\n    } else {\n      Log.log(`Unknown error: ${error.message}`);\n    }\n    return false;\n  }\n}\n\nfunction doesProjectUseCocoaPods(projectRoot: string): boolean {\n  return fs.existsSync(path.join(projectRoot, 'ios', 'Podfile'));\n}\n\nfunction isLockfileCreated(projectRoot: string): boolean {\n  const podfileLockPath = path.join(projectRoot, 'ios', 'Podfile.lock');\n  return fs.existsSync(podfileLockPath);\n}\n\nfunction isPodFolderCreated(projectRoot: string): boolean {\n  const podFolderPath = path.join(projectRoot, 'ios', 'Pods');\n  return fs.existsSync(podFolderPath);\n}\n\n// TODO: Same process but with app.config changes + default plugins.\n// This will ensure the user is prompted for extra setup.\nexport async function maybePromptToSyncPodsAsync(projectRoot: string) {\n  if (!doesProjectUseCocoaPods(projectRoot)) {\n    // Project does not use CocoaPods\n    return;\n  }\n  if (!isLockfileCreated(projectRoot) || !isPodFolderCreated(projectRoot)) {\n    if (!(await installCocoaPodsAsync(projectRoot))) {\n      throw new AbortCommandError();\n    }\n    return;\n  }\n\n  // Getting autolinked packages can be heavy, optimize around checking every time.\n  if (!(await hasPackageJsonDependencyListChangedAsync(projectRoot))) {\n    return;\n  }\n\n  await promptToInstallPodsAsync(projectRoot, []);\n}\n\nasync function promptToInstallPodsAsync(projectRoot: string, missingPods?: string[]) {\n  if (missingPods?.length) {\n    Log.log(\n      `Could not find the following native modules: ${missingPods\n        .map((pod) => chalk.bold(pod))\n        .join(', ')}. Did you forget to run \"${chalk.bold('pod install')}\" ?`\n    );\n  }\n\n  try {\n    if (!(await installCocoaPodsAsync(projectRoot))) {\n      throw new AbortCommandError();\n    }\n  } catch (error) {\n    await fs.promises.rm(path.join(getTempPrebuildFolder(projectRoot), CACHED_PACKAGE_JSON), {\n      recursive: true,\n      force: true,\n    });\n    throw error;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}