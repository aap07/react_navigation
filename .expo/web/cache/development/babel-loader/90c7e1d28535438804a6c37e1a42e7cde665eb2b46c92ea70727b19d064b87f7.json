{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.wrapFetchWithOffline = wrapFetchWithOffline;\nvar _env = require(\"../../utils/env\");\nvar debug = require(\"debug\")(\"expo:api:fetch:offline\");\nfunction wrapFetchWithOffline(fetchFunction) {\n  return function fetchWithOffline(url) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (_env.env.EXPO_OFFLINE) {\n      debug(\"Skipping network request: \" + url);\n      options.timeout = 1;\n    }\n    return fetchFunction(url, options);\n  };\n}","map":{"version":3,"names":["wrapFetchWithOffline","_env","require","debug","fetchFunction","fetchWithOffline","url","options","arguments","length","undefined","env","EXPO_OFFLINE","timeout"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\api\\rest\\wrapFetchWithOffline.ts"],"sourcesContent":["import { env } from '../../utils/env';\nimport { FetchLike } from './client.types';\n\nconst debug = require('debug')('expo:api:fetch:offline') as typeof console.log;\n\n/** Wrap fetch with support for `EXPO_OFFLINE` to disable network requests. */\nexport function wrapFetchWithOffline(fetchFunction: FetchLike): FetchLike {\n  // NOTE(EvanBacon): DO NOT RETURN AN ASYNC WRAPPER. THIS BREAKS LOADING INDICATORS.\n  return function fetchWithOffline(url, options = {}) {\n    if (env.EXPO_OFFLINE) {\n      debug('Skipping network request: ' + url);\n      options.timeout = 1;\n    }\n    return fetchFunction(url, options);\n  };\n}\n"],"mappings":"AAAA;;;;;QAMgBA,oBAAoB,GAApBA,oBAAoB;AANhB,IAAAC,IAAiB,GAAAC,OAAA;AAGrC,IAAMC,KAAK,GAAGD,OAAO,CAAC,OAAO,CAAC,CAAC,wBAAwB,CAAC;AAGjD,SAASF,oBAAoBA,CAACI,aAAwB,EAAa;EAExE,OAAO,SAASC,gBAAgBA,CAACC,GAAG,EAAgB;IAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IAChD,IAAIP,IAAG,CAAAU,GAAA,CAACC,YAAY,EAAE;MACpBT,KAAK,CAAC,4BAA4B,GAAGG,GAAG,CAAC;MACzCC,OAAO,CAACM,OAAO,GAAG,CAAC;;IAErB,OAAOT,aAAa,CAACE,GAAG,EAAEC,OAAO,CAAC;GACnC"},"metadata":{},"sourceType":"script","externalDependencies":[]}