{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.startInterfaceAsync = startInterfaceAsync;\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar Log = _interopRequireWildcard(require(\"../../log\"));\nvar _editor = require(\"../../utils/editor\");\nvar _errors = require(\"../../utils/errors\");\nvar _ora = require(\"../../utils/ora\");\nvar _progress = require(\"../../utils/progress\");\nvar _prompts = require(\"../../utils/prompts\");\nvar _webSupportProjectPrerequisite = require(\"../doctor/web/WebSupportProjectPrerequisite\");\nvar _keyPressHandler = require(\"./KeyPressHandler\");\nvar _commandsTable = require(\"./commandsTable\");\nvar _interactiveActions = require(\"./interactiveActions\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar debug = require(\"debug\")(\"expo:start:interface:startInterface\");\nvar CTRL_C = \"\\x03\";\nvar CTRL_D = \"\\x04\";\nvar CTRL_L = \"\\f\";\nvar PLATFORM_SETTINGS = {\n  android: {\n    name: \"Android\",\n    key: \"android\",\n    launchTarget: \"emulator\"\n  },\n  ios: {\n    name: \"iOS\",\n    key: \"ios\",\n    launchTarget: \"simulator\"\n  }\n};\nfunction startInterfaceAsync(_x, _x2) {\n  return _startInterfaceAsync.apply(this, arguments);\n}\nfunction _startInterfaceAsync() {\n  _startInterfaceAsync = _asyncToGenerator(function* (devServerManager, options) {\n    var ref2;\n    var actions = new _interactiveActions.DevServerManagerActions(devServerManager);\n    var isWebSocketsEnabled = (ref2 = devServerManager.getDefaultDevServer()) == null ? void 0 : ref2.isTargetingNative();\n    var usageOptions = _objectSpread({\n      isWebSocketsEnabled: isWebSocketsEnabled,\n      devClient: devServerManager.options.devClient\n    }, options);\n    actions.printDevServerInfo(usageOptions);\n    var onPressAsync = function () {\n      var _ref = _asyncToGenerator(function* (key) {\n        switch (key) {\n          case CTRL_C:\n          case CTRL_D:\n            {\n              (0, _prompts).pauseInteractions();\n              var spinners = (0, _ora).getAllSpinners();\n              spinners.forEach(function (spinner) {\n                spinner.fail();\n              });\n              var currentProgress = (0, _progress).getProgressBar();\n              if (currentProgress) {\n                currentProgress.terminate();\n                (0, _progress).setProgressBar(null);\n              }\n              var spinner1 = (0, _ora).ora({\n                text: \"Stopping server\",\n                color: \"white\"\n              }).start();\n              try {\n                yield devServerManager.stopAsync();\n                spinner1.stopAndPersist({\n                  text: \"Stopped server\",\n                  symbol: `\\u203A`\n                });\n                process.emit(\"SIGINT\");\n                process.exit();\n              } catch (error) {\n                spinner1.fail(\"Failed to stop server\");\n                throw error;\n              }\n              break;\n            }\n          case CTRL_L:\n            return Log.clear();\n          case \"?\":\n            return (0, _commandsTable).printUsage(usageOptions, {\n              verbose: true\n            });\n        }\n        if (isWebSocketsEnabled) {\n          switch (key) {\n            case \"m\":\n              return actions.toggleDevMenu();\n            case \"M\":\n              return actions.openMoreToolsAsync();\n          }\n        }\n        var _options$platforms = options.platforms,\n          platforms = _options$platforms === void 0 ? [\"ios\", \"android\", \"web\"] : _options$platforms;\n        if ([\"i\", \"a\"].includes(key.toLowerCase())) {\n          var platform = key.toLowerCase() === \"i\" ? \"ios\" : \"android\";\n          var shouldPrompt = [\"I\", \"A\"].includes(key);\n          if (shouldPrompt) {\n            Log.clear();\n          }\n          var server = devServerManager.getDefaultDevServer();\n          var settings = PLATFORM_SETTINGS[platform];\n          Log.log(`${_commandsTable.BLT} Opening on ${settings.name}...`);\n          if (server.isTargetingNative() && !platforms.includes(settings.key)) {\n            Log.warn(_chalk.default`${settings.name} is disabled, enable it by adding {bold ${settings.key}} to the platforms array in your app.json or app.config.js`);\n          } else {\n            try {\n              yield server.openPlatformAsync(settings.launchTarget, {\n                shouldPrompt: shouldPrompt\n              });\n              (0, _commandsTable).printHelp();\n            } catch (error) {\n              if (!(error instanceof _errors.AbortCommandError)) {\n                Log.exception(error);\n              }\n            }\n          }\n          return;\n        }\n        switch (key) {\n          case \"s\":\n            {\n              Log.clear();\n              if (yield devServerManager.toggleRuntimeMode()) {\n                usageOptions.devClient = devServerManager.options.devClient;\n                return actions.printDevServerInfo(usageOptions);\n              }\n              break;\n            }\n          case \"w\":\n            {\n              try {\n                yield devServerManager.ensureProjectPrerequisiteAsync(_webSupportProjectPrerequisite.WebSupportProjectPrerequisite);\n                if (!platforms.includes(\"web\")) {\n                  var ref;\n                  platforms.push(\"web\");\n                  (ref = options.platforms) == null ? void 0 : ref.push(\"web\");\n                }\n              } catch (e) {\n                Log.warn(e.message);\n                break;\n              }\n              var isDisabled = !platforms.includes(\"web\");\n              if (isDisabled) {\n                debug(\"Web is disabled\");\n                break;\n              }\n              if (!devServerManager.getWebDevServer()) {\n                debug(\"Starting up webpack dev server\");\n                yield devServerManager.ensureWebDevServerRunningAsync();\n                actions.printDevServerInfo(usageOptions);\n              }\n              Log.log(`${_commandsTable.BLT} Open in the web browser...`);\n              try {\n                var ref1;\n                yield (ref1 = devServerManager.getWebDevServer()) == null ? void 0 : ref1.openPlatformAsync(\"desktop\");\n                (0, _commandsTable).printHelp();\n              } catch (error) {\n                if (!(error instanceof _errors.AbortCommandError)) {\n                  Log.exception(error);\n                }\n              }\n              break;\n            }\n          case \"c\":\n            Log.clear();\n            return actions.printDevServerInfo(usageOptions);\n          case \"j\":\n            return actions.openJsInspectorAsync();\n          case \"r\":\n            return actions.reloadApp();\n          case \"o\":\n            Log.log(`${_commandsTable.BLT} Opening the editor...`);\n            return (0, _editor).openInEditorAsync(devServerManager.projectRoot);\n        }\n      });\n      return function onPressAsync(_x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    var keyPressHandler = new _keyPressHandler.KeyPressHandler(onPressAsync);\n    var listener = keyPressHandler.createInteractionListener();\n    (0, _prompts).addInteractionListener(listener);\n    keyPressHandler.startInterceptingKeyStrokes();\n  });\n  return _startInterfaceAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_defineProperty","require","_asyncToGenerator","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","startInterfaceAsync","_chalk","_interopRequireDefault","Log","_interopRequireWildcard","_editor","_errors","_ora","_progress","_prompts","_webSupportProjectPrerequisite","_keyPressHandler","_commandsTable","_interactiveActions","debug","CTRL_C","CTRL_D","CTRL_L","PLATFORM_SETTINGS","android","name","key","launchTarget","ios","_x","_x2","_startInterfaceAsync","devServerManager","options","ref2","actions","DevServerManagerActions","isWebSocketsEnabled","getDefaultDevServer","isTargetingNative","usageOptions","devClient","printDevServerInfo","onPressAsync","_ref","pauseInteractions","spinners","getAllSpinners","spinner","fail","currentProgress","getProgressBar","terminate","setProgressBar","spinner1","ora","text","color","start","stopAsync","stopAndPersist","symbol","process","emit","exit","error","clear","printUsage","verbose","toggleDevMenu","openMoreToolsAsync","_options$platforms","platforms","includes","toLowerCase","platform","shouldPrompt","server","settings","log","BLT","warn","default","openPlatformAsync","printHelp","AbortCommandError","exception","toggleRuntimeMode","ensureProjectPrerequisiteAsync","WebSupportProjectPrerequisite","ref","message","isDisabled","getWebDevServer","ensureWebDevServerRunningAsync","ref1","openJsInspectorAsync","reloadApp","openInEditorAsync","projectRoot","_x3","keyPressHandler","KeyPressHandler","listener","createInteractionListener","addInteractionListener","startInterceptingKeyStrokes"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\interface\\startInterface.ts"],"sourcesContent":["import chalk from 'chalk';\n\nimport * as Log from '../../log';\nimport { openInEditorAsync } from '../../utils/editor';\nimport { AbortCommandError } from '../../utils/errors';\nimport { getAllSpinners, ora } from '../../utils/ora';\nimport { getProgressBar, setProgressBar } from '../../utils/progress';\nimport { addInteractionListener, pauseInteractions } from '../../utils/prompts';\nimport { WebSupportProjectPrerequisite } from '../doctor/web/WebSupportProjectPrerequisite';\nimport { DevServerManager } from '../server/DevServerManager';\nimport { KeyPressHandler } from './KeyPressHandler';\nimport { BLT, printHelp, printUsage, StartOptions } from './commandsTable';\nimport { DevServerManagerActions } from './interactiveActions';\n\nconst debug = require('debug')('expo:start:interface:startInterface') as typeof console.log;\n\nconst CTRL_C = '\\u0003';\nconst CTRL_D = '\\u0004';\nconst CTRL_L = '\\u000C';\n\nconst PLATFORM_SETTINGS: Record<\n  string,\n  { name: string; key: 'android' | 'ios'; launchTarget: 'emulator' | 'simulator' }\n> = {\n  android: {\n    name: 'Android',\n    key: 'android',\n    launchTarget: 'emulator',\n  },\n  ios: {\n    name: 'iOS',\n    key: 'ios',\n    launchTarget: 'simulator',\n  },\n};\n\nexport async function startInterfaceAsync(\n  devServerManager: DevServerManager,\n  options: Pick<StartOptions, 'devClient' | 'platforms'>\n) {\n  const actions = new DevServerManagerActions(devServerManager);\n\n  const isWebSocketsEnabled = devServerManager.getDefaultDevServer()?.isTargetingNative();\n\n  const usageOptions = {\n    isWebSocketsEnabled,\n    devClient: devServerManager.options.devClient,\n    ...options,\n  };\n\n  actions.printDevServerInfo(usageOptions);\n\n  const onPressAsync = async (key: string) => {\n    // Auxillary commands all escape.\n    switch (key) {\n      case CTRL_C:\n      case CTRL_D: {\n        // Prevent terminal UI from accepting commands while the process is closing.\n        // Without this, fast typers will close the server then start typing their\n        // next command and have a bunch of unrelated things pop up.\n        pauseInteractions();\n\n        const spinners = getAllSpinners();\n        spinners.forEach((spinner) => {\n          spinner.fail();\n        });\n\n        const currentProgress = getProgressBar();\n        if (currentProgress) {\n          currentProgress.terminate();\n          setProgressBar(null);\n        }\n        const spinner = ora({ text: 'Stopping server', color: 'white' }).start();\n        try {\n          await devServerManager.stopAsync();\n          spinner.stopAndPersist({ text: 'Stopped server', symbol: `\\u203A` });\n          // @ts-ignore: Argument of type '\"SIGINT\"' is not assignable to parameter of type '\"disconnect\"'.\n          process.emit('SIGINT');\n\n          // TODO: Is this the right place to do this?\n          process.exit();\n        } catch (error) {\n          spinner.fail('Failed to stop server');\n          throw error;\n        }\n        break;\n      }\n      case CTRL_L:\n        return Log.clear();\n      case '?':\n        return printUsage(usageOptions, { verbose: true });\n    }\n\n    // Optionally enabled\n\n    if (isWebSocketsEnabled) {\n      switch (key) {\n        case 'm':\n          return actions.toggleDevMenu();\n        case 'M':\n          return actions.openMoreToolsAsync();\n      }\n    }\n\n    const { platforms = ['ios', 'android', 'web'] } = options;\n\n    if (['i', 'a'].includes(key.toLowerCase())) {\n      const platform = key.toLowerCase() === 'i' ? 'ios' : 'android';\n\n      const shouldPrompt = ['I', 'A'].includes(key);\n      if (shouldPrompt) {\n        Log.clear();\n      }\n\n      const server = devServerManager.getDefaultDevServer();\n      const settings = PLATFORM_SETTINGS[platform];\n\n      Log.log(`${BLT} Opening on ${settings.name}...`);\n\n      if (server.isTargetingNative() && !platforms.includes(settings.key)) {\n        Log.warn(\n          chalk`${settings.name} is disabled, enable it by adding {bold ${settings.key}} to the platforms array in your app.json or app.config.js`\n        );\n      } else {\n        try {\n          await server.openPlatformAsync(settings.launchTarget, { shouldPrompt });\n          printHelp();\n        } catch (error: any) {\n          if (!(error instanceof AbortCommandError)) {\n            Log.exception(error);\n          }\n        }\n      }\n      // Break out early.\n      return;\n    }\n\n    switch (key) {\n      case 's': {\n        Log.clear();\n        if (await devServerManager.toggleRuntimeMode()) {\n          usageOptions.devClient = devServerManager.options.devClient;\n          return actions.printDevServerInfo(usageOptions);\n        }\n        break;\n      }\n      case 'w': {\n        try {\n          await devServerManager.ensureProjectPrerequisiteAsync(WebSupportProjectPrerequisite);\n          if (!platforms.includes('web')) {\n            platforms.push('web');\n            options.platforms?.push('web');\n          }\n        } catch (e: any) {\n          Log.warn(e.message);\n          break;\n        }\n\n        const isDisabled = !platforms.includes('web');\n        if (isDisabled) {\n          debug('Web is disabled');\n          // Use warnings from the web support setup.\n          break;\n        }\n\n        // Ensure the Webpack dev server is running first\n        if (!devServerManager.getWebDevServer()) {\n          debug('Starting up webpack dev server');\n          await devServerManager.ensureWebDevServerRunningAsync();\n          // When this is the first time webpack is started, reprint the connection info.\n          actions.printDevServerInfo(usageOptions);\n        }\n\n        Log.log(`${BLT} Open in the web browser...`);\n        try {\n          await devServerManager.getWebDevServer()?.openPlatformAsync('desktop');\n          printHelp();\n        } catch (error: any) {\n          if (!(error instanceof AbortCommandError)) {\n            Log.exception(error);\n          }\n        }\n        break;\n      }\n      case 'c':\n        Log.clear();\n        return actions.printDevServerInfo(usageOptions);\n      case 'j':\n        return actions.openJsInspectorAsync();\n      case 'r':\n        return actions.reloadApp();\n      case 'o':\n        Log.log(`${BLT} Opening the editor...`);\n        return openInEditorAsync(devServerManager.projectRoot);\n    }\n  };\n\n  const keyPressHandler = new KeyPressHandler(onPressAsync);\n\n  const listener = keyPressHandler.createInteractionListener();\n\n  addInteractionListener(listener);\n\n  // Start observing...\n  keyPressHandler.startInterceptingKeyStrokes();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}