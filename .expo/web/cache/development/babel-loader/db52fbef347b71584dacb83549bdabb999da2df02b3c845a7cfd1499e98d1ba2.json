{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.closeJsInspector = closeJsInspector;\nexports.openJsInspector = openJsInspector;\nexports.queryAllInspectorAppsAsync = queryAllInspectorAppsAsync;\nexports.queryInspectorAppAsync = queryInspectorAppAsync;\nfunction _nodeFetch() {\n  var data = _interopRequireDefault(require(\"node-fetch\"));\n  _nodeFetch = function _nodeFetch() {\n    return data;\n  };\n  return data;\n}\nfunction _LaunchBrowser() {\n  var data = require(\"./LaunchBrowser\");\n  _LaunchBrowser = function _LaunchBrowser() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar openingBrowserInstance = null;\nfunction openJsInspector(_x) {\n  return _openJsInspector.apply(this, arguments);\n}\nfunction _openJsInspector() {\n  _openJsInspector = _asyncToGenerator(function* (app) {\n    var devtoolsFrontendRev = 'd9568d04d7dd79269c5a655d7ada69650c5a8336';\n    var urlBase = `https://chrome-devtools-frontend.appspot.com/serve_rev/@${devtoolsFrontendRev}/devtools_app.html`;\n    var ws = app.webSocketDebuggerUrl.replace(/^ws:\\/\\//, '');\n    var url = `${urlBase}?panel=console&ws=${encodeURIComponent(ws)}`;\n    yield closeJsInspector();\n    openingBrowserInstance = yield (0, _LaunchBrowser().launchBrowserAsync)(url);\n  });\n  return _openJsInspector.apply(this, arguments);\n}\nfunction closeJsInspector() {\n  return _closeJsInspector.apply(this, arguments);\n}\nfunction _closeJsInspector() {\n  _closeJsInspector = _asyncToGenerator(function* () {\n    var _openingBrowserInstan;\n    yield (_openingBrowserInstan = openingBrowserInstance) === null || _openingBrowserInstan === void 0 ? void 0 : _openingBrowserInstan.close();\n    openingBrowserInstance = null;\n  });\n  return _closeJsInspector.apply(this, arguments);\n}\nfunction queryInspectorAppAsync(_x2, _x3) {\n  return _queryInspectorAppAsync.apply(this, arguments);\n}\nfunction _queryInspectorAppAsync() {\n  _queryInspectorAppAsync = _asyncToGenerator(function* (metroServerOrigin, appId) {\n    var _apps$find;\n    var apps = yield queryAllInspectorAppsAsync(metroServerOrigin);\n    return (_apps$find = apps.find(function (app) {\n      return app.description === appId;\n    })) !== null && _apps$find !== void 0 ? _apps$find : null;\n  });\n  return _queryInspectorAppAsync.apply(this, arguments);\n}\nfunction queryAllInspectorAppsAsync(_x4) {\n  return _queryAllInspectorAppsAsync.apply(this, arguments);\n}\nfunction _queryAllInspectorAppsAsync() {\n  _queryAllInspectorAppsAsync = _asyncToGenerator(function* (metroServerOrigin) {\n    var resp = yield (0, _nodeFetch().default)(`${metroServerOrigin}/json/list`);\n    var apps = transformApps(yield resp.json());\n    return apps.filter(function (app) {\n      return app.title === 'React Native Experimental (Improved Chrome Reloads)';\n    });\n  });\n  return _queryAllInspectorAppsAsync.apply(this, arguments);\n}\nfunction transformApps(apps) {\n  var deviceIdToAppId = {};\n  for (var app of apps) {\n    if (app.description !== \"don't use\") {\n      var deviceId = app.id.split('-')[0];\n      var appId = app.description;\n      deviceIdToAppId[deviceId] = appId;\n    }\n  }\n  return apps.map(function (app) {\n    if (app.description === \"don't use\") {\n      var _deviceIdToAppId$devi;\n      var _deviceId = app.id.split('-')[0];\n      app.description = (_deviceIdToAppId$devi = deviceIdToAppId[_deviceId]) !== null && _deviceIdToAppId$devi !== void 0 ? _deviceIdToAppId$devi : app.description;\n    }\n    return app;\n  });\n}","map":{"version":3,"names":["_nodeFetch","data","_interopRequireDefault","require","_LaunchBrowser","obj","__esModule","default","openingBrowserInstance","openJsInspector","_x","_openJsInspector","apply","arguments","_asyncToGenerator","app","devtoolsFrontendRev","urlBase","ws","webSocketDebuggerUrl","replace","url","encodeURIComponent","closeJsInspector","launchBrowserAsync","_closeJsInspector","_openingBrowserInstan","close","queryInspectorAppAsync","_x2","_x3","_queryInspectorAppAsync","metroServerOrigin","appId","_apps$find","apps","queryAllInspectorAppsAsync","find","description","_x4","_queryAllInspectorAppsAsync","resp","transformApps","json","filter","title","deviceIdToAppId","deviceId","id","split","map","_deviceIdToAppId$devi"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\dev-server\\src\\JsInspector.ts"],"sourcesContent":["import fetch from 'node-fetch';\n\nimport { launchBrowserAsync, type LaunchBrowserInstance } from './LaunchBrowser';\n\nexport interface MetroInspectorProxyApp {\n  description: string;\n  devtoolsFrontendUrl: string;\n  faviconUrl: string;\n  id: string;\n  title: string;\n  type: 'node';\n  vm: 'Hermes' | \"don't use\";\n  webSocketDebuggerUrl: string;\n}\n\nlet openingBrowserInstance: LaunchBrowserInstance | null = null;\n\nexport async function openJsInspector(app: MetroInspectorProxyApp) {\n  // To update devtoolsFrontendRev, find the full commit hash in the url:\n  // https://chromium.googlesource.com/chromium/src.git/+log/refs/tags/{CHROME_VERSION}/chrome/VERSION\n  //\n  // 1. Replace {CHROME_VERSION} with the target chrome version\n  // 2. Click the first log item in the webpage\n  // 3. The full commit hash is the desired revision\n  const devtoolsFrontendRev = 'd9568d04d7dd79269c5a655d7ada69650c5a8336'; // Chrome 100.0.4896.75\n\n  const urlBase = `https://chrome-devtools-frontend.appspot.com/serve_rev/@${devtoolsFrontendRev}/devtools_app.html`;\n  const ws = app.webSocketDebuggerUrl.replace(/^ws:\\/\\//, '');\n  const url = `${urlBase}?panel=console&ws=${encodeURIComponent(ws)}`;\n  await closeJsInspector();\n  openingBrowserInstance = await launchBrowserAsync(url);\n}\n\nexport async function closeJsInspector() {\n  await openingBrowserInstance?.close();\n  openingBrowserInstance = null;\n}\n\nexport async function queryInspectorAppAsync(\n  metroServerOrigin: string,\n  appId: string\n): Promise<MetroInspectorProxyApp | null> {\n  const apps = await queryAllInspectorAppsAsync(metroServerOrigin);\n  return apps.find((app) => app.description === appId) ?? null;\n}\n\nexport async function queryAllInspectorAppsAsync(\n  metroServerOrigin: string\n): Promise<MetroInspectorProxyApp[]> {\n  const resp = await fetch(`${metroServerOrigin}/json/list`);\n  const apps: MetroInspectorProxyApp[] = transformApps(await resp.json());\n  // Only use targets with better reloading support\n  return apps.filter((app) => app.title === 'React Native Experimental (Improved Chrome Reloads)');\n}\n\n// The description of `React Native Experimental (Improved Chrome Reloads)` target is `don't use` from metro.\n// This function tries to transform the unmeaningful description to appId\nfunction transformApps(apps: MetroInspectorProxyApp[]): MetroInspectorProxyApp[] {\n  const deviceIdToAppId: Record<string, string> = {};\n\n  for (const app of apps) {\n    if (app.description !== \"don't use\") {\n      const deviceId = app.id.split('-')[0];\n      const appId = app.description;\n      deviceIdToAppId[deviceId] = appId;\n    }\n  }\n\n  return apps.map((app) => {\n    if (app.description === \"don't use\") {\n      const deviceId = app.id.split('-')[0];\n      app.description = deviceIdToAppId[deviceId] ?? app.description;\n    }\n    return app;\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}