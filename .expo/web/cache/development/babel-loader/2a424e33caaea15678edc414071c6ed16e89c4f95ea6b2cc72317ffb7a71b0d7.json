{"ast":null,"code":"import { stringifyNumber } from \"../../stringify/stringifyNumber.js\";\nvar intIdentify = function intIdentify(value) {\n  return typeof value === 'bigint' || Number.isInteger(value);\n};\nfunction intResolve(str, offset, radix, _ref) {\n  var intAsBigInt = _ref.intAsBigInt;\n  var sign = str[0];\n  if (sign === '-' || sign === '+') offset += 1;\n  str = str.substring(offset).replace(/_/g, '');\n  if (intAsBigInt) {\n    switch (radix) {\n      case 2:\n        str = `0b${str}`;\n        break;\n      case 8:\n        str = `0o${str}`;\n        break;\n      case 16:\n        str = `0x${str}`;\n        break;\n    }\n    var _n = BigInt(str);\n    return sign === '-' ? BigInt(-1) * _n : _n;\n  }\n  var n = parseInt(str, radix);\n  return sign === '-' ? -1 * n : n;\n}\nfunction intStringify(node, radix, prefix) {\n  var value = node.value;\n  if (intIdentify(value)) {\n    var str = value.toString(radix);\n    return value < 0 ? '-' + prefix + str.substr(1) : prefix + str;\n  }\n  return stringifyNumber(node);\n}\nvar intBin = {\n  identify: intIdentify,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  format: 'BIN',\n  test: /^[-+]?0b[0-1_]+$/,\n  resolve: function resolve(str, _onError, opt) {\n    return intResolve(str, 2, 2, opt);\n  },\n  stringify: function stringify(node) {\n    return intStringify(node, 2, '0b');\n  }\n};\nvar intOct = {\n  identify: intIdentify,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  format: 'OCT',\n  test: /^[-+]?0[0-7_]+$/,\n  resolve: function resolve(str, _onError, opt) {\n    return intResolve(str, 1, 8, opt);\n  },\n  stringify: function stringify(node) {\n    return intStringify(node, 8, '0');\n  }\n};\nvar int = {\n  identify: intIdentify,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  test: /^[-+]?[0-9][0-9_]*$/,\n  resolve: function resolve(str, _onError, opt) {\n    return intResolve(str, 0, 10, opt);\n  },\n  stringify: stringifyNumber\n};\nvar intHex = {\n  identify: intIdentify,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  format: 'HEX',\n  test: /^[-+]?0x[0-9a-fA-F_]+$/,\n  resolve: function resolve(str, _onError, opt) {\n    return intResolve(str, 2, 16, opt);\n  },\n  stringify: function stringify(node) {\n    return intStringify(node, 16, '0x');\n  }\n};\nexport { int, intBin, intHex, intOct };","map":{"version":3,"names":["stringifyNumber","intIdentify","value","Number","isInteger","intResolve","str","offset","radix","_ref","intAsBigInt","sign","substring","replace","n","BigInt","parseInt","intStringify","node","prefix","toString","substr","intBin","identify","default","tag","format","test","resolve","_onError","opt","stringify","intOct","int","intHex"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/browser/dist/schema/yaml-1.1/int.js"],"sourcesContent":["import { stringifyNumber } from '../../stringify/stringifyNumber.js';\n\nconst intIdentify = (value) => typeof value === 'bigint' || Number.isInteger(value);\nfunction intResolve(str, offset, radix, { intAsBigInt }) {\n    const sign = str[0];\n    if (sign === '-' || sign === '+')\n        offset += 1;\n    str = str.substring(offset).replace(/_/g, '');\n    if (intAsBigInt) {\n        switch (radix) {\n            case 2:\n                str = `0b${str}`;\n                break;\n            case 8:\n                str = `0o${str}`;\n                break;\n            case 16:\n                str = `0x${str}`;\n                break;\n        }\n        const n = BigInt(str);\n        return sign === '-' ? BigInt(-1) * n : n;\n    }\n    const n = parseInt(str, radix);\n    return sign === '-' ? -1 * n : n;\n}\nfunction intStringify(node, radix, prefix) {\n    const { value } = node;\n    if (intIdentify(value)) {\n        const str = value.toString(radix);\n        return value < 0 ? '-' + prefix + str.substr(1) : prefix + str;\n    }\n    return stringifyNumber(node);\n}\nconst intBin = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'BIN',\n    test: /^[-+]?0b[0-1_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 2, opt),\n    stringify: node => intStringify(node, 2, '0b')\n};\nconst intOct = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'OCT',\n    test: /^[-+]?0[0-7_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 1, 8, opt),\n    stringify: node => intStringify(node, 8, '0')\n};\nconst int = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    test: /^[-+]?[0-9][0-9_]*$/,\n    resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),\n    stringify: stringifyNumber\n};\nconst intHex = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'HEX',\n    test: /^[-+]?0x[0-9a-fA-F_]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),\n    stringify: node => intStringify(node, 16, '0x')\n};\n\nexport { int, intBin, intHex, intOct };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}