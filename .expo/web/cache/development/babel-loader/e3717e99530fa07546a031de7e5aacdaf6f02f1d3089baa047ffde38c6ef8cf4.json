{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createMessageSocketEndpoint;\nfunction _url() {\n  var data = _interopRequireDefault(require(\"url\"));\n  _url = function _url() {\n    return data;\n  };\n  return data;\n}\nfunction _ws() {\n  var data = require(\"ws\");\n  _ws = function _ws() {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function _cliTools() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar PROTOCOL_VERSION = 2;\nfunction parseMessage(data, binary) {\n  if (binary) {\n    _cliTools().logger.error('Expected text message, got binary!');\n    return undefined;\n  }\n  try {\n    var message = JSON.parse(data);\n    if (message.version === PROTOCOL_VERSION) {\n      return message;\n    }\n    _cliTools().logger.error(`Received message had wrong protocol version: ${message.version}`);\n  } catch (e) {\n    _cliTools().logger.error(`Failed to parse the message as JSON:\\n${data}`);\n  }\n  return undefined;\n}\nfunction isBroadcast(message) {\n  return typeof message.method === 'string' && message.id === undefined && message.target === undefined;\n}\nfunction isRequest(message) {\n  return typeof message.method === 'string' && typeof message.target === 'string';\n}\nfunction isResponse(message) {\n  return typeof message.id === 'object' && typeof message.id.requestId !== 'undefined' && typeof message.id.clientId === 'string' && (message.result !== undefined || message.error !== undefined);\n}\nfunction createMessageSocketEndpoint() {\n  var wss = new (_ws().Server)({\n    noServer: true\n  });\n  var clients = new Map();\n  var nextClientId = 0;\n  function getClientWs(clientId) {\n    var clientWs = clients.get(clientId);\n    if (clientWs === undefined) {\n      throw new Error(`could not find id \"${clientId}\" while forwarding request`);\n    }\n    return clientWs;\n  }\n  function handleSendBroadcast(broadcasterId, message) {\n    var forwarded = {\n      version: PROTOCOL_VERSION,\n      method: message.method,\n      params: message.params\n    };\n    if (clients.size === 0) {\n      _cliTools().logger.warn(`No apps connected. Sending \"${message.method}\" to all React Native apps failed. Make sure your app is running in the simulator or on a phone connected via USB.`);\n    }\n    for (var _ref of clients) {\n      var _ref2 = _slicedToArray(_ref, 2);\n      var otherId = _ref2[0];\n      var otherWs = _ref2[1];\n      if (otherId !== broadcasterId) {\n        try {\n          otherWs.send(JSON.stringify(forwarded));\n        } catch (e) {\n          _cliTools().logger.error(`Failed to send broadcast to client: '${otherId}' ` + `due to:\\n ${e.toString()}`);\n        }\n      }\n    }\n  }\n  wss.on('connection', function (clientWs) {\n    var clientId = `client#${nextClientId++}`;\n    function handleCaughtError(message, error) {\n      var errorMessage = {\n        id: message.id,\n        method: message.method,\n        target: message.target,\n        error: message.error === undefined ? 'undefined' : 'defined',\n        params: message.params === undefined ? 'undefined' : 'defined',\n        result: message.result === undefined ? 'undefined' : 'defined'\n      };\n      if (message.id === undefined) {\n        _cliTools().logger.error(`Handling message from ${clientId} failed with:\\n${error}\\n` + `message:\\n${JSON.stringify(errorMessage)}`);\n      } else {\n        try {\n          clientWs.send(JSON.stringify({\n            version: PROTOCOL_VERSION,\n            error: error,\n            id: message.id\n          }));\n        } catch (e) {\n          _cliTools().logger.error(`Failed to reply to ${clientId} with error:\\n${error}` + `\\nmessage:\\n${JSON.stringify(errorMessage)}` + `\\ndue to error: ${e.toString()}`);\n        }\n      }\n    }\n    function handleServerRequest(message) {\n      var result = null;\n      switch (message.method) {\n        case 'getid':\n          result = clientId;\n          break;\n        case 'getpeers':\n          result = {};\n          clients.forEach(function (otherWs, otherId) {\n            if (clientId !== otherId) {\n              result[otherId] = _url().default.parse(otherWs.upgradeReq.url, true).query;\n            }\n          });\n          break;\n        default:\n          throw new Error(`unknown method: ${message.method}`);\n      }\n      clientWs.send(JSON.stringify({\n        version: PROTOCOL_VERSION,\n        result: result,\n        id: message.id\n      }));\n    }\n    function forwardRequest(message) {\n      getClientWs(message.target).send(JSON.stringify({\n        version: PROTOCOL_VERSION,\n        method: message.method,\n        params: message.params,\n        id: message.id === undefined ? undefined : {\n          requestId: message.id,\n          clientId: clientId\n        }\n      }));\n    }\n    function forwardResponse(message) {\n      if (!message.id) {\n        return;\n      }\n      getClientWs(message.id.clientId).send(JSON.stringify({\n        version: PROTOCOL_VERSION,\n        result: message.result,\n        error: message.error,\n        id: message.id.requestId\n      }));\n    }\n    clients.set(clientId, clientWs);\n    var onCloseHandler = function onCloseHandler() {\n      clientWs.onmessage = function () {};\n      clients.delete(clientId);\n    };\n    clientWs.onclose = onCloseHandler;\n    clientWs.onerror = onCloseHandler;\n    clientWs.onmessage = function (event) {\n      var message = parseMessage(event.data, event.binary);\n      if (message === undefined) {\n        _cliTools().logger.error('Received message not matching protocol');\n        return;\n      }\n      try {\n        if (isBroadcast(message)) {\n          handleSendBroadcast(clientId, message);\n        } else if (isRequest(message)) {\n          if (message.target === 'server') {\n            handleServerRequest(message);\n          } else {\n            forwardRequest(message);\n          }\n        } else if (isResponse(message)) {\n          forwardResponse(message);\n        } else {\n          throw new Error('Invalid message, did not match the protocol');\n        }\n      } catch (e) {\n        handleCaughtError(message, e.toString());\n      }\n    };\n  });\n  return {\n    server: wss,\n    broadcast: function broadcast(method, params) {\n      handleSendBroadcast(null, {\n        method: method,\n        params: params\n      });\n    }\n  };\n}","map":{"version":3,"names":["_slicedToArray","require","Object","defineProperty","exports","value","default","createMessageSocketEndpoint","_url","data","_interopRequireDefault","_ws","_cliTools","obj","__esModule","PROTOCOL_VERSION","parseMessage","binary","logger","error","undefined","message","JSON","parse","version","e","isBroadcast","method","id","target","isRequest","isResponse","requestId","clientId","result","wss","Server","noServer","clients","Map","nextClientId","getClientWs","clientWs","get","Error","handleSendBroadcast","broadcasterId","forwarded","params","size","warn","_ref","_ref2","otherId","otherWs","send","stringify","toString","on","handleCaughtError","errorMessage","handleServerRequest","forEach","upgradeReq","url","query","forwardRequest","forwardResponse","set","onCloseHandler","onmessage","delete","onclose","onerror","event","server","broadcast"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-server-api/build/websocket/createMessageSocketEndpoint.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createMessageSocketEndpoint;\nfunction _url() {\n  const data = _interopRequireDefault(require(\"url\"));\n  _url = function () {\n    return data;\n  };\n  return data;\n}\nfunction _ws() {\n  const data = require(\"ws\");\n  _ws = function () {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function () {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst PROTOCOL_VERSION = 2;\nfunction parseMessage(data, binary) {\n  if (binary) {\n    _cliTools().logger.error('Expected text message, got binary!');\n    return undefined;\n  }\n  try {\n    const message = JSON.parse(data);\n    if (message.version === PROTOCOL_VERSION) {\n      return message;\n    }\n    _cliTools().logger.error(`Received message had wrong protocol version: ${message.version}`);\n  } catch (e) {\n    _cliTools().logger.error(`Failed to parse the message as JSON:\\n${data}`);\n  }\n  return undefined;\n}\nfunction isBroadcast(message) {\n  return typeof message.method === 'string' && message.id === undefined && message.target === undefined;\n}\nfunction isRequest(message) {\n  return typeof message.method === 'string' && typeof message.target === 'string';\n}\nfunction isResponse(message) {\n  return typeof message.id === 'object' && typeof message.id.requestId !== 'undefined' && typeof message.id.clientId === 'string' && (message.result !== undefined || message.error !== undefined);\n}\nfunction createMessageSocketEndpoint() {\n  const wss = new (_ws().Server)({\n    noServer: true\n  });\n  const clients = new Map();\n  let nextClientId = 0;\n  function getClientWs(clientId) {\n    const clientWs = clients.get(clientId);\n    if (clientWs === undefined) {\n      throw new Error(`could not find id \"${clientId}\" while forwarding request`);\n    }\n    return clientWs;\n  }\n  function handleSendBroadcast(broadcasterId, message) {\n    const forwarded = {\n      version: PROTOCOL_VERSION,\n      method: message.method,\n      params: message.params\n    };\n    if (clients.size === 0) {\n      _cliTools().logger.warn(`No apps connected. Sending \"${message.method}\" to all React Native apps failed. Make sure your app is running in the simulator or on a phone connected via USB.`);\n    }\n    for (const [otherId, otherWs] of clients) {\n      if (otherId !== broadcasterId) {\n        try {\n          otherWs.send(JSON.stringify(forwarded));\n        } catch (e) {\n          _cliTools().logger.error(`Failed to send broadcast to client: '${otherId}' ` + `due to:\\n ${e.toString()}`);\n        }\n      }\n    }\n  }\n  wss.on('connection', clientWs => {\n    const clientId = `client#${nextClientId++}`;\n    function handleCaughtError(message, error) {\n      const errorMessage = {\n        id: message.id,\n        method: message.method,\n        target: message.target,\n        error: message.error === undefined ? 'undefined' : 'defined',\n        params: message.params === undefined ? 'undefined' : 'defined',\n        result: message.result === undefined ? 'undefined' : 'defined'\n      };\n      if (message.id === undefined) {\n        _cliTools().logger.error(`Handling message from ${clientId} failed with:\\n${error}\\n` + `message:\\n${JSON.stringify(errorMessage)}`);\n      } else {\n        try {\n          clientWs.send(JSON.stringify({\n            version: PROTOCOL_VERSION,\n            error,\n            id: message.id\n          }));\n        } catch (e) {\n          _cliTools().logger.error(`Failed to reply to ${clientId} with error:\\n${error}` + `\\nmessage:\\n${JSON.stringify(errorMessage)}` + `\\ndue to error: ${e.toString()}`);\n        }\n      }\n    }\n    function handleServerRequest(message) {\n      let result = null;\n      switch (message.method) {\n        case 'getid':\n          result = clientId;\n          break;\n        case 'getpeers':\n          result = {};\n          clients.forEach((otherWs, otherId) => {\n            if (clientId !== otherId) {\n              result[otherId] = _url().default.parse(otherWs.upgradeReq.url, true).query;\n            }\n          });\n          break;\n        default:\n          throw new Error(`unknown method: ${message.method}`);\n      }\n      clientWs.send(JSON.stringify({\n        version: PROTOCOL_VERSION,\n        result,\n        id: message.id\n      }));\n    }\n    function forwardRequest(message) {\n      getClientWs(message.target).send(JSON.stringify({\n        version: PROTOCOL_VERSION,\n        method: message.method,\n        params: message.params,\n        id: message.id === undefined ? undefined : {\n          requestId: message.id,\n          clientId\n        }\n      }));\n    }\n    function forwardResponse(message) {\n      if (!message.id) {\n        return;\n      }\n      getClientWs(message.id.clientId).send(JSON.stringify({\n        version: PROTOCOL_VERSION,\n        result: message.result,\n        error: message.error,\n        id: message.id.requestId\n      }));\n    }\n    clients.set(clientId, clientWs);\n    const onCloseHandler = () => {\n      clientWs.onmessage = () => {};\n      clients.delete(clientId);\n    };\n    clientWs.onclose = onCloseHandler;\n    clientWs.onerror = onCloseHandler;\n    clientWs.onmessage = event => {\n      const message = parseMessage(event.data, event.binary);\n      if (message === undefined) {\n        _cliTools().logger.error('Received message not matching protocol');\n        return;\n      }\n      try {\n        if (isBroadcast(message)) {\n          handleSendBroadcast(clientId, message);\n        } else if (isRequest(message)) {\n          if (message.target === 'server') {\n            handleServerRequest(message);\n          } else {\n            forwardRequest(message);\n          }\n        } else if (isResponse(message)) {\n          forwardResponse(message);\n        } else {\n          throw new Error('Invalid message, did not match the protocol');\n        }\n      } catch (e) {\n        handleCaughtError(message, e.toString());\n      }\n    };\n  });\n  return {\n    server: wss,\n    broadcast: (method, params) => {\n      handleSendBroadcast(null, {\n        method,\n        params\n      });\n    }\n  };\n}\n\n//# sourceMappingURL=createMessageSocketEndpoint.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}