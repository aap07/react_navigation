{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolvePlatformOption = resolvePlatformOption;\nexports.resolveOptionsAsync = resolveOptionsAsync;\nvar _config = require(\"@expo/config\");\nvar _platformBundlers = require(\"../start/server/platformBundlers\");\nvar _errors = require(\"../utils/errors\");\nfunction resolvePlatformOption(platformBundlers) {\n  var platform1 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [\"all\"];\n  var platformsAvailable = Object.fromEntries(Object.entries(platformBundlers).filter(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      bundler = _ref2[1];\n    return bundler === \"metro\";\n  }));\n  if (!Object.keys(platformsAvailable).length) {\n    throw new _errors.CommandError(`No platforms are configured to use the Metro bundler in the project Expo config.`);\n  }\n  var assertPlatformBundler = function assertPlatformBundler(platform) {\n    if (!platformsAvailable[platform]) {\n      throw new _errors.CommandError(\"BAD_ARGS\", `Platform \"${platform}\" is not configured to use the Metro bundler in the project Expo config.`);\n    }\n    return platform;\n  };\n  var knownPlatforms = [\"android\", \"ios\", \"web\"];\n  var assertPlatformIsKnown = function assertPlatformIsKnown(platform) {\n    if (!knownPlatforms.includes(platform)) {\n      throw new _errors.CommandError(`Unsupported platform \"${platform}\". Options are: ${knownPlatforms.join(\",\")},all`);\n    }\n    return platform;\n  };\n  return platform1.map(function (platform) {\n    return platform === \"all\" ? Object.keys(platformsAvailable) : platform;\n  }).flat().filter(function (platform, index, list) {\n    return list.indexOf(platform) === index;\n  }).map(function (platform) {\n    return assertPlatformIsKnown(platform);\n  }).map(function (platform) {\n    return assertPlatformBundler(platform);\n  });\n}\nfunction resolveOptionsAsync(_x, _x2) {\n  return _resolveOptionsAsync.apply(this, arguments);\n}\nfunction _resolveOptionsAsync() {\n  _resolveOptionsAsync = _asyncToGenerator(function* (projectRoot, args) {\n    var _getConfig = (0, _config).getConfig(projectRoot, {\n        skipPlugins: true,\n        skipSDKVersionRequirement: true\n      }),\n      exp = _getConfig.exp;\n    var platformBundlers = (0, _platformBundlers).getPlatformBundlers(exp);\n    var ref;\n    return {\n      platforms: resolvePlatformOption(platformBundlers, args[\"--platform\"]),\n      outputDir: (ref = args[\"--output-dir\"]) != null ? ref : \"dist\",\n      minify: !args[\"--no-minify\"],\n      clear: !!args[\"--clear\"],\n      dev: !!args[\"--dev\"],\n      maxWorkers: args[\"--max-workers\"],\n      dumpAssetmap: !!args[\"--dump-assetmap\"],\n      dumpSourcemap: !!args[\"--dump-sourcemap\"]\n    };\n  });\n  return _resolveOptionsAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","_slicedToArray","resolvePlatformOption","resolveOptionsAsync","_config","_platformBundlers","_errors","platformBundlers","platform1","arguments","length","undefined","platformsAvailable","Object","fromEntries","entries","filter","_ref","_ref2","bundler","keys","CommandError","assertPlatformBundler","platform","knownPlatforms","assertPlatformIsKnown","includes","join","map","flat","index","list","indexOf","_x","_x2","_resolveOptionsAsync","apply","projectRoot","args","_getConfig","getConfig","skipPlugins","skipSDKVersionRequirement","exp","getPlatformBundlers","ref","platforms","outputDir","minify","clear","dev","maxWorkers","dumpAssetmap","dumpSourcemap"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\export\\resolveOptions.ts"],"sourcesContent":["import { getConfig, Platform } from '@expo/config';\n\nimport { getPlatformBundlers, PlatformBundlers } from '../start/server/platformBundlers';\nimport { CommandError } from '../utils/errors';\n\nexport type Options = {\n  outputDir: string;\n  platforms: Platform[];\n  maxWorkers?: number;\n  dev: boolean;\n  clear: boolean;\n  minify: boolean;\n  dumpAssetmap: boolean;\n  dumpSourcemap: boolean;\n};\n\n/** Returns an array of platforms based on the input platform identifier and runtime constraints. */\nexport function resolvePlatformOption(\n  platformBundlers: PlatformBundlers,\n  platform: string[] = ['all']\n): Platform[] {\n  const platformsAvailable: Partial<PlatformBundlers> = Object.fromEntries(\n    Object.entries(platformBundlers).filter(([, bundler]) => bundler === 'metro')\n  );\n\n  if (!Object.keys(platformsAvailable).length) {\n    throw new CommandError(\n      `No platforms are configured to use the Metro bundler in the project Expo config.`\n    );\n  }\n\n  const assertPlatformBundler = (platform: Platform): Platform => {\n    if (!platformsAvailable[platform]) {\n      throw new CommandError(\n        'BAD_ARGS',\n        `Platform \"${platform}\" is not configured to use the Metro bundler in the project Expo config.`\n      );\n    }\n\n    return platform;\n  };\n\n  const knownPlatforms = ['android', 'ios', 'web'] as Platform[];\n  const assertPlatformIsKnown = (platform: string): Platform => {\n    if (!knownPlatforms.includes(platform as Platform)) {\n      throw new CommandError(\n        `Unsupported platform \"${platform}\". Options are: ${knownPlatforms.join(',')},all`\n      );\n    }\n\n    return platform as Platform;\n  };\n\n  return (\n    platform\n      // Expand `all` to all available platforms.\n      .map((platform) => (platform === 'all' ? Object.keys(platformsAvailable) : platform))\n      .flat()\n      // Remove duplicated platforms\n      .filter((platform, index, list) => list.indexOf(platform) === index)\n      // Assert platforms are valid\n      .map((platform) => assertPlatformIsKnown(platform))\n      .map((platform) => assertPlatformBundler(platform))\n  );\n}\n\nexport async function resolveOptionsAsync(projectRoot: string, args: any): Promise<Options> {\n  const { exp } = getConfig(projectRoot, { skipPlugins: true, skipSDKVersionRequirement: true });\n  const platformBundlers = getPlatformBundlers(exp);\n\n  return {\n    platforms: resolvePlatformOption(platformBundlers, args['--platform']),\n    outputDir: args['--output-dir'] ?? 'dist',\n    minify: !args['--no-minify'],\n    clear: !!args['--clear'],\n    dev: !!args['--dev'],\n    maxWorkers: args['--max-workers'],\n    dumpAssetmap: !!args['--dump-assetmap'],\n    dumpSourcemap: !!args['--dump-sourcemap'],\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}