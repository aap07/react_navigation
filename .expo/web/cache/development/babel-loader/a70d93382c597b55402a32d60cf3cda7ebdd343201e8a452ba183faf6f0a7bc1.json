{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getDevClientProperties;\nexports.hasDirectDevClientDependency = hasDirectDevClientDependency;\nvar _config = require(\"@expo/config\");\nvar _jsonFile = _interopRequireDefault(require(\"@expo/json-file\"));\nvar _resolveFrom = _interopRequireDefault(require(\"resolve-from\"));\nvar _fn = require(\"../fn\");\nfunction getDevClientProperties(projectRoot, exp) {\n  return {\n    account_name: getAccountName({\n      owner: exp.owner\n    }),\n    dev_client_version: getDevClientVersion(projectRoot),\n    project_type: getProjectType(projectRoot),\n    uptime_ms: process.uptime() * 1000\n  };\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar getAccountName = (0, _fn).memoize(function (exp) {\n  return (0, _config).getAccountUsername(exp);\n});\nfunction hasDirectDevClientDependency(projectRoot) {\n  var ref, ref1;\n  var pkg = (0, _config).getPackageJson(projectRoot);\n  return !!((ref = pkg.dependencies) == null ? void 0 : ref[\"expo-dev-client\"]) || !!((ref1 = pkg.devDependencies) == null ? void 0 : ref1[\"expo-dev-client\"]);\n}\nvar getDevClientVersion = (0, _fn).memoize(function (projectRoot) {\n  try {\n    var devClientPackage = _resolveFrom.default.silent(projectRoot, \"expo-dev-client/package.json\");\n    if (devClientPackage) {\n      return _jsonFile.default.read(devClientPackage).version;\n    }\n  } catch (_unused) {}\n  return undefined;\n});\nvar getProjectType = (0, _fn).memoize(function (projectRoot) {\n  return (0, _config).getDefaultTarget(projectRoot) === \"managed\" ? \"managed\" : \"generic\";\n});","map":{"version":3,"names":["getDevClientProperties","hasDirectDevClientDependency","_config","require","_jsonFile","_interopRequireDefault","_resolveFrom","_fn","projectRoot","exp","account_name","getAccountName","owner","dev_client_version","getDevClientVersion","project_type","getProjectType","uptime_ms","process","uptime","memoize","getAccountUsername","ref","ref1","pkg","getPackageJson","dependencies","devDependencies","devClientPackage","default","silent","read","version","_unused","undefined","getDefaultTarget"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\utils\\analytics\\getDevClientProperties.ts"],"sourcesContent":["import { ExpoConfig, getAccountUsername, getDefaultTarget, getPackageJson } from '@expo/config';\nimport JsonFile, { JSONValue } from '@expo/json-file';\nimport resolveFrom from 'resolve-from';\n\nimport { memoize } from '../fn';\n\nconst getAccountName = memoize((exp: Pick<ExpoConfig, 'owner'>) => {\n  return getAccountUsername(exp);\n});\n\n/** @returns true if the expo-dev-client package is found in the project `package.json` file. */\nexport function hasDirectDevClientDependency(projectRoot: string): boolean {\n  const pkg = getPackageJson(projectRoot);\n  return !!pkg.dependencies?.['expo-dev-client'] || !!pkg.devDependencies?.['expo-dev-client'];\n}\n\nconst getDevClientVersion = memoize((projectRoot: string): JSONValue | undefined => {\n  try {\n    const devClientPackage = resolveFrom.silent(projectRoot, 'expo-dev-client/package.json');\n    if (devClientPackage) {\n      return JsonFile.read(devClientPackage).version;\n    }\n  } catch {}\n  return undefined;\n});\n\nconst getProjectType = memoize((projectRoot: string): 'managed' | 'generic' => {\n  return getDefaultTarget(projectRoot) === 'managed' ? 'managed' : 'generic';\n});\n\nexport default function getDevClientProperties(projectRoot: string, exp: ExpoConfig) {\n  return {\n    account_name: getAccountName({ owner: exp.owner }),\n    dev_client_version: getDevClientVersion(projectRoot),\n    project_type: getProjectType(projectRoot),\n    uptime_ms: process.uptime() * 1000,\n  };\n}\n"],"mappings":"AAAA;;;;;kBA8BwBA,sBAAsB;QAnB9BC,4BAA4B,GAA5BA,4BAA4B;AAXqC,IAAAC,OAAc,GAAAC,OAAA,CAAd,cAAc;AAC3D,IAAAC,SAAiB,GAAAC,sBAAA,CAAAF,OAAA,CAAjB,iBAAiB;AAC7B,IAAAG,YAAc,GAAAD,sBAAA,CAAAF,OAAA,CAAd,cAAc;AAEd,IAAAI,GAAO,GAAAJ,OAAA;AA0BhB,SAASH,sBAAsBA,CAACQ,WAAmB,EAAEC,GAAe,EAAE;EACnF,OAAO;IACLC,YAAY,EAAEC,cAAc,CAAC;MAAEC,KAAK,EAAEH,GAAG,CAACG;KAAO,CAAC;IAClDC,kBAAkB,EAAEC,mBAAmB,CAACN,WAAW,CAAC;IACpDO,YAAY,EAAEC,cAAc,CAACR,WAAW,CAAC;IACzCS,SAAS,EAAEC,OAAO,CAACC,MAAM,EAAE,GAAG;GAC/B;;;;;;;AA9BH,IAAMR,cAAc,GAAG,IAAAJ,GAAO,EAE5Ba,OAF4B,CAAC,UAACX,GAA8B,EAAK;EACjE,OAAO,IAAAP,OAAkB,EAAKmB,kBAAL,CAACZ,GAAG,CAAC;CAC/B,CAAC;AAGK,SAASR,4BAA4BA,CAACO,WAAmB,EAAW;MAEhEc,GAAgB,EAA2BC,IAAmB;EADvE,IAAMC,GAAG,GAAG,IAAAtB,OAAc,EAAauB,cAAb,CAACjB,WAAW,CAAC;EACvC,OAAO,CAAC,EAAC,CAAAc,GAAgB,GAAhBE,GAAG,CAACE,YAAY,SAAqB,GAArC,MAAqC,GAArCJ,GAAgB,CAAG,iBAAiB,CAAC,KAAI,CAAC,EAAC,CAAAC,IAAmB,GAAnBC,GAAG,CAACG,eAAe,SAAqB,GAAxC,MAAwC,GAAxCJ,IAAmB,CAAG,iBAAiB,CAAC;;AAG9F,IAAMT,mBAAmB,GAAG,IAAAP,GAAO,EAQjCa,OARiC,CAAC,UAACZ,WAAmB,EAA4B;EAClF,IAAI;IACF,IAAMoB,gBAAgB,GAAGtB,YAAW,CAAAuB,OAAA,CAACC,MAAM,CAACtB,WAAW,EAAE,8BAA8B,CAAC;IACxF,IAAIoB,gBAAgB,EAAE;MACpB,OAAOxB,SAAQ,CAAAyB,OAAA,CAACE,IAAI,CAACH,gBAAgB,CAAC,CAACI,OAAO;;GAEjD,CAAC,OAAAC,OAAA,EAAM;EACR,OAAOC,SAAS;CACjB,CAAC;AAEF,IAAMlB,cAAc,GAAG,IAAAT,GAAO,EAE5Ba,OAF4B,CAAC,UAACZ,WAAmB,EAA4B;EAC7E,OAAO,IAAAN,OAAgB,EAAaiC,gBAAb,CAAC3B,WAAW,CAAC,KAAK,SAAS,GAAG,SAAS,GAAG,SAAS;CAC3E,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}