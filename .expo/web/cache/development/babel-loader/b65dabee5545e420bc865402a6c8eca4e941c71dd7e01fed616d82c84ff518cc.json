{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { EventTypes, MouseButtons, PointerType } from \"../interfaces\";\nimport EventManager from \"./EventManager\";\nimport { isPointerInBounds } from \"../utils\";\nvar PointerEventManager = function (_EventManager) {\n  _inherits(PointerEventManager, _EventManager);\n  var _super = _createSuper(PointerEventManager);\n  function PointerEventManager() {\n    var _this;\n    _classCallCheck(this, PointerEventManager);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.trackedPointers = new Set();\n    return _this;\n  }\n  _createClass(PointerEventManager, [{\n    key: \"setListeners\",\n    value: function setListeners() {\n      var _this2 = this;\n      this.view.addEventListener('pointerdown', function (event) {\n        if (event.pointerType === PointerType.TOUCH) {\n          return;\n        }\n        if (!isPointerInBounds(_this2.view, {\n          x: event.clientX,\n          y: event.clientY\n        })) {\n          return;\n        }\n        var adaptedEvent = _this2.mapEvent(event, EventTypes.DOWN);\n        var target = event.target;\n        target.setPointerCapture(adaptedEvent.pointerId);\n        _this2.markAsInBounds(adaptedEvent.pointerId);\n        _this2.trackedPointers.add(adaptedEvent.pointerId);\n        if (++_this2.activePointersCounter > 1) {\n          adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n          _this2.onPointerAdd(adaptedEvent);\n        } else {\n          _this2.onPointerDown(adaptedEvent);\n        }\n      });\n      this.view.addEventListener('pointerup', function (event) {\n        if (event.pointerType === PointerType.TOUCH) {\n          return;\n        }\n        if (_this2.activePointersCounter === 0) {\n          return;\n        }\n        var adaptedEvent = _this2.mapEvent(event, EventTypes.UP);\n        var target = event.target;\n        target.releasePointerCapture(adaptedEvent.pointerId);\n        _this2.markAsOutOfBounds(adaptedEvent.pointerId);\n        _this2.trackedPointers.delete(adaptedEvent.pointerId);\n        if (--_this2.activePointersCounter > 0) {\n          adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n          _this2.onPointerRemove(adaptedEvent);\n        } else {\n          _this2.onPointerUp(adaptedEvent);\n        }\n      });\n      this.view.addEventListener('pointermove', function (event) {\n        if (event.pointerType === PointerType.TOUCH) {\n          return;\n        }\n        if (event.pointerType === PointerType.MOUSE && event.buttons !== MouseButtons.LEFT) {\n          return;\n        }\n        var adaptedEvent = _this2.mapEvent(event, EventTypes.MOVE);\n        var inBounds = isPointerInBounds(_this2.view, {\n          x: adaptedEvent.x,\n          y: adaptedEvent.y\n        });\n        var pointerIndex = _this2.pointersInBounds.indexOf(adaptedEvent.pointerId);\n        if (inBounds) {\n          if (pointerIndex < 0) {\n            adaptedEvent.eventType = EventTypes.ENTER;\n            _this2.onPointerEnter(adaptedEvent);\n            _this2.markAsInBounds(adaptedEvent.pointerId);\n          } else {\n            _this2.onPointerMove(adaptedEvent);\n          }\n        } else {\n          if (pointerIndex >= 0) {\n            adaptedEvent.eventType = EventTypes.OUT;\n            _this2.onPointerOut(adaptedEvent);\n            _this2.markAsOutOfBounds(adaptedEvent.pointerId);\n          } else {\n            _this2.onPointerOutOfBounds(adaptedEvent);\n          }\n        }\n      });\n      this.view.addEventListener('pointercancel', function (event) {\n        if (event.pointerType === PointerType.TOUCH) {\n          return;\n        }\n        var adaptedEvent = _this2.mapEvent(event, EventTypes.CANCEL);\n        _this2.onPointerCancel(adaptedEvent);\n        _this2.markAsOutOfBounds(adaptedEvent.pointerId);\n        _this2.activePointersCounter = 0;\n        _this2.trackedPointers.clear();\n      });\n      this.view.addEventListener('lostpointercapture', function (event) {\n        var adaptedEvent = _this2.mapEvent(event, EventTypes.CANCEL);\n        if (_this2.trackedPointers.has(adaptedEvent.pointerId)) {\n          _this2.onPointerCancel(adaptedEvent);\n          _this2.activePointersCounter = 0;\n          _this2.trackedPointers.clear();\n        }\n      });\n    }\n  }, {\n    key: \"mapEvent\",\n    value: function mapEvent(event, eventType) {\n      return {\n        x: event.clientX,\n        y: event.clientY,\n        offsetX: event.offsetX,\n        offsetY: event.offsetY,\n        pointerId: event.pointerId,\n        eventType: eventType,\n        pointerType: event.pointerType,\n        buttons: event.buttons,\n        time: event.timeStamp\n      };\n    }\n  }, {\n    key: \"resetManager\",\n    value: function resetManager() {\n      _get(_getPrototypeOf(PointerEventManager.prototype), \"resetManager\", this).call(this);\n      this.trackedPointers.clear();\n    }\n  }]);\n  return PointerEventManager;\n}(EventManager);\nexport { PointerEventManager as default };","map":{"version":3,"names":["EventTypes","MouseButtons","PointerType","EventManager","isPointerInBounds","PointerEventManager","_EventManager","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","trackedPointers","Set","_createClass","key","value","setListeners","_this2","view","addEventListener","event","pointerType","TOUCH","x","clientX","y","clientY","adaptedEvent","mapEvent","DOWN","target","setPointerCapture","pointerId","markAsInBounds","add","activePointersCounter","eventType","ADDITIONAL_POINTER_DOWN","onPointerAdd","onPointerDown","UP","releasePointerCapture","markAsOutOfBounds","delete","ADDITIONAL_POINTER_UP","onPointerRemove","onPointerUp","MOUSE","buttons","LEFT","MOVE","inBounds","pointerIndex","pointersInBounds","indexOf","ENTER","onPointerEnter","onPointerMove","OUT","onPointerOut","onPointerOutOfBounds","CANCEL","onPointerCancel","clear","has","offsetX","offsetY","time","timeStamp","resetManager","_get","_getPrototypeOf","prototype","default"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/react-native-gesture-handler/src/web/tools/PointerEventManager.ts"],"sourcesContent":["import {\n  AdaptedEvent,\n  EventTypes,\n  MouseButtons,\n  PointerType,\n} from '../interfaces';\nimport EventManager from './EventManager';\nimport { isPointerInBounds } from '../utils';\n\nexport default class PointerEventManager extends EventManager {\n  private trackedPointers = new Set<number>();\n\n  public setListeners(): void {\n    this.view.addEventListener('pointerdown', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n      if (\n        !isPointerInBounds(this.view, { x: event.clientX, y: event.clientY })\n      ) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.DOWN);\n      const target = event.target as HTMLElement;\n\n      target.setPointerCapture(adaptedEvent.pointerId);\n      this.markAsInBounds(adaptedEvent.pointerId);\n      this.trackedPointers.add(adaptedEvent.pointerId);\n\n      if (++this.activePointersCounter > 1) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n        this.onPointerAdd(adaptedEvent);\n      } else {\n        this.onPointerDown(adaptedEvent);\n      }\n    });\n\n    this.view.addEventListener('pointerup', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      // When we call reset on gesture handlers, it also resets their event managers\n      // In some handlers (like RotationGestureHandler) reset is called before all pointers leave view\n      // This means, that activePointersCounter will be set to 0, while there are still remaining pointers on view\n      // Removing them will end in activePointersCounter going below 0, therefore handlers won't behave properly\n      if (this.activePointersCounter === 0) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.UP);\n      const target = event.target as HTMLElement;\n\n      target.releasePointerCapture(adaptedEvent.pointerId);\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      this.trackedPointers.delete(adaptedEvent.pointerId);\n\n      if (--this.activePointersCounter > 0) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n        this.onPointerRemove(adaptedEvent);\n      } else {\n        this.onPointerUp(adaptedEvent);\n      }\n    });\n\n    this.view.addEventListener('pointermove', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      if (\n        event.pointerType === PointerType.MOUSE &&\n        event.buttons !== MouseButtons.LEFT\n      ) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.MOVE);\n\n      const inBounds: boolean = isPointerInBounds(this.view, {\n        x: adaptedEvent.x,\n        y: adaptedEvent.y,\n      });\n\n      const pointerIndex: number = this.pointersInBounds.indexOf(\n        adaptedEvent.pointerId\n      );\n\n      if (inBounds) {\n        if (pointerIndex < 0) {\n          adaptedEvent.eventType = EventTypes.ENTER;\n          this.onPointerEnter(adaptedEvent);\n          this.markAsInBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerMove(adaptedEvent);\n        }\n      } else {\n        if (pointerIndex >= 0) {\n          adaptedEvent.eventType = EventTypes.OUT;\n          this.onPointerOut(adaptedEvent);\n          this.markAsOutOfBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerOutOfBounds(adaptedEvent);\n        }\n      }\n    });\n\n    this.view.addEventListener('pointercancel', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(\n        event,\n        EventTypes.CANCEL\n      );\n\n      this.onPointerCancel(adaptedEvent);\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      this.activePointersCounter = 0;\n      this.trackedPointers.clear();\n    });\n\n    this.view.addEventListener(\n      'lostpointercapture',\n      (event: PointerEvent): void => {\n        const adaptedEvent: AdaptedEvent = this.mapEvent(\n          event,\n          EventTypes.CANCEL\n        );\n\n        if (this.trackedPointers.has(adaptedEvent.pointerId)) {\n          // in some cases the `pointerup` event is not fired, but `lostpointercapture` is\n          // we simulate the `pointercancel` event here to make sure the gesture handler stops tracking it\n          this.onPointerCancel(adaptedEvent);\n\n          this.activePointersCounter = 0;\n          this.trackedPointers.clear();\n        }\n      }\n    );\n  }\n\n  protected mapEvent(event: PointerEvent, eventType: EventTypes): AdaptedEvent {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n      offsetX: event.offsetX,\n      offsetY: event.offsetY,\n      pointerId: event.pointerId,\n      eventType: eventType,\n      pointerType: event.pointerType as PointerType,\n      buttons: event.buttons,\n      time: event.timeStamp,\n    };\n  }\n\n  public resetManager(): void {\n    super.resetManager();\n    this.trackedPointers.clear();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}