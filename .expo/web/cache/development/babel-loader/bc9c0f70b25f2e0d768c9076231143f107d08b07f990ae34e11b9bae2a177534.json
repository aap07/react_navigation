{"ast":null,"code":"var _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _require = require(\"./error.js\"),\n  InvalidArgumentError = _require.InvalidArgumentError;\nvar Option = function () {\n  \"use strict\";\n\n  function Option(flags, description) {\n    _classCallCheck(this, Option);\n    this.flags = flags;\n    this.description = description || '';\n    this.required = flags.includes('<');\n    this.optional = flags.includes('[');\n    this.variadic = /\\w\\.\\.\\.[>\\]]$/.test(flags);\n    this.mandatory = false;\n    var optionFlags = splitOptionFlags(flags);\n    this.short = optionFlags.shortFlag;\n    this.long = optionFlags.longFlag;\n    this.negate = false;\n    if (this.long) {\n      this.negate = this.long.startsWith('--no-');\n    }\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.presetArg = undefined;\n    this.envVar = undefined;\n    this.parseArg = undefined;\n    this.hidden = false;\n    this.argChoices = undefined;\n    this.conflictsWith = [];\n    this.implied = undefined;\n  }\n  _createClass(Option, [{\n    key: \"default\",\n    value: function _default(value, description) {\n      this.defaultValue = value;\n      this.defaultValueDescription = description;\n      return this;\n    }\n  }, {\n    key: \"preset\",\n    value: function preset(arg) {\n      this.presetArg = arg;\n      return this;\n    }\n  }, {\n    key: \"conflicts\",\n    value: function conflicts(names) {\n      this.conflictsWith = this.conflictsWith.concat(names);\n      return this;\n    }\n  }, {\n    key: \"implies\",\n    value: function implies(impliedOptionValues) {\n      this.implied = Object.assign(this.implied || {}, impliedOptionValues);\n      return this;\n    }\n  }, {\n    key: \"env\",\n    value: function env(name) {\n      this.envVar = name;\n      return this;\n    }\n  }, {\n    key: \"argParser\",\n    value: function argParser(fn) {\n      this.parseArg = fn;\n      return this;\n    }\n  }, {\n    key: \"makeOptionMandatory\",\n    value: function makeOptionMandatory() {\n      var mandatory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.mandatory = !!mandatory;\n      return this;\n    }\n  }, {\n    key: \"hideHelp\",\n    value: function hideHelp() {\n      var hide = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.hidden = !!hide;\n      return this;\n    }\n  }, {\n    key: \"_concatValue\",\n    value: function _concatValue(value, previous) {\n      if (previous === this.defaultValue || !Array.isArray(previous)) {\n        return [value];\n      }\n      return previous.concat(value);\n    }\n  }, {\n    key: \"choices\",\n    value: function choices(values) {\n      var _this = this;\n      this.argChoices = values.slice();\n      this.parseArg = function (arg, previous) {\n        if (!_this.argChoices.includes(arg)) {\n          throw new InvalidArgumentError(`Allowed choices are ${_this.argChoices.join(', ')}.`);\n        }\n        if (_this.variadic) {\n          return _this._concatValue(arg, previous);\n        }\n        return arg;\n      };\n      return this;\n    }\n  }, {\n    key: \"name\",\n    value: function name() {\n      if (this.long) {\n        return this.long.replace(/^--/, '');\n      }\n      return this.short.replace(/^-/, '');\n    }\n  }, {\n    key: \"attributeName\",\n    value: function attributeName() {\n      return camelcase(this.name().replace(/^no-/, ''));\n    }\n  }, {\n    key: \"is\",\n    value: function is(arg) {\n      return this.short === arg || this.long === arg;\n    }\n  }, {\n    key: \"isBoolean\",\n    value: function isBoolean() {\n      return !this.required && !this.optional && !this.negate;\n    }\n  }]);\n  return Option;\n}();\nvar DualOptions = function () {\n  \"use strict\";\n\n  function DualOptions(options) {\n    var _this2 = this;\n    _classCallCheck(this, DualOptions);\n    this.positiveOptions = new Map();\n    this.negativeOptions = new Map();\n    this.dualOptions = new Set();\n    options.forEach(function (option) {\n      if (option.negate) {\n        _this2.negativeOptions.set(option.attributeName(), option);\n      } else {\n        _this2.positiveOptions.set(option.attributeName(), option);\n      }\n    });\n    this.negativeOptions.forEach(function (value, key) {\n      if (_this2.positiveOptions.has(key)) {\n        _this2.dualOptions.add(key);\n      }\n    });\n  }\n  _createClass(DualOptions, [{\n    key: \"valueFromOption\",\n    value: function valueFromOption(value, option) {\n      var optionKey = option.attributeName();\n      if (!this.dualOptions.has(optionKey)) return true;\n      var preset = this.negativeOptions.get(optionKey).presetArg;\n      var negativeValue = preset !== undefined ? preset : false;\n      return option.negate === (negativeValue === value);\n    }\n  }]);\n  return DualOptions;\n}();\nfunction camelcase(str) {\n  return str.split('-').reduce(function (str, word) {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\nfunction splitOptionFlags(flags) {\n  var shortFlag;\n  var longFlag;\n  var flagParts = flags.split(/[ |,]+/);\n  if (flagParts.length > 1 && !/^[[<]/.test(flagParts[1])) shortFlag = flagParts.shift();\n  longFlag = flagParts.shift();\n  if (!shortFlag && /^-[^-]$/.test(longFlag)) {\n    shortFlag = longFlag;\n    longFlag = undefined;\n  }\n  return {\n    shortFlag: shortFlag,\n    longFlag: longFlag\n  };\n}\nexports.Option = Option;\nexports.splitOptionFlags = splitOptionFlags;\nexports.DualOptions = DualOptions;","map":{"version":3,"names":["_require","require","InvalidArgumentError","Option","flags","description","_classCallCheck","required","includes","optional","variadic","test","mandatory","optionFlags","splitOptionFlags","short","shortFlag","long","longFlag","negate","startsWith","defaultValue","undefined","defaultValueDescription","presetArg","envVar","parseArg","hidden","argChoices","conflictsWith","implied","_createClass","key","value","_default","preset","arg","conflicts","names","concat","implies","impliedOptionValues","Object","assign","env","name","argParser","fn","makeOptionMandatory","arguments","length","hideHelp","hide","_concatValue","previous","Array","isArray","choices","values","_this","slice","join","replace","attributeName","camelcase","is","isBoolean","DualOptions","options","_this2","positiveOptions","Map","negativeOptions","dualOptions","Set","forEach","option","set","has","add","valueFromOption","optionKey","get","negativeValue","str","split","reduce","word","toUpperCase","flagParts","shift","exports"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli/node_modules/commander/lib/option.js"],"sourcesContent":["const { InvalidArgumentError } = require('./error.js');\n\n// @ts-check\n\nclass Option {\n  /**\n   * Initialize a new `Option` with the given `flags` and `description`.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   */\n\n  constructor(flags, description) {\n    this.flags = flags;\n    this.description = description || '';\n\n    this.required = flags.includes('<'); // A value must be supplied when the option is specified.\n    this.optional = flags.includes('['); // A value is optional when the option is specified.\n    // variadic test ignores <value,...> et al which might be used to describe custom splitting of single argument\n    this.variadic = /\\w\\.\\.\\.[>\\]]$/.test(flags); // The option can take multiple values.\n    this.mandatory = false; // The option must have a value after parsing, which usually means it must be specified on command line.\n    const optionFlags = splitOptionFlags(flags);\n    this.short = optionFlags.shortFlag;\n    this.long = optionFlags.longFlag;\n    this.negate = false;\n    if (this.long) {\n      this.negate = this.long.startsWith('--no-');\n    }\n    this.defaultValue = undefined;\n    this.defaultValueDescription = undefined;\n    this.presetArg = undefined;\n    this.envVar = undefined;\n    this.parseArg = undefined;\n    this.hidden = false;\n    this.argChoices = undefined;\n    this.conflictsWith = [];\n    this.implied = undefined;\n  }\n\n  /**\n   * Set the default value, and optionally supply the description to be displayed in the help.\n   *\n   * @param {any} value\n   * @param {string} [description]\n   * @return {Option}\n   */\n\n  default(value, description) {\n    this.defaultValue = value;\n    this.defaultValueDescription = description;\n    return this;\n  }\n\n  /**\n   * Preset to use when option used without option-argument, especially optional but also boolean and negated.\n   * The custom processing (parseArg) is called.\n   *\n   * @example\n   * new Option('--color').default('GREYSCALE').preset('RGB');\n   * new Option('--donate [amount]').preset('20').argParser(parseFloat);\n   *\n   * @param {any} arg\n   * @return {Option}\n   */\n\n  preset(arg) {\n    this.presetArg = arg;\n    return this;\n  }\n\n  /**\n   * Add option name(s) that conflict with this option.\n   * An error will be displayed if conflicting options are found during parsing.\n   *\n   * @example\n   * new Option('--rgb').conflicts('cmyk');\n   * new Option('--js').conflicts(['ts', 'jsx']);\n   *\n   * @param {string | string[]} names\n   * @return {Option}\n   */\n\n  conflicts(names) {\n    this.conflictsWith = this.conflictsWith.concat(names);\n    return this;\n  }\n\n  /**\n   * Specify implied option values for when this option is set and the implied options are not.\n   *\n   * The custom processing (parseArg) is not called on the implied values.\n   *\n   * @example\n   * program\n   *   .addOption(new Option('--log', 'write logging information to file'))\n   *   .addOption(new Option('--trace', 'log extra details').implies({ log: 'trace.txt' }));\n   *\n   * @param {Object} impliedOptionValues\n   * @return {Option}\n   */\n  implies(impliedOptionValues) {\n    this.implied = Object.assign(this.implied || {}, impliedOptionValues);\n    return this;\n  }\n\n  /**\n   * Set environment variable to check for option value.\n   *\n   * An environment variable is only used if when processed the current option value is\n   * undefined, or the source of the current value is 'default' or 'config' or 'env'.\n   *\n   * @param {string} name\n   * @return {Option}\n   */\n\n  env(name) {\n    this.envVar = name;\n    return this;\n  }\n\n  /**\n   * Set the custom handler for processing CLI option arguments into option values.\n   *\n   * @param {Function} [fn]\n   * @return {Option}\n   */\n\n  argParser(fn) {\n    this.parseArg = fn;\n    return this;\n  }\n\n  /**\n   * Whether the option is mandatory and must have a value after parsing.\n   *\n   * @param {boolean} [mandatory=true]\n   * @return {Option}\n   */\n\n  makeOptionMandatory(mandatory = true) {\n    this.mandatory = !!mandatory;\n    return this;\n  }\n\n  /**\n   * Hide option in help.\n   *\n   * @param {boolean} [hide=true]\n   * @return {Option}\n   */\n\n  hideHelp(hide = true) {\n    this.hidden = !!hide;\n    return this;\n  }\n\n  /**\n   * @api private\n   */\n\n  _concatValue(value, previous) {\n    if (previous === this.defaultValue || !Array.isArray(previous)) {\n      return [value];\n    }\n\n    return previous.concat(value);\n  }\n\n  /**\n   * Only allow option value to be one of choices.\n   *\n   * @param {string[]} values\n   * @return {Option}\n   */\n\n  choices(values) {\n    this.argChoices = values.slice();\n    this.parseArg = (arg, previous) => {\n      if (!this.argChoices.includes(arg)) {\n        throw new InvalidArgumentError(`Allowed choices are ${this.argChoices.join(', ')}.`);\n      }\n      if (this.variadic) {\n        return this._concatValue(arg, previous);\n      }\n      return arg;\n    };\n    return this;\n  }\n\n  /**\n   * Return option name.\n   *\n   * @return {string}\n   */\n\n  name() {\n    if (this.long) {\n      return this.long.replace(/^--/, '');\n    }\n    return this.short.replace(/^-/, '');\n  }\n\n  /**\n   * Return option name, in a camelcase format that can be used\n   * as a object attribute key.\n   *\n   * @return {string}\n   * @api private\n   */\n\n  attributeName() {\n    return camelcase(this.name().replace(/^no-/, ''));\n  }\n\n  /**\n   * Check if `arg` matches the short or long flag.\n   *\n   * @param {string} arg\n   * @return {boolean}\n   * @api private\n   */\n\n  is(arg) {\n    return this.short === arg || this.long === arg;\n  }\n\n  /**\n   * Return whether a boolean option.\n   *\n   * Options are one of boolean, negated, required argument, or optional argument.\n   *\n   * @return {boolean}\n   * @api private\n   */\n\n  isBoolean() {\n    return !this.required && !this.optional && !this.negate;\n  }\n}\n\n/**\n * This class is to make it easier to work with dual options, without changing the existing\n * implementation. We support separate dual options for separate positive and negative options,\n * like `--build` and `--no-build`, which share a single option value. This works nicely for some\n * use cases, but is tricky for others where we want separate behaviours despite\n * the single shared option value.\n */\nclass DualOptions {\n  /**\n   * @param {Option[]} options\n   */\n  constructor(options) {\n    this.positiveOptions = new Map();\n    this.negativeOptions = new Map();\n    this.dualOptions = new Set();\n    options.forEach(option => {\n      if (option.negate) {\n        this.negativeOptions.set(option.attributeName(), option);\n      } else {\n        this.positiveOptions.set(option.attributeName(), option);\n      }\n    });\n    this.negativeOptions.forEach((value, key) => {\n      if (this.positiveOptions.has(key)) {\n        this.dualOptions.add(key);\n      }\n    });\n  }\n\n  /**\n   * Did the value come from the option, and not from possible matching dual option?\n   *\n   * @param {any} value\n   * @param {Option} option\n   * @returns {boolean}\n   */\n  valueFromOption(value, option) {\n    const optionKey = option.attributeName();\n    if (!this.dualOptions.has(optionKey)) return true;\n\n    // Use the value to deduce if (probably) came from the option.\n    const preset = this.negativeOptions.get(optionKey).presetArg;\n    const negativeValue = (preset !== undefined) ? preset : false;\n    return option.negate === (negativeValue === value);\n  }\n}\n\n/**\n * Convert string from kebab-case to camelCase.\n *\n * @param {string} str\n * @return {string}\n * @api private\n */\n\nfunction camelcase(str) {\n  return str.split('-').reduce((str, word) => {\n    return str + word[0].toUpperCase() + word.slice(1);\n  });\n}\n\n/**\n * Split the short and long flag out of something like '-m,--mixed <value>'\n *\n * @api private\n */\n\nfunction splitOptionFlags(flags) {\n  let shortFlag;\n  let longFlag;\n  // Use original very loose parsing to maintain backwards compatibility for now,\n  // which allowed for example unintended `-sw, --short-word` [sic].\n  const flagParts = flags.split(/[ |,]+/);\n  if (flagParts.length > 1 && !/^[[<]/.test(flagParts[1])) shortFlag = flagParts.shift();\n  longFlag = flagParts.shift();\n  // Add support for lone short flag without significantly changing parsing!\n  if (!shortFlag && /^-[^-]$/.test(longFlag)) {\n    shortFlag = longFlag;\n    longFlag = undefined;\n  }\n  return { shortFlag, longFlag };\n}\n\nexports.Option = Option;\nexports.splitOptionFlags = splitOptionFlags;\nexports.DualOptions = DualOptions;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}