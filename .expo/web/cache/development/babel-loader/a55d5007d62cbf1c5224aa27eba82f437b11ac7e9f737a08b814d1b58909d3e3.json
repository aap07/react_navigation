{"ast":null,"code":"#!/usr/bin/env node\n\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.expoConfig = void 0;\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _args = require(\"../utils/args\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar expoConfig = function () {\n  var _ref = _asyncToGenerator(function* (argv) {\n    var args = (0, _args).assertArgs({\n      \"--help\": Boolean,\n      \"--full\": Boolean,\n      \"--json\": Boolean,\n      \"--type\": String,\n      \"-h\": \"--help\",\n      \"-t\": \"--type\"\n    }, argv);\n    if (args[\"--help\"]) {\n      (0, _args).printHelp(`Show the project config`, _chalk.default`npx expo config {dim <dir>}`, [_chalk.default`<dir>                                    Directory of the Expo project. {dim Default: Current working directory}`, `--full                                   Include all project config data`, `--json                                   Output in JSON format`, `-t, --type <public|prebuild|introspect>  Type of config to show`, `-h, --help                               Usage info`].join(\"\\n\"));\n    }\n    var _yield$Promise$all = yield Promise.all([Promise.resolve().then(function () {\n        return _interopRequireWildcard(require(\"./configAsync\"));\n      }), Promise.resolve().then(function () {\n        return _interopRequireWildcard(require(\"../utils/errors\"));\n      })]),\n      _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2),\n      configAsync = _yield$Promise$all2[0].configAsync,\n      logCmdError = _yield$Promise$all2[1].logCmdError;\n    return configAsync((0, _args).getProjectRoot(args), {\n      full: args[\"--full\"],\n      json: args[\"--json\"],\n      type: args[\"--type\"]\n    }).catch(logCmdError);\n  });\n  return function expoConfig(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexports.expoConfig = expoConfig;","map":{"version":3,"names":["_chalk","_interopRequireDefault","require","_args","expoConfig","_ref","_asyncToGenerator","argv","args","assertArgs","Boolean","String","printHelp","default","join","_yield$Promise$all","Promise","all","resolve","then","_yield$Promise$all2","_slicedToArray","configAsync","logCmdError","getProjectRoot","full","json","type","catch","_x","apply","arguments"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\config\\index.ts"],"sourcesContent":["#!/usr/bin/env node\nimport chalk from 'chalk';\n\nimport { Command } from '../../bin/cli';\nimport { assertArgs, getProjectRoot, printHelp } from '../utils/args';\n\nexport const expoConfig: Command = async (argv) => {\n  const args = assertArgs(\n    {\n      // Types\n      '--help': Boolean,\n      '--full': Boolean,\n      '--json': Boolean,\n      '--type': String,\n      // Aliases\n      '-h': '--help',\n      '-t': '--type',\n    },\n    argv\n  );\n\n  if (args['--help']) {\n    printHelp(\n      `Show the project config`,\n      chalk`npx expo config {dim <dir>}`,\n      [\n        chalk`<dir>                                    Directory of the Expo project. {dim Default: Current working directory}`,\n        `--full                                   Include all project config data`,\n        `--json                                   Output in JSON format`,\n        `-t, --type <public|prebuild|introspect>  Type of config to show`,\n        `-h, --help                               Usage info`,\n      ].join('\\n')\n    );\n  }\n\n  // Load modules after the help prompt so `npx expo config -h` shows as fast as possible.\n  const [\n    // ./configAsync\n    { configAsync },\n    // ../utils/errors\n    { logCmdError },\n  ] = await Promise.all([import('./configAsync'), import('../utils/errors')]);\n\n  return configAsync(getProjectRoot(args), {\n    // Parsed options\n    full: args['--full'],\n    json: args['--json'],\n    type: args['--type'],\n  }).catch(logCmdError);\n};\n"],"mappings":"AAAA;;;;;;;;;AACkB,IAAAA,MAAO,GAAAC,sBAAA,CAAAC,OAAA,CAAP,OAAO;AAG6B,IAAAC,KAAe,GAAAD,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAE9D,IAAME,UAAU;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAY,WAAOC,IAAI,EAAK;IACjD,IAAMC,IAAI,GAAG,IAAAL,KAAU,EAYtBM,UAZsB,CACrB;MAEE,QAAQ,EAAEC,OAAO;MACjB,QAAQ,EAAEA,OAAO;MACjB,QAAQ,EAAEA,OAAO;MACjB,QAAQ,EAAEC,MAAM;MAEhB,IAAI,EAAE,QAAQ;MACd,IAAI,EAAE;KACP,EACDJ,IAAI,CACL;IAED,IAAIC,IAAI,CAAC,QAAQ,CAAC,EAAE;MAClB,IAAAL,KAAS,EAURS,SAVQ,CACN,yBAAwB,EACzBZ,MAAK,CAAAa,OAAC,6BAA4B,EAClC,CACEb,MAAK,CAAAa,OAAC,kHAAiH,EACtH,0EAAyE,EACzE,gEAA+D,EAC/D,iEAAgE,EAChE,qDAAoD,CACtD,CAACC,IAAI,CAAC,IAAI,CAAC,CACb;;IAIH,IAAAC,kBAAA,SAKUC,OAAO,CAACC,GAAG,CAAC,CAACD,OAAA,CAAAE,OAAA,GAAAC,IAAA;8DAAsB;QAAC,EAAEH,OAAA,CAAAE,OAAA,GAAAC,IAAA;gEAAwB;QAAC,CAAC,CAAC;MAAAC,mBAAA,GAAAC,cAAA,CAAAN,kBAAA;MAHvEO,WAAW,GAAAF,mBAAA,IAAXE,WAAW;MAEXC,WAAW,GAAAH,mBAAA,IAAXG,WAAW;IAGf,OAAOD,WAAW,CAAC,IAAAnB,KAAc,EAAMqB,cAAN,CAAChB,IAAI,CAAC,EAAE;MAEvCiB,IAAI,EAAEjB,IAAI,CAAC,QAAQ,CAAC;MACpBkB,IAAI,EAAElB,IAAI,CAAC,QAAQ,CAAC;MACpBmB,IAAI,EAAEnB,IAAI,CAAC,QAAQ;KACpB,CAAC,CAACoB,KAAK,CAACL,WAAW,CAAC;GACtB;EAAA,gBA3CYnB,UAAUA,CAAAyB,EAAA;IAAA,OAAAxB,IAAA,CAAAyB,KAAA,OAAAC,SAAA;EAAA;AAAA,GA2CtB;QA3CY3B,UAAU,GAAVA,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}