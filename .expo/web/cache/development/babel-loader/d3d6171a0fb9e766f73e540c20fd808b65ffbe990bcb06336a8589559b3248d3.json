{"ast":null,"code":"'use strict';\n\nfunction getOrdinalNumber(num) {\n  switch (num) {\n    case 1:\n      return '1st';\n    case 2:\n      return '2nd';\n    case 3:\n      return '3rd';\n  }\n  if (num <= 20) {\n    return `${num}th`;\n  }\n  return 'unknown';\n}\nvar ProtocolTemplate = function ProtocolTemplate(_ref) {\n  var componentName = _ref.componentName,\n    methods = _ref.methods;\n  return `\n@protocol RCT${componentName}ViewProtocol <NSObject>\n${methods}\n@end\n`.trim();\n};\nvar CommandHandlerIfCaseConvertArgTemplate = function CommandHandlerIfCaseConvertArgTemplate(_ref2) {\n  var componentName = _ref2.componentName,\n    expectedKind = _ref2.expectedKind,\n    argNumber = _ref2.argNumber,\n    argNumberString = _ref2.argNumberString,\n    expectedKindString = _ref2.expectedKindString,\n    argConversion = _ref2.argConversion;\n  return `\n  NSObject *arg${argNumber} = args[${argNumber}];\n#if RCT_DEBUG\n  if (!RCTValidateTypeOfViewCommandArgument(arg${argNumber}, ${expectedKind}, @\"${expectedKindString}\", @\"${componentName}\", commandName, @\"${argNumberString}\")) {\n    return;\n  }\n#endif\n  ${argConversion}\n`.trim();\n};\nvar CommandHandlerIfCaseTemplate = function CommandHandlerIfCaseTemplate(_ref3) {\n  var componentName = _ref3.componentName,\n    commandName = _ref3.commandName,\n    numArgs = _ref3.numArgs,\n    convertArgs = _ref3.convertArgs,\n    commandCall = _ref3.commandCall;\n  return `\nif ([commandName isEqualToString:@\"${commandName}\"]) {\n#if RCT_DEBUG\n  if ([args count] != ${numArgs}) {\n    RCTLogError(@\"%@ command %@ received %d arguments, expected %d.\", @\"${componentName}\", commandName, (int)[args count], ${numArgs});\n    return;\n  }\n#endif\n\n  ${convertArgs}\n\n  ${commandCall}\n  return;\n}\n`.trim();\n};\nvar CommandHandlerTemplate = function CommandHandlerTemplate(_ref4) {\n  var componentName = _ref4.componentName,\n    ifCases = _ref4.ifCases;\n  return `\nRCT_EXTERN inline void RCT${componentName}HandleCommand(\n  id<RCT${componentName}ViewProtocol> componentView,\n  NSString const *commandName,\n  NSArray const *args)\n{\n  ${ifCases}\n\n#if RCT_DEBUG\n  RCTLogError(@\"%@ received command %@, which is not a supported command.\", @\"${componentName}\", commandName);\n#endif\n}\n`.trim();\n};\nvar FileTemplate = function FileTemplate(_ref5) {\n  var componentContent = _ref5.componentContent;\n  return `\n/**\n* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).\n*\n* Do not edit this file as changes may cause incorrect behavior and will be lost\n* once the code is regenerated.\n*\n* ${'@'}generated by codegen project: GenerateComponentHObjCpp.js\n*/\n\n#import <Foundation/Foundation.h>\n#import <React/RCTDefines.h>\n#import <React/RCTLog.h>\n\nNS_ASSUME_NONNULL_BEGIN\n\n${componentContent}\n\nNS_ASSUME_NONNULL_END\n`.trim();\n};\nfunction getObjCParamType(param) {\n  var typeAnnotation = param.typeAnnotation;\n  switch (typeAnnotation.type) {\n    case 'ReservedTypeAnnotation':\n      switch (typeAnnotation.name) {\n        case 'RootTag':\n          return 'double';\n        default:\n          typeAnnotation.name;\n          throw new Error(`Receieved invalid type: ${typeAnnotation.name}`);\n      }\n    case 'BooleanTypeAnnotation':\n      return 'BOOL';\n    case 'DoubleTypeAnnotation':\n      return 'double';\n    case 'FloatTypeAnnotation':\n      return 'float';\n    case 'Int32TypeAnnotation':\n      return 'NSInteger';\n    case 'StringTypeAnnotation':\n      return 'NSString *';\n    default:\n      typeAnnotation.type;\n      throw new Error('Received invalid param type annotation');\n  }\n}\nfunction getObjCExpectedKindParamType(param) {\n  var typeAnnotation = param.typeAnnotation;\n  switch (typeAnnotation.type) {\n    case 'ReservedTypeAnnotation':\n      switch (typeAnnotation.name) {\n        case 'RootTag':\n          return '[NSNumber class]';\n        default:\n          typeAnnotation.name;\n          throw new Error(`Receieved invalid type: ${typeAnnotation.name}`);\n      }\n    case 'BooleanTypeAnnotation':\n      return '[NSNumber class]';\n    case 'DoubleTypeAnnotation':\n      return '[NSNumber class]';\n    case 'FloatTypeAnnotation':\n      return '[NSNumber class]';\n    case 'Int32TypeAnnotation':\n      return '[NSNumber class]';\n    case 'StringTypeAnnotation':\n      return '[NSString class]';\n    default:\n      typeAnnotation.type;\n      throw new Error('Received invalid param type annotation');\n  }\n}\nfunction getReadableExpectedKindParamType(param) {\n  var typeAnnotation = param.typeAnnotation;\n  switch (typeAnnotation.type) {\n    case 'ReservedTypeAnnotation':\n      switch (typeAnnotation.name) {\n        case 'RootTag':\n          return 'double';\n        default:\n          typeAnnotation.name;\n          throw new Error(`Receieved invalid type: ${typeAnnotation.name}`);\n      }\n    case 'BooleanTypeAnnotation':\n      return 'boolean';\n    case 'DoubleTypeAnnotation':\n      return 'double';\n    case 'FloatTypeAnnotation':\n      return 'float';\n    case 'Int32TypeAnnotation':\n      return 'number';\n    case 'StringTypeAnnotation':\n      return 'string';\n    default:\n      typeAnnotation.type;\n      throw new Error('Received invalid param type annotation');\n  }\n}\nfunction getObjCRightHandAssignmentParamType(param, index) {\n  var typeAnnotation = param.typeAnnotation;\n  switch (typeAnnotation.type) {\n    case 'ReservedTypeAnnotation':\n      switch (typeAnnotation.name) {\n        case 'RootTag':\n          return `[(NSNumber *)arg${index} doubleValue]`;\n        default:\n          typeAnnotation.name;\n          throw new Error(`Receieved invalid type: ${typeAnnotation.name}`);\n      }\n    case 'BooleanTypeAnnotation':\n      return `[(NSNumber *)arg${index} boolValue]`;\n    case 'DoubleTypeAnnotation':\n      return `[(NSNumber *)arg${index} doubleValue]`;\n    case 'FloatTypeAnnotation':\n      return `[(NSNumber *)arg${index} floatValue]`;\n    case 'Int32TypeAnnotation':\n      return `[(NSNumber *)arg${index} intValue]`;\n    case 'StringTypeAnnotation':\n      return `(NSString *)arg${index}`;\n    default:\n      typeAnnotation.type;\n      throw new Error('Received invalid param type annotation');\n  }\n}\nfunction generateProtocol(component, componentName) {\n  var methods = component.commands.map(function (command) {\n    var params = command.typeAnnotation.params;\n    var paramString = params.length === 0 ? '' : params.map(function (param, index) {\n      var objCType = getObjCParamType(param);\n      return `${index === 0 ? '' : param.name}:(${objCType})${param.name}`;\n    }).join(' ');\n    return `- (void)${command.name}${paramString};`;\n  }).join('\\n').trim();\n  return ProtocolTemplate({\n    componentName: componentName,\n    methods: methods\n  });\n}\nfunction generateConvertAndValidateParam(param, index, componentName) {\n  var leftSideType = getObjCParamType(param);\n  var expectedKind = getObjCExpectedKindParamType(param);\n  var expectedKindString = getReadableExpectedKindParamType(param);\n  var argConversion = `${leftSideType} ${param.name} = ${getObjCRightHandAssignmentParamType(param, index)};`;\n  return CommandHandlerIfCaseConvertArgTemplate({\n    componentName: componentName,\n    argConversion: argConversion,\n    argNumber: index,\n    argNumberString: getOrdinalNumber(index + 1),\n    expectedKind: expectedKind,\n    expectedKindString: expectedKindString\n  });\n}\nfunction generateCommandIfCase(command, componentName) {\n  var params = command.typeAnnotation.params;\n  var convertArgs = params.map(function (param, index) {\n    return generateConvertAndValidateParam(param, index, componentName);\n  }).join('\\n\\n').trim();\n  var commandCallArgs = params.length === 0 ? '' : params.map(function (param, index) {\n    return `${index === 0 ? '' : param.name}:${param.name}`;\n  }).join(' ');\n  var commandCall = `[componentView ${command.name}${commandCallArgs}];`;\n  return CommandHandlerIfCaseTemplate({\n    componentName: componentName,\n    commandName: command.name,\n    numArgs: params.length,\n    convertArgs: convertArgs,\n    commandCall: commandCall\n  });\n}\nfunction generateCommandHandler(component, componentName) {\n  if (component.commands.length === 0) {\n    return null;\n  }\n  var ifCases = component.commands.map(function (command) {\n    return generateCommandIfCase(command, componentName);\n  }).join('\\n\\n');\n  return CommandHandlerTemplate({\n    componentName: componentName,\n    ifCases: ifCases\n  });\n}\nmodule.exports = {\n  generate: function generate(libraryName, schema, packageName) {\n    var assumeNonnull = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var fileName = 'RCTComponentViewHelpers.h';\n    var componentContent = Object.keys(schema.modules).map(function (moduleName) {\n      var module = schema.modules[moduleName];\n      if (module.type !== 'Component') {\n        return;\n      }\n      var components = module.components;\n      if (components == null) {\n        return null;\n      }\n      return Object.keys(components).filter(function (componentName) {\n        var component = components[componentName];\n        return !(component.excludedPlatforms && component.excludedPlatforms.includes('iOS'));\n      }).map(function (componentName) {\n        return [generateProtocol(components[componentName], componentName), generateCommandHandler(components[componentName], componentName)].join('\\n\\n').trim();\n      }).join('\\n\\n');\n    }).filter(Boolean).join('\\n\\n');\n    var replacedTemplate = FileTemplate({\n      componentContent: componentContent\n    });\n    return new Map([[fileName, replacedTemplate]]);\n  }\n};","map":{"version":3,"names":["getOrdinalNumber","num","ProtocolTemplate","_ref","componentName","methods","trim","CommandHandlerIfCaseConvertArgTemplate","_ref2","expectedKind","argNumber","argNumberString","expectedKindString","argConversion","CommandHandlerIfCaseTemplate","_ref3","commandName","numArgs","convertArgs","commandCall","CommandHandlerTemplate","_ref4","ifCases","FileTemplate","_ref5","componentContent","getObjCParamType","param","typeAnnotation","type","name","Error","getObjCExpectedKindParamType","getReadableExpectedKindParamType","getObjCRightHandAssignmentParamType","index","generateProtocol","component","commands","map","command","params","paramString","length","objCType","join","generateConvertAndValidateParam","leftSideType","generateCommandIfCase","commandCallArgs","generateCommandHandler","module","exports","generate","libraryName","schema","packageName","assumeNonnull","arguments","undefined","fileName","Object","keys","modules","moduleName","components","filter","excludedPlatforms","includes","Boolean","replacedTemplate","Map"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native/codegen/lib/generators/components/GenerateComponentHObjCpp.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * @format\n */\n\n'use strict';\n\nfunction getOrdinalNumber(num) {\n  switch (num) {\n    case 1:\n      return '1st';\n    case 2:\n      return '2nd';\n    case 3:\n      return '3rd';\n  }\n  if (num <= 20) {\n    return `${num}th`;\n  }\n  return 'unknown';\n}\nconst ProtocolTemplate = ({componentName, methods}) =>\n  `\n@protocol RCT${componentName}ViewProtocol <NSObject>\n${methods}\n@end\n`.trim();\nconst CommandHandlerIfCaseConvertArgTemplate = ({\n  componentName,\n  expectedKind,\n  argNumber,\n  argNumberString,\n  expectedKindString,\n  argConversion,\n}) =>\n  `\n  NSObject *arg${argNumber} = args[${argNumber}];\n#if RCT_DEBUG\n  if (!RCTValidateTypeOfViewCommandArgument(arg${argNumber}, ${expectedKind}, @\"${expectedKindString}\", @\"${componentName}\", commandName, @\"${argNumberString}\")) {\n    return;\n  }\n#endif\n  ${argConversion}\n`.trim();\nconst CommandHandlerIfCaseTemplate = ({\n  componentName,\n  commandName,\n  numArgs,\n  convertArgs,\n  commandCall,\n}) =>\n  `\nif ([commandName isEqualToString:@\"${commandName}\"]) {\n#if RCT_DEBUG\n  if ([args count] != ${numArgs}) {\n    RCTLogError(@\"%@ command %@ received %d arguments, expected %d.\", @\"${componentName}\", commandName, (int)[args count], ${numArgs});\n    return;\n  }\n#endif\n\n  ${convertArgs}\n\n  ${commandCall}\n  return;\n}\n`.trim();\nconst CommandHandlerTemplate = ({componentName, ifCases}) =>\n  `\nRCT_EXTERN inline void RCT${componentName}HandleCommand(\n  id<RCT${componentName}ViewProtocol> componentView,\n  NSString const *commandName,\n  NSArray const *args)\n{\n  ${ifCases}\n\n#if RCT_DEBUG\n  RCTLogError(@\"%@ received command %@, which is not a supported command.\", @\"${componentName}\", commandName);\n#endif\n}\n`.trim();\nconst FileTemplate = ({componentContent}) =>\n  `\n/**\n* This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).\n*\n* Do not edit this file as changes may cause incorrect behavior and will be lost\n* once the code is regenerated.\n*\n* ${'@'}generated by codegen project: GenerateComponentHObjCpp.js\n*/\n\n#import <Foundation/Foundation.h>\n#import <React/RCTDefines.h>\n#import <React/RCTLog.h>\n\nNS_ASSUME_NONNULL_BEGIN\n\n${componentContent}\n\nNS_ASSUME_NONNULL_END\n`.trim();\nfunction getObjCParamType(param) {\n  const typeAnnotation = param.typeAnnotation;\n  switch (typeAnnotation.type) {\n    case 'ReservedTypeAnnotation':\n      switch (typeAnnotation.name) {\n        case 'RootTag':\n          return 'double';\n        default:\n          typeAnnotation.name;\n          throw new Error(`Receieved invalid type: ${typeAnnotation.name}`);\n      }\n    case 'BooleanTypeAnnotation':\n      return 'BOOL';\n    case 'DoubleTypeAnnotation':\n      return 'double';\n    case 'FloatTypeAnnotation':\n      return 'float';\n    case 'Int32TypeAnnotation':\n      return 'NSInteger';\n    case 'StringTypeAnnotation':\n      return 'NSString *';\n    default:\n      typeAnnotation.type;\n      throw new Error('Received invalid param type annotation');\n  }\n}\nfunction getObjCExpectedKindParamType(param) {\n  const typeAnnotation = param.typeAnnotation;\n  switch (typeAnnotation.type) {\n    case 'ReservedTypeAnnotation':\n      switch (typeAnnotation.name) {\n        case 'RootTag':\n          return '[NSNumber class]';\n        default:\n          typeAnnotation.name;\n          throw new Error(`Receieved invalid type: ${typeAnnotation.name}`);\n      }\n    case 'BooleanTypeAnnotation':\n      return '[NSNumber class]';\n    case 'DoubleTypeAnnotation':\n      return '[NSNumber class]';\n    case 'FloatTypeAnnotation':\n      return '[NSNumber class]';\n    case 'Int32TypeAnnotation':\n      return '[NSNumber class]';\n    case 'StringTypeAnnotation':\n      return '[NSString class]';\n    default:\n      typeAnnotation.type;\n      throw new Error('Received invalid param type annotation');\n  }\n}\nfunction getReadableExpectedKindParamType(param) {\n  const typeAnnotation = param.typeAnnotation;\n  switch (typeAnnotation.type) {\n    case 'ReservedTypeAnnotation':\n      switch (typeAnnotation.name) {\n        case 'RootTag':\n          return 'double';\n        default:\n          typeAnnotation.name;\n          throw new Error(`Receieved invalid type: ${typeAnnotation.name}`);\n      }\n    case 'BooleanTypeAnnotation':\n      return 'boolean';\n    case 'DoubleTypeAnnotation':\n      return 'double';\n    case 'FloatTypeAnnotation':\n      return 'float';\n    case 'Int32TypeAnnotation':\n      return 'number';\n    case 'StringTypeAnnotation':\n      return 'string';\n    default:\n      typeAnnotation.type;\n      throw new Error('Received invalid param type annotation');\n  }\n}\nfunction getObjCRightHandAssignmentParamType(param, index) {\n  const typeAnnotation = param.typeAnnotation;\n  switch (typeAnnotation.type) {\n    case 'ReservedTypeAnnotation':\n      switch (typeAnnotation.name) {\n        case 'RootTag':\n          return `[(NSNumber *)arg${index} doubleValue]`;\n        default:\n          typeAnnotation.name;\n          throw new Error(`Receieved invalid type: ${typeAnnotation.name}`);\n      }\n    case 'BooleanTypeAnnotation':\n      return `[(NSNumber *)arg${index} boolValue]`;\n    case 'DoubleTypeAnnotation':\n      return `[(NSNumber *)arg${index} doubleValue]`;\n    case 'FloatTypeAnnotation':\n      return `[(NSNumber *)arg${index} floatValue]`;\n    case 'Int32TypeAnnotation':\n      return `[(NSNumber *)arg${index} intValue]`;\n    case 'StringTypeAnnotation':\n      return `(NSString *)arg${index}`;\n    default:\n      typeAnnotation.type;\n      throw new Error('Received invalid param type annotation');\n  }\n}\nfunction generateProtocol(component, componentName) {\n  const methods = component.commands\n    .map(command => {\n      const params = command.typeAnnotation.params;\n      const paramString =\n        params.length === 0\n          ? ''\n          : params\n              .map((param, index) => {\n                const objCType = getObjCParamType(param);\n                return `${index === 0 ? '' : param.name}:(${objCType})${\n                  param.name\n                }`;\n              })\n              .join(' ');\n      return `- (void)${command.name}${paramString};`;\n    })\n    .join('\\n')\n    .trim();\n  return ProtocolTemplate({\n    componentName,\n    methods,\n  });\n}\nfunction generateConvertAndValidateParam(param, index, componentName) {\n  const leftSideType = getObjCParamType(param);\n  const expectedKind = getObjCExpectedKindParamType(param);\n  const expectedKindString = getReadableExpectedKindParamType(param);\n  const argConversion = `${leftSideType} ${\n    param.name\n  } = ${getObjCRightHandAssignmentParamType(param, index)};`;\n  return CommandHandlerIfCaseConvertArgTemplate({\n    componentName,\n    argConversion,\n    argNumber: index,\n    argNumberString: getOrdinalNumber(index + 1),\n    expectedKind,\n    expectedKindString,\n  });\n}\nfunction generateCommandIfCase(command, componentName) {\n  const params = command.typeAnnotation.params;\n  const convertArgs = params\n    .map((param, index) =>\n      generateConvertAndValidateParam(param, index, componentName),\n    )\n    .join('\\n\\n')\n    .trim();\n  const commandCallArgs =\n    params.length === 0\n      ? ''\n      : params\n          .map((param, index) => {\n            return `${index === 0 ? '' : param.name}:${param.name}`;\n          })\n          .join(' ');\n  const commandCall = `[componentView ${command.name}${commandCallArgs}];`;\n  return CommandHandlerIfCaseTemplate({\n    componentName,\n    commandName: command.name,\n    numArgs: params.length,\n    convertArgs,\n    commandCall,\n  });\n}\nfunction generateCommandHandler(component, componentName) {\n  if (component.commands.length === 0) {\n    return null;\n  }\n  const ifCases = component.commands\n    .map(command => generateCommandIfCase(command, componentName))\n    .join('\\n\\n');\n  return CommandHandlerTemplate({\n    componentName,\n    ifCases,\n  });\n}\nmodule.exports = {\n  generate(libraryName, schema, packageName, assumeNonnull = false) {\n    const fileName = 'RCTComponentViewHelpers.h';\n    const componentContent = Object.keys(schema.modules)\n      .map(moduleName => {\n        const module = schema.modules[moduleName];\n        if (module.type !== 'Component') {\n          return;\n        }\n        const components = module.components;\n        // No components in this module\n        if (components == null) {\n          return null;\n        }\n        return Object.keys(components)\n          .filter(componentName => {\n            const component = components[componentName];\n            return !(\n              component.excludedPlatforms &&\n              component.excludedPlatforms.includes('iOS')\n            );\n          })\n          .map(componentName => {\n            return [\n              generateProtocol(components[componentName], componentName),\n              generateCommandHandler(components[componentName], componentName),\n            ]\n              .join('\\n\\n')\n              .trim();\n          })\n          .join('\\n\\n');\n      })\n      .filter(Boolean)\n      .join('\\n\\n');\n    const replacedTemplate = FileTemplate({\n      componentContent,\n    });\n    return new Map([[fileName, replacedTemplate]]);\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}