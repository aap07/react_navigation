{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPublicExpoManifestAsync = getPublicExpoManifestAsync;\nvar _config = require(\"@expo/config\");\nvar _env = require(\"../utils/env\");\nvar _errors = require(\"../utils/errors\");\nvar _getResolvedLocales = require(\"./getResolvedLocales\");\nfunction getPublicExpoManifestAsync(_x) {\n  return _getPublicExpoManifestAsync.apply(this, arguments);\n}\nfunction _getPublicExpoManifestAsync() {\n  _getPublicExpoManifestAsync = _asyncToGenerator(function* (projectRoot) {\n    var _getConfig = (0, _config).getConfig(projectRoot, {\n        isPublicConfig: true,\n        skipSDKVersionRequirement: true\n      }),\n      exp = _getConfig.exp;\n    if (exp.sdkVersion === \"UNVERSIONED\" && !_env.env.EXPO_SKIP_MANIFEST_VALIDATION_TOKEN) {\n      throw new _errors.CommandError(\"INVALID_OPTIONS\", \"Cannot publish with sdkVersion UNVERSIONED.\");\n    }\n    return _objectSpread(_objectSpread({}, exp), {}, {\n      locales: yield (0, _getResolvedLocales).getResolvedLocalesAsync(projectRoot, exp),\n      sdkVersion: exp.sdkVersion\n    });\n  });\n  return _getPublicExpoManifestAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_defineProperty","require","_asyncToGenerator","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","getPublicExpoManifestAsync","_config","_env","_errors","_getResolvedLocales","_x","_getPublicExpoManifestAsync","projectRoot","_getConfig","getConfig","isPublicConfig","skipSDKVersionRequirement","exp","sdkVersion","env","EXPO_SKIP_MANIFEST_VALIDATION_TOKEN","CommandError","locales","getResolvedLocalesAsync"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\export\\getPublicExpoManifest.ts"],"sourcesContent":["import { ExpoAppManifest, getConfig } from '@expo/config';\n\nimport { env } from '../utils/env';\nimport { CommandError } from '../utils/errors';\nimport { getResolvedLocalesAsync } from './getResolvedLocales';\n\n/** Get the public Expo manifest from the local project config. */\nexport async function getPublicExpoManifestAsync(projectRoot: string): Promise<ExpoAppManifest> {\n  // Read the config in public mode which strips the `hooks`.\n  const { exp } = getConfig(projectRoot, {\n    isPublicConfig: true,\n    // This shouldn't be needed since the CLI is vendored in `expo`.\n    skipSDKVersionRequirement: true,\n  });\n\n  // Only allow projects to be published with UNVERSIONED if a correct token is set in env\n  if (exp.sdkVersion === 'UNVERSIONED' && !env.EXPO_SKIP_MANIFEST_VALIDATION_TOKEN) {\n    throw new CommandError('INVALID_OPTIONS', 'Cannot publish with sdkVersion UNVERSIONED.');\n  }\n\n  return {\n    ...exp,\n    locales: await getResolvedLocalesAsync(projectRoot, exp),\n    sdkVersion: exp.sdkVersion!,\n  };\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,eAAA,GAAAC,OAAA;AAAA,IAAAC,iBAAA,GAAAD,OAAA;AAAA,SAAAE,QAAAC,CAAA,EAAAC,CAAA,QAAAC,CAAA,GAAAC,MAAA,CAAAC,IAAA,CAAAJ,CAAA,OAAAG,MAAA,CAAAE,qBAAA,QAAAC,CAAA,GAAAH,MAAA,CAAAE,qBAAA,CAAAL,CAAA,GAAAC,CAAA,KAAAK,CAAA,GAAAA,CAAA,CAAAC,MAAA,WAAAN,CAAA,WAAAE,MAAA,CAAAK,wBAAA,CAAAR,CAAA,EAAAC,CAAA,EAAAQ,UAAA,OAAAP,CAAA,CAAAQ,IAAA,CAAAC,KAAA,CAAAT,CAAA,EAAAI,CAAA,YAAAJ,CAAA;AAAA,SAAAU,cAAAZ,CAAA,aAAAC,CAAA,MAAAA,CAAA,GAAAY,SAAA,CAAAC,MAAA,EAAAb,CAAA,UAAAC,CAAA,WAAAW,SAAA,CAAAZ,CAAA,IAAAY,SAAA,CAAAZ,CAAA,QAAAA,CAAA,OAAAF,OAAA,CAAAI,MAAA,CAAAD,CAAA,OAAAa,OAAA,WAAAd,CAAA,IAAAL,eAAA,CAAAI,CAAA,EAAAC,CAAA,EAAAC,CAAA,CAAAD,CAAA,SAAAE,MAAA,CAAAa,yBAAA,GAAAb,MAAA,CAAAc,gBAAA,CAAAjB,CAAA,EAAAG,MAAA,CAAAa,yBAAA,CAAAd,CAAA,KAAAH,OAAA,CAAAI,MAAA,CAAAD,CAAA,GAAAa,OAAA,WAAAd,CAAA,IAAAE,MAAA,CAAAe,cAAA,CAAAlB,CAAA,EAAAC,CAAA,EAAAE,MAAA,CAAAK,wBAAA,CAAAN,CAAA,EAAAD,CAAA,iBAAAD,CAAA;;;;QAOsBmB,0BAA0B,GAA1BA,0BAA0B;AAPL,IAAAC,OAAc,GAAAvB,OAAA,CAAd,cAAc;AAErC,IAAAwB,IAAc,GAAAxB,OAAA;AACL,IAAAyB,OAAiB,GAAAzB,OAAA;AACN,IAAA0B,mBAAsB,GAAA1B,OAAA;AAAA,SAGxCsB,0BAA0BA,CAAAK,EAAA;EAAA,OAAAC,2BAAA,CAAAd,KAAA,OAAAE,SAAA;AAAA;AAAA,SAAAY,4BAAA;EAAAA,2BAAA,GAAA3B,iBAAA,CAAzC,WAA0C4B,WAAmB,EAA4B;IAE9F,IAAAC,UAAA,GAAgB,IAAAP,OAAS,EAIvBQ,SAJuB,CAACF,WAAW,EAAE;QACrCG,cAAc,EAAE,IAAI;QAEpBC,yBAAyB,EAAE;OAC5B,CAAC;MAJMC,GAAG,GAAAJ,UAAA,CAAHI,GAAG;IAOX,IAAIA,GAAG,CAACC,UAAU,KAAK,aAAa,IAAI,CAACX,IAAG,CAAAY,GAAA,CAACC,mCAAmC,EAAE;MAChF,MAAM,IAAIZ,OAAY,CAAAa,YAAA,CAAC,iBAAiB,EAAE,6CAA6C,CAAC;;IAG1F,OAAAvB,aAAA,CAAAA,aAAA,KACKmB,GAAG;MACNK,OAAO,QAAQ,IAAAb,mBAAuB,EAAkBc,uBAAlB,CAACX,WAAW,EAAEK,GAAG,CAAC;MACxDC,UAAU,EAAED,GAAG,CAACC;IAAU;GAE7B;EAAA,OAAAP,2BAAA,CAAAd,KAAA,OAAAE,SAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}