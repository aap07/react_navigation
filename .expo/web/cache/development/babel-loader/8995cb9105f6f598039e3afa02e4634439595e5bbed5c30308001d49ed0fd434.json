{"ast":null,"code":"'use strict';\n\nvar composer = require(\"./compose/composer.js\");\nvar Document = require(\"./doc/Document.js\");\nvar errors = require(\"./errors.js\");\nvar log = require(\"./log.js\");\nvar lineCounter = require(\"./parse/line-counter.js\");\nvar parser = require(\"./parse/parser.js\");\nfunction parseOptions(options) {\n  var prettyErrors = options.prettyErrors !== false;\n  var lineCounter$1 = options.lineCounter || prettyErrors && new lineCounter.LineCounter() || null;\n  return {\n    lineCounter: lineCounter$1,\n    prettyErrors: prettyErrors\n  };\n}\nfunction parseAllDocuments(source) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _parseOptions = parseOptions(options),\n    lineCounter = _parseOptions.lineCounter,\n    prettyErrors = _parseOptions.prettyErrors;\n  var parser$1 = new parser.Parser(lineCounter == null ? void 0 : lineCounter.addNewLine);\n  var composer$1 = new composer.Composer(options);\n  var docs = Array.from(composer$1.compose(parser$1.parse(source)));\n  if (prettyErrors && lineCounter) for (var doc of docs) {\n    doc.errors.forEach(errors.prettifyError(source, lineCounter));\n    doc.warnings.forEach(errors.prettifyError(source, lineCounter));\n  }\n  if (docs.length > 0) return docs;\n  return Object.assign([], {\n    empty: true\n  }, composer$1.streamInfo());\n}\nfunction parseDocument(source) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _parseOptions2 = parseOptions(options),\n    lineCounter = _parseOptions2.lineCounter,\n    prettyErrors = _parseOptions2.prettyErrors;\n  var parser$1 = new parser.Parser(lineCounter == null ? void 0 : lineCounter.addNewLine);\n  var composer$1 = new composer.Composer(options);\n  var doc = null;\n  for (var _doc of composer$1.compose(parser$1.parse(source), true, source.length)) {\n    if (!doc) doc = _doc;else if (doc.options.logLevel !== 'silent') {\n      doc.errors.push(new errors.YAMLParseError(_doc.range.slice(0, 2), 'MULTIPLE_DOCS', 'Source contains multiple documents; please use YAML.parseAllDocuments()'));\n      break;\n    }\n  }\n  if (prettyErrors && lineCounter) {\n    doc.errors.forEach(errors.prettifyError(source, lineCounter));\n    doc.warnings.forEach(errors.prettifyError(source, lineCounter));\n  }\n  return doc;\n}\nfunction parse(src, reviver, options) {\n  var _reviver = undefined;\n  if (typeof reviver === 'function') {\n    _reviver = reviver;\n  } else if (options === undefined && reviver && typeof reviver === 'object') {\n    options = reviver;\n  }\n  var doc = parseDocument(src, options);\n  if (!doc) return null;\n  doc.warnings.forEach(function (warning) {\n    return log.warn(doc.options.logLevel, warning);\n  });\n  if (doc.errors.length > 0) {\n    if (doc.options.logLevel !== 'silent') throw doc.errors[0];else doc.errors = [];\n  }\n  return doc.toJS(Object.assign({\n    reviver: _reviver\n  }, options));\n}\nfunction stringify(value, replacer, options) {\n  var _replacer = null;\n  if (typeof replacer === 'function' || Array.isArray(replacer)) {\n    _replacer = replacer;\n  } else if (options === undefined && replacer) {\n    options = replacer;\n  }\n  if (typeof options === 'string') options = options.length;\n  if (typeof options === 'number') {\n    var indent = Math.round(options);\n    options = indent < 1 ? undefined : indent > 8 ? {\n      indent: 8\n    } : {\n      indent: indent\n    };\n  }\n  if (value === undefined) {\n    var _ref2, _options;\n    var _ref = (_ref2 = (_options = options) != null ? _options : replacer) != null ? _ref2 : {},\n      keepUndefined = _ref.keepUndefined;\n    if (!keepUndefined) return undefined;\n  }\n  return new Document.Document(value, _replacer, options).toString(options);\n}\nexports.parse = parse;\nexports.parseAllDocuments = parseAllDocuments;\nexports.parseDocument = parseDocument;\nexports.stringify = stringify;","map":{"version":3,"names":["composer","require","Document","errors","log","lineCounter","parser","parseOptions","options","prettyErrors","lineCounter$1","LineCounter","parseAllDocuments","source","arguments","length","undefined","_parseOptions","parser$1","Parser","addNewLine","composer$1","Composer","docs","Array","from","compose","parse","doc","forEach","prettifyError","warnings","Object","assign","empty","streamInfo","parseDocument","_parseOptions2","_doc","logLevel","push","YAMLParseError","range","slice","src","reviver","_reviver","warning","warn","toJS","stringify","value","replacer","_replacer","isArray","indent","Math","round","_ref2","_options","_ref","keepUndefined","toString","exports"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/dist/public-api.js"],"sourcesContent":["'use strict';\n\nvar composer = require('./compose/composer.js');\nvar Document = require('./doc/Document.js');\nvar errors = require('./errors.js');\nvar log = require('./log.js');\nvar lineCounter = require('./parse/line-counter.js');\nvar parser = require('./parse/parser.js');\n\nfunction parseOptions(options) {\n    const prettyErrors = options.prettyErrors !== false;\n    const lineCounter$1 = options.lineCounter || (prettyErrors && new lineCounter.LineCounter()) || null;\n    return { lineCounter: lineCounter$1, prettyErrors };\n}\n/**\n * Parse the input as a stream of YAML documents.\n *\n * Documents should be separated from each other by `...` or `---` marker lines.\n *\n * @returns If an empty `docs` array is returned, it will be of type\n *   EmptyStream and contain additional stream information. In\n *   TypeScript, you should use `'empty' in docs` as a type guard for it.\n */\nfunction parseAllDocuments(source, options = {}) {\n    const { lineCounter, prettyErrors } = parseOptions(options);\n    const parser$1 = new parser.Parser(lineCounter?.addNewLine);\n    const composer$1 = new composer.Composer(options);\n    const docs = Array.from(composer$1.compose(parser$1.parse(source)));\n    if (prettyErrors && lineCounter)\n        for (const doc of docs) {\n            doc.errors.forEach(errors.prettifyError(source, lineCounter));\n            doc.warnings.forEach(errors.prettifyError(source, lineCounter));\n        }\n    if (docs.length > 0)\n        return docs;\n    return Object.assign([], { empty: true }, composer$1.streamInfo());\n}\n/** Parse an input string into a single YAML.Document */\nfunction parseDocument(source, options = {}) {\n    const { lineCounter, prettyErrors } = parseOptions(options);\n    const parser$1 = new parser.Parser(lineCounter?.addNewLine);\n    const composer$1 = new composer.Composer(options);\n    // `doc` is always set by compose.end(true) at the very latest\n    let doc = null;\n    for (const _doc of composer$1.compose(parser$1.parse(source), true, source.length)) {\n        if (!doc)\n            doc = _doc;\n        else if (doc.options.logLevel !== 'silent') {\n            doc.errors.push(new errors.YAMLParseError(_doc.range.slice(0, 2), 'MULTIPLE_DOCS', 'Source contains multiple documents; please use YAML.parseAllDocuments()'));\n            break;\n        }\n    }\n    if (prettyErrors && lineCounter) {\n        doc.errors.forEach(errors.prettifyError(source, lineCounter));\n        doc.warnings.forEach(errors.prettifyError(source, lineCounter));\n    }\n    return doc;\n}\nfunction parse(src, reviver, options) {\n    let _reviver = undefined;\n    if (typeof reviver === 'function') {\n        _reviver = reviver;\n    }\n    else if (options === undefined && reviver && typeof reviver === 'object') {\n        options = reviver;\n    }\n    const doc = parseDocument(src, options);\n    if (!doc)\n        return null;\n    doc.warnings.forEach(warning => log.warn(doc.options.logLevel, warning));\n    if (doc.errors.length > 0) {\n        if (doc.options.logLevel !== 'silent')\n            throw doc.errors[0];\n        else\n            doc.errors = [];\n    }\n    return doc.toJS(Object.assign({ reviver: _reviver }, options));\n}\nfunction stringify(value, replacer, options) {\n    let _replacer = null;\n    if (typeof replacer === 'function' || Array.isArray(replacer)) {\n        _replacer = replacer;\n    }\n    else if (options === undefined && replacer) {\n        options = replacer;\n    }\n    if (typeof options === 'string')\n        options = options.length;\n    if (typeof options === 'number') {\n        const indent = Math.round(options);\n        options = indent < 1 ? undefined : indent > 8 ? { indent: 8 } : { indent };\n    }\n    if (value === undefined) {\n        const { keepUndefined } = options ?? replacer ?? {};\n        if (!keepUndefined)\n            return undefined;\n    }\n    return new Document.Document(value, _replacer, options).toString(options);\n}\n\nexports.parse = parse;\nexports.parseAllDocuments = parseAllDocuments;\nexports.parseDocument = parseDocument;\nexports.stringify = stringify;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}