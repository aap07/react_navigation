{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAppVersion = getAppVersion;\nexports.getExpoUpdatesPackageVersion = getExpoUpdatesPackageVersion;\nexports.getNativeVersion = getNativeVersion;\nexports.getRuntimeVersion = getRuntimeVersion;\nexports.getRuntimeVersionNullable = getRuntimeVersionNullable;\nexports.getSDKVersion = getSDKVersion;\nexports.getUpdateUrl = getUpdateUrl;\nexports.getUpdatesCheckOnLaunch = getUpdatesCheckOnLaunch;\nexports.getUpdatesCodeSigningCertificate = getUpdatesCodeSigningCertificate;\nexports.getUpdatesCodeSigningMetadata = getUpdatesCodeSigningMetadata;\nexports.getUpdatesCodeSigningMetadataStringified = getUpdatesCodeSigningMetadataStringified;\nexports.getUpdatesEnabled = getUpdatesEnabled;\nexports.getUpdatesRequestHeaders = getUpdatesRequestHeaders;\nexports.getUpdatesRequestHeadersStringified = getUpdatesRequestHeadersStringified;\nexports.getUpdatesTimeout = getUpdatesTimeout;\nexports.withRuntimeVersion = void 0;\nfunction _sdkRuntimeVersions() {\n  var data = require(\"@expo/sdk-runtime-versions\");\n  _sdkRuntimeVersions = function _sdkRuntimeVersions() {\n    return data;\n  };\n  return data;\n}\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _getenv() {\n  var data = require(\"getenv\");\n  _getenv = function _getenv() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _resolveFrom() {\n  var data = _interopRequireDefault(require(\"resolve-from\"));\n  _resolveFrom = function _resolveFrom() {\n    return data;\n  };\n  return data;\n}\nfunction _semver() {\n  var data = _interopRequireDefault(require(\"semver\"));\n  _semver = function _semver() {\n    return data;\n  };\n  return data;\n}\nfunction _() {\n  var data = require(\"..\");\n  _ = function _() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getExpoUpdatesPackageVersion(projectRoot) {\n  var expoUpdatesPackageJsonPath = _resolveFrom().default.silent(projectRoot, 'expo-updates/package.json');\n  if (!expoUpdatesPackageJsonPath || !_fs().default.existsSync(expoUpdatesPackageJsonPath)) {\n    return null;\n  }\n  var packageJson = JSON.parse(_fs().default.readFileSync(expoUpdatesPackageJsonPath, 'utf8'));\n  return packageJson.version;\n}\nfunction shouldDefaultToClassicUpdates(config) {\n  var _config$updates;\n  return !!((_config$updates = config.updates) !== null && _config$updates !== void 0 && _config$updates.useClassicUpdates);\n}\nfunction getUpdateUrl(config, username) {\n  var _config$updates2;\n  if ((_config$updates2 = config.updates) !== null && _config$updates2 !== void 0 && _config$updates2.url) {\n    var _config$updates3;\n    return (_config$updates3 = config.updates) === null || _config$updates3 === void 0 ? void 0 : _config$updates3.url;\n  }\n  if (!shouldDefaultToClassicUpdates(config)) {\n    return null;\n  }\n  var user = typeof config.owner === 'string' ? config.owner : username;\n  if (!user) {\n    return null;\n  }\n  return `https://exp.host/@${user}/${config.slug}`;\n}\nfunction getAppVersion(config) {\n  var _config$version;\n  return (_config$version = config.version) !== null && _config$version !== void 0 ? _config$version : '1.0.0';\n}\nfunction getNativeVersion(config, platform) {\n  var version = _().IOSConfig.Version.getVersion(config);\n  switch (platform) {\n    case 'ios':\n      {\n        var buildNumber = _().IOSConfig.Version.getBuildNumber(config);\n        return `${version}(${buildNumber})`;\n      }\n    case 'android':\n      {\n        var versionCode = _().AndroidConfig.Version.getVersionCode(config);\n        return `${version}(${versionCode})`;\n      }\n    default:\n      {\n        throw new Error(`\"${platform}\" is not a supported platform. Choose either \"ios\" or \"android\".`);\n      }\n  }\n}\nvar withRuntimeVersion = function withRuntimeVersion(config) {\n  var _config$ios, _config$android;\n  if ((_config$ios = config.ios) !== null && _config$ios !== void 0 && _config$ios.runtimeVersion || config.runtimeVersion) {\n    var runtimeVersion = getRuntimeVersion(config, 'ios');\n    if (runtimeVersion) {\n      config.ios = _objectSpread(_objectSpread({}, config.ios), {}, {\n        runtimeVersion: runtimeVersion\n      });\n    }\n  }\n  if ((_config$android = config.android) !== null && _config$android !== void 0 && _config$android.runtimeVersion || config.runtimeVersion) {\n    var _runtimeVersion = getRuntimeVersion(config, 'android');\n    if (_runtimeVersion) {\n      config.android = _objectSpread(_objectSpread({}, config.android), {}, {\n        runtimeVersion: _runtimeVersion\n      });\n    }\n  }\n  delete config.runtimeVersion;\n  return config;\n};\nexports.withRuntimeVersion = withRuntimeVersion;\nfunction getRuntimeVersionNullable() {\n  for (var _len = arguments.length, _ref = new Array(_len), _key = 0; _key < _len; _key++) {\n    _ref[_key] = arguments[_key];\n  }\n  var config = _ref[0],\n    platform = _ref[1];\n  try {\n    return getRuntimeVersion(config, platform);\n  } catch (e) {\n    if ((0, _getenv().boolish)('EXPO_DEBUG', false)) {\n      console.log(e);\n    }\n    return null;\n  }\n}\nfunction getRuntimeVersion(config, platform) {\n  var _config$platform$runt, _config$platform;\n  var runtimeVersion = (_config$platform$runt = (_config$platform = config[platform]) === null || _config$platform === void 0 ? void 0 : _config$platform.runtimeVersion) !== null && _config$platform$runt !== void 0 ? _config$platform$runt : config.runtimeVersion;\n  if (!runtimeVersion) {\n    return null;\n  }\n  if (typeof runtimeVersion === 'string') {\n    return runtimeVersion;\n  } else if (runtimeVersion.policy === 'appVersion') {\n    return getAppVersion(config);\n  } else if (runtimeVersion.policy === 'nativeVersion') {\n    return getNativeVersion(config, platform);\n  } else if (runtimeVersion.policy === 'sdkVersion') {\n    if (!config.sdkVersion) {\n      throw new Error(\"An SDK version must be defined when using the 'sdkVersion' runtime policy.\");\n    }\n    return (0, _sdkRuntimeVersions().getRuntimeVersionForSDKVersion)(config.sdkVersion);\n  }\n  throw new Error(`\"${typeof runtimeVersion === 'object' ? JSON.stringify(runtimeVersion) : runtimeVersion}\" is not a valid runtime version. getRuntimeVersion only supports a string, \"sdkVersion\", \"appVersion\", or \"nativeVersion\" policy.`);\n}\nfunction getSDKVersion(config) {\n  return typeof config.sdkVersion === 'string' ? config.sdkVersion : null;\n}\nfunction getUpdatesEnabled(config, username) {\n  var _config$updates4;\n  if (((_config$updates4 = config.updates) === null || _config$updates4 === void 0 ? void 0 : _config$updates4.enabled) !== undefined) {\n    return config.updates.enabled;\n  }\n  return getUpdateUrl(config, username) !== null;\n}\nfunction getUpdatesTimeout(config) {\n  var _config$updates$fallb, _config$updates5;\n  return (_config$updates$fallb = (_config$updates5 = config.updates) === null || _config$updates5 === void 0 ? void 0 : _config$updates5.fallbackToCacheTimeout) !== null && _config$updates$fallb !== void 0 ? _config$updates$fallb : 0;\n}\nfunction getUpdatesCheckOnLaunch(config, expoUpdatesPackageVersion) {\n  var _config$updates6, _config$updates7, _config$updates8, _config$updates9;\n  if (((_config$updates6 = config.updates) === null || _config$updates6 === void 0 ? void 0 : _config$updates6.checkAutomatically) === 'ON_ERROR_RECOVERY') {\n    if (expoUpdatesPackageVersion && _semver().default.gte(expoUpdatesPackageVersion, '0.11.0')) {\n      return 'ERROR_RECOVERY_ONLY';\n    }\n    return 'NEVER';\n  } else if (((_config$updates7 = config.updates) === null || _config$updates7 === void 0 ? void 0 : _config$updates7.checkAutomatically) === 'ON_LOAD') {\n    return 'ALWAYS';\n  } else if (((_config$updates8 = config.updates) === null || _config$updates8 === void 0 ? void 0 : _config$updates8.checkAutomatically) === 'WIFI_ONLY') {\n    return 'WIFI_ONLY';\n  } else if (((_config$updates9 = config.updates) === null || _config$updates9 === void 0 ? void 0 : _config$updates9.checkAutomatically) === 'NEVER') {\n    return 'NEVER';\n  }\n  return 'ALWAYS';\n}\nfunction getUpdatesCodeSigningCertificate(projectRoot, config) {\n  var _config$updates10;\n  var codeSigningCertificatePath = (_config$updates10 = config.updates) === null || _config$updates10 === void 0 ? void 0 : _config$updates10.codeSigningCertificate;\n  if (!codeSigningCertificatePath) {\n    return undefined;\n  }\n  var finalPath = _path().default.join(projectRoot, codeSigningCertificatePath);\n  if (!_fs().default.existsSync(finalPath)) {\n    throw new Error(`File not found at \\`updates.codeSigningCertificate\\` path: ${finalPath}`);\n  }\n  return _fs().default.readFileSync(finalPath, 'utf8');\n}\nfunction getUpdatesCodeSigningMetadata(config) {\n  var _config$updates11;\n  return (_config$updates11 = config.updates) === null || _config$updates11 === void 0 ? void 0 : _config$updates11.codeSigningMetadata;\n}\nfunction getUpdatesCodeSigningMetadataStringified(config) {\n  var metadata = getUpdatesCodeSigningMetadata(config);\n  if (!metadata) {\n    return undefined;\n  }\n  return JSON.stringify(metadata);\n}\nfunction getUpdatesRequestHeaders(config) {\n  var _config$updates12;\n  return (_config$updates12 = config.updates) === null || _config$updates12 === void 0 ? void 0 : _config$updates12.requestHeaders;\n}\nfunction getUpdatesRequestHeadersStringified(config) {\n  var metadata = getUpdatesRequestHeaders(config);\n  if (!metadata) {\n    return undefined;\n  }\n  return JSON.stringify(metadata);\n}","map":{"version":3,"names":["_sdkRuntimeVersions","data","require","_fs","_interopRequireDefault","_getenv","_path","_resolveFrom","_semver","_","obj","__esModule","default","getExpoUpdatesPackageVersion","projectRoot","expoUpdatesPackageJsonPath","silent","existsSync","packageJson","JSON","parse","readFileSync","version","shouldDefaultToClassicUpdates","config","_config$updates","updates","useClassicUpdates","getUpdateUrl","username","_config$updates2","url","_config$updates3","user","owner","slug","getAppVersion","_config$version","getNativeVersion","platform","IOSConfig","Version","getVersion","buildNumber","getBuildNumber","versionCode","AndroidConfig","getVersionCode","Error","withRuntimeVersion","_config$ios","_config$android","ios","runtimeVersion","getRuntimeVersion","_objectSpread","android","exports","getRuntimeVersionNullable","_len","arguments","length","_ref","Array","_key","e","boolish","console","log","_config$platform$runt","_config$platform","policy","sdkVersion","getRuntimeVersionForSDKVersion","stringify","getSDKVersion","getUpdatesEnabled","_config$updates4","enabled","undefined","getUpdatesTimeout","_config$updates$fallb","_config$updates5","fallbackToCacheTimeout","getUpdatesCheckOnLaunch","expoUpdatesPackageVersion","_config$updates6","_config$updates7","_config$updates8","_config$updates9","checkAutomatically","gte","getUpdatesCodeSigningCertificate","_config$updates10","codeSigningCertificatePath","codeSigningCertificate","finalPath","join","getUpdatesCodeSigningMetadata","_config$updates11","codeSigningMetadata","getUpdatesCodeSigningMetadataStringified","metadata","getUpdatesRequestHeaders","_config$updates12","requestHeaders","getUpdatesRequestHeadersStringified"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\utils\\Updates.ts"],"sourcesContent":["import { Android, ExpoConfig, IOS } from '@expo/config-types';\nimport { getRuntimeVersionForSDKVersion } from '@expo/sdk-runtime-versions';\nimport fs from 'fs';\nimport { boolish } from 'getenv';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\nimport semver from 'semver';\n\nimport { AndroidConfig, IOSConfig } from '..';\n\nexport type ExpoConfigUpdates = Pick<\n  ExpoConfig,\n  'sdkVersion' | 'owner' | 'runtimeVersion' | 'updates' | 'slug'\n>;\n\nexport function getExpoUpdatesPackageVersion(projectRoot: string): string | null {\n  const expoUpdatesPackageJsonPath = resolveFrom.silent(projectRoot, 'expo-updates/package.json');\n  if (!expoUpdatesPackageJsonPath || !fs.existsSync(expoUpdatesPackageJsonPath)) {\n    return null;\n  }\n  const packageJson = JSON.parse(fs.readFileSync(expoUpdatesPackageJsonPath, 'utf8'));\n  return packageJson.version;\n}\n\nfunction shouldDefaultToClassicUpdates(config: Pick<ExpoConfigUpdates, 'updates'>): boolean {\n  return !!config.updates?.useClassicUpdates;\n}\n\nexport function getUpdateUrl(\n  config: Pick<ExpoConfigUpdates, 'owner' | 'slug' | 'updates'>,\n  username: string | null\n): string | null {\n  if (config.updates?.url) {\n    return config.updates?.url;\n  }\n\n  if (!shouldDefaultToClassicUpdates(config)) {\n    return null;\n  }\n\n  const user = typeof config.owner === 'string' ? config.owner : username;\n  if (!user) {\n    return null;\n  }\n  return `https://exp.host/@${user}/${config.slug}`;\n}\n\nexport function getAppVersion(config: Pick<ExpoConfig, 'version'>): string {\n  return config.version ?? '1.0.0';\n}\n\nexport function getNativeVersion(\n  config: Pick<ExpoConfig, 'version'> & {\n    android?: Pick<Android, 'versionCode'>;\n    ios?: Pick<IOS, 'buildNumber'>;\n  },\n  platform: 'android' | 'ios'\n): string {\n  const version = IOSConfig.Version.getVersion(config);\n  switch (platform) {\n    case 'ios': {\n      const buildNumber = IOSConfig.Version.getBuildNumber(config);\n      return `${version}(${buildNumber})`;\n    }\n    case 'android': {\n      const versionCode = AndroidConfig.Version.getVersionCode(config);\n      return `${version}(${versionCode})`;\n    }\n    default: {\n      throw new Error(\n        `\"${platform}\" is not a supported platform. Choose either \"ios\" or \"android\".`\n      );\n    }\n  }\n}\n\n/**\n * Compute runtime version policies.\n * @return an expoConfig with only string valued platform specific runtime versions.\n */\nexport const withRuntimeVersion: (config: ExpoConfig) => ExpoConfig = (config) => {\n  if (config.ios?.runtimeVersion || config.runtimeVersion) {\n    const runtimeVersion = getRuntimeVersion(config, 'ios');\n    if (runtimeVersion) {\n      config.ios = {\n        ...config.ios,\n        runtimeVersion,\n      };\n    }\n  }\n  if (config.android?.runtimeVersion || config.runtimeVersion) {\n    const runtimeVersion = getRuntimeVersion(config, 'android');\n    if (runtimeVersion) {\n      config.android = {\n        ...config.android,\n        runtimeVersion,\n      };\n    }\n  }\n  delete config.runtimeVersion;\n  return config;\n};\n\nexport function getRuntimeVersionNullable(\n  ...[config, platform]: Parameters<typeof getRuntimeVersion>\n): string | null {\n  try {\n    return getRuntimeVersion(config, platform);\n  } catch (e) {\n    if (boolish('EXPO_DEBUG', false)) {\n      console.log(e);\n    }\n    return null;\n  }\n}\n\nexport function getRuntimeVersion(\n  config: Pick<ExpoConfig, 'version' | 'runtimeVersion' | 'sdkVersion'> & {\n    android?: Pick<Android, 'versionCode' | 'runtimeVersion'>;\n    ios?: Pick<IOS, 'buildNumber' | 'runtimeVersion'>;\n  },\n  platform: 'android' | 'ios'\n): string | null {\n  const runtimeVersion = config[platform]?.runtimeVersion ?? config.runtimeVersion;\n  if (!runtimeVersion) {\n    return null;\n  }\n\n  if (typeof runtimeVersion === 'string') {\n    return runtimeVersion;\n  } else if (runtimeVersion.policy === 'appVersion') {\n    return getAppVersion(config);\n  } else if (runtimeVersion.policy === 'nativeVersion') {\n    return getNativeVersion(config, platform);\n  } else if (runtimeVersion.policy === 'sdkVersion') {\n    if (!config.sdkVersion) {\n      throw new Error(\"An SDK version must be defined when using the 'sdkVersion' runtime policy.\");\n    }\n    return getRuntimeVersionForSDKVersion(config.sdkVersion);\n  }\n\n  throw new Error(\n    `\"${\n      typeof runtimeVersion === 'object' ? JSON.stringify(runtimeVersion) : runtimeVersion\n    }\" is not a valid runtime version. getRuntimeVersion only supports a string, \"sdkVersion\", \"appVersion\", or \"nativeVersion\" policy.`\n  );\n}\n\nexport function getSDKVersion(config: Pick<ExpoConfigUpdates, 'sdkVersion'>): string | null {\n  return typeof config.sdkVersion === 'string' ? config.sdkVersion : null;\n}\n\nexport function getUpdatesEnabled(\n  config: Pick<ExpoConfigUpdates, 'owner' | 'slug' | 'updates'>,\n  username: string | null\n): boolean {\n  // allow override of enabled property\n  if (config.updates?.enabled !== undefined) {\n    return config.updates.enabled;\n  }\n\n  // enable if URL is set (which respects shouldDefaultToClassicUpdates)\n  return getUpdateUrl(config, username) !== null;\n}\n\nexport function getUpdatesTimeout(config: Pick<ExpoConfigUpdates, 'updates'>): number {\n  return config.updates?.fallbackToCacheTimeout ?? 0;\n}\n\nexport function getUpdatesCheckOnLaunch(\n  config: Pick<ExpoConfigUpdates, 'updates'>,\n  expoUpdatesPackageVersion?: string | null\n): 'NEVER' | 'ERROR_RECOVERY_ONLY' | 'ALWAYS' | 'WIFI_ONLY' {\n  if (config.updates?.checkAutomatically === 'ON_ERROR_RECOVERY') {\n    // native 'ERROR_RECOVERY_ONLY' option was only introduced in 0.11.x\n    if (expoUpdatesPackageVersion && semver.gte(expoUpdatesPackageVersion, '0.11.0')) {\n      return 'ERROR_RECOVERY_ONLY';\n    }\n    return 'NEVER';\n  } else if (config.updates?.checkAutomatically === 'ON_LOAD') {\n    return 'ALWAYS';\n  } else if (config.updates?.checkAutomatically === 'WIFI_ONLY') {\n    return 'WIFI_ONLY';\n  } else if (config.updates?.checkAutomatically === 'NEVER') {\n    return 'NEVER';\n  }\n  return 'ALWAYS';\n}\n\nexport function getUpdatesCodeSigningCertificate(\n  projectRoot: string,\n  config: Pick<ExpoConfigUpdates, 'updates'>\n): string | undefined {\n  const codeSigningCertificatePath = config.updates?.codeSigningCertificate;\n  if (!codeSigningCertificatePath) {\n    return undefined;\n  }\n\n  const finalPath = path.join(projectRoot, codeSigningCertificatePath);\n  if (!fs.existsSync(finalPath)) {\n    throw new Error(`File not found at \\`updates.codeSigningCertificate\\` path: ${finalPath}`);\n  }\n\n  return fs.readFileSync(finalPath, 'utf8');\n}\n\nexport function getUpdatesCodeSigningMetadata(\n  config: Pick<ExpoConfigUpdates, 'updates'>\n): NonNullable<ExpoConfigUpdates['updates']>['codeSigningMetadata'] {\n  return config.updates?.codeSigningMetadata;\n}\n\nexport function getUpdatesCodeSigningMetadataStringified(\n  config: Pick<ExpoConfigUpdates, 'updates'>\n): string | undefined {\n  const metadata = getUpdatesCodeSigningMetadata(config);\n  if (!metadata) {\n    return undefined;\n  }\n\n  return JSON.stringify(metadata);\n}\n\nexport function getUpdatesRequestHeaders(\n  config: Pick<ExpoConfigUpdates, 'updates'>\n): NonNullable<ExpoConfigUpdates['updates']>['requestHeaders'] {\n  return config.updates?.requestHeaders;\n}\n\nexport function getUpdatesRequestHeadersStringified(\n  config: Pick<ExpoConfigUpdates, 'updates'>\n): string | undefined {\n  const metadata = getUpdatesRequestHeaders(config);\n  if (!metadata) {\n    return undefined;\n  }\n\n  return JSON.stringify(metadata);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}