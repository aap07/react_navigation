{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar InteractionManager = function () {\n  function InteractionManager() {\n    _classCallCheck(this, InteractionManager);\n    this.waitForRelations = new Map();\n    this.simultaneousRelations = new Map();\n  }\n  _createClass(InteractionManager, [{\n    key: \"configureInteractions\",\n    value: function configureInteractions(handler, config) {\n      this.dropRelationsForHandlerWithTag(handler.getTag());\n      if (config.waitFor) {\n        var waitFor = [];\n        config.waitFor.forEach(function (otherHandler) {\n          if (typeof otherHandler === 'number') {\n            waitFor.push(otherHandler);\n          } else {\n            waitFor.push(otherHandler.handlerTag);\n          }\n        });\n        this.waitForRelations.set(handler.getTag(), waitFor);\n      }\n      if (config.simultaneousHandlers) {\n        var simultaneousHandlers = [];\n        config.simultaneousHandlers.forEach(function (otherHandler) {\n          if (typeof otherHandler === 'number') {\n            simultaneousHandlers.push(otherHandler);\n          } else {\n            simultaneousHandlers.push(otherHandler.handlerTag);\n          }\n        });\n        this.simultaneousRelations.set(handler.getTag(), simultaneousHandlers);\n      }\n    }\n  }, {\n    key: \"shouldWaitForHandlerFailure\",\n    value: function shouldWaitForHandlerFailure(handler, otherHandler) {\n      var waitFor = this.waitForRelations.get(handler.getTag());\n      if (!waitFor) {\n        return false;\n      }\n      var shouldWait = false;\n      waitFor.forEach(function (tag) {\n        if (tag === otherHandler.getTag()) {\n          shouldWait = true;\n          return;\n        }\n      });\n      return shouldWait;\n    }\n  }, {\n    key: \"shouldRecognizeSimultaneously\",\n    value: function shouldRecognizeSimultaneously(handler, otherHandler) {\n      var simultaneousHandlers = this.simultaneousRelations.get(handler.getTag());\n      if (!simultaneousHandlers) {\n        return false;\n      }\n      var shouldRecognizeSimultaneously = false;\n      simultaneousHandlers.forEach(function (tag) {\n        if (tag === otherHandler.getTag()) {\n          shouldRecognizeSimultaneously = true;\n          return;\n        }\n      });\n      return shouldRecognizeSimultaneously;\n    }\n  }, {\n    key: \"shouldRequireHandlerToWaitForFailure\",\n    value: function shouldRequireHandlerToWaitForFailure(_handler, _otherHandler) {\n      return false;\n    }\n  }, {\n    key: \"shouldHandlerBeCancelledBy\",\n    value: function shouldHandlerBeCancelledBy(_handler, _otherHandler) {\n      return false;\n    }\n  }, {\n    key: \"dropRelationsForHandlerWithTag\",\n    value: function dropRelationsForHandlerWithTag(handlerTag) {\n      this.waitForRelations.delete(handlerTag);\n      this.simultaneousRelations.delete(handlerTag);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.waitForRelations.clear();\n      this.simultaneousRelations.clear();\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!this.instance) {\n        this.instance = new InteractionManager();\n      }\n      return this.instance;\n    }\n  }]);\n  return InteractionManager;\n}();\nexport { InteractionManager as default };","map":{"version":3,"names":["InteractionManager","_classCallCheck","waitForRelations","Map","simultaneousRelations","_createClass","key","value","configureInteractions","handler","config","dropRelationsForHandlerWithTag","getTag","waitFor","forEach","otherHandler","push","handlerTag","set","simultaneousHandlers","shouldWaitForHandlerFailure","get","shouldWait","tag","shouldRecognizeSimultaneously","shouldRequireHandlerToWaitForFailure","_handler","_otherHandler","shouldHandlerBeCancelledBy","delete","reset","clear","getInstance","instance","default"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/react-native-gesture-handler/src/web/tools/InteractionManager.ts"],"sourcesContent":["import GestureHandler from '../handlers/GestureHandler';\nimport { Config, Handler } from '../interfaces';\n\nexport default class InteractionManager {\n  private static instance: InteractionManager;\n  private readonly waitForRelations: Map<number, number[]> = new Map();\n  private readonly simultaneousRelations: Map<number, number[]> = new Map();\n\n  // Private becaues of singleton\n  // eslint-disable-next-line no-useless-constructor, @typescript-eslint/no-empty-function\n  private constructor() {}\n\n  public configureInteractions(handler: GestureHandler, config: Config) {\n    this.dropRelationsForHandlerWithTag(handler.getTag());\n\n    if (config.waitFor) {\n      const waitFor: number[] = [];\n      config.waitFor.forEach((otherHandler: Handler): void => {\n        // New API reference\n        if (typeof otherHandler === 'number') {\n          waitFor.push(otherHandler);\n        } else {\n          // Old API reference\n          waitFor.push(otherHandler.handlerTag);\n        }\n      });\n\n      this.waitForRelations.set(handler.getTag(), waitFor);\n    }\n\n    if (config.simultaneousHandlers) {\n      const simultaneousHandlers: number[] = [];\n      config.simultaneousHandlers.forEach((otherHandler: Handler): void => {\n        if (typeof otherHandler === 'number') {\n          simultaneousHandlers.push(otherHandler);\n        } else {\n          simultaneousHandlers.push(otherHandler.handlerTag);\n        }\n      });\n\n      this.simultaneousRelations.set(handler.getTag(), simultaneousHandlers);\n    }\n  }\n\n  public shouldWaitForHandlerFailure(\n    handler: GestureHandler,\n    otherHandler: GestureHandler\n  ): boolean {\n    const waitFor: number[] | undefined = this.waitForRelations.get(\n      handler.getTag()\n    );\n    if (!waitFor) {\n      return false;\n    }\n\n    let shouldWait = false;\n\n    waitFor.forEach((tag: number): void => {\n      if (tag === otherHandler.getTag()) {\n        shouldWait = true;\n        return; //Returns from callback\n      }\n    });\n\n    return shouldWait;\n  }\n\n  public shouldRecognizeSimultaneously(\n    handler: GestureHandler,\n    otherHandler: GestureHandler\n  ): boolean {\n    const simultaneousHandlers: number[] | undefined =\n      this.simultaneousRelations.get(handler.getTag());\n    if (!simultaneousHandlers) {\n      return false;\n    }\n\n    let shouldRecognizeSimultaneously = false;\n\n    simultaneousHandlers.forEach((tag: number): void => {\n      if (tag === otherHandler.getTag()) {\n        shouldRecognizeSimultaneously = true;\n        return;\n      }\n    });\n\n    return shouldRecognizeSimultaneously;\n  }\n\n  public shouldRequireHandlerToWaitForFailure(\n    _handler: GestureHandler,\n    _otherHandler: GestureHandler\n  ): boolean {\n    //TODO: Implement logic\n    return false;\n  }\n\n  public shouldHandlerBeCancelledBy(\n    _handler: GestureHandler,\n    _otherHandler: GestureHandler\n  ): boolean {\n    //TODO: Implement logic\n    return false;\n  }\n\n  public dropRelationsForHandlerWithTag(handlerTag: number): void {\n    this.waitForRelations.delete(handlerTag);\n    this.simultaneousRelations.delete(handlerTag);\n  }\n\n  public reset() {\n    this.waitForRelations.clear();\n    this.simultaneousRelations.clear();\n  }\n\n  public static getInstance(): InteractionManager {\n    if (!this.instance) {\n      this.instance = new InteractionManager();\n    }\n\n    return this.instance;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}