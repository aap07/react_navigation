{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getWorkspaceRoot = getWorkspaceRoot;\nexports.getEntryWithServerRoot = getEntryWithServerRoot;\nexports.getMetroServerRoot = getMetroServerRoot;\nexports.resolveMainModuleName = resolveMainModuleName;\nexports.createBundleUrlPath = createBundleUrlPath;\nexports.DEVELOPER_TOOL = void 0;\nvar _config = require(\"@expo/config\");\nvar _findYarnWorkspaceRoot = _interopRequireDefault(require(\"find-yarn-workspace-root\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _url = require(\"url\");\nvar Log = _interopRequireWildcard(require(\"../../../log\"));\nvar _env = require(\"../../../utils/env\");\nvar _url1 = require(\"../../../utils/url\");\nvar ProjectDevices = _interopRequireWildcard(require(\"../../project/devices\"));\nvar _platformBundlers = require(\"../platformBundlers\");\nvar _webTemplate = require(\"../webTemplate\");\nvar _expoMiddleware = require(\"./ExpoMiddleware\");\nvar _resolveAssets = require(\"./resolveAssets\");\nvar _resolveEntryPoint = require(\"./resolveEntryPoint\");\nvar _resolvePlatform = require(\"./resolvePlatform\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar debug = require(\"debug\")(\"expo:start:server:middleware:manifest\");\nfunction getWorkspaceRoot(projectRoot) {\n  try {\n    return (0, _findYarnWorkspaceRoot).default(projectRoot);\n  } catch (error) {\n    if (error.message.includes(\"Unexpected end of JSON input\")) {\n      return null;\n    }\n    throw error;\n  }\n}\nfunction getEntryWithServerRoot(projectRoot, projectConfig, platform) {\n  return _path.default.relative(getMetroServerRoot(projectRoot), (0, _resolveEntryPoint).resolveAbsoluteEntryPoint(projectRoot, platform, projectConfig));\n}\nfunction getMetroServerRoot(projectRoot) {\n  if (_env.env.EXPO_USE_METRO_WORKSPACE_ROOT) {\n    var ref;\n    return (ref = getWorkspaceRoot(projectRoot)) != null ? ref : projectRoot;\n  }\n  return projectRoot;\n}\nfunction resolveMainModuleName(projectRoot, projectConfig, platform) {\n  var entryPoint = getEntryWithServerRoot(projectRoot, projectConfig, platform);\n  debug(`Resolved entry point: ${entryPoint} (project root: ${projectRoot})`);\n  return (0, _url1).stripExtension(entryPoint, \"js\");\n}\nfunction createBundleUrlPath(_ref) {\n  var platform = _ref.platform,\n    mainModuleName = _ref.mainModuleName,\n    mode = _ref.mode,\n    _ref$minify = _ref.minify,\n    minify = _ref$minify === void 0 ? mode === \"production\" : _ref$minify,\n    environment = _ref.environment,\n    serializerOutput = _ref.serializerOutput;\n  var queryParams = new URLSearchParams({\n    platform: encodeURIComponent(platform),\n    dev: String(mode !== \"production\"),\n    hot: String(false),\n    lazy: String(!_env.env.EXPO_NO_METRO_LAZY)\n  });\n  if (minify) {\n    queryParams.append(\"minify\", String(minify));\n  }\n  if (environment) {\n    queryParams.append(\"resolver.environment\", environment);\n    queryParams.append(\"transform.environment\", environment);\n  }\n  if (serializerOutput) {\n    queryParams.append(\"serializer.output\", serializerOutput);\n  }\n  return `/${encodeURI(mainModuleName)}.bundle?${queryParams.toString()}`;\n}\nvar DEVELOPER_TOOL = \"expo-cli\";\nexports.DEVELOPER_TOOL = DEVELOPER_TOOL;\nvar ManifestMiddleware = function (_expoMiddleware$ExpoM) {\n  _inherits(ManifestMiddleware, _expoMiddleware$ExpoM);\n  var _super = _createSuper(ManifestMiddleware);\n  function ManifestMiddleware(projectRoot, options) {\n    var _this;\n    _classCallCheck(this, ManifestMiddleware);\n    _this = _super.call(this, projectRoot, [\"/\", \"/manifest\", \"/index.exp\"]);\n    _this.projectRoot = projectRoot;\n    _this.options = options;\n    _this.initialProjectConfig = (0, _config).getConfig(projectRoot);\n    return _this;\n  }\n  _createClass(ManifestMiddleware, [{\n    key: \"_resolveProjectSettingsAsync\",\n    value: function () {\n      var _resolveProjectSettingsAsync2 = _asyncToGenerator(function* (_ref2) {\n        var platform = _ref2.platform,\n          hostname = _ref2.hostname;\n        var projectConfig = (0, _config).getConfig(this.projectRoot);\n        var mainModuleName = this.resolveMainModuleName(projectConfig, platform);\n        var expoGoConfig = this.getExpoGoConfig({\n          mainModuleName: mainModuleName,\n          hostname: hostname\n        });\n        var hostUri = this.options.constructUrl({\n          scheme: \"\",\n          hostname: hostname\n        });\n        var bundleUrl = this._getBundleUrl({\n          platform: platform,\n          mainModuleName: mainModuleName,\n          hostname: hostname\n        });\n        yield this.mutateManifestWithAssetsAsync(projectConfig.exp, bundleUrl);\n        return {\n          expoGoConfig: expoGoConfig,\n          hostUri: hostUri,\n          bundleUrl: bundleUrl,\n          exp: projectConfig.exp\n        };\n      });\n      function _resolveProjectSettingsAsync(_x) {\n        return _resolveProjectSettingsAsync2.apply(this, arguments);\n      }\n      return _resolveProjectSettingsAsync;\n    }()\n  }, {\n    key: \"resolveMainModuleName\",\n    value: function resolveMainModuleName(projectConfig, platform) {\n      var entryPoint = getEntryWithServerRoot(this.projectRoot, projectConfig, platform);\n      debug(`Resolved entry point: ${entryPoint} (project root: ${this.projectRoot})`);\n      if (this.options.isNativeWebpack) {\n        entryPoint = \"index.js\";\n      }\n      return (0, _url1).stripExtension(entryPoint, \"js\");\n    }\n  }, {\n    key: \"saveDevicesAsync\",\n    value: function () {\n      var _saveDevicesAsync = _asyncToGenerator(function* (req) {\n        var ref;\n        var deviceIds = (ref = req.headers) == null ? void 0 : ref[\"expo-dev-client-id\"];\n        if (deviceIds) {\n          yield ProjectDevices.saveDevicesAsync(this.projectRoot, deviceIds).catch(function (e) {\n            return Log.exception(e);\n          });\n        }\n      });\n      function saveDevicesAsync(_x2) {\n        return _saveDevicesAsync.apply(this, arguments);\n      }\n      return saveDevicesAsync;\n    }()\n  }, {\n    key: \"_getBundleUrl\",\n    value: function _getBundleUrl(_ref3) {\n      var platform = _ref3.platform,\n        mainModuleName = _ref3.mainModuleName,\n        hostname = _ref3.hostname;\n      var _mode;\n      var path = createBundleUrlPath({\n        mode: (_mode = this.options.mode) != null ? _mode : \"development\",\n        minify: this.options.minify,\n        platform: platform,\n        mainModuleName: mainModuleName\n      });\n      return this.options.constructUrl({\n        scheme: \"http\",\n        hostname: hostname\n      }) + path;\n    }\n  }, {\n    key: \"_getBundleUrlPath\",\n    value: function _getBundleUrlPath(_ref4) {\n      var platform = _ref4.platform,\n        mainModuleName = _ref4.mainModuleName;\n      var queryParams = new URLSearchParams({\n        platform: encodeURIComponent(platform),\n        dev: String(this.options.mode !== \"production\"),\n        hot: String(false),\n        lazy: String(!_env.env.EXPO_NO_METRO_LAZY)\n      });\n      if (this.options.minify) {\n        queryParams.append(\"minify\", String(this.options.minify));\n      }\n      return `/${encodeURI(mainModuleName)}.bundle?${queryParams.toString()}`;\n    }\n  }, {\n    key: \"getExpoGoConfig\",\n    value: function getExpoGoConfig(_ref5) {\n      var mainModuleName = _ref5.mainModuleName,\n        hostname = _ref5.hostname;\n      return {\n        debuggerHost: this.options.constructUrl({\n          scheme: \"\",\n          hostname: hostname\n        }),\n        logUrl: this.options.constructUrl({\n          scheme: \"http\",\n          hostname: hostname\n        }) + \"/logs\",\n        developer: {\n          tool: DEVELOPER_TOOL,\n          projectRoot: this.projectRoot\n        },\n        packagerOpts: {\n          dev: this.options.mode !== \"production\"\n        },\n        mainModuleName: mainModuleName,\n        __flipperHack: \"React Native packager is running\"\n      };\n    }\n  }, {\n    key: \"mutateManifestWithAssetsAsync\",\n    value: function () {\n      var _mutateManifestWithAssetsAsync = _asyncToGenerator(function* (manifest, bundleUrl) {\n        var _this2 = this;\n        yield (0, _resolveAssets).resolveManifestAssets(this.projectRoot, {\n          manifest: manifest,\n          resolver: function () {\n            var _resolver = _asyncToGenerator(function* (path) {\n              if (_this2.options.isNativeWebpack) {\n                return (0, _url).resolve(bundleUrl.match(/^https?:\\/\\/.*?\\//)[0], path);\n              }\n              return bundleUrl.match(/^https?:\\/\\/.*?\\//)[0] + \"assets/\" + path;\n            });\n            function resolver(_x5) {\n              return _resolver.apply(this, arguments);\n            }\n            return resolver;\n          }()\n        });\n        yield (0, _resolveAssets).resolveGoogleServicesFile(this.projectRoot, manifest);\n      });\n      function mutateManifestWithAssetsAsync(_x3, _x4) {\n        return _mutateManifestWithAssetsAsync.apply(this, arguments);\n      }\n      return mutateManifestWithAssetsAsync;\n    }()\n  }, {\n    key: \"getWebBundleUrl\",\n    value: function getWebBundleUrl() {\n      var platform = \"web\";\n      var mainModuleName = this.resolveMainModuleName(this.initialProjectConfig, platform);\n      return this._getBundleUrlPath({\n        platform: platform,\n        mainModuleName: mainModuleName\n      });\n    }\n  }, {\n    key: \"handleWebRequestAsync\",\n    value: function () {\n      var _handleWebRequestAsync = _asyncToGenerator(function* (req, res) {\n        var bundleUrl = this.getWebBundleUrl();\n        res.setHeader(\"Content-Type\", \"text/html\");\n        res.end(yield (0, _webTemplate).createTemplateHtmlFromExpoConfigAsync(this.projectRoot, {\n          exp: this.initialProjectConfig.exp,\n          scripts: [bundleUrl]\n        }));\n      });\n      function handleWebRequestAsync(_x6, _x7) {\n        return _handleWebRequestAsync.apply(this, arguments);\n      }\n      return handleWebRequestAsync;\n    }()\n  }, {\n    key: \"checkBrowserRequestAsync\",\n    value: function () {\n      var _checkBrowserRequestAsync = _asyncToGenerator(function* (req, res, next) {\n        var bundlers = (0, _platformBundlers).getPlatformBundlers(this.initialProjectConfig.exp);\n        if (bundlers.web === \"metro\") {\n          var platform = (0, _resolvePlatform).parsePlatformHeader(req);\n          if (!platform || platform === \"web\") {\n            var ref;\n            if (((ref = this.initialProjectConfig.exp.web) == null ? void 0 : ref.output) === \"static\") {\n              next();\n              return true;\n            } else {\n              yield this.handleWebRequestAsync(req, res);\n              return true;\n            }\n          }\n        }\n        return false;\n      });\n      function checkBrowserRequestAsync(_x8, _x9, _x10) {\n        return _checkBrowserRequestAsync.apply(this, arguments);\n      }\n      return checkBrowserRequestAsync;\n    }()\n  }, {\n    key: \"handleRequestAsync\",\n    value: function () {\n      var _handleRequestAsync = _asyncToGenerator(function* (req, res, next) {\n        if (yield this.checkBrowserRequestAsync(req, res, next)) {\n          return;\n        }\n        yield this.saveDevicesAsync(req);\n        var options = this.getParsedHeaders(req);\n        var _yield$this$_getManif = yield this._getManifestResponseAsync(options),\n          body = _yield$this$_getManif.body,\n          version = _yield$this$_getManif.version,\n          headers = _yield$this$_getManif.headers;\n        for (var _ref6 of headers) {\n          var _ref7 = _slicedToArray(_ref6, 2);\n          var headerName = _ref7[0];\n          var headerValue = _ref7[1];\n          res.setHeader(headerName, headerValue);\n        }\n        res.end(body);\n        this.trackManifest(version != null ? version : null);\n      });\n      function handleRequestAsync(_x11, _x12, _x13) {\n        return _handleRequestAsync.apply(this, arguments);\n      }\n      return handleRequestAsync;\n    }()\n  }]);\n  return ManifestMiddleware;\n}(_expoMiddleware.ExpoMiddleware);\nexports.ManifestMiddleware = ManifestMiddleware;","map":{"version":3,"names":["_slicedToArray","require","_asyncToGenerator","_classCallCheck","_createClass","_inherits","_possibleConstructorReturn","_getPrototypeOf","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","getWorkspaceRoot","getEntryWithServerRoot","getMetroServerRoot","resolveMainModuleName","createBundleUrlPath","_config","_findYarnWorkspaceRoot","_interopRequireDefault","_path","_url","Log","_interopRequireWildcard","_env","_url1","ProjectDevices","_platformBundlers","_webTemplate","_expoMiddleware","_resolveAssets","_resolveEntryPoint","_resolvePlatform","debug","projectRoot","default","error","message","includes","projectConfig","platform","relative","resolveAbsoluteEntryPoint","env","EXPO_USE_METRO_WORKSPACE_ROOT","ref","entryPoint","stripExtension","_ref","mainModuleName","mode","_ref$minify","minify","environment","serializerOutput","queryParams","URLSearchParams","encodeURIComponent","dev","String","hot","lazy","EXPO_NO_METRO_LAZY","append","encodeURI","toString","DEVELOPER_TOOL","ManifestMiddleware","_expoMiddleware$ExpoM","_super","options","_this","initialProjectConfig","getConfig","key","value","_resolveProjectSettingsAsync2","_ref2","hostname","expoGoConfig","getExpoGoConfig","hostUri","constructUrl","scheme","bundleUrl","_getBundleUrl","mutateManifestWithAssetsAsync","exp","_resolveProjectSettingsAsync","_x","isNativeWebpack","_saveDevicesAsync","req","deviceIds","headers","saveDevicesAsync","catch","exception","_x2","_ref3","_mode","path","_getBundleUrlPath","_ref4","_ref5","debuggerHost","logUrl","developer","tool","packagerOpts","__flipperHack","_mutateManifestWithAssetsAsync","manifest","_this2","resolveManifestAssets","resolver","_resolver","resolve","match","_x5","resolveGoogleServicesFile","_x3","_x4","getWebBundleUrl","_handleWebRequestAsync","res","setHeader","end","createTemplateHtmlFromExpoConfigAsync","scripts","handleWebRequestAsync","_x6","_x7","_checkBrowserRequestAsync","next","bundlers","getPlatformBundlers","web","parsePlatformHeader","output","checkBrowserRequestAsync","_x8","_x9","_x10","_handleRequestAsync","getParsedHeaders","_yield$this$_getManif","_getManifestResponseAsync","body","version","_ref6","_ref7","headerName","headerValue","trackManifest","handleRequestAsync","_x11","_x12","_x13","ExpoMiddleware"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\middleware\\ManifestMiddleware.ts"],"sourcesContent":["import { ExpoConfig, ExpoGoConfig, getConfig, ProjectConfig } from '@expo/config';\nimport findWorkspaceRoot from 'find-yarn-workspace-root';\nimport path from 'path';\nimport { resolve } from 'url';\n\nimport * as Log from '../../../log';\nimport { env } from '../../../utils/env';\nimport { stripExtension } from '../../../utils/url';\nimport * as ProjectDevices from '../../project/devices';\nimport { UrlCreator } from '../UrlCreator';\nimport { getPlatformBundlers } from '../platformBundlers';\nimport { createTemplateHtmlFromExpoConfigAsync } from '../webTemplate';\nimport { ExpoMiddleware } from './ExpoMiddleware';\nimport { resolveGoogleServicesFile, resolveManifestAssets } from './resolveAssets';\nimport { resolveAbsoluteEntryPoint } from './resolveEntryPoint';\nimport { parsePlatformHeader, RuntimePlatform } from './resolvePlatform';\nimport { ServerHeaders, ServerNext, ServerRequest, ServerResponse } from './server.types';\n\nconst debug = require('debug')('expo:start:server:middleware:manifest') as typeof console.log;\n\n/** Wraps `findWorkspaceRoot` and guards against having an empty `package.json` file in an upper directory. */\nexport function getWorkspaceRoot(projectRoot: string): string | null {\n  try {\n    return findWorkspaceRoot(projectRoot);\n  } catch (error: any) {\n    if (error.message.includes('Unexpected end of JSON input')) {\n      return null;\n    }\n    throw error;\n  }\n}\n\nexport function getEntryWithServerRoot(\n  projectRoot: string,\n  projectConfig: ProjectConfig,\n  platform: string\n) {\n  return path.relative(\n    getMetroServerRoot(projectRoot),\n    resolveAbsoluteEntryPoint(projectRoot, platform, projectConfig)\n  );\n}\n\nexport function getMetroServerRoot(projectRoot: string) {\n  if (env.EXPO_USE_METRO_WORKSPACE_ROOT) {\n    return getWorkspaceRoot(projectRoot) ?? projectRoot;\n  }\n\n  return projectRoot;\n}\n\n/** Get the main entry module ID (file) relative to the project root. */\nexport function resolveMainModuleName(\n  projectRoot: string,\n  projectConfig: ProjectConfig,\n  platform: string\n): string {\n  const entryPoint = getEntryWithServerRoot(projectRoot, projectConfig, platform);\n\n  debug(`Resolved entry point: ${entryPoint} (project root: ${projectRoot})`);\n\n  return stripExtension(entryPoint, 'js');\n}\n\nexport function createBundleUrlPath({\n  platform,\n  mainModuleName,\n  mode,\n  minify = mode === 'production',\n  environment,\n  serializerOutput,\n}: {\n  platform: string;\n  mainModuleName: string;\n  mode: string;\n  minify?: boolean;\n  environment?: string;\n  serializerOutput?: 'static';\n}): string {\n  const queryParams = new URLSearchParams({\n    platform: encodeURIComponent(platform),\n    dev: String(mode !== 'production'),\n    // TODO: Is this still needed?\n    hot: String(false),\n    lazy: String(!env.EXPO_NO_METRO_LAZY),\n  });\n\n  if (minify) {\n    queryParams.append('minify', String(minify));\n  }\n  if (environment) {\n    queryParams.append('resolver.environment', environment);\n    queryParams.append('transform.environment', environment);\n  }\n  if (serializerOutput) {\n    queryParams.append('serializer.output', serializerOutput);\n  }\n\n  return `/${encodeURI(mainModuleName)}.bundle?${queryParams.toString()}`;\n}\n\n/** Info about the computer hosting the dev server. */\nexport interface HostInfo {\n  host: string;\n  server: 'expo';\n  serverVersion: string;\n  serverDriver: string | null;\n  serverOS: NodeJS.Platform;\n  serverOSVersion: string;\n}\n\n/** Parsed values from the supported request headers. */\nexport interface ManifestRequestInfo {\n  /** Platform to serve. */\n  platform: RuntimePlatform;\n  /** Requested host name. */\n  hostname?: string | null;\n}\n\n/** Project related info. */\nexport type ResponseProjectSettings = {\n  expoGoConfig: ExpoGoConfig;\n  hostUri: string;\n  bundleUrl: string;\n  exp: ExpoConfig;\n};\n\nexport const DEVELOPER_TOOL = 'expo-cli';\n\nexport type ManifestMiddlewareOptions = {\n  /** Should start the dev servers in development mode (minify). */\n  mode?: 'development' | 'production';\n  /** Should instruct the bundler to create minified bundles. */\n  minify?: boolean;\n  constructUrl: UrlCreator['constructUrl'];\n  isNativeWebpack?: boolean;\n  privateKeyPath?: string;\n};\n\n/** Base middleware creator for serving the Expo manifest (like the index.html but for native runtimes). */\nexport abstract class ManifestMiddleware<\n  TManifestRequestInfo extends ManifestRequestInfo\n> extends ExpoMiddleware {\n  private initialProjectConfig: ProjectConfig;\n\n  constructor(protected projectRoot: string, protected options: ManifestMiddlewareOptions) {\n    super(\n      projectRoot,\n      /**\n       * Only support `/`, `/manifest`, `/index.exp` for the manifest middleware.\n       */\n      ['/', '/manifest', '/index.exp']\n    );\n    this.initialProjectConfig = getConfig(projectRoot);\n  }\n\n  /** Exposed for testing. */\n  public async _resolveProjectSettingsAsync({\n    platform,\n    hostname,\n  }: Pick<TManifestRequestInfo, 'hostname' | 'platform'>): Promise<ResponseProjectSettings> {\n    // Read the config\n    const projectConfig = getConfig(this.projectRoot);\n\n    // Read from headers\n    const mainModuleName = this.resolveMainModuleName(projectConfig, platform);\n\n    // Create the manifest and set fields within it\n    const expoGoConfig = this.getExpoGoConfig({\n      mainModuleName,\n      hostname,\n    });\n\n    const hostUri = this.options.constructUrl({ scheme: '', hostname });\n\n    const bundleUrl = this._getBundleUrl({\n      platform,\n      mainModuleName,\n      hostname,\n    });\n\n    // Resolve all assets and set them on the manifest as URLs\n    await this.mutateManifestWithAssetsAsync(projectConfig.exp, bundleUrl);\n\n    return {\n      expoGoConfig,\n      hostUri,\n      bundleUrl,\n      exp: projectConfig.exp,\n    };\n  }\n\n  /** Get the main entry module ID (file) relative to the project root. */\n  private resolveMainModuleName(projectConfig: ProjectConfig, platform: string): string {\n    let entryPoint = getEntryWithServerRoot(this.projectRoot, projectConfig, platform);\n\n    debug(`Resolved entry point: ${entryPoint} (project root: ${this.projectRoot})`);\n\n    // NOTE(Bacon): Webpack is currently hardcoded to index.bundle on native\n    // in the future (TODO) we should move this logic into a Webpack plugin and use\n    // a generated file name like we do on web.\n    // const server = getDefaultDevServer();\n    // // TODO: Move this into BundlerDevServer and read this info from self.\n    // const isNativeWebpack = server instanceof WebpackBundlerDevServer && server.isTargetingNative();\n    if (this.options.isNativeWebpack) {\n      entryPoint = 'index.js';\n    }\n\n    return stripExtension(entryPoint, 'js');\n  }\n\n  /** Parse request headers into options. */\n  public abstract getParsedHeaders(req: ServerRequest): TManifestRequestInfo;\n\n  /** Store device IDs that were sent in the request headers. */\n  private async saveDevicesAsync(req: ServerRequest) {\n    const deviceIds = req.headers?.['expo-dev-client-id'];\n    if (deviceIds) {\n      await ProjectDevices.saveDevicesAsync(this.projectRoot, deviceIds).catch((e) =>\n        Log.exception(e)\n      );\n    }\n  }\n\n  /** Create the bundle URL (points to the single JS entry file). Exposed for testing. */\n  public _getBundleUrl({\n    platform,\n    mainModuleName,\n    hostname,\n  }: {\n    platform: string;\n    hostname?: string | null;\n    mainModuleName: string;\n  }): string {\n    const path = createBundleUrlPath({\n      mode: this.options.mode ?? 'development',\n      minify: this.options.minify,\n      platform,\n      mainModuleName,\n    });\n\n    return (\n      this.options.constructUrl({\n        scheme: 'http',\n        // hostType: this.options.location.hostType,\n        hostname,\n      }) + path\n    );\n  }\n\n  public _getBundleUrlPath({\n    platform,\n    mainModuleName,\n  }: {\n    platform: string;\n    mainModuleName: string;\n  }): string {\n    const queryParams = new URLSearchParams({\n      platform: encodeURIComponent(platform),\n      dev: String(this.options.mode !== 'production'),\n      // TODO: Is this still needed?\n      hot: String(false),\n      lazy: String(!env.EXPO_NO_METRO_LAZY),\n    });\n\n    if (this.options.minify) {\n      queryParams.append('minify', String(this.options.minify));\n    }\n\n    return `/${encodeURI(mainModuleName)}.bundle?${queryParams.toString()}`;\n  }\n\n  /** Log telemetry. */\n  protected abstract trackManifest(version?: string): void;\n\n  /** Get the manifest response to return to the runtime. This file contains info regarding where the assets can be loaded from. Exposed for testing. */\n  public abstract _getManifestResponseAsync(options: TManifestRequestInfo): Promise<{\n    body: string;\n    version: string;\n    headers: ServerHeaders;\n  }>;\n\n  private getExpoGoConfig({\n    mainModuleName,\n    hostname,\n  }: {\n    mainModuleName: string;\n    hostname?: string | null;\n  }): ExpoGoConfig {\n    return {\n      // localhost:8081\n      debuggerHost: this.options.constructUrl({ scheme: '', hostname }),\n      // http://localhost:8081/logs -- used to send logs to the CLI for displaying in the terminal.\n      // This is deprecated in favor of the WebSocket connection setup in Metro.\n      logUrl: this.options.constructUrl({ scheme: 'http', hostname }) + '/logs',\n      // Required for Expo Go to function.\n      developer: {\n        tool: DEVELOPER_TOOL,\n        projectRoot: this.projectRoot,\n      },\n      packagerOpts: {\n        // Required for dev client.\n        dev: this.options.mode !== 'production',\n      },\n      // Indicates the name of the main bundle.\n      mainModuleName,\n      // Add this string to make Flipper register React Native / Metro as \"running\".\n      // Can be tested by running:\n      // `METRO_SERVER_PORT=8081 open -a flipper.app`\n      // Where 8081 is the port where the Expo project is being hosted.\n      __flipperHack: 'React Native packager is running',\n    };\n  }\n\n  /** Resolve all assets and set them on the manifest as URLs */\n  private async mutateManifestWithAssetsAsync(manifest: ExpoConfig, bundleUrl: string) {\n    await resolveManifestAssets(this.projectRoot, {\n      manifest,\n      resolver: async (path) => {\n        if (this.options.isNativeWebpack) {\n          // When using our custom dev server, just do assets normally\n          // without the `assets/` subpath redirect.\n          return resolve(bundleUrl!.match(/^https?:\\/\\/.*?\\//)![0], path);\n        }\n        return bundleUrl!.match(/^https?:\\/\\/.*?\\//)![0] + 'assets/' + path;\n      },\n    });\n    // The server normally inserts this but if we're offline we'll do it here\n    await resolveGoogleServicesFile(this.projectRoot, manifest);\n  }\n\n  public getWebBundleUrl() {\n    const platform = 'web';\n    // Read from headers\n    const mainModuleName = this.resolveMainModuleName(this.initialProjectConfig, platform);\n    return this._getBundleUrlPath({\n      platform,\n      mainModuleName,\n    });\n  }\n\n  /**\n   * Web platforms should create an index.html response using the same script resolution as native.\n   *\n   * Instead of adding a `bundleUrl` to a `manifest.json` (native) we'll add a `<script src=\"\">`\n   * to an `index.html`, this enables the web platform to load JavaScript from the server.\n   */\n  private async handleWebRequestAsync(req: ServerRequest, res: ServerResponse) {\n    // Read from headers\n    const bundleUrl = this.getWebBundleUrl();\n\n    res.setHeader('Content-Type', 'text/html');\n\n    res.end(\n      await createTemplateHtmlFromExpoConfigAsync(this.projectRoot, {\n        exp: this.initialProjectConfig.exp,\n        scripts: [bundleUrl],\n      })\n    );\n  }\n\n  /** Exposed for testing. */\n  async checkBrowserRequestAsync(req: ServerRequest, res: ServerResponse, next: ServerNext) {\n    // Read the config\n    const bundlers = getPlatformBundlers(this.initialProjectConfig.exp);\n    if (bundlers.web === 'metro') {\n      // NOTE(EvanBacon): This effectively disables the safety check we do on custom runtimes to ensure\n      // the `expo-platform` header is included. When `web.bundler=web`, if the user has non-standard Expo\n      // code loading then they'll get a web bundle without a clear assertion of platform support.\n      const platform = parsePlatformHeader(req);\n      // On web, serve the public folder\n      if (!platform || platform === 'web') {\n        if (this.initialProjectConfig.exp.web?.output === 'static') {\n          // Skip the spa-styled index.html when static generation is enabled.\n          next();\n          return true;\n        } else {\n          await this.handleWebRequestAsync(req, res);\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  async handleRequestAsync(\n    req: ServerRequest,\n    res: ServerResponse,\n    next: ServerNext\n  ): Promise<void> {\n    // First check for standard JavaScript runtimes (aka legacy browsers like Chrome).\n    if (await this.checkBrowserRequestAsync(req, res, next)) {\n      return;\n    }\n\n    // Save device IDs for dev client.\n    await this.saveDevicesAsync(req);\n\n    // Read from headers\n    const options = this.getParsedHeaders(req);\n    const { body, version, headers } = await this._getManifestResponseAsync(options);\n    for (const [headerName, headerValue] of headers) {\n      res.setHeader(headerName, headerValue);\n    }\n    res.end(body);\n\n    // Log analytics\n    this.trackManifest(version ?? null);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}