{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar path_1 = tslib_1.__importDefault(require(\"path\"));\nvar fs_1 = require(\"fs\");\nvar debug_1 = tslib_1.__importDefault(require(\"debug\"));\nvar command_exists_1 = require(\"command-exists\");\nvar shared_1 = require(\"./shared\");\nvar utils_1 = require(\"../utils\");\nvar user_interface_1 = tslib_1.__importDefault(require(\"../user-interface\"));\nvar debug = debug_1.default('devcert:platforms:linux');\nvar LinuxPlatform = function () {\n  function LinuxPlatform() {\n    _classCallCheck(this, LinuxPlatform);\n    this.FIREFOX_NSS_DIR = path_1.default.join(process.env.HOME, '.mozilla/firefox/*');\n    this.CHROME_NSS_DIR = path_1.default.join(process.env.HOME, '.pki/nssdb');\n    this.FIREFOX_BIN_PATH = '/usr/bin/firefox';\n    this.CHROME_BIN_PATH = '/usr/bin/google-chrome';\n    this.HOST_FILE_PATH = '/etc/hosts';\n  }\n  _createClass(LinuxPlatform, [{\n    key: \"addToTrustStores\",\n    value: function addToTrustStores(certificatePath) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return tslib_1.__awaiter(this, void 0, void 0, function* () {\n        debug('Adding devcert root CA to Linux system-wide trust stores');\n        utils_1.run('sudo', ['cp', certificatePath, '/usr/local/share/ca-certificates/devcert.crt']);\n        utils_1.run('sudo', ['update-ca-certificates']);\n        if (this.isFirefoxInstalled()) {\n          debug('Firefox install detected: adding devcert root CA to Firefox-specific trust stores ...');\n          if (!command_exists_1.sync('certutil')) {\n            if (options.skipCertutilInstall) {\n              debug('NSS tooling is not already installed, and `skipCertutil` is true, so falling back to manual certificate install for Firefox');\n              shared_1.openCertificateInFirefox(this.FIREFOX_BIN_PATH, certificatePath);\n            } else {\n              debug('NSS tooling is not already installed. Trying to install NSS tooling now with `apt install`');\n              utils_1.run('sudo', ['apt', 'install', 'libnss3-tools']);\n              debug('Installing certificate into Firefox trust stores using NSS tooling');\n              yield shared_1.closeFirefox();\n              yield shared_1.addCertificateToNSSCertDB(this.FIREFOX_NSS_DIR, certificatePath, 'certutil');\n            }\n          }\n        } else {\n          debug('Firefox does not appear to be installed, skipping Firefox-specific steps...');\n        }\n        if (this.isChromeInstalled()) {\n          debug('Chrome install detected: adding devcert root CA to Chrome trust store ...');\n          if (!command_exists_1.sync('certutil')) {\n            user_interface_1.default.warnChromeOnLinuxWithoutCertutil();\n          } else {\n            yield shared_1.closeFirefox();\n            yield shared_1.addCertificateToNSSCertDB(this.CHROME_NSS_DIR, certificatePath, 'certutil');\n          }\n        } else {\n          debug('Chrome does not appear to be installed, skipping Chrome-specific steps...');\n        }\n      });\n    }\n  }, {\n    key: \"removeFromTrustStores\",\n    value: function removeFromTrustStores(certificatePath) {\n      try {\n        utils_1.run('sudo', ['rm', '/usr/local/share/ca-certificates/devcert.crt']);\n        utils_1.run('sudo', ['update-ca-certificates']);\n      } catch (e) {\n        debug(`failed to remove ${certificatePath} from /usr/local/share/ca-certificates, continuing. ${e.toString()}`);\n      }\n      if (command_exists_1.sync('certutil')) {\n        if (this.isFirefoxInstalled()) {\n          shared_1.removeCertificateFromNSSCertDB(this.FIREFOX_NSS_DIR, certificatePath, 'certutil');\n        }\n        if (this.isChromeInstalled()) {\n          shared_1.removeCertificateFromNSSCertDB(this.CHROME_NSS_DIR, certificatePath, 'certutil');\n        }\n      }\n    }\n  }, {\n    key: \"addDomainToHostFileIfMissing\",\n    value: function addDomainToHostFileIfMissing(domain) {\n      return tslib_1.__awaiter(this, void 0, void 0, function* () {\n        var trimDomain = domain.trim().replace(/[\\s;]/g, '');\n        var hostsFileContents = fs_1.readFileSync(this.HOST_FILE_PATH, 'utf8');\n        if (!hostsFileContents.includes(trimDomain)) {\n          utils_1.sudoAppend(this.HOST_FILE_PATH, `127.0.0.1 ${trimDomain}\\n`);\n        }\n      });\n    }\n  }, {\n    key: \"deleteProtectedFiles\",\n    value: function deleteProtectedFiles(filepath) {\n      shared_1.assertNotTouchingFiles(filepath, 'delete');\n      utils_1.run('sudo', ['rm', '-rf', filepath]);\n    }\n  }, {\n    key: \"readProtectedFile\",\n    value: function readProtectedFile(filepath) {\n      return tslib_1.__awaiter(this, void 0, void 0, function* () {\n        shared_1.assertNotTouchingFiles(filepath, 'read');\n        return (yield utils_1.run('sudo', ['cat', filepath])).toString().trim();\n      });\n    }\n  }, {\n    key: \"writeProtectedFile\",\n    value: function writeProtectedFile(filepath, contents) {\n      return tslib_1.__awaiter(this, void 0, void 0, function* () {\n        shared_1.assertNotTouchingFiles(filepath, 'write');\n        if (fs_1.existsSync(filepath)) {\n          yield utils_1.run('sudo', ['rm', filepath]);\n        }\n        fs_1.writeFileSync(filepath, contents);\n        yield utils_1.run('sudo', ['chown', '0', filepath]);\n        yield utils_1.run('sudo', ['chmod', '600', filepath]);\n      });\n    }\n  }, {\n    key: \"isFirefoxInstalled\",\n    value: function isFirefoxInstalled() {\n      return fs_1.existsSync(this.FIREFOX_BIN_PATH);\n    }\n  }, {\n    key: \"isChromeInstalled\",\n    value: function isChromeInstalled() {\n      return fs_1.existsSync(this.CHROME_BIN_PATH);\n    }\n  }]);\n  return LinuxPlatform;\n}();\nexports.default = LinuxPlatform;","map":{"version":3,"names":["path_1","tslib_1","__importDefault","require","fs_1","debug_1","command_exists_1","shared_1","utils_1","user_interface_1","debug","default","LinuxPlatform","_classCallCheck","FIREFOX_NSS_DIR","join","process","env","HOME","CHROME_NSS_DIR","FIREFOX_BIN_PATH","CHROME_BIN_PATH","HOST_FILE_PATH","_createClass","key","value","addToTrustStores","certificatePath","options","arguments","length","undefined","run","isFirefoxInstalled","sync","skipCertutilInstall","openCertificateInFirefox","closeFirefox","addCertificateToNSSCertDB","isChromeInstalled","warnChromeOnLinuxWithoutCertutil","removeFromTrustStores","e","toString","removeCertificateFromNSSCertDB","addDomainToHostFileIfMissing","domain","trimDomain","trim","replace","hostsFileContents","readFileSync","includes","sudoAppend","deleteProtectedFiles","filepath","assertNotTouchingFiles","readProtectedFile","writeProtectedFile","contents","existsSync","writeFileSync","exports"],"sources":["\\Users\\evanbacon\\Documents\\GitHub\\devcert\\platforms\\linux.ts"],"sourcesContent":["import path from 'path';\nimport { existsSync as exists, readFileSync as read, writeFileSync as writeFile } from 'fs';\nimport createDebug from 'debug';\nimport { sync as commandExists } from 'command-exists';\nimport { addCertificateToNSSCertDB, assertNotTouchingFiles, openCertificateInFirefox, closeFirefox, removeCertificateFromNSSCertDB } from './shared';\nimport { run, sudoAppend } from '../utils';\nimport { Options } from '../index';\nimport UI from '../user-interface';\nimport { Platform } from '.';\n\nconst debug = createDebug('devcert:platforms:linux');\n\nexport default class LinuxPlatform implements Platform {\n\n  private FIREFOX_NSS_DIR = path.join(process.env.HOME, '.mozilla/firefox/*');\n  private CHROME_NSS_DIR = path.join(process.env.HOME, '.pki/nssdb');\n  private FIREFOX_BIN_PATH = '/usr/bin/firefox';\n  private CHROME_BIN_PATH = '/usr/bin/google-chrome';\n\n  private HOST_FILE_PATH = '/etc/hosts';\n\n  /**\n   * Linux is surprisingly difficult. There seems to be multiple system-wide\n   * repositories for certs, so we copy ours to each. However, Firefox does it's\n   * usual separate trust store. Plus Chrome relies on the NSS tooling (like\n   * Firefox), but uses the user's NSS database, unlike Firefox (which uses a\n   * separate Mozilla one). And since Chrome doesn't prompt the user with a GUI\n   * flow when opening certs, if we can't use certutil to install our certificate\n   * into the user's NSS database, we're out of luck.\n   */\n  async addToTrustStores(certificatePath: string, options: Options = {}): Promise<void> {\n\n    debug('Adding devcert root CA to Linux system-wide trust stores');\n    // run(`sudo cp ${ certificatePath } /etc/ssl/certs/devcert.crt`);\n    run('sudo', ['cp', certificatePath, '/usr/local/share/ca-certificates/devcert.crt']);\n    // run(`sudo bash -c \"cat ${ certificatePath } >> /etc/ssl/certs/ca-certificates.crt\"`);\n    run('sudo', ['update-ca-certificates']);\n\n    if (this.isFirefoxInstalled()) {\n      // Firefox\n      debug('Firefox install detected: adding devcert root CA to Firefox-specific trust stores ...');\n      if (!commandExists('certutil')) {\n        if (options.skipCertutilInstall) {\n          debug('NSS tooling is not already installed, and `skipCertutil` is true, so falling back to manual certificate install for Firefox');\n          openCertificateInFirefox(this.FIREFOX_BIN_PATH, certificatePath);\n        } else {\n          debug('NSS tooling is not already installed. Trying to install NSS tooling now with `apt install`');\n          run('sudo',  ['apt', 'install', 'libnss3-tools']);\n          debug('Installing certificate into Firefox trust stores using NSS tooling');\n          await closeFirefox();\n          await addCertificateToNSSCertDB(this.FIREFOX_NSS_DIR, certificatePath, 'certutil');\n        }\n      }\n    } else {\n      debug('Firefox does not appear to be installed, skipping Firefox-specific steps...');\n    }\n\n    if (this.isChromeInstalled()) {\n      debug('Chrome install detected: adding devcert root CA to Chrome trust store ...');\n      if (!commandExists('certutil')) {\n        UI.warnChromeOnLinuxWithoutCertutil();\n      } else {\n        await closeFirefox();\n        await addCertificateToNSSCertDB(this.CHROME_NSS_DIR, certificatePath, 'certutil');\n      }\n    } else {\n      debug('Chrome does not appear to be installed, skipping Chrome-specific steps...');\n    }\n  }\n  \n  removeFromTrustStores(certificatePath: string) {\n    try {\n      run('sudo', ['rm', '/usr/local/share/ca-certificates/devcert.crt']);\n      run('sudo', ['update-ca-certificates']);\n    } catch (e) {\n      debug(`failed to remove ${ certificatePath } from /usr/local/share/ca-certificates, continuing. ${ e.toString() }`);\n    }\n    if (commandExists('certutil')) {\n      if (this.isFirefoxInstalled()) {\n        removeCertificateFromNSSCertDB(this.FIREFOX_NSS_DIR, certificatePath, 'certutil');\n      }\n      if (this.isChromeInstalled()) {\n        removeCertificateFromNSSCertDB(this.CHROME_NSS_DIR, certificatePath, 'certutil');\n      }\n    }\n  }\n\n  async addDomainToHostFileIfMissing(domain: string) {\n    const trimDomain = domain.trim().replace(/[\\s;]/g,'')\n    let hostsFileContents = read(this.HOST_FILE_PATH, 'utf8');\n    if (!hostsFileContents.includes(trimDomain)) {\n      sudoAppend(this.HOST_FILE_PATH, `127.0.0.1 ${trimDomain}\\n`);\n    }\n  }\n\n  deleteProtectedFiles(filepath: string) {\n    assertNotTouchingFiles(filepath, 'delete');\n    run('sudo', ['rm', '-rf', filepath]);\n  }\n\n  async readProtectedFile(filepath: string) {\n    assertNotTouchingFiles(filepath, 'read');\n    return (await run('sudo', ['cat', filepath])).toString().trim();\n  }\n\n  async writeProtectedFile(filepath: string, contents: string) {\n    assertNotTouchingFiles(filepath, 'write');\n    if (exists(filepath)) {\n      await run('sudo', ['rm', filepath]);\n    }\n    writeFile(filepath, contents);\n    await run('sudo', ['chown', '0', filepath]);\n    await run('sudo', ['chmod', '600', filepath]);\n  }\n\n  private isFirefoxInstalled() {\n    return exists(this.FIREFOX_BIN_PATH);\n  }\n\n  private isChromeInstalled() {\n    return exists(this.CHROME_BIN_PATH);\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}