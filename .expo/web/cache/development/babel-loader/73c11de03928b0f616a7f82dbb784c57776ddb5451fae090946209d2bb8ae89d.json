{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.openBrowserAsync = openBrowserAsync;\nvar _betterOpn = _interopRequireDefault(require(\"better-opn\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction openBrowserAsync(_x, _x2) {\n  return _openBrowserAsync.apply(this, arguments);\n}\nfunction _openBrowserAsync() {\n  _openBrowserAsync = _asyncToGenerator(function* (target, options) {\n    if (process.platform !== \"win32\") {\n      return yield (0, _betterOpn).default(target, options);\n    }\n    var oldSystemRoot = process.env.SYSTEMROOT;\n    try {\n      var _SYSTEMROOT;\n      process.env.SYSTEMROOT = (_SYSTEMROOT = process.env.SYSTEMROOT) != null ? _SYSTEMROOT : process.env.SystemRoot;\n      return yield (0, _betterOpn).default(target, options);\n    } finally {\n      process.env.SYSTEMROOT = oldSystemRoot;\n    }\n  });\n  return _openBrowserAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","openBrowserAsync","_betterOpn","_interopRequireDefault","_x","_x2","_openBrowserAsync","apply","arguments","target","options","process","platform","default","oldSystemRoot","env","SYSTEMROOT","_SYSTEMROOT","SystemRoot"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\utils\\open.ts"],"sourcesContent":["import betterOpenBrowserAsync from 'better-opn';\n\n/**\n * Due to a bug in `open`, which is used as fallback on Windows, we need to ensure `process.env.SYSTEMROOT` is set.\n * This environment variable is set by Windows on `SystemRoot`, causing `open` to execute a command with an \"unknown\" drive letter.\n *\n * @see https://github.com/sindresorhus/open/issues/205\n */\nexport async function openBrowserAsync(\n  target: string,\n  options?: any\n): Promise<import('child_process').ChildProcess | false> {\n  if (process.platform !== 'win32') {\n    return await betterOpenBrowserAsync(target, options);\n  }\n\n  const oldSystemRoot = process.env.SYSTEMROOT;\n  try {\n    process.env.SYSTEMROOT = process.env.SYSTEMROOT ?? process.env.SystemRoot;\n    return await betterOpenBrowserAsync(target, options);\n  } finally {\n    process.env.SYSTEMROOT = oldSystemRoot;\n  }\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,iBAAA,GAAAC,OAAA;;;;QAQsBC,gBAAgB,GAAhBA,gBAAgB;AARH,IAAAC,UAAY,GAAAC,sBAAA,CAAAH,OAAA,CAAZ,YAAY;;;;;;SAQzBC,gBAAgBA,CAAAG,EAAA,EAAAC,GAAA;EAAA,OAAAC,iBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,kBAAA;EAAAA,iBAAA,GAAAP,iBAAA,CAA/B,WACLU,MAAc,EACdC,OAAa,EAC0C;IACvD,IAAIC,OAAO,CAACC,QAAQ,KAAK,OAAO,EAAE;MAChC,aAAa,IAAAV,UAAsB,EAAiBW,OAAjB,CAACJ,MAAM,EAAEC,OAAO,CAAC;;IAGtD,IAAMI,aAAa,GAAGH,OAAO,CAACI,GAAG,CAACC,UAAU;IAC5C,IAAI;UACuBC,WAAsB;MAA/CN,OAAO,CAACI,GAAG,CAACC,UAAU,GAAG,CAAAC,WAAsB,GAAtBN,OAAO,CAACI,GAAG,CAACC,UAAU,YAAtBC,WAAsB,GAAIN,OAAO,CAACI,GAAG,CAACG,UAAU;MACzE,aAAa,IAAAhB,UAAsB,EAAiBW,OAAjB,CAACJ,MAAM,EAAEC,OAAO,CAAC;KACrD,SAAS;MACRC,OAAO,CAACI,GAAG,CAACC,UAAU,GAAGF,aAAa;;GAEzC;EAAA,OAAAR,iBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}