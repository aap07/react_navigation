{"ast":null,"code":"import { NODE_TYPE } from \"./identity.js\";","map":{"version":3,"names":["NODE_TYPE"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/dist/nodes/Pair.d.ts"],"sourcesContent":["import { CreateNodeContext } from '../doc/createNode.js';\nimport type { CollectionItem } from '../parse/cst.js';\nimport type { Schema } from '../schema/Schema.js';\nimport type { StringifyContext } from '../stringify/stringify.js';\nimport { addPairToJSMap } from './addPairToJSMap.js';\nimport { NODE_TYPE } from './identity.js';\nimport type { ToJSContext } from './toJS.js';\nexport declare function createPair(key: unknown, value: unknown, ctx: CreateNodeContext): Pair<import(\"./Node.js\").Node, import(\"./YAMLMap.js\").YAMLMap<unknown, unknown> | import(\"./Scalar.js\").Scalar<unknown> | import(\"./Alias.js\").Alias | import(\"./YAMLSeq.js\").YAMLSeq<unknown>>;\nexport declare class Pair<K = unknown, V = unknown> {\n    readonly [NODE_TYPE]: symbol;\n    /** Always Node or null when parsed, but can be set to anything. */\n    key: K;\n    /** Always Node or null when parsed, but can be set to anything. */\n    value: V | null;\n    /** The CST token that was composed into this pair.  */\n    srcToken?: CollectionItem;\n    constructor(key: K, value?: V | null);\n    clone(schema?: Schema): Pair<K, V>;\n    toJSON(_?: unknown, ctx?: ToJSContext): ReturnType<typeof addPairToJSMap>;\n    toString(ctx?: StringifyContext, onComment?: () => void, onChompKeep?: () => void): string;\n}\n"],"mappings":"AAKA,SAASA,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}