{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDevicesAsync = getDevicesAsync;\nvar _errors = require(\"../../../utils/errors\");\nvar _adb = require(\"./adb\");\nvar _emulator = require(\"./emulator\");\nfunction getDevicesAsync() {\n  return _getDevicesAsync.apply(this, arguments);\n}\nfunction _getDevicesAsync() {\n  _getDevicesAsync = _asyncToGenerator(function* () {\n    var bootedDevices = yield (0, _adb).getAttachedDevicesAsync();\n    var data = yield (0, _emulator).listAvdsAsync();\n    var connectedNames = bootedDevices.map(function (_ref) {\n      var name = _ref.name;\n      return name;\n    });\n    var offlineEmulators = data.filter(function (_ref2) {\n      var name = _ref2.name;\n      return !connectedNames.includes(name);\n    }).map(function (_ref3) {\n      var name = _ref3.name,\n        type = _ref3.type;\n      return {\n        name: name,\n        type: type,\n        isBooted: false,\n        isAuthorized: true\n      };\n    });\n    var allDevices = bootedDevices.concat(offlineEmulators);\n    if (!allDevices.length) {\n      throw new _errors.CommandError([`No Android connected device found, and no emulators could be started automatically.`, `Please connect a device or create an emulator (https://docs.expo.dev/workflow/android-studio-emulator).`, `Then follow the instructions here to enable USB debugging:`, `https://developer.android.com/studio/run/device.html#developer-device-options. If you are using Genymotion go to Settings -> ADB, select \"Use custom Android SDK tools\", and point it at your Android SDK directory.`].join(\"\\n\"));\n    }\n    return allDevices;\n  });\n  return _getDevicesAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","getDevicesAsync","_errors","_adb","_emulator","_getDevicesAsync","apply","arguments","bootedDevices","getAttachedDevicesAsync","data","listAvdsAsync","connectedNames","map","_ref","name","offlineEmulators","filter","_ref2","includes","_ref3","type","isBooted","isAuthorized","allDevices","concat","length","CommandError","join"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\platforms\\android\\getDevices.ts"],"sourcesContent":["import { CommandError } from '../../../utils/errors';\nimport { Device, getAttachedDevicesAsync } from './adb';\nimport { listAvdsAsync } from './emulator';\n\n/** Get a list of all devices including offline emulators. Asserts if no devices are available. */\nexport async function getDevicesAsync(): Promise<Device[]> {\n  const bootedDevices = await getAttachedDevicesAsync();\n\n  const data = await listAvdsAsync();\n  const connectedNames = bootedDevices.map(({ name }) => name);\n\n  const offlineEmulators = data\n    .filter(({ name }) => !connectedNames.includes(name))\n    .map(({ name, type }) => {\n      return {\n        name,\n        type,\n        isBooted: false,\n        // TODO: Are emulators always authorized?\n        isAuthorized: true,\n      };\n    });\n\n  const allDevices = bootedDevices.concat(offlineEmulators);\n\n  if (!allDevices.length) {\n    throw new CommandError(\n      [\n        `No Android connected device found, and no emulators could be started automatically.`,\n        `Please connect a device or create an emulator (https://docs.expo.dev/workflow/android-studio-emulator).`,\n        `Then follow the instructions here to enable USB debugging:`,\n        `https://developer.android.com/studio/run/device.html#developer-device-options. If you are using Genymotion go to Settings -> ADB, select \"Use custom Android SDK tools\", and point it at your Android SDK directory.`,\n      ].join('\\n')\n    );\n  }\n\n  return allDevices;\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,iBAAA,GAAAC,OAAA;;;;QAKsBC,eAAe,GAAfA,eAAe;AALR,IAAAC,OAAuB,GAAAF,OAAA;AACJ,IAAAG,IAAO,GAAAH,OAAA;AACzB,IAAAI,SAAY,GAAAJ,OAAA;AAAA,SAGpBC,eAAeA,CAAA;EAAA,OAAAI,gBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,iBAAA;EAAAA,gBAAA,GAAAN,iBAAA,CAA9B,aAAoD;IACzD,IAAMS,aAAa,SAAS,IAAAL,IAAuB,EAAEM,uBAAF,EAAE;IAErD,IAAMC,IAAI,SAAS,IAAAN,SAAa,EAAEO,aAAF,EAAE;IAClC,IAAMC,cAAc,GAAGJ,aAAa,CAACK,GAAG,CAAC,UAAAC,IAAA;MAAA,IAAGC,IAAI,GAAAD,IAAA,CAAJC,IAAI;MAAA,OAAOA,IAAI;IAAA,EAAC;IAE5D,IAAMC,gBAAgB,GAAGN,IAAI,CAC1BO,MAAM,CAAC,UAAAC,KAAA;MAAA,IAAGH,IAAI,GAAAG,KAAA,CAAJH,IAAI;MAAA,OAAO,CAACH,cAAc,CAACO,QAAQ,CAACJ,IAAI,CAAC;IAAA,EAAC,CACpDF,GAAG,CAAC,UAAAO,KAAA,EAAoB;MAAA,IAAjBL,IAAI,GAAAK,KAAA,CAAJL,IAAI;QAAEM,IAAI,GAAAD,KAAA,CAAJC,IAAI;MAChB,OAAO;QACLN,IAAI,EAAJA,IAAI;QACJM,IAAI,EAAJA,IAAI;QACJC,QAAQ,EAAE,KAAK;QAEfC,YAAY,EAAE;OACf;KACF,CAAC;IAEJ,IAAMC,UAAU,GAAGhB,aAAa,CAACiB,MAAM,CAACT,gBAAgB,CAAC;IAEzD,IAAI,CAACQ,UAAU,CAACE,MAAM,EAAE;MACtB,MAAM,IAAIxB,OAAY,CAAAyB,YAAA,CACpB,CACG,qFAAoF,EACpF,yGAAwG,EACxG,4DAA2D,EAC3D,sNAAqN,CACvN,CAACC,IAAI,CAAC,IAAI,CAAC,CACb;;IAGH,OAAOJ,UAAU;GAClB;EAAA,OAAAnB,gBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}