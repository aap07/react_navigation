{"ast":null,"code":"import Constants from 'expo-constants';\nimport { Platform } from 'expo-modules-core';\nimport getDevServer from 'react-native/Libraries/Core/Devtools/getDevServer';\nif (__DEV__) {\n  var _Constants$__unsafeNo, _Constants$__unsafeNo2, _Constants$__unsafeNo4, _Constants$__unsafeNo5, _Constants$__unsafeNo6, _Constants$__unsafeNo7;\n  if (Constants.__unsafeNoWarnManifest && !Constants.__unsafeNoWarnManifest.logUrl) {\n    var devServerInfo = getDevServer();\n    if (devServerInfo.bundleLoadedFromServer) {\n      var url = !devServerInfo.url.endsWith('/') ? `${devServerInfo.url}/` : devServerInfo.url;\n      var logUrl = url + 'logs';\n      Constants.__unsafeNoWarnManifest.logUrl = logUrl;\n      if (Constants.expoGoConfig) {\n        Constants.expoGoConfig.logUrl = logUrl;\n      }\n    }\n  } else if (Constants.__unsafeNoWarnManifest2 && !((_Constants$__unsafeNo = Constants.__unsafeNoWarnManifest2.extra) != null && (_Constants$__unsafeNo2 = _Constants$__unsafeNo.expoGo) != null && _Constants$__unsafeNo2.logUrl)) {\n    var _devServerInfo = getDevServer();\n    if (_devServerInfo.bundleLoadedFromServer) {\n      var _Constants$__unsafeNo3, _Constants$manifest, _Constants$manifest$e;\n      var _url = !_devServerInfo.url.endsWith('/') ? `${_devServerInfo.url}/` : _devServerInfo.url;\n      var _logUrl = _url + 'logs';\n      if ((_Constants$__unsafeNo3 = Constants.__unsafeNoWarnManifest2.extra) != null && _Constants$__unsafeNo3.expoGo) {\n        Constants.__unsafeNoWarnManifest2.extra.expoGo.logUrl = _logUrl;\n      }\n      if ((_Constants$manifest = Constants.manifest2) != null && (_Constants$manifest$e = _Constants$manifest.extra) != null && _Constants$manifest$e.expoGo) {\n        Constants.manifest2.extra.expoGo.logUrl = _logUrl;\n      }\n    }\n  }\n  if ((_Constants$__unsafeNo4 = Constants.__unsafeNoWarnManifest) != null && _Constants$__unsafeNo4.logUrl || (_Constants$__unsafeNo5 = Constants.__unsafeNoWarnManifest2) != null && (_Constants$__unsafeNo6 = _Constants$__unsafeNo5.extra) != null && (_Constants$__unsafeNo7 = _Constants$__unsafeNo6.expoGo) != null && _Constants$__unsafeNo7.logUrl) {\n    if (Platform.isAsyncDebugging) {\n      var RemoteLogging = require(\"../logs/RemoteLogging\").default;\n      RemoteLogging.enqueueRemoteLogAsync('info', {}, ['You are now debugging remotely; check your browser console for your application logs.']);\n    } else {\n      var Logs = require(\"../logs/Logs\");\n      Logs.enableExpoCliLogging();\n    }\n  }\n}","map":{"version":3,"names":["Constants","Platform","getDevServer","__DEV__","_Constants$__unsafeNo","_Constants$__unsafeNo2","_Constants$__unsafeNo4","_Constants$__unsafeNo5","_Constants$__unsafeNo6","_Constants$__unsafeNo7","__unsafeNoWarnManifest","logUrl","devServerInfo","bundleLoadedFromServer","url","endsWith","expoGoConfig","__unsafeNoWarnManifest2","extra","expoGo","_Constants$__unsafeNo3","_Constants$manifest","_Constants$manifest$e","manifest2","isAsyncDebugging","RemoteLogging","require","default","enqueueRemoteLogAsync","Logs","enableExpoCliLogging"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\expo\\src\\environment\\logging.fx.ts"],"sourcesContent":["import Constants from 'expo-constants';\nimport { Platform } from 'expo-modules-core';\nimport getDevServer from 'react-native/Libraries/Core/Devtools/getDevServer';\n\n// Metro and terser don't seem to be capable of shaking the imports unless they're wrapped in __DEV__.\nif (__DEV__) {\n  // If the app is being run outside of the Expo Go app and not using expo-dev-menu,\n  // then we can attempt to polyfill the `logUrl` to enable console logging in the CLI.\n  if (\n    // If this is defined then we can be define Constants.manifest.logUrl without worrying about the warning.\n    Constants.__unsafeNoWarnManifest &&\n    // Only attempt to set the URL if `Constants.__unsafeNoWarnManifest.logUrl` is not defined.\n    !Constants.__unsafeNoWarnManifest.logUrl\n  ) {\n    const devServerInfo = getDevServer();\n    // Ensure the URL is remote and not local. i.e `file://`\n    if (devServerInfo.bundleLoadedFromServer) {\n      // url: `http://localhost:8081/`\n      const url = !devServerInfo.url.endsWith('/') ? `${devServerInfo.url}/` : devServerInfo.url;\n      // The standard Expo logUrl is `http://localhost:8081/logs`, this code assumes that the `logs` endpoint doesn't change.\n\n      const logUrl = url + 'logs';\n      Constants.__unsafeNoWarnManifest.logUrl = logUrl;\n      if (Constants.expoGoConfig) {\n        Constants.expoGoConfig.logUrl = logUrl;\n      }\n    }\n  } else if (\n    // If this is defined then we can be define Constants.manifest2.extra.expoGo.logUrl without worrying about the warning.\n    Constants.__unsafeNoWarnManifest2 &&\n    // Only attempt to set the URL if `Constants.__unsafeNoWarnManifest2.logUrl` is not defined.\n    !Constants.__unsafeNoWarnManifest2.extra?.expoGo?.logUrl\n  ) {\n    const devServerInfo = getDevServer();\n    // Ensure the URL is remote and not local. i.e `file://`\n    if (devServerInfo.bundleLoadedFromServer) {\n      // url: `http://localhost:8081/`\n      const url = !devServerInfo.url.endsWith('/') ? `${devServerInfo.url}/` : devServerInfo.url;\n      // The standard Expo logUrl is `http://localhost:8081/logs`, this code assumes that the `logs` endpoint doesn't change.\n\n      const logUrl = url + 'logs';\n      if (Constants.__unsafeNoWarnManifest2.extra?.expoGo) {\n        Constants.__unsafeNoWarnManifest2.extra.expoGo.logUrl = logUrl;\n      }\n      if (Constants.manifest2?.extra?.expoGo) {\n        Constants.manifest2.extra.expoGo.logUrl = logUrl;\n      }\n    }\n  }\n  // TODO: Maybe warn that console logging will not be enabled.\n\n  if (\n    Constants.__unsafeNoWarnManifest?.logUrl ||\n    Constants.__unsafeNoWarnManifest2?.extra?.expoGo?.logUrl\n  ) {\n    // Enable logging to the Expo dev tools only if this JS is not running in a web browser (ex: the\n    // remote debugger). In Expo Web we don't show console logs in the CLI, so there's no special case needed.\n    if (Platform.isAsyncDebugging) {\n      const RemoteLogging = require('../logs/RemoteLogging').default;\n      RemoteLogging.enqueueRemoteLogAsync('info', {}, [\n        'You are now debugging remotely; check your browser console for your application logs.',\n      ]);\n    } else {\n      const Logs = require('../logs/Logs');\n      Logs.enableExpoCliLogging();\n    }\n  }\n}\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,gBAAgB;AACtC,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,OAAOC,YAAY,MAAM,mDAAmD;AAG5E,IAAIC,OAAO,EAAE;EAAA,IAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA,EAAAC,sBAAA;EAGX,IAEET,SAAS,CAACU,sBAAsB,IAEhC,CAACV,SAAS,CAACU,sBAAsB,CAACC,MAAM,EACxC;IACA,IAAMC,aAAa,GAAGV,YAAY,EAAE;IAEpC,IAAIU,aAAa,CAACC,sBAAsB,EAAE;MAExC,IAAMC,GAAG,GAAG,CAACF,aAAa,CAACE,GAAG,CAACC,QAAQ,CAAC,GAAG,CAAC,GAAG,GAAGH,aAAa,CAACE,GAAG,GAAG,GAAGF,aAAa,CAACE,GAAG;MAG1F,IAAMH,MAAM,GAAGG,GAAG,GAAG,MAAM;MAC3Bd,SAAS,CAACU,sBAAsB,CAACC,MAAM,GAAGA,MAAM;MAChD,IAAIX,SAAS,CAACgB,YAAY,EAAE;QAC1BhB,SAAS,CAACgB,YAAY,CAACL,MAAM,GAAGA,MAAM;;;GAG3C,MAAM,IAELX,SAAS,CAACiB,uBAAuB,IAEjC,GAAAb,qBAAA,GAACJ,SAAS,CAACiB,uBAAuB,CAACC,KAAK,cAAAb,sBAAA,GAAvCD,qBAAA,CAAyCe,MAAM,aAA/Cd,sBAAA,CAAiDM,MAAM,GACxD;IACA,IAAMC,cAAa,GAAGV,YAAY,EAAE;IAEpC,IAAIU,cAAa,CAACC,sBAAsB,EAAE;MAAA,IAAAO,sBAAA,EAAAC,mBAAA,EAAAC,qBAAA;MAExC,IAAMR,IAAG,GAAG,CAACF,cAAa,CAACE,GAAG,CAACC,QAAQ,CAAC,GAAG,CAAC,GAAG,GAAGH,cAAa,CAACE,GAAG,GAAG,GAAGF,cAAa,CAACE,GAAG;MAG1F,IAAMH,OAAM,GAAGG,IAAG,GAAG,MAAM;MAC3B,KAAAM,sBAAA,GAAIpB,SAAS,CAACiB,uBAAuB,CAACC,KAAK,aAAvCE,sBAAA,CAAyCD,MAAM,EAAE;QACnDnB,SAAS,CAACiB,uBAAuB,CAACC,KAAK,CAACC,MAAM,CAACR,MAAM,GAAGA,OAAM;;MAEhE,KAAAU,mBAAA,GAAIrB,SAAS,CAACuB,SAAS,cAAAD,qBAAA,GAAnBD,mBAAA,CAAqBH,KAAK,aAA1BI,qBAAA,CAA4BH,MAAM,EAAE;QACtCnB,SAAS,CAACuB,SAAS,CAACL,KAAK,CAACC,MAAM,CAACR,MAAM,GAAGA,OAAM;;;;EAMtD,IACE,CAAAL,sBAAA,GAAAN,SAAS,CAACU,sBAAsB,aAAhCJ,sBAAA,CAAkCK,MAAM,KAAAJ,sBAAA,GACxCP,SAAS,CAACiB,uBAAuB,cAAAT,sBAAA,GAAjCD,sBAAA,CAAmCW,KAAK,cAAAT,sBAAA,GAAxCD,sBAAA,CAA0CW,MAAM,aAAhDV,sBAAA,CAAkDE,MAAM,EACxD;IAGA,IAAIV,QAAQ,CAACuB,gBAAgB,EAAE;MAC7B,IAAMC,aAAa,GAAGC,OAAO,wBAAwB,CAAC,CAACC,OAAO;MAC9DF,aAAa,CAACG,qBAAqB,CAAC,MAAM,EAAE,EAAE,EAAE,CAC9C,uFAAuF,CACxF,CAAC;KACH,MAAM;MACL,IAAMC,IAAI,GAAGH,OAAO,eAAe,CAAC;MACpCG,IAAI,CAACC,oBAAoB,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}