{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function _chalk() {\n    return data;\n  };\n  return data;\n}\nfunction _execa() {\n  var data = _interopRequireDefault(require(\"execa\"));\n  _execa = function _execa() {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function _cliTools() {\n    return data;\n  };\n  return data;\n}\nvar _adb = _interopRequireDefault(require(\"./adb\"));\nvar _tryRunAdbReverse = _interopRequireDefault(require(\"./tryRunAdbReverse\"));\nvar _tryLaunchAppOnDevice = _interopRequireDefault(require(\"./tryLaunchAppOnDevice\"));\nvar _tryLaunchEmulator = _interopRequireDefault(require(\"./tryLaunchEmulator\"));\nvar _tryInstallAppOnDevice = _interopRequireDefault(require(\"./tryInstallAppOnDevice\"));\nvar _getTaskNames = require(\"./getTaskNames\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction runOnAllDevices(_x, _x2, _x3, _x4) {\n  return _runOnAllDevices.apply(this, arguments);\n}\nfunction _runOnAllDevices() {\n  _runOnAllDevices = _asyncToGenerator(function* (args, cmd, adbPath, androidProject) {\n    var devices = _adb.default.getDevices(adbPath);\n    if (devices.length === 0) {\n      _cliTools().logger.info('Launching emulator...');\n      var result = yield (0, _tryLaunchEmulator.default)(adbPath);\n      if (result.success) {\n        _cliTools().logger.info('Successfully launched emulator.');\n        devices = _adb.default.getDevices(adbPath);\n      } else {\n        _cliTools().logger.error(`Failed to launch emulator. Reason: ${_chalk().default.dim(result.error || '')}.`);\n        _cliTools().logger.warn('Please launch an emulator manually or connect a device. Otherwise app may fail to launch.');\n      }\n    }\n    if (args.variant) {\n      _cliTools().logger.warn('\"variant\" flag is deprecated and will be removed in future release. Please switch to \"mode\" flag.');\n    }\n    try {\n      if (!args.binaryPath) {\n        var gradleArgs = (0, _getTaskNames.getTaskNames)(androidProject.appName, args.mode || args.variant, args.tasks, 'install', androidProject.sourceDir);\n        if (args.extraParams) {\n          gradleArgs.push.apply(gradleArgs, _toConsumableArray(args.extraParams));\n        }\n        if (args.port != null) {\n          gradleArgs.push('-PreactNativeDevServerPort=' + args.port);\n        }\n        if (args.activeArchOnly) {\n          var architectures = devices.map(function (device) {\n            return _adb.default.getCPU(adbPath, device);\n          }).filter(function (arch, index, array) {\n            return arch != null && array.indexOf(arch) === index;\n          });\n          if (architectures.length > 0) {\n            _cliTools().logger.info(`Detected architectures ${architectures.join(', ')}`);\n            gradleArgs.push('-PreactNativeDebugArchitectures=' + architectures.join(','));\n            gradleArgs.push('-PreactNativeArchitectures=' + architectures.join(','));\n          }\n        }\n        _cliTools().logger.info('Installing the app...');\n        _cliTools().logger.debug(`Running command \"cd android && ${cmd} ${gradleArgs.join(' ')}\"`);\n        yield (0, _execa().default)(cmd, gradleArgs, {\n          stdio: ['inherit', 'inherit', 'pipe'],\n          cwd: androidProject.sourceDir\n        });\n      }\n    } catch (error) {\n      (0, _cliTools().printRunDoctorTip)();\n      throw createInstallError(error);\n    }\n    (devices.length > 0 ? devices : [undefined]).forEach(function (device) {\n      (0, _tryRunAdbReverse.default)(args.port, device);\n      if (args.binaryPath && device) {\n        (0, _tryInstallAppOnDevice.default)(args, adbPath, device, androidProject);\n      }\n      (0, _tryLaunchAppOnDevice.default)(device, androidProject.packageName, adbPath, args);\n    });\n  });\n  return _runOnAllDevices.apply(this, arguments);\n}\nfunction createInstallError(error) {\n  var stderr = (error.stderr || '').toString();\n  var message = '';\n  _cliTools().logger.log(stderr);\n  if (stderr.includes('No connected devices')) {\n    message = 'Make sure you have an Android emulator running or a device connected.';\n  } else if (stderr.includes('licences have not been accepted') || stderr.includes('accept the SDK license')) {\n    message = `Please accept all necessary Android SDK licenses using Android SDK Manager: \"${_chalk().default.bold('$ANDROID_HOME/tools/bin/sdkmanager --licenses')}.\"`;\n  }\n  return new (_cliTools().CLIError)(`Failed to install the app.${message ? ' ' + message : ''}`, error.message.length > 0 ? undefined : error);\n}\nvar _default = runOnAllDevices;\nexports.default = _default;","map":{"version":3,"names":["_toConsumableArray","require","_asyncToGenerator","Object","defineProperty","exports","value","default","_chalk","data","_interopRequireDefault","_execa","_cliTools","_adb","_tryRunAdbReverse","_tryLaunchAppOnDevice","_tryLaunchEmulator","_tryInstallAppOnDevice","_getTaskNames","obj","__esModule","runOnAllDevices","_x","_x2","_x3","_x4","_runOnAllDevices","apply","arguments","args","cmd","adbPath","androidProject","devices","getDevices","length","logger","info","result","success","error","dim","warn","variant","binaryPath","gradleArgs","getTaskNames","appName","mode","tasks","sourceDir","extraParams","push","port","activeArchOnly","architectures","map","device","getCPU","filter","arch","index","array","indexOf","join","debug","stdio","cwd","printRunDoctorTip","createInstallError","undefined","forEach","packageName","stderr","toString","message","log","includes","bold","CLIError","_default"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-platform-android/build/commands/runAndroid/runOnAllDevices.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _chalk() {\n  const data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function () {\n    return data;\n  };\n  return data;\n}\nfunction _execa() {\n  const data = _interopRequireDefault(require(\"execa\"));\n  _execa = function () {\n    return data;\n  };\n  return data;\n}\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function () {\n    return data;\n  };\n  return data;\n}\nvar _adb = _interopRequireDefault(require(\"./adb\"));\nvar _tryRunAdbReverse = _interopRequireDefault(require(\"./tryRunAdbReverse\"));\nvar _tryLaunchAppOnDevice = _interopRequireDefault(require(\"./tryLaunchAppOnDevice\"));\nvar _tryLaunchEmulator = _interopRequireDefault(require(\"./tryLaunchEmulator\"));\nvar _tryInstallAppOnDevice = _interopRequireDefault(require(\"./tryInstallAppOnDevice\"));\nvar _getTaskNames = require(\"./getTaskNames\");\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nasync function runOnAllDevices(args, cmd, adbPath, androidProject) {\n  let devices = _adb.default.getDevices(adbPath);\n  if (devices.length === 0) {\n    _cliTools().logger.info('Launching emulator...');\n    const result = await (0, _tryLaunchEmulator.default)(adbPath);\n    if (result.success) {\n      _cliTools().logger.info('Successfully launched emulator.');\n      devices = _adb.default.getDevices(adbPath);\n    } else {\n      _cliTools().logger.error(`Failed to launch emulator. Reason: ${_chalk().default.dim(result.error || '')}.`);\n      _cliTools().logger.warn('Please launch an emulator manually or connect a device. Otherwise app may fail to launch.');\n    }\n  }\n  if (args.variant) {\n    _cliTools().logger.warn('\"variant\" flag is deprecated and will be removed in future release. Please switch to \"mode\" flag.');\n  }\n  try {\n    if (!args.binaryPath) {\n      let gradleArgs = (0, _getTaskNames.getTaskNames)(androidProject.appName, args.mode || args.variant, args.tasks, 'install', androidProject.sourceDir);\n      if (args.extraParams) {\n        gradleArgs.push(...args.extraParams);\n      }\n      if (args.port != null) {\n        gradleArgs.push('-PreactNativeDevServerPort=' + args.port);\n      }\n      if (args.activeArchOnly) {\n        const architectures = devices.map(device => {\n          return _adb.default.getCPU(adbPath, device);\n        }).filter((arch, index, array) => arch != null && array.indexOf(arch) === index);\n        if (architectures.length > 0) {\n          _cliTools().logger.info(`Detected architectures ${architectures.join(', ')}`);\n          // `reactNativeDebugArchitectures`Â was renamed to `reactNativeArchitectures` in 0.68.\n          // Can be removed when 0.67 no longer needs to be supported.\n          gradleArgs.push('-PreactNativeDebugArchitectures=' + architectures.join(','));\n          gradleArgs.push('-PreactNativeArchitectures=' + architectures.join(','));\n        }\n      }\n      _cliTools().logger.info('Installing the app...');\n      _cliTools().logger.debug(`Running command \"cd android && ${cmd} ${gradleArgs.join(' ')}\"`);\n      await (0, _execa().default)(cmd, gradleArgs, {\n        stdio: ['inherit', 'inherit', 'pipe'],\n        cwd: androidProject.sourceDir\n      });\n    }\n  } catch (error) {\n    (0, _cliTools().printRunDoctorTip)();\n    throw createInstallError(error);\n  }\n  (devices.length > 0 ? devices : [undefined]).forEach(device => {\n    (0, _tryRunAdbReverse.default)(args.port, device);\n    if (args.binaryPath && device) {\n      (0, _tryInstallAppOnDevice.default)(args, adbPath, device, androidProject);\n    }\n    (0, _tryLaunchAppOnDevice.default)(device, androidProject.packageName, adbPath, args);\n  });\n}\nfunction createInstallError(error) {\n  const stderr = (error.stderr || '').toString();\n  let message = '';\n  // Pass the error message from the command to stdout because we pipe it to\n  // parent process so it's not visible\n  _cliTools().logger.log(stderr);\n\n  // Handle some common failures and make the errors more helpful\n  if (stderr.includes('No connected devices')) {\n    message = 'Make sure you have an Android emulator running or a device connected.';\n  } else if (stderr.includes('licences have not been accepted') || stderr.includes('accept the SDK license')) {\n    message = `Please accept all necessary Android SDK licenses using Android SDK Manager: \"${_chalk().default.bold('$ANDROID_HOME/tools/bin/sdkmanager --licenses')}.\"`;\n  }\n  return new (_cliTools().CLIError)(`Failed to install the app.${message ? ' ' + message : ''}`, error.message.length > 0 ? undefined : error);\n}\nvar _default = runOnAllDevices;\nexports.default = _default;\n\n//# sourceMappingURL=runOnAllDevices.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}