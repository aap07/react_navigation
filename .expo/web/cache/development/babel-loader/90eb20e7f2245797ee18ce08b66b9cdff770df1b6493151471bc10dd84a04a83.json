{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDeepLinkHandler = getDeepLinkHandler;\nvar _config = require(\"@expo/config\");\nvar _devServer = require(\"@expo/dev-server\");\nvar runtimeEnv = _interopRequireWildcard(require(\"@expo/env\"));\nvar _assert = _interopRequireDefault(require(\"assert\"));\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _nodeFetch = _interopRequireDefault(require(\"node-fetch\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _log = require(\"../../../log\");\nvar _getDevClientProperties = _interopRequireDefault(require(\"../../../utils/analytics/getDevClientProperties\"));\nvar _rudderstackClient = require(\"../../../utils/analytics/rudderstackClient\");\nvar _port = require(\"../../../utils/port\");\nvar _bundlerDevServer = require(\"../BundlerDevServer\");\nvar _getStaticRenderFunctions = require(\"../getStaticRenderFunctions\");\nvar _contextModuleSourceMapsMiddleware = require(\"../middleware/ContextModuleSourceMapsMiddleware\");\nvar _createFileMiddleware = require(\"../middleware/CreateFileMiddleware\");\nvar _faviconMiddleware = require(\"../middleware/FaviconMiddleware\");\nvar _historyFallbackMiddleware = require(\"../middleware/HistoryFallbackMiddleware\");\nvar _interstitialPageMiddleware = require(\"../middleware/InterstitialPageMiddleware\");\nvar _manifestMiddleware = require(\"../middleware/ManifestMiddleware\");\nvar _reactDevToolsPageMiddleware = require(\"../middleware/ReactDevToolsPageMiddleware\");\nvar _runtimeRedirectMiddleware = require(\"../middleware/RuntimeRedirectMiddleware\");\nvar _serveStaticMiddleware = require(\"../middleware/ServeStaticMiddleware\");\nvar _startTypescriptTypeGeneration = require(\"../type-generation/startTypescriptTypeGeneration\");\nvar _instantiateMetro = require(\"./instantiateMetro\");\nvar _metroErrorInterface = require(\"./metroErrorInterface\");\nvar _metroWatchTypeScriptFiles = require(\"./metroWatchTypeScriptFiles\");\nvar _waitForMetroToObserveTypeScriptFile = require(\"./waitForMetroToObserveTypeScriptFile\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar debug = require(\"debug\")(\"expo:start:server:metro\");\nvar EXPO_GO_METRO_PORT = 8081;\nvar DEV_CLIENT_METRO_PORT = 8081;\nvar MetroBundlerDevServer = function (_bundlerDevServer$Bun) {\n  _inherits(MetroBundlerDevServer, _bundlerDevServer$Bun);\n  var _super = _createSuper(MetroBundlerDevServer);\n  function MetroBundlerDevServer() {\n    var _this;\n    _classCallCheck(this, MetroBundlerDevServer);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.metro = null;\n    return _this;\n  }\n  _createClass(MetroBundlerDevServer, [{\n    key: \"name\",\n    get: function get() {\n      return \"metro\";\n    }\n  }, {\n    key: \"resolvePortAsync\",\n    value: function () {\n      var _resolvePortAsync = _asyncToGenerator(function* () {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var _port1;\n        var port = (_port1 = options.port) != null ? _port1 : options.devClient ? Number(process.env.RCT_METRO_PORT) || DEV_CLIENT_METRO_PORT : yield (0, _port).getFreePortAsync(EXPO_GO_METRO_PORT);\n        return port;\n      });\n      function resolvePortAsync() {\n        return _resolvePortAsync.apply(this, arguments);\n      }\n      return resolvePortAsync;\n    }()\n  }, {\n    key: \"getRoutesAsync\",\n    value: function () {\n      var _getRoutesAsync = _asyncToGenerator(function* () {\n        var url = this.getDevServerUrl();\n        (0, _assert).default(url, \"Dev server must be started\");\n        var _yield$getStaticRende = yield (0, _getStaticRenderFunctions).getStaticRenderFunctions(this.projectRoot, url, {\n            environment: \"node\"\n          }),\n          getManifest = _yield$getStaticRende.getManifest;\n        return getManifest({\n          fetchData: true\n        });\n      });\n      function getRoutesAsync() {\n        return _getRoutesAsync.apply(this, arguments);\n      }\n      return getRoutesAsync;\n    }()\n  }, {\n    key: \"composeResourcesWithHtml\",\n    value: function () {\n      var _composeResourcesWithHtml = _asyncToGenerator(function* (_ref) {\n        var mode = _ref.mode,\n          resources = _ref.resources,\n          template = _ref.template,\n          devBundleUrl = _ref.devBundleUrl;\n        if (!resources) {\n          return \"\";\n        }\n        var isDev = mode === \"development\";\n        return htmlFromSerialAssets(resources, {\n          dev: isDev,\n          template: template,\n          bundleUrl: isDev ? devBundleUrl : undefined\n        });\n      });\n      function composeResourcesWithHtml(_x) {\n        return _composeResourcesWithHtml.apply(this, arguments);\n      }\n      return composeResourcesWithHtml;\n    }()\n  }, {\n    key: \"getStaticRenderFunctionAsync\",\n    value: function () {\n      var _getStaticRenderFunctionAsync = _asyncToGenerator(function* (_ref2) {\n        var mode = _ref2.mode,\n          _ref2$minify = _ref2.minify,\n          minify = _ref2$minify === void 0 ? mode !== \"development\" : _ref2$minify;\n        var url = this.getDevServerUrl();\n        var _yield$getStaticRende2 = yield (0, _getStaticRenderFunctions).getStaticRenderFunctions(this.projectRoot, url, {\n            minify: minify,\n            dev: mode !== \"production\",\n            environment: \"node\"\n          }),\n          getStaticContent = _yield$getStaticRende2.getStaticContent;\n        return function () {\n          var _ref3 = _asyncToGenerator(function* (path) {\n            return yield getStaticContent(new URL(path, url));\n          });\n          return function (_x3) {\n            return _ref3.apply(this, arguments);\n          };\n        }();\n      });\n      function getStaticRenderFunctionAsync(_x2) {\n        return _getStaticRenderFunctionAsync.apply(this, arguments);\n      }\n      return getStaticRenderFunctionAsync;\n    }()\n  }, {\n    key: \"getStaticResourcesAsync\",\n    value: function () {\n      var _getStaticResourcesAsync = _asyncToGenerator(function* (_ref4) {\n        var mode = _ref4.mode,\n          _ref4$minify = _ref4.minify,\n          minify = _ref4$minify === void 0 ? mode !== \"development\" : _ref4$minify;\n        var ref;\n        var devBundleUrlPathname = (0, _manifestMiddleware).createBundleUrlPath({\n          platform: \"web\",\n          mode: mode,\n          minify: minify,\n          environment: \"client\",\n          serializerOutput: \"static\",\n          mainModuleName: (0, _manifestMiddleware).resolveMainModuleName(this.projectRoot, (0, _config).getConfig(this.projectRoot), \"web\")\n        });\n        var bundleUrl = new URL(devBundleUrlPathname, this.getDevServerUrl());\n        var results = yield (0, _nodeFetch).default(bundleUrl.toString());\n        var txt = yield results.text();\n        var data;\n        try {\n          data = JSON.parse(txt);\n        } catch (error) {\n          _log.Log.error(\"Failed to generate resources with Metro, the Metro config may not be using the correct serializer. Ensure the metro.config.js is extending the expo/metro-config and is not overriding the serializer.\");\n          debug(txt);\n          throw error;\n        }\n        if (Array.isArray(data)) {\n          return data;\n        }\n        if (data != null && (data.errors || ((ref = data.type) == null ? void 0 : ref.match(/.*Error$/)))) {\n          throw new Error(data.message);\n        }\n        throw new Error(\"Invalid resources returned from the Metro serializer. Expected array, found: \" + data);\n      });\n      function getStaticResourcesAsync(_x4) {\n        return _getStaticResourcesAsync.apply(this, arguments);\n      }\n      return getStaticResourcesAsync;\n    }()\n  }, {\n    key: \"renderStaticErrorAsync\",\n    value: function () {\n      var _renderStaticErrorAsync = _asyncToGenerator(function* (error) {\n        return (0, _metroErrorInterface).getErrorOverlayHtmlAsync({\n          error: error,\n          projectRoot: this.projectRoot\n        });\n      });\n      function renderStaticErrorAsync(_x5) {\n        return _renderStaticErrorAsync.apply(this, arguments);\n      }\n      return renderStaticErrorAsync;\n    }()\n  }, {\n    key: \"getStaticPageAsync\",\n    value: function () {\n      var _getStaticPageAsync = _asyncToGenerator(function* (pathname, _ref5) {\n        var _this2 = this;\n        var mode = _ref5.mode,\n          _ref5$minify = _ref5.minify,\n          minify = _ref5$minify === void 0 ? mode !== \"development\" : _ref5$minify;\n        var devBundleUrlPathname = (0, _manifestMiddleware).createBundleUrlPath({\n          platform: \"web\",\n          mode: mode,\n          environment: \"client\",\n          mainModuleName: (0, _manifestMiddleware).resolveMainModuleName(this.projectRoot, (0, _config).getConfig(this.projectRoot), \"web\")\n        });\n        var bundleStaticHtml = function () {\n          var _ref6 = _asyncToGenerator(function* () {\n            var _yield$getStaticRende3 = yield (0, _getStaticRenderFunctions).getStaticRenderFunctions(_this2.projectRoot, _this2.getDevServerUrl(), {\n                minify: false,\n                dev: mode !== \"production\",\n                environment: \"node\"\n              }),\n              getStaticContent = _yield$getStaticRende3.getStaticContent;\n            var location = new URL(pathname, _this2.getDevServerUrl());\n            return yield getStaticContent(location);\n          });\n          return function bundleStaticHtml() {\n            return _ref6.apply(this, arguments);\n          };\n        }();\n        var _yield$Promise$all = yield Promise.all([this.getStaticResourcesAsync({\n            mode: mode,\n            minify: minify\n          }), bundleStaticHtml()]),\n          _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2),\n          resources = _yield$Promise$all2[0],\n          staticHtml = _yield$Promise$all2[1];\n        var content = yield this.composeResourcesWithHtml({\n          mode: mode,\n          resources: resources,\n          template: staticHtml,\n          devBundleUrl: devBundleUrlPathname\n        });\n        return {\n          content: content,\n          resources: resources\n        };\n      });\n      function getStaticPageAsync(_x6, _x7) {\n        return _getStaticPageAsync.apply(this, arguments);\n      }\n      return getStaticPageAsync;\n    }()\n  }, {\n    key: \"watchEnvironmentVariables\",\n    value: function () {\n      var _watchEnvironmentVariables = _asyncToGenerator(function* () {\n        var _this3 = this;\n        if (!this.instance) {\n          throw new Error(\"Cannot observe environment variable changes without a running Metro instance.\");\n        }\n        if (!this.metro) {\n          debug(\"Skipping Environment Variable observation because Metro is not running (headless).\");\n          return;\n        }\n        var envFiles = runtimeEnv.getFiles(process.env.NODE_ENV).map(function (fileName) {\n          return _path.default.join(_this3.projectRoot, fileName);\n        });\n        (0, _waitForMetroToObserveTypeScriptFile).observeFileChanges({\n          metro: this.metro,\n          server: this.instance.server\n        }, envFiles, function () {\n          debug(\"Reloading environment variables...\");\n          runtimeEnv.load(_this3.projectRoot, {\n            force: true\n          });\n        });\n      });\n      function watchEnvironmentVariables() {\n        return _watchEnvironmentVariables.apply(this, arguments);\n      }\n      return watchEnvironmentVariables;\n    }()\n  }, {\n    key: \"startImplementationAsync\",\n    value: function () {\n      var _startImplementationAsync = _asyncToGenerator(function* (options) {\n        var _this4 = this;\n        options.port = yield this.resolvePortAsync(options);\n        this.urlCreator = this.getUrlCreator(options);\n        var parsedOptions = {\n          port: options.port,\n          maxWorkers: options.maxWorkers,\n          resetCache: options.resetDevServer,\n          unversioned: false\n        };\n        process.env.EXPO_DEV_SERVER_ORIGIN = `http://localhost:${options.port}`;\n        var _yield$instantiateMet = yield (0, _instantiateMetro).instantiateMetroAsync(this, parsedOptions),\n          metro = _yield$instantiateMet.metro,\n          server = _yield$instantiateMet.server,\n          middleware = _yield$instantiateMet.middleware,\n          messageSocket = _yield$instantiateMet.messageSocket;\n        var manifestMiddleware = yield this.getManifestMiddlewareAsync(options);\n        (0, _devServer).prependMiddleware(middleware, new _contextModuleSourceMapsMiddleware.ContextModuleSourceMapsMiddleware().getHandler());\n        (0, _devServer).prependMiddleware(middleware, manifestMiddleware.getHandler());\n        var _scheme;\n        middleware.use(new _interstitialPageMiddleware.InterstitialPageMiddleware(this.projectRoot, {\n          scheme: (_scheme = options.location.scheme) != null ? _scheme : null\n        }).getHandler());\n        middleware.use(new _reactDevToolsPageMiddleware.ReactDevToolsPageMiddleware(this.projectRoot).getHandler());\n        var deepLinkMiddleware = new _runtimeRedirectMiddleware.RuntimeRedirectMiddleware(this.projectRoot, {\n          onDeepLink: getDeepLinkHandler(this.projectRoot),\n          getLocation: function getLocation(_ref7) {\n            var runtime = _ref7.runtime;\n            if (runtime === \"custom\") {\n              var ref;\n              return (ref = _this4.urlCreator) == null ? void 0 : ref.constructDevClientUrl();\n            } else {\n              var ref1;\n              return (ref1 = _this4.urlCreator) == null ? void 0 : ref1.constructUrl({\n                scheme: \"exp\"\n              });\n            }\n          }\n        });\n        middleware.use(deepLinkMiddleware.getHandler());\n        middleware.use(new _createFileMiddleware.CreateFileMiddleware(this.projectRoot).getHandler());\n        if (this.isTargetingWeb()) {\n          var ref2;\n          var _getConfig = (0, _config).getConfig(this.projectRoot, {\n              skipSDKVersionRequirement: true\n            }),\n            exp = _getConfig.exp;\n          var useWebSSG = ((ref2 = exp.web) == null ? void 0 : ref2.output) === \"static\";\n          middleware.use(new _serveStaticMiddleware.ServeStaticMiddleware(this.projectRoot).getHandler());\n          middleware.use(new _faviconMiddleware.FaviconMiddleware(this.projectRoot).getHandler());\n          if (useWebSSG) {\n            middleware.use(function () {\n              var _ref8 = _asyncToGenerator(function* (req, res, next) {\n                if (!(req == null ? void 0 : req.url)) {\n                  return next();\n                }\n                if (req.url.endsWith(\".ico\")) {\n                  return next();\n                }\n                if (req.url.includes(\"serializer.output=static\")) {\n                  return next();\n                }\n                try {\n                  var _mode;\n                  var _yield$_this4$getStat = yield _this4.getStaticPageAsync(req.url, {\n                      mode: (_mode = options.mode) != null ? _mode : \"development\"\n                    }),\n                    content = _yield$_this4$getStat.content;\n                  res.setHeader(\"Content-Type\", \"text/html\");\n                  res.end(content);\n                  return;\n                } catch (error) {\n                  res.setHeader(\"Content-Type\", \"text/html\");\n                  try {\n                    res.end(yield _this4.renderStaticErrorAsync(error));\n                  } catch (staticError) {\n                    res.end(\"<span><h3>Internal Error:</h3><b>Project is not setup correctly for static rendering (check terminal for more info):</b><br/>\" + error.message + \"<br/><br/>\" + staticError.message + \"</span>\");\n                  }\n                }\n              });\n              return function (_x9, _x10, _x11) {\n                return _ref8.apply(this, arguments);\n              };\n            }());\n          }\n          if (!useWebSSG) {\n            middleware.use(new _historyFallbackMiddleware.HistoryFallbackMiddleware(manifestMiddleware.getHandler().internal).getHandler());\n          }\n        }\n        var originalClose = server.close.bind(server);\n        server.close = function (callback) {\n          return originalClose(function (err) {\n            _this4.instance = null;\n            _this4.metro = null;\n            callback == null ? void 0 : callback(err);\n          });\n        };\n        this.metro = metro;\n        return {\n          server: server,\n          location: {\n            port: options.port,\n            host: \"localhost\",\n            url: `http://localhost:${options.port}`,\n            protocol: \"http\"\n          },\n          middleware: middleware,\n          messageSocket: messageSocket\n        };\n      });\n      function startImplementationAsync(_x8) {\n        return _startImplementationAsync.apply(this, arguments);\n      }\n      return startImplementationAsync;\n    }()\n  }, {\n    key: \"waitForTypeScriptAsync\",\n    value: function () {\n      var _waitForTypeScriptAsync = _asyncToGenerator(function* () {\n        var _this5 = this;\n        if (!this.instance) {\n          throw new Error(\"Cannot wait for TypeScript without a running server.\");\n        }\n        return new Promise(function (resolve) {\n          if (!_this5.metro) {\n            debug(\"Skipping TypeScript check because Metro is not running (headless).\");\n            return resolve(false);\n          }\n          var off = (0, _metroWatchTypeScriptFiles).metroWatchTypeScriptFiles({\n            projectRoot: _this5.projectRoot,\n            server: _this5.instance.server,\n            metro: _this5.metro,\n            tsconfig: true,\n            throttle: true,\n            eventTypes: [\"change\", \"add\"],\n            callback: function () {\n              var _callback = _asyncToGenerator(function* () {\n                off();\n                var _yield$Promise$resolv = yield Promise.resolve().then(function () {\n                    return _interopRequireWildcard(require(\"../../doctor/typescript/TypeScriptProjectPrerequisite\"));\n                  }),\n                  TypeScriptProjectPrerequisite = _yield$Promise$resolv.TypeScriptProjectPrerequisite;\n                try {\n                  var req = new TypeScriptProjectPrerequisite(_this5.projectRoot);\n                  yield req.bootstrapAsync();\n                  resolve(true);\n                } catch (error) {\n                  _log.Log.log();\n                  _log.Log.error(_chalk.default.red`Failed to automatically setup TypeScript for your project. Try restarting the dev server to fix.`);\n                  _log.Log.exception(error);\n                  resolve(false);\n                }\n              });\n              function callback() {\n                return _callback.apply(this, arguments);\n              }\n              return callback;\n            }()\n          });\n        });\n      });\n      function waitForTypeScriptAsync() {\n        return _waitForTypeScriptAsync.apply(this, arguments);\n      }\n      return waitForTypeScriptAsync;\n    }()\n  }, {\n    key: \"startTypeScriptServices\",\n    value: function () {\n      var _startTypeScriptServices = _asyncToGenerator(function* () {\n        (0, _startTypescriptTypeGeneration).startTypescriptTypeGenerationAsync({\n          server: this.instance.server,\n          metro: this.metro,\n          projectRoot: this.projectRoot\n        });\n      });\n      function startTypeScriptServices() {\n        return _startTypeScriptServices.apply(this, arguments);\n      }\n      return startTypeScriptServices;\n    }()\n  }, {\n    key: \"getConfigModuleIds\",\n    value: function getConfigModuleIds() {\n      return [\"./metro.config.js\", \"./metro.config.json\", \"./rn-cli.config.js\"];\n    }\n  }]);\n  return MetroBundlerDevServer;\n}(_bundlerDevServer.BundlerDevServer);\nexports.MetroBundlerDevServer = MetroBundlerDevServer;\nfunction getDeepLinkHandler(projectRoot) {\n  return function () {\n    var _ref10 = _asyncToGenerator(function* (_ref9) {\n      var runtime = _ref9.runtime;\n      if (runtime === \"expo\") return;\n      var _getConfig2 = (0, _config).getConfig(projectRoot),\n        exp = _getConfig2.exp;\n      yield (0, _rudderstackClient).logEventAsync(\"dev client start command\", _objectSpread({\n        status: \"started\"\n      }, (0, _getDevClientProperties).default(projectRoot, exp)));\n    });\n    return function (_x12) {\n      return _ref10.apply(this, arguments);\n    };\n  }();\n}\nfunction htmlFromSerialAssets(assets, _ref11) {\n  var dev = _ref11.dev,\n    template = _ref11.template,\n    bundleUrl = _ref11.bundleUrl;\n  var styleString = assets.filter(function (asset) {\n    return asset.type === \"css\";\n  }).map(function (_ref12) {\n    var metadata = _ref12.metadata,\n      filename = _ref12.filename,\n      source = _ref12.source;\n    if (dev) {\n      return `<style data-expo-css-hmr=\"${metadata.hmrId}\">` + source + \"\\n</style>\";\n    } else {\n      return [`<link rel=\"preload\" href=\"/${filename}\" as=\"style\">`, `<link rel=\"stylesheet\" href=\"/${filename}\">`].join(\"\");\n    }\n  }).join(\"\");\n  var jsAssets = assets.filter(function (asset) {\n    return asset.type === \"js\";\n  });\n  var scripts = bundleUrl ? `<script src=\"${bundleUrl}\" defer></script>` : jsAssets.map(function (_ref13) {\n    var filename = _ref13.filename;\n    return `<script src=\"/${filename}\" defer></script>`;\n  }).join(\"\");\n  return template.replace(\"</head>\", `${styleString}</head>`).replace(\"</body>\", `${scripts}\\n</body>`);\n}","map":{"version":3,"names":["_defineProperty","require","_slicedToArray","_asyncToGenerator","_classCallCheck","_createClass","_inherits","_possibleConstructorReturn","_getPrototypeOf","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","sham","Proxy","Boolean","prototype","valueOf","call","getDeepLinkHandler","_config","_devServer","runtimeEnv","_interopRequireWildcard","_assert","_interopRequireDefault","_chalk","_nodeFetch","_path","_log","_getDevClientProperties","_rudderstackClient","_port","_bundlerDevServer","_getStaticRenderFunctions","_contextModuleSourceMapsMiddleware","_createFileMiddleware","_faviconMiddleware","_historyFallbackMiddleware","_interstitialPageMiddleware","_manifestMiddleware","_reactDevToolsPageMiddleware","_runtimeRedirectMiddleware","_serveStaticMiddleware","_startTypescriptTypeGeneration","_instantiateMetro","_metroErrorInterface","_metroWatchTypeScriptFiles","_waitForMetroToObserveTypeScriptFile","debug","EXPO_GO_METRO_PORT","DEV_CLIENT_METRO_PORT","MetroBundlerDevServer","_bundlerDevServer$Bun","_super","_this","_len","args","Array","_key","concat","metro","key","get","value","_resolvePortAsync","options","undefined","_port1","port","devClient","Number","process","env","RCT_METRO_PORT","getFreePortAsync","resolvePortAsync","_getRoutesAsync","url","getDevServerUrl","default","_yield$getStaticRende","getStaticRenderFunctions","projectRoot","environment","getManifest","fetchData","getRoutesAsync","_composeResourcesWithHtml","_ref","mode","resources","template","devBundleUrl","isDev","htmlFromSerialAssets","dev","bundleUrl","composeResourcesWithHtml","_x","_getStaticRenderFunctionAsync","_ref2","_ref2$minify","minify","_yield$getStaticRende2","getStaticContent","_ref3","path","URL","_x3","getStaticRenderFunctionAsync","_x2","_getStaticResourcesAsync","_ref4","_ref4$minify","ref","devBundleUrlPathname","createBundleUrlPath","platform","serializerOutput","mainModuleName","resolveMainModuleName","getConfig","results","toString","txt","text","data","JSON","parse","error","Log","isArray","errors","type","match","Error","message","getStaticResourcesAsync","_x4","_renderStaticErrorAsync","getErrorOverlayHtmlAsync","renderStaticErrorAsync","_x5","_getStaticPageAsync","pathname","_ref5","_this2","_ref5$minify","bundleStaticHtml","_ref6","_yield$getStaticRende3","location","_yield$Promise$all","Promise","all","_yield$Promise$all2","staticHtml","content","getStaticPageAsync","_x6","_x7","_watchEnvironmentVariables","_this3","instance","envFiles","getFiles","NODE_ENV","map","fileName","join","observeFileChanges","server","load","force","watchEnvironmentVariables","_startImplementationAsync","_this4","urlCreator","getUrlCreator","parsedOptions","maxWorkers","resetCache","resetDevServer","unversioned","EXPO_DEV_SERVER_ORIGIN","_yield$instantiateMet","instantiateMetroAsync","middleware","messageSocket","manifestMiddleware","getManifestMiddlewareAsync","prependMiddleware","ContextModuleSourceMapsMiddleware","getHandler","_scheme","use","InterstitialPageMiddleware","scheme","ReactDevToolsPageMiddleware","deepLinkMiddleware","RuntimeRedirectMiddleware","onDeepLink","getLocation","_ref7","runtime","constructDevClientUrl","ref1","constructUrl","CreateFileMiddleware","isTargetingWeb","ref2","_getConfig","skipSDKVersionRequirement","exp","useWebSSG","web","output","ServeStaticMiddleware","FaviconMiddleware","_ref8","req","res","next","endsWith","includes","_mode","_yield$_this4$getStat","setHeader","end","staticError","_x9","_x10","_x11","HistoryFallbackMiddleware","internal","originalClose","close","bind","callback","err","host","protocol","startImplementationAsync","_x8","_waitForTypeScriptAsync","_this5","resolve","off","metroWatchTypeScriptFiles","tsconfig","throttle","eventTypes","_callback","_yield$Promise$resolv","then","TypeScriptProjectPrerequisite","bootstrapAsync","log","red","exception","waitForTypeScriptAsync","_startTypeScriptServices","startTypescriptTypeGenerationAsync","startTypeScriptServices","getConfigModuleIds","BundlerDevServer","_ref10","_ref9","_getConfig2","logEventAsync","status","_x12","assets","_ref11","styleString","asset","_ref12","metadata","filename","source","hmrId","jsAssets","scripts","_ref13","replace"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\metro\\MetroBundlerDevServer.ts"],"sourcesContent":["/**\n * Copyright © 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { getConfig } from '@expo/config';\nimport { prependMiddleware } from '@expo/dev-server';\nimport * as runtimeEnv from '@expo/env';\nimport { SerialAsset } from '@expo/metro-config/build/serializer/serializerAssets';\nimport assert from 'assert';\nimport chalk from 'chalk';\nimport fetch from 'node-fetch';\nimport path from 'path';\n\nimport { Log } from '../../../log';\nimport getDevClientProperties from '../../../utils/analytics/getDevClientProperties';\nimport { logEventAsync } from '../../../utils/analytics/rudderstackClient';\nimport { getFreePortAsync } from '../../../utils/port';\nimport { BundlerDevServer, BundlerStartOptions, DevServerInstance } from '../BundlerDevServer';\nimport { getStaticRenderFunctions } from '../getStaticRenderFunctions';\nimport { ContextModuleSourceMapsMiddleware } from '../middleware/ContextModuleSourceMapsMiddleware';\nimport { CreateFileMiddleware } from '../middleware/CreateFileMiddleware';\nimport { FaviconMiddleware } from '../middleware/FaviconMiddleware';\nimport { HistoryFallbackMiddleware } from '../middleware/HistoryFallbackMiddleware';\nimport { InterstitialPageMiddleware } from '../middleware/InterstitialPageMiddleware';\nimport { createBundleUrlPath, resolveMainModuleName } from '../middleware/ManifestMiddleware';\nimport { ReactDevToolsPageMiddleware } from '../middleware/ReactDevToolsPageMiddleware';\nimport {\n  DeepLinkHandler,\n  RuntimeRedirectMiddleware,\n} from '../middleware/RuntimeRedirectMiddleware';\nimport { ServeStaticMiddleware } from '../middleware/ServeStaticMiddleware';\nimport { ServerNext, ServerRequest, ServerResponse } from '../middleware/server.types';\nimport { startTypescriptTypeGenerationAsync } from '../type-generation/startTypescriptTypeGeneration';\nimport { instantiateMetroAsync } from './instantiateMetro';\nimport { getErrorOverlayHtmlAsync } from './metroErrorInterface';\nimport { metroWatchTypeScriptFiles } from './metroWatchTypeScriptFiles';\nimport { observeFileChanges } from './waitForMetroToObserveTypeScriptFile';\n\nconst debug = require('debug')('expo:start:server:metro') as typeof console.log;\n\n/** Default port to use for apps running in Expo Go. */\nconst EXPO_GO_METRO_PORT = 8081;\n\n/** Default port to use for apps that run in standard React Native projects or Expo Dev Clients. */\nconst DEV_CLIENT_METRO_PORT = 8081;\n\nexport class MetroBundlerDevServer extends BundlerDevServer {\n  private metro: import('metro').Server | null = null;\n\n  get name(): string {\n    return 'metro';\n  }\n\n  async resolvePortAsync(options: Partial<BundlerStartOptions> = {}): Promise<number> {\n    const port =\n      // If the manually defined port is busy then an error should be thrown...\n      options.port ??\n      // Otherwise use the default port based on the runtime target.\n      (options.devClient\n        ? // Don't check if the port is busy if we're using the dev client since most clients are hardcoded to 8081.\n          Number(process.env.RCT_METRO_PORT) || DEV_CLIENT_METRO_PORT\n        : // Otherwise (running in Expo Go) use a free port that falls back on the classic 8081 port.\n          await getFreePortAsync(EXPO_GO_METRO_PORT));\n\n    return port;\n  }\n\n  /** Get routes from Expo Router. */\n  async getRoutesAsync() {\n    const url = this.getDevServerUrl();\n    assert(url, 'Dev server must be started');\n    const { getManifest } = await getStaticRenderFunctions(this.projectRoot, url, {\n      // Ensure the API Routes are included\n      environment: 'node',\n    });\n\n    return getManifest({ fetchData: true });\n  }\n\n  async composeResourcesWithHtml({\n    mode,\n    resources,\n    template,\n    devBundleUrl,\n  }: {\n    mode: 'development' | 'production';\n    resources: SerialAsset[];\n    template: string;\n    devBundleUrl?: string;\n  }): Promise<string> {\n    if (!resources) {\n      return '';\n    }\n    const isDev = mode === 'development';\n    return htmlFromSerialAssets(resources, {\n      dev: isDev,\n      template,\n      bundleUrl: isDev ? devBundleUrl : undefined,\n    });\n  }\n\n  async getStaticRenderFunctionAsync({\n    mode,\n    minify = mode !== 'development',\n  }: {\n    mode: 'development' | 'production';\n    minify?: boolean;\n  }) {\n    const url = this.getDevServerUrl()!;\n\n    const { getStaticContent } = await getStaticRenderFunctions(this.projectRoot, url, {\n      minify,\n      dev: mode !== 'production',\n      // Ensure the API Routes are included\n      environment: 'node',\n    });\n    return async (path: string) => {\n      return await getStaticContent(new URL(path, url));\n    };\n  }\n\n  async getStaticResourcesAsync({\n    mode,\n    minify = mode !== 'development',\n  }: {\n    mode: string;\n    minify?: boolean;\n  }): Promise<SerialAsset[]> {\n    const devBundleUrlPathname = createBundleUrlPath({\n      platform: 'web',\n      mode,\n      minify,\n      environment: 'client',\n      serializerOutput: 'static',\n      mainModuleName: resolveMainModuleName(this.projectRoot, getConfig(this.projectRoot), 'web'),\n    });\n\n    const bundleUrl = new URL(devBundleUrlPathname, this.getDevServerUrl()!);\n\n    // Fetch the generated HTML from our custom Metro serializer\n    const results = await fetch(bundleUrl.toString());\n\n    const txt = await results.text();\n\n    let data: any;\n    try {\n      data = JSON.parse(txt);\n    } catch (error: any) {\n      Log.error(\n        'Failed to generate resources with Metro, the Metro config may not be using the correct serializer. Ensure the metro.config.js is extending the expo/metro-config and is not overriding the serializer.'\n      );\n      debug(txt);\n      throw error;\n    }\n\n    // NOTE: This could potentially need more validation in the future.\n    if (Array.isArray(data)) {\n      return data;\n    }\n\n    if (data != null && (data.errors || data.type?.match(/.*Error$/))) {\n      // {\n      //   type: 'InternalError',\n      //   errors: [],\n      //   message: 'Metro has encountered an error: While trying to resolve module `stylis` from file `/Users/evanbacon/Documents/GitHub/lab/emotion-error-test/node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js`, the package `/Users/evanbacon/Documents/GitHub/lab/emotion-error-test/node_modules/stylis/package.json` was successfully found. However, this package itself specifies a `main` module field that could not be resolved (`/Users/evanbacon/Documents/GitHub/lab/emotion-error-test/node_modules/stylis/dist/stylis.mjs`. Indeed, none of these files exist:\\n' +\n      //     '\\n' +\n      //     '  * /Users/evanbacon/Documents/GitHub/lab/emotion-error-test/node_modules/stylis/dist/stylis.mjs(.web.ts|.ts|.web.tsx|.tsx|.web.js|.js|.web.jsx|.jsx|.web.json|.json|.web.cjs|.cjs|.web.scss|.scss|.web.sass|.sass|.web.css|.css)\\n' +\n      //     '  * /Users/evanbacon/Documents/GitHub/lab/emotion-error-test/node_modules/stylis/dist/stylis.mjs/index(.web.ts|.ts|.web.tsx|.tsx|.web.js|.js|.web.jsx|.jsx|.web.json|.json|.web.cjs|.cjs|.web.scss|.scss|.web.sass|.sass|.web.css|.css): /Users/evanbacon/Documents/GitHub/lab/emotion-error-test/node_modules/metro/src/node-haste/DependencyGraph.js (289:17)\\n' +\n      //     '\\n' +\n      //     '\\x1B[0m \\x1B[90m 287 |\\x1B[39m         }\\x1B[0m\\n' +\n      //     '\\x1B[0m \\x1B[90m 288 |\\x1B[39m         \\x1B[36mif\\x1B[39m (error \\x1B[36minstanceof\\x1B[39m \\x1B[33mInvalidPackageError\\x1B[39m) {\\x1B[0m\\n' +\n      //     '\\x1B[0m\\x1B[31m\\x1B[1m>\\x1B[22m\\x1B[39m\\x1B[90m 289 |\\x1B[39m           \\x1B[36mthrow\\x1B[39m \\x1B[36mnew\\x1B[39m \\x1B[33mPackageResolutionError\\x1B[39m({\\x1B[0m\\n' +\n      //     '\\x1B[0m \\x1B[90m     |\\x1B[39m                 \\x1B[31m\\x1B[1m^\\x1B[22m\\x1B[39m\\x1B[0m\\n' +\n      //     '\\x1B[0m \\x1B[90m 290 |\\x1B[39m             packageError\\x1B[33m:\\x1B[39m error\\x1B[33m,\\x1B[39m\\x1B[0m\\n' +\n      //     '\\x1B[0m \\x1B[90m 291 |\\x1B[39m             originModulePath\\x1B[33m:\\x1B[39m \\x1B[36mfrom\\x1B[39m\\x1B[33m,\\x1B[39m\\x1B[0m\\n' +\n      //     '\\x1B[0m \\x1B[90m 292 |\\x1B[39m             targetModuleName\\x1B[33m:\\x1B[39m to\\x1B[33m,\\x1B[39m\\x1B[0m'\n      // }\n      // The Metro logger already showed this error.\n      throw new Error(data.message);\n    }\n\n    throw new Error(\n      'Invalid resources returned from the Metro serializer. Expected array, found: ' + data\n    );\n  }\n\n  private async renderStaticErrorAsync(error: Error) {\n    return getErrorOverlayHtmlAsync({\n      error,\n      projectRoot: this.projectRoot,\n    });\n  }\n\n  async getStaticPageAsync(\n    pathname: string,\n    {\n      mode,\n      minify = mode !== 'development',\n    }: {\n      mode: 'development' | 'production';\n      minify?: boolean;\n    }\n  ) {\n    const devBundleUrlPathname = createBundleUrlPath({\n      platform: 'web',\n      mode,\n      environment: 'client',\n      mainModuleName: resolveMainModuleName(this.projectRoot, getConfig(this.projectRoot), 'web'),\n    });\n\n    const bundleStaticHtml = async (): Promise<string> => {\n      const { getStaticContent } = await getStaticRenderFunctions(\n        this.projectRoot,\n        this.getDevServerUrl()!,\n        {\n          minify: false,\n          dev: mode !== 'production',\n          // Ensure the API Routes are included\n          environment: 'node',\n        }\n      );\n\n      const location = new URL(pathname, this.getDevServerUrl()!);\n      return await getStaticContent(location);\n    };\n\n    const [resources, staticHtml] = await Promise.all([\n      this.getStaticResourcesAsync({ mode, minify }),\n      bundleStaticHtml(),\n    ]);\n    const content = await this.composeResourcesWithHtml({\n      mode,\n      resources,\n      template: staticHtml,\n      devBundleUrl: devBundleUrlPathname,\n    });\n    return {\n      content,\n      resources,\n    };\n  }\n\n  async watchEnvironmentVariables() {\n    if (!this.instance) {\n      throw new Error(\n        'Cannot observe environment variable changes without a running Metro instance.'\n      );\n    }\n    if (!this.metro) {\n      // This can happen when the run command is used and the server is already running in another\n      // process.\n      debug('Skipping Environment Variable observation because Metro is not running (headless).');\n      return;\n    }\n\n    const envFiles = runtimeEnv\n      .getFiles(process.env.NODE_ENV)\n      .map((fileName) => path.join(this.projectRoot, fileName));\n\n    observeFileChanges(\n      {\n        metro: this.metro,\n        server: this.instance.server,\n      },\n      envFiles,\n      () => {\n        debug('Reloading environment variables...');\n        // Force reload the environment variables.\n        runtimeEnv.load(this.projectRoot, { force: true });\n      }\n    );\n  }\n\n  protected async startImplementationAsync(\n    options: BundlerStartOptions\n  ): Promise<DevServerInstance> {\n    options.port = await this.resolvePortAsync(options);\n    this.urlCreator = this.getUrlCreator(options);\n\n    const parsedOptions = {\n      port: options.port,\n      maxWorkers: options.maxWorkers,\n      resetCache: options.resetDevServer,\n\n      // Use the unversioned metro config.\n      // TODO: Deprecate this property when expo-cli goes away.\n      unversioned: false,\n    };\n\n    // Required for symbolication:\n    process.env.EXPO_DEV_SERVER_ORIGIN = `http://localhost:${options.port}`;\n\n    const { metro, server, middleware, messageSocket } = await instantiateMetroAsync(\n      this,\n      parsedOptions\n    );\n\n    const manifestMiddleware = await this.getManifestMiddlewareAsync(options);\n\n    // Important that we noop source maps for context modules as soon as possible.\n    prependMiddleware(middleware, new ContextModuleSourceMapsMiddleware().getHandler());\n\n    // We need the manifest handler to be the first middleware to run so our\n    // routes take precedence over static files. For example, the manifest is\n    // served from '/' and if the user has an index.html file in their project\n    // then the manifest handler will never run, the static middleware will run\n    // and serve index.html instead of the manifest.\n    // https://github.com/expo/expo/issues/13114\n    prependMiddleware(middleware, manifestMiddleware.getHandler());\n\n    middleware.use(\n      new InterstitialPageMiddleware(this.projectRoot, {\n        // TODO: Prevent this from becoming stale.\n        scheme: options.location.scheme ?? null,\n      }).getHandler()\n    );\n    middleware.use(new ReactDevToolsPageMiddleware(this.projectRoot).getHandler());\n\n    const deepLinkMiddleware = new RuntimeRedirectMiddleware(this.projectRoot, {\n      onDeepLink: getDeepLinkHandler(this.projectRoot),\n      getLocation: ({ runtime }) => {\n        if (runtime === 'custom') {\n          return this.urlCreator?.constructDevClientUrl();\n        } else {\n          return this.urlCreator?.constructUrl({\n            scheme: 'exp',\n          });\n        }\n      },\n    });\n    middleware.use(deepLinkMiddleware.getHandler());\n\n    middleware.use(new CreateFileMiddleware(this.projectRoot).getHandler());\n\n    // Append support for redirecting unhandled requests to the index.html page on web.\n    if (this.isTargetingWeb()) {\n      const { exp } = getConfig(this.projectRoot, { skipSDKVersionRequirement: true });\n      const useWebSSG = exp.web?.output === 'static';\n\n      // This MUST be after the manifest middleware so it doesn't have a chance to serve the template `public/index.html`.\n      middleware.use(new ServeStaticMiddleware(this.projectRoot).getHandler());\n\n      // This should come after the static middleware so it doesn't serve the favicon from `public/favicon.ico`.\n      middleware.use(new FaviconMiddleware(this.projectRoot).getHandler());\n\n      if (useWebSSG) {\n        middleware.use(async (req: ServerRequest, res: ServerResponse, next: ServerNext) => {\n          if (!req?.url) {\n            return next();\n          }\n\n          // TODO: Formal manifest for allowed paths\n          if (req.url.endsWith('.ico')) {\n            return next();\n          }\n          if (req.url.includes('serializer.output=static')) {\n            return next();\n          }\n\n          try {\n            const { content } = await this.getStaticPageAsync(req.url, {\n              mode: options.mode ?? 'development',\n            });\n\n            res.setHeader('Content-Type', 'text/html');\n            res.end(content);\n            return;\n          } catch (error: any) {\n            res.setHeader('Content-Type', 'text/html');\n            try {\n              res.end(await this.renderStaticErrorAsync(error));\n            } catch (staticError: any) {\n              // Fallback error for when Expo Router is misconfigured in the project.\n              res.end(\n                '<span><h3>Internal Error:</h3><b>Project is not setup correctly for static rendering (check terminal for more info):</b><br/>' +\n                  error.message +\n                  '<br/><br/>' +\n                  staticError.message +\n                  '</span>'\n              );\n            }\n          }\n        });\n      }\n\n      // This MUST run last since it's the fallback.\n      if (!useWebSSG) {\n        middleware.use(\n          new HistoryFallbackMiddleware(manifestMiddleware.getHandler().internal).getHandler()\n        );\n      }\n    }\n    // Extend the close method to ensure that we clean up the local info.\n    const originalClose = server.close.bind(server);\n\n    server.close = (callback?: (err?: Error) => void) => {\n      return originalClose((err?: Error) => {\n        this.instance = null;\n        this.metro = null;\n        callback?.(err);\n      });\n    };\n\n    this.metro = metro;\n    return {\n      server,\n      location: {\n        // The port is the main thing we want to send back.\n        port: options.port,\n        // localhost isn't always correct.\n        host: 'localhost',\n        // http is the only supported protocol on native.\n        url: `http://localhost:${options.port}`,\n        protocol: 'http',\n      },\n      middleware,\n      messageSocket,\n    };\n  }\n\n  public async waitForTypeScriptAsync(): Promise<boolean> {\n    if (!this.instance) {\n      throw new Error('Cannot wait for TypeScript without a running server.');\n    }\n\n    return new Promise<boolean>((resolve) => {\n      if (!this.metro) {\n        // This can happen when the run command is used and the server is already running in another\n        // process. In this case we can't wait for the TypeScript check to complete because we don't\n        // have access to the Metro server.\n        debug('Skipping TypeScript check because Metro is not running (headless).');\n        return resolve(false);\n      }\n\n      const off = metroWatchTypeScriptFiles({\n        projectRoot: this.projectRoot,\n        server: this.instance!.server,\n        metro: this.metro,\n        tsconfig: true,\n        throttle: true,\n        eventTypes: ['change', 'add'],\n        callback: async () => {\n          // Run once, this prevents the TypeScript project prerequisite from running on every file change.\n          off();\n          const { TypeScriptProjectPrerequisite } = await import(\n            '../../doctor/typescript/TypeScriptProjectPrerequisite'\n          );\n\n          try {\n            const req = new TypeScriptProjectPrerequisite(this.projectRoot);\n            await req.bootstrapAsync();\n            resolve(true);\n          } catch (error: any) {\n            // Ensure the process doesn't fail if the TypeScript check fails.\n            // This could happen during the install.\n            Log.log();\n            Log.error(\n              chalk.red`Failed to automatically setup TypeScript for your project. Try restarting the dev server to fix.`\n            );\n            Log.exception(error);\n            resolve(false);\n          }\n        },\n      });\n    });\n  }\n\n  public async startTypeScriptServices() {\n    startTypescriptTypeGenerationAsync({\n      server: this.instance!.server,\n      metro: this.metro,\n      projectRoot: this.projectRoot,\n    });\n  }\n\n  protected getConfigModuleIds(): string[] {\n    return ['./metro.config.js', './metro.config.json', './rn-cli.config.js'];\n  }\n}\n\nexport function getDeepLinkHandler(projectRoot: string): DeepLinkHandler {\n  return async ({ runtime }) => {\n    if (runtime === 'expo') return;\n    const { exp } = getConfig(projectRoot);\n    await logEventAsync('dev client start command', {\n      status: 'started',\n      ...getDevClientProperties(projectRoot, exp),\n    });\n  };\n}\n\nfunction htmlFromSerialAssets(\n  assets: SerialAsset[],\n  { dev, template, bundleUrl }: { dev: boolean; template: string; bundleUrl?: string }\n) {\n  // Combine the CSS modules into tags that have hot refresh data attributes.\n  const styleString = assets\n    .filter((asset) => asset.type === 'css')\n    .map(({ metadata, filename, source }) => {\n      if (dev) {\n        return `<style data-expo-css-hmr=\"${metadata.hmrId}\">` + source + '\\n</style>';\n      } else {\n        return [\n          `<link rel=\"preload\" href=\"/${filename}\" as=\"style\">`,\n          `<link rel=\"stylesheet\" href=\"/${filename}\">`,\n        ].join('');\n      }\n    })\n    .join('');\n\n  const jsAssets = assets.filter((asset) => asset.type === 'js');\n\n  const scripts = bundleUrl\n    ? `<script src=\"${bundleUrl}\" defer></script>`\n    : jsAssets\n        .map(({ filename }) => {\n          return `<script src=\"/${filename}\" defer></script>`;\n        })\n        .join('');\n\n  return template\n    .replace('</head>', `${styleString}</head>`)\n    .replace('</body>', `${scripts}\\n</body>`);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}