{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AppQuery = void 0;\nvar _graphql = require(\"graphql\");\nvar _graphqlTag = _interopRequireDefault(require(\"graphql-tag\"));\nvar _client = require(\"../client\");\nvar _app = require(\"../types/App\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar AppQuery = {\n  byIdAsync: function () {\n    var _byIdAsync = _asyncToGenerator(function* (projectId) {\n      var data = yield (0, _client).withErrorHandlingAsync(_client.graphqlClient.query(_graphqlTag.default`\n            query AppByIdQuery($appId: String!) {\n              app {\n                byId(appId: $appId) {\n                  id\n                  ...AppFragment\n                }\n              }\n            }\n            ${(0, _graphql).print(_app.AppFragmentNode)}\n          `, {\n        appId: projectId\n      }, {\n        additionalTypenames: [\"App\"]\n      }).toPromise());\n      return data.app.byId;\n    });\n    function byIdAsync(_x) {\n      return _byIdAsync.apply(this, arguments);\n    }\n    return byIdAsync;\n  }()\n};\nexports.AppQuery = AppQuery;","map":{"version":3,"names":["_asyncToGenerator","require","_graphql","_graphqlTag","_interopRequireDefault","_client","_app","AppQuery","byIdAsync","_byIdAsync","projectId","data","withErrorHandlingAsync","graphqlClient","query","default","print","AppFragmentNode","appId","additionalTypenames","toPromise","app","byId","_x","apply","arguments"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\api\\graphql\\queries\\AppQuery.ts"],"sourcesContent":["import { print } from 'graphql';\nimport gql from 'graphql-tag';\n\nimport { AppByIdQuery } from '../../../graphql/generated';\nimport { graphqlClient, withErrorHandlingAsync } from '../client';\nimport { AppFragmentNode } from '../types/App';\n\nexport const AppQuery = {\n  async byIdAsync(projectId: string): Promise<AppByIdQuery['app']['byId']> {\n    const data = await withErrorHandlingAsync(\n      graphqlClient\n        .query<AppByIdQuery>(\n          gql`\n            query AppByIdQuery($appId: String!) {\n              app {\n                byId(appId: $appId) {\n                  id\n                  ...AppFragment\n                }\n              }\n            }\n            ${print(AppFragmentNode)}\n          `,\n          { appId: projectId },\n          {\n            additionalTypenames: ['App'],\n          }\n        )\n        .toPromise()\n    );\n    return data.app.byId;\n  },\n};\n"],"mappings":"AAAA;;AAAA,IAAAA,iBAAA,GAAAC,OAAA;;;;;AAAsB,IAAAC,QAAS,GAAAD,OAAA,CAAT,SAAS;AACf,IAAAE,WAAa,GAAAC,sBAAA,CAAAH,OAAA,CAAb,aAAa;AAGyB,IAAAI,OAAW,GAAAJ,OAAA;AACjC,IAAAK,IAAc,GAAAL,OAAA;;;;;;AAEvC,IAAMM,QAAQ,GAAG;EAChBC,SAAS;IAAA,IAAAC,UAAA,GAAAT,iBAAA,YAACU,SAAiB,EAAwC;MACvE,IAAMC,IAAI,SAAS,IAAAN,OAAsB,EAoBxCO,sBApBwC,CACvCP,OAAa,CAAAQ,aAAA,CACVC,KAAK,CACJX,WAAG,CAAAY,OAAC;;;;;;;;;cASA,IAAAb,QAAK,EAAiBc,KAAjB,CAACV,IAAe,CAAAW,eAAA,CAAE;WAC1B,EACD;QAAEC,KAAK,EAAER;OAAW,EACpB;QACES,mBAAmB,EAAE,CAAC,KAAK;OAC5B,CACF,CACAC,SAAS,EAAE,CACf;MACD,OAAOT,IAAI,CAACU,GAAG,CAACC,IAAI;KACrB;IAAA,SAAAd,UAAAe,EAAA;MAAA,OAAAd,UAAA,CAAAe,KAAA,OAAAC,SAAA;IAAA;IAAA,OAAAjB,SAAA;EAAA;CACF;QAzBYD,QAAQ,GAARA,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}