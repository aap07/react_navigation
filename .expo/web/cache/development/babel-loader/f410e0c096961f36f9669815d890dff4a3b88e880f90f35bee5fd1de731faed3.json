{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadTsConfigPathsAsync = loadTsConfigPathsAsync;\nexports.readTsconfigAsync = readTsconfigAsync;\nvar _jsonFile = _interopRequireDefault(require(\"@expo/json-file\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _dir = require(\"../dir\");\nvar _evaluateTsConfig = require(\"./evaluateTsConfig\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = require(\"debug\")(\"expo:utils:tsconfig:load\");\nfunction loadTsConfigPathsAsync(_x) {\n  return _loadTsConfigPathsAsync.apply(this, arguments);\n}\nfunction _loadTsConfigPathsAsync() {\n  _loadTsConfigPathsAsync = _asyncToGenerator(function* (dir) {\n    var ref;\n    var options = (ref = yield readTsconfigAsync(dir)) != null ? ref : yield readJsconfigAsync(dir);\n    if (options) {\n      var ref1, ref2;\n      var _options = _slicedToArray(options, 2),\n        filepath = _options[0],\n        config = _options[1];\n      if ((ref1 = config.compilerOptions) == null ? void 0 : ref1.baseUrl) {\n        var ref3;\n        return {\n          paths: (ref3 = config.compilerOptions) == null ? void 0 : ref3.paths,\n          baseUrl: _path.default.resolve(dir, config.compilerOptions.baseUrl)\n        };\n      }\n      debug(`No baseUrl found in ${filepath}`);\n      return {\n        paths: (ref2 = config.compilerOptions) == null ? void 0 : ref2.paths,\n        baseUrl: dir\n      };\n    }\n    return null;\n  });\n  return _loadTsConfigPathsAsync.apply(this, arguments);\n}\nfunction readJsconfigAsync(_x2) {\n  return _readJsconfigAsync.apply(this, arguments);\n}\nfunction _readJsconfigAsync() {\n  _readJsconfigAsync = _asyncToGenerator(function* (projectRoot) {\n    var configPath = _path.default.join(projectRoot, \"jsconfig.json\");\n    if (yield (0, _dir).fileExistsAsync(configPath)) {\n      var config = yield _jsonFile.default.readAsync(configPath, {\n        json5: true\n      });\n      if (config) {\n        return [configPath, config];\n      }\n    }\n    return null;\n  });\n  return _readJsconfigAsync.apply(this, arguments);\n}\nfunction readTsconfigAsync(_x3) {\n  return _readTsconfigAsync.apply(this, arguments);\n}\nfunction _readTsconfigAsync() {\n  _readTsconfigAsync = _asyncToGenerator(function* (projectRoot) {\n    var configPath = _path.default.join(projectRoot, \"tsconfig.json\");\n    if (yield (0, _dir).fileExistsAsync(configPath)) {\n      var ts = (0, _evaluateTsConfig).importTypeScriptFromProjectOptionally(projectRoot);\n      if (ts) {\n        return [configPath, (0, _evaluateTsConfig).evaluateTsConfig(ts, configPath)];\n      }\n      debug(`typescript module not found in: ${projectRoot}`);\n    }\n    return null;\n  });\n  return _readTsconfigAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_slicedToArray","require","_asyncToGenerator","loadTsConfigPathsAsync","readTsconfigAsync","_jsonFile","_interopRequireDefault","_path","_dir","_evaluateTsConfig","debug","_x","_loadTsConfigPathsAsync","apply","arguments","dir","ref","options","readJsconfigAsync","ref1","ref2","_options","filepath","config","compilerOptions","baseUrl","ref3","paths","default","resolve","_x2","_readJsconfigAsync","projectRoot","configPath","join","fileExistsAsync","readAsync","json5","_x3","_readTsconfigAsync","ts","importTypeScriptFromProjectOptionally","evaluateTsConfig"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\utils\\tsconfig\\loadTsConfigPaths.ts"],"sourcesContent":["import JsonFile from '@expo/json-file';\nimport path from 'path';\n\nimport { fileExistsAsync } from '../dir';\nimport { evaluateTsConfig, importTypeScriptFromProjectOptionally } from './evaluateTsConfig';\n\nexport type TsConfigPaths = {\n  paths?: Record<string, string[]>;\n  baseUrl: string;\n};\n\ntype ConfigReadResults = [\n  string,\n  {\n    compilerOptions?: {\n      baseUrl?: string;\n      paths?: Record<string, string[]>;\n    };\n  }\n];\n\nconst debug = require('debug')('expo:utils:tsconfig:load') as typeof console.log;\n\nexport async function loadTsConfigPathsAsync(dir: string): Promise<TsConfigPaths | null> {\n  const options = (await readTsconfigAsync(dir)) ?? (await readJsconfigAsync(dir));\n  if (options) {\n    const [filepath, config] = options;\n    if (config.compilerOptions?.baseUrl) {\n      return {\n        paths: config.compilerOptions?.paths,\n        baseUrl: path.resolve(dir, config.compilerOptions.baseUrl),\n      };\n    }\n    debug(`No baseUrl found in ${filepath}`);\n    return {\n      paths: config.compilerOptions?.paths,\n      baseUrl: dir,\n    };\n  }\n  return null;\n}\n\nasync function readJsconfigAsync(projectRoot: string): Promise<null | ConfigReadResults> {\n  const configPath = path.join(projectRoot, 'jsconfig.json');\n  if (await fileExistsAsync(configPath)) {\n    const config = await JsonFile.readAsync(configPath, { json5: true });\n    if (config) {\n      return [configPath, config];\n    }\n  }\n  return null;\n}\n\n// TODO: Refactor for speed\nexport async function readTsconfigAsync(projectRoot: string): Promise<null | ConfigReadResults> {\n  const configPath = path.join(projectRoot, 'tsconfig.json');\n  if (await fileExistsAsync(configPath)) {\n    // We need to fully evaluate the tsconfig to get the baseUrl and paths in case they were applied in `extends`.\n    const ts = importTypeScriptFromProjectOptionally(projectRoot);\n    if (ts) {\n      return [configPath, evaluateTsConfig(ts, configPath)];\n    }\n    debug(`typescript module not found in: ${projectRoot}`);\n  }\n  return null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}