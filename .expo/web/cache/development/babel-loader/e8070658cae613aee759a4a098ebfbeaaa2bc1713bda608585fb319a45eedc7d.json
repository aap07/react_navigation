{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.requireUncachedFile = requireUncachedFile;\nexports.tryRequireThenImport = tryRequireThenImport;\nfunction tryRequireThenImport(_x) {\n  return _tryRequireThenImport.apply(this, arguments);\n}\nfunction _tryRequireThenImport() {\n  _tryRequireThenImport = _asyncToGenerator(function* (moduleId) {\n    try {\n      return require(moduleId);\n    } catch (requireError) {\n      var importESM;\n      try {\n        importESM = new Function('id', 'return import(id);');\n      } catch (_unused2) {\n        importESM = null;\n      }\n      if ((requireError === null || requireError === void 0 ? void 0 : requireError.code) === 'ERR_REQUIRE_ESM' && importESM) {\n        return (yield importESM(moduleId)).default;\n      }\n      throw requireError;\n    }\n  });\n  return _tryRequireThenImport.apply(this, arguments);\n}\nfunction requireUncachedFile(moduleId) {\n  try {} catch (_unused) {}\n  try {\n    return require(moduleId);\n  } catch (error) {\n    if (error instanceof Error) {\n      error.message = `Cannot load file ${moduleId}: ${error.message}`;\n    }\n    throw error;\n  }\n}","map":{"version":3,"names":["tryRequireThenImport","_x","_tryRequireThenImport","apply","arguments","_asyncToGenerator","moduleId","require","requireError","importESM","Function","_unused2","code","default","requireUncachedFile","_unused","error","Error","message"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\metro-config\\src\\transform-worker\\utils\\require.ts"],"sourcesContent":["export async function tryRequireThenImport<TModule>(moduleId: string): Promise<TModule> {\n  try {\n    return require(moduleId);\n  } catch (requireError: any) {\n    let importESM;\n    try {\n      // eslint-disable-next-line no-new-func\n      importESM = new Function('id', 'return import(id);');\n    } catch {\n      importESM = null;\n    }\n\n    if (requireError?.code === 'ERR_REQUIRE_ESM' && importESM) {\n      return (await importESM(moduleId)).default;\n    }\n\n    throw requireError;\n  }\n}\n\nexport function requireUncachedFile(moduleId: string) {\n  try {\n    // delete require.cache[require.resolve(moduleId)];\n  } catch {}\n  try {\n    return require(moduleId);\n  } catch (error: unknown) {\n    if (error instanceof Error) {\n      error.message = `Cannot load file ${moduleId}: ${error.message}`;\n    }\n    throw error;\n  }\n}\n"],"mappings":";;;;;;;;SAAsBA,oBAAoBA,CAAAC,EAAA;EAAA,OAAAC,qBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,sBAAA;EAAAA,qBAAA,GAAAG,iBAAA,CAAnC,WAA6CC,QAAgB,EAAoB;IACtF,IAAI;MACF,OAAOC,OAAO,CAACD,QAAQ,CAAC;IAC1B,CAAC,CAAC,OAAOE,YAAiB,EAAE;MAC1B,IAAIC,SAAS;MACb,IAAI;QAEFA,SAAS,GAAG,IAAIC,QAAQ,CAAC,IAAI,EAAE,oBAAoB,CAAC;MACtD,CAAC,CAAC,OAAAC,QAAA,EAAM;QACNF,SAAS,GAAG,IAAI;MAClB;MAEA,IAAI,CAAAD,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEI,IAAI,MAAK,iBAAiB,IAAIH,SAAS,EAAE;QACzD,OAAO,OAAOA,SAAS,CAACH,QAAQ,CAAC,EAAEO,OAAO;MAC5C;MAEA,MAAML,YAAY;IACpB;EACF;EAAA,OAAAN,qBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAEO,SAASU,mBAAmBA,CAACR,QAAgB,EAAE;EACpD,IAAI,CACF,CACD,CAAC,OAAAS,OAAA,EAAM,CAAC;EACT,IAAI;IACF,OAAOR,OAAO,CAACD,QAAQ,CAAC;EAC1B,CAAC,CAAC,OAAOU,KAAc,EAAE;IACvB,IAAIA,KAAK,YAAYC,KAAK,EAAE;MAC1BD,KAAK,CAACE,OAAO,GAAI,oBAAmBZ,QAAS,KAAIU,KAAK,CAACE,OAAQ,EAAC;IAClE;IACA,MAAMF,KAAK;EACb;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}