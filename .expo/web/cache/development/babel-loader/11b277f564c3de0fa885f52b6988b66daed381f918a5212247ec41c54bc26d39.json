{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Matchers = void 0;\nexports.Matchers = {\n  ANALYZE_MATCHER: /^Analyze(?:Shallow)?\\s(.*\\/(.*\\.(?:m|mm|cc|cpp|c|cxx)))\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\)$)?/m,\n  BUILD_TARGET_MATCHER: /^=== BUILD TARGET\\s(.*)\\sOF PROJECT\\s(.*)\\sWITH.*CONFIGURATION\\s(.*)\\s===/m,\n  AGGREGATE_TARGET_MATCHER: /^=== BUILD AGGREGATE TARGET\\s(.*)\\sOF PROJECT\\s(.*)\\sWITH.*CONFIGURATION\\s(.*)\\s===/m,\n  ANALYZE_TARGET_MATCHER: /^=== ANALYZE TARGET\\s(.*)\\sOF PROJECT\\s(.*)\\sWITH.*CONFIGURATION\\s(.*)\\s===/m,\n  CHECK_DEPENDENCIES_MATCHER: /^Check dependencies/m,\n  SHELL_COMMAND_MATCHER: /^\\s{4}(cd|setenv|(?:[\\w/:\\\\\\s\\-.]+?\\/)?[\\w-]+)\\s(.*)$/m,\n  CLEAN_REMOVE_MATCHER: /^Clean.Remove/m,\n  CLEAN_TARGET_MATCHER: /^=== CLEAN TARGET\\s(.*)\\sOF PROJECT\\s(.*)\\sWITH CONFIGURATION\\s(.*)\\s===/m,\n  CODESIGN_MATCHER: /^CodeSign\\s((?:\\\\.|[^ ])+\\/((?:\\\\.|[^ ])+\\.(?:\\w+)))\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\)$)?/m,\n  CODESIGN_FRAMEWORK_MATCHER: /^CodeSign\\s((?:\\\\.|[^ ])+\\/((?:\\\\.|[^ ])+\\.framework))\\/Versions\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\)$)?/m,\n  COMPILE_MATCHER: /^(Compile[\\w]+)\\s.+?\\s((?:\\\\.|[^ ])+\\/((?:\\\\.|[^ ])+\\.(?:mm|m|cpp|cxx|cc|c|swift)))\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\)$)?/m,\n  COMPILE_COMMAND_MATCHER: /^\\s*(.*clang\\s.*\\s-c\\s(.*\\.(?:m|mm|c|cc|cpp|cxx))\\s.*\\.o)$/m,\n  COMPILE_XIB_MATCHER: /^CompileXIB\\s(.*\\/(.*\\.xib))\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\)$)?/m,\n  COMPILE_STORYBOARD_MATCHER: /^CompileStoryboard\\s(.*\\/([^/].*\\.storyboard))\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\)$)?/m,\n  ANY_COPY_MATCHER: /^(CpResource|CopyStringsFile|CopyPlistFile|CpHeader|PBXCp)\\s(\\/?.*\\/(?:.*\\.\\w+))\\s(\\/?.*\\/(?:.*\\.\\w+))\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\))?/m,\n  COMPILE_SWIFT_SOURCES_MATCHER: /^(CompileSwiftSources)\\s([^\\s]+) ([^\\s]+) ([^\\s]+) (?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\))?/m,\n  EMIT_SWIFT_MODULE_MATCHER: /^(EmitSwiftModule)\\s([^\\s]+) ([^\\s]+) (?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\))?/m,\n  EXECUTED_MATCHER: /^\\s*Executed/m,\n  REMARK_MATCHER: /^remark: (.*)$/m,\n  FAILING_TEST_MATCHER: /^\\s*(.+:\\d+):\\serror:\\s[+-]\\[(.*)\\s(.*)\\]\\s:(?:\\s'.*'\\s\\[FAILED\\],)?\\s(.*)/m,\n  UI_FAILING_TEST_MATCHER: /^\\s{4}t = \\s+\\d+\\.\\d+s\\s+Assertion Failure: (.*:\\d+): (.*)$/m,\n  RESTARTING_TESTS_MATCHER: /^Restarting after unexpected exit or crash in.+$/m,\n  GENERATE_DSYM_MATCHER: /^GenerateDSYMFile (\\/.*\\/(.*\\.dSYM))\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\)$)?/m,\n  LIBTOOL_MATCHER: /^Libtool\\s(.*\\/(.*\\.a))\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\)$)?/m,\n  LINKING_MATCHER: /^Ld (\\/?.*\\/(.+?(?:[^\\\\](?=\\s)))) ([^(|\\s]*)(?:\\s([^(|\\s]*)\\s)?\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\)$)?/m,\n  TEST_CASE_PASSED_MATCHER: /^\\s*Test Case\\s'-\\[(.*)\\s(.*)\\]'\\spassed\\s\\((\\d*\\.\\d{3})\\sseconds\\)/m,\n  TEST_CASE_STARTED_MATCHER: /^Test Case '-\\[(.*) (.*)\\]' started.$/m,\n  TEST_CASE_PENDING_MATCHER: /^Test Case\\s'-\\[(.*)\\s(.*)PENDING\\]'\\spassed/m,\n  TEST_CASE_MEASURED_MATCHER: /^[^:]*:[^:]*:\\sTest Case\\s'-\\[(.*)\\s(.*)\\]'\\smeasured\\s\\[Time,\\sseconds\\]\\saverage:\\s(\\d*\\.\\d{3}),/m,\n  PHASE_SUCCESS_MATCHER: /^\\*\\*\\s(.*)\\sSUCCEEDED\\s\\*\\*(?:\\s+\\[(.*)\\])?/m,\n  PHASE_SCRIPT_EXECUTION_MATCHER: /^PhaseScriptExecution\\s((?:\\\\ |\\S)*)\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\))?/m,\n  PROCESS_PCH_MATCHER: /^ProcessPCH(?:\\+\\+)? (\\/?.*\\/([^(|\\s|\\n]*(?:.pch.(?:g|p)ch)))(?:\\s(.*.pch))? ([^(|\\s]*)(?:\\s([^(|\\s]*)\\s)?\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\)$)?/m,\n  PROCESS_PCH_COMMAND_MATCHER: /^\\s*.*\\/usr\\/bin\\/clang\\s.*\\s-c\\s(.*)\\s-o\\s.*/m,\n  PREPROCESS_MATCHER: /^Preprocess\\s(?:(?:\\\\ |[^ ])*)\\s((?:\\\\ |[^ ])*)$/m,\n  PBXCP_MATCHER: /^PBXCp\\s((?:\\\\ |[^ ])*)/m,\n  PROCESS_INFO_PLIST_MATCHER: /^ProcessInfoPlistFile\\s.*\\.plist\\s(.*\\/+(.*\\.plist))\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\)$)?/m,\n  TESTS_RUN_COMPLETION_MATCHER: /^\\s*Test Suite '(?:.*\\/)?(.*[ox]ctest.*)' (finished|passed|failed) at (.*)/m,\n  TEST_SUITE_STARTED_MATCHER: /^\\s*Test Suite '(?:.*\\/)?(.*[ox]ctest.*)' started at(.*)/m,\n  TEST_SUITE_START_MATCHER: /^\\s*Test Suite '(.*)' started at/m,\n  TIFFUTIL_MATCHER: /^TiffUtil\\s(.*)/m,\n  TOUCH_MATCHER: /^Touch\\s(.*\\/([^(|\\n]+))\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\))?/m,\n  WRITE_FILE_MATCHER: /^write-file\\s(.*)/m,\n  WRITE_AUXILIARY_FILES: /^Write auxiliary files/m,\n  Warnings: {\n    COMPILE_WARNING_MATCHER: /^(\\/.+\\/(.*):.*:.*):\\swarning:\\s(.+?(?=\\(in)?)(?:\\(in target '([^']*)' from project '([^']*)'\\))?$/m,\n    COMPILE_WARNING_INLINE_MATCHER: /^(\\/.+\\/(.*):.*:.*):\\swarning:\\s(.+?(?=\\(in)?)(?:\\(in target '([^']*)' from project '([^']*)'\\))$/m,\n    LD_WARNING_MATCHER: /^(ld: )warning: (.*)/m,\n    GENERIC_WARNING_MATCHER: /^warning:\\s(.*)$/m,\n    MISSING_FILE_COMPILER_WARNING_MATCHER: /(.*): No such file or directory$/m,\n    VERSION_MISMATCH: /^The\\s(\\w*)\\s.*'([^']*)'.*to (\\d+\\.?\\d+\\.?\\d*),.*(\\d+\\.?\\d+\\.?\\d*) to (\\d+\\.?\\d+\\.?\\d*).\\s.*target '([^']*)'.*project '([^']*)'/m,\n    MISSING_ARCHITECTURE: /^\\[CP\\] Vendored binary\\s'([^']*)'.*contains architectures \\(([\\w\\d\\s]+)\\) none of which match the current build architectures \\(([\\w\\d\\s]+)\\)/m,\n    SKIPPING_DUPLICATE_FILE: /^Skipping duplicate build file in ([A-Za-z\\s]+) build phase: (.*) \\(in\\s.*target '([^']*)'.*project '([^']*)'/m,\n    TARGETS_FILE_INCLUDED: /^The Copy Bundle Resources build phase contains this target's (.*) file\\s?'(.*)'. \\(in\\s.*target '([^']*)'.*project '([^']*)'/m,\n    WILL_NOT_BE_CODE_SIGNED_MATCHER: /^(.* will not be code signed because .*)$/m,\n    LINKER_METHOD_OVERRIDE: /method '(.*)' in category from (?:(.*\\/(?:.*\\.\\w))(?:\\((.*\\.\\w)\\)))\\soverrides method from class in (?:(.*\\/(?:.*\\.\\w))(?:\\((.*\\.\\w)\\)))/m\n  },\n  Errors: {\n    CLANG_ERROR_MATCHER: /^(clang: error:.*)$/m,\n    CHECK_DEPENDENCIES_ERRORS_MATCHER: /^(Code\\s?Sign error:.*|Code signing is required for product type .* in SDK .*|No profile matching .* found:.*|Provisioning profile .* doesn't .*|Swift is unavailable on .*|.?Use Legacy Swift Language Version.*)$/m,\n    UNSUPPORTED_ENTITLEMENT_MATCHER: /^error: Provisioning profile (.*) doesn't (?:support|include) the (.*) (capability|entitlement)\\.(?:\\s\\(in\\s.*target '([^']*)'.*project '([^']*)'\\)$)?/m,\n    PROVISIONING_PROFILE_REQUIRED_MATCHER: /^(.*requires a provisioning profile.*)$/m,\n    NO_CERTIFICATE_MATCHER: /^(No certificate matching.*)$/m,\n    COMPILE_ERROR_MATCHER: /^(\\/.+\\/(.*):.*:.*):\\s(?:fatal\\s)?error:\\s(.+?(?=\\(in)?)(?:\\(in target '([^']*)' from project '([^']*)'\\))?$/m,\n    COMPILE_ERROR_INLINE_MATCHER: /^(\\/.+\\/(.*):.*:.*):\\s(?:fatal\\s)?error:\\s(.+?(?=\\(in)?)(?:\\(in target '([^']*)' from project '([^']*)'\\))$/m,\n    CURSOR_MATCHER: /^([\\s~]*\\^[\\s~]*)$/m,\n    RSYNC_ERROR_MATCHER: /^(rsync error:.*)$/m,\n    FATAL_ERROR_MATCHER: /^(fatal error:.*)$/m,\n    FILE_MISSING_ERROR_MATCHER: /^<unknown>:0:\\s(error:\\s.*)\\s'(\\/.+\\/.*\\..*)'$/m,\n    LD_ERROR_MATCHER: /^(ld:.*)/m,\n    LINKER_DUPLICATE_SYMBOLS_LOCATION_MATCHER: /^\\s+(\\/.*\\.o[)]?)$/m,\n    LINKER_DUPLICATE_SYMBOLS_MATCHER: /^((duplicate symbol|ld: warning: duplicate symbol) .*):$/m,\n    LINKER_UNDEFINED_SYMBOL_LOCATION_MATCHER: /^(.* in .*\\.o[)]?)$/m,\n    LINKER_UNDEFINED_SYMBOLS_MATCHER: /^(Undefined symbols for architecture .*):$/m,\n    PODS_ERROR_MATCHER: /^(error:\\s.*)/m,\n    SYMBOL_REFERENCED_FROM_MATCHER: /\\s+\"(.*)\", referenced from:$/m,\n    MODULE_INCLUDES_ERROR_MATCHER: /^<module-includes>:.*?:.*?:\\s(?:fatal\\s)?(error:\\s.*)$/m\n  }\n};","map":{"version":3,"names":["exports","Matchers","ANALYZE_MATCHER","BUILD_TARGET_MATCHER","AGGREGATE_TARGET_MATCHER","ANALYZE_TARGET_MATCHER","CHECK_DEPENDENCIES_MATCHER","SHELL_COMMAND_MATCHER","CLEAN_REMOVE_MATCHER","CLEAN_TARGET_MATCHER","CODESIGN_MATCHER","CODESIGN_FRAMEWORK_MATCHER","COMPILE_MATCHER","COMPILE_COMMAND_MATCHER","COMPILE_XIB_MATCHER","COMPILE_STORYBOARD_MATCHER","ANY_COPY_MATCHER","COMPILE_SWIFT_SOURCES_MATCHER","EMIT_SWIFT_MODULE_MATCHER","EXECUTED_MATCHER","REMARK_MATCHER","FAILING_TEST_MATCHER","UI_FAILING_TEST_MATCHER","RESTARTING_TESTS_MATCHER","GENERATE_DSYM_MATCHER","LIBTOOL_MATCHER","LINKING_MATCHER","TEST_CASE_PASSED_MATCHER","TEST_CASE_STARTED_MATCHER","TEST_CASE_PENDING_MATCHER","TEST_CASE_MEASURED_MATCHER","PHASE_SUCCESS_MATCHER","PHASE_SCRIPT_EXECUTION_MATCHER","PROCESS_PCH_MATCHER","PROCESS_PCH_COMMAND_MATCHER","PREPROCESS_MATCHER","PBXCP_MATCHER","PROCESS_INFO_PLIST_MATCHER","TESTS_RUN_COMPLETION_MATCHER","TEST_SUITE_STARTED_MATCHER","TEST_SUITE_START_MATCHER","TIFFUTIL_MATCHER","TOUCH_MATCHER","WRITE_FILE_MATCHER","WRITE_AUXILIARY_FILES","Warnings","COMPILE_WARNING_MATCHER","COMPILE_WARNING_INLINE_MATCHER","LD_WARNING_MATCHER","GENERIC_WARNING_MATCHER","MISSING_FILE_COMPILER_WARNING_MATCHER","VERSION_MISMATCH","MISSING_ARCHITECTURE","SKIPPING_DUPLICATE_FILE","TARGETS_FILE_INCLUDED","WILL_NOT_BE_CODE_SIGNED_MATCHER","LINKER_METHOD_OVERRIDE","Errors","CLANG_ERROR_MATCHER","CHECK_DEPENDENCIES_ERRORS_MATCHER","UNSUPPORTED_ENTITLEMENT_MATCHER","PROVISIONING_PROFILE_REQUIRED_MATCHER","NO_CERTIFICATE_MATCHER","COMPILE_ERROR_MATCHER","COMPILE_ERROR_INLINE_MATCHER","CURSOR_MATCHER","RSYNC_ERROR_MATCHER","FATAL_ERROR_MATCHER","FILE_MISSING_ERROR_MATCHER","LD_ERROR_MATCHER","LINKER_DUPLICATE_SYMBOLS_LOCATION_MATCHER","LINKER_DUPLICATE_SYMBOLS_MATCHER","LINKER_UNDEFINED_SYMBOL_LOCATION_MATCHER","LINKER_UNDEFINED_SYMBOLS_MATCHER","PODS_ERROR_MATCHER","SYMBOL_REFERENCED_FROM_MATCHER","MODULE_INCLUDES_ERROR_MATCHER"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\xcpretty\\src\\Matchers.ts"],"sourcesContent":["export const Matchers = {\n  /**\n   * @regex Captured groups\n   * `$1` filePath\n   * `$2` fileName\n   */\n  ANALYZE_MATCHER: /^Analyze(?:Shallow)?\\s(.*\\/(.*\\.(?:m|mm|cc|cpp|c|cxx)))\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\)$)?/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` target\n   * `$2` project\n   * `$3` configuration\n   */\n  BUILD_TARGET_MATCHER: /^=== BUILD TARGET\\s(.*)\\sOF PROJECT\\s(.*)\\sWITH.*CONFIGURATION\\s(.*)\\s===/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` target\n   * `$2` project\n   * `$3` configuration\n   */\n  AGGREGATE_TARGET_MATCHER: /^=== BUILD AGGREGATE TARGET\\s(.*)\\sOF PROJECT\\s(.*)\\sWITH.*CONFIGURATION\\s(.*)\\s===/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` target\n   * `$2` project\n   * `$3` configuration\n   */\n  ANALYZE_TARGET_MATCHER: /^=== ANALYZE TARGET\\s(.*)\\sOF PROJECT\\s(.*)\\sWITH.*CONFIGURATION\\s(.*)\\s===/m,\n\n  CHECK_DEPENDENCIES_MATCHER: /^Check dependencies/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` command path\n   * `$2` arguments\n   */\n  SHELL_COMMAND_MATCHER: /^\\s{4}(cd|setenv|(?:[\\w/:\\\\\\s\\-.]+?\\/)?[\\w-]+)\\s(.*)$/m,\n\n  /**\n   * @regex Nothing returned here for now\n   */\n  CLEAN_REMOVE_MATCHER: /^Clean.Remove/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` target\n   * `$2` project\n   * `$3` configuration\n   */\n  CLEAN_TARGET_MATCHER: /^=== CLEAN TARGET\\s(.*)\\sOF PROJECT\\s(.*)\\sWITH CONFIGURATION\\s(.*)\\s===/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` = file\n   * `$2` fileName (e.g. Exponent.app)\n   * `$3` target (e.g. ABI39_0_0EXAdsFacebook)\n   * `$4` project (e.g. ABI39_0_0)\n   */\n  CODESIGN_MATCHER: /^CodeSign\\s((?:\\\\.|[^ ])+\\/((?:\\\\.|[^ ])+\\.(?:\\w+)))\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\)$)?/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` = file\n   */\n  CODESIGN_FRAMEWORK_MATCHER: /^CodeSign\\s((?:\\\\.|[^ ])+\\/((?:\\\\.|[^ ])+\\.framework))\\/Versions\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\)$)?/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` type\n   * `$2` filePath\n   * `$3` fileName (e.g. KWNull.m)\n   * `$4` target (e.g. ABI39_0_0EXAdsFacebook)\n   * `$5` project (e.g. ABI39_0_0)\n   *\n   * The order of extensions is important in order to make alternation greedier.\n   */\n  COMPILE_MATCHER: /^(Compile[\\w]+)\\s.+?\\s((?:\\\\.|[^ ])+\\/((?:\\\\.|[^ ])+\\.(?:mm|m|cpp|cxx|cc|c|swift)))\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\)$)?/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` compiler_command\n   * `$2` filePath\n   */\n  COMPILE_COMMAND_MATCHER: /^\\s*(.*clang\\s.*\\s-c\\s(.*\\.(?:m|mm|c|cc|cpp|cxx))\\s.*\\.o)$/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` filePath\n   * `$2` fileName (e.g. MainMenu.xib)\n   */\n  COMPILE_XIB_MATCHER: /^CompileXIB\\s(.*\\/(.*\\.xib))\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\)$)?/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` filePath\n   * `$2` fileName (e.g. Main.storyboard)\n   */\n  COMPILE_STORYBOARD_MATCHER: /^CompileStoryboard\\s(.*\\/([^/].*\\.storyboard))\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\)$)?/m,\n\n  /**\n   * `$1` type of copy\n   * `$2` file path 1\n   * `$3` file path 2\n   * `$4` target\n   * `$5` project\n   */\n  ANY_COPY_MATCHER: /^(CpResource|CopyStringsFile|CopyPlistFile|CpHeader|PBXCp)\\s(\\/?.*\\/(?:.*\\.\\w+))\\s(\\/?.*\\/(?:.*\\.\\w+))\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\))?/m,\n\n  /**\n   * `CompileSwiftSources normal x86_64 com.apple.xcode.tools.swift.compiler (in target 'expo-dev-menu-interface' from project 'Pods')`\n   */\n  COMPILE_SWIFT_SOURCES_MATCHER: /^(CompileSwiftSources)\\s([^\\s]+) ([^\\s]+) ([^\\s]+) (?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\))?/m,\n\n  /**\n   * `EmitSwiftModule normal x86_64 (in target 'expo-dev-menu-interface' from project 'Pods')`\n   */\n  EMIT_SWIFT_MODULE_MATCHER: /^(EmitSwiftModule)\\s([^\\s]+) ([^\\s]+) (?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\))?/m,\n\n  EXECUTED_MATCHER: /^\\s*Executed/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` = whole message.\n   *\n   * `remark: Incremental compilation has been disabled: it is not compatible with whole module optimization`\n   */\n  REMARK_MATCHER: /^remark: (.*)$/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` = file\n   * `$2` = test_suite\n   * `$3` = test_case\n   * `$4` = reason\n   */\n  FAILING_TEST_MATCHER: /^\\s*(.+:\\d+):\\serror:\\s[+-]\\[(.*)\\s(.*)\\]\\s:(?:\\s'.*'\\s\\[FAILED\\],)?\\s(.*)/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` = file\n   * `$2` = reason\n   */\n  UI_FAILING_TEST_MATCHER: /^\\s{4}t = \\s+\\d+\\.\\d+s\\s+Assertion Failure: (.*:\\d+): (.*)$/m,\n\n  /**\n   * @regex Captured groups\n   */\n  RESTARTING_TESTS_MATCHER: /^Restarting after unexpected exit or crash in.+$/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` = dsym\n   */\n  GENERATE_DSYM_MATCHER: /^GenerateDSYMFile (\\/.*\\/(.*\\.dSYM))\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\)$)?/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` = library\n   */\n  LIBTOOL_MATCHER: /^Libtool\\s(.*\\/(.*\\.a))\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\)$)?/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` = targetName\n   * `$2` = build_variants (normal, profile, debug)\n   * `$3` = architecture\n   */\n  LINKING_MATCHER: /^Ld (\\/?.*\\/(.+?(?:[^\\\\](?=\\s)))) ([^(|\\s]*)(?:\\s([^(|\\s]*)\\s)?\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\)$)?/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` = suite\n   * `$2` = test_case\n   * `$3` = time\n   */\n  TEST_CASE_PASSED_MATCHER: /^\\s*Test Case\\s'-\\[(.*)\\s(.*)\\]'\\spassed\\s\\((\\d*\\.\\d{3})\\sseconds\\)/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` = suite\n   * `$2` = test_case\n   */\n  TEST_CASE_STARTED_MATCHER: /^Test Case '-\\[(.*) (.*)\\]' started.$/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` = suite\n   * `$2` = test_case\n   */\n  TEST_CASE_PENDING_MATCHER: /^Test Case\\s'-\\[(.*)\\s(.*)PENDING\\]'\\spassed/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` = suite\n   * `$2` = test_case\n   * `$3` = time\n   */\n  TEST_CASE_MEASURED_MATCHER: /^[^:]*:[^:]*:\\sTest Case\\s'-\\[(.*)\\s(.*)\\]'\\smeasured\\s\\[Time,\\sseconds\\]\\saverage:\\s(\\d*\\.\\d{3}),/m,\n\n  PHASE_SUCCESS_MATCHER: /^\\*\\*\\s(.*)\\sSUCCEEDED\\s\\*\\*(?:\\s+\\[(.*)\\])?/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` = script_name\n   */\n  PHASE_SCRIPT_EXECUTION_MATCHER: /^PhaseScriptExecution\\s((?:\\\\ |\\S)*)\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\))?/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` = file\n   * `$1` = target\n   * `$1` = project\n   */\n\n  PROCESS_PCH_MATCHER: /^ProcessPCH(?:\\+\\+)? (\\/?.*\\/([^(|\\s|\\n]*(?:.pch.(?:g|p)ch)))(?:\\s(.*.pch))? ([^(|\\s]*)(?:\\s([^(|\\s]*)\\s)?\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\)$)?/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` filePath\n   */\n  PROCESS_PCH_COMMAND_MATCHER: /^\\s*.*\\/usr\\/bin\\/clang\\s.*\\s-c\\s(.*)\\s-o\\s.*/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` = file\n   */\n  PREPROCESS_MATCHER: /^Preprocess\\s(?:(?:\\\\ |[^ ])*)\\s((?:\\\\ |[^ ])*)$/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` = file\n   */\n  PBXCP_MATCHER: /^PBXCp\\s((?:\\\\ |[^ ])*)/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` = file\n   */\n  PROCESS_INFO_PLIST_MATCHER: /^ProcessInfoPlistFile\\s.*\\.plist\\s(.*\\/+(.*\\.plist))\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\)$)?/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` = suite\n   * `$2` = time\n   */\n  TESTS_RUN_COMPLETION_MATCHER: /^\\s*Test Suite '(?:.*\\/)?(.*[ox]ctest.*)' (finished|passed|failed) at (.*)/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` = suite\n   * `$2` = time\n   */\n  TEST_SUITE_STARTED_MATCHER: /^\\s*Test Suite '(?:.*\\/)?(.*[ox]ctest.*)' started at(.*)/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` test suite name\n   */\n  TEST_SUITE_START_MATCHER: /^\\s*Test Suite '(.*)' started at/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` fileName\n   */\n  TIFFUTIL_MATCHER: /^TiffUtil\\s(.*)/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` filePath\n   * `$2` fileName\n   */\n  TOUCH_MATCHER: /^Touch\\s(.*\\/([^(|\\n]+))\\s?[^(]+(?:\\(in\\s.*target '([^']*)'.*project '([^']*)'\\))?/m,\n\n  /**\n   * @regex Captured groups\n   * `$1` filePath\n   */\n  WRITE_FILE_MATCHER: /^write-file\\s(.*)/m,\n\n  WRITE_AUXILIARY_FILES: /^Write auxiliary files/m,\n\n  Warnings: {\n    /**\n     * @regex Captured groups\n     * `$1` = filePath\n     * `$2` = fileName\n     * `$3` = reason\n     */\n    COMPILE_WARNING_MATCHER: /^(\\/.+\\/(.*):.*:.*):\\swarning:\\s(.+?(?=\\(in)?)(?:\\(in target '([^']*)' from project '([^']*)'\\))?$/m,\n\n    COMPILE_WARNING_INLINE_MATCHER: /^(\\/.+\\/(.*):.*:.*):\\swarning:\\s(.+?(?=\\(in)?)(?:\\(in target '([^']*)' from project '([^']*)'\\))$/m,\n\n    /**\n     * @regex Captured groups\n     * `$1` = ld prefix\n     * `$2` = warning message\n     */\n    LD_WARNING_MATCHER: /^(ld: )warning: (.*)/m,\n\n    /**\n     * @regex Captured groups\n     * `$1` = whole warning\n     */\n    GENERIC_WARNING_MATCHER: /^warning:\\s(.*)$/m,\n\n    /**\n     * @regex Captured groups\n     * `$1` = filePath\n     */\n    MISSING_FILE_COMPILER_WARNING_MATCHER: /(.*): No such file or directory$/m,\n\n    /**\n     * @regex Captured groups\n     * `$1` filePath\n     * `$2` fileName\n     */\n    VERSION_MISMATCH: /^The\\s(\\w*)\\s.*'([^']*)'.*to (\\d+\\.?\\d+\\.?\\d*),.*(\\d+\\.?\\d+\\.?\\d*) to (\\d+\\.?\\d+\\.?\\d*).\\s.*target '([^']*)'.*project '([^']*)'/m,\n    /**\n     * @regex Captured groups\n     */\n    MISSING_ARCHITECTURE: /^\\[CP\\] Vendored binary\\s'([^']*)'.*contains architectures \\(([\\w\\d\\s]+)\\) none of which match the current build architectures \\(([\\w\\d\\s]+)\\)/m,\n    /**\n     * @regex Captured groups\n     * `$1` buildPhase\n     * `$2` filePath\n     * `$3` target\n     * `$4` project\n     */\n    SKIPPING_DUPLICATE_FILE: /^Skipping duplicate build file in ([A-Za-z\\s]+) build phase: (.*) \\(in\\s.*target '([^']*)'.*project '([^']*)'/m,\n    /**\n     * @regex Captured groups\n     * `$1` reservedFileDescription (Info.plist or entitlements)\n     * `$2` filePath\n     * `$3` target\n     * `$4` project\n     */\n    TARGETS_FILE_INCLUDED: /^The Copy Bundle Resources build phase contains this target's (.*) file\\s?'(.*)'. \\(in\\s.*target '([^']*)'.*project '([^']*)'/m,\n\n    /**\n     * @regex Captured groups\n     * `$1` = whole warning\n     */\n    WILL_NOT_BE_CODE_SIGNED_MATCHER: /^(.* will not be code signed because .*)$/m,\n    /**\n     * @regex Captured groups\n     * `$1` = whole warning\n     */\n    LINKER_METHOD_OVERRIDE: /method '(.*)' in category from (?:(.*\\/(?:.*\\.\\w))(?:\\((.*\\.\\w)\\)))\\soverrides method from class in (?:(.*\\/(?:.*\\.\\w))(?:\\((.*\\.\\w)\\)))/m,\n  },\n\n  Errors: {\n    /**\n     * @regex Captured groups\n     * `$1` = whole error\n     */\n    CLANG_ERROR_MATCHER: /^(clang: error:.*)$/m,\n\n    /**\n     * @regex Captured groups\n     * `$1` = whole error\n     */\n    CHECK_DEPENDENCIES_ERRORS_MATCHER: /^(Code\\s?Sign error:.*|Code signing is required for product type .* in SDK .*|No profile matching .* found:.*|Provisioning profile .* doesn't .*|Swift is unavailable on .*|.?Use Legacy Swift Language Version.*)$/m,\n\n    /**\n     * @regex Captured groups\n     * `$0` = whole error\n     * `$1` = profile name\n     * `$2` = entitlement name\n     * `$3` = entitlement type <capability|entitlement>\n     * `$4` = native target\n     * `$5` = native project\n     */\n    UNSUPPORTED_ENTITLEMENT_MATCHER: /^error: Provisioning profile (.*) doesn't (?:support|include) the (.*) (capability|entitlement)\\.(?:\\s\\(in\\s.*target '([^']*)'.*project '([^']*)'\\)$)?/m,\n\n    /**\n     * @regex Captured groups\n     * `$1` = whole error\n     */\n    PROVISIONING_PROFILE_REQUIRED_MATCHER: /^(.*requires a provisioning profile.*)$/m,\n\n    /**\n     * @regex Captured groups\n     * `$1` = whole error\n     */\n    NO_CERTIFICATE_MATCHER: /^(No certificate matching.*)$/m,\n\n    /**\n     * @regex Captured groups\n     * `$1` = filePath\n     * `$2` = fileName\n     * `$3` = reason\n     */\n    COMPILE_ERROR_MATCHER: /^(\\/.+\\/(.*):.*:.*):\\s(?:fatal\\s)?error:\\s(.+?(?=\\(in)?)(?:\\(in target '([^']*)' from project '([^']*)'\\))?$/m,\n\n    COMPILE_ERROR_INLINE_MATCHER: /^(\\/.+\\/(.*):.*:.*):\\s(?:fatal\\s)?error:\\s(.+?(?=\\(in)?)(?:\\(in target '([^']*)' from project '([^']*)'\\))$/m,\n\n    /**\n     * @regex Captured groups\n     * `$1` cursor (with whitespaces and tildes)\n     */\n    CURSOR_MATCHER: /^([\\s~]*\\^[\\s~]*)$/m,\n\n    /**\n     * @regex Captured groups\n     * `$1` = whole error.\n     *\n     * Appears to be related to the installation of files on the connected device\n     */\n    RSYNC_ERROR_MATCHER: /^(rsync error:.*)$/m,\n\n    /**\n     * @regex Captured groups\n     * `$1` = whole error.\n     * it varies a lot, not sure if it makes sense to catch everything separately\n     */\n    FATAL_ERROR_MATCHER: /^(fatal error:.*)$/m,\n\n    /**\n     * @regex Captured groups\n     * `$1` = whole error.\n     * `$2` = file path\n     */\n    FILE_MISSING_ERROR_MATCHER: /^<unknown>:0:\\s(error:\\s.*)\\s'(\\/.+\\/.*\\..*)'$/m,\n\n    /**\n     * @regex Captured groups\n     * `$1` = whole error\n     */\n    LD_ERROR_MATCHER: /^(ld:.*)/m,\n\n    /**\n     * @regex Captured groups\n     * `$1` file path\n     */\n    LINKER_DUPLICATE_SYMBOLS_LOCATION_MATCHER: /^\\s+(\\/.*\\.o[)]?)$/m,\n\n    /**\n     * @regex Captured groups\n     * `$1` reason\n     */\n    LINKER_DUPLICATE_SYMBOLS_MATCHER: /^((duplicate symbol|ld: warning: duplicate symbol) .*):$/m,\n\n    /**\n     * @regex Captured groups\n     * `$1` symbol location\n     */\n    LINKER_UNDEFINED_SYMBOL_LOCATION_MATCHER: /^(.* in .*\\.o[)]?)$/m,\n\n    /**\n     * @regex Captured groups\n     * `$1` reason\n     */\n    LINKER_UNDEFINED_SYMBOLS_MATCHER: /^(Undefined symbols for architecture .*):$/m,\n\n    /**\n     * @regex Captured groups\n     * `$1` reason\n     */\n    PODS_ERROR_MATCHER: /^(error:\\s.*)/m,\n\n    /**\n     * @regex Captured groups\n     * `$1` = reference\n     */\n    SYMBOL_REFERENCED_FROM_MATCHER: /\\s+\"(.*)\", referenced from:$/m,\n\n    /**\n     * @regex Captured groups\n     * `$1` = error reason\n     */\n    MODULE_INCLUDES_ERROR_MATCHER: /^<module-includes>:.*?:.*?:\\s(?:fatal\\s)?(error:\\s.*)$/m,\n  },\n};\n"],"mappings":";;;;;;AAAaA,OAAA,CAAAC,QAAQ,GAAG;EAMtBC,eAAe,EAAE,qHAAqH;EAQtIC,oBAAoB,EAAE,4EAA4E;EAQlGC,wBAAwB,EAAE,sFAAsF;EAQhHC,sBAAsB,EAAE,8EAA8E;EAEtGC,0BAA0B,EAAE,sBAAsB;EAOlDC,qBAAqB,EAAE,wDAAwD;EAK/EC,oBAAoB,EAAE,gBAAgB;EAQtCC,oBAAoB,EAAE,2EAA2E;EASjGC,gBAAgB,EAAE,kHAAkH;EAMpIC,0BAA0B,EAAE,8HAA8H;EAY1JC,eAAe,EAAE,iJAAiJ;EAOlKC,uBAAuB,EAAE,6DAA6D;EAOtFC,mBAAmB,EAAE,0FAA0F;EAO/GC,0BAA0B,EAAE,4GAA4G;EASxIC,gBAAgB,EAAE,mKAAmK;EAKrLC,6BAA6B,EAAE,wGAAwG;EAKvIC,yBAAyB,EAAE,2FAA2F;EAEtHC,gBAAgB,EAAE,eAAe;EAQjCC,cAAc,EAAE,iBAAiB;EASjCC,oBAAoB,EAAE,6EAA6E;EAOnGC,uBAAuB,EAAE,8DAA8D;EAKvFC,wBAAwB,EAAE,mDAAmD;EAM7EC,qBAAqB,EAAE,kGAAkG;EAMzHC,eAAe,EAAE,qFAAqF;EAQtGC,eAAe,EAAE,6HAA6H;EAQ9IC,wBAAwB,EAAE,sEAAsE;EAOhGC,yBAAyB,EAAE,wCAAwC;EAOnEC,yBAAyB,EAAE,+CAA+C;EAQ1EC,0BAA0B,EAAE,qGAAqG;EAEjIC,qBAAqB,EAAE,+CAA+C;EAMtEC,8BAA8B,EAAE,iGAAiG;EASjIC,mBAAmB,EAAE,wKAAwK;EAM7LC,2BAA2B,EAAE,gDAAgD;EAM7EC,kBAAkB,EAAE,mDAAmD;EAMvEC,aAAa,EAAE,0BAA0B;EAMzCC,0BAA0B,EAAE,kHAAkH;EAO9IC,4BAA4B,EAAE,6EAA6E;EAO3GC,0BAA0B,EAAE,2DAA2D;EAMvFC,wBAAwB,EAAE,mCAAmC;EAM7DC,gBAAgB,EAAE,kBAAkB;EAOpCC,aAAa,EAAE,qFAAqF;EAMpGC,kBAAkB,EAAE,oBAAoB;EAExCC,qBAAqB,EAAE,yBAAyB;EAEhDC,QAAQ,EAAE;IAORC,uBAAuB,EAAE,qGAAqG;IAE9HC,8BAA8B,EAAE,oGAAoG;IAOpIC,kBAAkB,EAAE,uBAAuB;IAM3CC,uBAAuB,EAAE,mBAAmB;IAM5CC,qCAAqC,EAAE,mCAAmC;IAO1EC,gBAAgB,EAAE,kIAAkI;IAIpJC,oBAAoB,EAAE,iJAAiJ;IAQvKC,uBAAuB,EAAE,gHAAgH;IAQzIC,qBAAqB,EAAE,gIAAgI;IAMvJC,+BAA+B,EAAE,4CAA4C;IAK7EC,sBAAsB,EAAE;GACzB;EAEDC,MAAM,EAAE;IAKNC,mBAAmB,EAAE,sBAAsB;IAM3CC,iCAAiC,EAAE,sNAAsN;IAWzPC,+BAA+B,EAAE,yJAAyJ;IAM1LC,qCAAqC,EAAE,0CAA0C;IAMjFC,sBAAsB,EAAE,gCAAgC;IAQxDC,qBAAqB,EAAE,+GAA+G;IAEtIC,4BAA4B,EAAE,8GAA8G;IAM5IC,cAAc,EAAE,qBAAqB;IAQrCC,mBAAmB,EAAE,qBAAqB;IAO1CC,mBAAmB,EAAE,qBAAqB;IAO1CC,0BAA0B,EAAE,iDAAiD;IAM7EC,gBAAgB,EAAE,WAAW;IAM7BC,yCAAyC,EAAE,qBAAqB;IAMhEC,gCAAgC,EAAE,2DAA2D;IAM7FC,wCAAwC,EAAE,sBAAsB;IAMhEC,gCAAgC,EAAE,6CAA6C;IAM/EC,kBAAkB,EAAE,gBAAgB;IAMpCC,8BAA8B,EAAE,+BAA+B;IAM/DC,6BAA6B,EAAE;;CAElC"},"metadata":{},"sourceType":"script","externalDependencies":[]}