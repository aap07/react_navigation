{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.metroWatchTypeScriptFiles = metroWatchTypeScriptFiles;\nvar _path = _interopRequireDefault(require(\"path\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = require(\"debug\")(\"expo:start:server:metro:metroWatchTypeScriptFiles\");\nfunction metroWatchTypeScriptFiles(_ref) {\n  var metro = _ref.metro,\n    server = _ref.server,\n    projectRoot = _ref.projectRoot,\n    callback = _ref.callback,\n    _ref$tsconfig = _ref.tsconfig,\n    tsconfig = _ref$tsconfig === void 0 ? false : _ref$tsconfig,\n    _ref$throttle = _ref.throttle,\n    throttle = _ref$throttle === void 0 ? false : _ref$throttle,\n    _ref$eventTypes = _ref.eventTypes,\n    eventTypes = _ref$eventTypes === void 0 ? [\"add\", \"change\", \"delete\"] : _ref$eventTypes;\n  var watcher = metro.getBundler().getBundler().getWatcher();\n  var tsconfigPath = _path.default.join(projectRoot, \"tsconfig.json\");\n  var listener = function listener(_ref2) {\n    var eventsQueue = _ref2.eventsQueue;\n    for (var event of eventsQueue) {\n      var ref;\n      if (eventTypes.includes(event.type) && ((ref = event.metadata) == null ? void 0 : ref.type) !== \"d\" && !/node_modules/.test(event.filePath) && !/\\.d\\.ts$/.test(event.filePath)) {\n        var filePath = event.filePath;\n        if (/\\.tsx?$/.test(filePath) || tsconfig && filePath === tsconfigPath) {\n          debug(\"Detected TypeScript file changed in the project: \", filePath);\n          callback(event);\n          if (throttle) {\n            return;\n          }\n        }\n      }\n    }\n  };\n  debug(\"Waiting for TypeScript files to be added to the project...\");\n  watcher.addListener(\"change\", listener);\n  watcher.addListener(\"add\", listener);\n  var off = function off() {\n    watcher.removeListener(\"change\", listener);\n    watcher.removeListener(\"add\", listener);\n  };\n  server.addListener == null ? void 0 : server.addListener(\"close\", off);\n  return off;\n}","map":{"version":3,"names":["metroWatchTypeScriptFiles","_path","_interopRequireDefault","require","debug","_ref","metro","server","projectRoot","callback","_ref$tsconfig","tsconfig","_ref$throttle","throttle","_ref$eventTypes","eventTypes","watcher","getBundler","getWatcher","tsconfigPath","default","join","listener","_ref2","eventsQueue","event","ref","includes","type","metadata","test","filePath","addListener","off","removeListener"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\metro\\metroWatchTypeScriptFiles.ts"],"sourcesContent":["import path from 'path';\n\nimport type { ServerLike } from '../BundlerDevServer';\n\nconst debug = require('debug')(\n  'expo:start:server:metro:metroWatchTypeScriptFiles'\n) as typeof console.log;\n\nexport interface MetroWatchTypeScriptFilesOptions {\n  projectRoot: string;\n  metro: import('metro').Server;\n  server: ServerLike;\n  /* Include tsconfig.json in the watcher */\n  tsconfig?: boolean;\n  callback: (event: WatchEvent) => void;\n  /* Array of eventTypes to watch. Defaults to all events */\n  eventTypes?: string[];\n  /* Throlle the callback. When true and  a group of events are recieved, callback it will only be called with the\n   * first event */\n  throttle?: boolean;\n}\n\ninterface WatchEvent {\n  filePath: string;\n  metadata?: {\n    type: 'f' | 'd' | 'l'; // Regular file / Directory / Symlink\n  } | null;\n  type: string;\n}\n\n/**\n * Use the native file watcher / Metro ruleset to detect if a\n * TypeScript file is added to the project during development.\n */\nexport function metroWatchTypeScriptFiles({\n  metro,\n  server,\n  projectRoot,\n  callback,\n  tsconfig = false,\n  throttle = false,\n  eventTypes = ['add', 'change', 'delete'],\n}: MetroWatchTypeScriptFilesOptions): () => void {\n  const watcher = metro.getBundler().getBundler().getWatcher();\n\n  const tsconfigPath = path.join(projectRoot, 'tsconfig.json');\n\n  const listener = ({ eventsQueue }: { eventsQueue: WatchEvent[] }) => {\n    for (const event of eventsQueue) {\n      if (\n        eventTypes.includes(event.type) &&\n        event.metadata?.type !== 'd' &&\n        // We need to ignore node_modules because Metro will add all of the files in node_modules to the watcher.\n        !/node_modules/.test(event.filePath) &&\n        // Ignore declaration files\n        !/\\.d\\.ts$/.test(event.filePath)\n      ) {\n        const { filePath } = event;\n        // Is TypeScript?\n        if (\n          // If the user adds a TypeScript file to the observable files in their project.\n          /\\.tsx?$/.test(filePath) ||\n          // Or if the user adds a tsconfig.json file to the project root.\n          (tsconfig && filePath === tsconfigPath)\n        ) {\n          debug('Detected TypeScript file changed in the project: ', filePath);\n          callback(event);\n\n          if (throttle) {\n            return;\n          }\n        }\n      }\n    }\n  };\n\n  debug('Waiting for TypeScript files to be added to the project...');\n  watcher.addListener('change', listener);\n  watcher.addListener('add', listener);\n\n  const off = () => {\n    watcher.removeListener('change', listener);\n    watcher.removeListener('add', listener);\n  };\n\n  server.addListener?.('close', off);\n  return off;\n}\n"],"mappings":"AAAA;;;;;QAkCgBA,yBAAyB,GAAzBA,yBAAyB;AAlCxB,IAAAC,KAAM,GAAAC,sBAAA,CAAAC,OAAA,CAAN,MAAM;;;;;;AAIvB,IAAMC,KAAK,GAAGD,OAAO,CAAC,OAAO,CAAC,CAC5B,mDAAmD,CACpD;AA4BM,SAASH,yBAAyBA,CAAAK,IAAA,EAQQ;EAAA,IAP/CC,KAAK,GAAAD,IAAA,CAALC,KAAK;IACLC,MAAM,GAAAF,IAAA,CAANE,MAAM;IACNC,WAAW,GAAAH,IAAA,CAAXG,WAAW;IACXC,QAAQ,GAAAJ,IAAA,CAARI,QAAQ;IAAAC,aAAA,GAAAL,IAAA,CACRM,QAAQ;IAARA,QAAQ,GAAAD,aAAA,cAAG,KAAK,GAAAA,aAAA;IAAAE,aAAA,GAAAP,IAAA,CAChBQ,QAAQ;IAARA,QAAQ,GAAAD,aAAA,cAAG,KAAK,GAAAA,aAAA;IAAAE,eAAA,GAAAT,IAAA,CAChBU,UAAU;IAAVA,UAAU,GAAAD,eAAA,cAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,GAAAA,eAAA;EAExC,IAAME,OAAO,GAAGV,KAAK,CAACW,UAAU,EAAE,CAACA,UAAU,EAAE,CAACC,UAAU,EAAE;EAE5D,IAAMC,YAAY,GAAGlB,KAAI,CAAAmB,OAAA,CAACC,IAAI,CAACb,WAAW,EAAE,eAAe,CAAC;EAE5D,IAAMc,QAAQ,GAAG,SAAXA,QAAQA,CAAAC,KAAA,EAAuD;IAAA,IAAjDC,WAAW,GAAAD,KAAA,CAAXC,WAAW;IAC7B,KAAK,IAAMC,KAAK,IAAID,WAAW,EAAE;UAG7BE,GAAc;MAFhB,IACEX,UAAU,CAACY,QAAQ,CAACF,KAAK,CAACG,IAAI,CAAC,IAC/B,EAAAF,GAAc,GAAdD,KAAK,CAACI,QAAQ,SAAM,GAApB,MAAoB,GAApBH,GAAc,CAAEE,IAAI,MAAK,GAAG,IAE5B,CAAC,eAAeE,IAAI,CAACL,KAAK,CAACM,QAAQ,CAAC,IAEpC,CAAC,WAAWD,IAAI,CAACL,KAAK,CAACM,QAAQ,CAAC,EAChC;QACA,IAAQA,QAAQ,GAAKN,KAAK,CAAlBM,QAAQ;QAEhB,IAEE,UAAUD,IAAI,CAACC,QAAQ,CAAC,IAEvBpB,QAAQ,IAAIoB,QAAQ,KAAKZ,YAAa,EACvC;UACAf,KAAK,CAAC,mDAAmD,EAAE2B,QAAQ,CAAC;UACpEtB,QAAQ,CAACgB,KAAK,CAAC;UAEf,IAAIZ,QAAQ,EAAE;YACZ;;;;;GAKT;EAEDT,KAAK,CAAC,4DAA4D,CAAC;EACnEY,OAAO,CAACgB,WAAW,CAAC,QAAQ,EAAEV,QAAQ,CAAC;EACvCN,OAAO,CAACgB,WAAW,CAAC,KAAK,EAAEV,QAAQ,CAAC;EAEpC,IAAMW,GAAG,GAAG,SAANA,GAAGA,CAAA,EAAS;IAChBjB,OAAO,CAACkB,cAAc,CAAC,QAAQ,EAAEZ,QAAQ,CAAC;IAC1CN,OAAO,CAACkB,cAAc,CAAC,KAAK,EAAEZ,QAAQ,CAAC;GACxC;EAEDf,MAAM,CAACyB,WAAW,QAAgB,GAAlC,MAAkC,GAAlCzB,MAAM,CAACyB,WAAW,CAAG,OAAO,EAAEC,GAAG,CAAC;EAClC,OAAOA,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}