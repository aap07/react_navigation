{"ast":null,"code":"import { Formatter } from \"./Formatter\";","map":{"version":3,"names":["Formatter"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/xcpretty/build/ExpoRunFormatter.d.ts"],"sourcesContent":["import { CopyFileProps, FileOperation, Formatter } from './Formatter';\nimport { MetroParser } from './MetroParser';\nexport declare type ExpoRunFormatterProps = {\n    projectRoot: string;\n    podfile?: Record<string, Record<string, string>>;\n    appName?: string;\n    isDebug?: boolean;\n};\n/**\n * A superset of `Formatter` which adds support for Metro build errors and cleaner formatting for Node projects.\n */\nexport declare class ExpoRunFormatter extends Formatter {\n    props: ExpoRunFormatterProps;\n    static create(projectRoot: string, { xcodeProject, isDebug, }?: {\n        xcodeProject?: {\n            name: string;\n        };\n    } & Pick<ExpoRunFormatterProps, 'isDebug'>): ExpoRunFormatter;\n    private podfileTracer;\n    _parser: MetroParser | undefined;\n    get parser(): MetroParser;\n    constructor(props: ExpoRunFormatterProps);\n    formatMetroAssetCollectionError(errorContents: string): string;\n    shouldShowCompileWarning(filePath: string, lineNumber?: string, columnNumber?: string): boolean;\n    getNodeModuleName(filePath: string, target?: string): string | null;\n    formatFileOperation(props: FileOperation): string;\n    formatCopy({ from, to, target }: CopyFileProps): string;\n    formatPhaseScriptExecution(scriptName: string, target?: string, project?: string): string;\n}\n"],"mappings":"AAAA,SAAuCA,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}