{"ast":null,"code":"var _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nvar EventEmitter = require('events').EventEmitter;\nvar childProcess = require('child_process');\nvar path = require('path');\nvar fs = require('fs');\nvar process = require('process');\nvar _require = require(\"./argument.js\"),\n  Argument = _require.Argument,\n  humanReadableArgName = _require.humanReadableArgName;\nvar _require2 = require(\"./error.js\"),\n  CommanderError = _require2.CommanderError;\nvar _require3 = require(\"./help.js\"),\n  Help = _require3.Help;\nvar _require4 = require(\"./option.js\"),\n  Option = _require4.Option,\n  splitOptionFlags = _require4.splitOptionFlags,\n  DualOptions = _require4.DualOptions;\nvar _require5 = require(\"./suggestSimilar\"),\n  suggestSimilar = _require5.suggestSimilar;\nvar Command = function (_EventEmitter) {\n  \"use strict\";\n\n  _inherits(Command, _EventEmitter);\n  var _super = _createSuper(Command);\n  function Command(name) {\n    var _this;\n    _classCallCheck(this, Command);\n    _this = _super.call(this);\n    _this.commands = [];\n    _this.options = [];\n    _this.parent = null;\n    _this._allowUnknownOption = false;\n    _this._allowExcessArguments = true;\n    _this._args = [];\n    _this.args = [];\n    _this.rawArgs = [];\n    _this.processedArgs = [];\n    _this._scriptPath = null;\n    _this._name = name || '';\n    _this._optionValues = {};\n    _this._optionValueSources = {};\n    _this._storeOptionsAsProperties = false;\n    _this._actionHandler = null;\n    _this._executableHandler = false;\n    _this._executableFile = null;\n    _this._executableDir = null;\n    _this._defaultCommandName = null;\n    _this._exitCallback = null;\n    _this._aliases = [];\n    _this._combineFlagAndOptionalValue = true;\n    _this._description = '';\n    _this._summary = '';\n    _this._argsDescription = undefined;\n    _this._enablePositionalOptions = false;\n    _this._passThroughOptions = false;\n    _this._lifeCycleHooks = {};\n    _this._showHelpAfterError = false;\n    _this._showSuggestionAfterError = true;\n    _this._outputConfiguration = {\n      writeOut: function writeOut(str) {\n        return process.stdout.write(str);\n      },\n      writeErr: function writeErr(str) {\n        return process.stderr.write(str);\n      },\n      getOutHelpWidth: function getOutHelpWidth() {\n        return process.stdout.isTTY ? process.stdout.columns : undefined;\n      },\n      getErrHelpWidth: function getErrHelpWidth() {\n        return process.stderr.isTTY ? process.stderr.columns : undefined;\n      },\n      outputError: function outputError(str, write) {\n        return write(str);\n      }\n    };\n    _this._hidden = false;\n    _this._hasHelpOption = true;\n    _this._helpFlags = '-h, --help';\n    _this._helpDescription = 'display help for command';\n    _this._helpShortFlag = '-h';\n    _this._helpLongFlag = '--help';\n    _this._addImplicitHelpCommand = undefined;\n    _this._helpCommandName = 'help';\n    _this._helpCommandnameAndArgs = 'help [command]';\n    _this._helpCommandDescription = 'display help for command';\n    _this._helpConfiguration = {};\n    return _this;\n  }\n  _createClass(Command, [{\n    key: \"copyInheritedSettings\",\n    value: function copyInheritedSettings(sourceCommand) {\n      this._outputConfiguration = sourceCommand._outputConfiguration;\n      this._hasHelpOption = sourceCommand._hasHelpOption;\n      this._helpFlags = sourceCommand._helpFlags;\n      this._helpDescription = sourceCommand._helpDescription;\n      this._helpShortFlag = sourceCommand._helpShortFlag;\n      this._helpLongFlag = sourceCommand._helpLongFlag;\n      this._helpCommandName = sourceCommand._helpCommandName;\n      this._helpCommandnameAndArgs = sourceCommand._helpCommandnameAndArgs;\n      this._helpCommandDescription = sourceCommand._helpCommandDescription;\n      this._helpConfiguration = sourceCommand._helpConfiguration;\n      this._exitCallback = sourceCommand._exitCallback;\n      this._storeOptionsAsProperties = sourceCommand._storeOptionsAsProperties;\n      this._combineFlagAndOptionalValue = sourceCommand._combineFlagAndOptionalValue;\n      this._allowExcessArguments = sourceCommand._allowExcessArguments;\n      this._enablePositionalOptions = sourceCommand._enablePositionalOptions;\n      this._showHelpAfterError = sourceCommand._showHelpAfterError;\n      this._showSuggestionAfterError = sourceCommand._showSuggestionAfterError;\n      return this;\n    }\n  }, {\n    key: \"command\",\n    value: function command(nameAndArgs, actionOptsOrExecDesc, execOpts) {\n      var desc = actionOptsOrExecDesc;\n      var opts = execOpts;\n      if (typeof desc === 'object' && desc !== null) {\n        opts = desc;\n        desc = null;\n      }\n      opts = opts || {};\n      var _nameAndArgs$match = nameAndArgs.match(/([^ ]+) *(.*)/),\n        _nameAndArgs$match2 = _slicedToArray(_nameAndArgs$match, 3),\n        name = _nameAndArgs$match2[1],\n        args = _nameAndArgs$match2[2];\n      var cmd = this.createCommand(name);\n      if (desc) {\n        cmd.description(desc);\n        cmd._executableHandler = true;\n      }\n      if (opts.isDefault) this._defaultCommandName = cmd._name;\n      cmd._hidden = !!(opts.noHelp || opts.hidden);\n      cmd._executableFile = opts.executableFile || null;\n      if (args) cmd.arguments(args);\n      this.commands.push(cmd);\n      cmd.parent = this;\n      cmd.copyInheritedSettings(this);\n      if (desc) return this;\n      return cmd;\n    }\n  }, {\n    key: \"createCommand\",\n    value: function createCommand(name) {\n      return new Command(name);\n    }\n  }, {\n    key: \"createHelp\",\n    value: function createHelp() {\n      return Object.assign(new Help(), this.configureHelp());\n    }\n  }, {\n    key: \"configureHelp\",\n    value: function configureHelp(configuration) {\n      if (configuration === undefined) return this._helpConfiguration;\n      this._helpConfiguration = configuration;\n      return this;\n    }\n  }, {\n    key: \"configureOutput\",\n    value: function configureOutput(configuration) {\n      if (configuration === undefined) return this._outputConfiguration;\n      Object.assign(this._outputConfiguration, configuration);\n      return this;\n    }\n  }, {\n    key: \"showHelpAfterError\",\n    value: function showHelpAfterError() {\n      var displayHelp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (typeof displayHelp !== 'string') displayHelp = !!displayHelp;\n      this._showHelpAfterError = displayHelp;\n      return this;\n    }\n  }, {\n    key: \"showSuggestionAfterError\",\n    value: function showSuggestionAfterError() {\n      var displaySuggestion = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._showSuggestionAfterError = !!displaySuggestion;\n      return this;\n    }\n  }, {\n    key: \"addCommand\",\n    value: function addCommand(cmd, opts) {\n      if (!cmd._name) {\n        throw new Error(`Command passed to .addCommand() must have a name\n- specify the name in Command constructor or using .name()`);\n      }\n      opts = opts || {};\n      if (opts.isDefault) this._defaultCommandName = cmd._name;\n      if (opts.noHelp || opts.hidden) cmd._hidden = true;\n      this.commands.push(cmd);\n      cmd.parent = this;\n      return this;\n    }\n  }, {\n    key: \"createArgument\",\n    value: function createArgument(name, description) {\n      return new Argument(name, description);\n    }\n  }, {\n    key: \"argument\",\n    value: function argument(name, description, fn, defaultValue) {\n      var argument = this.createArgument(name, description);\n      if (typeof fn === 'function') {\n        argument.default(defaultValue).argParser(fn);\n      } else {\n        argument.default(fn);\n      }\n      this.addArgument(argument);\n      return this;\n    }\n  }, {\n    key: \"arguments\",\n    value: function _arguments(names) {\n      var _this2 = this;\n      names.split(/ +/).forEach(function (detail) {\n        _this2.argument(detail);\n      });\n      return this;\n    }\n  }, {\n    key: \"addArgument\",\n    value: function addArgument(argument) {\n      var previousArgument = this._args.slice(-1)[0];\n      if (previousArgument && previousArgument.variadic) {\n        throw new Error(`only the last argument can be variadic '${previousArgument.name()}'`);\n      }\n      if (argument.required && argument.defaultValue !== undefined && argument.parseArg === undefined) {\n        throw new Error(`a default value for a required argument is never used: '${argument.name()}'`);\n      }\n      this._args.push(argument);\n      return this;\n    }\n  }, {\n    key: \"addHelpCommand\",\n    value: function addHelpCommand(enableOrNameAndArgs, description) {\n      if (enableOrNameAndArgs === false) {\n        this._addImplicitHelpCommand = false;\n      } else {\n        this._addImplicitHelpCommand = true;\n        if (typeof enableOrNameAndArgs === 'string') {\n          this._helpCommandName = enableOrNameAndArgs.split(' ')[0];\n          this._helpCommandnameAndArgs = enableOrNameAndArgs;\n        }\n        this._helpCommandDescription = description || this._helpCommandDescription;\n      }\n      return this;\n    }\n  }, {\n    key: \"_hasImplicitHelpCommand\",\n    value: function _hasImplicitHelpCommand() {\n      if (this._addImplicitHelpCommand === undefined) {\n        return this.commands.length && !this._actionHandler && !this._findCommand('help');\n      }\n      return this._addImplicitHelpCommand;\n    }\n  }, {\n    key: \"hook\",\n    value: function hook(event, listener) {\n      var allowedValues = ['preSubcommand', 'preAction', 'postAction'];\n      if (!allowedValues.includes(event)) {\n        throw new Error(`Unexpected value for event passed to hook : '${event}'.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n      }\n      if (this._lifeCycleHooks[event]) {\n        this._lifeCycleHooks[event].push(listener);\n      } else {\n        this._lifeCycleHooks[event] = [listener];\n      }\n      return this;\n    }\n  }, {\n    key: \"exitOverride\",\n    value: function exitOverride(fn) {\n      if (fn) {\n        this._exitCallback = fn;\n      } else {\n        this._exitCallback = function (err) {\n          if (err.code !== 'commander.executeSubCommandAsync') {\n            throw err;\n          } else {}\n        };\n      }\n      return this;\n    }\n  }, {\n    key: \"_exit\",\n    value: function _exit(exitCode, code, message) {\n      if (this._exitCallback) {\n        this._exitCallback(new CommanderError(exitCode, code, message));\n      }\n      process.exit(exitCode);\n    }\n  }, {\n    key: \"action\",\n    value: function action(fn) {\n      var _this3 = this;\n      var listener = function listener(args) {\n        var expectedArgsCount = _this3._args.length;\n        var actionArgs = args.slice(0, expectedArgsCount);\n        if (_this3._storeOptionsAsProperties) {\n          actionArgs[expectedArgsCount] = _this3;\n        } else {\n          actionArgs[expectedArgsCount] = _this3.opts();\n        }\n        actionArgs.push(_this3);\n        return fn.apply(_this3, actionArgs);\n      };\n      this._actionHandler = listener;\n      return this;\n    }\n  }, {\n    key: \"createOption\",\n    value: function createOption(flags, description) {\n      return new Option(flags, description);\n    }\n  }, {\n    key: \"addOption\",\n    value: function addOption(option) {\n      var _this4 = this;\n      var oname = option.name();\n      var name = option.attributeName();\n      if (option.negate) {\n        var positiveLongFlag = option.long.replace(/^--no-/, '--');\n        if (!this._findOption(positiveLongFlag)) {\n          this.setOptionValueWithSource(name, option.defaultValue === undefined ? true : option.defaultValue, 'default');\n        }\n      } else if (option.defaultValue !== undefined) {\n        this.setOptionValueWithSource(name, option.defaultValue, 'default');\n      }\n      this.options.push(option);\n      var handleOptionValue = function handleOptionValue(val, invalidValueMessage, valueSource) {\n        if (val == null && option.presetArg !== undefined) {\n          val = option.presetArg;\n        }\n        var oldValue = _this4.getOptionValue(name);\n        if (val !== null && option.parseArg) {\n          try {\n            val = option.parseArg(val, oldValue);\n          } catch (err) {\n            if (err.code === 'commander.invalidArgument') {\n              var message = `${invalidValueMessage} ${err.message}`;\n              _this4.error(message, {\n                exitCode: err.exitCode,\n                code: err.code\n              });\n            }\n            throw err;\n          }\n        } else if (val !== null && option.variadic) {\n          val = option._concatValue(val, oldValue);\n        }\n        if (val == null) {\n          if (option.negate) {\n            val = false;\n          } else if (option.isBoolean() || option.optional) {\n            val = true;\n          } else {\n            val = '';\n          }\n        }\n        _this4.setOptionValueWithSource(name, val, valueSource);\n      };\n      this.on('option:' + oname, function (val) {\n        var invalidValueMessage = `error: option '${option.flags}' argument '${val}' is invalid.`;\n        handleOptionValue(val, invalidValueMessage, 'cli');\n      });\n      if (option.envVar) {\n        this.on('optionEnv:' + oname, function (val) {\n          var invalidValueMessage = `error: option '${option.flags}' value '${val}' from env '${option.envVar}' is invalid.`;\n          handleOptionValue(val, invalidValueMessage, 'env');\n        });\n      }\n      return this;\n    }\n  }, {\n    key: \"_optionEx\",\n    value: function _optionEx(config, flags, description, fn, defaultValue) {\n      if (typeof flags === 'object' && flags instanceof Option) {\n        throw new Error('To add an Option object use addOption() instead of option() or requiredOption()');\n      }\n      var option = this.createOption(flags, description);\n      option.makeOptionMandatory(!!config.mandatory);\n      if (typeof fn === 'function') {\n        option.default(defaultValue).argParser(fn);\n      } else if (fn instanceof RegExp) {\n        var regex = fn;\n        fn = function fn(val, def) {\n          var m = regex.exec(val);\n          return m ? m[0] : def;\n        };\n        option.default(defaultValue).argParser(fn);\n      } else {\n        option.default(fn);\n      }\n      return this.addOption(option);\n    }\n  }, {\n    key: \"option\",\n    value: function option(flags, description, fn, defaultValue) {\n      return this._optionEx({}, flags, description, fn, defaultValue);\n    }\n  }, {\n    key: \"requiredOption\",\n    value: function requiredOption(flags, description, fn, defaultValue) {\n      return this._optionEx({\n        mandatory: true\n      }, flags, description, fn, defaultValue);\n    }\n  }, {\n    key: \"combineFlagAndOptionalValue\",\n    value: function combineFlagAndOptionalValue() {\n      var combine = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._combineFlagAndOptionalValue = !!combine;\n      return this;\n    }\n  }, {\n    key: \"allowUnknownOption\",\n    value: function allowUnknownOption() {\n      var allowUnknown = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._allowUnknownOption = !!allowUnknown;\n      return this;\n    }\n  }, {\n    key: \"allowExcessArguments\",\n    value: function allowExcessArguments() {\n      var allowExcess = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._allowExcessArguments = !!allowExcess;\n      return this;\n    }\n  }, {\n    key: \"enablePositionalOptions\",\n    value: function enablePositionalOptions() {\n      var positional = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._enablePositionalOptions = !!positional;\n      return this;\n    }\n  }, {\n    key: \"passThroughOptions\",\n    value: function passThroughOptions() {\n      var passThrough = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._passThroughOptions = !!passThrough;\n      if (!!this.parent && passThrough && !this.parent._enablePositionalOptions) {\n        throw new Error('passThroughOptions can not be used without turning on enablePositionalOptions for parent command(s)');\n      }\n      return this;\n    }\n  }, {\n    key: \"storeOptionsAsProperties\",\n    value: function storeOptionsAsProperties() {\n      var storeAsProperties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this._storeOptionsAsProperties = !!storeAsProperties;\n      if (this.options.length) {\n        throw new Error('call .storeOptionsAsProperties() before adding options');\n      }\n      return this;\n    }\n  }, {\n    key: \"getOptionValue\",\n    value: function getOptionValue(key) {\n      if (this._storeOptionsAsProperties) {\n        return this[key];\n      }\n      return this._optionValues[key];\n    }\n  }, {\n    key: \"setOptionValue\",\n    value: function setOptionValue(key, value) {\n      return this.setOptionValueWithSource(key, value, undefined);\n    }\n  }, {\n    key: \"setOptionValueWithSource\",\n    value: function setOptionValueWithSource(key, value, source) {\n      if (this._storeOptionsAsProperties) {\n        this[key] = value;\n      } else {\n        this._optionValues[key] = value;\n      }\n      this._optionValueSources[key] = source;\n      return this;\n    }\n  }, {\n    key: \"getOptionValueSource\",\n    value: function getOptionValueSource(key) {\n      return this._optionValueSources[key];\n    }\n  }, {\n    key: \"getOptionValueSourceWithGlobals\",\n    value: function getOptionValueSourceWithGlobals(key) {\n      var source;\n      getCommandAndParents(this).forEach(function (cmd) {\n        if (cmd.getOptionValueSource(key) !== undefined) {\n          source = cmd.getOptionValueSource(key);\n        }\n      });\n      return source;\n    }\n  }, {\n    key: \"_prepareUserArgs\",\n    value: function _prepareUserArgs(argv, parseOptions) {\n      if (argv !== undefined && !Array.isArray(argv)) {\n        throw new Error('first parameter to parse must be array or undefined');\n      }\n      parseOptions = parseOptions || {};\n      if (argv === undefined) {\n        argv = process.argv;\n        if (process.versions && process.versions.electron) {\n          parseOptions.from = 'electron';\n        }\n      }\n      this.rawArgs = argv.slice();\n      var userArgs;\n      switch (parseOptions.from) {\n        case undefined:\n        case 'node':\n          this._scriptPath = argv[1];\n          userArgs = argv.slice(2);\n          break;\n        case 'electron':\n          if (process.defaultApp) {\n            this._scriptPath = argv[1];\n            userArgs = argv.slice(2);\n          } else {\n            userArgs = argv.slice(1);\n          }\n          break;\n        case 'user':\n          userArgs = argv.slice(0);\n          break;\n        default:\n          throw new Error(`unexpected parse option { from: '${parseOptions.from}' }`);\n      }\n      if (!this._name && this._scriptPath) this.nameFromFilename(this._scriptPath);\n      this._name = this._name || 'program';\n      return userArgs;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(argv, parseOptions) {\n      var userArgs = this._prepareUserArgs(argv, parseOptions);\n      this._parseCommand([], userArgs);\n      return this;\n    }\n  }, {\n    key: \"parseAsync\",\n    value: function () {\n      var _parseAsync = _asyncToGenerator(function* (argv, parseOptions) {\n        var userArgs = this._prepareUserArgs(argv, parseOptions);\n        yield this._parseCommand([], userArgs);\n        return this;\n      });\n      function parseAsync(_x, _x2) {\n        return _parseAsync.apply(this, arguments);\n      }\n      return parseAsync;\n    }()\n  }, {\n    key: \"_executeSubCommand\",\n    value: function _executeSubCommand(subcommand, args) {\n      args = args.slice();\n      var launchWithNode = false;\n      var sourceExt = ['.js', '.ts', '.tsx', '.mjs', '.cjs'];\n      function findFile(baseDir, baseName) {\n        var localBin = path.resolve(baseDir, baseName);\n        if (fs.existsSync(localBin)) return localBin;\n        if (sourceExt.includes(path.extname(baseName))) return undefined;\n        var foundExt = sourceExt.find(function (ext) {\n          return fs.existsSync(`${localBin}${ext}`);\n        });\n        if (foundExt) return `${localBin}${foundExt}`;\n        return undefined;\n      }\n      this._checkForMissingMandatoryOptions();\n      this._checkForConflictingOptions();\n      var executableFile = subcommand._executableFile || `${this._name}-${subcommand._name}`;\n      var executableDir = this._executableDir || '';\n      if (this._scriptPath) {\n        var resolvedScriptPath;\n        try {\n          resolvedScriptPath = fs.realpathSync(this._scriptPath);\n        } catch (err) {\n          resolvedScriptPath = this._scriptPath;\n        }\n        executableDir = path.resolve(path.dirname(resolvedScriptPath), executableDir);\n      }\n      if (executableDir) {\n        var localFile = findFile(executableDir, executableFile);\n        if (!localFile && !subcommand._executableFile && this._scriptPath) {\n          var legacyName = path.basename(this._scriptPath, path.extname(this._scriptPath));\n          if (legacyName !== this._name) {\n            localFile = findFile(executableDir, `${legacyName}-${subcommand._name}`);\n          }\n        }\n        executableFile = localFile || executableFile;\n      }\n      launchWithNode = sourceExt.includes(path.extname(executableFile));\n      var proc;\n      if (process.platform !== 'win32') {\n        if (launchWithNode) {\n          args.unshift(executableFile);\n          args = incrementNodeInspectorPort(process.execArgv).concat(args);\n          proc = childProcess.spawn(process.argv[0], args, {\n            stdio: 'inherit'\n          });\n        } else {\n          proc = childProcess.spawn(executableFile, args, {\n            stdio: 'inherit'\n          });\n        }\n      } else {\n        args.unshift(executableFile);\n        args = incrementNodeInspectorPort(process.execArgv).concat(args);\n        proc = childProcess.spawn(process.execPath, args, {\n          stdio: 'inherit'\n        });\n      }\n      if (!proc.killed) {\n        var signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];\n        signals.forEach(function (signal) {\n          process.on(signal, function () {\n            if (proc.killed === false && proc.exitCode === null) {\n              proc.kill(signal);\n            }\n          });\n        });\n      }\n      var exitCallback = this._exitCallback;\n      if (!exitCallback) {\n        proc.on('close', process.exit.bind(process));\n      } else {\n        proc.on('close', function () {\n          exitCallback(new CommanderError(process.exitCode || 0, 'commander.executeSubCommandAsync', '(close)'));\n        });\n      }\n      proc.on('error', function (err) {\n        if (err.code === 'ENOENT') {\n          var executableDirMessage = executableDir ? `searched for local subcommand relative to directory '${executableDir}'` : 'no directory for search for local subcommand, use .executableDir() to supply a custom directory';\n          var executableMissing = `'${executableFile}' does not exist\n - if '${subcommand._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead\n - if the default executable name is not suitable, use the executableFile option to supply a custom name or path\n - ${executableDirMessage}`;\n          throw new Error(executableMissing);\n        } else if (err.code === 'EACCES') {\n          throw new Error(`'${executableFile}' not executable`);\n        }\n        if (!exitCallback) {\n          process.exit(1);\n        } else {\n          var wrappedError = new CommanderError(1, 'commander.executeSubCommandAsync', '(error)');\n          wrappedError.nestedError = err;\n          exitCallback(wrappedError);\n        }\n      });\n      this.runningCommand = proc;\n    }\n  }, {\n    key: \"_dispatchSubcommand\",\n    value: function _dispatchSubcommand(commandName, operands, unknown) {\n      var _this5 = this;\n      var subCommand = this._findCommand(commandName);\n      if (!subCommand) this.help({\n        error: true\n      });\n      var hookResult;\n      hookResult = this._chainOrCallSubCommandHook(hookResult, subCommand, 'preSubcommand');\n      hookResult = this._chainOrCall(hookResult, function () {\n        if (subCommand._executableHandler) {\n          _this5._executeSubCommand(subCommand, operands.concat(unknown));\n        } else {\n          return subCommand._parseCommand(operands, unknown);\n        }\n      });\n      return hookResult;\n    }\n  }, {\n    key: \"_checkNumberOfArguments\",\n    value: function _checkNumberOfArguments() {\n      var _this6 = this;\n      this._args.forEach(function (arg, i) {\n        if (arg.required && _this6.args[i] == null) {\n          _this6.missingArgument(arg.name());\n        }\n      });\n      if (this._args.length > 0 && this._args[this._args.length - 1].variadic) {\n        return;\n      }\n      if (this.args.length > this._args.length) {\n        this._excessArguments(this.args);\n      }\n    }\n  }, {\n    key: \"_processArguments\",\n    value: function _processArguments() {\n      var _this7 = this;\n      var myParseArg = function myParseArg(argument, value, previous) {\n        var parsedValue = value;\n        if (value !== null && argument.parseArg) {\n          try {\n            parsedValue = argument.parseArg(value, previous);\n          } catch (err) {\n            if (err.code === 'commander.invalidArgument') {\n              var message = `error: command-argument value '${value}' is invalid for argument '${argument.name()}'. ${err.message}`;\n              _this7.error(message, {\n                exitCode: err.exitCode,\n                code: err.code\n              });\n            }\n            throw err;\n          }\n        }\n        return parsedValue;\n      };\n      this._checkNumberOfArguments();\n      var processedArgs = [];\n      this._args.forEach(function (declaredArg, index) {\n        var value = declaredArg.defaultValue;\n        if (declaredArg.variadic) {\n          if (index < _this7.args.length) {\n            value = _this7.args.slice(index);\n            if (declaredArg.parseArg) {\n              value = value.reduce(function (processed, v) {\n                return myParseArg(declaredArg, v, processed);\n              }, declaredArg.defaultValue);\n            }\n          } else if (value === undefined) {\n            value = [];\n          }\n        } else if (index < _this7.args.length) {\n          value = _this7.args[index];\n          if (declaredArg.parseArg) {\n            value = myParseArg(declaredArg, value, declaredArg.defaultValue);\n          }\n        }\n        processedArgs[index] = value;\n      });\n      this.processedArgs = processedArgs;\n    }\n  }, {\n    key: \"_chainOrCall\",\n    value: function _chainOrCall(promise, fn) {\n      if (promise && promise.then && typeof promise.then === 'function') {\n        return promise.then(function () {\n          return fn();\n        });\n      }\n      return fn();\n    }\n  }, {\n    key: \"_chainOrCallHooks\",\n    value: function _chainOrCallHooks(promise, event) {\n      var _this8 = this;\n      var result = promise;\n      var hooks = [];\n      getCommandAndParents(this).reverse().filter(function (cmd) {\n        return cmd._lifeCycleHooks[event] !== undefined;\n      }).forEach(function (hookedCommand) {\n        hookedCommand._lifeCycleHooks[event].forEach(function (callback) {\n          hooks.push({\n            hookedCommand: hookedCommand,\n            callback: callback\n          });\n        });\n      });\n      if (event === 'postAction') {\n        hooks.reverse();\n      }\n      hooks.forEach(function (hookDetail) {\n        result = _this8._chainOrCall(result, function () {\n          return hookDetail.callback(hookDetail.hookedCommand, _this8);\n        });\n      });\n      return result;\n    }\n  }, {\n    key: \"_chainOrCallSubCommandHook\",\n    value: function _chainOrCallSubCommandHook(promise, subCommand, event) {\n      var _this9 = this;\n      var result = promise;\n      if (this._lifeCycleHooks[event] !== undefined) {\n        this._lifeCycleHooks[event].forEach(function (hook) {\n          result = _this9._chainOrCall(result, function () {\n            return hook(_this9, subCommand);\n          });\n        });\n      }\n      return result;\n    }\n  }, {\n    key: \"_parseCommand\",\n    value: function _parseCommand(operands, unknown) {\n      var _this10 = this;\n      var parsed = this.parseOptions(unknown);\n      this._parseOptionsEnv();\n      this._parseOptionsImplied();\n      operands = operands.concat(parsed.operands);\n      unknown = parsed.unknown;\n      this.args = operands.concat(unknown);\n      if (operands && this._findCommand(operands[0])) {\n        return this._dispatchSubcommand(operands[0], operands.slice(1), unknown);\n      }\n      if (this._hasImplicitHelpCommand() && operands[0] === this._helpCommandName) {\n        if (operands.length === 1) {\n          this.help();\n        }\n        return this._dispatchSubcommand(operands[1], [], [this._helpLongFlag]);\n      }\n      if (this._defaultCommandName) {\n        outputHelpIfRequested(this, unknown);\n        return this._dispatchSubcommand(this._defaultCommandName, operands, unknown);\n      }\n      if (this.commands.length && this.args.length === 0 && !this._actionHandler && !this._defaultCommandName) {\n        this.help({\n          error: true\n        });\n      }\n      outputHelpIfRequested(this, parsed.unknown);\n      this._checkForMissingMandatoryOptions();\n      this._checkForConflictingOptions();\n      var checkForUnknownOptions = function checkForUnknownOptions() {\n        if (parsed.unknown.length > 0) {\n          _this10.unknownOption(parsed.unknown[0]);\n        }\n      };\n      var commandEvent = `command:${this.name()}`;\n      if (this._actionHandler) {\n        checkForUnknownOptions();\n        this._processArguments();\n        var actionResult;\n        actionResult = this._chainOrCallHooks(actionResult, 'preAction');\n        actionResult = this._chainOrCall(actionResult, function () {\n          return _this10._actionHandler(_this10.processedArgs);\n        });\n        if (this.parent) {\n          actionResult = this._chainOrCall(actionResult, function () {\n            _this10.parent.emit(commandEvent, operands, unknown);\n          });\n        }\n        actionResult = this._chainOrCallHooks(actionResult, 'postAction');\n        return actionResult;\n      }\n      if (this.parent && this.parent.listenerCount(commandEvent)) {\n        checkForUnknownOptions();\n        this._processArguments();\n        this.parent.emit(commandEvent, operands, unknown);\n      } else if (operands.length) {\n        if (this._findCommand('*')) {\n          return this._dispatchSubcommand('*', operands, unknown);\n        }\n        if (this.listenerCount('command:*')) {\n          this.emit('command:*', operands, unknown);\n        } else if (this.commands.length) {\n          this.unknownCommand();\n        } else {\n          checkForUnknownOptions();\n          this._processArguments();\n        }\n      } else if (this.commands.length) {\n        checkForUnknownOptions();\n        this.help({\n          error: true\n        });\n      } else {\n        checkForUnknownOptions();\n        this._processArguments();\n      }\n    }\n  }, {\n    key: \"_findCommand\",\n    value: function _findCommand(name) {\n      if (!name) return undefined;\n      return this.commands.find(function (cmd) {\n        return cmd._name === name || cmd._aliases.includes(name);\n      });\n    }\n  }, {\n    key: \"_findOption\",\n    value: function _findOption(arg) {\n      return this.options.find(function (option) {\n        return option.is(arg);\n      });\n    }\n  }, {\n    key: \"_checkForMissingMandatoryOptions\",\n    value: function _checkForMissingMandatoryOptions() {\n      var _loop = function _loop(cmd) {\n        cmd.options.forEach(function (anOption) {\n          if (anOption.mandatory && cmd.getOptionValue(anOption.attributeName()) === undefined) {\n            cmd.missingMandatoryOptionValue(anOption);\n          }\n        });\n      };\n      for (var cmd = this; cmd; cmd = cmd.parent) {\n        _loop(cmd);\n      }\n    }\n  }, {\n    key: \"_checkForConflictingLocalOptions\",\n    value: function _checkForConflictingLocalOptions() {\n      var _this11 = this;\n      var definedNonDefaultOptions = this.options.filter(function (option) {\n        var optionKey = option.attributeName();\n        if (_this11.getOptionValue(optionKey) === undefined) {\n          return false;\n        }\n        return _this11.getOptionValueSource(optionKey) !== 'default';\n      });\n      var optionsWithConflicting = definedNonDefaultOptions.filter(function (option) {\n        return option.conflictsWith.length > 0;\n      });\n      optionsWithConflicting.forEach(function (option) {\n        var conflictingAndDefined = definedNonDefaultOptions.find(function (defined) {\n          return option.conflictsWith.includes(defined.attributeName());\n        });\n        if (conflictingAndDefined) {\n          _this11._conflictingOption(option, conflictingAndDefined);\n        }\n      });\n    }\n  }, {\n    key: \"_checkForConflictingOptions\",\n    value: function _checkForConflictingOptions() {\n      for (var cmd = this; cmd; cmd = cmd.parent) {\n        cmd._checkForConflictingLocalOptions();\n      }\n    }\n  }, {\n    key: \"parseOptions\",\n    value: function parseOptions(argv) {\n      var operands = [];\n      var unknown = [];\n      var dest = operands;\n      var args = argv.slice();\n      function maybeOption(arg) {\n        return arg.length > 1 && arg[0] === '-';\n      }\n      var activeVariadicOption = null;\n      while (args.length) {\n        var arg = args.shift();\n        if (arg === '--') {\n          var _dest;\n          if (dest === unknown) dest.push(arg);\n          (_dest = dest).push.apply(_dest, _toConsumableArray(args));\n          break;\n        }\n        if (activeVariadicOption && !maybeOption(arg)) {\n          this.emit(`option:${activeVariadicOption.name()}`, arg);\n          continue;\n        }\n        activeVariadicOption = null;\n        if (maybeOption(arg)) {\n          var option = this._findOption(arg);\n          if (option) {\n            if (option.required) {\n              var value = args.shift();\n              if (value === undefined) this.optionMissingArgument(option);\n              this.emit(`option:${option.name()}`, value);\n            } else if (option.optional) {\n              var _value = null;\n              if (args.length > 0 && !maybeOption(args[0])) {\n                _value = args.shift();\n              }\n              this.emit(`option:${option.name()}`, _value);\n            } else {\n              this.emit(`option:${option.name()}`);\n            }\n            activeVariadicOption = option.variadic ? option : null;\n            continue;\n          }\n        }\n        if (arg.length > 2 && arg[0] === '-' && arg[1] !== '-') {\n          var _option = this._findOption(`-${arg[1]}`);\n          if (_option) {\n            if (_option.required || _option.optional && this._combineFlagAndOptionalValue) {\n              this.emit(`option:${_option.name()}`, arg.slice(2));\n            } else {\n              this.emit(`option:${_option.name()}`);\n              args.unshift(`-${arg.slice(2)}`);\n            }\n            continue;\n          }\n        }\n        if (/^--[^=]+=/.test(arg)) {\n          var index = arg.indexOf('=');\n          var _option2 = this._findOption(arg.slice(0, index));\n          if (_option2 && (_option2.required || _option2.optional)) {\n            this.emit(`option:${_option2.name()}`, arg.slice(index + 1));\n            continue;\n          }\n        }\n        if (maybeOption(arg)) {\n          dest = unknown;\n        }\n        if ((this._enablePositionalOptions || this._passThroughOptions) && operands.length === 0 && unknown.length === 0) {\n          if (this._findCommand(arg)) {\n            operands.push(arg);\n            if (args.length > 0) unknown.push.apply(unknown, _toConsumableArray(args));\n            break;\n          } else if (arg === this._helpCommandName && this._hasImplicitHelpCommand()) {\n            operands.push(arg);\n            if (args.length > 0) operands.push.apply(operands, _toConsumableArray(args));\n            break;\n          } else if (this._defaultCommandName) {\n            unknown.push(arg);\n            if (args.length > 0) unknown.push.apply(unknown, _toConsumableArray(args));\n            break;\n          }\n        }\n        if (this._passThroughOptions) {\n          var _dest2;\n          dest.push(arg);\n          if (args.length > 0) (_dest2 = dest).push.apply(_dest2, _toConsumableArray(args));\n          break;\n        }\n        dest.push(arg);\n      }\n      return {\n        operands: operands,\n        unknown: unknown\n      };\n    }\n  }, {\n    key: \"opts\",\n    value: function opts() {\n      if (this._storeOptionsAsProperties) {\n        var result = {};\n        var len = this.options.length;\n        for (var i = 0; i < len; i++) {\n          var key = this.options[i].attributeName();\n          result[key] = key === this._versionOptionName ? this._version : this[key];\n        }\n        return result;\n      }\n      return this._optionValues;\n    }\n  }, {\n    key: \"optsWithGlobals\",\n    value: function optsWithGlobals() {\n      return getCommandAndParents(this).reduce(function (combinedOptions, cmd) {\n        return Object.assign(combinedOptions, cmd.opts());\n      }, {});\n    }\n  }, {\n    key: \"error\",\n    value: function error(message, errorOptions) {\n      this._outputConfiguration.outputError(`${message}\\n`, this._outputConfiguration.writeErr);\n      if (typeof this._showHelpAfterError === 'string') {\n        this._outputConfiguration.writeErr(`${this._showHelpAfterError}\\n`);\n      } else if (this._showHelpAfterError) {\n        this._outputConfiguration.writeErr('\\n');\n        this.outputHelp({\n          error: true\n        });\n      }\n      var config = errorOptions || {};\n      var exitCode = config.exitCode || 1;\n      var code = config.code || 'commander.error';\n      this._exit(exitCode, code, message);\n    }\n  }, {\n    key: \"_parseOptionsEnv\",\n    value: function _parseOptionsEnv() {\n      var _this12 = this;\n      this.options.forEach(function (option) {\n        if (option.envVar && option.envVar in process.env) {\n          var optionKey = option.attributeName();\n          if (_this12.getOptionValue(optionKey) === undefined || ['default', 'config', 'env'].includes(_this12.getOptionValueSource(optionKey))) {\n            if (option.required || option.optional) {\n              _this12.emit(`optionEnv:${option.name()}`, process.env[option.envVar]);\n            } else {\n              _this12.emit(`optionEnv:${option.name()}`);\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"_parseOptionsImplied\",\n    value: function _parseOptionsImplied() {\n      var _this13 = this;\n      var dualHelper = new DualOptions(this.options);\n      var hasCustomOptionValue = function hasCustomOptionValue(optionKey) {\n        return _this13.getOptionValue(optionKey) !== undefined && !['default', 'implied'].includes(_this13.getOptionValueSource(optionKey));\n      };\n      this.options.filter(function (option) {\n        return option.implied !== undefined && hasCustomOptionValue(option.attributeName()) && dualHelper.valueFromOption(_this13.getOptionValue(option.attributeName()), option);\n      }).forEach(function (option) {\n        Object.keys(option.implied).filter(function (impliedKey) {\n          return !hasCustomOptionValue(impliedKey);\n        }).forEach(function (impliedKey) {\n          _this13.setOptionValueWithSource(impliedKey, option.implied[impliedKey], 'implied');\n        });\n      });\n    }\n  }, {\n    key: \"missingArgument\",\n    value: function missingArgument(name) {\n      var message = `error: missing required argument '${name}'`;\n      this.error(message, {\n        code: 'commander.missingArgument'\n      });\n    }\n  }, {\n    key: \"optionMissingArgument\",\n    value: function optionMissingArgument(option) {\n      var message = `error: option '${option.flags}' argument missing`;\n      this.error(message, {\n        code: 'commander.optionMissingArgument'\n      });\n    }\n  }, {\n    key: \"missingMandatoryOptionValue\",\n    value: function missingMandatoryOptionValue(option) {\n      var message = `error: required option '${option.flags}' not specified`;\n      this.error(message, {\n        code: 'commander.missingMandatoryOptionValue'\n      });\n    }\n  }, {\n    key: \"_conflictingOption\",\n    value: function _conflictingOption(option, conflictingOption) {\n      var _this14 = this;\n      var findBestOptionFromValue = function findBestOptionFromValue(option) {\n        var optionKey = option.attributeName();\n        var optionValue = _this14.getOptionValue(optionKey);\n        var negativeOption = _this14.options.find(function (target) {\n          return target.negate && optionKey === target.attributeName();\n        });\n        var positiveOption = _this14.options.find(function (target) {\n          return !target.negate && optionKey === target.attributeName();\n        });\n        if (negativeOption && (negativeOption.presetArg === undefined && optionValue === false || negativeOption.presetArg !== undefined && optionValue === negativeOption.presetArg)) {\n          return negativeOption;\n        }\n        return positiveOption || option;\n      };\n      var getErrorMessage = function getErrorMessage(option) {\n        var bestOption = findBestOptionFromValue(option);\n        var optionKey = bestOption.attributeName();\n        var source = _this14.getOptionValueSource(optionKey);\n        if (source === 'env') {\n          return `environment variable '${bestOption.envVar}'`;\n        }\n        return `option '${bestOption.flags}'`;\n      };\n      var message = `error: ${getErrorMessage(option)} cannot be used with ${getErrorMessage(conflictingOption)}`;\n      this.error(message, {\n        code: 'commander.conflictingOption'\n      });\n    }\n  }, {\n    key: \"unknownOption\",\n    value: function unknownOption(flag) {\n      if (this._allowUnknownOption) return;\n      var suggestion = '';\n      if (flag.startsWith('--') && this._showSuggestionAfterError) {\n        var candidateFlags = [];\n        var command = this;\n        do {\n          var moreFlags = command.createHelp().visibleOptions(command).filter(function (option) {\n            return option.long;\n          }).map(function (option) {\n            return option.long;\n          });\n          candidateFlags = candidateFlags.concat(moreFlags);\n          command = command.parent;\n        } while (command && !command._enablePositionalOptions);\n        suggestion = suggestSimilar(flag, candidateFlags);\n      }\n      var message = `error: unknown option '${flag}'${suggestion}`;\n      this.error(message, {\n        code: 'commander.unknownOption'\n      });\n    }\n  }, {\n    key: \"_excessArguments\",\n    value: function _excessArguments(receivedArgs) {\n      if (this._allowExcessArguments) return;\n      var expected = this._args.length;\n      var s = expected === 1 ? '' : 's';\n      var forSubcommand = this.parent ? ` for '${this.name()}'` : '';\n      var message = `error: too many arguments${forSubcommand}. Expected ${expected} argument${s} but got ${receivedArgs.length}.`;\n      this.error(message, {\n        code: 'commander.excessArguments'\n      });\n    }\n  }, {\n    key: \"unknownCommand\",\n    value: function unknownCommand() {\n      var unknownName = this.args[0];\n      var suggestion = '';\n      if (this._showSuggestionAfterError) {\n        var candidateNames = [];\n        this.createHelp().visibleCommands(this).forEach(function (command) {\n          candidateNames.push(command.name());\n          if (command.alias()) candidateNames.push(command.alias());\n        });\n        suggestion = suggestSimilar(unknownName, candidateNames);\n      }\n      var message = `error: unknown command '${unknownName}'${suggestion}`;\n      this.error(message, {\n        code: 'commander.unknownCommand'\n      });\n    }\n  }, {\n    key: \"version\",\n    value: function version(str, flags, description) {\n      var _this15 = this;\n      if (str === undefined) return this._version;\n      this._version = str;\n      flags = flags || '-V, --version';\n      description = description || 'output the version number';\n      var versionOption = this.createOption(flags, description);\n      this._versionOptionName = versionOption.attributeName();\n      this.options.push(versionOption);\n      this.on('option:' + versionOption.name(), function () {\n        _this15._outputConfiguration.writeOut(`${str}\\n`);\n        _this15._exit(0, 'commander.version', str);\n      });\n      return this;\n    }\n  }, {\n    key: \"description\",\n    value: function description(str, argsDescription) {\n      if (str === undefined && argsDescription === undefined) return this._description;\n      this._description = str;\n      if (argsDescription) {\n        this._argsDescription = argsDescription;\n      }\n      return this;\n    }\n  }, {\n    key: \"summary\",\n    value: function summary(str) {\n      if (str === undefined) return this._summary;\n      this._summary = str;\n      return this;\n    }\n  }, {\n    key: \"alias\",\n    value: function alias(_alias) {\n      if (_alias === undefined) return this._aliases[0];\n      var command = this;\n      if (this.commands.length !== 0 && this.commands[this.commands.length - 1]._executableHandler) {\n        command = this.commands[this.commands.length - 1];\n      }\n      if (_alias === command._name) throw new Error('Command alias can\\'t be the same as its name');\n      command._aliases.push(_alias);\n      return this;\n    }\n  }, {\n    key: \"aliases\",\n    value: function aliases(_aliases) {\n      var _this16 = this;\n      if (_aliases === undefined) return this._aliases;\n      _aliases.forEach(function (alias) {\n        return _this16.alias(alias);\n      });\n      return this;\n    }\n  }, {\n    key: \"usage\",\n    value: function usage(str) {\n      if (str === undefined) {\n        if (this._usage) return this._usage;\n        var args = this._args.map(function (arg) {\n          return humanReadableArgName(arg);\n        });\n        return [].concat(this.options.length || this._hasHelpOption ? '[options]' : [], this.commands.length ? '[command]' : [], this._args.length ? args : []).join(' ');\n      }\n      this._usage = str;\n      return this;\n    }\n  }, {\n    key: \"name\",\n    value: function name(str) {\n      if (str === undefined) return this._name;\n      this._name = str;\n      return this;\n    }\n  }, {\n    key: \"nameFromFilename\",\n    value: function nameFromFilename(filename) {\n      this._name = path.basename(filename, path.extname(filename));\n      return this;\n    }\n  }, {\n    key: \"executableDir\",\n    value: function executableDir(path) {\n      if (path === undefined) return this._executableDir;\n      this._executableDir = path;\n      return this;\n    }\n  }, {\n    key: \"helpInformation\",\n    value: function helpInformation(contextOptions) {\n      var helper = this.createHelp();\n      if (helper.helpWidth === undefined) {\n        helper.helpWidth = contextOptions && contextOptions.error ? this._outputConfiguration.getErrHelpWidth() : this._outputConfiguration.getOutHelpWidth();\n      }\n      return helper.formatHelp(this, helper);\n    }\n  }, {\n    key: \"_getHelpContext\",\n    value: function _getHelpContext(contextOptions) {\n      var _this17 = this;\n      contextOptions = contextOptions || {};\n      var context = {\n        error: !!contextOptions.error\n      };\n      var write;\n      if (context.error) {\n        write = function write(arg) {\n          return _this17._outputConfiguration.writeErr(arg);\n        };\n      } else {\n        write = function write(arg) {\n          return _this17._outputConfiguration.writeOut(arg);\n        };\n      }\n      context.write = contextOptions.write || write;\n      context.command = this;\n      return context;\n    }\n  }, {\n    key: \"outputHelp\",\n    value: function outputHelp(contextOptions) {\n      var deprecatedCallback;\n      if (typeof contextOptions === 'function') {\n        deprecatedCallback = contextOptions;\n        contextOptions = undefined;\n      }\n      var context = this._getHelpContext(contextOptions);\n      getCommandAndParents(this).reverse().forEach(function (command) {\n        return command.emit('beforeAllHelp', context);\n      });\n      this.emit('beforeHelp', context);\n      var helpInformation = this.helpInformation(context);\n      if (deprecatedCallback) {\n        helpInformation = deprecatedCallback(helpInformation);\n        if (typeof helpInformation !== 'string' && !Buffer.isBuffer(helpInformation)) {\n          throw new Error('outputHelp callback must return a string or a Buffer');\n        }\n      }\n      context.write(helpInformation);\n      this.emit(this._helpLongFlag);\n      this.emit('afterHelp', context);\n      getCommandAndParents(this).forEach(function (command) {\n        return command.emit('afterAllHelp', context);\n      });\n    }\n  }, {\n    key: \"helpOption\",\n    value: function helpOption(flags, description) {\n      if (typeof flags === 'boolean') {\n        this._hasHelpOption = flags;\n        return this;\n      }\n      this._helpFlags = flags || this._helpFlags;\n      this._helpDescription = description || this._helpDescription;\n      var helpFlags = splitOptionFlags(this._helpFlags);\n      this._helpShortFlag = helpFlags.shortFlag;\n      this._helpLongFlag = helpFlags.longFlag;\n      return this;\n    }\n  }, {\n    key: \"help\",\n    value: function help(contextOptions) {\n      this.outputHelp(contextOptions);\n      var exitCode = process.exitCode || 0;\n      if (exitCode === 0 && contextOptions && typeof contextOptions !== 'function' && contextOptions.error) {\n        exitCode = 1;\n      }\n      this._exit(exitCode, 'commander.help', '(outputHelp)');\n    }\n  }, {\n    key: \"addHelpText\",\n    value: function addHelpText(position, text) {\n      var allowedValues = ['beforeAll', 'before', 'after', 'afterAll'];\n      if (!allowedValues.includes(position)) {\n        throw new Error(`Unexpected value for position to addHelpText.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n      }\n      var helpEvent = `${position}Help`;\n      this.on(helpEvent, function (context) {\n        var helpStr;\n        if (typeof text === 'function') {\n          helpStr = text({\n            error: context.error,\n            command: context.command\n          });\n        } else {\n          helpStr = text;\n        }\n        if (helpStr) {\n          context.write(`${helpStr}\\n`);\n        }\n      });\n      return this;\n    }\n  }]);\n  return Command;\n}(EventEmitter);\nfunction outputHelpIfRequested(cmd, args) {\n  var helpOption = cmd._hasHelpOption && args.find(function (arg) {\n    return arg === cmd._helpLongFlag || arg === cmd._helpShortFlag;\n  });\n  if (helpOption) {\n    cmd.outputHelp();\n    cmd._exit(0, 'commander.helpDisplayed', '(outputHelp)');\n  }\n}\nfunction incrementNodeInspectorPort(args) {\n  return args.map(function (arg) {\n    if (!arg.startsWith('--inspect')) {\n      return arg;\n    }\n    var debugOption;\n    var debugHost = '127.0.0.1';\n    var debugPort = '9229';\n    var match;\n    if ((match = arg.match(/^(--inspect(-brk)?)$/)) !== null) {\n      debugOption = match[1];\n    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null) {\n      debugOption = match[1];\n      if (/^\\d+$/.test(match[3])) {\n        debugPort = match[3];\n      } else {\n        debugHost = match[3];\n      }\n    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+):(\\d+)$/)) !== null) {\n      debugOption = match[1];\n      debugHost = match[3];\n      debugPort = match[4];\n    }\n    if (debugOption && debugPort !== '0') {\n      return `${debugOption}=${debugHost}:${parseInt(debugPort) + 1}`;\n    }\n    return arg;\n  });\n}\nfunction getCommandAndParents(startCommand) {\n  var result = [];\n  for (var command = startCommand; command; command = command.parent) {\n    result.push(command);\n  }\n  return result;\n}\nexports.Command = Command;","map":{"version":3,"names":["EventEmitter","require","childProcess","path","fs","process","_require","Argument","humanReadableArgName","_require2","CommanderError","_require3","Help","_require4","Option","splitOptionFlags","DualOptions","_require5","suggestSimilar","Command","_EventEmitter","_inherits","_super","_createSuper","name","_this","_classCallCheck","call","commands","options","parent","_allowUnknownOption","_allowExcessArguments","_args","args","rawArgs","processedArgs","_scriptPath","_name","_optionValues","_optionValueSources","_storeOptionsAsProperties","_actionHandler","_executableHandler","_executableFile","_executableDir","_defaultCommandName","_exitCallback","_aliases","_combineFlagAndOptionalValue","_description","_summary","_argsDescription","undefined","_enablePositionalOptions","_passThroughOptions","_lifeCycleHooks","_showHelpAfterError","_showSuggestionAfterError","_outputConfiguration","writeOut","str","stdout","write","writeErr","stderr","getOutHelpWidth","isTTY","columns","getErrHelpWidth","outputError","_hidden","_hasHelpOption","_helpFlags","_helpDescription","_helpShortFlag","_helpLongFlag","_addImplicitHelpCommand","_helpCommandName","_helpCommandnameAndArgs","_helpCommandDescription","_helpConfiguration","_createClass","key","value","copyInheritedSettings","sourceCommand","command","nameAndArgs","actionOptsOrExecDesc","execOpts","desc","opts","_nameAndArgs$match","match","_nameAndArgs$match2","_slicedToArray","cmd","createCommand","description","isDefault","noHelp","hidden","executableFile","arguments","push","createHelp","Object","assign","configureHelp","configuration","configureOutput","showHelpAfterError","displayHelp","length","showSuggestionAfterError","displaySuggestion","addCommand","Error","createArgument","argument","fn","defaultValue","default","argParser","addArgument","_arguments","names","_this2","split","forEach","detail","previousArgument","slice","variadic","required","parseArg","addHelpCommand","enableOrNameAndArgs","_hasImplicitHelpCommand","_findCommand","hook","event","listener","allowedValues","includes","join","exitOverride","err","code","_exit","exitCode","message","exit","action","_this3","expectedArgsCount","actionArgs","apply","createOption","flags","addOption","option","_this4","oname","attributeName","negate","positiveLongFlag","long","replace","_findOption","setOptionValueWithSource","handleOptionValue","val","invalidValueMessage","valueSource","presetArg","oldValue","getOptionValue","error","_concatValue","isBoolean","optional","on","envVar","_optionEx","config","makeOptionMandatory","mandatory","RegExp","regex","def","m","exec","requiredOption","combineFlagAndOptionalValue","combine","allowUnknownOption","allowUnknown","allowExcessArguments","allowExcess","enablePositionalOptions","positional","passThroughOptions","passThrough","storeOptionsAsProperties","storeAsProperties","setOptionValue","source","getOptionValueSource","getOptionValueSourceWithGlobals","getCommandAndParents","_prepareUserArgs","argv","parseOptions","Array","isArray","versions","electron","from","userArgs","defaultApp","nameFromFilename","parse","_parseCommand","_parseAsync","_asyncToGenerator","parseAsync","_x","_x2","_executeSubCommand","subcommand","launchWithNode","sourceExt","findFile","baseDir","baseName","localBin","resolve","existsSync","extname","foundExt","find","ext","_checkForMissingMandatoryOptions","_checkForConflictingOptions","executableDir","resolvedScriptPath","realpathSync","dirname","localFile","legacyName","basename","proc","platform","unshift","incrementNodeInspectorPort","execArgv","concat","spawn","stdio","execPath","killed","signals","signal","kill","exitCallback","bind","executableDirMessage","executableMissing","wrappedError","nestedError","runningCommand","_dispatchSubcommand","commandName","operands","unknown","_this5","subCommand","help","hookResult","_chainOrCallSubCommandHook","_chainOrCall","_checkNumberOfArguments","_this6","arg","i","missingArgument","_excessArguments","_processArguments","_this7","myParseArg","previous","parsedValue","declaredArg","index","reduce","processed","v","promise","then","_chainOrCallHooks","_this8","result","hooks","reverse","filter","hookedCommand","callback","hookDetail","_this9","_this10","parsed","_parseOptionsEnv","_parseOptionsImplied","outputHelpIfRequested","checkForUnknownOptions","unknownOption","commandEvent","actionResult","emit","listenerCount","unknownCommand","is","_loop","anOption","missingMandatoryOptionValue","_checkForConflictingLocalOptions","_this11","definedNonDefaultOptions","optionKey","optionsWithConflicting","conflictsWith","conflictingAndDefined","defined","_conflictingOption","dest","maybeOption","activeVariadicOption","shift","_dest","_toConsumableArray","optionMissingArgument","test","indexOf","_dest2","len","_versionOptionName","_version","optsWithGlobals","combinedOptions","errorOptions","outputHelp","_this12","env","_this13","dualHelper","hasCustomOptionValue","implied","valueFromOption","keys","impliedKey","conflictingOption","_this14","findBestOptionFromValue","optionValue","negativeOption","target","positiveOption","getErrorMessage","bestOption","flag","suggestion","startsWith","candidateFlags","moreFlags","visibleOptions","map","receivedArgs","expected","s","forSubcommand","unknownName","candidateNames","visibleCommands","alias","version","_this15","versionOption","argsDescription","summary","aliases","_this16","usage","_usage","filename","helpInformation","contextOptions","helper","helpWidth","formatHelp","_getHelpContext","_this17","context","deprecatedCallback","Buffer","isBuffer","helpOption","helpFlags","shortFlag","longFlag","addHelpText","position","text","helpEvent","helpStr","debugOption","debugHost","debugPort","parseInt","startCommand","exports"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli/node_modules/commander/lib/command.js"],"sourcesContent":["const EventEmitter = require('events').EventEmitter;\nconst childProcess = require('child_process');\nconst path = require('path');\nconst fs = require('fs');\nconst process = require('process');\n\nconst { Argument, humanReadableArgName } = require('./argument.js');\nconst { CommanderError } = require('./error.js');\nconst { Help } = require('./help.js');\nconst { Option, splitOptionFlags, DualOptions } = require('./option.js');\nconst { suggestSimilar } = require('./suggestSimilar');\n\n// @ts-check\n\nclass Command extends EventEmitter {\n  /**\n   * Initialize a new `Command`.\n   *\n   * @param {string} [name]\n   */\n\n  constructor(name) {\n    super();\n    /** @type {Command[]} */\n    this.commands = [];\n    /** @type {Option[]} */\n    this.options = [];\n    this.parent = null;\n    this._allowUnknownOption = false;\n    this._allowExcessArguments = true;\n    /** @type {Argument[]} */\n    this._args = [];\n    /** @type {string[]} */\n    this.args = []; // cli args with options removed\n    this.rawArgs = [];\n    this.processedArgs = []; // like .args but after custom processing and collecting variadic\n    this._scriptPath = null;\n    this._name = name || '';\n    this._optionValues = {};\n    this._optionValueSources = {}; // default, env, cli etc\n    this._storeOptionsAsProperties = false;\n    this._actionHandler = null;\n    this._executableHandler = false;\n    this._executableFile = null; // custom name for executable\n    this._executableDir = null; // custom search directory for subcommands\n    this._defaultCommandName = null;\n    this._exitCallback = null;\n    this._aliases = [];\n    this._combineFlagAndOptionalValue = true;\n    this._description = '';\n    this._summary = '';\n    this._argsDescription = undefined; // legacy\n    this._enablePositionalOptions = false;\n    this._passThroughOptions = false;\n    this._lifeCycleHooks = {}; // a hash of arrays\n    /** @type {boolean | string} */\n    this._showHelpAfterError = false;\n    this._showSuggestionAfterError = true;\n\n    // see .configureOutput() for docs\n    this._outputConfiguration = {\n      writeOut: (str) => process.stdout.write(str),\n      writeErr: (str) => process.stderr.write(str),\n      getOutHelpWidth: () => process.stdout.isTTY ? process.stdout.columns : undefined,\n      getErrHelpWidth: () => process.stderr.isTTY ? process.stderr.columns : undefined,\n      outputError: (str, write) => write(str)\n    };\n\n    this._hidden = false;\n    this._hasHelpOption = true;\n    this._helpFlags = '-h, --help';\n    this._helpDescription = 'display help for command';\n    this._helpShortFlag = '-h';\n    this._helpLongFlag = '--help';\n    this._addImplicitHelpCommand = undefined; // Deliberately undefined, not decided whether true or false\n    this._helpCommandName = 'help';\n    this._helpCommandnameAndArgs = 'help [command]';\n    this._helpCommandDescription = 'display help for command';\n    this._helpConfiguration = {};\n  }\n\n  /**\n   * Copy settings that are useful to have in common across root command and subcommands.\n   *\n   * (Used internally when adding a command using `.command()` so subcommands inherit parent settings.)\n   *\n   * @param {Command} sourceCommand\n   * @return {Command} `this` command for chaining\n   */\n  copyInheritedSettings(sourceCommand) {\n    this._outputConfiguration = sourceCommand._outputConfiguration;\n    this._hasHelpOption = sourceCommand._hasHelpOption;\n    this._helpFlags = sourceCommand._helpFlags;\n    this._helpDescription = sourceCommand._helpDescription;\n    this._helpShortFlag = sourceCommand._helpShortFlag;\n    this._helpLongFlag = sourceCommand._helpLongFlag;\n    this._helpCommandName = sourceCommand._helpCommandName;\n    this._helpCommandnameAndArgs = sourceCommand._helpCommandnameAndArgs;\n    this._helpCommandDescription = sourceCommand._helpCommandDescription;\n    this._helpConfiguration = sourceCommand._helpConfiguration;\n    this._exitCallback = sourceCommand._exitCallback;\n    this._storeOptionsAsProperties = sourceCommand._storeOptionsAsProperties;\n    this._combineFlagAndOptionalValue = sourceCommand._combineFlagAndOptionalValue;\n    this._allowExcessArguments = sourceCommand._allowExcessArguments;\n    this._enablePositionalOptions = sourceCommand._enablePositionalOptions;\n    this._showHelpAfterError = sourceCommand._showHelpAfterError;\n    this._showSuggestionAfterError = sourceCommand._showSuggestionAfterError;\n\n    return this;\n  }\n\n  /**\n   * Define a command.\n   *\n   * There are two styles of command: pay attention to where to put the description.\n   *\n   * @example\n   * // Command implemented using action handler (description is supplied separately to `.command`)\n   * program\n   *   .command('clone <source> [destination]')\n   *   .description('clone a repository into a newly created directory')\n   *   .action((source, destination) => {\n   *     console.log('clone command called');\n   *   });\n   *\n   * // Command implemented using separate executable file (description is second parameter to `.command`)\n   * program\n   *   .command('start <service>', 'start named service')\n   *   .command('stop [service]', 'stop named service, or all if no name supplied');\n   *\n   * @param {string} nameAndArgs - command name and arguments, args are `<required>` or `[optional]` and last may also be `variadic...`\n   * @param {Object|string} [actionOptsOrExecDesc] - configuration options (for action), or description (for executable)\n   * @param {Object} [execOpts] - configuration options (for executable)\n   * @return {Command} returns new command for action handler, or `this` for executable command\n   */\n\n  command(nameAndArgs, actionOptsOrExecDesc, execOpts) {\n    let desc = actionOptsOrExecDesc;\n    let opts = execOpts;\n    if (typeof desc === 'object' && desc !== null) {\n      opts = desc;\n      desc = null;\n    }\n    opts = opts || {};\n    const [, name, args] = nameAndArgs.match(/([^ ]+) *(.*)/);\n\n    const cmd = this.createCommand(name);\n    if (desc) {\n      cmd.description(desc);\n      cmd._executableHandler = true;\n    }\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    cmd._hidden = !!(opts.noHelp || opts.hidden); // noHelp is deprecated old name for hidden\n    cmd._executableFile = opts.executableFile || null; // Custom name for executable file, set missing to null to match constructor\n    if (args) cmd.arguments(args);\n    this.commands.push(cmd);\n    cmd.parent = this;\n    cmd.copyInheritedSettings(this);\n\n    if (desc) return this;\n    return cmd;\n  }\n\n  /**\n   * Factory routine to create a new unattached command.\n   *\n   * See .command() for creating an attached subcommand, which uses this routine to\n   * create the command. You can override createCommand to customise subcommands.\n   *\n   * @param {string} [name]\n   * @return {Command} new command\n   */\n\n  createCommand(name) {\n    return new Command(name);\n  }\n\n  /**\n   * You can customise the help with a subclass of Help by overriding createHelp,\n   * or by overriding Help properties using configureHelp().\n   *\n   * @return {Help}\n   */\n\n  createHelp() {\n    return Object.assign(new Help(), this.configureHelp());\n  }\n\n  /**\n   * You can customise the help by overriding Help properties using configureHelp(),\n   * or with a subclass of Help by overriding createHelp().\n   *\n   * @param {Object} [configuration] - configuration options\n   * @return {Command|Object} `this` command for chaining, or stored configuration\n   */\n\n  configureHelp(configuration) {\n    if (configuration === undefined) return this._helpConfiguration;\n\n    this._helpConfiguration = configuration;\n    return this;\n  }\n\n  /**\n   * The default output goes to stdout and stderr. You can customise this for special\n   * applications. You can also customise the display of errors by overriding outputError.\n   *\n   * The configuration properties are all functions:\n   *\n   *     // functions to change where being written, stdout and stderr\n   *     writeOut(str)\n   *     writeErr(str)\n   *     // matching functions to specify width for wrapping help\n   *     getOutHelpWidth()\n   *     getErrHelpWidth()\n   *     // functions based on what is being written out\n   *     outputError(str, write) // used for displaying errors, and not used for displaying help\n   *\n   * @param {Object} [configuration] - configuration options\n   * @return {Command|Object} `this` command for chaining, or stored configuration\n   */\n\n  configureOutput(configuration) {\n    if (configuration === undefined) return this._outputConfiguration;\n\n    Object.assign(this._outputConfiguration, configuration);\n    return this;\n  }\n\n  /**\n   * Display the help or a custom message after an error occurs.\n   *\n   * @param {boolean|string} [displayHelp]\n   * @return {Command} `this` command for chaining\n   */\n  showHelpAfterError(displayHelp = true) {\n    if (typeof displayHelp !== 'string') displayHelp = !!displayHelp;\n    this._showHelpAfterError = displayHelp;\n    return this;\n  }\n\n  /**\n   * Display suggestion of similar commands for unknown commands, or options for unknown options.\n   *\n   * @param {boolean} [displaySuggestion]\n   * @return {Command} `this` command for chaining\n   */\n  showSuggestionAfterError(displaySuggestion = true) {\n    this._showSuggestionAfterError = !!displaySuggestion;\n    return this;\n  }\n\n  /**\n   * Add a prepared subcommand.\n   *\n   * See .command() for creating an attached subcommand which inherits settings from its parent.\n   *\n   * @param {Command} cmd - new subcommand\n   * @param {Object} [opts] - configuration options\n   * @return {Command} `this` command for chaining\n   */\n\n  addCommand(cmd, opts) {\n    if (!cmd._name) {\n      throw new Error(`Command passed to .addCommand() must have a name\n- specify the name in Command constructor or using .name()`);\n    }\n\n    opts = opts || {};\n    if (opts.isDefault) this._defaultCommandName = cmd._name;\n    if (opts.noHelp || opts.hidden) cmd._hidden = true; // modifying passed command due to existing implementation\n\n    this.commands.push(cmd);\n    cmd.parent = this;\n    return this;\n  }\n\n  /**\n   * Factory routine to create a new unattached argument.\n   *\n   * See .argument() for creating an attached argument, which uses this routine to\n   * create the argument. You can override createArgument to return a custom argument.\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @return {Argument} new argument\n   */\n\n  createArgument(name, description) {\n    return new Argument(name, description);\n  }\n\n  /**\n   * Define argument syntax for command.\n   *\n   * The default is that the argument is required, and you can explicitly\n   * indicate this with <> around the name. Put [] around the name for an optional argument.\n   *\n   * @example\n   * program.argument('<input-file>');\n   * program.argument('[output-file]');\n   *\n   * @param {string} name\n   * @param {string} [description]\n   * @param {Function|*} [fn] - custom argument processing function\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n  argument(name, description, fn, defaultValue) {\n    const argument = this.createArgument(name, description);\n    if (typeof fn === 'function') {\n      argument.default(defaultValue).argParser(fn);\n    } else {\n      argument.default(fn);\n    }\n    this.addArgument(argument);\n    return this;\n  }\n\n  /**\n   * Define argument syntax for command, adding multiple at once (without descriptions).\n   *\n   * See also .argument().\n   *\n   * @example\n   * program.arguments('<cmd> [env]');\n   *\n   * @param {string} names\n   * @return {Command} `this` command for chaining\n   */\n\n  arguments(names) {\n    names.split(/ +/).forEach((detail) => {\n      this.argument(detail);\n    });\n    return this;\n  }\n\n  /**\n   * Define argument syntax for command, adding a prepared argument.\n   *\n   * @param {Argument} argument\n   * @return {Command} `this` command for chaining\n   */\n  addArgument(argument) {\n    const previousArgument = this._args.slice(-1)[0];\n    if (previousArgument && previousArgument.variadic) {\n      throw new Error(`only the last argument can be variadic '${previousArgument.name()}'`);\n    }\n    if (argument.required && argument.defaultValue !== undefined && argument.parseArg === undefined) {\n      throw new Error(`a default value for a required argument is never used: '${argument.name()}'`);\n    }\n    this._args.push(argument);\n    return this;\n  }\n\n  /**\n   * Override default decision whether to add implicit help command.\n   *\n   *    addHelpCommand() // force on\n   *    addHelpCommand(false); // force off\n   *    addHelpCommand('help [cmd]', 'display help for [cmd]'); // force on with custom details\n   *\n   * @return {Command} `this` command for chaining\n   */\n\n  addHelpCommand(enableOrNameAndArgs, description) {\n    if (enableOrNameAndArgs === false) {\n      this._addImplicitHelpCommand = false;\n    } else {\n      this._addImplicitHelpCommand = true;\n      if (typeof enableOrNameAndArgs === 'string') {\n        this._helpCommandName = enableOrNameAndArgs.split(' ')[0];\n        this._helpCommandnameAndArgs = enableOrNameAndArgs;\n      }\n      this._helpCommandDescription = description || this._helpCommandDescription;\n    }\n    return this;\n  }\n\n  /**\n   * @return {boolean}\n   * @api private\n   */\n\n  _hasImplicitHelpCommand() {\n    if (this._addImplicitHelpCommand === undefined) {\n      return this.commands.length && !this._actionHandler && !this._findCommand('help');\n    }\n    return this._addImplicitHelpCommand;\n  }\n\n  /**\n   * Add hook for life cycle event.\n   *\n   * @param {string} event\n   * @param {Function} listener\n   * @return {Command} `this` command for chaining\n   */\n\n  hook(event, listener) {\n    const allowedValues = ['preSubcommand', 'preAction', 'postAction'];\n    if (!allowedValues.includes(event)) {\n      throw new Error(`Unexpected value for event passed to hook : '${event}'.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    if (this._lifeCycleHooks[event]) {\n      this._lifeCycleHooks[event].push(listener);\n    } else {\n      this._lifeCycleHooks[event] = [listener];\n    }\n    return this;\n  }\n\n  /**\n   * Register callback to use as replacement for calling process.exit.\n   *\n   * @param {Function} [fn] optional callback which will be passed a CommanderError, defaults to throwing\n   * @return {Command} `this` command for chaining\n   */\n\n  exitOverride(fn) {\n    if (fn) {\n      this._exitCallback = fn;\n    } else {\n      this._exitCallback = (err) => {\n        if (err.code !== 'commander.executeSubCommandAsync') {\n          throw err;\n        } else {\n          // Async callback from spawn events, not useful to throw.\n        }\n      };\n    }\n    return this;\n  }\n\n  /**\n   * Call process.exit, and _exitCallback if defined.\n   *\n   * @param {number} exitCode exit code for using with process.exit\n   * @param {string} code an id string representing the error\n   * @param {string} message human-readable description of the error\n   * @return never\n   * @api private\n   */\n\n  _exit(exitCode, code, message) {\n    if (this._exitCallback) {\n      this._exitCallback(new CommanderError(exitCode, code, message));\n      // Expecting this line is not reached.\n    }\n    process.exit(exitCode);\n  }\n\n  /**\n   * Register callback `fn` for the command.\n   *\n   * @example\n   * program\n   *   .command('serve')\n   *   .description('start service')\n   *   .action(function() {\n   *      // do work here\n   *   });\n   *\n   * @param {Function} fn\n   * @return {Command} `this` command for chaining\n   */\n\n  action(fn) {\n    const listener = (args) => {\n      // The .action callback takes an extra parameter which is the command or options.\n      const expectedArgsCount = this._args.length;\n      const actionArgs = args.slice(0, expectedArgsCount);\n      if (this._storeOptionsAsProperties) {\n        actionArgs[expectedArgsCount] = this; // backwards compatible \"options\"\n      } else {\n        actionArgs[expectedArgsCount] = this.opts();\n      }\n      actionArgs.push(this);\n\n      return fn.apply(this, actionArgs);\n    };\n    this._actionHandler = listener;\n    return this;\n  }\n\n  /**\n   * Factory routine to create a new unattached option.\n   *\n   * See .option() for creating an attached option, which uses this routine to\n   * create the option. You can override createOption to return a custom option.\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @return {Option} new option\n   */\n\n  createOption(flags, description) {\n    return new Option(flags, description);\n  }\n\n  /**\n   * Add an option.\n   *\n   * @param {Option} option\n   * @return {Command} `this` command for chaining\n   */\n  addOption(option) {\n    const oname = option.name();\n    const name = option.attributeName();\n\n    // store default value\n    if (option.negate) {\n      // --no-foo is special and defaults foo to true, unless a --foo option is already defined\n      const positiveLongFlag = option.long.replace(/^--no-/, '--');\n      if (!this._findOption(positiveLongFlag)) {\n        this.setOptionValueWithSource(name, option.defaultValue === undefined ? true : option.defaultValue, 'default');\n      }\n    } else if (option.defaultValue !== undefined) {\n      this.setOptionValueWithSource(name, option.defaultValue, 'default');\n    }\n\n    // register the option\n    this.options.push(option);\n\n    // handler for cli and env supplied values\n    const handleOptionValue = (val, invalidValueMessage, valueSource) => {\n      // val is null for optional option used without an optional-argument.\n      // val is undefined for boolean and negated option.\n      if (val == null && option.presetArg !== undefined) {\n        val = option.presetArg;\n      }\n\n      // custom processing\n      const oldValue = this.getOptionValue(name);\n      if (val !== null && option.parseArg) {\n        try {\n          val = option.parseArg(val, oldValue);\n        } catch (err) {\n          if (err.code === 'commander.invalidArgument') {\n            const message = `${invalidValueMessage} ${err.message}`;\n            this.error(message, { exitCode: err.exitCode, code: err.code });\n          }\n          throw err;\n        }\n      } else if (val !== null && option.variadic) {\n        val = option._concatValue(val, oldValue);\n      }\n\n      // Fill-in appropriate missing values. Long winded but easy to follow.\n      if (val == null) {\n        if (option.negate) {\n          val = false;\n        } else if (option.isBoolean() || option.optional) {\n          val = true;\n        } else {\n          val = ''; // not normal, parseArg might have failed or be a mock function for testing\n        }\n      }\n      this.setOptionValueWithSource(name, val, valueSource);\n    };\n\n    this.on('option:' + oname, (val) => {\n      const invalidValueMessage = `error: option '${option.flags}' argument '${val}' is invalid.`;\n      handleOptionValue(val, invalidValueMessage, 'cli');\n    });\n\n    if (option.envVar) {\n      this.on('optionEnv:' + oname, (val) => {\n        const invalidValueMessage = `error: option '${option.flags}' value '${val}' from env '${option.envVar}' is invalid.`;\n        handleOptionValue(val, invalidValueMessage, 'env');\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Internal implementation shared by .option() and .requiredOption()\n   *\n   * @api private\n   */\n  _optionEx(config, flags, description, fn, defaultValue) {\n    if (typeof flags === 'object' && flags instanceof Option) {\n      throw new Error('To add an Option object use addOption() instead of option() or requiredOption()');\n    }\n    const option = this.createOption(flags, description);\n    option.makeOptionMandatory(!!config.mandatory);\n    if (typeof fn === 'function') {\n      option.default(defaultValue).argParser(fn);\n    } else if (fn instanceof RegExp) {\n      // deprecated\n      const regex = fn;\n      fn = (val, def) => {\n        const m = regex.exec(val);\n        return m ? m[0] : def;\n      };\n      option.default(defaultValue).argParser(fn);\n    } else {\n      option.default(fn);\n    }\n\n    return this.addOption(option);\n  }\n\n  /**\n   * Define option with `flags`, `description` and optional\n   * coercion `fn`.\n   *\n   * The `flags` string contains the short and/or long flags,\n   * separated by comma, a pipe or space. The following are all valid\n   * all will output this way when `--help` is used.\n   *\n   *     \"-p, --pepper\"\n   *     \"-p|--pepper\"\n   *     \"-p --pepper\"\n   *\n   * @example\n   * // simple boolean defaulting to undefined\n   * program.option('-p, --pepper', 'add pepper');\n   *\n   * program.pepper\n   * // => undefined\n   *\n   * --pepper\n   * program.pepper\n   * // => true\n   *\n   * // simple boolean defaulting to true (unless non-negated option is also defined)\n   * program.option('-C, --no-cheese', 'remove cheese');\n   *\n   * program.cheese\n   * // => true\n   *\n   * --no-cheese\n   * program.cheese\n   * // => false\n   *\n   * // required argument\n   * program.option('-C, --chdir <path>', 'change the working directory');\n   *\n   * --chdir /tmp\n   * program.chdir\n   * // => \"/tmp\"\n   *\n   * // optional argument\n   * program.option('-c, --cheese [type]', 'add cheese [marble]');\n   *\n   * @param {string} flags\n   * @param {string} [description]\n   * @param {Function|*} [fn] - custom option processing function or default value\n   * @param {*} [defaultValue]\n   * @return {Command} `this` command for chaining\n   */\n\n  option(flags, description, fn, defaultValue) {\n    return this._optionEx({}, flags, description, fn, defaultValue);\n  }\n\n  /**\n  * Add a required option which must have a value after parsing. This usually means\n  * the option must be specified on the command line. (Otherwise the same as .option().)\n  *\n  * The `flags` string contains the short and/or long flags, separated by comma, a pipe or space.\n  *\n  * @param {string} flags\n  * @param {string} [description]\n  * @param {Function|*} [fn] - custom option processing function or default value\n  * @param {*} [defaultValue]\n  * @return {Command} `this` command for chaining\n  */\n\n  requiredOption(flags, description, fn, defaultValue) {\n    return this._optionEx({ mandatory: true }, flags, description, fn, defaultValue);\n  }\n\n  /**\n   * Alter parsing of short flags with optional values.\n   *\n   * @example\n   * // for `.option('-f,--flag [value]'):\n   * program.combineFlagAndOptionalValue(true);  // `-f80` is treated like `--flag=80`, this is the default behaviour\n   * program.combineFlagAndOptionalValue(false) // `-fb` is treated like `-f -b`\n   *\n   * @param {Boolean} [combine=true] - if `true` or omitted, an optional value can be specified directly after the flag.\n   */\n  combineFlagAndOptionalValue(combine = true) {\n    this._combineFlagAndOptionalValue = !!combine;\n    return this;\n  }\n\n  /**\n   * Allow unknown options on the command line.\n   *\n   * @param {Boolean} [allowUnknown=true] - if `true` or omitted, no error will be thrown\n   * for unknown options.\n   */\n  allowUnknownOption(allowUnknown = true) {\n    this._allowUnknownOption = !!allowUnknown;\n    return this;\n  }\n\n  /**\n   * Allow excess command-arguments on the command line. Pass false to make excess arguments an error.\n   *\n   * @param {Boolean} [allowExcess=true] - if `true` or omitted, no error will be thrown\n   * for excess arguments.\n   */\n  allowExcessArguments(allowExcess = true) {\n    this._allowExcessArguments = !!allowExcess;\n    return this;\n  }\n\n  /**\n   * Enable positional options. Positional means global options are specified before subcommands which lets\n   * subcommands reuse the same option names, and also enables subcommands to turn on passThroughOptions.\n   * The default behaviour is non-positional and global options may appear anywhere on the command line.\n   *\n   * @param {Boolean} [positional=true]\n   */\n  enablePositionalOptions(positional = true) {\n    this._enablePositionalOptions = !!positional;\n    return this;\n  }\n\n  /**\n   * Pass through options that come after command-arguments rather than treat them as command-options,\n   * so actual command-options come before command-arguments. Turning this on for a subcommand requires\n   * positional options to have been enabled on the program (parent commands).\n   * The default behaviour is non-positional and options may appear before or after command-arguments.\n   *\n   * @param {Boolean} [passThrough=true]\n   * for unknown options.\n   */\n  passThroughOptions(passThrough = true) {\n    this._passThroughOptions = !!passThrough;\n    if (!!this.parent && passThrough && !this.parent._enablePositionalOptions) {\n      throw new Error('passThroughOptions can not be used without turning on enablePositionalOptions for parent command(s)');\n    }\n    return this;\n  }\n\n  /**\n    * Whether to store option values as properties on command object,\n    * or store separately (specify false). In both cases the option values can be accessed using .opts().\n    *\n    * @param {boolean} [storeAsProperties=true]\n    * @return {Command} `this` command for chaining\n    */\n\n  storeOptionsAsProperties(storeAsProperties = true) {\n    this._storeOptionsAsProperties = !!storeAsProperties;\n    if (this.options.length) {\n      throw new Error('call .storeOptionsAsProperties() before adding options');\n    }\n    return this;\n  }\n\n  /**\n   * Retrieve option value.\n   *\n   * @param {string} key\n   * @return {Object} value\n   */\n\n  getOptionValue(key) {\n    if (this._storeOptionsAsProperties) {\n      return this[key];\n    }\n    return this._optionValues[key];\n  }\n\n  /**\n   * Store option value.\n   *\n   * @param {string} key\n   * @param {Object} value\n   * @return {Command} `this` command for chaining\n   */\n\n  setOptionValue(key, value) {\n    return this.setOptionValueWithSource(key, value, undefined);\n  }\n\n  /**\n    * Store option value and where the value came from.\n    *\n    * @param {string} key\n    * @param {Object} value\n    * @param {string} source - expected values are default/config/env/cli/implied\n    * @return {Command} `this` command for chaining\n    */\n\n  setOptionValueWithSource(key, value, source) {\n    if (this._storeOptionsAsProperties) {\n      this[key] = value;\n    } else {\n      this._optionValues[key] = value;\n    }\n    this._optionValueSources[key] = source;\n    return this;\n  }\n\n  /**\n    * Get source of option value.\n    * Expected values are default | config | env | cli | implied\n    *\n    * @param {string} key\n    * @return {string}\n    */\n\n  getOptionValueSource(key) {\n    return this._optionValueSources[key];\n  }\n\n  /**\n    * Get source of option value. See also .optsWithGlobals().\n    * Expected values are default | config | env | cli | implied\n    *\n    * @param {string} key\n    * @return {string}\n    */\n\n  getOptionValueSourceWithGlobals(key) {\n    // global overwrites local, like optsWithGlobals\n    let source;\n    getCommandAndParents(this).forEach((cmd) => {\n      if (cmd.getOptionValueSource(key) !== undefined) {\n        source = cmd.getOptionValueSource(key);\n      }\n    });\n    return source;\n  }\n\n  /**\n   * Get user arguments from implied or explicit arguments.\n   * Side-effects: set _scriptPath if args included script. Used for default program name, and subcommand searches.\n   *\n   * @api private\n   */\n\n  _prepareUserArgs(argv, parseOptions) {\n    if (argv !== undefined && !Array.isArray(argv)) {\n      throw new Error('first parameter to parse must be array or undefined');\n    }\n    parseOptions = parseOptions || {};\n\n    // Default to using process.argv\n    if (argv === undefined) {\n      argv = process.argv;\n      // @ts-ignore: unknown property\n      if (process.versions && process.versions.electron) {\n        parseOptions.from = 'electron';\n      }\n    }\n    this.rawArgs = argv.slice();\n\n    // make it a little easier for callers by supporting various argv conventions\n    let userArgs;\n    switch (parseOptions.from) {\n      case undefined:\n      case 'node':\n        this._scriptPath = argv[1];\n        userArgs = argv.slice(2);\n        break;\n      case 'electron':\n        // @ts-ignore: unknown property\n        if (process.defaultApp) {\n          this._scriptPath = argv[1];\n          userArgs = argv.slice(2);\n        } else {\n          userArgs = argv.slice(1);\n        }\n        break;\n      case 'user':\n        userArgs = argv.slice(0);\n        break;\n      default:\n        throw new Error(`unexpected parse option { from: '${parseOptions.from}' }`);\n    }\n\n    // Find default name for program from arguments.\n    if (!this._name && this._scriptPath) this.nameFromFilename(this._scriptPath);\n    this._name = this._name || 'program';\n\n    return userArgs;\n  }\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * The default expectation is that the arguments are from node and have the application as argv[0]\n   * and the script being run in argv[1], with user parameters after that.\n   *\n   * @example\n   * program.parse(process.argv);\n   * program.parse(); // implicitly use process.argv and auto-detect node vs electron conventions\n   * program.parse(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv] - optional, defaults to process.argv\n   * @param {Object} [parseOptions] - optionally specify style of options with from: node/user/electron\n   * @param {string} [parseOptions.from] - where the args are from: 'node', 'user', 'electron'\n   * @return {Command} `this` command for chaining\n   */\n\n  parse(argv, parseOptions) {\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    this._parseCommand([], userArgs);\n\n    return this;\n  }\n\n  /**\n   * Parse `argv`, setting options and invoking commands when defined.\n   *\n   * Use parseAsync instead of parse if any of your action handlers are async. Returns a Promise.\n   *\n   * The default expectation is that the arguments are from node and have the application as argv[0]\n   * and the script being run in argv[1], with user parameters after that.\n   *\n   * @example\n   * await program.parseAsync(process.argv);\n   * await program.parseAsync(); // implicitly use process.argv and auto-detect node vs electron conventions\n   * await program.parseAsync(my-args, { from: 'user' }); // just user supplied arguments, nothing special about argv[0]\n   *\n   * @param {string[]} [argv]\n   * @param {Object} [parseOptions]\n   * @param {string} parseOptions.from - where the args are from: 'node', 'user', 'electron'\n   * @return {Promise}\n   */\n\n  async parseAsync(argv, parseOptions) {\n    const userArgs = this._prepareUserArgs(argv, parseOptions);\n    await this._parseCommand([], userArgs);\n\n    return this;\n  }\n\n  /**\n   * Execute a sub-command executable.\n   *\n   * @api private\n   */\n\n  _executeSubCommand(subcommand, args) {\n    args = args.slice();\n    let launchWithNode = false; // Use node for source targets so do not need to get permissions correct, and on Windows.\n    const sourceExt = ['.js', '.ts', '.tsx', '.mjs', '.cjs'];\n\n    function findFile(baseDir, baseName) {\n      // Look for specified file\n      const localBin = path.resolve(baseDir, baseName);\n      if (fs.existsSync(localBin)) return localBin;\n\n      // Stop looking if candidate already has an expected extension.\n      if (sourceExt.includes(path.extname(baseName))) return undefined;\n\n      // Try all the extensions.\n      const foundExt = sourceExt.find(ext => fs.existsSync(`${localBin}${ext}`));\n      if (foundExt) return `${localBin}${foundExt}`;\n\n      return undefined;\n    }\n\n    // Not checking for help first. Unlikely to have mandatory and executable, and can't robustly test for help flags in external command.\n    this._checkForMissingMandatoryOptions();\n    this._checkForConflictingOptions();\n\n    // executableFile and executableDir might be full path, or just a name\n    let executableFile = subcommand._executableFile || `${this._name}-${subcommand._name}`;\n    let executableDir = this._executableDir || '';\n    if (this._scriptPath) {\n      let resolvedScriptPath; // resolve possible symlink for installed npm binary\n      try {\n        resolvedScriptPath = fs.realpathSync(this._scriptPath);\n      } catch (err) {\n        resolvedScriptPath = this._scriptPath;\n      }\n      executableDir = path.resolve(path.dirname(resolvedScriptPath), executableDir);\n    }\n\n    // Look for a local file in preference to a command in PATH.\n    if (executableDir) {\n      let localFile = findFile(executableDir, executableFile);\n\n      // Legacy search using prefix of script name instead of command name\n      if (!localFile && !subcommand._executableFile && this._scriptPath) {\n        const legacyName = path.basename(this._scriptPath, path.extname(this._scriptPath));\n        if (legacyName !== this._name) {\n          localFile = findFile(executableDir, `${legacyName}-${subcommand._name}`);\n        }\n      }\n      executableFile = localFile || executableFile;\n    }\n\n    launchWithNode = sourceExt.includes(path.extname(executableFile));\n\n    let proc;\n    if (process.platform !== 'win32') {\n      if (launchWithNode) {\n        args.unshift(executableFile);\n        // add executable arguments to spawn\n        args = incrementNodeInspectorPort(process.execArgv).concat(args);\n\n        proc = childProcess.spawn(process.argv[0], args, { stdio: 'inherit' });\n      } else {\n        proc = childProcess.spawn(executableFile, args, { stdio: 'inherit' });\n      }\n    } else {\n      args.unshift(executableFile);\n      // add executable arguments to spawn\n      args = incrementNodeInspectorPort(process.execArgv).concat(args);\n      proc = childProcess.spawn(process.execPath, args, { stdio: 'inherit' });\n    }\n\n    if (!proc.killed) { // testing mainly to avoid leak warnings during unit tests with mocked spawn\n      const signals = ['SIGUSR1', 'SIGUSR2', 'SIGTERM', 'SIGINT', 'SIGHUP'];\n      signals.forEach((signal) => {\n        // @ts-ignore\n        process.on(signal, () => {\n          if (proc.killed === false && proc.exitCode === null) {\n            proc.kill(signal);\n          }\n        });\n      });\n    }\n\n    // By default terminate process when spawned process terminates.\n    // Suppressing the exit if exitCallback defined is a bit messy and of limited use, but does allow process to stay running!\n    const exitCallback = this._exitCallback;\n    if (!exitCallback) {\n      proc.on('close', process.exit.bind(process));\n    } else {\n      proc.on('close', () => {\n        exitCallback(new CommanderError(process.exitCode || 0, 'commander.executeSubCommandAsync', '(close)'));\n      });\n    }\n    proc.on('error', (err) => {\n      // @ts-ignore\n      if (err.code === 'ENOENT') {\n        const executableDirMessage = executableDir\n          ? `searched for local subcommand relative to directory '${executableDir}'`\n          : 'no directory for search for local subcommand, use .executableDir() to supply a custom directory';\n        const executableMissing = `'${executableFile}' does not exist\n - if '${subcommand._name}' is not meant to be an executable command, remove description parameter from '.command()' and use '.description()' instead\n - if the default executable name is not suitable, use the executableFile option to supply a custom name or path\n - ${executableDirMessage}`;\n        throw new Error(executableMissing);\n      // @ts-ignore\n      } else if (err.code === 'EACCES') {\n        throw new Error(`'${executableFile}' not executable`);\n      }\n      if (!exitCallback) {\n        process.exit(1);\n      } else {\n        const wrappedError = new CommanderError(1, 'commander.executeSubCommandAsync', '(error)');\n        wrappedError.nestedError = err;\n        exitCallback(wrappedError);\n      }\n    });\n\n    // Store the reference to the child process\n    this.runningCommand = proc;\n  }\n\n  /**\n   * @api private\n   */\n\n  _dispatchSubcommand(commandName, operands, unknown) {\n    const subCommand = this._findCommand(commandName);\n    if (!subCommand) this.help({ error: true });\n\n    let hookResult;\n    hookResult = this._chainOrCallSubCommandHook(hookResult, subCommand, 'preSubcommand');\n    hookResult = this._chainOrCall(hookResult, () => {\n      if (subCommand._executableHandler) {\n        this._executeSubCommand(subCommand, operands.concat(unknown));\n      } else {\n        return subCommand._parseCommand(operands, unknown);\n      }\n    });\n    return hookResult;\n  }\n\n  /**\n   * Check this.args against expected this._args.\n   *\n   * @api private\n   */\n\n  _checkNumberOfArguments() {\n    // too few\n    this._args.forEach((arg, i) => {\n      if (arg.required && this.args[i] == null) {\n        this.missingArgument(arg.name());\n      }\n    });\n    // too many\n    if (this._args.length > 0 && this._args[this._args.length - 1].variadic) {\n      return;\n    }\n    if (this.args.length > this._args.length) {\n      this._excessArguments(this.args);\n    }\n  }\n\n  /**\n   * Process this.args using this._args and save as this.processedArgs!\n   *\n   * @api private\n   */\n\n  _processArguments() {\n    const myParseArg = (argument, value, previous) => {\n      // Extra processing for nice error message on parsing failure.\n      let parsedValue = value;\n      if (value !== null && argument.parseArg) {\n        try {\n          parsedValue = argument.parseArg(value, previous);\n        } catch (err) {\n          if (err.code === 'commander.invalidArgument') {\n            const message = `error: command-argument value '${value}' is invalid for argument '${argument.name()}'. ${err.message}`;\n            this.error(message, { exitCode: err.exitCode, code: err.code });\n          }\n          throw err;\n        }\n      }\n      return parsedValue;\n    };\n\n    this._checkNumberOfArguments();\n\n    const processedArgs = [];\n    this._args.forEach((declaredArg, index) => {\n      let value = declaredArg.defaultValue;\n      if (declaredArg.variadic) {\n        // Collect together remaining arguments for passing together as an array.\n        if (index < this.args.length) {\n          value = this.args.slice(index);\n          if (declaredArg.parseArg) {\n            value = value.reduce((processed, v) => {\n              return myParseArg(declaredArg, v, processed);\n            }, declaredArg.defaultValue);\n          }\n        } else if (value === undefined) {\n          value = [];\n        }\n      } else if (index < this.args.length) {\n        value = this.args[index];\n        if (declaredArg.parseArg) {\n          value = myParseArg(declaredArg, value, declaredArg.defaultValue);\n        }\n      }\n      processedArgs[index] = value;\n    });\n    this.processedArgs = processedArgs;\n  }\n\n  /**\n   * Once we have a promise we chain, but call synchronously until then.\n   *\n   * @param {Promise|undefined} promise\n   * @param {Function} fn\n   * @return {Promise|undefined}\n   * @api private\n   */\n\n  _chainOrCall(promise, fn) {\n    // thenable\n    if (promise && promise.then && typeof promise.then === 'function') {\n      // already have a promise, chain callback\n      return promise.then(() => fn());\n    }\n    // callback might return a promise\n    return fn();\n  }\n\n  /**\n   *\n   * @param {Promise|undefined} promise\n   * @param {string} event\n   * @return {Promise|undefined}\n   * @api private\n   */\n\n  _chainOrCallHooks(promise, event) {\n    let result = promise;\n    const hooks = [];\n    getCommandAndParents(this)\n      .reverse()\n      .filter(cmd => cmd._lifeCycleHooks[event] !== undefined)\n      .forEach(hookedCommand => {\n        hookedCommand._lifeCycleHooks[event].forEach((callback) => {\n          hooks.push({ hookedCommand, callback });\n        });\n      });\n    if (event === 'postAction') {\n      hooks.reverse();\n    }\n\n    hooks.forEach((hookDetail) => {\n      result = this._chainOrCall(result, () => {\n        return hookDetail.callback(hookDetail.hookedCommand, this);\n      });\n    });\n    return result;\n  }\n\n  /**\n   *\n   * @param {Promise|undefined} promise\n   * @param {Command} subCommand\n   * @param {string} event\n   * @return {Promise|undefined}\n   * @api private\n   */\n\n  _chainOrCallSubCommandHook(promise, subCommand, event) {\n    let result = promise;\n    if (this._lifeCycleHooks[event] !== undefined) {\n      this._lifeCycleHooks[event].forEach((hook) => {\n        result = this._chainOrCall(result, () => {\n          return hook(this, subCommand);\n        });\n      });\n    }\n    return result;\n  }\n\n  /**\n   * Process arguments in context of this command.\n   * Returns action result, in case it is a promise.\n   *\n   * @api private\n   */\n\n  _parseCommand(operands, unknown) {\n    const parsed = this.parseOptions(unknown);\n    this._parseOptionsEnv(); // after cli, so parseArg not called on both cli and env\n    this._parseOptionsImplied();\n    operands = operands.concat(parsed.operands);\n    unknown = parsed.unknown;\n    this.args = operands.concat(unknown);\n\n    if (operands && this._findCommand(operands[0])) {\n      return this._dispatchSubcommand(operands[0], operands.slice(1), unknown);\n    }\n    if (this._hasImplicitHelpCommand() && operands[0] === this._helpCommandName) {\n      if (operands.length === 1) {\n        this.help();\n      }\n      return this._dispatchSubcommand(operands[1], [], [this._helpLongFlag]);\n    }\n    if (this._defaultCommandName) {\n      outputHelpIfRequested(this, unknown); // Run the help for default command from parent rather than passing to default command\n      return this._dispatchSubcommand(this._defaultCommandName, operands, unknown);\n    }\n    if (this.commands.length && this.args.length === 0 && !this._actionHandler && !this._defaultCommandName) {\n      // probably missing subcommand and no handler, user needs help (and exit)\n      this.help({ error: true });\n    }\n\n    outputHelpIfRequested(this, parsed.unknown);\n    this._checkForMissingMandatoryOptions();\n    this._checkForConflictingOptions();\n\n    // We do not always call this check to avoid masking a \"better\" error, like unknown command.\n    const checkForUnknownOptions = () => {\n      if (parsed.unknown.length > 0) {\n        this.unknownOption(parsed.unknown[0]);\n      }\n    };\n\n    const commandEvent = `command:${this.name()}`;\n    if (this._actionHandler) {\n      checkForUnknownOptions();\n      this._processArguments();\n\n      let actionResult;\n      actionResult = this._chainOrCallHooks(actionResult, 'preAction');\n      actionResult = this._chainOrCall(actionResult, () => this._actionHandler(this.processedArgs));\n      if (this.parent) {\n        actionResult = this._chainOrCall(actionResult, () => {\n          this.parent.emit(commandEvent, operands, unknown); // legacy\n        });\n      }\n      actionResult = this._chainOrCallHooks(actionResult, 'postAction');\n      return actionResult;\n    }\n    if (this.parent && this.parent.listenerCount(commandEvent)) {\n      checkForUnknownOptions();\n      this._processArguments();\n      this.parent.emit(commandEvent, operands, unknown); // legacy\n    } else if (operands.length) {\n      if (this._findCommand('*')) { // legacy default command\n        return this._dispatchSubcommand('*', operands, unknown);\n      }\n      if (this.listenerCount('command:*')) {\n        // skip option check, emit event for possible misspelling suggestion\n        this.emit('command:*', operands, unknown);\n      } else if (this.commands.length) {\n        this.unknownCommand();\n      } else {\n        checkForUnknownOptions();\n        this._processArguments();\n      }\n    } else if (this.commands.length) {\n      checkForUnknownOptions();\n      // This command has subcommands and nothing hooked up at this level, so display help (and exit).\n      this.help({ error: true });\n    } else {\n      checkForUnknownOptions();\n      this._processArguments();\n      // fall through for caller to handle after calling .parse()\n    }\n  }\n\n  /**\n   * Find matching command.\n   *\n   * @api private\n   */\n  _findCommand(name) {\n    if (!name) return undefined;\n    return this.commands.find(cmd => cmd._name === name || cmd._aliases.includes(name));\n  }\n\n  /**\n   * Return an option matching `arg` if any.\n   *\n   * @param {string} arg\n   * @return {Option}\n   * @api private\n   */\n\n  _findOption(arg) {\n    return this.options.find(option => option.is(arg));\n  }\n\n  /**\n   * Display an error message if a mandatory option does not have a value.\n   * Called after checking for help flags in leaf subcommand.\n   *\n   * @api private\n   */\n\n  _checkForMissingMandatoryOptions() {\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\n    for (let cmd = this; cmd; cmd = cmd.parent) {\n      cmd.options.forEach((anOption) => {\n        if (anOption.mandatory && (cmd.getOptionValue(anOption.attributeName()) === undefined)) {\n          cmd.missingMandatoryOptionValue(anOption);\n        }\n      });\n    }\n  }\n\n  /**\n   * Display an error message if conflicting options are used together in this.\n   *\n   * @api private\n   */\n  _checkForConflictingLocalOptions() {\n    const definedNonDefaultOptions = this.options.filter(\n      (option) => {\n        const optionKey = option.attributeName();\n        if (this.getOptionValue(optionKey) === undefined) {\n          return false;\n        }\n        return this.getOptionValueSource(optionKey) !== 'default';\n      }\n    );\n\n    const optionsWithConflicting = definedNonDefaultOptions.filter(\n      (option) => option.conflictsWith.length > 0\n    );\n\n    optionsWithConflicting.forEach((option) => {\n      const conflictingAndDefined = definedNonDefaultOptions.find((defined) =>\n        option.conflictsWith.includes(defined.attributeName())\n      );\n      if (conflictingAndDefined) {\n        this._conflictingOption(option, conflictingAndDefined);\n      }\n    });\n  }\n\n  /**\n   * Display an error message if conflicting options are used together.\n   * Called after checking for help flags in leaf subcommand.\n   *\n   * @api private\n   */\n  _checkForConflictingOptions() {\n    // Walk up hierarchy so can call in subcommand after checking for displaying help.\n    for (let cmd = this; cmd; cmd = cmd.parent) {\n      cmd._checkForConflictingLocalOptions();\n    }\n  }\n\n  /**\n   * Parse options from `argv` removing known options,\n   * and return argv split into operands and unknown arguments.\n   *\n   * Examples:\n   *\n   *     argv => operands, unknown\n   *     --known kkk op => [op], []\n   *     op --known kkk => [op], []\n   *     sub --unknown uuu op => [sub], [--unknown uuu op]\n   *     sub -- --unknown uuu op => [sub --unknown uuu op], []\n   *\n   * @param {String[]} argv\n   * @return {{operands: String[], unknown: String[]}}\n   */\n\n  parseOptions(argv) {\n    const operands = []; // operands, not options or values\n    const unknown = []; // first unknown option and remaining unknown args\n    let dest = operands;\n    const args = argv.slice();\n\n    function maybeOption(arg) {\n      return arg.length > 1 && arg[0] === '-';\n    }\n\n    // parse options\n    let activeVariadicOption = null;\n    while (args.length) {\n      const arg = args.shift();\n\n      // literal\n      if (arg === '--') {\n        if (dest === unknown) dest.push(arg);\n        dest.push(...args);\n        break;\n      }\n\n      if (activeVariadicOption && !maybeOption(arg)) {\n        this.emit(`option:${activeVariadicOption.name()}`, arg);\n        continue;\n      }\n      activeVariadicOption = null;\n\n      if (maybeOption(arg)) {\n        const option = this._findOption(arg);\n        // recognised option, call listener to assign value with possible custom processing\n        if (option) {\n          if (option.required) {\n            const value = args.shift();\n            if (value === undefined) this.optionMissingArgument(option);\n            this.emit(`option:${option.name()}`, value);\n          } else if (option.optional) {\n            let value = null;\n            // historical behaviour is optional value is following arg unless an option\n            if (args.length > 0 && !maybeOption(args[0])) {\n              value = args.shift();\n            }\n            this.emit(`option:${option.name()}`, value);\n          } else { // boolean flag\n            this.emit(`option:${option.name()}`);\n          }\n          activeVariadicOption = option.variadic ? option : null;\n          continue;\n        }\n      }\n\n      // Look for combo options following single dash, eat first one if known.\n      if (arg.length > 2 && arg[0] === '-' && arg[1] !== '-') {\n        const option = this._findOption(`-${arg[1]}`);\n        if (option) {\n          if (option.required || (option.optional && this._combineFlagAndOptionalValue)) {\n            // option with value following in same argument\n            this.emit(`option:${option.name()}`, arg.slice(2));\n          } else {\n            // boolean option, emit and put back remainder of arg for further processing\n            this.emit(`option:${option.name()}`);\n            args.unshift(`-${arg.slice(2)}`);\n          }\n          continue;\n        }\n      }\n\n      // Look for known long flag with value, like --foo=bar\n      if (/^--[^=]+=/.test(arg)) {\n        const index = arg.indexOf('=');\n        const option = this._findOption(arg.slice(0, index));\n        if (option && (option.required || option.optional)) {\n          this.emit(`option:${option.name()}`, arg.slice(index + 1));\n          continue;\n        }\n      }\n\n      // Not a recognised option by this command.\n      // Might be a command-argument, or subcommand option, or unknown option, or help command or option.\n\n      // An unknown option means further arguments also classified as unknown so can be reprocessed by subcommands.\n      if (maybeOption(arg)) {\n        dest = unknown;\n      }\n\n      // If using positionalOptions, stop processing our options at subcommand.\n      if ((this._enablePositionalOptions || this._passThroughOptions) && operands.length === 0 && unknown.length === 0) {\n        if (this._findCommand(arg)) {\n          operands.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        } else if (arg === this._helpCommandName && this._hasImplicitHelpCommand()) {\n          operands.push(arg);\n          if (args.length > 0) operands.push(...args);\n          break;\n        } else if (this._defaultCommandName) {\n          unknown.push(arg);\n          if (args.length > 0) unknown.push(...args);\n          break;\n        }\n      }\n\n      // If using passThroughOptions, stop processing options at first command-argument.\n      if (this._passThroughOptions) {\n        dest.push(arg);\n        if (args.length > 0) dest.push(...args);\n        break;\n      }\n\n      // add arg\n      dest.push(arg);\n    }\n\n    return { operands, unknown };\n  }\n\n  /**\n   * Return an object containing local option values as key-value pairs.\n   *\n   * @return {Object}\n   */\n  opts() {\n    if (this._storeOptionsAsProperties) {\n      // Preserve original behaviour so backwards compatible when still using properties\n      const result = {};\n      const len = this.options.length;\n\n      for (let i = 0; i < len; i++) {\n        const key = this.options[i].attributeName();\n        result[key] = key === this._versionOptionName ? this._version : this[key];\n      }\n      return result;\n    }\n\n    return this._optionValues;\n  }\n\n  /**\n   * Return an object containing merged local and global option values as key-value pairs.\n   *\n   * @return {Object}\n   */\n  optsWithGlobals() {\n    // globals overwrite locals\n    return getCommandAndParents(this).reduce(\n      (combinedOptions, cmd) => Object.assign(combinedOptions, cmd.opts()),\n      {}\n    );\n  }\n\n  /**\n   * Display error message and exit (or call exitOverride).\n   *\n   * @param {string} message\n   * @param {Object} [errorOptions]\n   * @param {string} [errorOptions.code] - an id string representing the error\n   * @param {number} [errorOptions.exitCode] - used with process.exit\n   */\n  error(message, errorOptions) {\n    // output handling\n    this._outputConfiguration.outputError(`${message}\\n`, this._outputConfiguration.writeErr);\n    if (typeof this._showHelpAfterError === 'string') {\n      this._outputConfiguration.writeErr(`${this._showHelpAfterError}\\n`);\n    } else if (this._showHelpAfterError) {\n      this._outputConfiguration.writeErr('\\n');\n      this.outputHelp({ error: true });\n    }\n\n    // exit handling\n    const config = errorOptions || {};\n    const exitCode = config.exitCode || 1;\n    const code = config.code || 'commander.error';\n    this._exit(exitCode, code, message);\n  }\n\n  /**\n   * Apply any option related environment variables, if option does\n   * not have a value from cli or client code.\n   *\n   * @api private\n   */\n  _parseOptionsEnv() {\n    this.options.forEach((option) => {\n      if (option.envVar && option.envVar in process.env) {\n        const optionKey = option.attributeName();\n        // Priority check. Do not overwrite cli or options from unknown source (client-code).\n        if (this.getOptionValue(optionKey) === undefined || ['default', 'config', 'env'].includes(this.getOptionValueSource(optionKey))) {\n          if (option.required || option.optional) { // option can take a value\n            // keep very simple, optional always takes value\n            this.emit(`optionEnv:${option.name()}`, process.env[option.envVar]);\n          } else { // boolean\n            // keep very simple, only care that envVar defined and not the value\n            this.emit(`optionEnv:${option.name()}`);\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Apply any implied option values, if option is undefined or default value.\n   *\n   * @api private\n   */\n  _parseOptionsImplied() {\n    const dualHelper = new DualOptions(this.options);\n    const hasCustomOptionValue = (optionKey) => {\n      return this.getOptionValue(optionKey) !== undefined && !['default', 'implied'].includes(this.getOptionValueSource(optionKey));\n    };\n    this.options\n      .filter(option => (option.implied !== undefined) &&\n        hasCustomOptionValue(option.attributeName()) &&\n        dualHelper.valueFromOption(this.getOptionValue(option.attributeName()), option))\n      .forEach((option) => {\n        Object.keys(option.implied)\n          .filter(impliedKey => !hasCustomOptionValue(impliedKey))\n          .forEach(impliedKey => {\n            this.setOptionValueWithSource(impliedKey, option.implied[impliedKey], 'implied');\n          });\n      });\n  }\n\n  /**\n   * Argument `name` is missing.\n   *\n   * @param {string} name\n   * @api private\n   */\n\n  missingArgument(name) {\n    const message = `error: missing required argument '${name}'`;\n    this.error(message, { code: 'commander.missingArgument' });\n  }\n\n  /**\n   * `Option` is missing an argument.\n   *\n   * @param {Option} option\n   * @api private\n   */\n\n  optionMissingArgument(option) {\n    const message = `error: option '${option.flags}' argument missing`;\n    this.error(message, { code: 'commander.optionMissingArgument' });\n  }\n\n  /**\n   * `Option` does not have a value, and is a mandatory option.\n   *\n   * @param {Option} option\n   * @api private\n   */\n\n  missingMandatoryOptionValue(option) {\n    const message = `error: required option '${option.flags}' not specified`;\n    this.error(message, { code: 'commander.missingMandatoryOptionValue' });\n  }\n\n  /**\n   * `Option` conflicts with another option.\n   *\n   * @param {Option} option\n   * @param {Option} conflictingOption\n   * @api private\n   */\n  _conflictingOption(option, conflictingOption) {\n    // The calling code does not know whether a negated option is the source of the\n    // value, so do some work to take an educated guess.\n    const findBestOptionFromValue = (option) => {\n      const optionKey = option.attributeName();\n      const optionValue = this.getOptionValue(optionKey);\n      const negativeOption = this.options.find(target => target.negate && optionKey === target.attributeName());\n      const positiveOption = this.options.find(target => !target.negate && optionKey === target.attributeName());\n      if (negativeOption && (\n        (negativeOption.presetArg === undefined && optionValue === false) ||\n        (negativeOption.presetArg !== undefined && optionValue === negativeOption.presetArg)\n      )) {\n        return negativeOption;\n      }\n      return positiveOption || option;\n    };\n\n    const getErrorMessage = (option) => {\n      const bestOption = findBestOptionFromValue(option);\n      const optionKey = bestOption.attributeName();\n      const source = this.getOptionValueSource(optionKey);\n      if (source === 'env') {\n        return `environment variable '${bestOption.envVar}'`;\n      }\n      return `option '${bestOption.flags}'`;\n    };\n\n    const message = `error: ${getErrorMessage(option)} cannot be used with ${getErrorMessage(conflictingOption)}`;\n    this.error(message, { code: 'commander.conflictingOption' });\n  }\n\n  /**\n   * Unknown option `flag`.\n   *\n   * @param {string} flag\n   * @api private\n   */\n\n  unknownOption(flag) {\n    if (this._allowUnknownOption) return;\n    let suggestion = '';\n\n    if (flag.startsWith('--') && this._showSuggestionAfterError) {\n      // Looping to pick up the global options too\n      let candidateFlags = [];\n      let command = this;\n      do {\n        const moreFlags = command.createHelp().visibleOptions(command)\n          .filter(option => option.long)\n          .map(option => option.long);\n        candidateFlags = candidateFlags.concat(moreFlags);\n        command = command.parent;\n      } while (command && !command._enablePositionalOptions);\n      suggestion = suggestSimilar(flag, candidateFlags);\n    }\n\n    const message = `error: unknown option '${flag}'${suggestion}`;\n    this.error(message, { code: 'commander.unknownOption' });\n  }\n\n  /**\n   * Excess arguments, more than expected.\n   *\n   * @param {string[]} receivedArgs\n   * @api private\n   */\n\n  _excessArguments(receivedArgs) {\n    if (this._allowExcessArguments) return;\n\n    const expected = this._args.length;\n    const s = (expected === 1) ? '' : 's';\n    const forSubcommand = this.parent ? ` for '${this.name()}'` : '';\n    const message = `error: too many arguments${forSubcommand}. Expected ${expected} argument${s} but got ${receivedArgs.length}.`;\n    this.error(message, { code: 'commander.excessArguments' });\n  }\n\n  /**\n   * Unknown command.\n   *\n   * @api private\n   */\n\n  unknownCommand() {\n    const unknownName = this.args[0];\n    let suggestion = '';\n\n    if (this._showSuggestionAfterError) {\n      const candidateNames = [];\n      this.createHelp().visibleCommands(this).forEach((command) => {\n        candidateNames.push(command.name());\n        // just visible alias\n        if (command.alias()) candidateNames.push(command.alias());\n      });\n      suggestion = suggestSimilar(unknownName, candidateNames);\n    }\n\n    const message = `error: unknown command '${unknownName}'${suggestion}`;\n    this.error(message, { code: 'commander.unknownCommand' });\n  }\n\n  /**\n   * Set the program version to `str`.\n   *\n   * This method auto-registers the \"-V, --version\" flag\n   * which will print the version number when passed.\n   *\n   * You can optionally supply the  flags and description to override the defaults.\n   *\n   * @param {string} str\n   * @param {string} [flags]\n   * @param {string} [description]\n   * @return {this | string} `this` command for chaining, or version string if no arguments\n   */\n\n  version(str, flags, description) {\n    if (str === undefined) return this._version;\n    this._version = str;\n    flags = flags || '-V, --version';\n    description = description || 'output the version number';\n    const versionOption = this.createOption(flags, description);\n    this._versionOptionName = versionOption.attributeName();\n    this.options.push(versionOption);\n    this.on('option:' + versionOption.name(), () => {\n      this._outputConfiguration.writeOut(`${str}\\n`);\n      this._exit(0, 'commander.version', str);\n    });\n    return this;\n  }\n\n  /**\n   * Set the description.\n   *\n   * @param {string} [str]\n   * @param {Object} [argsDescription]\n   * @return {string|Command}\n   */\n  description(str, argsDescription) {\n    if (str === undefined && argsDescription === undefined) return this._description;\n    this._description = str;\n    if (argsDescription) {\n      this._argsDescription = argsDescription;\n    }\n    return this;\n  }\n\n  /**\n   * Set the summary. Used when listed as subcommand of parent.\n   *\n   * @param {string} [str]\n   * @return {string|Command}\n   */\n  summary(str) {\n    if (str === undefined) return this._summary;\n    this._summary = str;\n    return this;\n  }\n\n  /**\n   * Set an alias for the command.\n   *\n   * You may call more than once to add multiple aliases. Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string} [alias]\n   * @return {string|Command}\n   */\n\n  alias(alias) {\n    if (alias === undefined) return this._aliases[0]; // just return first, for backwards compatibility\n\n    /** @type {Command} */\n    let command = this;\n    if (this.commands.length !== 0 && this.commands[this.commands.length - 1]._executableHandler) {\n      // assume adding alias for last added executable subcommand, rather than this\n      command = this.commands[this.commands.length - 1];\n    }\n\n    if (alias === command._name) throw new Error('Command alias can\\'t be the same as its name');\n\n    command._aliases.push(alias);\n    return this;\n  }\n\n  /**\n   * Set aliases for the command.\n   *\n   * Only the first alias is shown in the auto-generated help.\n   *\n   * @param {string[]} [aliases]\n   * @return {string[]|Command}\n   */\n\n  aliases(aliases) {\n    // Getter for the array of aliases is the main reason for having aliases() in addition to alias().\n    if (aliases === undefined) return this._aliases;\n\n    aliases.forEach((alias) => this.alias(alias));\n    return this;\n  }\n\n  /**\n   * Set / get the command usage `str`.\n   *\n   * @param {string} [str]\n   * @return {String|Command}\n   */\n\n  usage(str) {\n    if (str === undefined) {\n      if (this._usage) return this._usage;\n\n      const args = this._args.map((arg) => {\n        return humanReadableArgName(arg);\n      });\n      return [].concat(\n        (this.options.length || this._hasHelpOption ? '[options]' : []),\n        (this.commands.length ? '[command]' : []),\n        (this._args.length ? args : [])\n      ).join(' ');\n    }\n\n    this._usage = str;\n    return this;\n  }\n\n  /**\n   * Get or set the name of the command.\n   *\n   * @param {string} [str]\n   * @return {string|Command}\n   */\n\n  name(str) {\n    if (str === undefined) return this._name;\n    this._name = str;\n    return this;\n  }\n\n  /**\n   * Set the name of the command from script filename, such as process.argv[1],\n   * or require.main.filename, or __filename.\n   *\n   * (Used internally and public although not documented in README.)\n   *\n   * @example\n   * program.nameFromFilename(require.main.filename);\n   *\n   * @param {string} filename\n   * @return {Command}\n   */\n\n  nameFromFilename(filename) {\n    this._name = path.basename(filename, path.extname(filename));\n\n    return this;\n  }\n\n  /**\n   * Get or set the directory for searching for executable subcommands of this command.\n   *\n   * @example\n   * program.executableDir(__dirname);\n   * // or\n   * program.executableDir('subcommands');\n   *\n   * @param {string} [path]\n   * @return {string|Command}\n   */\n\n  executableDir(path) {\n    if (path === undefined) return this._executableDir;\n    this._executableDir = path;\n    return this;\n  }\n\n  /**\n   * Return program help documentation.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to wrap for stderr instead of stdout\n   * @return {string}\n   */\n\n  helpInformation(contextOptions) {\n    const helper = this.createHelp();\n    if (helper.helpWidth === undefined) {\n      helper.helpWidth = (contextOptions && contextOptions.error) ? this._outputConfiguration.getErrHelpWidth() : this._outputConfiguration.getOutHelpWidth();\n    }\n    return helper.formatHelp(this, helper);\n  }\n\n  /**\n   * @api private\n   */\n\n  _getHelpContext(contextOptions) {\n    contextOptions = contextOptions || {};\n    const context = { error: !!contextOptions.error };\n    let write;\n    if (context.error) {\n      write = (arg) => this._outputConfiguration.writeErr(arg);\n    } else {\n      write = (arg) => this._outputConfiguration.writeOut(arg);\n    }\n    context.write = contextOptions.write || write;\n    context.command = this;\n    return context;\n  }\n\n  /**\n   * Output help information for this command.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean } | Function} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  outputHelp(contextOptions) {\n    let deprecatedCallback;\n    if (typeof contextOptions === 'function') {\n      deprecatedCallback = contextOptions;\n      contextOptions = undefined;\n    }\n    const context = this._getHelpContext(contextOptions);\n\n    getCommandAndParents(this).reverse().forEach(command => command.emit('beforeAllHelp', context));\n    this.emit('beforeHelp', context);\n\n    let helpInformation = this.helpInformation(context);\n    if (deprecatedCallback) {\n      helpInformation = deprecatedCallback(helpInformation);\n      if (typeof helpInformation !== 'string' && !Buffer.isBuffer(helpInformation)) {\n        throw new Error('outputHelp callback must return a string or a Buffer');\n      }\n    }\n    context.write(helpInformation);\n\n    this.emit(this._helpLongFlag); // deprecated\n    this.emit('afterHelp', context);\n    getCommandAndParents(this).forEach(command => command.emit('afterAllHelp', context));\n  }\n\n  /**\n   * You can pass in flags and a description to override the help\n   * flags and help description for your command. Pass in false to\n   * disable the built-in help option.\n   *\n   * @param {string | boolean} [flags]\n   * @param {string} [description]\n   * @return {Command} `this` command for chaining\n   */\n\n  helpOption(flags, description) {\n    if (typeof flags === 'boolean') {\n      this._hasHelpOption = flags;\n      return this;\n    }\n    this._helpFlags = flags || this._helpFlags;\n    this._helpDescription = description || this._helpDescription;\n\n    const helpFlags = splitOptionFlags(this._helpFlags);\n    this._helpShortFlag = helpFlags.shortFlag;\n    this._helpLongFlag = helpFlags.longFlag;\n\n    return this;\n  }\n\n  /**\n   * Output help information and exit.\n   *\n   * Outputs built-in help, and custom text added using `.addHelpText()`.\n   *\n   * @param {{ error: boolean }} [contextOptions] - pass {error:true} to write to stderr instead of stdout\n   */\n\n  help(contextOptions) {\n    this.outputHelp(contextOptions);\n    let exitCode = process.exitCode || 0;\n    if (exitCode === 0 && contextOptions && typeof contextOptions !== 'function' && contextOptions.error) {\n      exitCode = 1;\n    }\n    // message: do not have all displayed text available so only passing placeholder.\n    this._exit(exitCode, 'commander.help', '(outputHelp)');\n  }\n\n  /**\n   * Add additional text to be displayed with the built-in help.\n   *\n   * Position is 'before' or 'after' to affect just this command,\n   * and 'beforeAll' or 'afterAll' to affect this command and all its subcommands.\n   *\n   * @param {string} position - before or after built-in help\n   * @param {string | Function} text - string to add, or a function returning a string\n   * @return {Command} `this` command for chaining\n   */\n  addHelpText(position, text) {\n    const allowedValues = ['beforeAll', 'before', 'after', 'afterAll'];\n    if (!allowedValues.includes(position)) {\n      throw new Error(`Unexpected value for position to addHelpText.\nExpecting one of '${allowedValues.join(\"', '\")}'`);\n    }\n    const helpEvent = `${position}Help`;\n    this.on(helpEvent, (context) => {\n      let helpStr;\n      if (typeof text === 'function') {\n        helpStr = text({ error: context.error, command: context.command });\n      } else {\n        helpStr = text;\n      }\n      // Ignore falsy value when nothing to output.\n      if (helpStr) {\n        context.write(`${helpStr}\\n`);\n      }\n    });\n    return this;\n  }\n}\n\n/**\n * Output help information if help flags specified\n *\n * @param {Command} cmd - command to output help for\n * @param {Array} args - array of options to search for help flags\n * @api private\n */\n\nfunction outputHelpIfRequested(cmd, args) {\n  const helpOption = cmd._hasHelpOption && args.find(arg => arg === cmd._helpLongFlag || arg === cmd._helpShortFlag);\n  if (helpOption) {\n    cmd.outputHelp();\n    // (Do not have all displayed text available so only passing placeholder.)\n    cmd._exit(0, 'commander.helpDisplayed', '(outputHelp)');\n  }\n}\n\n/**\n * Scan arguments and increment port number for inspect calls (to avoid conflicts when spawning new command).\n *\n * @param {string[]} args - array of arguments from node.execArgv\n * @returns {string[]}\n * @api private\n */\n\nfunction incrementNodeInspectorPort(args) {\n  // Testing for these options:\n  //  --inspect[=[host:]port]\n  //  --inspect-brk[=[host:]port]\n  //  --inspect-port=[host:]port\n  return args.map((arg) => {\n    if (!arg.startsWith('--inspect')) {\n      return arg;\n    }\n    let debugOption;\n    let debugHost = '127.0.0.1';\n    let debugPort = '9229';\n    let match;\n    if ((match = arg.match(/^(--inspect(-brk)?)$/)) !== null) {\n      // e.g. --inspect\n      debugOption = match[1];\n    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+)$/)) !== null) {\n      debugOption = match[1];\n      if (/^\\d+$/.test(match[3])) {\n        // e.g. --inspect=1234\n        debugPort = match[3];\n      } else {\n        // e.g. --inspect=localhost\n        debugHost = match[3];\n      }\n    } else if ((match = arg.match(/^(--inspect(-brk|-port)?)=([^:]+):(\\d+)$/)) !== null) {\n      // e.g. --inspect=localhost:1234\n      debugOption = match[1];\n      debugHost = match[3];\n      debugPort = match[4];\n    }\n\n    if (debugOption && debugPort !== '0') {\n      return `${debugOption}=${debugHost}:${parseInt(debugPort) + 1}`;\n    }\n    return arg;\n  });\n}\n\n/**\n * @param {Command} startCommand\n * @returns {Command[]}\n * @api private\n */\n\nfunction getCommandAndParents(startCommand) {\n  const result = [];\n  for (let command = startCommand; command; command = command.parent) {\n    result.push(command);\n  }\n  return result;\n}\n\nexports.Command = Command;\n"],"mappings":";;;;;;;;;;AAAA,IAAMA,YAAY,GAAGC,OAAO,CAAC,QAAQ,CAAC,CAACD,YAAY;AACnD,IAAME,YAAY,GAAGD,OAAO,CAAC,eAAe,CAAC;AAC7C,IAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAC5B,IAAMG,EAAE,GAAGH,OAAO,CAAC,IAAI,CAAC;AACxB,IAAMI,OAAO,GAAGJ,OAAO,CAAC,SAAS,CAAC;AAElC,IAAAK,QAAA,GAA2CL,OAAO,gBAAgB,CAAC;EAA3DM,QAAQ,GAAAD,QAAA,CAARC,QAAQ;EAAEC,oBAAoB,GAAAF,QAAA,CAApBE,oBAAoB;AACtC,IAAAC,SAAA,GAA2BR,OAAO,aAAa,CAAC;EAAxCS,cAAc,GAAAD,SAAA,CAAdC,cAAc;AACtB,IAAAC,SAAA,GAAiBV,OAAO,YAAY,CAAC;EAA7BW,IAAI,GAAAD,SAAA,CAAJC,IAAI;AACZ,IAAAC,SAAA,GAAkDZ,OAAO,cAAc,CAAC;EAAhEa,MAAM,GAAAD,SAAA,CAANC,MAAM;EAAEC,gBAAgB,GAAAF,SAAA,CAAhBE,gBAAgB;EAAEC,WAAW,GAAAH,SAAA,CAAXG,WAAW;AAC7C,IAAAC,SAAA,GAA2BhB,OAAO,mBAAmB,CAAC;EAA9CiB,cAAc,GAAAD,SAAA,CAAdC,cAAc;AAAiC,IAIjDC,OAAO,aAAAC,aAAA;EAAA;;EAAAC,SAAA,CAAAF,OAAA,EAAAC,aAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,OAAA;EAOX,SAAAA,QAAYK,IAAI,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAP,OAAA;IAChBM,KAAA,GAAAH,MAAA,CAAAK,IAAA;IAEAF,KAAA,CAAKG,QAAQ,GAAG,EAAE;IAElBH,KAAA,CAAKI,OAAO,GAAG,EAAE;IACjBJ,KAAA,CAAKK,MAAM,GAAG,IAAI;IAClBL,KAAA,CAAKM,mBAAmB,GAAG,KAAK;IAChCN,KAAA,CAAKO,qBAAqB,GAAG,IAAI;IAEjCP,KAAA,CAAKQ,KAAK,GAAG,EAAE;IAEfR,KAAA,CAAKS,IAAI,GAAG,EAAE;IACdT,KAAA,CAAKU,OAAO,GAAG,EAAE;IACjBV,KAAA,CAAKW,aAAa,GAAG,EAAE;IACvBX,KAAA,CAAKY,WAAW,GAAG,IAAI;IACvBZ,KAAA,CAAKa,KAAK,GAAGd,IAAI,IAAI,EAAE;IACvBC,KAAA,CAAKc,aAAa,GAAG,CAAC,CAAC;IACvBd,KAAA,CAAKe,mBAAmB,GAAG,CAAC,CAAC;IAC7Bf,KAAA,CAAKgB,yBAAyB,GAAG,KAAK;IACtChB,KAAA,CAAKiB,cAAc,GAAG,IAAI;IAC1BjB,KAAA,CAAKkB,kBAAkB,GAAG,KAAK;IAC/BlB,KAAA,CAAKmB,eAAe,GAAG,IAAI;IAC3BnB,KAAA,CAAKoB,cAAc,GAAG,IAAI;IAC1BpB,KAAA,CAAKqB,mBAAmB,GAAG,IAAI;IAC/BrB,KAAA,CAAKsB,aAAa,GAAG,IAAI;IACzBtB,KAAA,CAAKuB,QAAQ,GAAG,EAAE;IAClBvB,KAAA,CAAKwB,4BAA4B,GAAG,IAAI;IACxCxB,KAAA,CAAKyB,YAAY,GAAG,EAAE;IACtBzB,KAAA,CAAK0B,QAAQ,GAAG,EAAE;IAClB1B,KAAA,CAAK2B,gBAAgB,GAAGC,SAAS;IACjC5B,KAAA,CAAK6B,wBAAwB,GAAG,KAAK;IACrC7B,KAAA,CAAK8B,mBAAmB,GAAG,KAAK;IAChC9B,KAAA,CAAK+B,eAAe,GAAG,CAAC,CAAC;IAEzB/B,KAAA,CAAKgC,mBAAmB,GAAG,KAAK;IAChChC,KAAA,CAAKiC,yBAAyB,GAAG,IAAI;IAGrCjC,KAAA,CAAKkC,oBAAoB,GAAG;MAC1BC,QAAQ,EAAE,SAAAA,SAACC,GAAG;QAAA,OAAKxD,OAAO,CAACyD,MAAM,CAACC,KAAK,CAACF,GAAG,CAAC;MAAA;MAC5CG,QAAQ,EAAE,SAAAA,SAACH,GAAG;QAAA,OAAKxD,OAAO,CAAC4D,MAAM,CAACF,KAAK,CAACF,GAAG,CAAC;MAAA;MAC5CK,eAAe,EAAE,SAAAA,gBAAA;QAAA,OAAM7D,OAAO,CAACyD,MAAM,CAACK,KAAK,GAAG9D,OAAO,CAACyD,MAAM,CAACM,OAAO,GAAGf,SAAS;MAAA;MAChFgB,eAAe,EAAE,SAAAA,gBAAA;QAAA,OAAMhE,OAAO,CAAC4D,MAAM,CAACE,KAAK,GAAG9D,OAAO,CAAC4D,MAAM,CAACG,OAAO,GAAGf,SAAS;MAAA;MAChFiB,WAAW,EAAE,SAAAA,YAACT,GAAG,EAAEE,KAAK;QAAA,OAAKA,KAAK,CAACF,GAAG,CAAC;MAAA;IACzC,CAAC;IAEDpC,KAAA,CAAK8C,OAAO,GAAG,KAAK;IACpB9C,KAAA,CAAK+C,cAAc,GAAG,IAAI;IAC1B/C,KAAA,CAAKgD,UAAU,GAAG,YAAY;IAC9BhD,KAAA,CAAKiD,gBAAgB,GAAG,0BAA0B;IAClDjD,KAAA,CAAKkD,cAAc,GAAG,IAAI;IAC1BlD,KAAA,CAAKmD,aAAa,GAAG,QAAQ;IAC7BnD,KAAA,CAAKoD,uBAAuB,GAAGxB,SAAS;IACxC5B,KAAA,CAAKqD,gBAAgB,GAAG,MAAM;IAC9BrD,KAAA,CAAKsD,uBAAuB,GAAG,gBAAgB;IAC/CtD,KAAA,CAAKuD,uBAAuB,GAAG,0BAA0B;IACzDvD,KAAA,CAAKwD,kBAAkB,GAAG,CAAC,CAAC;IAAC,OAAAxD,KAAA;EAC/B;EAACyD,YAAA,CAAA/D,OAAA;IAAAgE,GAAA;IAAAC,KAAA,EAUD,SAAAC,sBAAsBC,aAAa,EAAE;MACnC,IAAI,CAAC3B,oBAAoB,GAAG2B,aAAa,CAAC3B,oBAAoB;MAC9D,IAAI,CAACa,cAAc,GAAGc,aAAa,CAACd,cAAc;MAClD,IAAI,CAACC,UAAU,GAAGa,aAAa,CAACb,UAAU;MAC1C,IAAI,CAACC,gBAAgB,GAAGY,aAAa,CAACZ,gBAAgB;MACtD,IAAI,CAACC,cAAc,GAAGW,aAAa,CAACX,cAAc;MAClD,IAAI,CAACC,aAAa,GAAGU,aAAa,CAACV,aAAa;MAChD,IAAI,CAACE,gBAAgB,GAAGQ,aAAa,CAACR,gBAAgB;MACtD,IAAI,CAACC,uBAAuB,GAAGO,aAAa,CAACP,uBAAuB;MACpE,IAAI,CAACC,uBAAuB,GAAGM,aAAa,CAACN,uBAAuB;MACpE,IAAI,CAACC,kBAAkB,GAAGK,aAAa,CAACL,kBAAkB;MAC1D,IAAI,CAAClC,aAAa,GAAGuC,aAAa,CAACvC,aAAa;MAChD,IAAI,CAACN,yBAAyB,GAAG6C,aAAa,CAAC7C,yBAAyB;MACxE,IAAI,CAACQ,4BAA4B,GAAGqC,aAAa,CAACrC,4BAA4B;MAC9E,IAAI,CAACjB,qBAAqB,GAAGsD,aAAa,CAACtD,qBAAqB;MAChE,IAAI,CAACsB,wBAAwB,GAAGgC,aAAa,CAAChC,wBAAwB;MACtE,IAAI,CAACG,mBAAmB,GAAG6B,aAAa,CAAC7B,mBAAmB;MAC5D,IAAI,CAACC,yBAAyB,GAAG4B,aAAa,CAAC5B,yBAAyB;MAExE,OAAO,IAAI;IACb;EAAC;IAAAyB,GAAA;IAAAC,KAAA,EA2BD,SAAAG,QAAQC,WAAW,EAAEC,oBAAoB,EAAEC,QAAQ,EAAE;MACnD,IAAIC,IAAI,GAAGF,oBAAoB;MAC/B,IAAIG,IAAI,GAAGF,QAAQ;MACnB,IAAI,OAAOC,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,IAAI,EAAE;QAC7CC,IAAI,GAAGD,IAAI;QACXA,IAAI,GAAG,IAAI;MACb;MACAC,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;MACjB,IAAAC,kBAAA,GAAuBL,WAAW,CAACM,KAAK,CAAC,eAAe,CAAC;QAAAC,mBAAA,GAAAC,cAAA,CAAAH,kBAAA;QAAhDrE,IAAI,GAAAuE,mBAAA;QAAE7D,IAAI,GAAA6D,mBAAA;MAEnB,IAAME,GAAG,GAAG,IAAI,CAACC,aAAa,CAAC1E,IAAI,CAAC;MACpC,IAAImE,IAAI,EAAE;QACRM,GAAG,CAACE,WAAW,CAACR,IAAI,CAAC;QACrBM,GAAG,CAACtD,kBAAkB,GAAG,IAAI;MAC/B;MACA,IAAIiD,IAAI,CAACQ,SAAS,EAAE,IAAI,CAACtD,mBAAmB,GAAGmD,GAAG,CAAC3D,KAAK;MACxD2D,GAAG,CAAC1B,OAAO,GAAG,CAAC,EAAEqB,IAAI,CAACS,MAAM,IAAIT,IAAI,CAACU,MAAM,CAAC;MAC5CL,GAAG,CAACrD,eAAe,GAAGgD,IAAI,CAACW,cAAc,IAAI,IAAI;MACjD,IAAIrE,IAAI,EAAE+D,GAAG,CAACO,SAAS,CAACtE,IAAI,CAAC;MAC7B,IAAI,CAACN,QAAQ,CAAC6E,IAAI,CAACR,GAAG,CAAC;MACvBA,GAAG,CAACnE,MAAM,GAAG,IAAI;MACjBmE,GAAG,CAACZ,qBAAqB,CAAC,IAAI,CAAC;MAE/B,IAAIM,IAAI,EAAE,OAAO,IAAI;MACrB,OAAOM,GAAG;IACZ;EAAC;IAAAd,GAAA;IAAAC,KAAA,EAYD,SAAAc,cAAc1E,IAAI,EAAE;MAClB,OAAO,IAAIL,OAAO,CAACK,IAAI,CAAC;IAC1B;EAAC;IAAA2D,GAAA;IAAAC,KAAA,EASD,SAAAsB,WAAA,EAAa;MACX,OAAOC,MAAM,CAACC,MAAM,CAAC,IAAIhG,IAAI,CAAC,CAAC,EAAE,IAAI,CAACiG,aAAa,CAAC,CAAC,CAAC;IACxD;EAAC;IAAA1B,GAAA;IAAAC,KAAA,EAUD,SAAAyB,cAAcC,aAAa,EAAE;MAC3B,IAAIA,aAAa,KAAKzD,SAAS,EAAE,OAAO,IAAI,CAAC4B,kBAAkB;MAE/D,IAAI,CAACA,kBAAkB,GAAG6B,aAAa;MACvC,OAAO,IAAI;IACb;EAAC;IAAA3B,GAAA;IAAAC,KAAA,EAqBD,SAAA2B,gBAAgBD,aAAa,EAAE;MAC7B,IAAIA,aAAa,KAAKzD,SAAS,EAAE,OAAO,IAAI,CAACM,oBAAoB;MAEjEgD,MAAM,CAACC,MAAM,CAAC,IAAI,CAACjD,oBAAoB,EAAEmD,aAAa,CAAC;MACvD,OAAO,IAAI;IACb;EAAC;IAAA3B,GAAA;IAAAC,KAAA,EAQD,SAAA4B,mBAAA,EAAuC;MAAA,IAApBC,WAAW,GAAAT,SAAA,CAAAU,MAAA,QAAAV,SAAA,QAAAnD,SAAA,GAAAmD,SAAA,MAAG,IAAI;MACnC,IAAI,OAAOS,WAAW,KAAK,QAAQ,EAAEA,WAAW,GAAG,CAAC,CAACA,WAAW;MAChE,IAAI,CAACxD,mBAAmB,GAAGwD,WAAW;MACtC,OAAO,IAAI;IACb;EAAC;IAAA9B,GAAA;IAAAC,KAAA,EAQD,SAAA+B,yBAAA,EAAmD;MAAA,IAA1BC,iBAAiB,GAAAZ,SAAA,CAAAU,MAAA,QAAAV,SAAA,QAAAnD,SAAA,GAAAmD,SAAA,MAAG,IAAI;MAC/C,IAAI,CAAC9C,yBAAyB,GAAG,CAAC,CAAC0D,iBAAiB;MACpD,OAAO,IAAI;IACb;EAAC;IAAAjC,GAAA;IAAAC,KAAA,EAYD,SAAAiC,WAAWpB,GAAG,EAAEL,IAAI,EAAE;MACpB,IAAI,CAACK,GAAG,CAAC3D,KAAK,EAAE;QACd,MAAM,IAAIgF,KAAK,CAAE;AACvB,2DAA2D,CAAC;MACxD;MAEA1B,IAAI,GAAGA,IAAI,IAAI,CAAC,CAAC;MACjB,IAAIA,IAAI,CAACQ,SAAS,EAAE,IAAI,CAACtD,mBAAmB,GAAGmD,GAAG,CAAC3D,KAAK;MACxD,IAAIsD,IAAI,CAACS,MAAM,IAAIT,IAAI,CAACU,MAAM,EAAEL,GAAG,CAAC1B,OAAO,GAAG,IAAI;MAElD,IAAI,CAAC3C,QAAQ,CAAC6E,IAAI,CAACR,GAAG,CAAC;MACvBA,GAAG,CAACnE,MAAM,GAAG,IAAI;MACjB,OAAO,IAAI;IACb;EAAC;IAAAqD,GAAA;IAAAC,KAAA,EAaD,SAAAmC,eAAe/F,IAAI,EAAE2E,WAAW,EAAE;MAChC,OAAO,IAAI5F,QAAQ,CAACiB,IAAI,EAAE2E,WAAW,CAAC;IACxC;EAAC;IAAAhB,GAAA;IAAAC,KAAA,EAkBD,SAAAoC,SAAShG,IAAI,EAAE2E,WAAW,EAAEsB,EAAE,EAAEC,YAAY,EAAE;MAC5C,IAAMF,QAAQ,GAAG,IAAI,CAACD,cAAc,CAAC/F,IAAI,EAAE2E,WAAW,CAAC;MACvD,IAAI,OAAOsB,EAAE,KAAK,UAAU,EAAE;QAC5BD,QAAQ,CAACG,OAAO,CAACD,YAAY,CAAC,CAACE,SAAS,CAACH,EAAE,CAAC;MAC9C,CAAC,MAAM;QACLD,QAAQ,CAACG,OAAO,CAACF,EAAE,CAAC;MACtB;MACA,IAAI,CAACI,WAAW,CAACL,QAAQ,CAAC;MAC1B,OAAO,IAAI;IACb;EAAC;IAAArC,GAAA;IAAAC,KAAA,EAcD,SAAA0C,WAAUC,KAAK,EAAE;MAAA,IAAAC,MAAA;MACfD,KAAK,CAACE,KAAK,CAAC,IAAI,CAAC,CAACC,OAAO,CAAC,UAACC,MAAM,EAAK;QACpCH,MAAI,CAACR,QAAQ,CAACW,MAAM,CAAC;MACvB,CAAC,CAAC;MACF,OAAO,IAAI;IACb;EAAC;IAAAhD,GAAA;IAAAC,KAAA,EAQD,SAAAyC,YAAYL,QAAQ,EAAE;MACpB,IAAMY,gBAAgB,GAAG,IAAI,CAACnG,KAAK,CAACoG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAChD,IAAID,gBAAgB,IAAIA,gBAAgB,CAACE,QAAQ,EAAE;QACjD,MAAM,IAAIhB,KAAK,CAAE,2CAA0Cc,gBAAgB,CAAC5G,IAAI,CAAC,CAAE,GAAE,CAAC;MACxF;MACA,IAAIgG,QAAQ,CAACe,QAAQ,IAAIf,QAAQ,CAACE,YAAY,KAAKrE,SAAS,IAAImE,QAAQ,CAACgB,QAAQ,KAAKnF,SAAS,EAAE;QAC/F,MAAM,IAAIiE,KAAK,CAAE,2DAA0DE,QAAQ,CAAChG,IAAI,CAAC,CAAE,GAAE,CAAC;MAChG;MACA,IAAI,CAACS,KAAK,CAACwE,IAAI,CAACe,QAAQ,CAAC;MACzB,OAAO,IAAI;IACb;EAAC;IAAArC,GAAA;IAAAC,KAAA,EAYD,SAAAqD,eAAeC,mBAAmB,EAAEvC,WAAW,EAAE;MAC/C,IAAIuC,mBAAmB,KAAK,KAAK,EAAE;QACjC,IAAI,CAAC7D,uBAAuB,GAAG,KAAK;MACtC,CAAC,MAAM;QACL,IAAI,CAACA,uBAAuB,GAAG,IAAI;QACnC,IAAI,OAAO6D,mBAAmB,KAAK,QAAQ,EAAE;UAC3C,IAAI,CAAC5D,gBAAgB,GAAG4D,mBAAmB,CAACT,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UACzD,IAAI,CAAClD,uBAAuB,GAAG2D,mBAAmB;QACpD;QACA,IAAI,CAAC1D,uBAAuB,GAAGmB,WAAW,IAAI,IAAI,CAACnB,uBAAuB;MAC5E;MACA,OAAO,IAAI;IACb;EAAC;IAAAG,GAAA;IAAAC,KAAA,EAOD,SAAAuD,wBAAA,EAA0B;MACxB,IAAI,IAAI,CAAC9D,uBAAuB,KAAKxB,SAAS,EAAE;QAC9C,OAAO,IAAI,CAACzB,QAAQ,CAACsF,MAAM,IAAI,CAAC,IAAI,CAACxE,cAAc,IAAI,CAAC,IAAI,CAACkG,YAAY,CAAC,MAAM,CAAC;MACnF;MACA,OAAO,IAAI,CAAC/D,uBAAuB;IACrC;EAAC;IAAAM,GAAA;IAAAC,KAAA,EAUD,SAAAyD,KAAKC,KAAK,EAAEC,QAAQ,EAAE;MACpB,IAAMC,aAAa,GAAG,CAAC,eAAe,EAAE,WAAW,EAAE,YAAY,CAAC;MAClE,IAAI,CAACA,aAAa,CAACC,QAAQ,CAACH,KAAK,CAAC,EAAE;QAClC,MAAM,IAAIxB,KAAK,CAAE,gDAA+CwB,KAAM;AAC5E,oBAAoBE,aAAa,CAACE,IAAI,CAAC,MAAM,CAAE,GAAE,CAAC;MAC9C;MACA,IAAI,IAAI,CAAC1F,eAAe,CAACsF,KAAK,CAAC,EAAE;QAC/B,IAAI,CAACtF,eAAe,CAACsF,KAAK,CAAC,CAACrC,IAAI,CAACsC,QAAQ,CAAC;MAC5C,CAAC,MAAM;QACL,IAAI,CAACvF,eAAe,CAACsF,KAAK,CAAC,GAAG,CAACC,QAAQ,CAAC;MAC1C;MACA,OAAO,IAAI;IACb;EAAC;IAAA5D,GAAA;IAAAC,KAAA,EASD,SAAA+D,aAAa1B,EAAE,EAAE;MACf,IAAIA,EAAE,EAAE;QACN,IAAI,CAAC1E,aAAa,GAAG0E,EAAE;MACzB,CAAC,MAAM;QACL,IAAI,CAAC1E,aAAa,GAAG,UAACqG,GAAG,EAAK;UAC5B,IAAIA,GAAG,CAACC,IAAI,KAAK,kCAAkC,EAAE;YACnD,MAAMD,GAAG;UACX,CAAC,MAAM,CAEP;QACF,CAAC;MACH;MACA,OAAO,IAAI;IACb;EAAC;IAAAjE,GAAA;IAAAC,KAAA,EAYD,SAAAkE,MAAMC,QAAQ,EAAEF,IAAI,EAAEG,OAAO,EAAE;MAC7B,IAAI,IAAI,CAACzG,aAAa,EAAE;QACtB,IAAI,CAACA,aAAa,CAAC,IAAIrC,cAAc,CAAC6I,QAAQ,EAAEF,IAAI,EAAEG,OAAO,CAAC,CAAC;MAEjE;MACAnJ,OAAO,CAACoJ,IAAI,CAACF,QAAQ,CAAC;IACxB;EAAC;IAAApE,GAAA;IAAAC,KAAA,EAiBD,SAAAsE,OAAOjC,EAAE,EAAE;MAAA,IAAAkC,MAAA;MACT,IAAMZ,QAAQ,GAAG,SAAXA,QAAQA,CAAI7G,IAAI,EAAK;QAEzB,IAAM0H,iBAAiB,GAAGD,MAAI,CAAC1H,KAAK,CAACiF,MAAM;QAC3C,IAAM2C,UAAU,GAAG3H,IAAI,CAACmG,KAAK,CAAC,CAAC,EAAEuB,iBAAiB,CAAC;QACnD,IAAID,MAAI,CAAClH,yBAAyB,EAAE;UAClCoH,UAAU,CAACD,iBAAiB,CAAC,GAAGD,MAAI;QACtC,CAAC,MAAM;UACLE,UAAU,CAACD,iBAAiB,CAAC,GAAGD,MAAI,CAAC/D,IAAI,CAAC,CAAC;QAC7C;QACAiE,UAAU,CAACpD,IAAI,CAACkD,MAAI,CAAC;QAErB,OAAOlC,EAAE,CAACqC,KAAK,CAACH,MAAI,EAAEE,UAAU,CAAC;MACnC,CAAC;MACD,IAAI,CAACnH,cAAc,GAAGqG,QAAQ;MAC9B,OAAO,IAAI;IACb;EAAC;IAAA5D,GAAA;IAAAC,KAAA,EAaD,SAAA2E,aAAaC,KAAK,EAAE7D,WAAW,EAAE;MAC/B,OAAO,IAAIrF,MAAM,CAACkJ,KAAK,EAAE7D,WAAW,CAAC;IACvC;EAAC;IAAAhB,GAAA;IAAAC,KAAA,EAQD,SAAA6E,UAAUC,MAAM,EAAE;MAAA,IAAAC,MAAA;MAChB,IAAMC,KAAK,GAAGF,MAAM,CAAC1I,IAAI,CAAC,CAAC;MAC3B,IAAMA,IAAI,GAAG0I,MAAM,CAACG,aAAa,CAAC,CAAC;MAGnC,IAAIH,MAAM,CAACI,MAAM,EAAE;QAEjB,IAAMC,gBAAgB,GAAGL,MAAM,CAACM,IAAI,CAACC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC;QAC5D,IAAI,CAAC,IAAI,CAACC,WAAW,CAACH,gBAAgB,CAAC,EAAE;UACvC,IAAI,CAACI,wBAAwB,CAACnJ,IAAI,EAAE0I,MAAM,CAACxC,YAAY,KAAKrE,SAAS,GAAG,IAAI,GAAG6G,MAAM,CAACxC,YAAY,EAAE,SAAS,CAAC;QAChH;MACF,CAAC,MAAM,IAAIwC,MAAM,CAACxC,YAAY,KAAKrE,SAAS,EAAE;QAC5C,IAAI,CAACsH,wBAAwB,CAACnJ,IAAI,EAAE0I,MAAM,CAACxC,YAAY,EAAE,SAAS,CAAC;MACrE;MAGA,IAAI,CAAC7F,OAAO,CAAC4E,IAAI,CAACyD,MAAM,CAAC;MAGzB,IAAMU,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIC,GAAG,EAAEC,mBAAmB,EAAEC,WAAW,EAAK;QAGnE,IAAIF,GAAG,IAAI,IAAI,IAAIX,MAAM,CAACc,SAAS,KAAK3H,SAAS,EAAE;UACjDwH,GAAG,GAAGX,MAAM,CAACc,SAAS;QACxB;QAGA,IAAMC,QAAQ,GAAGd,MAAI,CAACe,cAAc,CAAC1J,IAAI,CAAC;QAC1C,IAAIqJ,GAAG,KAAK,IAAI,IAAIX,MAAM,CAAC1B,QAAQ,EAAE;UACnC,IAAI;YACFqC,GAAG,GAAGX,MAAM,CAAC1B,QAAQ,CAACqC,GAAG,EAAEI,QAAQ,CAAC;UACtC,CAAC,CAAC,OAAO7B,GAAG,EAAE;YACZ,IAAIA,GAAG,CAACC,IAAI,KAAK,2BAA2B,EAAE;cAC5C,IAAMG,OAAO,GAAI,GAAEsB,mBAAoB,IAAG1B,GAAG,CAACI,OAAQ,EAAC;cACvDW,MAAI,CAACgB,KAAK,CAAC3B,OAAO,EAAE;gBAAED,QAAQ,EAAEH,GAAG,CAACG,QAAQ;gBAAEF,IAAI,EAAED,GAAG,CAACC;cAAK,CAAC,CAAC;YACjE;YACA,MAAMD,GAAG;UACX;QACF,CAAC,MAAM,IAAIyB,GAAG,KAAK,IAAI,IAAIX,MAAM,CAAC5B,QAAQ,EAAE;UAC1CuC,GAAG,GAAGX,MAAM,CAACkB,YAAY,CAACP,GAAG,EAAEI,QAAQ,CAAC;QAC1C;QAGA,IAAIJ,GAAG,IAAI,IAAI,EAAE;UACf,IAAIX,MAAM,CAACI,MAAM,EAAE;YACjBO,GAAG,GAAG,KAAK;UACb,CAAC,MAAM,IAAIX,MAAM,CAACmB,SAAS,CAAC,CAAC,IAAInB,MAAM,CAACoB,QAAQ,EAAE;YAChDT,GAAG,GAAG,IAAI;UACZ,CAAC,MAAM;YACLA,GAAG,GAAG,EAAE;UACV;QACF;QACAV,MAAI,CAACQ,wBAAwB,CAACnJ,IAAI,EAAEqJ,GAAG,EAAEE,WAAW,CAAC;MACvD,CAAC;MAED,IAAI,CAACQ,EAAE,CAAC,SAAS,GAAGnB,KAAK,EAAE,UAACS,GAAG,EAAK;QAClC,IAAMC,mBAAmB,GAAI,kBAAiBZ,MAAM,CAACF,KAAM,eAAca,GAAI,eAAc;QAC3FD,iBAAiB,CAACC,GAAG,EAAEC,mBAAmB,EAAE,KAAK,CAAC;MACpD,CAAC,CAAC;MAEF,IAAIZ,MAAM,CAACsB,MAAM,EAAE;QACjB,IAAI,CAACD,EAAE,CAAC,YAAY,GAAGnB,KAAK,EAAE,UAACS,GAAG,EAAK;UACrC,IAAMC,mBAAmB,GAAI,kBAAiBZ,MAAM,CAACF,KAAM,YAAWa,GAAI,eAAcX,MAAM,CAACsB,MAAO,eAAc;UACpHZ,iBAAiB,CAACC,GAAG,EAAEC,mBAAmB,EAAE,KAAK,CAAC;QACpD,CAAC,CAAC;MACJ;MAEA,OAAO,IAAI;IACb;EAAC;IAAA3F,GAAA;IAAAC,KAAA,EAOD,SAAAqG,UAAUC,MAAM,EAAE1B,KAAK,EAAE7D,WAAW,EAAEsB,EAAE,EAAEC,YAAY,EAAE;MACtD,IAAI,OAAOsC,KAAK,KAAK,QAAQ,IAAIA,KAAK,YAAYlJ,MAAM,EAAE;QACxD,MAAM,IAAIwG,KAAK,CAAC,iFAAiF,CAAC;MACpG;MACA,IAAM4C,MAAM,GAAG,IAAI,CAACH,YAAY,CAACC,KAAK,EAAE7D,WAAW,CAAC;MACpD+D,MAAM,CAACyB,mBAAmB,CAAC,CAAC,CAACD,MAAM,CAACE,SAAS,CAAC;MAC9C,IAAI,OAAOnE,EAAE,KAAK,UAAU,EAAE;QAC5ByC,MAAM,CAACvC,OAAO,CAACD,YAAY,CAAC,CAACE,SAAS,CAACH,EAAE,CAAC;MAC5C,CAAC,MAAM,IAAIA,EAAE,YAAYoE,MAAM,EAAE;QAE/B,IAAMC,KAAK,GAAGrE,EAAE;QAChBA,EAAE,GAAG,SAAAA,GAACoD,GAAG,EAAEkB,GAAG,EAAK;UACjB,IAAMC,CAAC,GAAGF,KAAK,CAACG,IAAI,CAACpB,GAAG,CAAC;UACzB,OAAOmB,CAAC,GAAGA,CAAC,CAAC,CAAC,CAAC,GAAGD,GAAG;QACvB,CAAC;QACD7B,MAAM,CAACvC,OAAO,CAACD,YAAY,CAAC,CAACE,SAAS,CAACH,EAAE,CAAC;MAC5C,CAAC,MAAM;QACLyC,MAAM,CAACvC,OAAO,CAACF,EAAE,CAAC;MACpB;MAEA,OAAO,IAAI,CAACwC,SAAS,CAACC,MAAM,CAAC;IAC/B;EAAC;IAAA/E,GAAA;IAAAC,KAAA,EAoDD,SAAA8E,OAAOF,KAAK,EAAE7D,WAAW,EAAEsB,EAAE,EAAEC,YAAY,EAAE;MAC3C,OAAO,IAAI,CAAC+D,SAAS,CAAC,CAAC,CAAC,EAAEzB,KAAK,EAAE7D,WAAW,EAAEsB,EAAE,EAAEC,YAAY,CAAC;IACjE;EAAC;IAAAvC,GAAA;IAAAC,KAAA,EAeD,SAAA8G,eAAelC,KAAK,EAAE7D,WAAW,EAAEsB,EAAE,EAAEC,YAAY,EAAE;MACnD,OAAO,IAAI,CAAC+D,SAAS,CAAC;QAAEG,SAAS,EAAE;MAAK,CAAC,EAAE5B,KAAK,EAAE7D,WAAW,EAAEsB,EAAE,EAAEC,YAAY,CAAC;IAClF;EAAC;IAAAvC,GAAA;IAAAC,KAAA,EAYD,SAAA+G,4BAAA,EAA4C;MAAA,IAAhBC,OAAO,GAAA5F,SAAA,CAAAU,MAAA,QAAAV,SAAA,QAAAnD,SAAA,GAAAmD,SAAA,MAAG,IAAI;MACxC,IAAI,CAACvD,4BAA4B,GAAG,CAAC,CAACmJ,OAAO;MAC7C,OAAO,IAAI;IACb;EAAC;IAAAjH,GAAA;IAAAC,KAAA,EAQD,SAAAiH,mBAAA,EAAwC;MAAA,IAArBC,YAAY,GAAA9F,SAAA,CAAAU,MAAA,QAAAV,SAAA,QAAAnD,SAAA,GAAAmD,SAAA,MAAG,IAAI;MACpC,IAAI,CAACzE,mBAAmB,GAAG,CAAC,CAACuK,YAAY;MACzC,OAAO,IAAI;IACb;EAAC;IAAAnH,GAAA;IAAAC,KAAA,EAQD,SAAAmH,qBAAA,EAAyC;MAAA,IAApBC,WAAW,GAAAhG,SAAA,CAAAU,MAAA,QAAAV,SAAA,QAAAnD,SAAA,GAAAmD,SAAA,MAAG,IAAI;MACrC,IAAI,CAACxE,qBAAqB,GAAG,CAAC,CAACwK,WAAW;MAC1C,OAAO,IAAI;IACb;EAAC;IAAArH,GAAA;IAAAC,KAAA,EASD,SAAAqH,wBAAA,EAA2C;MAAA,IAAnBC,UAAU,GAAAlG,SAAA,CAAAU,MAAA,QAAAV,SAAA,QAAAnD,SAAA,GAAAmD,SAAA,MAAG,IAAI;MACvC,IAAI,CAAClD,wBAAwB,GAAG,CAAC,CAACoJ,UAAU;MAC5C,OAAO,IAAI;IACb;EAAC;IAAAvH,GAAA;IAAAC,KAAA,EAWD,SAAAuH,mBAAA,EAAuC;MAAA,IAApBC,WAAW,GAAApG,SAAA,CAAAU,MAAA,QAAAV,SAAA,QAAAnD,SAAA,GAAAmD,SAAA,MAAG,IAAI;MACnC,IAAI,CAACjD,mBAAmB,GAAG,CAAC,CAACqJ,WAAW;MACxC,IAAI,CAAC,CAAC,IAAI,CAAC9K,MAAM,IAAI8K,WAAW,IAAI,CAAC,IAAI,CAAC9K,MAAM,CAACwB,wBAAwB,EAAE;QACzE,MAAM,IAAIgE,KAAK,CAAC,qGAAqG,CAAC;MACxH;MACA,OAAO,IAAI;IACb;EAAC;IAAAnC,GAAA;IAAAC,KAAA,EAUD,SAAAyH,yBAAA,EAAmD;MAAA,IAA1BC,iBAAiB,GAAAtG,SAAA,CAAAU,MAAA,QAAAV,SAAA,QAAAnD,SAAA,GAAAmD,SAAA,MAAG,IAAI;MAC/C,IAAI,CAAC/D,yBAAyB,GAAG,CAAC,CAACqK,iBAAiB;MACpD,IAAI,IAAI,CAACjL,OAAO,CAACqF,MAAM,EAAE;QACvB,MAAM,IAAII,KAAK,CAAC,wDAAwD,CAAC;MAC3E;MACA,OAAO,IAAI;IACb;EAAC;IAAAnC,GAAA;IAAAC,KAAA,EASD,SAAA8F,eAAe/F,GAAG,EAAE;MAClB,IAAI,IAAI,CAAC1C,yBAAyB,EAAE;QAClC,OAAO,IAAI,CAAC0C,GAAG,CAAC;MAClB;MACA,OAAO,IAAI,CAAC5C,aAAa,CAAC4C,GAAG,CAAC;IAChC;EAAC;IAAAA,GAAA;IAAAC,KAAA,EAUD,SAAA2H,eAAe5H,GAAG,EAAEC,KAAK,EAAE;MACzB,OAAO,IAAI,CAACuF,wBAAwB,CAACxF,GAAG,EAAEC,KAAK,EAAE/B,SAAS,CAAC;IAC7D;EAAC;IAAA8B,GAAA;IAAAC,KAAA,EAWD,SAAAuF,yBAAyBxF,GAAG,EAAEC,KAAK,EAAE4H,MAAM,EAAE;MAC3C,IAAI,IAAI,CAACvK,yBAAyB,EAAE;QAClC,IAAI,CAAC0C,GAAG,CAAC,GAAGC,KAAK;MACnB,CAAC,MAAM;QACL,IAAI,CAAC7C,aAAa,CAAC4C,GAAG,CAAC,GAAGC,KAAK;MACjC;MACA,IAAI,CAAC5C,mBAAmB,CAAC2C,GAAG,CAAC,GAAG6H,MAAM;MACtC,OAAO,IAAI;IACb;EAAC;IAAA7H,GAAA;IAAAC,KAAA,EAUD,SAAA6H,qBAAqB9H,GAAG,EAAE;MACxB,OAAO,IAAI,CAAC3C,mBAAmB,CAAC2C,GAAG,CAAC;IACtC;EAAC;IAAAA,GAAA;IAAAC,KAAA,EAUD,SAAA8H,gCAAgC/H,GAAG,EAAE;MAEnC,IAAI6H,MAAM;MACVG,oBAAoB,CAAC,IAAI,CAAC,CAACjF,OAAO,CAAC,UAACjC,GAAG,EAAK;QAC1C,IAAIA,GAAG,CAACgH,oBAAoB,CAAC9H,GAAG,CAAC,KAAK9B,SAAS,EAAE;UAC/C2J,MAAM,GAAG/G,GAAG,CAACgH,oBAAoB,CAAC9H,GAAG,CAAC;QACxC;MACF,CAAC,CAAC;MACF,OAAO6H,MAAM;IACf;EAAC;IAAA7H,GAAA;IAAAC,KAAA,EASD,SAAAgI,iBAAiBC,IAAI,EAAEC,YAAY,EAAE;MACnC,IAAID,IAAI,KAAKhK,SAAS,IAAI,CAACkK,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,EAAE;QAC9C,MAAM,IAAI/F,KAAK,CAAC,qDAAqD,CAAC;MACxE;MACAgG,YAAY,GAAGA,YAAY,IAAI,CAAC,CAAC;MAGjC,IAAID,IAAI,KAAKhK,SAAS,EAAE;QACtBgK,IAAI,GAAGhN,OAAO,CAACgN,IAAI;QAEnB,IAAIhN,OAAO,CAACoN,QAAQ,IAAIpN,OAAO,CAACoN,QAAQ,CAACC,QAAQ,EAAE;UACjDJ,YAAY,CAACK,IAAI,GAAG,UAAU;QAChC;MACF;MACA,IAAI,CAACxL,OAAO,GAAGkL,IAAI,CAAChF,KAAK,CAAC,CAAC;MAG3B,IAAIuF,QAAQ;MACZ,QAAQN,YAAY,CAACK,IAAI;QACvB,KAAKtK,SAAS;QACd,KAAK,MAAM;UACT,IAAI,CAAChB,WAAW,GAAGgL,IAAI,CAAC,CAAC,CAAC;UAC1BO,QAAQ,GAAGP,IAAI,CAAChF,KAAK,CAAC,CAAC,CAAC;UACxB;QACF,KAAK,UAAU;UAEb,IAAIhI,OAAO,CAACwN,UAAU,EAAE;YACtB,IAAI,CAACxL,WAAW,GAAGgL,IAAI,CAAC,CAAC,CAAC;YAC1BO,QAAQ,GAAGP,IAAI,CAAChF,KAAK,CAAC,CAAC,CAAC;UAC1B,CAAC,MAAM;YACLuF,QAAQ,GAAGP,IAAI,CAAChF,KAAK,CAAC,CAAC,CAAC;UAC1B;UACA;QACF,KAAK,MAAM;UACTuF,QAAQ,GAAGP,IAAI,CAAChF,KAAK,CAAC,CAAC,CAAC;UACxB;QACF;UACE,MAAM,IAAIf,KAAK,CAAE,oCAAmCgG,YAAY,CAACK,IAAK,KAAI,CAAC;MAC/E;MAGA,IAAI,CAAC,IAAI,CAACrL,KAAK,IAAI,IAAI,CAACD,WAAW,EAAE,IAAI,CAACyL,gBAAgB,CAAC,IAAI,CAACzL,WAAW,CAAC;MAC5E,IAAI,CAACC,KAAK,GAAG,IAAI,CAACA,KAAK,IAAI,SAAS;MAEpC,OAAOsL,QAAQ;IACjB;EAAC;IAAAzI,GAAA;IAAAC,KAAA,EAmBD,SAAA2I,MAAMV,IAAI,EAAEC,YAAY,EAAE;MACxB,IAAMM,QAAQ,GAAG,IAAI,CAACR,gBAAgB,CAACC,IAAI,EAAEC,YAAY,CAAC;MAC1D,IAAI,CAACU,aAAa,CAAC,EAAE,EAAEJ,QAAQ,CAAC;MAEhC,OAAO,IAAI;IACb;EAAC;IAAAzI,GAAA;IAAAC,KAAA;MAAA,IAAA6I,WAAA,GAAAC,iBAAA,CAqBD,WAAiBb,IAAI,EAAEC,YAAY,EAAE;QACnC,IAAMM,QAAQ,GAAG,IAAI,CAACR,gBAAgB,CAACC,IAAI,EAAEC,YAAY,CAAC;QAC1D,MAAM,IAAI,CAACU,aAAa,CAAC,EAAE,EAAEJ,QAAQ,CAAC;QAEtC,OAAO,IAAI;MACb,CAAC;MAAA,SAAAO,WAAAC,EAAA,EAAAC,GAAA;QAAA,OAAAJ,WAAA,CAAAnE,KAAA,OAAAtD,SAAA;MAAA;MAAA,OAAA2H,UAAA;IAAA;EAAA;IAAAhJ,GAAA;IAAAC,KAAA,EAQD,SAAAkJ,mBAAmBC,UAAU,EAAErM,IAAI,EAAE;MACnCA,IAAI,GAAGA,IAAI,CAACmG,KAAK,CAAC,CAAC;MACnB,IAAImG,cAAc,GAAG,KAAK;MAC1B,IAAMC,SAAS,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;MAExD,SAASC,QAAQA,CAACC,OAAO,EAAEC,QAAQ,EAAE;QAEnC,IAAMC,QAAQ,GAAG1O,IAAI,CAAC2O,OAAO,CAACH,OAAO,EAAEC,QAAQ,CAAC;QAChD,IAAIxO,EAAE,CAAC2O,UAAU,CAACF,QAAQ,CAAC,EAAE,OAAOA,QAAQ;QAG5C,IAAIJ,SAAS,CAACxF,QAAQ,CAAC9I,IAAI,CAAC6O,OAAO,CAACJ,QAAQ,CAAC,CAAC,EAAE,OAAOvL,SAAS;QAGhE,IAAM4L,QAAQ,GAAGR,SAAS,CAACS,IAAI,CAAC,UAAAC,GAAG;UAAA,OAAI/O,EAAE,CAAC2O,UAAU,CAAE,GAAEF,QAAS,GAAEM,GAAI,EAAC,CAAC;QAAA,EAAC;QAC1E,IAAIF,QAAQ,EAAE,OAAQ,GAAEJ,QAAS,GAAEI,QAAS,EAAC;QAE7C,OAAO5L,SAAS;MAClB;MAGA,IAAI,CAAC+L,gCAAgC,CAAC,CAAC;MACvC,IAAI,CAACC,2BAA2B,CAAC,CAAC;MAGlC,IAAI9I,cAAc,GAAGgI,UAAU,CAAC3L,eAAe,IAAK,GAAE,IAAI,CAACN,KAAM,IAAGiM,UAAU,CAACjM,KAAM,EAAC;MACtF,IAAIgN,aAAa,GAAG,IAAI,CAACzM,cAAc,IAAI,EAAE;MAC7C,IAAI,IAAI,CAACR,WAAW,EAAE;QACpB,IAAIkN,kBAAkB;QACtB,IAAI;UACFA,kBAAkB,GAAGnP,EAAE,CAACoP,YAAY,CAAC,IAAI,CAACnN,WAAW,CAAC;QACxD,CAAC,CAAC,OAAO+G,GAAG,EAAE;UACZmG,kBAAkB,GAAG,IAAI,CAAClN,WAAW;QACvC;QACAiN,aAAa,GAAGnP,IAAI,CAAC2O,OAAO,CAAC3O,IAAI,CAACsP,OAAO,CAACF,kBAAkB,CAAC,EAAED,aAAa,CAAC;MAC/E;MAGA,IAAIA,aAAa,EAAE;QACjB,IAAII,SAAS,GAAGhB,QAAQ,CAACY,aAAa,EAAE/I,cAAc,CAAC;QAGvD,IAAI,CAACmJ,SAAS,IAAI,CAACnB,UAAU,CAAC3L,eAAe,IAAI,IAAI,CAACP,WAAW,EAAE;UACjE,IAAMsN,UAAU,GAAGxP,IAAI,CAACyP,QAAQ,CAAC,IAAI,CAACvN,WAAW,EAAElC,IAAI,CAAC6O,OAAO,CAAC,IAAI,CAAC3M,WAAW,CAAC,CAAC;UAClF,IAAIsN,UAAU,KAAK,IAAI,CAACrN,KAAK,EAAE;YAC7BoN,SAAS,GAAGhB,QAAQ,CAACY,aAAa,EAAG,GAAEK,UAAW,IAAGpB,UAAU,CAACjM,KAAM,EAAC,CAAC;UAC1E;QACF;QACAiE,cAAc,GAAGmJ,SAAS,IAAInJ,cAAc;MAC9C;MAEAiI,cAAc,GAAGC,SAAS,CAACxF,QAAQ,CAAC9I,IAAI,CAAC6O,OAAO,CAACzI,cAAc,CAAC,CAAC;MAEjE,IAAIsJ,IAAI;MACR,IAAIxP,OAAO,CAACyP,QAAQ,KAAK,OAAO,EAAE;QAChC,IAAItB,cAAc,EAAE;UAClBtM,IAAI,CAAC6N,OAAO,CAACxJ,cAAc,CAAC;UAE5BrE,IAAI,GAAG8N,0BAA0B,CAAC3P,OAAO,CAAC4P,QAAQ,CAAC,CAACC,MAAM,CAAChO,IAAI,CAAC;UAEhE2N,IAAI,GAAG3P,YAAY,CAACiQ,KAAK,CAAC9P,OAAO,CAACgN,IAAI,CAAC,CAAC,CAAC,EAAEnL,IAAI,EAAE;YAAEkO,KAAK,EAAE;UAAU,CAAC,CAAC;QACxE,CAAC,MAAM;UACLP,IAAI,GAAG3P,YAAY,CAACiQ,KAAK,CAAC5J,cAAc,EAAErE,IAAI,EAAE;YAAEkO,KAAK,EAAE;UAAU,CAAC,CAAC;QACvE;MACF,CAAC,MAAM;QACLlO,IAAI,CAAC6N,OAAO,CAACxJ,cAAc,CAAC;QAE5BrE,IAAI,GAAG8N,0BAA0B,CAAC3P,OAAO,CAAC4P,QAAQ,CAAC,CAACC,MAAM,CAAChO,IAAI,CAAC;QAChE2N,IAAI,GAAG3P,YAAY,CAACiQ,KAAK,CAAC9P,OAAO,CAACgQ,QAAQ,EAAEnO,IAAI,EAAE;UAAEkO,KAAK,EAAE;QAAU,CAAC,CAAC;MACzE;MAEA,IAAI,CAACP,IAAI,CAACS,MAAM,EAAE;QAChB,IAAMC,OAAO,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,EAAE,QAAQ,CAAC;QACrEA,OAAO,CAACrI,OAAO,CAAC,UAACsI,MAAM,EAAK;UAE1BnQ,OAAO,CAACkL,EAAE,CAACiF,MAAM,EAAE,YAAM;YACvB,IAAIX,IAAI,CAACS,MAAM,KAAK,KAAK,IAAIT,IAAI,CAACtG,QAAQ,KAAK,IAAI,EAAE;cACnDsG,IAAI,CAACY,IAAI,CAACD,MAAM,CAAC;YACnB;UACF,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ;MAIA,IAAME,YAAY,GAAG,IAAI,CAAC3N,aAAa;MACvC,IAAI,CAAC2N,YAAY,EAAE;QACjBb,IAAI,CAACtE,EAAE,CAAC,OAAO,EAAElL,OAAO,CAACoJ,IAAI,CAACkH,IAAI,CAACtQ,OAAO,CAAC,CAAC;MAC9C,CAAC,MAAM;QACLwP,IAAI,CAACtE,EAAE,CAAC,OAAO,EAAE,YAAM;UACrBmF,YAAY,CAAC,IAAIhQ,cAAc,CAACL,OAAO,CAACkJ,QAAQ,IAAI,CAAC,EAAE,kCAAkC,EAAE,SAAS,CAAC,CAAC;QACxG,CAAC,CAAC;MACJ;MACAsG,IAAI,CAACtE,EAAE,CAAC,OAAO,EAAE,UAACnC,GAAG,EAAK;QAExB,IAAIA,GAAG,CAACC,IAAI,KAAK,QAAQ,EAAE;UACzB,IAAMuH,oBAAoB,GAAGtB,aAAa,GACrC,wDAAuDA,aAAc,GAAE,GACxE,iGAAiG;UACrG,IAAMuB,iBAAiB,GAAI,IAAGtK,cAAe;AACrD,SAASgI,UAAU,CAACjM,KAAM;AAC1B;AACA,KAAKsO,oBAAqB,EAAC;UACnB,MAAM,IAAItJ,KAAK,CAACuJ,iBAAiB,CAAC;QAEpC,CAAC,MAAM,IAAIzH,GAAG,CAACC,IAAI,KAAK,QAAQ,EAAE;UAChC,MAAM,IAAI/B,KAAK,CAAE,IAAGf,cAAe,kBAAiB,CAAC;QACvD;QACA,IAAI,CAACmK,YAAY,EAAE;UACjBrQ,OAAO,CAACoJ,IAAI,CAAC,CAAC,CAAC;QACjB,CAAC,MAAM;UACL,IAAMqH,YAAY,GAAG,IAAIpQ,cAAc,CAAC,CAAC,EAAE,kCAAkC,EAAE,SAAS,CAAC;UACzFoQ,YAAY,CAACC,WAAW,GAAG3H,GAAG;UAC9BsH,YAAY,CAACI,YAAY,CAAC;QAC5B;MACF,CAAC,CAAC;MAGF,IAAI,CAACE,cAAc,GAAGnB,IAAI;IAC5B;EAAC;IAAA1K,GAAA;IAAAC,KAAA,EAMD,SAAA6L,oBAAoBC,WAAW,EAAEC,QAAQ,EAAEC,OAAO,EAAE;MAAA,IAAAC,MAAA;MAClD,IAAMC,UAAU,GAAG,IAAI,CAAC1I,YAAY,CAACsI,WAAW,CAAC;MACjD,IAAI,CAACI,UAAU,EAAE,IAAI,CAACC,IAAI,CAAC;QAAEpG,KAAK,EAAE;MAAK,CAAC,CAAC;MAE3C,IAAIqG,UAAU;MACdA,UAAU,GAAG,IAAI,CAACC,0BAA0B,CAACD,UAAU,EAAEF,UAAU,EAAE,eAAe,CAAC;MACrFE,UAAU,GAAG,IAAI,CAACE,YAAY,CAACF,UAAU,EAAE,YAAM;QAC/C,IAAIF,UAAU,CAAC3O,kBAAkB,EAAE;UACjC0O,MAAI,CAAC/C,kBAAkB,CAACgD,UAAU,EAAEH,QAAQ,CAACjB,MAAM,CAACkB,OAAO,CAAC,CAAC;QAC/D,CAAC,MAAM;UACL,OAAOE,UAAU,CAACtD,aAAa,CAACmD,QAAQ,EAAEC,OAAO,CAAC;QACpD;MACF,CAAC,CAAC;MACF,OAAOI,UAAU;IACnB;EAAC;IAAArM,GAAA;IAAAC,KAAA,EAQD,SAAAuM,wBAAA,EAA0B;MAAA,IAAAC,MAAA;MAExB,IAAI,CAAC3P,KAAK,CAACiG,OAAO,CAAC,UAAC2J,GAAG,EAAEC,CAAC,EAAK;QAC7B,IAAID,GAAG,CAACtJ,QAAQ,IAAIqJ,MAAI,CAAC1P,IAAI,CAAC4P,CAAC,CAAC,IAAI,IAAI,EAAE;UACxCF,MAAI,CAACG,eAAe,CAACF,GAAG,CAACrQ,IAAI,CAAC,CAAC,CAAC;QAClC;MACF,CAAC,CAAC;MAEF,IAAI,IAAI,CAACS,KAAK,CAACiF,MAAM,GAAG,CAAC,IAAI,IAAI,CAACjF,KAAK,CAAC,IAAI,CAACA,KAAK,CAACiF,MAAM,GAAG,CAAC,CAAC,CAACoB,QAAQ,EAAE;QACvE;MACF;MACA,IAAI,IAAI,CAACpG,IAAI,CAACgF,MAAM,GAAG,IAAI,CAACjF,KAAK,CAACiF,MAAM,EAAE;QACxC,IAAI,CAAC8K,gBAAgB,CAAC,IAAI,CAAC9P,IAAI,CAAC;MAClC;IACF;EAAC;IAAAiD,GAAA;IAAAC,KAAA,EAQD,SAAA6M,kBAAA,EAAoB;MAAA,IAAAC,MAAA;MAClB,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAI3K,QAAQ,EAAEpC,KAAK,EAAEgN,QAAQ,EAAK;QAEhD,IAAIC,WAAW,GAAGjN,KAAK;QACvB,IAAIA,KAAK,KAAK,IAAI,IAAIoC,QAAQ,CAACgB,QAAQ,EAAE;UACvC,IAAI;YACF6J,WAAW,GAAG7K,QAAQ,CAACgB,QAAQ,CAACpD,KAAK,EAAEgN,QAAQ,CAAC;UAClD,CAAC,CAAC,OAAOhJ,GAAG,EAAE;YACZ,IAAIA,GAAG,CAACC,IAAI,KAAK,2BAA2B,EAAE;cAC5C,IAAMG,OAAO,GAAI,kCAAiCpE,KAAM,8BAA6BoC,QAAQ,CAAChG,IAAI,CAAC,CAAE,MAAK4H,GAAG,CAACI,OAAQ,EAAC;cACvH0I,MAAI,CAAC/G,KAAK,CAAC3B,OAAO,EAAE;gBAAED,QAAQ,EAAEH,GAAG,CAACG,QAAQ;gBAAEF,IAAI,EAAED,GAAG,CAACC;cAAK,CAAC,CAAC;YACjE;YACA,MAAMD,GAAG;UACX;QACF;QACA,OAAOiJ,WAAW;MACpB,CAAC;MAED,IAAI,CAACV,uBAAuB,CAAC,CAAC;MAE9B,IAAMvP,aAAa,GAAG,EAAE;MACxB,IAAI,CAACH,KAAK,CAACiG,OAAO,CAAC,UAACoK,WAAW,EAAEC,KAAK,EAAK;QACzC,IAAInN,KAAK,GAAGkN,WAAW,CAAC5K,YAAY;QACpC,IAAI4K,WAAW,CAAChK,QAAQ,EAAE;UAExB,IAAIiK,KAAK,GAAGL,MAAI,CAAChQ,IAAI,CAACgF,MAAM,EAAE;YAC5B9B,KAAK,GAAG8M,MAAI,CAAChQ,IAAI,CAACmG,KAAK,CAACkK,KAAK,CAAC;YAC9B,IAAID,WAAW,CAAC9J,QAAQ,EAAE;cACxBpD,KAAK,GAAGA,KAAK,CAACoN,MAAM,CAAC,UAACC,SAAS,EAAEC,CAAC,EAAK;gBACrC,OAAOP,UAAU,CAACG,WAAW,EAAEI,CAAC,EAAED,SAAS,CAAC;cAC9C,CAAC,EAAEH,WAAW,CAAC5K,YAAY,CAAC;YAC9B;UACF,CAAC,MAAM,IAAItC,KAAK,KAAK/B,SAAS,EAAE;YAC9B+B,KAAK,GAAG,EAAE;UACZ;QACF,CAAC,MAAM,IAAImN,KAAK,GAAGL,MAAI,CAAChQ,IAAI,CAACgF,MAAM,EAAE;UACnC9B,KAAK,GAAG8M,MAAI,CAAChQ,IAAI,CAACqQ,KAAK,CAAC;UACxB,IAAID,WAAW,CAAC9J,QAAQ,EAAE;YACxBpD,KAAK,GAAG+M,UAAU,CAACG,WAAW,EAAElN,KAAK,EAAEkN,WAAW,CAAC5K,YAAY,CAAC;UAClE;QACF;QACAtF,aAAa,CAACmQ,KAAK,CAAC,GAAGnN,KAAK;MAC9B,CAAC,CAAC;MACF,IAAI,CAAChD,aAAa,GAAGA,aAAa;IACpC;EAAC;IAAA+C,GAAA;IAAAC,KAAA,EAWD,SAAAsM,aAAaiB,OAAO,EAAElL,EAAE,EAAE;MAExB,IAAIkL,OAAO,IAAIA,OAAO,CAACC,IAAI,IAAI,OAAOD,OAAO,CAACC,IAAI,KAAK,UAAU,EAAE;QAEjE,OAAOD,OAAO,CAACC,IAAI,CAAC;UAAA,OAAMnL,EAAE,CAAC,CAAC;QAAA,EAAC;MACjC;MAEA,OAAOA,EAAE,CAAC,CAAC;IACb;EAAC;IAAAtC,GAAA;IAAAC,KAAA,EAUD,SAAAyN,kBAAkBF,OAAO,EAAE7J,KAAK,EAAE;MAAA,IAAAgK,MAAA;MAChC,IAAIC,MAAM,GAAGJ,OAAO;MACpB,IAAMK,KAAK,GAAG,EAAE;MAChB7F,oBAAoB,CAAC,IAAI,CAAC,CACvB8F,OAAO,CAAC,CAAC,CACTC,MAAM,CAAC,UAAAjN,GAAG;QAAA,OAAIA,GAAG,CAACzC,eAAe,CAACsF,KAAK,CAAC,KAAKzF,SAAS;MAAA,EAAC,CACvD6E,OAAO,CAAC,UAAAiL,aAAa,EAAI;QACxBA,aAAa,CAAC3P,eAAe,CAACsF,KAAK,CAAC,CAACZ,OAAO,CAAC,UAACkL,QAAQ,EAAK;UACzDJ,KAAK,CAACvM,IAAI,CAAC;YAAE0M,aAAa,EAAbA,aAAa;YAAEC,QAAQ,EAARA;UAAS,CAAC,CAAC;QACzC,CAAC,CAAC;MACJ,CAAC,CAAC;MACJ,IAAItK,KAAK,KAAK,YAAY,EAAE;QAC1BkK,KAAK,CAACC,OAAO,CAAC,CAAC;MACjB;MAEAD,KAAK,CAAC9K,OAAO,CAAC,UAACmL,UAAU,EAAK;QAC5BN,MAAM,GAAGD,MAAI,CAACpB,YAAY,CAACqB,MAAM,EAAE,YAAM;UACvC,OAAOM,UAAU,CAACD,QAAQ,CAACC,UAAU,CAACF,aAAa,EAAEL,MAAI,CAAC;QAC5D,CAAC,CAAC;MACJ,CAAC,CAAC;MACF,OAAOC,MAAM;IACf;EAAC;IAAA5N,GAAA;IAAAC,KAAA,EAWD,SAAAqM,2BAA2BkB,OAAO,EAAErB,UAAU,EAAExI,KAAK,EAAE;MAAA,IAAAwK,MAAA;MACrD,IAAIP,MAAM,GAAGJ,OAAO;MACpB,IAAI,IAAI,CAACnP,eAAe,CAACsF,KAAK,CAAC,KAAKzF,SAAS,EAAE;QAC7C,IAAI,CAACG,eAAe,CAACsF,KAAK,CAAC,CAACZ,OAAO,CAAC,UAACW,IAAI,EAAK;UAC5CkK,MAAM,GAAGO,MAAI,CAAC5B,YAAY,CAACqB,MAAM,EAAE,YAAM;YACvC,OAAOlK,IAAI,CAACyK,MAAI,EAAEhC,UAAU,CAAC;UAC/B,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ;MACA,OAAOyB,MAAM;IACf;EAAC;IAAA5N,GAAA;IAAAC,KAAA,EASD,SAAA4I,cAAcmD,QAAQ,EAAEC,OAAO,EAAE;MAAA,IAAAmC,OAAA;MAC/B,IAAMC,MAAM,GAAG,IAAI,CAAClG,YAAY,CAAC8D,OAAO,CAAC;MACzC,IAAI,CAACqC,gBAAgB,CAAC,CAAC;MACvB,IAAI,CAACC,oBAAoB,CAAC,CAAC;MAC3BvC,QAAQ,GAAGA,QAAQ,CAACjB,MAAM,CAACsD,MAAM,CAACrC,QAAQ,CAAC;MAC3CC,OAAO,GAAGoC,MAAM,CAACpC,OAAO;MACxB,IAAI,CAAClP,IAAI,GAAGiP,QAAQ,CAACjB,MAAM,CAACkB,OAAO,CAAC;MAEpC,IAAID,QAAQ,IAAI,IAAI,CAACvI,YAAY,CAACuI,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;QAC9C,OAAO,IAAI,CAACF,mBAAmB,CAACE,QAAQ,CAAC,CAAC,CAAC,EAAEA,QAAQ,CAAC9I,KAAK,CAAC,CAAC,CAAC,EAAE+I,OAAO,CAAC;MAC1E;MACA,IAAI,IAAI,CAACzI,uBAAuB,CAAC,CAAC,IAAIwI,QAAQ,CAAC,CAAC,CAAC,KAAK,IAAI,CAACrM,gBAAgB,EAAE;QAC3E,IAAIqM,QAAQ,CAACjK,MAAM,KAAK,CAAC,EAAE;UACzB,IAAI,CAACqK,IAAI,CAAC,CAAC;QACb;QACA,OAAO,IAAI,CAACN,mBAAmB,CAACE,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,IAAI,CAACvM,aAAa,CAAC,CAAC;MACxE;MACA,IAAI,IAAI,CAAC9B,mBAAmB,EAAE;QAC5B6Q,qBAAqB,CAAC,IAAI,EAAEvC,OAAO,CAAC;QACpC,OAAO,IAAI,CAACH,mBAAmB,CAAC,IAAI,CAACnO,mBAAmB,EAAEqO,QAAQ,EAAEC,OAAO,CAAC;MAC9E;MACA,IAAI,IAAI,CAACxP,QAAQ,CAACsF,MAAM,IAAI,IAAI,CAAChF,IAAI,CAACgF,MAAM,KAAK,CAAC,IAAI,CAAC,IAAI,CAACxE,cAAc,IAAI,CAAC,IAAI,CAACI,mBAAmB,EAAE;QAEvG,IAAI,CAACyO,IAAI,CAAC;UAAEpG,KAAK,EAAE;QAAK,CAAC,CAAC;MAC5B;MAEAwI,qBAAqB,CAAC,IAAI,EAAEH,MAAM,CAACpC,OAAO,CAAC;MAC3C,IAAI,CAAChC,gCAAgC,CAAC,CAAC;MACvC,IAAI,CAACC,2BAA2B,CAAC,CAAC;MAGlC,IAAMuE,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAA,EAAS;QACnC,IAAIJ,MAAM,CAACpC,OAAO,CAAClK,MAAM,GAAG,CAAC,EAAE;UAC7BqM,OAAI,CAACM,aAAa,CAACL,MAAM,CAACpC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvC;MACF,CAAC;MAED,IAAM0C,YAAY,GAAI,WAAU,IAAI,CAACtS,IAAI,CAAC,CAAE,EAAC;MAC7C,IAAI,IAAI,CAACkB,cAAc,EAAE;QACvBkR,sBAAsB,CAAC,CAAC;QACxB,IAAI,CAAC3B,iBAAiB,CAAC,CAAC;QAExB,IAAI8B,YAAY;QAChBA,YAAY,GAAG,IAAI,CAAClB,iBAAiB,CAACkB,YAAY,EAAE,WAAW,CAAC;QAChEA,YAAY,GAAG,IAAI,CAACrC,YAAY,CAACqC,YAAY,EAAE;UAAA,OAAMR,OAAI,CAAC7Q,cAAc,CAAC6Q,OAAI,CAACnR,aAAa,CAAC;QAAA,EAAC;QAC7F,IAAI,IAAI,CAACN,MAAM,EAAE;UACfiS,YAAY,GAAG,IAAI,CAACrC,YAAY,CAACqC,YAAY,EAAE,YAAM;YACnDR,OAAI,CAACzR,MAAM,CAACkS,IAAI,CAACF,YAAY,EAAE3C,QAAQ,EAAEC,OAAO,CAAC;UACnD,CAAC,CAAC;QACJ;QACA2C,YAAY,GAAG,IAAI,CAAClB,iBAAiB,CAACkB,YAAY,EAAE,YAAY,CAAC;QACjE,OAAOA,YAAY;MACrB;MACA,IAAI,IAAI,CAACjS,MAAM,IAAI,IAAI,CAACA,MAAM,CAACmS,aAAa,CAACH,YAAY,CAAC,EAAE;QAC1DF,sBAAsB,CAAC,CAAC;QACxB,IAAI,CAAC3B,iBAAiB,CAAC,CAAC;QACxB,IAAI,CAACnQ,MAAM,CAACkS,IAAI,CAACF,YAAY,EAAE3C,QAAQ,EAAEC,OAAO,CAAC;MACnD,CAAC,MAAM,IAAID,QAAQ,CAACjK,MAAM,EAAE;QAC1B,IAAI,IAAI,CAAC0B,YAAY,CAAC,GAAG,CAAC,EAAE;UAC1B,OAAO,IAAI,CAACqI,mBAAmB,CAAC,GAAG,EAAEE,QAAQ,EAAEC,OAAO,CAAC;QACzD;QACA,IAAI,IAAI,CAAC6C,aAAa,CAAC,WAAW,CAAC,EAAE;UAEnC,IAAI,CAACD,IAAI,CAAC,WAAW,EAAE7C,QAAQ,EAAEC,OAAO,CAAC;QAC3C,CAAC,MAAM,IAAI,IAAI,CAACxP,QAAQ,CAACsF,MAAM,EAAE;UAC/B,IAAI,CAACgN,cAAc,CAAC,CAAC;QACvB,CAAC,MAAM;UACLN,sBAAsB,CAAC,CAAC;UACxB,IAAI,CAAC3B,iBAAiB,CAAC,CAAC;QAC1B;MACF,CAAC,MAAM,IAAI,IAAI,CAACrQ,QAAQ,CAACsF,MAAM,EAAE;QAC/B0M,sBAAsB,CAAC,CAAC;QAExB,IAAI,CAACrC,IAAI,CAAC;UAAEpG,KAAK,EAAE;QAAK,CAAC,CAAC;MAC5B,CAAC,MAAM;QACLyI,sBAAsB,CAAC,CAAC;QACxB,IAAI,CAAC3B,iBAAiB,CAAC,CAAC;MAE1B;IACF;EAAC;IAAA9M,GAAA;IAAAC,KAAA,EAOD,SAAAwD,aAAapH,IAAI,EAAE;MACjB,IAAI,CAACA,IAAI,EAAE,OAAO6B,SAAS;MAC3B,OAAO,IAAI,CAACzB,QAAQ,CAACsN,IAAI,CAAC,UAAAjJ,GAAG;QAAA,OAAIA,GAAG,CAAC3D,KAAK,KAAKd,IAAI,IAAIyE,GAAG,CAACjD,QAAQ,CAACiG,QAAQ,CAACzH,IAAI,CAAC;MAAA,EAAC;IACrF;EAAC;IAAA2D,GAAA;IAAAC,KAAA,EAUD,SAAAsF,YAAYmH,GAAG,EAAE;MACf,OAAO,IAAI,CAAChQ,OAAO,CAACqN,IAAI,CAAC,UAAAhF,MAAM;QAAA,OAAIA,MAAM,CAACiK,EAAE,CAACtC,GAAG,CAAC;MAAA,EAAC;IACpD;EAAC;IAAA1M,GAAA;IAAAC,KAAA,EASD,SAAAgK,iCAAA,EAAmC;MAAA,IAAAgF,KAAA,YAAAA,MAAAnO,GAAA,EAEW;QAC1CA,GAAG,CAACpE,OAAO,CAACqG,OAAO,CAAC,UAACmM,QAAQ,EAAK;UAChC,IAAIA,QAAQ,CAACzI,SAAS,IAAK3F,GAAG,CAACiF,cAAc,CAACmJ,QAAQ,CAAChK,aAAa,CAAC,CAAC,CAAC,KAAKhH,SAAU,EAAE;YACtF4C,GAAG,CAACqO,2BAA2B,CAACD,QAAQ,CAAC;UAC3C;QACF,CAAC,CAAC;MACJ,CAAC;MAND,KAAK,IAAIpO,GAAG,GAAG,IAAI,EAAEA,GAAG,EAAEA,GAAG,GAAGA,GAAG,CAACnE,MAAM;QAAAsS,KAAA,CAAAnO,GAAA;MAAA;IAO5C;EAAC;IAAAd,GAAA;IAAAC,KAAA,EAOD,SAAAmP,iCAAA,EAAmC;MAAA,IAAAC,OAAA;MACjC,IAAMC,wBAAwB,GAAG,IAAI,CAAC5S,OAAO,CAACqR,MAAM,CAClD,UAAChJ,MAAM,EAAK;QACV,IAAMwK,SAAS,GAAGxK,MAAM,CAACG,aAAa,CAAC,CAAC;QACxC,IAAImK,OAAI,CAACtJ,cAAc,CAACwJ,SAAS,CAAC,KAAKrR,SAAS,EAAE;UAChD,OAAO,KAAK;QACd;QACA,OAAOmR,OAAI,CAACvH,oBAAoB,CAACyH,SAAS,CAAC,KAAK,SAAS;MAC3D,CACF,CAAC;MAED,IAAMC,sBAAsB,GAAGF,wBAAwB,CAACvB,MAAM,CAC5D,UAAChJ,MAAM;QAAA,OAAKA,MAAM,CAAC0K,aAAa,CAAC1N,MAAM,GAAG,CAAC;MAAA,CAC7C,CAAC;MAEDyN,sBAAsB,CAACzM,OAAO,CAAC,UAACgC,MAAM,EAAK;QACzC,IAAM2K,qBAAqB,GAAGJ,wBAAwB,CAACvF,IAAI,CAAC,UAAC4F,OAAO;UAAA,OAClE5K,MAAM,CAAC0K,aAAa,CAAC3L,QAAQ,CAAC6L,OAAO,CAACzK,aAAa,CAAC,CAAC,CAAC;QAAA,CACxD,CAAC;QACD,IAAIwK,qBAAqB,EAAE;UACzBL,OAAI,CAACO,kBAAkB,CAAC7K,MAAM,EAAE2K,qBAAqB,CAAC;QACxD;MACF,CAAC,CAAC;IACJ;EAAC;IAAA1P,GAAA;IAAAC,KAAA,EAQD,SAAAiK,4BAAA,EAA8B;MAE5B,KAAK,IAAIpJ,GAAG,GAAG,IAAI,EAAEA,GAAG,EAAEA,GAAG,GAAGA,GAAG,CAACnE,MAAM,EAAE;QAC1CmE,GAAG,CAACsO,gCAAgC,CAAC,CAAC;MACxC;IACF;EAAC;IAAApP,GAAA;IAAAC,KAAA,EAkBD,SAAAkI,aAAaD,IAAI,EAAE;MACjB,IAAM8D,QAAQ,GAAG,EAAE;MACnB,IAAMC,OAAO,GAAG,EAAE;MAClB,IAAI4D,IAAI,GAAG7D,QAAQ;MACnB,IAAMjP,IAAI,GAAGmL,IAAI,CAAChF,KAAK,CAAC,CAAC;MAEzB,SAAS4M,WAAWA,CAACpD,GAAG,EAAE;QACxB,OAAOA,GAAG,CAAC3K,MAAM,GAAG,CAAC,IAAI2K,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG;MACzC;MAGA,IAAIqD,oBAAoB,GAAG,IAAI;MAC/B,OAAOhT,IAAI,CAACgF,MAAM,EAAE;QAClB,IAAM2K,GAAG,GAAG3P,IAAI,CAACiT,KAAK,CAAC,CAAC;QAGxB,IAAItD,GAAG,KAAK,IAAI,EAAE;UAAA,IAAAuD,KAAA;UAChB,IAAIJ,IAAI,KAAK5D,OAAO,EAAE4D,IAAI,CAACvO,IAAI,CAACoL,GAAG,CAAC;UACpC,CAAAuD,KAAA,GAAAJ,IAAI,EAACvO,IAAI,CAAAqD,KAAA,CAAAsL,KAAA,EAAAC,kBAAA,CAAInT,IAAI,EAAC;UAClB;QACF;QAEA,IAAIgT,oBAAoB,IAAI,CAACD,WAAW,CAACpD,GAAG,CAAC,EAAE;UAC7C,IAAI,CAACmC,IAAI,CAAE,UAASkB,oBAAoB,CAAC1T,IAAI,CAAC,CAAE,EAAC,EAAEqQ,GAAG,CAAC;UACvD;QACF;QACAqD,oBAAoB,GAAG,IAAI;QAE3B,IAAID,WAAW,CAACpD,GAAG,CAAC,EAAE;UACpB,IAAM3H,MAAM,GAAG,IAAI,CAACQ,WAAW,CAACmH,GAAG,CAAC;UAEpC,IAAI3H,MAAM,EAAE;YACV,IAAIA,MAAM,CAAC3B,QAAQ,EAAE;cACnB,IAAMnD,KAAK,GAAGlD,IAAI,CAACiT,KAAK,CAAC,CAAC;cAC1B,IAAI/P,KAAK,KAAK/B,SAAS,EAAE,IAAI,CAACiS,qBAAqB,CAACpL,MAAM,CAAC;cAC3D,IAAI,CAAC8J,IAAI,CAAE,UAAS9J,MAAM,CAAC1I,IAAI,CAAC,CAAE,EAAC,EAAE4D,KAAK,CAAC;YAC7C,CAAC,MAAM,IAAI8E,MAAM,CAACoB,QAAQ,EAAE;cAC1B,IAAIlG,MAAK,GAAG,IAAI;cAEhB,IAAIlD,IAAI,CAACgF,MAAM,GAAG,CAAC,IAAI,CAAC+N,WAAW,CAAC/S,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;gBAC5CkD,MAAK,GAAGlD,IAAI,CAACiT,KAAK,CAAC,CAAC;cACtB;cACA,IAAI,CAACnB,IAAI,CAAE,UAAS9J,MAAM,CAAC1I,IAAI,CAAC,CAAE,EAAC,EAAE4D,MAAK,CAAC;YAC7C,CAAC,MAAM;cACL,IAAI,CAAC4O,IAAI,CAAE,UAAS9J,MAAM,CAAC1I,IAAI,CAAC,CAAE,EAAC,CAAC;YACtC;YACA0T,oBAAoB,GAAGhL,MAAM,CAAC5B,QAAQ,GAAG4B,MAAM,GAAG,IAAI;YACtD;UACF;QACF;QAGA,IAAI2H,GAAG,CAAC3K,MAAM,GAAG,CAAC,IAAI2K,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIA,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;UACtD,IAAM3H,OAAM,GAAG,IAAI,CAACQ,WAAW,CAAE,IAAGmH,GAAG,CAAC,CAAC,CAAE,EAAC,CAAC;UAC7C,IAAI3H,OAAM,EAAE;YACV,IAAIA,OAAM,CAAC3B,QAAQ,IAAK2B,OAAM,CAACoB,QAAQ,IAAI,IAAI,CAACrI,4BAA6B,EAAE;cAE7E,IAAI,CAAC+Q,IAAI,CAAE,UAAS9J,OAAM,CAAC1I,IAAI,CAAC,CAAE,EAAC,EAAEqQ,GAAG,CAACxJ,KAAK,CAAC,CAAC,CAAC,CAAC;YACpD,CAAC,MAAM;cAEL,IAAI,CAAC2L,IAAI,CAAE,UAAS9J,OAAM,CAAC1I,IAAI,CAAC,CAAE,EAAC,CAAC;cACpCU,IAAI,CAAC6N,OAAO,CAAE,IAAG8B,GAAG,CAACxJ,KAAK,CAAC,CAAC,CAAE,EAAC,CAAC;YAClC;YACA;UACF;QACF;QAGA,IAAI,WAAW,CAACkN,IAAI,CAAC1D,GAAG,CAAC,EAAE;UACzB,IAAMU,KAAK,GAAGV,GAAG,CAAC2D,OAAO,CAAC,GAAG,CAAC;UAC9B,IAAMtL,QAAM,GAAG,IAAI,CAACQ,WAAW,CAACmH,GAAG,CAACxJ,KAAK,CAAC,CAAC,EAAEkK,KAAK,CAAC,CAAC;UACpD,IAAIrI,QAAM,KAAKA,QAAM,CAAC3B,QAAQ,IAAI2B,QAAM,CAACoB,QAAQ,CAAC,EAAE;YAClD,IAAI,CAAC0I,IAAI,CAAE,UAAS9J,QAAM,CAAC1I,IAAI,CAAC,CAAE,EAAC,EAAEqQ,GAAG,CAACxJ,KAAK,CAACkK,KAAK,GAAG,CAAC,CAAC,CAAC;YAC1D;UACF;QACF;QAMA,IAAI0C,WAAW,CAACpD,GAAG,CAAC,EAAE;UACpBmD,IAAI,GAAG5D,OAAO;QAChB;QAGA,IAAI,CAAC,IAAI,CAAC9N,wBAAwB,IAAI,IAAI,CAACC,mBAAmB,KAAK4N,QAAQ,CAACjK,MAAM,KAAK,CAAC,IAAIkK,OAAO,CAAClK,MAAM,KAAK,CAAC,EAAE;UAChH,IAAI,IAAI,CAAC0B,YAAY,CAACiJ,GAAG,CAAC,EAAE;YAC1BV,QAAQ,CAAC1K,IAAI,CAACoL,GAAG,CAAC;YAClB,IAAI3P,IAAI,CAACgF,MAAM,GAAG,CAAC,EAAEkK,OAAO,CAAC3K,IAAI,CAAAqD,KAAA,CAAZsH,OAAO,EAAAiE,kBAAA,CAASnT,IAAI,EAAC;YAC1C;UACF,CAAC,MAAM,IAAI2P,GAAG,KAAK,IAAI,CAAC/M,gBAAgB,IAAI,IAAI,CAAC6D,uBAAuB,CAAC,CAAC,EAAE;YAC1EwI,QAAQ,CAAC1K,IAAI,CAACoL,GAAG,CAAC;YAClB,IAAI3P,IAAI,CAACgF,MAAM,GAAG,CAAC,EAAEiK,QAAQ,CAAC1K,IAAI,CAAAqD,KAAA,CAAbqH,QAAQ,EAAAkE,kBAAA,CAASnT,IAAI,EAAC;YAC3C;UACF,CAAC,MAAM,IAAI,IAAI,CAACY,mBAAmB,EAAE;YACnCsO,OAAO,CAAC3K,IAAI,CAACoL,GAAG,CAAC;YACjB,IAAI3P,IAAI,CAACgF,MAAM,GAAG,CAAC,EAAEkK,OAAO,CAAC3K,IAAI,CAAAqD,KAAA,CAAZsH,OAAO,EAAAiE,kBAAA,CAASnT,IAAI,EAAC;YAC1C;UACF;QACF;QAGA,IAAI,IAAI,CAACqB,mBAAmB,EAAE;UAAA,IAAAkS,MAAA;UAC5BT,IAAI,CAACvO,IAAI,CAACoL,GAAG,CAAC;UACd,IAAI3P,IAAI,CAACgF,MAAM,GAAG,CAAC,EAAE,CAAAuO,MAAA,GAAAT,IAAI,EAACvO,IAAI,CAAAqD,KAAA,CAAA2L,MAAA,EAAAJ,kBAAA,CAAInT,IAAI,EAAC;UACvC;QACF;QAGA8S,IAAI,CAACvO,IAAI,CAACoL,GAAG,CAAC;MAChB;MAEA,OAAO;QAAEV,QAAQ,EAARA,QAAQ;QAAEC,OAAO,EAAPA;MAAQ,CAAC;IAC9B;EAAC;IAAAjM,GAAA;IAAAC,KAAA,EAOD,SAAAQ,KAAA,EAAO;MACL,IAAI,IAAI,CAACnD,yBAAyB,EAAE;QAElC,IAAMsQ,MAAM,GAAG,CAAC,CAAC;QACjB,IAAM2C,GAAG,GAAG,IAAI,CAAC7T,OAAO,CAACqF,MAAM;QAE/B,KAAK,IAAI4K,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4D,GAAG,EAAE5D,CAAC,EAAE,EAAE;UAC5B,IAAM3M,GAAG,GAAG,IAAI,CAACtD,OAAO,CAACiQ,CAAC,CAAC,CAACzH,aAAa,CAAC,CAAC;UAC3C0I,MAAM,CAAC5N,GAAG,CAAC,GAAGA,GAAG,KAAK,IAAI,CAACwQ,kBAAkB,GAAG,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACzQ,GAAG,CAAC;QAC3E;QACA,OAAO4N,MAAM;MACf;MAEA,OAAO,IAAI,CAACxQ,aAAa;IAC3B;EAAC;IAAA4C,GAAA;IAAAC,KAAA,EAOD,SAAAyQ,gBAAA,EAAkB;MAEhB,OAAO1I,oBAAoB,CAAC,IAAI,CAAC,CAACqF,MAAM,CACtC,UAACsD,eAAe,EAAE7P,GAAG;QAAA,OAAKU,MAAM,CAACC,MAAM,CAACkP,eAAe,EAAE7P,GAAG,CAACL,IAAI,CAAC,CAAC,CAAC;MAAA,GACpE,CAAC,CACH,CAAC;IACH;EAAC;IAAAT,GAAA;IAAAC,KAAA,EAUD,SAAA+F,MAAM3B,OAAO,EAAEuM,YAAY,EAAE;MAE3B,IAAI,CAACpS,oBAAoB,CAACW,WAAW,CAAE,GAAEkF,OAAQ,IAAG,EAAE,IAAI,CAAC7F,oBAAoB,CAACK,QAAQ,CAAC;MACzF,IAAI,OAAO,IAAI,CAACP,mBAAmB,KAAK,QAAQ,EAAE;QAChD,IAAI,CAACE,oBAAoB,CAACK,QAAQ,CAAE,GAAE,IAAI,CAACP,mBAAoB,IAAG,CAAC;MACrE,CAAC,MAAM,IAAI,IAAI,CAACA,mBAAmB,EAAE;QACnC,IAAI,CAACE,oBAAoB,CAACK,QAAQ,CAAC,IAAI,CAAC;QACxC,IAAI,CAACgS,UAAU,CAAC;UAAE7K,KAAK,EAAE;QAAK,CAAC,CAAC;MAClC;MAGA,IAAMO,MAAM,GAAGqK,YAAY,IAAI,CAAC,CAAC;MACjC,IAAMxM,QAAQ,GAAGmC,MAAM,CAACnC,QAAQ,IAAI,CAAC;MACrC,IAAMF,IAAI,GAAGqC,MAAM,CAACrC,IAAI,IAAI,iBAAiB;MAC7C,IAAI,CAACC,KAAK,CAACC,QAAQ,EAAEF,IAAI,EAAEG,OAAO,CAAC;IACrC;EAAC;IAAArE,GAAA;IAAAC,KAAA,EAQD,SAAAqO,iBAAA,EAAmB;MAAA,IAAAwC,OAAA;MACjB,IAAI,CAACpU,OAAO,CAACqG,OAAO,CAAC,UAACgC,MAAM,EAAK;QAC/B,IAAIA,MAAM,CAACsB,MAAM,IAAItB,MAAM,CAACsB,MAAM,IAAInL,OAAO,CAAC6V,GAAG,EAAE;UACjD,IAAMxB,SAAS,GAAGxK,MAAM,CAACG,aAAa,CAAC,CAAC;UAExC,IAAI4L,OAAI,CAAC/K,cAAc,CAACwJ,SAAS,CAAC,KAAKrR,SAAS,IAAI,CAAC,SAAS,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC4F,QAAQ,CAACgN,OAAI,CAAChJ,oBAAoB,CAACyH,SAAS,CAAC,CAAC,EAAE;YAC/H,IAAIxK,MAAM,CAAC3B,QAAQ,IAAI2B,MAAM,CAACoB,QAAQ,EAAE;cAEtC2K,OAAI,CAACjC,IAAI,CAAE,aAAY9J,MAAM,CAAC1I,IAAI,CAAC,CAAE,EAAC,EAAEnB,OAAO,CAAC6V,GAAG,CAAChM,MAAM,CAACsB,MAAM,CAAC,CAAC;YACrE,CAAC,MAAM;cAELyK,OAAI,CAACjC,IAAI,CAAE,aAAY9J,MAAM,CAAC1I,IAAI,CAAC,CAAE,EAAC,CAAC;YACzC;UACF;QACF;MACF,CAAC,CAAC;IACJ;EAAC;IAAA2D,GAAA;IAAAC,KAAA,EAOD,SAAAsO,qBAAA,EAAuB;MAAA,IAAAyC,OAAA;MACrB,IAAMC,UAAU,GAAG,IAAIpV,WAAW,CAAC,IAAI,CAACa,OAAO,CAAC;MAChD,IAAMwU,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAI3B,SAAS,EAAK;QAC1C,OAAOyB,OAAI,CAACjL,cAAc,CAACwJ,SAAS,CAAC,KAAKrR,SAAS,IAAI,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC4F,QAAQ,CAACkN,OAAI,CAAClJ,oBAAoB,CAACyH,SAAS,CAAC,CAAC;MAC/H,CAAC;MACD,IAAI,CAAC7S,OAAO,CACTqR,MAAM,CAAC,UAAAhJ,MAAM;QAAA,OAAKA,MAAM,CAACoM,OAAO,KAAKjT,SAAS,IAC7CgT,oBAAoB,CAACnM,MAAM,CAACG,aAAa,CAAC,CAAC,CAAC,IAC5C+L,UAAU,CAACG,eAAe,CAACJ,OAAI,CAACjL,cAAc,CAAChB,MAAM,CAACG,aAAa,CAAC,CAAC,CAAC,EAAEH,MAAM,CAAC;MAAA,EAAC,CACjFhC,OAAO,CAAC,UAACgC,MAAM,EAAK;QACnBvD,MAAM,CAAC6P,IAAI,CAACtM,MAAM,CAACoM,OAAO,CAAC,CACxBpD,MAAM,CAAC,UAAAuD,UAAU;UAAA,OAAI,CAACJ,oBAAoB,CAACI,UAAU,CAAC;QAAA,EAAC,CACvDvO,OAAO,CAAC,UAAAuO,UAAU,EAAI;UACrBN,OAAI,CAACxL,wBAAwB,CAAC8L,UAAU,EAAEvM,MAAM,CAACoM,OAAO,CAACG,UAAU,CAAC,EAAE,SAAS,CAAC;QAClF,CAAC,CAAC;MACN,CAAC,CAAC;IACN;EAAC;IAAAtR,GAAA;IAAAC,KAAA,EASD,SAAA2M,gBAAgBvQ,IAAI,EAAE;MACpB,IAAMgI,OAAO,GAAI,qCAAoChI,IAAK,GAAE;MAC5D,IAAI,CAAC2J,KAAK,CAAC3B,OAAO,EAAE;QAAEH,IAAI,EAAE;MAA4B,CAAC,CAAC;IAC5D;EAAC;IAAAlE,GAAA;IAAAC,KAAA,EASD,SAAAkQ,sBAAsBpL,MAAM,EAAE;MAC5B,IAAMV,OAAO,GAAI,kBAAiBU,MAAM,CAACF,KAAM,oBAAmB;MAClE,IAAI,CAACmB,KAAK,CAAC3B,OAAO,EAAE;QAAEH,IAAI,EAAE;MAAkC,CAAC,CAAC;IAClE;EAAC;IAAAlE,GAAA;IAAAC,KAAA,EASD,SAAAkP,4BAA4BpK,MAAM,EAAE;MAClC,IAAMV,OAAO,GAAI,2BAA0BU,MAAM,CAACF,KAAM,iBAAgB;MACxE,IAAI,CAACmB,KAAK,CAAC3B,OAAO,EAAE;QAAEH,IAAI,EAAE;MAAwC,CAAC,CAAC;IACxE;EAAC;IAAAlE,GAAA;IAAAC,KAAA,EASD,SAAA2P,mBAAmB7K,MAAM,EAAEwM,iBAAiB,EAAE;MAAA,IAAAC,OAAA;MAG5C,IAAMC,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAAI1M,MAAM,EAAK;QAC1C,IAAMwK,SAAS,GAAGxK,MAAM,CAACG,aAAa,CAAC,CAAC;QACxC,IAAMwM,WAAW,GAAGF,OAAI,CAACzL,cAAc,CAACwJ,SAAS,CAAC;QAClD,IAAMoC,cAAc,GAAGH,OAAI,CAAC9U,OAAO,CAACqN,IAAI,CAAC,UAAA6H,MAAM;UAAA,OAAIA,MAAM,CAACzM,MAAM,IAAIoK,SAAS,KAAKqC,MAAM,CAAC1M,aAAa,CAAC,CAAC;QAAA,EAAC;QACzG,IAAM2M,cAAc,GAAGL,OAAI,CAAC9U,OAAO,CAACqN,IAAI,CAAC,UAAA6H,MAAM;UAAA,OAAI,CAACA,MAAM,CAACzM,MAAM,IAAIoK,SAAS,KAAKqC,MAAM,CAAC1M,aAAa,CAAC,CAAC;QAAA,EAAC;QAC1G,IAAIyM,cAAc,KACfA,cAAc,CAAC9L,SAAS,KAAK3H,SAAS,IAAIwT,WAAW,KAAK,KAAK,IAC/DC,cAAc,CAAC9L,SAAS,KAAK3H,SAAS,IAAIwT,WAAW,KAAKC,cAAc,CAAC9L,SAAU,CACrF,EAAE;UACD,OAAO8L,cAAc;QACvB;QACA,OAAOE,cAAc,IAAI9M,MAAM;MACjC,CAAC;MAED,IAAM+M,eAAe,GAAG,SAAlBA,eAAeA,CAAI/M,MAAM,EAAK;QAClC,IAAMgN,UAAU,GAAGN,uBAAuB,CAAC1M,MAAM,CAAC;QAClD,IAAMwK,SAAS,GAAGwC,UAAU,CAAC7M,aAAa,CAAC,CAAC;QAC5C,IAAM2C,MAAM,GAAG2J,OAAI,CAAC1J,oBAAoB,CAACyH,SAAS,CAAC;QACnD,IAAI1H,MAAM,KAAK,KAAK,EAAE;UACpB,OAAQ,yBAAwBkK,UAAU,CAAC1L,MAAO,GAAE;QACtD;QACA,OAAQ,WAAU0L,UAAU,CAAClN,KAAM,GAAE;MACvC,CAAC;MAED,IAAMR,OAAO,GAAI,UAASyN,eAAe,CAAC/M,MAAM,CAAE,wBAAuB+M,eAAe,CAACP,iBAAiB,CAAE,EAAC;MAC7G,IAAI,CAACvL,KAAK,CAAC3B,OAAO,EAAE;QAAEH,IAAI,EAAE;MAA8B,CAAC,CAAC;IAC9D;EAAC;IAAAlE,GAAA;IAAAC,KAAA,EASD,SAAAyO,cAAcsD,IAAI,EAAE;MAClB,IAAI,IAAI,CAACpV,mBAAmB,EAAE;MAC9B,IAAIqV,UAAU,GAAG,EAAE;MAEnB,IAAID,IAAI,CAACE,UAAU,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC3T,yBAAyB,EAAE;QAE3D,IAAI4T,cAAc,GAAG,EAAE;QACvB,IAAI/R,OAAO,GAAG,IAAI;QAClB,GAAG;UACD,IAAMgS,SAAS,GAAGhS,OAAO,CAACmB,UAAU,CAAC,CAAC,CAAC8Q,cAAc,CAACjS,OAAO,CAAC,CAC3D2N,MAAM,CAAC,UAAAhJ,MAAM;YAAA,OAAIA,MAAM,CAACM,IAAI;UAAA,EAAC,CAC7BiN,GAAG,CAAC,UAAAvN,MAAM;YAAA,OAAIA,MAAM,CAACM,IAAI;UAAA,EAAC;UAC7B8M,cAAc,GAAGA,cAAc,CAACpH,MAAM,CAACqH,SAAS,CAAC;UACjDhS,OAAO,GAAGA,OAAO,CAACzD,MAAM;QAC1B,CAAC,QAAQyD,OAAO,IAAI,CAACA,OAAO,CAACjC,wBAAwB;QACrD8T,UAAU,GAAGlW,cAAc,CAACiW,IAAI,EAAEG,cAAc,CAAC;MACnD;MAEA,IAAM9N,OAAO,GAAI,0BAAyB2N,IAAK,IAAGC,UAAW,EAAC;MAC9D,IAAI,CAACjM,KAAK,CAAC3B,OAAO,EAAE;QAAEH,IAAI,EAAE;MAA0B,CAAC,CAAC;IAC1D;EAAC;IAAAlE,GAAA;IAAAC,KAAA,EASD,SAAA4M,iBAAiB0F,YAAY,EAAE;MAC7B,IAAI,IAAI,CAAC1V,qBAAqB,EAAE;MAEhC,IAAM2V,QAAQ,GAAG,IAAI,CAAC1V,KAAK,CAACiF,MAAM;MAClC,IAAM0Q,CAAC,GAAID,QAAQ,KAAK,CAAC,GAAI,EAAE,GAAG,GAAG;MACrC,IAAME,aAAa,GAAG,IAAI,CAAC/V,MAAM,GAAI,SAAQ,IAAI,CAACN,IAAI,CAAC,CAAE,GAAE,GAAG,EAAE;MAChE,IAAMgI,OAAO,GAAI,4BAA2BqO,aAAc,cAAaF,QAAS,YAAWC,CAAE,YAAWF,YAAY,CAACxQ,MAAO,GAAE;MAC9H,IAAI,CAACiE,KAAK,CAAC3B,OAAO,EAAE;QAAEH,IAAI,EAAE;MAA4B,CAAC,CAAC;IAC5D;EAAC;IAAAlE,GAAA;IAAAC,KAAA,EAQD,SAAA8O,eAAA,EAAiB;MACf,IAAM4D,WAAW,GAAG,IAAI,CAAC5V,IAAI,CAAC,CAAC,CAAC;MAChC,IAAIkV,UAAU,GAAG,EAAE;MAEnB,IAAI,IAAI,CAAC1T,yBAAyB,EAAE;QAClC,IAAMqU,cAAc,GAAG,EAAE;QACzB,IAAI,CAACrR,UAAU,CAAC,CAAC,CAACsR,eAAe,CAAC,IAAI,CAAC,CAAC9P,OAAO,CAAC,UAAC3C,OAAO,EAAK;UAC3DwS,cAAc,CAACtR,IAAI,CAAClB,OAAO,CAAC/D,IAAI,CAAC,CAAC,CAAC;UAEnC,IAAI+D,OAAO,CAAC0S,KAAK,CAAC,CAAC,EAAEF,cAAc,CAACtR,IAAI,CAAClB,OAAO,CAAC0S,KAAK,CAAC,CAAC,CAAC;QAC3D,CAAC,CAAC;QACFb,UAAU,GAAGlW,cAAc,CAAC4W,WAAW,EAAEC,cAAc,CAAC;MAC1D;MAEA,IAAMvO,OAAO,GAAI,2BAA0BsO,WAAY,IAAGV,UAAW,EAAC;MACtE,IAAI,CAACjM,KAAK,CAAC3B,OAAO,EAAE;QAAEH,IAAI,EAAE;MAA2B,CAAC,CAAC;IAC3D;EAAC;IAAAlE,GAAA;IAAAC,KAAA,EAgBD,SAAA8S,QAAQrU,GAAG,EAAEmG,KAAK,EAAE7D,WAAW,EAAE;MAAA,IAAAgS,OAAA;MAC/B,IAAItU,GAAG,KAAKR,SAAS,EAAE,OAAO,IAAI,CAACuS,QAAQ;MAC3C,IAAI,CAACA,QAAQ,GAAG/R,GAAG;MACnBmG,KAAK,GAAGA,KAAK,IAAI,eAAe;MAChC7D,WAAW,GAAGA,WAAW,IAAI,2BAA2B;MACxD,IAAMiS,aAAa,GAAG,IAAI,CAACrO,YAAY,CAACC,KAAK,EAAE7D,WAAW,CAAC;MAC3D,IAAI,CAACwP,kBAAkB,GAAGyC,aAAa,CAAC/N,aAAa,CAAC,CAAC;MACvD,IAAI,CAACxI,OAAO,CAAC4E,IAAI,CAAC2R,aAAa,CAAC;MAChC,IAAI,CAAC7M,EAAE,CAAC,SAAS,GAAG6M,aAAa,CAAC5W,IAAI,CAAC,CAAC,EAAE,YAAM;QAC9C2W,OAAI,CAACxU,oBAAoB,CAACC,QAAQ,CAAE,GAAEC,GAAI,IAAG,CAAC;QAC9CsU,OAAI,CAAC7O,KAAK,CAAC,CAAC,EAAE,mBAAmB,EAAEzF,GAAG,CAAC;MACzC,CAAC,CAAC;MACF,OAAO,IAAI;IACb;EAAC;IAAAsB,GAAA;IAAAC,KAAA,EASD,SAAAe,YAAYtC,GAAG,EAAEwU,eAAe,EAAE;MAChC,IAAIxU,GAAG,KAAKR,SAAS,IAAIgV,eAAe,KAAKhV,SAAS,EAAE,OAAO,IAAI,CAACH,YAAY;MAChF,IAAI,CAACA,YAAY,GAAGW,GAAG;MACvB,IAAIwU,eAAe,EAAE;QACnB,IAAI,CAACjV,gBAAgB,GAAGiV,eAAe;MACzC;MACA,OAAO,IAAI;IACb;EAAC;IAAAlT,GAAA;IAAAC,KAAA,EAQD,SAAAkT,QAAQzU,GAAG,EAAE;MACX,IAAIA,GAAG,KAAKR,SAAS,EAAE,OAAO,IAAI,CAACF,QAAQ;MAC3C,IAAI,CAACA,QAAQ,GAAGU,GAAG;MACnB,OAAO,IAAI;IACb;EAAC;IAAAsB,GAAA;IAAAC,KAAA,EAWD,SAAA6S,MAAMA,MAAK,EAAE;MACX,IAAIA,MAAK,KAAK5U,SAAS,EAAE,OAAO,IAAI,CAACL,QAAQ,CAAC,CAAC,CAAC;MAGhD,IAAIuC,OAAO,GAAG,IAAI;MAClB,IAAI,IAAI,CAAC3D,QAAQ,CAACsF,MAAM,KAAK,CAAC,IAAI,IAAI,CAACtF,QAAQ,CAAC,IAAI,CAACA,QAAQ,CAACsF,MAAM,GAAG,CAAC,CAAC,CAACvE,kBAAkB,EAAE;QAE5F4C,OAAO,GAAG,IAAI,CAAC3D,QAAQ,CAAC,IAAI,CAACA,QAAQ,CAACsF,MAAM,GAAG,CAAC,CAAC;MACnD;MAEA,IAAI+Q,MAAK,KAAK1S,OAAO,CAACjD,KAAK,EAAE,MAAM,IAAIgF,KAAK,CAAC,8CAA8C,CAAC;MAE5F/B,OAAO,CAACvC,QAAQ,CAACyD,IAAI,CAACwR,MAAK,CAAC;MAC5B,OAAO,IAAI;IACb;EAAC;IAAA9S,GAAA;IAAAC,KAAA,EAWD,SAAAmT,QAAQA,QAAO,EAAE;MAAA,IAAAC,OAAA;MAEf,IAAID,QAAO,KAAKlV,SAAS,EAAE,OAAO,IAAI,CAACL,QAAQ;MAE/CuV,QAAO,CAACrQ,OAAO,CAAC,UAAC+P,KAAK;QAAA,OAAKO,OAAI,CAACP,KAAK,CAACA,KAAK,CAAC;MAAA,EAAC;MAC7C,OAAO,IAAI;IACb;EAAC;IAAA9S,GAAA;IAAAC,KAAA,EASD,SAAAqT,MAAM5U,GAAG,EAAE;MACT,IAAIA,GAAG,KAAKR,SAAS,EAAE;QACrB,IAAI,IAAI,CAACqV,MAAM,EAAE,OAAO,IAAI,CAACA,MAAM;QAEnC,IAAMxW,IAAI,GAAG,IAAI,CAACD,KAAK,CAACwV,GAAG,CAAC,UAAC5F,GAAG,EAAK;UACnC,OAAOrR,oBAAoB,CAACqR,GAAG,CAAC;QAClC,CAAC,CAAC;QACF,OAAO,EAAE,CAAC3B,MAAM,CACb,IAAI,CAACrO,OAAO,CAACqF,MAAM,IAAI,IAAI,CAAC1C,cAAc,GAAG,WAAW,GAAG,EAAE,EAC7D,IAAI,CAAC5C,QAAQ,CAACsF,MAAM,GAAG,WAAW,GAAG,EAAE,EACvC,IAAI,CAACjF,KAAK,CAACiF,MAAM,GAAGhF,IAAI,GAAG,EAC9B,CAAC,CAACgH,IAAI,CAAC,GAAG,CAAC;MACb;MAEA,IAAI,CAACwP,MAAM,GAAG7U,GAAG;MACjB,OAAO,IAAI;IACb;EAAC;IAAAsB,GAAA;IAAAC,KAAA,EASD,SAAA5D,KAAKqC,GAAG,EAAE;MACR,IAAIA,GAAG,KAAKR,SAAS,EAAE,OAAO,IAAI,CAACf,KAAK;MACxC,IAAI,CAACA,KAAK,GAAGuB,GAAG;MAChB,OAAO,IAAI;IACb;EAAC;IAAAsB,GAAA;IAAAC,KAAA,EAeD,SAAA0I,iBAAiB6K,QAAQ,EAAE;MACzB,IAAI,CAACrW,KAAK,GAAGnC,IAAI,CAACyP,QAAQ,CAAC+I,QAAQ,EAAExY,IAAI,CAAC6O,OAAO,CAAC2J,QAAQ,CAAC,CAAC;MAE5D,OAAO,IAAI;IACb;EAAC;IAAAxT,GAAA;IAAAC,KAAA,EAcD,SAAAkK,cAAcnP,IAAI,EAAE;MAClB,IAAIA,IAAI,KAAKkD,SAAS,EAAE,OAAO,IAAI,CAACR,cAAc;MAClD,IAAI,CAACA,cAAc,GAAG1C,IAAI;MAC1B,OAAO,IAAI;IACb;EAAC;IAAAgF,GAAA;IAAAC,KAAA,EASD,SAAAwT,gBAAgBC,cAAc,EAAE;MAC9B,IAAMC,MAAM,GAAG,IAAI,CAACpS,UAAU,CAAC,CAAC;MAChC,IAAIoS,MAAM,CAACC,SAAS,KAAK1V,SAAS,EAAE;QAClCyV,MAAM,CAACC,SAAS,GAAIF,cAAc,IAAIA,cAAc,CAAC1N,KAAK,GAAI,IAAI,CAACxH,oBAAoB,CAACU,eAAe,CAAC,CAAC,GAAG,IAAI,CAACV,oBAAoB,CAACO,eAAe,CAAC,CAAC;MACzJ;MACA,OAAO4U,MAAM,CAACE,UAAU,CAAC,IAAI,EAAEF,MAAM,CAAC;IACxC;EAAC;IAAA3T,GAAA;IAAAC,KAAA,EAMD,SAAA6T,gBAAgBJ,cAAc,EAAE;MAAA,IAAAK,OAAA;MAC9BL,cAAc,GAAGA,cAAc,IAAI,CAAC,CAAC;MACrC,IAAMM,OAAO,GAAG;QAAEhO,KAAK,EAAE,CAAC,CAAC0N,cAAc,CAAC1N;MAAM,CAAC;MACjD,IAAIpH,KAAK;MACT,IAAIoV,OAAO,CAAChO,KAAK,EAAE;QACjBpH,KAAK,GAAG,SAAAA,MAAC8N,GAAG;UAAA,OAAKqH,OAAI,CAACvV,oBAAoB,CAACK,QAAQ,CAAC6N,GAAG,CAAC;QAAA;MAC1D,CAAC,MAAM;QACL9N,KAAK,GAAG,SAAAA,MAAC8N,GAAG;UAAA,OAAKqH,OAAI,CAACvV,oBAAoB,CAACC,QAAQ,CAACiO,GAAG,CAAC;QAAA;MAC1D;MACAsH,OAAO,CAACpV,KAAK,GAAG8U,cAAc,CAAC9U,KAAK,IAAIA,KAAK;MAC7CoV,OAAO,CAAC5T,OAAO,GAAG,IAAI;MACtB,OAAO4T,OAAO;IAChB;EAAC;IAAAhU,GAAA;IAAAC,KAAA,EAUD,SAAA4Q,WAAW6C,cAAc,EAAE;MACzB,IAAIO,kBAAkB;MACtB,IAAI,OAAOP,cAAc,KAAK,UAAU,EAAE;QACxCO,kBAAkB,GAAGP,cAAc;QACnCA,cAAc,GAAGxV,SAAS;MAC5B;MACA,IAAM8V,OAAO,GAAG,IAAI,CAACF,eAAe,CAACJ,cAAc,CAAC;MAEpD1L,oBAAoB,CAAC,IAAI,CAAC,CAAC8F,OAAO,CAAC,CAAC,CAAC/K,OAAO,CAAC,UAAA3C,OAAO;QAAA,OAAIA,OAAO,CAACyO,IAAI,CAAC,eAAe,EAAEmF,OAAO,CAAC;MAAA,EAAC;MAC/F,IAAI,CAACnF,IAAI,CAAC,YAAY,EAAEmF,OAAO,CAAC;MAEhC,IAAIP,eAAe,GAAG,IAAI,CAACA,eAAe,CAACO,OAAO,CAAC;MACnD,IAAIC,kBAAkB,EAAE;QACtBR,eAAe,GAAGQ,kBAAkB,CAACR,eAAe,CAAC;QACrD,IAAI,OAAOA,eAAe,KAAK,QAAQ,IAAI,CAACS,MAAM,CAACC,QAAQ,CAACV,eAAe,CAAC,EAAE;UAC5E,MAAM,IAAItR,KAAK,CAAC,sDAAsD,CAAC;QACzE;MACF;MACA6R,OAAO,CAACpV,KAAK,CAAC6U,eAAe,CAAC;MAE9B,IAAI,CAAC5E,IAAI,CAAC,IAAI,CAACpP,aAAa,CAAC;MAC7B,IAAI,CAACoP,IAAI,CAAC,WAAW,EAAEmF,OAAO,CAAC;MAC/BhM,oBAAoB,CAAC,IAAI,CAAC,CAACjF,OAAO,CAAC,UAAA3C,OAAO;QAAA,OAAIA,OAAO,CAACyO,IAAI,CAAC,cAAc,EAAEmF,OAAO,CAAC;MAAA,EAAC;IACtF;EAAC;IAAAhU,GAAA;IAAAC,KAAA,EAYD,SAAAmU,WAAWvP,KAAK,EAAE7D,WAAW,EAAE;MAC7B,IAAI,OAAO6D,KAAK,KAAK,SAAS,EAAE;QAC9B,IAAI,CAACxF,cAAc,GAAGwF,KAAK;QAC3B,OAAO,IAAI;MACb;MACA,IAAI,CAACvF,UAAU,GAAGuF,KAAK,IAAI,IAAI,CAACvF,UAAU;MAC1C,IAAI,CAACC,gBAAgB,GAAGyB,WAAW,IAAI,IAAI,CAACzB,gBAAgB;MAE5D,IAAM8U,SAAS,GAAGzY,gBAAgB,CAAC,IAAI,CAAC0D,UAAU,CAAC;MACnD,IAAI,CAACE,cAAc,GAAG6U,SAAS,CAACC,SAAS;MACzC,IAAI,CAAC7U,aAAa,GAAG4U,SAAS,CAACE,QAAQ;MAEvC,OAAO,IAAI;IACb;EAAC;IAAAvU,GAAA;IAAAC,KAAA,EAUD,SAAAmM,KAAKsH,cAAc,EAAE;MACnB,IAAI,CAAC7C,UAAU,CAAC6C,cAAc,CAAC;MAC/B,IAAItP,QAAQ,GAAGlJ,OAAO,CAACkJ,QAAQ,IAAI,CAAC;MACpC,IAAIA,QAAQ,KAAK,CAAC,IAAIsP,cAAc,IAAI,OAAOA,cAAc,KAAK,UAAU,IAAIA,cAAc,CAAC1N,KAAK,EAAE;QACpG5B,QAAQ,GAAG,CAAC;MACd;MAEA,IAAI,CAACD,KAAK,CAACC,QAAQ,EAAE,gBAAgB,EAAE,cAAc,CAAC;IACxD;EAAC;IAAApE,GAAA;IAAAC,KAAA,EAYD,SAAAuU,YAAYC,QAAQ,EAAEC,IAAI,EAAE;MAC1B,IAAM7Q,aAAa,GAAG,CAAC,WAAW,EAAE,QAAQ,EAAE,OAAO,EAAE,UAAU,CAAC;MAClE,IAAI,CAACA,aAAa,CAACC,QAAQ,CAAC2Q,QAAQ,CAAC,EAAE;QACrC,MAAM,IAAItS,KAAK,CAAE;AACvB,oBAAoB0B,aAAa,CAACE,IAAI,CAAC,MAAM,CAAE,GAAE,CAAC;MAC9C;MACA,IAAM4Q,SAAS,GAAI,GAAEF,QAAS,MAAK;MACnC,IAAI,CAACrO,EAAE,CAACuO,SAAS,EAAE,UAACX,OAAO,EAAK;QAC9B,IAAIY,OAAO;QACX,IAAI,OAAOF,IAAI,KAAK,UAAU,EAAE;UAC9BE,OAAO,GAAGF,IAAI,CAAC;YAAE1O,KAAK,EAAEgO,OAAO,CAAChO,KAAK;YAAE5F,OAAO,EAAE4T,OAAO,CAAC5T;UAAQ,CAAC,CAAC;QACpE,CAAC,MAAM;UACLwU,OAAO,GAAGF,IAAI;QAChB;QAEA,IAAIE,OAAO,EAAE;UACXZ,OAAO,CAACpV,KAAK,CAAE,GAAEgW,OAAQ,IAAG,CAAC;QAC/B;MACF,CAAC,CAAC;MACF,OAAO,IAAI;IACb;EAAC;EAAA,OAAA5Y,OAAA;AAAA,EAniEmBnB,YAAY;AA8iElC,SAAS2T,qBAAqBA,CAAC1N,GAAG,EAAE/D,IAAI,EAAE;EACxC,IAAMqX,UAAU,GAAGtT,GAAG,CAACzB,cAAc,IAAItC,IAAI,CAACgN,IAAI,CAAC,UAAA2C,GAAG;IAAA,OAAIA,GAAG,KAAK5L,GAAG,CAACrB,aAAa,IAAIiN,GAAG,KAAK5L,GAAG,CAACtB,cAAc;EAAA,EAAC;EAClH,IAAI4U,UAAU,EAAE;IACdtT,GAAG,CAAC+P,UAAU,CAAC,CAAC;IAEhB/P,GAAG,CAACqD,KAAK,CAAC,CAAC,EAAE,yBAAyB,EAAE,cAAc,CAAC;EACzD;AACF;AAUA,SAAS0G,0BAA0BA,CAAC9N,IAAI,EAAE;EAKxC,OAAOA,IAAI,CAACuV,GAAG,CAAC,UAAC5F,GAAG,EAAK;IACvB,IAAI,CAACA,GAAG,CAACwF,UAAU,CAAC,WAAW,CAAC,EAAE;MAChC,OAAOxF,GAAG;IACZ;IACA,IAAImI,WAAW;IACf,IAAIC,SAAS,GAAG,WAAW;IAC3B,IAAIC,SAAS,GAAG,MAAM;IACtB,IAAIpU,KAAK;IACT,IAAI,CAACA,KAAK,GAAG+L,GAAG,CAAC/L,KAAK,CAAC,sBAAsB,CAAC,MAAM,IAAI,EAAE;MAExDkU,WAAW,GAAGlU,KAAK,CAAC,CAAC,CAAC;IACxB,CAAC,MAAM,IAAI,CAACA,KAAK,GAAG+L,GAAG,CAAC/L,KAAK,CAAC,oCAAoC,CAAC,MAAM,IAAI,EAAE;MAC7EkU,WAAW,GAAGlU,KAAK,CAAC,CAAC,CAAC;MACtB,IAAI,OAAO,CAACyP,IAAI,CAACzP,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;QAE1BoU,SAAS,GAAGpU,KAAK,CAAC,CAAC,CAAC;MACtB,CAAC,MAAM;QAELmU,SAAS,GAAGnU,KAAK,CAAC,CAAC,CAAC;MACtB;IACF,CAAC,MAAM,IAAI,CAACA,KAAK,GAAG+L,GAAG,CAAC/L,KAAK,CAAC,0CAA0C,CAAC,MAAM,IAAI,EAAE;MAEnFkU,WAAW,GAAGlU,KAAK,CAAC,CAAC,CAAC;MACtBmU,SAAS,GAAGnU,KAAK,CAAC,CAAC,CAAC;MACpBoU,SAAS,GAAGpU,KAAK,CAAC,CAAC,CAAC;IACtB;IAEA,IAAIkU,WAAW,IAAIE,SAAS,KAAK,GAAG,EAAE;MACpC,OAAQ,GAAEF,WAAY,IAAGC,SAAU,IAAGE,QAAQ,CAACD,SAAS,CAAC,GAAG,CAAE,EAAC;IACjE;IACA,OAAOrI,GAAG;EACZ,CAAC,CAAC;AACJ;AAQA,SAAS1E,oBAAoBA,CAACiN,YAAY,EAAE;EAC1C,IAAMrH,MAAM,GAAG,EAAE;EACjB,KAAK,IAAIxN,OAAO,GAAG6U,YAAY,EAAE7U,OAAO,EAAEA,OAAO,GAAGA,OAAO,CAACzD,MAAM,EAAE;IAClEiR,MAAM,CAACtM,IAAI,CAAClB,OAAO,CAAC;EACtB;EACA,OAAOwN,MAAM;AACf;AAEAsH,OAAO,CAAClZ,OAAO,GAAGA,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}