{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar tslib_1 = require(\"tslib\");\nvar path_1 = tslib_1.__importDefault(require(\"path\"));\nvar url_1 = tslib_1.__importDefault(require(\"url\"));\nvar debug_1 = tslib_1.__importDefault(require(\"debug\"));\nvar assert_1 = tslib_1.__importDefault(require(\"assert\"));\nvar get_port_1 = tslib_1.__importDefault(require(\"get-port\"));\nvar http_1 = tslib_1.__importDefault(require(\"http\"));\nvar glob_1 = require(\"glob\");\nvar fs_1 = require(\"fs\");\nvar utils_1 = require(\"../utils\");\nvar constants_1 = require(\"../constants\");\nvar user_interface_1 = tslib_1.__importDefault(require(\"../user-interface\"));\nvar child_process_1 = require(\"child_process\");\nvar debug = debug_1.default('devcert:platforms:shared');\nfunction doForNSSCertDB(nssDirGlob, callback) {\n  glob_1.sync(nssDirGlob).forEach(function (potentialNSSDBDir) {\n    debug(`checking to see if ${potentialNSSDBDir} is a valid NSS database directory`);\n    if (fs_1.existsSync(path_1.default.join(potentialNSSDBDir, 'cert8.db'))) {\n      debug(`Found legacy NSS database in ${potentialNSSDBDir}, running callback...`);\n      callback(potentialNSSDBDir, 'legacy');\n    }\n    if (fs_1.existsSync(path_1.default.join(potentialNSSDBDir, 'cert9.db'))) {\n      debug(`Found modern NSS database in ${potentialNSSDBDir}, running callback...`);\n      callback(potentialNSSDBDir, 'modern');\n    }\n  });\n}\nfunction addCertificateToNSSCertDB(nssDirGlob, certPath, certutilPath) {\n  debug(`trying to install certificate into NSS databases in ${nssDirGlob}`);\n  doForNSSCertDB(nssDirGlob, function (dir, version) {\n    var dirArg = version === 'modern' ? `sql:${dir}` : dir;\n    utils_1.run(certutilPath, ['-A', '-d', dirArg, '-t', 'C,,', '-i', certPath, '-n', 'devcert']);\n  });\n  debug(`finished scanning & installing certificate in NSS databases in ${nssDirGlob}`);\n}\nexports.addCertificateToNSSCertDB = addCertificateToNSSCertDB;\nfunction removeCertificateFromNSSCertDB(nssDirGlob, certPath, certutilPath) {\n  debug(`trying to remove certificates from NSS databases in ${nssDirGlob}`);\n  doForNSSCertDB(nssDirGlob, function (dir, version) {\n    var dirArg = version === 'modern' ? `sql:${dir}` : dir;\n    try {\n      utils_1.run(certutilPath, ['-A', '-d', dirArg, '-t', 'C,,', '-i', certPath, '-n', 'devcert']);\n    } catch (e) {\n      debug(`failed to remove ${certPath} from ${dir}, continuing. ${e.toString()}`);\n    }\n  });\n  debug(`finished scanning & installing certificate in NSS databases in ${nssDirGlob}`);\n}\nexports.removeCertificateFromNSSCertDB = removeCertificateFromNSSCertDB;\nfunction closeFirefox() {\n  return tslib_1.__awaiter(this, void 0, void 0, function* () {\n    if (isFirefoxOpen()) {\n      yield user_interface_1.default.closeFirefoxBeforeContinuing();\n      while (isFirefoxOpen()) {\n        yield sleep(50);\n      }\n    }\n  });\n}\nexports.closeFirefox = closeFirefox;\nfunction isFirefoxOpen() {\n  assert_1.default(constants_1.isMac || constants_1.isLinux, 'checkForOpenFirefox was invoked on a platform other than Mac or Linux');\n  return child_process_1.execSync('ps aux').indexOf('firefox') > -1;\n}\nfunction sleep(ms) {\n  return tslib_1.__awaiter(this, void 0, void 0, function* () {\n    return new Promise(function (resolve) {\n      return setTimeout(resolve, ms);\n    });\n  });\n}\nfunction openCertificateInFirefox(firefoxPath, certPath) {\n  return tslib_1.__awaiter(this, void 0, void 0, function* () {\n    var _this = this;\n    debug('Adding devert to Firefox trust stores manually. Launching a webserver to host our certificate temporarily ...');\n    var port = yield get_port_1.default();\n    var server = http_1.default.createServer(function (req, res) {\n      return tslib_1.__awaiter(_this, void 0, void 0, function* () {\n        var _url_1$default$parse = url_1.default.parse(req.url),\n          pathname = _url_1$default$parse.pathname;\n        if (pathname === '/certificate') {\n          res.writeHead(200, {\n            'Content-type': 'application/x-x509-ca-cert'\n          });\n          res.write(fs_1.readFileSync(certPath));\n          res.end();\n        } else {\n          res.writeHead(200);\n          res.write(yield user_interface_1.default.firefoxWizardPromptPage(`http://localhost:${port}/certificate`));\n          res.end();\n        }\n      });\n    }).listen(port);\n    debug('Certificate server is up. Printing instructions for user and launching Firefox with hosted certificate URL');\n    yield user_interface_1.default.startFirefoxWizard(`http://localhost:${port}`);\n    utils_1.run(firefoxPath, [`http://localhost:${port}`]);\n    yield user_interface_1.default.waitForFirefoxWizard();\n    server.close();\n  });\n}\nexports.openCertificateInFirefox = openCertificateInFirefox;\nfunction assertNotTouchingFiles(filepath, operation) {\n  if (!filepath.startsWith(constants_1.configDir) && !filepath.startsWith(constants_1.getLegacyConfigDir())) {\n    throw new Error(`Devcert cannot ${operation} ${filepath}; it is outside known devcert config directories!`);\n  }\n}\nexports.assertNotTouchingFiles = assertNotTouchingFiles;","map":{"version":3,"names":["path_1","tslib_1","__importDefault","require","url_1","debug_1","assert_1","get_port_1","http_1","glob_1","fs_1","utils_1","constants_1","user_interface_1","child_process_1","debug","default","doForNSSCertDB","nssDirGlob","callback","sync","forEach","potentialNSSDBDir","existsSync","join","addCertificateToNSSCertDB","certPath","certutilPath","dir","version","dirArg","run","exports","removeCertificateFromNSSCertDB","e","toString","closeFirefox","isFirefoxOpen","closeFirefoxBeforeContinuing","sleep","isMac","isLinux","execSync","indexOf","ms","Promise","resolve","setTimeout","openCertificateInFirefox","firefoxPath","port","server","createServer","req","res","__awaiter","_this","_url_1$default$parse","parse","url","pathname","writeHead","write","readFileSync","end","firefoxWizardPromptPage","listen","startFirefoxWizard","waitForFirefoxWizard","close","assertNotTouchingFiles","filepath","operation","startsWith","configDir","getLegacyConfigDir","Error"],"sources":["\\Users\\evanbacon\\Documents\\GitHub\\devcert\\platforms\\shared.ts"],"sourcesContent":["import path from 'path';\nimport url from 'url';\nimport createDebug from 'debug';\nimport assert from 'assert';\nimport getPort from 'get-port';\nimport http from 'http';\nimport { sync as glob } from 'glob';\nimport { readFileSync as readFile, existsSync as exists } from 'fs';\nimport { run } from '../utils';\nimport { isMac, isLinux , configDir, getLegacyConfigDir } from '../constants';\nimport UI from '../user-interface';\nimport { execSync as exec } from 'child_process';\n\nconst debug = createDebug('devcert:platforms:shared');\n\n/**\n *  Given a directory or glob pattern of directories, run a callback for each db\n *  directory, with a version argument.\n */\nfunction doForNSSCertDB(nssDirGlob: string, callback: (dir: string, version: \"legacy\" | \"modern\") => void): void {\n  glob(nssDirGlob).forEach((potentialNSSDBDir) => {\n    debug(`checking to see if ${ potentialNSSDBDir } is a valid NSS database directory`);\n    if (exists(path.join(potentialNSSDBDir, 'cert8.db'))) {\n      debug(`Found legacy NSS database in ${ potentialNSSDBDir }, running callback...`)\n      callback(potentialNSSDBDir, 'legacy');\n    }\n    if (exists(path.join(potentialNSSDBDir, 'cert9.db'))) {\n      debug(`Found modern NSS database in ${ potentialNSSDBDir }, running callback...`)\n      callback(potentialNSSDBDir, 'modern');\n    }\n  });\n}\n\n/**\n *  Given a directory or glob pattern of directories, attempt to install the\n *  CA certificate to each directory containing an NSS database.\n */\nexport function addCertificateToNSSCertDB(nssDirGlob: string, certPath: string, certutilPath: string): void {\n  debug(`trying to install certificate into NSS databases in ${ nssDirGlob }`);\n  doForNSSCertDB(nssDirGlob, (dir, version) => {\n    const dirArg = version === 'modern' ? `sql:${ dir }` : dir;\n      run(certutilPath, ['-A', '-d', dirArg, '-t', 'C,,', '-i', certPath, '-n', 'devcert']);\n  });\n  debug(`finished scanning & installing certificate in NSS databases in ${ nssDirGlob }`);\n}\n\nexport function removeCertificateFromNSSCertDB(nssDirGlob: string, certPath: string, certutilPath: string): void {\n  debug(`trying to remove certificates from NSS databases in ${ nssDirGlob }`);\n  doForNSSCertDB(nssDirGlob, (dir, version) => {\n    const dirArg = version === 'modern' ? `sql:${ dir }` : dir;\n    try {\n      run(certutilPath, ['-A', '-d', dirArg, '-t', 'C,,', '-i', certPath, '-n', 'devcert']);\n    } catch (e) {\n      debug(`failed to remove ${ certPath } from ${ dir }, continuing. ${ e.toString() }`)\n    }\n  });\n  debug(`finished scanning & installing certificate in NSS databases in ${ nssDirGlob }`);\n}\n\n/**\n *  Check to see if Firefox is still running, and if so, ask the user to close\n *  it. Poll until it's closed, then return.\n *\n * This is needed because Firefox appears to load the NSS database in-memory on\n * startup, and overwrite on exit. So we have to ask the user to quite Firefox\n * first so our changes don't get overwritten.\n */\nexport async function closeFirefox(): Promise<void> {\n  if (isFirefoxOpen()) {\n    await UI.closeFirefoxBeforeContinuing();\n    while(isFirefoxOpen()) {\n      await sleep(50);\n    }\n  }\n}\n\n/**\n * Check if Firefox is currently open\n */\nfunction isFirefoxOpen() {\n  // NOTE: We use some Windows-unfriendly methods here (ps) because Windows\n  // never needs to check this, because it doesn't update the NSS DB\n  // automaticaly.\n  assert(isMac || isLinux, 'checkForOpenFirefox was invoked on a platform other than Mac or Linux');\n  return exec('ps aux').indexOf('firefox') > -1;\n}\n\nasync function sleep(ms: number) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n/**\n * Firefox manages it's own trust store for SSL certificates, which can be\n * managed via the certutil command (supplied by NSS tooling packages). In the\n * event that certutil is not already installed, and either can't be installed\n * (Windows) or the user doesn't want to install it (skipCertutilInstall:\n * true), it means that we can't programmatically tell Firefox to trust our\n * root CA certificate.\n *\n * There is a recourse though. When a Firefox tab is directed to a URL that\n * responds with a certificate, it will automatically prompt the user if they\n * want to add it to their trusted certificates. So if we can't automatically\n * install the certificate via certutil, we instead start a quick web server\n * and host our certificate file. Then we open the hosted cert URL in Firefox\n * to kick off the GUI flow.\n *\n * This method does all this, along with providing user prompts in the terminal\n * to walk them through this process.\n */\nexport async function openCertificateInFirefox(firefoxPath: string, certPath: string): Promise<void> {\n  debug('Adding devert to Firefox trust stores manually. Launching a webserver to host our certificate temporarily ...');\n  let port = await getPort();\n  let server = http.createServer(async (req, res) => {\n    let { pathname } = url.parse(req.url);\n    if (pathname === '/certificate') {\n      res.writeHead(200, { 'Content-type': 'application/x-x509-ca-cert' });\n      res.write(readFile(certPath));\n      res.end();\n    } else {\n      res.writeHead(200);\n      res.write(await UI.firefoxWizardPromptPage(`http://localhost:${ port }/certificate`));\n      res.end();\n    }\n  }).listen(port);\n  debug('Certificate server is up. Printing instructions for user and launching Firefox with hosted certificate URL');\n  await UI.startFirefoxWizard(`http://localhost:${ port }`);\n  run(firefoxPath, [`http://localhost:${ port }`]);\n  await UI.waitForFirefoxWizard();\n  server.close();\n}\n\nexport function assertNotTouchingFiles(filepath: string, operation: string): void {\n    if (!filepath.startsWith(configDir) && !filepath.startsWith(getLegacyConfigDir())) {\n      throw new Error(`Devcert cannot ${ operation } ${ filepath }; it is outside known devcert config directories!`);\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}