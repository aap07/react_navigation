{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport path from 'path';\nimport { existsSync as exists, readFileSync as read, writeFileSync as writeFile } from 'fs';\nimport createDebug from 'debug';\nimport { sync as commandExists } from 'command-exists';\nimport { addCertificateToNSSCertDB, assertNotTouchingFiles, openCertificateInFirefox, closeFirefox, removeCertificateFromNSSCertDB } from \"./shared\";\nimport { run, sudoAppend } from \"../utils\";\nimport UI from \"../user-interface\";\nvar debug = createDebug('devcert:platforms:linux');\nvar LinuxPlatform = function () {\n  function LinuxPlatform() {\n    _classCallCheck(this, LinuxPlatform);\n    this.FIREFOX_NSS_DIR = path.join(process.env.HOME, '.mozilla/firefox/*');\n    this.CHROME_NSS_DIR = path.join(process.env.HOME, '.pki/nssdb');\n    this.FIREFOX_BIN_PATH = '/usr/bin/firefox';\n    this.CHROME_BIN_PATH = '/usr/bin/google-chrome';\n    this.HOST_FILE_PATH = '/etc/hosts';\n  }\n  _createClass(LinuxPlatform, [{\n    key: \"addToTrustStores\",\n    value: function () {\n      var _addToTrustStores = _asyncToGenerator(function* (certificatePath) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        debug('Adding devcert root CA to Linux system-wide trust stores');\n        run('sudo', ['cp', certificatePath, '/usr/local/share/ca-certificates/devcert.crt']);\n        run('sudo', ['update-ca-certificates']);\n        if (this.isFirefoxInstalled()) {\n          debug('Firefox install detected: adding devcert root CA to Firefox-specific trust stores ...');\n          if (!commandExists('certutil')) {\n            if (options.skipCertutilInstall) {\n              debug('NSS tooling is not already installed, and `skipCertutil` is true, so falling back to manual certificate install for Firefox');\n              openCertificateInFirefox(this.FIREFOX_BIN_PATH, certificatePath);\n            } else {\n              debug('NSS tooling is not already installed. Trying to install NSS tooling now with `apt install`');\n              run('sudo', ['apt', 'install', 'libnss3-tools']);\n              debug('Installing certificate into Firefox trust stores using NSS tooling');\n              yield closeFirefox();\n              yield addCertificateToNSSCertDB(this.FIREFOX_NSS_DIR, certificatePath, 'certutil');\n            }\n          }\n        } else {\n          debug('Firefox does not appear to be installed, skipping Firefox-specific steps...');\n        }\n        if (this.isChromeInstalled()) {\n          debug('Chrome install detected: adding devcert root CA to Chrome trust store ...');\n          if (!commandExists('certutil')) {\n            UI.warnChromeOnLinuxWithoutCertutil();\n          } else {\n            yield closeFirefox();\n            yield addCertificateToNSSCertDB(this.CHROME_NSS_DIR, certificatePath, 'certutil');\n          }\n        } else {\n          debug('Chrome does not appear to be installed, skipping Chrome-specific steps...');\n        }\n      });\n      function addToTrustStores(_x) {\n        return _addToTrustStores.apply(this, arguments);\n      }\n      return addToTrustStores;\n    }()\n  }, {\n    key: \"removeFromTrustStores\",\n    value: function removeFromTrustStores(certificatePath) {\n      try {\n        run('sudo', ['rm', '/usr/local/share/ca-certificates/devcert.crt']);\n        run('sudo', ['update-ca-certificates']);\n      } catch (e) {\n        debug(`failed to remove ${certificatePath} from /usr/local/share/ca-certificates, continuing. ${e.toString()}`);\n      }\n      if (commandExists('certutil')) {\n        if (this.isFirefoxInstalled()) {\n          removeCertificateFromNSSCertDB(this.FIREFOX_NSS_DIR, certificatePath, 'certutil');\n        }\n        if (this.isChromeInstalled()) {\n          removeCertificateFromNSSCertDB(this.CHROME_NSS_DIR, certificatePath, 'certutil');\n        }\n      }\n    }\n  }, {\n    key: \"addDomainToHostFileIfMissing\",\n    value: function () {\n      var _addDomainToHostFileIfMissing = _asyncToGenerator(function* (domain) {\n        var trimDomain = domain.trim().replace(/[\\s;]/g, '');\n        var hostsFileContents = read(this.HOST_FILE_PATH, 'utf8');\n        if (!hostsFileContents.includes(trimDomain)) {\n          sudoAppend(this.HOST_FILE_PATH, `127.0.0.1 ${trimDomain}\\n`);\n        }\n      });\n      function addDomainToHostFileIfMissing(_x2) {\n        return _addDomainToHostFileIfMissing.apply(this, arguments);\n      }\n      return addDomainToHostFileIfMissing;\n    }()\n  }, {\n    key: \"deleteProtectedFiles\",\n    value: function deleteProtectedFiles(filepath) {\n      assertNotTouchingFiles(filepath, 'delete');\n      run('sudo', ['rm', '-rf', filepath]);\n    }\n  }, {\n    key: \"readProtectedFile\",\n    value: function () {\n      var _readProtectedFile = _asyncToGenerator(function* (filepath) {\n        assertNotTouchingFiles(filepath, 'read');\n        return (yield run('sudo', ['cat', filepath])).toString().trim();\n      });\n      function readProtectedFile(_x3) {\n        return _readProtectedFile.apply(this, arguments);\n      }\n      return readProtectedFile;\n    }()\n  }, {\n    key: \"writeProtectedFile\",\n    value: function () {\n      var _writeProtectedFile = _asyncToGenerator(function* (filepath, contents) {\n        assertNotTouchingFiles(filepath, 'write');\n        if (exists(filepath)) {\n          yield run('sudo', ['rm', filepath]);\n        }\n        writeFile(filepath, contents);\n        yield run('sudo', ['chown', '0', filepath]);\n        yield run('sudo', ['chmod', '600', filepath]);\n      });\n      function writeProtectedFile(_x4, _x5) {\n        return _writeProtectedFile.apply(this, arguments);\n      }\n      return writeProtectedFile;\n    }()\n  }, {\n    key: \"isFirefoxInstalled\",\n    value: function isFirefoxInstalled() {\n      return exists(this.FIREFOX_BIN_PATH);\n    }\n  }, {\n    key: \"isChromeInstalled\",\n    value: function isChromeInstalled() {\n      return exists(this.CHROME_BIN_PATH);\n    }\n  }]);\n  return LinuxPlatform;\n}();\nexport { LinuxPlatform as default };","map":{"version":3,"names":["path","existsSync","exists","readFileSync","read","writeFileSync","writeFile","createDebug","sync","commandExists","addCertificateToNSSCertDB","assertNotTouchingFiles","openCertificateInFirefox","closeFirefox","removeCertificateFromNSSCertDB","run","sudoAppend","UI","debug","LinuxPlatform","_classCallCheck","FIREFOX_NSS_DIR","join","process","env","HOME","CHROME_NSS_DIR","FIREFOX_BIN_PATH","CHROME_BIN_PATH","HOST_FILE_PATH","_createClass","key","value","_addToTrustStores","_asyncToGenerator","certificatePath","options","arguments","length","undefined","isFirefoxInstalled","skipCertutilInstall","isChromeInstalled","warnChromeOnLinuxWithoutCertutil","addToTrustStores","_x","apply","removeFromTrustStores","e","toString","_addDomainToHostFileIfMissing","domain","trimDomain","trim","replace","hostsFileContents","includes","addDomainToHostFileIfMissing","_x2","deleteProtectedFiles","filepath","_readProtectedFile","readProtectedFile","_x3","_writeProtectedFile","contents","writeProtectedFile","_x4","_x5","default"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/devcert/src/platforms/linux.ts"],"sourcesContent":["import path from 'path';\nimport { existsSync as exists, readFileSync as read, writeFileSync as writeFile } from 'fs';\nimport createDebug from 'debug';\nimport { sync as commandExists } from 'command-exists';\nimport { addCertificateToNSSCertDB, assertNotTouchingFiles, openCertificateInFirefox, closeFirefox, removeCertificateFromNSSCertDB } from './shared';\nimport { run, sudoAppend } from '../utils';\nimport { Options } from '../index';\nimport UI from '../user-interface';\nimport { Platform } from '.';\n\nconst debug = createDebug('devcert:platforms:linux');\n\nexport default class LinuxPlatform implements Platform {\n\n  private FIREFOX_NSS_DIR = path.join(process.env.HOME, '.mozilla/firefox/*');\n  private CHROME_NSS_DIR = path.join(process.env.HOME, '.pki/nssdb');\n  private FIREFOX_BIN_PATH = '/usr/bin/firefox';\n  private CHROME_BIN_PATH = '/usr/bin/google-chrome';\n\n  private HOST_FILE_PATH = '/etc/hosts';\n\n  /**\n   * Linux is surprisingly difficult. There seems to be multiple system-wide\n   * repositories for certs, so we copy ours to each. However, Firefox does it's\n   * usual separate trust store. Plus Chrome relies on the NSS tooling (like\n   * Firefox), but uses the user's NSS database, unlike Firefox (which uses a\n   * separate Mozilla one). And since Chrome doesn't prompt the user with a GUI\n   * flow when opening certs, if we can't use certutil to install our certificate\n   * into the user's NSS database, we're out of luck.\n   */\n  async addToTrustStores(certificatePath: string, options: Options = {}): Promise<void> {\n\n    debug('Adding devcert root CA to Linux system-wide trust stores');\n    // run(`sudo cp ${ certificatePath } /etc/ssl/certs/devcert.crt`);\n    run('sudo', ['cp', certificatePath, '/usr/local/share/ca-certificates/devcert.crt']);\n    // run(`sudo bash -c \"cat ${ certificatePath } >> /etc/ssl/certs/ca-certificates.crt\"`);\n    run('sudo', ['update-ca-certificates']);\n\n    if (this.isFirefoxInstalled()) {\n      // Firefox\n      debug('Firefox install detected: adding devcert root CA to Firefox-specific trust stores ...');\n      if (!commandExists('certutil')) {\n        if (options.skipCertutilInstall) {\n          debug('NSS tooling is not already installed, and `skipCertutil` is true, so falling back to manual certificate install for Firefox');\n          openCertificateInFirefox(this.FIREFOX_BIN_PATH, certificatePath);\n        } else {\n          debug('NSS tooling is not already installed. Trying to install NSS tooling now with `apt install`');\n          run('sudo',  ['apt', 'install', 'libnss3-tools']);\n          debug('Installing certificate into Firefox trust stores using NSS tooling');\n          await closeFirefox();\n          await addCertificateToNSSCertDB(this.FIREFOX_NSS_DIR, certificatePath, 'certutil');\n        }\n      }\n    } else {\n      debug('Firefox does not appear to be installed, skipping Firefox-specific steps...');\n    }\n\n    if (this.isChromeInstalled()) {\n      debug('Chrome install detected: adding devcert root CA to Chrome trust store ...');\n      if (!commandExists('certutil')) {\n        UI.warnChromeOnLinuxWithoutCertutil();\n      } else {\n        await closeFirefox();\n        await addCertificateToNSSCertDB(this.CHROME_NSS_DIR, certificatePath, 'certutil');\n      }\n    } else {\n      debug('Chrome does not appear to be installed, skipping Chrome-specific steps...');\n    }\n  }\n  \n  removeFromTrustStores(certificatePath: string) {\n    try {\n      run('sudo', ['rm', '/usr/local/share/ca-certificates/devcert.crt']);\n      run('sudo', ['update-ca-certificates']);\n    } catch (e) {\n      debug(`failed to remove ${ certificatePath } from /usr/local/share/ca-certificates, continuing. ${ e.toString() }`);\n    }\n    if (commandExists('certutil')) {\n      if (this.isFirefoxInstalled()) {\n        removeCertificateFromNSSCertDB(this.FIREFOX_NSS_DIR, certificatePath, 'certutil');\n      }\n      if (this.isChromeInstalled()) {\n        removeCertificateFromNSSCertDB(this.CHROME_NSS_DIR, certificatePath, 'certutil');\n      }\n    }\n  }\n\n  async addDomainToHostFileIfMissing(domain: string) {\n    const trimDomain = domain.trim().replace(/[\\s;]/g,'')\n    let hostsFileContents = read(this.HOST_FILE_PATH, 'utf8');\n    if (!hostsFileContents.includes(trimDomain)) {\n      sudoAppend(this.HOST_FILE_PATH, `127.0.0.1 ${trimDomain}\\n`);\n    }\n  }\n\n  deleteProtectedFiles(filepath: string) {\n    assertNotTouchingFiles(filepath, 'delete');\n    run('sudo', ['rm', '-rf', filepath]);\n  }\n\n  async readProtectedFile(filepath: string) {\n    assertNotTouchingFiles(filepath, 'read');\n    return (await run('sudo', ['cat', filepath])).toString().trim();\n  }\n\n  async writeProtectedFile(filepath: string, contents: string) {\n    assertNotTouchingFiles(filepath, 'write');\n    if (exists(filepath)) {\n      await run('sudo', ['rm', filepath]);\n    }\n    writeFile(filepath, contents);\n    await run('sudo', ['chown', '0', filepath]);\n    await run('sudo', ['chmod', '600', filepath]);\n  }\n\n  private isFirefoxInstalled() {\n    return exists(this.FIREFOX_BIN_PATH);\n  }\n\n  private isChromeInstalled() {\n    return exists(this.CHROME_BIN_PATH);\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}