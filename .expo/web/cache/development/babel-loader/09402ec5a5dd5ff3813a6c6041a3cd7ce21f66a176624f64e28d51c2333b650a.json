{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addBlockedPermissions = addBlockedPermissions;\nexports.addPermission = addPermission;\nexports.addPermissionToManifest = addPermissionToManifest;\nexports.ensurePermission = ensurePermission;\nexports.ensurePermissionNameFormat = ensurePermissionNameFormat;\nexports.ensurePermissions = ensurePermissions;\nexports.getAndroidPermissions = getAndroidPermissions;\nexports.getPermissions = getPermissions;\nexports.isPermissionAlreadyRequested = isPermissionAlreadyRequested;\nexports.removePermissions = removePermissions;\nexports.setAndroidPermissions = setAndroidPermissions;\nexports.withPermissions = exports.withInternalBlockedPermissions = exports.withBlockedPermissions = void 0;\nfunction _androidPlugins() {\n  var data = require(\"../plugins/android-plugins\");\n  _androidPlugins = function _androidPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _Manifest() {\n  var data = require(\"./Manifest\");\n  _Manifest = function _Manifest() {\n    return data;\n  };\n  return data;\n}\nvar USES_PERMISSION = 'uses-permission';\nvar withPermissions = function withPermissions(config, permissions) {\n  if (Array.isArray(permissions)) {\n    permissions = permissions.filter(Boolean);\n    if (!config.android) config.android = {};\n    if (!config.android.permissions) config.android.permissions = [];\n    config.android.permissions = _toConsumableArray(new Set(config.android.permissions.concat(permissions)));\n  }\n  return (0, _androidPlugins().withAndroidManifest)(config, function () {\n    var _ref = _asyncToGenerator(function* (config) {\n      config.modResults = yield setAndroidPermissions(config, config.modResults);\n      return config;\n    });\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n};\nexports.withPermissions = withPermissions;\nvar withBlockedPermissions = function withBlockedPermissions(config, permissions) {\n  var _config$android;\n  var resolvedPermissions = prefixAndroidPermissionsIfNecessary((Array.isArray(permissions) ? permissions : [permissions]).filter(Boolean));\n  if (config !== null && config !== void 0 && (_config$android = config.android) !== null && _config$android !== void 0 && _config$android.permissions && Array.isArray(config.android.permissions)) {\n    config.android.permissions = prefixAndroidPermissionsIfNecessary(config.android.permissions).filter(function (permission) {\n      return !resolvedPermissions.includes(permission);\n    });\n  }\n  return (0, _androidPlugins().withAndroidManifest)(config, function () {\n    var _ref2 = _asyncToGenerator(function* (config) {\n      config.modResults = (0, _Manifest().ensureToolsAvailable)(config.modResults);\n      config.modResults = addBlockedPermissions(config.modResults, resolvedPermissions);\n      return config;\n    });\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n};\nexports.withBlockedPermissions = withBlockedPermissions;\nvar withInternalBlockedPermissions = function withInternalBlockedPermissions(config) {\n  var _config$android2, _config$android2$bloc;\n  if ((_config$android2 = config.android) !== null && _config$android2 !== void 0 && (_config$android2$bloc = _config$android2.blockedPermissions) !== null && _config$android2$bloc !== void 0 && _config$android2$bloc.length) {\n    return withBlockedPermissions(config, config.android.blockedPermissions);\n  }\n  return config;\n};\nexports.withInternalBlockedPermissions = withInternalBlockedPermissions;\nfunction addBlockedPermissions(androidManifest, permissions) {\n  if (!Array.isArray(androidManifest.manifest['uses-permission'])) {\n    androidManifest.manifest['uses-permission'] = [];\n  }\n  for (var permission of prefixAndroidPermissionsIfNecessary(permissions)) {\n    androidManifest.manifest['uses-permission'] = ensureBlockedPermission(androidManifest.manifest['uses-permission'], permission);\n  }\n  return androidManifest;\n}\nfunction ensureBlockedPermission(manifestPermissions, permission) {\n  manifestPermissions = manifestPermissions.filter(function (e) {\n    return e.$['android:name'] !== permission;\n  });\n  manifestPermissions.push({\n    $: {\n      'android:name': permission,\n      'tools:node': 'remove'\n    }\n  });\n  return manifestPermissions;\n}\nfunction prefixAndroidPermissionsIfNecessary(permissions) {\n  return permissions.map(function (permission) {\n    if (!permission.includes('.')) {\n      return `android.permission.${permission}`;\n    }\n    return permission;\n  });\n}\nfunction getAndroidPermissions(config) {\n  var _config$android$permi, _config$android3;\n  return (_config$android$permi = (_config$android3 = config.android) === null || _config$android3 === void 0 ? void 0 : _config$android3.permissions) !== null && _config$android$permi !== void 0 ? _config$android$permi : [];\n}\nfunction setAndroidPermissions(config, androidManifest) {\n  var _androidManifest$mani;\n  var permissions = getAndroidPermissions(config);\n  var providedPermissions = prefixAndroidPermissionsIfNecessary(permissions);\n  var permissionsToAdd = _toConsumableArray(providedPermissions);\n  if (!androidManifest.manifest.hasOwnProperty('uses-permission')) {\n    androidManifest.manifest['uses-permission'] = [];\n  }\n  var manifestPermissions = (_androidManifest$mani = androidManifest.manifest['uses-permission']) !== null && _androidManifest$mani !== void 0 ? _androidManifest$mani : [];\n  permissionsToAdd.forEach(function (permission) {\n    if (!isPermissionAlreadyRequested(permission, manifestPermissions)) {\n      addPermissionToManifest(permission, manifestPermissions);\n    }\n  });\n  return androidManifest;\n}\nfunction isPermissionAlreadyRequested(permission, manifestPermissions) {\n  return manifestPermissions.some(function (e) {\n    return e.$['android:name'] === permission;\n  });\n}\nfunction addPermissionToManifest(permission, manifestPermissions) {\n  manifestPermissions.push({\n    $: {\n      'android:name': permission\n    }\n  });\n  return manifestPermissions;\n}\nfunction removePermissions(androidManifest, permissionNames) {\n  var targetNames = permissionNames ? permissionNames.map(ensurePermissionNameFormat) : null;\n  var permissions = androidManifest.manifest[USES_PERMISSION] || [];\n  var nextPermissions = [];\n  for (var attribute of permissions) {\n    if (targetNames) {\n      var value = attribute.$['android:name'] || attribute.$.name;\n      if (!targetNames.includes(value)) {\n        nextPermissions.push(attribute);\n      }\n    }\n  }\n  androidManifest.manifest[USES_PERMISSION] = nextPermissions;\n}\nfunction addPermission(androidManifest, permissionName) {\n  var usesPermissions = androidManifest.manifest[USES_PERMISSION] || [];\n  usesPermissions.push({\n    $: {\n      'android:name': permissionName\n    }\n  });\n  androidManifest.manifest[USES_PERMISSION] = usesPermissions;\n}\nfunction ensurePermissions(androidManifest, permissionNames) {\n  var permissions = getPermissions(androidManifest);\n  var results = {};\n  for (var permissionName of permissionNames) {\n    var targetName = ensurePermissionNameFormat(permissionName);\n    if (!permissions.includes(targetName)) {\n      addPermission(androidManifest, targetName);\n      results[permissionName] = true;\n    } else {\n      results[permissionName] = false;\n    }\n  }\n  return results;\n}\nfunction ensurePermission(androidManifest, permissionName) {\n  var permissions = getPermissions(androidManifest);\n  var targetName = ensurePermissionNameFormat(permissionName);\n  if (!permissions.includes(targetName)) {\n    addPermission(androidManifest, targetName);\n    return true;\n  }\n  return false;\n}\nfunction ensurePermissionNameFormat(permissionName) {\n  if (permissionName.includes('.')) {\n    var com = permissionName.split('.');\n    var name = com.pop();\n    return [].concat(_toConsumableArray(com), [name.toUpperCase()]).join('.');\n  } else {\n    return ensurePermissionNameFormat(`android.permission.${permissionName}`);\n  }\n}\nfunction getPermissions(androidManifest) {\n  var usesPermissions = androidManifest.manifest[USES_PERMISSION] || [];\n  var permissions = usesPermissions.map(function (permissionObject) {\n    return permissionObject.$['android:name'] || permissionObject.$.name;\n  });\n  return permissions;\n}","map":{"version":3,"names":["_androidPlugins","data","require","_Manifest","USES_PERMISSION","withPermissions","config","permissions","Array","isArray","filter","Boolean","android","_toConsumableArray","Set","concat","withAndroidManifest","_ref","_asyncToGenerator","modResults","setAndroidPermissions","_x","apply","arguments","exports","withBlockedPermissions","_config$android","resolvedPermissions","prefixAndroidPermissionsIfNecessary","permission","includes","_ref2","ensureToolsAvailable","addBlockedPermissions","_x2","withInternalBlockedPermissions","_config$android2","_config$android2$bloc","blockedPermissions","length","androidManifest","manifest","ensureBlockedPermission","manifestPermissions","e","$","push","map","getAndroidPermissions","_config$android$permi","_config$android3","_androidManifest$mani","providedPermissions","permissionsToAdd","hasOwnProperty","forEach","isPermissionAlreadyRequested","addPermissionToManifest","some","removePermissions","permissionNames","targetNames","ensurePermissionNameFormat","nextPermissions","attribute","value","name","addPermission","permissionName","usesPermissions","ensurePermissions","getPermissions","results","targetName","ensurePermission","com","split","pop","toUpperCase","join","permissionObject"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\android\\Permissions.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { ConfigPlugin } from '../Plugin.types';\nimport { withAndroidManifest } from '../plugins/android-plugins';\nimport { AndroidManifest, ensureToolsAvailable, ManifestUsesPermission } from './Manifest';\n\nconst USES_PERMISSION = 'uses-permission';\n\nexport const withPermissions: ConfigPlugin<string[] | void> = (config, permissions) => {\n  if (Array.isArray(permissions)) {\n    permissions = permissions.filter(Boolean);\n    if (!config.android) config.android = {};\n    if (!config.android.permissions) config.android.permissions = [];\n    config.android.permissions = [\n      // @ts-ignore\n      ...new Set(config.android.permissions.concat(permissions)),\n    ];\n  }\n  return withAndroidManifest(config, async (config) => {\n    config.modResults = await setAndroidPermissions(config, config.modResults);\n    return config;\n  });\n};\n\n/** Given a permission or list of permissions, block permissions in the final `AndroidManifest.xml` to ensure no installed library or plugin can add them. */\nexport const withBlockedPermissions: ConfigPlugin<string[] | string> = (config, permissions) => {\n  const resolvedPermissions = prefixAndroidPermissionsIfNecessary(\n    (Array.isArray(permissions) ? permissions : [permissions]).filter(Boolean)\n  );\n\n  if (config?.android?.permissions && Array.isArray(config.android.permissions)) {\n    // Remove any static config permissions\n    config.android.permissions = prefixAndroidPermissionsIfNecessary(\n      config.android.permissions\n    ).filter((permission) => !resolvedPermissions.includes(permission));\n  }\n\n  return withAndroidManifest(config, async (config) => {\n    config.modResults = ensureToolsAvailable(config.modResults);\n    config.modResults = addBlockedPermissions(config.modResults, resolvedPermissions);\n    return config;\n  });\n};\n\nexport const withInternalBlockedPermissions: ConfigPlugin = (config) => {\n  // Only add permissions if the user defined the property and added some values\n  // this ensures we don't add the `tools:*` namespace extraneously.\n  if (config.android?.blockedPermissions?.length) {\n    return withBlockedPermissions(config, config.android.blockedPermissions);\n  }\n\n  return config;\n};\n\nexport function addBlockedPermissions(androidManifest: AndroidManifest, permissions: string[]) {\n  if (!Array.isArray(androidManifest.manifest['uses-permission'])) {\n    androidManifest.manifest['uses-permission'] = [];\n  }\n\n  for (const permission of prefixAndroidPermissionsIfNecessary(permissions)) {\n    androidManifest.manifest['uses-permission'] = ensureBlockedPermission(\n      androidManifest.manifest['uses-permission'],\n      permission\n    );\n  }\n\n  return androidManifest;\n}\n\n/**\n * Filter any existing permissions matching the provided permission name, then add a\n * restricted permission to overwrite any extra permissions that may be added in a\n * third-party package's AndroidManifest.xml.\n *\n * @param manifestPermissions manifest `uses-permissions` array.\n * @param permission `android:name` of the permission to restrict\n * @returns\n */\nfunction ensureBlockedPermission(\n  manifestPermissions: ManifestUsesPermission[],\n  permission: string\n) {\n  // Remove permission if it currently exists\n  manifestPermissions = manifestPermissions.filter((e) => e.$['android:name'] !== permission);\n\n  // Add a permission with tools:node to overwrite any existing permission and ensure it's removed upon building.\n  manifestPermissions.push({\n    $: { 'android:name': permission, 'tools:node': 'remove' },\n  });\n  return manifestPermissions;\n}\n\nfunction prefixAndroidPermissionsIfNecessary(permissions: string[]): string[] {\n  return permissions.map((permission) => {\n    if (!permission.includes('.')) {\n      return `android.permission.${permission}`;\n    }\n    return permission;\n  });\n}\n\nexport function getAndroidPermissions(config: Pick<ExpoConfig, 'android'>): string[] {\n  return config.android?.permissions ?? [];\n}\n\nexport function setAndroidPermissions(\n  config: Pick<ExpoConfig, 'android'>,\n  androidManifest: AndroidManifest\n) {\n  const permissions = getAndroidPermissions(config);\n  const providedPermissions = prefixAndroidPermissionsIfNecessary(permissions);\n  const permissionsToAdd = [...providedPermissions];\n\n  if (!androidManifest.manifest.hasOwnProperty('uses-permission')) {\n    androidManifest.manifest['uses-permission'] = [];\n  }\n  // manifest.manifest['uses-permission'] = [];\n\n  const manifestPermissions = androidManifest.manifest['uses-permission'] ?? [];\n\n  permissionsToAdd.forEach((permission) => {\n    if (!isPermissionAlreadyRequested(permission, manifestPermissions)) {\n      addPermissionToManifest(permission, manifestPermissions);\n    }\n  });\n\n  return androidManifest;\n}\n\nexport function isPermissionAlreadyRequested(\n  permission: string,\n  manifestPermissions: ManifestUsesPermission[]\n): boolean {\n  return manifestPermissions.some((e) => e.$['android:name'] === permission);\n}\n\nexport function addPermissionToManifest(\n  permission: string,\n  manifestPermissions: ManifestUsesPermission[]\n) {\n  manifestPermissions.push({ $: { 'android:name': permission } });\n  return manifestPermissions;\n}\n\nexport function removePermissions(androidManifest: AndroidManifest, permissionNames?: string[]) {\n  const targetNames = permissionNames ? permissionNames.map(ensurePermissionNameFormat) : null;\n  const permissions = androidManifest.manifest[USES_PERMISSION] || [];\n  const nextPermissions = [];\n  for (const attribute of permissions) {\n    if (targetNames) {\n      // @ts-ignore: name isn't part of the type\n      const value = attribute.$['android:name'] || attribute.$.name;\n      if (!targetNames.includes(value)) {\n        nextPermissions.push(attribute);\n      }\n    }\n  }\n\n  androidManifest.manifest[USES_PERMISSION] = nextPermissions;\n}\n\nexport function addPermission(androidManifest: AndroidManifest, permissionName: string): void {\n  const usesPermissions: ManifestUsesPermission[] = androidManifest.manifest[USES_PERMISSION] || [];\n  usesPermissions.push({\n    $: { 'android:name': permissionName },\n  });\n  androidManifest.manifest[USES_PERMISSION] = usesPermissions;\n}\n\nexport function ensurePermissions(\n  androidManifest: AndroidManifest,\n  permissionNames: string[]\n): { [permission: string]: boolean } {\n  const permissions = getPermissions(androidManifest);\n\n  const results: { [permission: string]: boolean } = {};\n  for (const permissionName of permissionNames) {\n    const targetName = ensurePermissionNameFormat(permissionName);\n    if (!permissions.includes(targetName)) {\n      addPermission(androidManifest, targetName);\n      results[permissionName] = true;\n    } else {\n      results[permissionName] = false;\n    }\n  }\n  return results;\n}\n\nexport function ensurePermission(\n  androidManifest: AndroidManifest,\n  permissionName: string\n): boolean {\n  const permissions = getPermissions(androidManifest);\n  const targetName = ensurePermissionNameFormat(permissionName);\n\n  if (!permissions.includes(targetName)) {\n    addPermission(androidManifest, targetName);\n    return true;\n  }\n  return false;\n}\n\nexport function ensurePermissionNameFormat(permissionName: string): string {\n  if (permissionName.includes('.')) {\n    const com = permissionName.split('.');\n    const name = com.pop() as string;\n    return [...com, name.toUpperCase()].join('.');\n  } else {\n    // If shorthand form like `WRITE_CONTACTS` is provided, expand it to `android.permission.WRITE_CONTACTS`.\n    return ensurePermissionNameFormat(`android.permission.${permissionName}`);\n  }\n}\n\nexport function getPermissions(androidManifest: AndroidManifest): string[] {\n  const usesPermissions: { [key: string]: any }[] = androidManifest.manifest[USES_PERMISSION] || [];\n  const permissions = usesPermissions.map((permissionObject) => {\n    return permissionObject.$['android:name'] || permissionObject.$.name;\n  });\n  return permissions;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}