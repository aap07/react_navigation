{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.withAndroidSplashScreen = void 0;\nfunction _configPlugins() {\n  var data = require(\"@expo/config-plugins\");\n  _configPlugins = function _configPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _jsonFile() {\n  var data = _interopRequireDefault(require(\"@expo/json-file\"));\n  _jsonFile = function _jsonFile() {\n    return data;\n  };\n  return data;\n}\nfunction _resolveFrom() {\n  var data = _interopRequireDefault(require(\"resolve-from\"));\n  _resolveFrom = function _resolveFrom() {\n    return data;\n  };\n  return data;\n}\nfunction _semver() {\n  var data = _interopRequireDefault(require(\"semver\"));\n  _semver = function _semver() {\n    return data;\n  };\n  return data;\n}\nfunction _getAndroidSplashConfig() {\n  var data = require(\"./getAndroidSplashConfig\");\n  _getAndroidSplashConfig = function _getAndroidSplashConfig() {\n    return data;\n  };\n  return data;\n}\nfunction _withAndroidSplashDrawables() {\n  var data = require(\"./withAndroidSplashDrawables\");\n  _withAndroidSplashDrawables = function _withAndroidSplashDrawables() {\n    return data;\n  };\n  return data;\n}\nfunction _withAndroidSplashImages() {\n  var data = require(\"./withAndroidSplashImages\");\n  _withAndroidSplashImages = function _withAndroidSplashImages() {\n    return data;\n  };\n  return data;\n}\nfunction _withAndroidSplashLegacyMainActivity() {\n  var data = require(\"./withAndroidSplashLegacyMainActivity\");\n  _withAndroidSplashLegacyMainActivity = function _withAndroidSplashLegacyMainActivity() {\n    return data;\n  };\n  return data;\n}\nfunction _withAndroidSplashStrings() {\n  var data = require(\"./withAndroidSplashStrings\");\n  _withAndroidSplashStrings = function _withAndroidSplashStrings() {\n    return data;\n  };\n  return data;\n}\nfunction _withAndroidSplashStyles() {\n  var data = require(\"./withAndroidSplashStyles\");\n  _withAndroidSplashStyles = function _withAndroidSplashStyles() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar withAndroidSplashScreen = function withAndroidSplashScreen(config) {\n  var _config$androidStatus;\n  var splashConfig = (0, _getAndroidSplashConfig().getAndroidSplashConfig)(config);\n  var backgroundColor = (splashConfig === null || splashConfig === void 0 ? void 0 : splashConfig.backgroundColor) || '#ffffff';\n  if ((_config$androidStatus = config.androidStatusBar) !== null && _config$androidStatus !== void 0 && _config$androidStatus.backgroundColor) {\n    var _config$androidStatus2, _config$androidStatus3, _config$androidStatus4;\n    if (backgroundColor.toLowerCase() !== ((_config$androidStatus2 = config.androidStatusBar) === null || _config$androidStatus2 === void 0 ? void 0 : (_config$androidStatus3 = _config$androidStatus2.backgroundColor) === null || _config$androidStatus3 === void 0 ? void 0 : (_config$androidStatus4 = _config$androidStatus3.toLowerCase) === null || _config$androidStatus4 === void 0 ? void 0 : _config$androidStatus4.call(_config$androidStatus3))) {\n      _configPlugins().WarningAggregator.addWarningAndroid('androidStatusBar.backgroundColor', 'Color conflicts with the splash.backgroundColor');\n    }\n  } else {\n    if (!config.androidStatusBar) config.androidStatusBar = {};\n    config.androidStatusBar.backgroundColor = backgroundColor;\n  }\n  return (0, _configPlugins().withPlugins)(config, [_withAndroidSplashImages().withAndroidSplashImages, [_withAndroidSplashDrawables().withAndroidSplashDrawables, splashConfig]].concat(_toConsumableArray(shouldUpdateLegacyMainActivity(config) ? [_withAndroidSplashLegacyMainActivity().withAndroidSplashLegacyMainActivity] : []), [_withAndroidSplashStyles().withAndroidSplashStyles, _withAndroidSplashStrings().withAndroidSplashStrings]));\n};\nexports.withAndroidSplashScreen = withAndroidSplashScreen;\nfunction shouldUpdateLegacyMainActivity(config) {\n  try {\n    var _config$_internal;\n    var projectRoot = (_config$_internal = config._internal) === null || _config$_internal === void 0 ? void 0 : _config$_internal.projectRoot;\n    var packagePath = (0, _resolveFrom().default)(projectRoot, 'expo-splash-screen/package.json');\n    if (packagePath) {\n      var _JsonFile$read$versio, _JsonFile$read$versio2;\n      var version = (_JsonFile$read$versio = (_JsonFile$read$versio2 = _jsonFile().default.read(packagePath).version) === null || _JsonFile$read$versio2 === void 0 ? void 0 : _JsonFile$read$versio2.toString()) !== null && _JsonFile$read$versio !== void 0 ? _JsonFile$read$versio : '';\n      return _semver().default.lt(version, '0.12.0');\n    }\n    return !!(config.sdkVersion && _semver().default.lt(config.sdkVersion, '43.0.0'));\n  } catch (_unused) {}\n  return false;\n}","map":{"version":3,"names":["_configPlugins","data","require","_jsonFile","_interopRequireDefault","_resolveFrom","_semver","_getAndroidSplashConfig","_withAndroidSplashDrawables","_withAndroidSplashImages","_withAndroidSplashLegacyMainActivity","_withAndroidSplashStrings","_withAndroidSplashStyles","obj","__esModule","default","withAndroidSplashScreen","config","_config$androidStatus","splashConfig","getAndroidSplashConfig","backgroundColor","androidStatusBar","_config$androidStatus2","_config$androidStatus3","_config$androidStatus4","toLowerCase","call","WarningAggregator","addWarningAndroid","withPlugins","withAndroidSplashImages","withAndroidSplashDrawables","concat","_toConsumableArray","shouldUpdateLegacyMainActivity","withAndroidSplashLegacyMainActivity","withAndroidSplashStyles","withAndroidSplashStrings","exports","_config$_internal","projectRoot","_internal","packagePath","_JsonFile$read$versio","_JsonFile$read$versio2","version","read","toString","lt","sdkVersion","_unused"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\prebuild-config\\src\\plugins\\unversioned\\expo-splash-screen\\withAndroidSplashScreen.ts"],"sourcesContent":["import { ConfigPlugin, WarningAggregator, withPlugins } from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\nimport JsonFile from '@expo/json-file';\nimport resolveFrom from 'resolve-from';\nimport semver from 'semver';\n\nimport { getAndroidSplashConfig } from './getAndroidSplashConfig';\nimport { withAndroidSplashDrawables } from './withAndroidSplashDrawables';\nimport { withAndroidSplashImages } from './withAndroidSplashImages';\nimport { withAndroidSplashLegacyMainActivity } from './withAndroidSplashLegacyMainActivity';\nimport { withAndroidSplashStrings } from './withAndroidSplashStrings';\nimport { withAndroidSplashStyles } from './withAndroidSplashStyles';\n\nexport const withAndroidSplashScreen: ConfigPlugin = (config) => {\n  const splashConfig = getAndroidSplashConfig(config);\n\n  // Update the android status bar to match the splash screen\n  // androidStatusBar applies info to the app activity style.\n  const backgroundColor = splashConfig?.backgroundColor || '#ffffff';\n  if (config.androidStatusBar?.backgroundColor) {\n    if (\n      backgroundColor.toLowerCase() !== config.androidStatusBar?.backgroundColor?.toLowerCase?.()\n    ) {\n      WarningAggregator.addWarningAndroid(\n        'androidStatusBar.backgroundColor',\n        'Color conflicts with the splash.backgroundColor'\n      );\n    }\n  } else {\n    if (!config.androidStatusBar) config.androidStatusBar = {};\n    config.androidStatusBar.backgroundColor = backgroundColor;\n  }\n\n  return withPlugins(config, [\n    withAndroidSplashImages,\n    [withAndroidSplashDrawables, splashConfig],\n    ...(shouldUpdateLegacyMainActivity(config) ? [withAndroidSplashLegacyMainActivity] : []),\n    withAndroidSplashStyles,\n    withAndroidSplashStrings,\n  ]);\n};\n\nfunction shouldUpdateLegacyMainActivity(config: ExpoConfig): boolean {\n  try {\n    const projectRoot = config._internal?.projectRoot;\n    const packagePath = resolveFrom(projectRoot, 'expo-splash-screen/package.json');\n    if (packagePath) {\n      const version = JsonFile.read(packagePath).version?.toString() ?? '';\n      return semver.lt(version, '0.12.0');\n    }\n    // If expo-splash-screen didn't be installed or included in template, we check the sdkVersion instead.\n    return !!(config.sdkVersion && semver.lt(config.sdkVersion, '43.0.0'));\n  } catch {}\n  return false;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}