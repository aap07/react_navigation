{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCodeSigningInfoForPbxproj = getCodeSigningInfoForPbxproj;\nexports.mutateXcodeProjectWithAutoCodeSigningInfo = mutateXcodeProjectWithAutoCodeSigningInfo;\nexports.setAutoCodeSigningInfoForPbxproj = setAutoCodeSigningInfoForPbxproj;\nvar _configPlugins = require(\"@expo/config-plugins\");\nvar _fs = _interopRequireDefault(require(\"fs\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getCodeSigningInfoForPbxproj(projectRoot) {\n  var project = _configPlugins.IOSConfig.XcodeUtils.getPbxproj(projectRoot);\n  var targets = _configPlugins.IOSConfig.Target.findSignableTargets(project);\n  var signingInfo = {};\n  var _loop = function _loop() {\n    var developmentTeams = [];\n    var provisioningProfiles = [];\n    _configPlugins.IOSConfig.XcodeUtils.getBuildConfigurationsForListId(project, nativeTarget.buildConfigurationList).filter(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n        item = _ref4[1];\n      return item.buildSettings.PRODUCT_NAME;\n    }).forEach(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 2),\n        item = _ref6[1];\n      var _item$buildSettings = item.buildSettings,\n        DEVELOPMENT_TEAM = _item$buildSettings.DEVELOPMENT_TEAM,\n        PROVISIONING_PROFILE = _item$buildSettings.PROVISIONING_PROFILE;\n      if (typeof DEVELOPMENT_TEAM === \"string\" && !!DEVELOPMENT_TEAM && DEVELOPMENT_TEAM !== '\"\"') {\n        developmentTeams.push(DEVELOPMENT_TEAM);\n      }\n      if (typeof PROVISIONING_PROFILE === \"string\" && !!PROVISIONING_PROFILE) {\n        provisioningProfiles.push(PROVISIONING_PROFILE);\n      }\n    });\n    signingInfo[nativeTargetId] = {\n      developmentTeams: developmentTeams,\n      provisioningProfiles: provisioningProfiles\n    };\n  };\n  for (var _ref of targets) {\n    var _ref2 = _slicedToArray(_ref, 2);\n    var nativeTargetId = _ref2[0];\n    var nativeTarget = _ref2[1];\n    _loop();\n  }\n  return signingInfo;\n}\nfunction mutateXcodeProjectWithAutoCodeSigningInfo(_ref7) {\n  var project = _ref7.project,\n    appleTeamId = _ref7.appleTeamId;\n  var targets = _configPlugins.IOSConfig.Target.findSignableTargets(project);\n  var quotedAppleTeamId = ensureQuotes(appleTeamId);\n  var _loop2 = function _loop2(nativeTargetId) {\n    _configPlugins.IOSConfig.XcodeUtils.getBuildConfigurationsForListId(project, nativeTarget.buildConfigurationList).filter(function (_ref10) {\n      var _ref11 = _slicedToArray(_ref10, 2),\n        item = _ref11[1];\n      return item.buildSettings.PRODUCT_NAME;\n    }).forEach(function (_ref12) {\n      var _ref13 = _slicedToArray(_ref12, 2),\n        item = _ref13[1];\n      item.buildSettings.DEVELOPMENT_TEAM = quotedAppleTeamId;\n      item.buildSettings.CODE_SIGN_IDENTITY = '\"Apple Development\"';\n      item.buildSettings.CODE_SIGN_STYLE = \"Automatic\";\n    });\n    Object.entries(_configPlugins.IOSConfig.XcodeUtils.getProjectSection(project)).filter(_configPlugins.IOSConfig.XcodeUtils.isNotComment).forEach(function (_ref14) {\n      var _ref15 = _slicedToArray(_ref14, 2),\n        item = _ref15[1];\n      if (!item.attributes.TargetAttributes[nativeTargetId]) {\n        item.attributes.TargetAttributes[nativeTargetId] = {};\n      }\n      item.attributes.TargetAttributes[nativeTargetId].DevelopmentTeam = quotedAppleTeamId;\n      item.attributes.TargetAttributes[nativeTargetId].ProvisioningStyle = \"Automatic\";\n    });\n  };\n  for (var _ref8 of targets) {\n    var _ref9 = _slicedToArray(_ref8, 2);\n    var nativeTargetId = _ref9[0];\n    var nativeTarget = _ref9[1];\n    _loop2(nativeTargetId);\n  }\n  return project;\n}\nfunction setAutoCodeSigningInfoForPbxproj(projectRoot, _ref16) {\n  var appleTeamId = _ref16.appleTeamId;\n  var project = _configPlugins.IOSConfig.XcodeUtils.getPbxproj(projectRoot);\n  mutateXcodeProjectWithAutoCodeSigningInfo({\n    project: project,\n    appleTeamId: appleTeamId\n  });\n  _fs.default.writeFileSync(project.filepath, project.writeSync());\n}\nvar ensureQuotes = function ensureQuotes(value) {\n  if (!value.match(/^['\"]/)) {\n    return `\"${value}\"`;\n  }\n  return value;\n};","map":{"version":3,"names":["_slicedToArray","require","getCodeSigningInfoForPbxproj","mutateXcodeProjectWithAutoCodeSigningInfo","setAutoCodeSigningInfoForPbxproj","_configPlugins","_fs","_interopRequireDefault","projectRoot","project","IOSConfig","XcodeUtils","getPbxproj","targets","Target","findSignableTargets","signingInfo","_loop","developmentTeams","provisioningProfiles","getBuildConfigurationsForListId","nativeTarget","buildConfigurationList","filter","_ref3","_ref4","item","buildSettings","PRODUCT_NAME","forEach","_ref5","_ref6","_item$buildSettings","DEVELOPMENT_TEAM","PROVISIONING_PROFILE","push","nativeTargetId","_ref","_ref2","_ref7","appleTeamId","quotedAppleTeamId","ensureQuotes","_loop2","_ref10","_ref11","_ref12","_ref13","CODE_SIGN_IDENTITY","CODE_SIGN_STYLE","Object","entries","getProjectSection","isNotComment","_ref14","_ref15","attributes","TargetAttributes","DevelopmentTeam","ProvisioningStyle","_ref8","_ref9","_ref16","default","writeFileSync","filepath","writeSync","value","match"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\run\\ios\\codeSigning\\xcodeCodeSigning.ts"],"sourcesContent":["import { IOSConfig, XcodeProject } from '@expo/config-plugins';\nimport fs from 'fs';\n\nexport type CodeSigningInfo = Record<\n  string,\n  {\n    developmentTeams: string[];\n    provisioningProfiles: string[];\n  }\n>;\n\n/** Find the development team and provisioning profile that's currently in use by the Xcode project. */\nexport function getCodeSigningInfoForPbxproj(projectRoot: string): CodeSigningInfo {\n  const project = IOSConfig.XcodeUtils.getPbxproj(projectRoot);\n  const targets = IOSConfig.Target.findSignableTargets(project);\n\n  const signingInfo: CodeSigningInfo = {};\n  for (const [nativeTargetId, nativeTarget] of targets) {\n    const developmentTeams: string[] = [];\n    const provisioningProfiles: string[] = [];\n\n    IOSConfig.XcodeUtils.getBuildConfigurationsForListId(\n      project,\n      nativeTarget.buildConfigurationList\n    )\n      .filter(\n        ([, item]: IOSConfig.XcodeUtils.ConfigurationSectionEntry) =>\n          item.buildSettings.PRODUCT_NAME\n      )\n      .forEach(([, item]: IOSConfig.XcodeUtils.ConfigurationSectionEntry) => {\n        const { DEVELOPMENT_TEAM, PROVISIONING_PROFILE } = item.buildSettings;\n        if (\n          typeof DEVELOPMENT_TEAM === 'string' &&\n          // If the user selects \"Team: none\" in Xcode, it'll be an empty string.\n          !!DEVELOPMENT_TEAM &&\n          // xcode package sometimes reads an empty string as a quoted empty string.\n          DEVELOPMENT_TEAM !== '\"\"'\n        ) {\n          developmentTeams.push(DEVELOPMENT_TEAM);\n        }\n        if (typeof PROVISIONING_PROFILE === 'string' && !!PROVISIONING_PROFILE) {\n          provisioningProfiles.push(PROVISIONING_PROFILE);\n        }\n      });\n    signingInfo[nativeTargetId] = {\n      developmentTeams,\n      provisioningProfiles,\n    };\n  }\n\n  return signingInfo;\n}\n\n/**\n * Set the development team and configure the Xcode project for automatic code signing,\n * this helps us resolve the code signing on subsequent runs and emulates Xcode behavior.\n *\n * @param props.project xcode project object from `xcode` package.\n * @param props.appleTeamId Apple Team ID to use for code signing.\n */\nexport function mutateXcodeProjectWithAutoCodeSigningInfo({\n  project,\n  appleTeamId,\n}: {\n  project: XcodeProject;\n  appleTeamId: string;\n}): XcodeProject {\n  const targets = IOSConfig.Target.findSignableTargets(project);\n\n  const quotedAppleTeamId = ensureQuotes(appleTeamId);\n\n  for (const [nativeTargetId, nativeTarget] of targets) {\n    IOSConfig.XcodeUtils.getBuildConfigurationsForListId(\n      project,\n      nativeTarget.buildConfigurationList\n    )\n      .filter(\n        ([, item]: IOSConfig.XcodeUtils.ConfigurationSectionEntry) =>\n          item.buildSettings.PRODUCT_NAME\n      )\n      .forEach(([, item]: IOSConfig.XcodeUtils.ConfigurationSectionEntry) => {\n        item.buildSettings.DEVELOPMENT_TEAM = quotedAppleTeamId;\n        item.buildSettings.CODE_SIGN_IDENTITY = '\"Apple Development\"';\n        item.buildSettings.CODE_SIGN_STYLE = 'Automatic';\n      });\n\n    Object.entries(IOSConfig.XcodeUtils.getProjectSection(project))\n      .filter(IOSConfig.XcodeUtils.isNotComment)\n      .forEach(([, item]: IOSConfig.XcodeUtils.ProjectSectionEntry) => {\n        if (!item.attributes.TargetAttributes[nativeTargetId]) {\n          item.attributes.TargetAttributes[nativeTargetId] = {};\n        }\n\n        item.attributes.TargetAttributes[nativeTargetId].DevelopmentTeam = quotedAppleTeamId;\n        item.attributes.TargetAttributes[nativeTargetId].ProvisioningStyle = 'Automatic';\n      });\n  }\n\n  return project;\n}\n\n/**\n * Configures the Xcode project for automatic code signing and persists the results.\n */\nexport function setAutoCodeSigningInfoForPbxproj(\n  projectRoot: string,\n  { appleTeamId }: { appleTeamId: string }\n): void {\n  const project = IOSConfig.XcodeUtils.getPbxproj(projectRoot);\n  mutateXcodeProjectWithAutoCodeSigningInfo({ project, appleTeamId });\n\n  fs.writeFileSync(project.filepath, project.writeSync());\n}\n\nconst ensureQuotes = (value: string) => {\n  if (!value.match(/^['\"]/)) {\n    return `\"${value}\"`;\n  }\n  return value;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}