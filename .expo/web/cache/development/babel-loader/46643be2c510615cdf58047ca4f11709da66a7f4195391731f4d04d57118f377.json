{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.exportAppAsync = exportAppAsync;\nvar _fs = _interopRequireDefault(require(\"fs\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar Log = _interopRequireWildcard(require(\"../log\"));\nvar _resolveFromProject = require(\"../start/server/metro/resolveFromProject\");\nvar _webTemplate = require(\"../start/server/webTemplate\");\nvar _dir = require(\"../utils/dir\");\nvar _env = require(\"../utils/env\");\nvar _nodeEnv = require(\"../utils/nodeEnv\");\nvar _createBundles = require(\"./createBundles\");\nvar _exportAssets = require(\"./exportAssets\");\nvar _exportStaticAsync = require(\"./exportStaticAsync\");\nvar _favicon = require(\"./favicon\");\nvar _getPublicExpoManifest = require(\"./getPublicExpoManifest\");\nvar _printBundleSizes = require(\"./printBundleSizes\");\nvar _writeContents = require(\"./writeContents\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction exportAppAsync(_x, _x2) {\n  return _exportAppAsync.apply(this, arguments);\n}\nfunction _exportAppAsync() {\n  _exportAppAsync = _asyncToGenerator(function* (projectRoot, _ref) {\n    var platforms = _ref.platforms,\n      outputDir = _ref.outputDir,\n      clear = _ref.clear,\n      dev = _ref.dev,\n      dumpAssetmap = _ref.dumpAssetmap,\n      dumpSourcemap = _ref.dumpSourcemap,\n      minify = _ref.minify;\n    var ref;\n    (0, _nodeEnv).setNodeEnv(dev ? \"development\" : \"production\");\n    require(\"@expo/env\").load(projectRoot);\n    var exp = yield (0, _getPublicExpoManifest).getPublicExpoManifestAsync(projectRoot);\n    var useWebSSG = ((ref = exp.web) == null ? void 0 : ref.output) === \"static\";\n    var publicPath = _path.default.resolve(projectRoot, _env.env.EXPO_PUBLIC_FOLDER);\n    var outputPath = _path.default.resolve(projectRoot, outputDir);\n    var staticFolder = outputPath;\n    var assetsPath = _path.default.join(staticFolder, \"assets\");\n    var bundlesPath = _path.default.join(staticFolder, \"bundles\");\n    yield Promise.all([assetsPath, bundlesPath].map(_dir.ensureDirectoryAsync));\n    yield copyPublicFolderAsync(publicPath, staticFolder);\n    var bundles = yield (0, _createBundles).createBundlesAsync(projectRoot, {\n      resetCache: !!clear\n    }, {\n      platforms: platforms,\n      minify: minify,\n      dev: dev\n    });\n    var bundleEntries = Object.entries(bundles);\n    if (bundleEntries.length) {\n      (0, _printBundleSizes).printBundleSizes(Object.fromEntries(bundleEntries.map(function (_ref2) {\n        var _ref3 = _slicedToArray(_ref2, 2),\n          key = _ref3[0],\n          value = _ref3[1];\n        if (!dumpSourcemap) {\n          return [key, _objectSpread(_objectSpread({}, value), {}, {\n            map: undefined\n          })];\n        }\n        return [key, value];\n      })));\n    }\n    var _yield$writeBundlesAs = yield (0, _writeContents).writeBundlesAsync({\n        bundles: bundles,\n        outputDir: bundlesPath\n      }),\n      hashes = _yield$writeBundlesAs.hashes,\n      fileNames = _yield$writeBundlesAs.fileNames;\n    Log.log(\"Finished saving JS Bundles\");\n    if (platforms.includes(\"web\")) {\n      if (useWebSSG) {\n        yield (0, _exportStaticAsync).unstable_exportStaticAsync(projectRoot, {\n          outputDir: outputPath,\n          minify: minify\n        });\n        Log.log(\"Finished saving static files\");\n      } else {\n        var cssLinks = yield (0, _exportAssets).exportCssAssetsAsync({\n          outputDir: outputDir,\n          bundles: bundles\n        });\n        var html = yield (0, _webTemplate).createTemplateHtmlFromExpoConfigAsync(projectRoot, {\n          scripts: [`/bundles/${fileNames.web}`],\n          cssLinks: cssLinks\n        });\n        var modifyHtml = yield (0, _favicon).getVirtualFaviconAssetsAsync(projectRoot, outputDir);\n        if (modifyHtml) {\n          html = modifyHtml(html);\n        }\n        yield _fs.default.promises.writeFile(_path.default.join(staticFolder, \"index.html\"), html);\n      }\n      var saveAssets = (0, _resolveFromProject).importCliSaveAssetsFromProject(projectRoot);\n      yield Promise.all(Object.entries(bundles).map(function (_ref4) {\n        var _ref5 = _slicedToArray(_ref4, 2),\n          platform = _ref5[0],\n          bundle = _ref5[1];\n        return saveAssets(bundle.assets, platform, staticFolder, undefined);\n      }));\n    }\n    var _yield$exportAssetsAs = yield (0, _exportAssets).exportAssetsAsync(projectRoot, {\n        exp: exp,\n        outputDir: staticFolder,\n        bundles: bundles\n      }),\n      assets = _yield$exportAssetsAs.assets;\n    if (dumpAssetmap) {\n      Log.log(\"Dumping asset map\");\n      yield (0, _writeContents).writeAssetMapAsync({\n        outputDir: staticFolder,\n        assets: assets\n      });\n    }\n    if (dumpSourcemap) {\n      Log.log(\"Dumping source maps\");\n      yield (0, _writeContents).writeSourceMapsAsync({\n        bundles: bundles,\n        hashes: hashes,\n        outputDir: bundlesPath,\n        fileNames: fileNames\n      });\n      Log.log(\"Preparing additional debugging files\");\n      yield (0, _writeContents).writeDebugHtmlAsync({\n        outputDir: staticFolder,\n        fileNames: fileNames\n      });\n    }\n    yield (0, _writeContents).writeMetadataJsonAsync({\n      outputDir: staticFolder,\n      bundles: bundles,\n      fileNames: fileNames\n    });\n  });\n  return _exportAppAsync.apply(this, arguments);\n}\nfunction copyPublicFolderAsync(_x3, _x4) {\n  return _copyPublicFolderAsync.apply(this, arguments);\n}\nfunction _copyPublicFolderAsync() {\n  _copyPublicFolderAsync = _asyncToGenerator(function* (publicFolder, outputFolder) {\n    if (_fs.default.existsSync(publicFolder)) {\n      yield (0, _dir).copyAsync(publicFolder, outputFolder);\n    }\n  });\n  return _copyPublicFolderAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_defineProperty","require","_slicedToArray","_asyncToGenerator","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","exportAppAsync","_fs","_interopRequireDefault","_path","Log","_interopRequireWildcard","_resolveFromProject","_webTemplate","_dir","_env","_nodeEnv","_createBundles","_exportAssets","_exportStaticAsync","_favicon","_getPublicExpoManifest","_printBundleSizes","_writeContents","_x","_x2","_exportAppAsync","projectRoot","_ref","platforms","outputDir","clear","dev","dumpAssetmap","dumpSourcemap","minify","ref","setNodeEnv","load","exp","getPublicExpoManifestAsync","useWebSSG","web","output","publicPath","default","resolve","env","EXPO_PUBLIC_FOLDER","outputPath","staticFolder","assetsPath","join","bundlesPath","Promise","all","map","ensureDirectoryAsync","copyPublicFolderAsync","bundles","createBundlesAsync","resetCache","bundleEntries","entries","printBundleSizes","fromEntries","_ref2","_ref3","key","value","undefined","_yield$writeBundlesAs","writeBundlesAsync","hashes","fileNames","log","includes","unstable_exportStaticAsync","cssLinks","exportCssAssetsAsync","html","createTemplateHtmlFromExpoConfigAsync","scripts","modifyHtml","getVirtualFaviconAssetsAsync","promises","writeFile","saveAssets","importCliSaveAssetsFromProject","_ref4","_ref5","platform","bundle","assets","_yield$exportAssetsAs","exportAssetsAsync","writeAssetMapAsync","writeSourceMapsAsync","writeDebugHtmlAsync","writeMetadataJsonAsync","_x3","_x4","_copyPublicFolderAsync","publicFolder","outputFolder","existsSync","copyAsync"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\export\\exportApp.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport * as Log from '../log';\nimport { importCliSaveAssetsFromProject } from '../start/server/metro/resolveFromProject';\nimport { createTemplateHtmlFromExpoConfigAsync } from '../start/server/webTemplate';\nimport { copyAsync, ensureDirectoryAsync } from '../utils/dir';\nimport { env } from '../utils/env';\nimport { setNodeEnv } from '../utils/nodeEnv';\nimport { createBundlesAsync } from './createBundles';\nimport { exportAssetsAsync, exportCssAssetsAsync } from './exportAssets';\nimport { unstable_exportStaticAsync } from './exportStaticAsync';\nimport { getVirtualFaviconAssetsAsync } from './favicon';\nimport { getPublicExpoManifestAsync } from './getPublicExpoManifest';\nimport { printBundleSizes } from './printBundleSizes';\nimport { Options } from './resolveOptions';\nimport {\n  writeAssetMapAsync,\n  writeBundlesAsync,\n  writeDebugHtmlAsync,\n  writeMetadataJsonAsync,\n  writeSourceMapsAsync,\n} from './writeContents';\n\n/**\n * The structure of the outputDir will be:\n *\n * ```\n * ├── assets\n * │   └── *\n * ├── bundles\n * │   ├── android-01ee6e3ab3e8c16a4d926c91808d5320.js\n * │   └── ios-ee8206cc754d3f7aa9123b7f909d94ea.js\n * └── metadata.json\n * ```\n */\nexport async function exportAppAsync(\n  projectRoot: string,\n  {\n    platforms,\n    outputDir,\n    clear,\n    dev,\n    dumpAssetmap,\n    dumpSourcemap,\n    minify,\n  }: Pick<\n    Options,\n    'dumpAssetmap' | 'dumpSourcemap' | 'dev' | 'clear' | 'outputDir' | 'platforms' | 'minify'\n  >\n): Promise<void> {\n  setNodeEnv(dev ? 'development' : 'production');\n  require('@expo/env').load(projectRoot);\n\n  const exp = await getPublicExpoManifestAsync(projectRoot);\n\n  const useWebSSG = exp.web?.output === 'static';\n\n  const publicPath = path.resolve(projectRoot, env.EXPO_PUBLIC_FOLDER);\n\n  const outputPath = path.resolve(projectRoot, outputDir);\n  const staticFolder = outputPath;\n  const assetsPath = path.join(staticFolder, 'assets');\n  const bundlesPath = path.join(staticFolder, 'bundles');\n\n  await Promise.all([assetsPath, bundlesPath].map(ensureDirectoryAsync));\n\n  await copyPublicFolderAsync(publicPath, staticFolder);\n\n  // Run metro bundler and create the JS bundles/source maps.\n  const bundles = await createBundlesAsync(\n    projectRoot,\n    { resetCache: !!clear },\n    {\n      platforms,\n      minify,\n      // TODO: Breaks asset exports\n      // platforms: useWebSSG ? platforms.filter((platform) => platform !== 'web') : platforms,\n      dev,\n      // TODO: Disable source map generation if we aren't outputting them.\n    }\n  );\n\n  const bundleEntries = Object.entries(bundles);\n  if (bundleEntries.length) {\n    // Log bundle size info to the user\n    printBundleSizes(\n      Object.fromEntries(\n        bundleEntries.map(([key, value]) => {\n          if (!dumpSourcemap) {\n            return [\n              key,\n              {\n                ...value,\n                // Remove source maps from the bundles if they aren't going to be written.\n                map: undefined,\n              },\n            ];\n          }\n\n          return [key, value];\n        })\n      )\n    );\n  }\n\n  // Write the JS bundles to disk, and get the bundle file names (this could change with async chunk loading support).\n  const { hashes, fileNames } = await writeBundlesAsync({ bundles, outputDir: bundlesPath });\n\n  Log.log('Finished saving JS Bundles');\n\n  if (platforms.includes('web')) {\n    if (useWebSSG) {\n      await unstable_exportStaticAsync(projectRoot, {\n        outputDir: outputPath,\n        // TODO: Expose\n        minify,\n      });\n      Log.log('Finished saving static files');\n    } else {\n      const cssLinks = await exportCssAssetsAsync({\n        outputDir,\n        bundles,\n      });\n      let html = await createTemplateHtmlFromExpoConfigAsync(projectRoot, {\n        scripts: [`/bundles/${fileNames.web}`],\n        cssLinks,\n      });\n      // Add the favicon assets to the HTML.\n      const modifyHtml = await getVirtualFaviconAssetsAsync(projectRoot, outputDir);\n      if (modifyHtml) {\n        html = modifyHtml(html);\n      }\n      // Generate SPA-styled HTML file.\n      // If web exists, then write the template HTML file.\n      await fs.promises.writeFile(path.join(staticFolder, 'index.html'), html);\n    }\n\n    // Save assets like a typical bundler, preserving the file paths on web.\n    const saveAssets = importCliSaveAssetsFromProject(projectRoot);\n    await Promise.all(\n      Object.entries(bundles).map(([platform, bundle]) => {\n        return saveAssets(bundle.assets, platform, staticFolder, undefined);\n      })\n    );\n  }\n\n  const { assets } = await exportAssetsAsync(projectRoot, {\n    exp,\n    outputDir: staticFolder,\n    bundles,\n  });\n\n  if (dumpAssetmap) {\n    Log.log('Dumping asset map');\n    await writeAssetMapAsync({ outputDir: staticFolder, assets });\n  }\n\n  // build source maps\n  if (dumpSourcemap) {\n    Log.log('Dumping source maps');\n    await writeSourceMapsAsync({\n      bundles,\n      hashes,\n      outputDir: bundlesPath,\n      fileNames,\n    });\n\n    Log.log('Preparing additional debugging files');\n    // If we output source maps, then add a debug HTML file which the user can open in\n    // the web browser to inspect the output like web.\n    await writeDebugHtmlAsync({\n      outputDir: staticFolder,\n      fileNames,\n    });\n  }\n\n  // Generate a `metadata.json` and the export is complete.\n  await writeMetadataJsonAsync({ outputDir: staticFolder, bundles, fileNames });\n}\n\n/**\n * Copy the contents of the public folder into the output folder.\n * This enables users to add static files like `favicon.ico` or `serve.json`.\n *\n * The contents of this folder are completely universal since they refer to\n * static network requests which fall outside the scope of React Native's magic\n * platform resolution patterns.\n */\nasync function copyPublicFolderAsync(publicFolder: string, outputFolder: string) {\n  if (fs.existsSync(publicFolder)) {\n    await copyAsync(publicFolder, outputFolder);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}