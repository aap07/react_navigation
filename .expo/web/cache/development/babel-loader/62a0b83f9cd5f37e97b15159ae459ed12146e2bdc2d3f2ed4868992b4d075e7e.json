{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveBundlerPropsAsync = resolveBundlerPropsAsync;\nvar _log = require(\"../log\");\nvar _errors = require(\"../utils/errors\");\nvar _port = require(\"../utils/port\");\nfunction resolveBundlerPropsAsync(_x, _x2) {\n  return _resolveBundlerPropsAsync.apply(this, arguments);\n}\nfunction _resolveBundlerPropsAsync() {\n  _resolveBundlerPropsAsync = _asyncToGenerator(function* (projectRoot, options) {\n    var _bundler;\n    options.bundler = (_bundler = options.bundler) != null ? _bundler : true;\n    if (!options.bundler && options.port) {\n      throw new _errors.CommandError(\"BAD_ARGS\", \"--port and --no-bundler are mutually exclusive arguments\");\n    }\n    var port = options.bundler ? yield (0, _port).resolvePortAsync(projectRoot, {\n      reuseExistingPort: true,\n      defaultPort: options.port\n    }) : null;\n    options.bundler = !!port;\n    if (!port) {\n      port = 8081;\n    }\n    _log.Log.debug(`Resolved port: ${port}, start dev server: ${options.bundler}`);\n    return {\n      shouldStartBundler: !!options.bundler,\n      port: port\n    };\n  });\n  return _resolveBundlerPropsAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","resolveBundlerPropsAsync","_log","_errors","_port","_x","_x2","_resolveBundlerPropsAsync","apply","arguments","projectRoot","options","_bundler","bundler","port","CommandError","resolvePortAsync","reuseExistingPort","defaultPort","Log","debug","shouldStartBundler"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\run\\resolveBundlerProps.ts"],"sourcesContent":["import { Log } from '../log';\nimport { CommandError } from '../utils/errors';\nimport { resolvePortAsync } from '../utils/port';\n\nexport interface BundlerProps {\n  /** Port to start the dev server on. */\n  port: number;\n  /** Skip opening the bundler from the native script. */\n  shouldStartBundler: boolean;\n}\n\nexport async function resolveBundlerPropsAsync(\n  projectRoot: string,\n  options: {\n    port?: number;\n    bundler?: boolean;\n  }\n): Promise<BundlerProps> {\n  options.bundler = options.bundler ?? true;\n\n  if (\n    // If the user disables the bundler then they should not pass in the port property.\n    !options.bundler &&\n    options.port\n  ) {\n    throw new CommandError('BAD_ARGS', '--port and --no-bundler are mutually exclusive arguments');\n  }\n\n  // Resolve the port if the bundler is used.\n  let port = options.bundler\n    ? await resolvePortAsync(projectRoot, { reuseExistingPort: true, defaultPort: options.port })\n    : null;\n\n  // Skip bundling if the port is null -- meaning skip the bundler if the port is already running the app.\n  options.bundler = !!port;\n  if (!port) {\n    // any random number\n    port = 8081;\n  }\n  Log.debug(`Resolved port: ${port}, start dev server: ${options.bundler}`);\n\n  return {\n    shouldStartBundler: !!options.bundler,\n    port,\n  };\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,iBAAA,GAAAC,OAAA;;;;QAWsBC,wBAAwB,GAAxBA,wBAAwB;AAX1B,IAAAC,IAAQ,GAAAF,OAAA;AACC,IAAAG,OAAiB,GAAAH,OAAA;AACb,IAAAI,KAAe,GAAAJ,OAAA;AAAA,SAS1BC,wBAAwBA,CAAAI,EAAA,EAAAC,GAAA;EAAA,OAAAC,yBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,0BAAA;EAAAA,yBAAA,GAAAR,iBAAA,CAAvC,WACLW,WAAmB,EACnBC,OAGC,EACsB;QACLC,QAAe;IAAjCD,OAAO,CAACE,OAAO,GAAG,CAAAD,QAAe,GAAfD,OAAO,CAACE,OAAO,YAAfD,QAAe,GAAI,IAAI;IAEzC,IAEE,CAACD,OAAO,CAACE,OAAO,IAChBF,OAAO,CAACG,IAAI,EACZ;MACA,MAAM,IAAIX,OAAY,CAAAY,YAAA,CAAC,UAAU,EAAE,0DAA0D,CAAC;;IAIhG,IAAID,IAAI,GAAGH,OAAO,CAACE,OAAO,SAChB,IAAAT,KAAgB,EAAqEY,gBAArE,CAACN,WAAW,EAAE;MAAEO,iBAAiB,EAAE,IAAI;MAAEC,WAAW,EAAEP,OAAO,CAACG;KAAM,CAAC,GAC3F,IAAI;IAGRH,OAAO,CAACE,OAAO,GAAG,CAAC,CAACC,IAAI;IACxB,IAAI,CAACA,IAAI,EAAE;MAETA,IAAI,GAAG,IAAI;;IAEbZ,IAAG,CAAAiB,GAAA,CAACC,KAAK,CAAE,kBAAiBN,IAAK,uBAAsBH,OAAO,CAACE,OAAQ,EAAC,CAAC;IAEzE,OAAO;MACLQ,kBAAkB,EAAE,CAAC,CAACV,OAAO,CAACE,OAAO;MACrCC,IAAI,EAAJA;KACD;GACF;EAAA,OAAAP,yBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}