{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getErrorLogFilePath = exports.writeBuildLogs = exports.createXcodeBuildHooks = exports.formatXcodeBuildPipeProcessAsync = void 0;\nvar chalk_1 = __importDefault(require(\"chalk\"));\nvar fs_1 = __importDefault(require(\"fs\"));\nvar os_1 = __importDefault(require(\"os\"));\nvar path_1 = __importDefault(require(\"path\"));\nvar ExpoRunFormatter_1 = require(\"./ExpoRunFormatter\");\nfunction formatXcodeBuildPipeProcessAsync(projectRoot) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    xcodeProjectName = _ref.xcodeProjectName;\n  return new Promise(function () {\n    var _ref2 = _asyncToGenerator(function* (resolve, reject) {\n      var hooks = createXcodeBuildHooks(projectRoot, {\n        xcodeProjectName: xcodeProjectName,\n        resolve: resolve,\n        reject: reject\n      });\n      process.stdin.on('data', hooks.onData);\n      process.stdin.on('end', function () {\n        hooks.onEnd(0);\n      });\n    });\n    return function (_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n}\nexports.formatXcodeBuildPipeProcessAsync = formatXcodeBuildPipeProcessAsync;\nfunction createXcodeBuildHooks(projectRoot, _ref3) {\n  var xcodeProjectName = _ref3.xcodeProjectName,\n    resolve = _ref3.resolve,\n    reject = _ref3.reject;\n  var formatter = ExpoRunFormatter_1.ExpoRunFormatter.create(projectRoot, {\n    xcodeProject: xcodeProjectName ? {\n      name: xcodeProjectName\n    } : undefined,\n    isDebug: isTruthy(process.env.EXPO_DEBUG)\n  });\n  var buildOutput = '';\n  var errorOutput = '';\n  var currentBuffer = '';\n  function flushBuffer() {\n    if (!currentBuffer) {\n      return;\n    }\n    var data = currentBuffer;\n    currentBuffer = '';\n    var lines = formatter.pipe(data);\n    for (var line of lines) {\n      console.log(line);\n    }\n  }\n  var onData = function onData(data) {\n    var stringData = data.toString();\n    buildOutput += stringData;\n    currentBuffer += stringData;\n    if (currentBuffer.endsWith(os_1.default.EOL)) {\n      flushBuffer();\n    }\n  };\n  var onErr = function onErr(data) {\n    flushBuffer();\n    var stringData = data instanceof Buffer ? data.toString() : data;\n    errorOutput += stringData;\n  };\n  var onEnd = function onEnd(code) {\n    flushBuffer();\n    console.log(formatter.getBuildSummary());\n    var logFilePath = writeBuildLogs(projectRoot, buildOutput, errorOutput);\n    if (code !== 0) {\n      var wasErrorPresented = !!formatter.errors.length;\n      var errorTitle = `Failed to build iOS project. \"xcodebuild\" exited with error code ${code}.`;\n      if (wasErrorPresented) {\n        reject(new Error(errorTitle));\n        return;\n      }\n      reject(new Error(`${errorTitle}\\nTo view more error logs, try building the app with Xcode directly, by opening ${'unknown'}.\\n\\n` + buildOutput + '\\n\\n' + errorOutput + `Build logs written to ${chalk_1.default.underline(logFilePath)}`));\n      return;\n    }\n    resolve(buildOutput);\n  };\n  return {\n    onData: onData,\n    onErr: onErr,\n    onEnd: onEnd\n  };\n}\nexports.createXcodeBuildHooks = createXcodeBuildHooks;\nfunction writeBuildLogs(projectRoot, buildOutput, errorOutput) {\n  var _getErrorLogFilePath = getErrorLogFilePath(projectRoot),\n    _getErrorLogFilePath2 = _slicedToArray(_getErrorLogFilePath, 2),\n    logFilePath = _getErrorLogFilePath2[0],\n    errorFilePath = _getErrorLogFilePath2[1];\n  fs_1.default.writeFileSync(logFilePath, buildOutput);\n  fs_1.default.writeFileSync(errorFilePath, errorOutput);\n  return logFilePath;\n}\nexports.writeBuildLogs = writeBuildLogs;\nfunction getErrorLogFilePath(projectRoot) {\n  var folder = path_1.default.join(projectRoot, '.expo');\n  fs_1.default.mkdirSync(folder, {\n    recursive: true\n  });\n  return [path_1.default.join(folder, 'xcodebuild.log'), path_1.default.join(folder, 'xcodebuild-error.log')];\n}\nexports.getErrorLogFilePath = getErrorLogFilePath;\nfunction isTruthy(value) {\n  var str = String(value).toLowerCase();\n  return str === 'true' || str === '1';\n}","map":{"version":3,"names":["chalk_1","__importDefault","require","fs_1","os_1","path_1","ExpoRunFormatter_1","formatXcodeBuildPipeProcessAsync","projectRoot","_ref","arguments","length","undefined","xcodeProjectName","Promise","_ref2","_asyncToGenerator","resolve","reject","hooks","createXcodeBuildHooks","process","stdin","on","onData","onEnd","_x","_x2","apply","exports","_ref3","formatter","ExpoRunFormatter","create","xcodeProject","name","isDebug","isTruthy","env","EXPO_DEBUG","buildOutput","errorOutput","currentBuffer","flushBuffer","data","lines","pipe","line","console","log","stringData","toString","endsWith","default","EOL","onErr","Buffer","code","getBuildSummary","logFilePath","writeBuildLogs","wasErrorPresented","errors","errorTitle","Error","underline","_getErrorLogFilePath","getErrorLogFilePath","_getErrorLogFilePath2","_slicedToArray","errorFilePath","writeFileSync","folder","join","mkdirSync","recursive","value","str","String","toLowerCase"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\xcpretty\\src\\Runner.ts"],"sourcesContent":["import chalk from 'chalk';\nimport fs from 'fs';\nimport os from 'os';\nimport path from 'path';\n\nimport { ExpoRunFormatter } from './ExpoRunFormatter';\n\nexport function formatXcodeBuildPipeProcessAsync(\n  projectRoot: string,\n  { xcodeProjectName }: { xcodeProjectName?: string } = {}\n) {\n  return new Promise<string>(async (resolve, reject) => {\n    const hooks = createXcodeBuildHooks(projectRoot, { xcodeProjectName, resolve, reject });\n\n    process.stdin.on('data', hooks.onData);\n    process.stdin.on('end', () => {\n      hooks.onEnd(0);\n    });\n  });\n}\n\nexport function createXcodeBuildHooks(\n  projectRoot: string,\n  {\n    xcodeProjectName,\n    resolve,\n    reject,\n  }: {\n    xcodeProjectName?: string;\n    resolve: (buildOutput: string) => void;\n    reject: (error: Error) => void;\n  }\n) {\n  const formatter = ExpoRunFormatter.create(projectRoot, {\n    xcodeProject: xcodeProjectName ? { name: xcodeProjectName } : undefined,\n    isDebug: isTruthy(process.env.EXPO_DEBUG),\n  });\n\n  let buildOutput = '';\n  let errorOutput = '';\n\n  let currentBuffer = '';\n\n  // Data can be sent in chunks that would have no relevance to our regex\n  // this can cause massive slowdowns, so we need to ensure the data is complete before attempting to parse it.\n  function flushBuffer() {\n    if (!currentBuffer) {\n      return;\n    }\n\n    const data = currentBuffer;\n    currentBuffer = '';\n    const lines = formatter.pipe(data);\n    for (const line of lines) {\n      console.log(line);\n    }\n  }\n\n  const onData = (data: Buffer) => {\n    const stringData = data.toString();\n    buildOutput += stringData;\n    currentBuffer += stringData;\n    if (currentBuffer.endsWith(os.EOL)) {\n      flushBuffer();\n    }\n  };\n\n  const onErr = (data: Buffer) => {\n    flushBuffer();\n    const stringData = data instanceof Buffer ? data.toString() : data;\n    errorOutput += stringData;\n  };\n\n  const onEnd = (code: number) => {\n    flushBuffer();\n    console.log(formatter.getBuildSummary());\n    const logFilePath = writeBuildLogs(projectRoot, buildOutput, errorOutput);\n    if (code !== 0) {\n      // Determine if the logger found any errors;\n      const wasErrorPresented = !!formatter.errors.length;\n\n      const errorTitle = `Failed to build iOS project. \"xcodebuild\" exited with error code ${code}.`;\n\n      if (wasErrorPresented) {\n        // This has a flaw, if the user is missing a file, and there is a script error, only the missing file error will be shown.\n        // They will only see the script error if they fix the missing file and rerun.\n        // The flaw can be fixed by catching script errors in the custom logger.\n        reject(new Error(errorTitle));\n        return;\n      }\n\n      // Show all the log info because often times the error is coming from a shell script,\n      // that invoked a node script, that started metro, which threw an error.\n      reject(\n        new Error(\n          `${errorTitle}\\nTo view more error logs, try building the app with Xcode directly, by opening ${'unknown'}.\\n\\n` +\n            buildOutput +\n            '\\n\\n' +\n            errorOutput +\n            `Build logs written to ${chalk.underline(logFilePath)}`\n        )\n      );\n      return;\n    }\n    resolve(buildOutput);\n  };\n\n  return { onData, onErr, onEnd };\n}\n\nexport function writeBuildLogs(projectRoot: string, buildOutput: string, errorOutput: string) {\n  const [logFilePath, errorFilePath] = getErrorLogFilePath(projectRoot);\n\n  fs.writeFileSync(logFilePath, buildOutput);\n  fs.writeFileSync(errorFilePath, errorOutput);\n  return logFilePath;\n}\n\nexport function getErrorLogFilePath(projectRoot: string): [string, string] {\n  const folder = path.join(projectRoot, '.expo');\n  fs.mkdirSync(folder, { recursive: true });\n  return [path.join(folder, 'xcodebuild.log'), path.join(folder, 'xcodebuild-error.log')];\n}\n\nfunction isTruthy(value: any): boolean {\n  const str = String(value).toLowerCase();\n  return str === 'true' || str === '1';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}