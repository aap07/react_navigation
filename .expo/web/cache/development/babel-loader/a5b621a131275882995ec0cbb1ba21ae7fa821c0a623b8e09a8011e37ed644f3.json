{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar Log = _interopRequireWildcard(require(\"../../log\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar DeviceManager = function () {\n  function DeviceManager(device) {\n    _classCallCheck(this, DeviceManager);\n    this.device = device;\n  }\n  _createClass(DeviceManager, [{\n    key: \"logOpeningUrl\",\n    value: function logOpeningUrl(url) {\n      Log.log(_chalk.default`\\u203A Opening {underline ${url}} on {bold ${this.name}}`);\n    }\n  }]);\n  return DeviceManager;\n}();\nexports.DeviceManager = DeviceManager;","map":{"version":3,"names":["_classCallCheck","require","_createClass","_chalk","_interopRequireDefault","Log","_interopRequireWildcard","DeviceManager","device","key","value","logOpeningUrl","url","log","default","name"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\platforms\\DeviceManager.ts"],"sourcesContent":["import chalk from 'chalk';\n\nimport * as Log from '../../log';\n\n/** An abstract class for interacting with a native device. */\nexport abstract class DeviceManager<IDevice> {\n  constructor(public device: IDevice) {}\n\n  abstract get name(): string;\n\n  abstract get identifier(): string;\n\n  logOpeningUrl(url: string) {\n    Log.log(chalk`\\u203A Opening {underline ${url}} on {bold ${this.name}}`);\n  }\n\n  abstract startAsync(): Promise<IDevice>;\n\n  abstract getAppVersionAsync(applicationId: string): Promise<string | null>;\n\n  abstract installAppAsync(binaryPath: string): Promise<void>;\n\n  abstract uninstallAppAsync(applicationId: string): Promise<void>;\n\n  abstract isAppInstalledAsync(applicationId: string): Promise<boolean>;\n\n  abstract openUrlAsync(url: string): Promise<void>;\n\n  abstract activateWindowAsync(): Promise<void>;\n\n  abstract ensureExpoGoAsync(sdkVersion?: string): Promise<boolean>;\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,eAAA,GAAAC,OAAA;AAAA,IAAAC,YAAA,GAAAD,OAAA;;;;AAAkB,IAAAE,MAAO,GAAAC,sBAAA,CAAAH,OAAA,CAAP,OAAO;AAEb,IAAAI,GAAG,GAAAC,uBAAA,CAAAL,OAAA,YAAiB,EAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;IAGOM,aAAa;EACjC,SAAAA,cAAmBC,MAAe,EAAE;IAAAR,eAAA,OAAAO,aAAA;SAAjBC,MAAe,GAAfA,MAAe;;EAAIN,YAAA,CAAAK,aAAA;IAAAE,GAAA;IAAAC,KAAA,EAMtC,SAAAC,cAAcC,GAAW,EAAE;MACzBP,GAAG,CAACQ,GAAG,CAACV,MAAK,CAAAW,OAAC,6BAA4BF,GAAI,cAAa,IAAI,CAACG,IAAK,GAAE,CAAC;;EACzE;EAAA,OAAAR,aAAA;AAAA;QATmBA,aAAa,GAAbA,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}