{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/expo-modules-autolinking/build/ExpoModuleConfig.d.ts"],"sourcesContent":["import { AndroidGradlePluginDescriptor, RawExpoModuleConfig, SupportedPlatform } from './types';\n/**\n * A class that wraps the raw config (`expo-module.json` or `unimodule.json`).\n */\nexport declare class ExpoModuleConfig {\n    readonly rawConfig: RawExpoModuleConfig;\n    constructor(rawConfig: RawExpoModuleConfig);\n    /**\n     * Whether the module supports given platform.\n     */\n    supportsPlatform(platform: SupportedPlatform): boolean;\n    /**\n     * Returns a list of names of Swift native modules classes to put to the generated modules provider file.\n     */\n    iosModules(): string[];\n    /**\n     * Returns a list of names of Swift classes that receives AppDelegate life-cycle events.\n     */\n    iosAppDelegateSubscribers(): string[];\n    /**\n     * Returns a list of names of Swift classes that implement `ExpoReactDelegateHandler`.\n     */\n    iosReactDelegateHandlers(): string[];\n    /**\n     * Returns podspec paths defined by the module author.\n     */\n    iosPodspecPaths(): string[];\n    /**\n     * Returns the product module names, if defined by the module author.\n     */\n    iosSwiftModuleNames(): string[];\n    /**\n     * Returns whether this module will be added only to the debug configuration\n     */\n    iosDebugOnly(): boolean;\n    /**\n     * Returns a list of names of Kotlin native modules classes to put to the generated package provider file.\n     */\n    androidModules(): string[];\n    /**\n     * Returns build.gradle file paths defined by the module author.\n     */\n    androidGradlePaths(): string[];\n    /**\n     * Returns gradle plugins descriptors defined by the module author.\n     */\n    androidGradlePlugins(): AndroidGradlePluginDescriptor[];\n    /**\n     * Returns serializable raw config.\n     */\n    toJSON(): RawExpoModuleConfig;\n}\n/**\n * Reads the config at given path and returns the config wrapped by `ExpoModuleConfig` class.\n */\nexport declare function requireAndResolveExpoModuleConfig(path: string): ExpoModuleConfig;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}