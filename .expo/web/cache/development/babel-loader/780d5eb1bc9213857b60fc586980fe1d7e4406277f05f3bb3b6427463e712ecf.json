{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBareExtensions = exports.getLanguageExtensionsInOrder = exports.getExtensions = exports.getNativeModuleFileExtensions = exports.getModuleFileExtensions = void 0;\nvar assert_1 = __importDefault(require(\"assert\"));\nfunction getModuleFileExtensions() {\n  for (var _len = arguments.length, platforms = new Array(_len), _key = 0; _key < _len; _key++) {\n    platforms[_key] = arguments[_key];\n  }\n  return getBareExtensions(platforms).map(function (value) {\n    return `.${value}`;\n  });\n}\nexports.getModuleFileExtensions = getModuleFileExtensions;\nfunction getNativeModuleFileExtensions() {\n  for (var _len2 = arguments.length, platforms = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    platforms[_key2] = arguments[_key2];\n  }\n  return getBareExtensions(platforms, {\n    isReact: true,\n    isTS: true,\n    isModern: false\n  }).map(function (value) {\n    return `.${value}`;\n  });\n}\nexports.getNativeModuleFileExtensions = getNativeModuleFileExtensions;\nfunction getExtensions(platforms, extensions) {\n  (0, assert_1.default)(Array.isArray(platforms), 'Expected: `platforms: string[]`');\n  (0, assert_1.default)(Array.isArray(extensions), 'Expected: `extensions: string[]`');\n  var fileExtensions = [];\n  for (var platform of [].concat(_toConsumableArray(platforms), [''])) {\n    for (var extension of extensions) {\n      fileExtensions.push([platform, extension].filter(Boolean).join('.'));\n    }\n  }\n  return fileExtensions;\n}\nexports.getExtensions = getExtensions;\nfunction getLanguageExtensionsInOrder(_ref) {\n  var isTS = _ref.isTS,\n    isModern = _ref.isModern,\n    isReact = _ref.isReact;\n  var addLanguage = function addLanguage(lang) {\n    return [lang, isReact && `${lang}x`].filter(Boolean);\n  };\n  var extensions = addLanguage('js');\n  if (isModern) {\n    extensions.unshift('mjs');\n  }\n  if (isTS) {\n    extensions = [].concat(_toConsumableArray(addLanguage('ts')), _toConsumableArray(extensions));\n  }\n  return extensions;\n}\nexports.getLanguageExtensionsInOrder = getLanguageExtensionsInOrder;\nfunction getBareExtensions(platforms) {\n  var languageOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    isTS: true,\n    isModern: true,\n    isReact: true\n  };\n  var fileExtensions = getExtensions(platforms, getLanguageExtensionsInOrder(languageOptions));\n  _addMiscellaneousExtensions(platforms, fileExtensions);\n  return fileExtensions;\n}\nexports.getBareExtensions = getBareExtensions;\nfunction _addMiscellaneousExtensions(platforms, fileExtensions) {\n  fileExtensions.push('json');\n  if (platforms.includes('web')) {\n    fileExtensions.push('wasm');\n  }\n  return fileExtensions;\n}","map":{"version":3,"names":["assert_1","__importDefault","require","getModuleFileExtensions","_len","arguments","length","platforms","Array","_key","getBareExtensions","map","value","exports","getNativeModuleFileExtensions","_len2","_key2","isReact","isTS","isModern","getExtensions","extensions","default","isArray","fileExtensions","platform","concat","_toConsumableArray","extension","push","filter","Boolean","join","getLanguageExtensionsInOrder","_ref","addLanguage","lang","unshift","languageOptions","undefined","_addMiscellaneousExtensions","includes"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\webpack-config\\src\\env\\extensions.ts"],"sourcesContent":["import assert from 'assert';\n\n/**\n * Get the platform specific platform extensions in the format that Webpack expects (with a dot prefix).\n *\n * @param platforms supported platforms in order of priority. ex: ios, android, web, native, electron, etc...\n * @category env\n */\n\nexport function getModuleFileExtensions(...platforms: string[]): string[] {\n  // Webpack requires a `.` before each value\n  return getBareExtensions(platforms).map(value => `.${value}`);\n}\n\nexport function getNativeModuleFileExtensions(...platforms: string[]): string[] {\n  // Webpack requires a `.` before each value\n  // Disable modern when using `react-native`\n  return getBareExtensions(platforms, { isReact: true, isTS: true, isModern: false }).map(\n    value => `.${value}`\n  );\n}\n\nexport type LanguageOptions = {\n  isTS: boolean;\n  isModern: boolean;\n  isReact: boolean;\n};\n\nexport function getExtensions(platforms: string[], extensions: string[]): string[] {\n  // In the past we used spread operators to collect the values so now we enforce type safety on them.\n  assert(Array.isArray(platforms), 'Expected: `platforms: string[]`');\n  assert(Array.isArray(extensions), 'Expected: `extensions: string[]`');\n\n  const fileExtensions = [];\n\n  // Ensure order is correct: [platformA.js, platformB.js, js]\n  for (const platform of [...platforms, '']) {\n    // Support both TypeScript and JavaScript\n    for (const extension of extensions) {\n      fileExtensions.push([platform, extension].filter(Boolean).join('.'));\n    }\n  }\n  return fileExtensions;\n}\n\nexport function getLanguageExtensionsInOrder({\n  isTS,\n  isModern,\n  isReact,\n}: LanguageOptions): string[] {\n  // @ts-ignore: filter removes false type\n  const addLanguage = (lang: string): string[] => [lang, isReact && `${lang}x`].filter(Boolean);\n\n  // Support JavaScript\n  let extensions = addLanguage('js');\n\n  if (isModern) {\n    extensions.unshift('mjs');\n  }\n  if (isTS) {\n    extensions = [...addLanguage('ts'), ...extensions];\n  }\n\n  return extensions;\n}\n\nexport function getBareExtensions(\n  platforms: string[],\n  languageOptions: LanguageOptions = { isTS: true, isModern: true, isReact: true }\n): string[] {\n  const fileExtensions = getExtensions(platforms, getLanguageExtensionsInOrder(languageOptions));\n  // Always add these last\n  _addMiscellaneousExtensions(platforms, fileExtensions);\n  return fileExtensions;\n}\n\nfunction _addMiscellaneousExtensions(platforms: string[], fileExtensions: string[]): string[] {\n  // Always add these with no platform extension\n  // In the future we may want to add platform and workspace extensions to json.\n  fileExtensions.push('json');\n  // Native doesn't currently support web assembly.\n  if (platforms.includes('web')) {\n    fileExtensions.push('wasm');\n  }\n  return fileExtensions;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}