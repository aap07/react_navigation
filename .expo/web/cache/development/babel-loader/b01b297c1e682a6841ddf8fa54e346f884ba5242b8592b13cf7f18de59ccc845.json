{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getOrPromptForBundleIdentifier = getOrPromptForBundleIdentifier;\nexports.getOrPromptForPackage = getOrPromptForPackage;\nvar _config = require(\"@expo/config\");\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar Log = _interopRequireWildcard(require(\"../log\"));\nvar _link = require(\"./link\");\nvar _modifyConfigAsync = require(\"./modifyConfigAsync\");\nvar _prompts = _interopRequireWildcard(require(\"./prompts\"));\nvar _validateApplicationId = require(\"./validateApplicationId\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction getUsernameAsync(exp) {\n  return (0, _config).getAccountUsername(exp);\n}\nvar NO_BUNDLE_ID_MESSAGE = `Project must have a \\`ios.bundleIdentifier\\` set in the Expo config (app.json or app.config.js).`;\nvar NO_PACKAGE_MESSAGE = `Project must have a \\`android.package\\` set in the Expo config (app.json or app.config.js).`;\nfunction getOrPromptForBundleIdentifier(_x) {\n  return _getOrPromptForBundleIdentifier.apply(this, arguments);\n}\nfunction _getOrPromptForBundleIdentifier() {\n  _getOrPromptForBundleIdentifier = _asyncToGenerator(function* (projectRoot) {\n    var ref;\n    var _getConfig = (0, _config).getConfig(projectRoot),\n      exp = _getConfig.exp;\n    var current = (ref = exp.ios) == null ? void 0 : ref.bundleIdentifier;\n    if (current) {\n      (0, _validateApplicationId).assertValidBundleId(current);\n      return current;\n    }\n    Log.log(_chalk.default`\\n{bold 📝  iOS Bundle Identifier} {dim ${(0, _link).learnMore(\"https://expo.fyi/bundle-identifier\")}}\\n`);\n    return yield promptForBundleIdAsync(projectRoot, exp);\n  });\n  return _getOrPromptForBundleIdentifier.apply(this, arguments);\n}\nfunction promptForBundleIdAsync(_x2, _x3) {\n  return _promptForBundleIdAsync.apply(this, arguments);\n}\nfunction _promptForBundleIdAsync() {\n  _promptForBundleIdAsync = _asyncToGenerator(function* (projectRoot, exp) {\n    var ref;\n    var _yield$default = yield (0, _prompts).default({\n        type: \"text\",\n        name: \"bundleIdentifier\",\n        initial: (ref = yield getRecommendedBundleIdAsync(exp)) != null ? ref : undefined,\n        message: `What would you like your iOS bundle identifier to be?`,\n        validate: _validateApplicationId.validateBundleId\n      }, {\n        nonInteractiveHelp: NO_BUNDLE_ID_MESSAGE\n      }),\n      bundleIdentifier = _yield$default.bundleIdentifier;\n    var warning = yield (0, _validateApplicationId).getBundleIdWarningAsync(bundleIdentifier);\n    if (warning && !(yield warnAndConfirmAsync(warning))) {\n      return yield promptForBundleIdAsync(projectRoot, exp);\n    }\n    yield (0, _modifyConfigAsync).attemptModification(projectRoot, {\n      ios: _objectSpread(_objectSpread({}, exp.ios || {}), {}, {\n        bundleIdentifier: bundleIdentifier\n      })\n    }, {\n      ios: {\n        bundleIdentifier: bundleIdentifier\n      }\n    });\n    return bundleIdentifier;\n  });\n  return _promptForBundleIdAsync.apply(this, arguments);\n}\nfunction warnAndConfirmAsync(_x4) {\n  return _warnAndConfirmAsync.apply(this, arguments);\n}\nfunction _warnAndConfirmAsync() {\n  _warnAndConfirmAsync = _asyncToGenerator(function* (warning) {\n    Log.log();\n    Log.warn(warning);\n    Log.log();\n    if (!(yield (0, _prompts).confirmAsync({\n      message: `Continue?`,\n      initial: true\n    }))) {\n      return false;\n    }\n    return true;\n  });\n  return _warnAndConfirmAsync.apply(this, arguments);\n}\nfunction getRecommendedBundleIdAsync(_x5) {\n  return _getRecommendedBundleIdAsync.apply(this, arguments);\n}\nfunction _getRecommendedBundleIdAsync() {\n  _getRecommendedBundleIdAsync = _asyncToGenerator(function* (exp) {\n    var ref, ref1;\n    if (((ref = exp.android) == null ? void 0 : ref.package) && (0, _validateApplicationId).validateBundleId((ref1 = exp.android) == null ? void 0 : ref1.package)) {\n      var ref2;\n      return (ref2 = exp.android) == null ? void 0 : ref2.package;\n    } else {\n      var username = yield getUsernameAsync(exp);\n      var possibleId = `com.${username}.${exp.slug}`;\n      if (username && (0, _validateApplicationId).validateBundleId(possibleId)) {\n        return possibleId;\n      }\n    }\n    return null;\n  });\n  return _getRecommendedBundleIdAsync.apply(this, arguments);\n}\nfunction getRecommendedPackageNameAsync(_x6) {\n  return _getRecommendedPackageNameAsync.apply(this, arguments);\n}\nfunction _getRecommendedPackageNameAsync() {\n  _getRecommendedPackageNameAsync = _asyncToGenerator(function* (exp) {\n    var ref;\n    if (((ref = exp.ios) == null ? void 0 : ref.bundleIdentifier) && (0, _validateApplicationId).validatePackage(exp.ios.bundleIdentifier)) {\n      return exp.ios.bundleIdentifier;\n    } else {\n      var username = yield getUsernameAsync(exp);\n      var possibleId = `com.${username}.${exp.slug}`.split(\"-\").join(\"\");\n      if (username && (0, _validateApplicationId).validatePackage(possibleId)) {\n        return possibleId;\n      }\n    }\n    return null;\n  });\n  return _getRecommendedPackageNameAsync.apply(this, arguments);\n}\nfunction getOrPromptForPackage(_x7) {\n  return _getOrPromptForPackage.apply(this, arguments);\n}\nfunction _getOrPromptForPackage() {\n  _getOrPromptForPackage = _asyncToGenerator(function* (projectRoot) {\n    var ref;\n    var _getConfig2 = (0, _config).getConfig(projectRoot),\n      exp = _getConfig2.exp;\n    var current = (ref = exp.android) == null ? void 0 : ref.package;\n    if (current) {\n      (0, _validateApplicationId).assertValidPackage(current);\n      return current;\n    }\n    Log.log(_chalk.default`\\n{bold 📝  Android package} {dim ${(0, _link).learnMore(\"https://expo.fyi/android-package\")}}\\n`);\n    return yield promptForPackageAsync(projectRoot, exp);\n  });\n  return _getOrPromptForPackage.apply(this, arguments);\n}\nfunction promptForPackageAsync(_x8, _x9) {\n  return _promptForPackageAsync.apply(this, arguments);\n}\nfunction _promptForPackageAsync() {\n  _promptForPackageAsync = _asyncToGenerator(function* (projectRoot, exp) {\n    var ref;\n    var _yield$default2 = yield (0, _prompts).default({\n        type: \"text\",\n        name: \"packageName\",\n        initial: (ref = yield getRecommendedPackageNameAsync(exp)) != null ? ref : undefined,\n        message: `What would you like your Android package name to be?`,\n        validate: _validateApplicationId.validatePackage\n      }, {\n        nonInteractiveHelp: NO_PACKAGE_MESSAGE\n      }),\n      packageName = _yield$default2.packageName;\n    var warning = yield (0, _validateApplicationId).getPackageNameWarningAsync(packageName);\n    if (warning && !(yield warnAndConfirmAsync(warning))) {\n      return yield promptForPackageAsync(projectRoot, exp);\n    }\n    yield (0, _modifyConfigAsync).attemptModification(projectRoot, {\n      android: _objectSpread(_objectSpread({}, exp.android || {}), {}, {\n        package: packageName\n      })\n    }, {\n      android: {\n        package: packageName\n      }\n    });\n    return packageName;\n  });\n  return _promptForPackageAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_defineProperty","require","_asyncToGenerator","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","getOrPromptForBundleIdentifier","getOrPromptForPackage","_config","_chalk","_interopRequireDefault","Log","_interopRequireWildcard","_link","_modifyConfigAsync","_prompts","_validateApplicationId","getUsernameAsync","exp","getAccountUsername","NO_BUNDLE_ID_MESSAGE","NO_PACKAGE_MESSAGE","_x","_getOrPromptForBundleIdentifier","projectRoot","ref","_getConfig","getConfig","current","ios","bundleIdentifier","assertValidBundleId","log","default","learnMore","promptForBundleIdAsync","_x2","_x3","_promptForBundleIdAsync","_yield$default","type","name","initial","getRecommendedBundleIdAsync","undefined","message","validate","validateBundleId","nonInteractiveHelp","warning","getBundleIdWarningAsync","warnAndConfirmAsync","attemptModification","_x4","_warnAndConfirmAsync","warn","confirmAsync","_x5","_getRecommendedBundleIdAsync","ref1","android","package","ref2","username","possibleId","slug","getRecommendedPackageNameAsync","_x6","_getRecommendedPackageNameAsync","validatePackage","split","join","_x7","_getOrPromptForPackage","_getConfig2","assertValidPackage","promptForPackageAsync","_x8","_x9","_promptForPackageAsync","_yield$default2","packageName","getPackageNameWarningAsync"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\utils\\getOrPromptApplicationId.ts"],"sourcesContent":["import { ExpoConfig, getAccountUsername, getConfig } from '@expo/config';\nimport chalk from 'chalk';\n\nimport * as Log from '../log';\nimport { learnMore } from './link';\nimport { attemptModification } from './modifyConfigAsync';\nimport prompt, { confirmAsync } from './prompts';\nimport {\n  assertValidBundleId,\n  assertValidPackage,\n  getBundleIdWarningAsync,\n  getPackageNameWarningAsync,\n  validateBundleId,\n  validatePackage,\n} from './validateApplicationId';\n\nfunction getUsernameAsync(exp: ExpoConfig) {\n  // TODO: Use XDL's UserManager\n  // import { UserManager } from 'xdl';\n  return getAccountUsername(exp);\n}\n\nconst NO_BUNDLE_ID_MESSAGE = `Project must have a \\`ios.bundleIdentifier\\` set in the Expo config (app.json or app.config.js).`;\n\nconst NO_PACKAGE_MESSAGE = `Project must have a \\`android.package\\` set in the Expo config (app.json or app.config.js).`;\n\n/**\n * Get the bundle identifier from the Expo config or prompt the user to choose a new bundle identifier.\n * Prompted value will be validated against the App Store and a local regex.\n * If the project Expo config is a static JSON file, the bundle identifier will be updated in the config automatically.\n */\nexport async function getOrPromptForBundleIdentifier(projectRoot: string): Promise<string> {\n  const { exp } = getConfig(projectRoot);\n\n  const current = exp.ios?.bundleIdentifier;\n  if (current) {\n    assertValidBundleId(current);\n    return current;\n  }\n\n  Log.log(\n    chalk`\\n{bold 📝  iOS Bundle Identifier} {dim ${learnMore(\n      'https://expo.fyi/bundle-identifier'\n    )}}\\n`\n  );\n\n  return await promptForBundleIdAsync(projectRoot, exp);\n}\n\nasync function promptForBundleIdAsync(projectRoot: string, exp: ExpoConfig): Promise<string> {\n  // Prompt the user for the bundle ID.\n  // Even if the project is using a dynamic config we can still\n  // prompt a better error message, recommend a default value, and help the user\n  // validate their custom bundle ID upfront.\n  const { bundleIdentifier } = await prompt(\n    {\n      type: 'text',\n      name: 'bundleIdentifier',\n      initial: (await getRecommendedBundleIdAsync(exp)) ?? undefined,\n      // The Apple helps people know this isn't an EAS feature.\n      message: `What would you like your iOS bundle identifier to be?`,\n      validate: validateBundleId,\n    },\n    {\n      nonInteractiveHelp: NO_BUNDLE_ID_MESSAGE,\n    }\n  );\n\n  // Warn the user if the bundle ID is already in use.\n  const warning = await getBundleIdWarningAsync(bundleIdentifier);\n  if (warning && !(await warnAndConfirmAsync(warning))) {\n    // Cycle the Bundle ID prompt to try again.\n    return await promptForBundleIdAsync(projectRoot, exp);\n  }\n\n  // Apply the changes to the config.\n  await attemptModification(\n    projectRoot,\n    {\n      ios: { ...(exp.ios || {}), bundleIdentifier },\n    },\n    { ios: { bundleIdentifier } }\n  );\n\n  return bundleIdentifier;\n}\n\nasync function warnAndConfirmAsync(warning: string): Promise<boolean> {\n  Log.log();\n  Log.warn(warning);\n  Log.log();\n  if (\n    !(await confirmAsync({\n      message: `Continue?`,\n      initial: true,\n    }))\n  ) {\n    return false;\n  }\n  return true;\n}\n\n// Recommend a bundle identifier based on the username and project slug.\nasync function getRecommendedBundleIdAsync(exp: ExpoConfig): Promise<string | null> {\n  // Attempt to use the android package name first since it's convenient to have them aligned.\n  if (exp.android?.package && validateBundleId(exp.android?.package)) {\n    return exp.android?.package;\n  } else {\n    const username = await getUsernameAsync(exp);\n    const possibleId = `com.${username}.${exp.slug}`;\n    if (username && validateBundleId(possibleId)) {\n      return possibleId;\n    }\n  }\n\n  return null;\n}\n\n// Recommend a package name based on the username and project slug.\nasync function getRecommendedPackageNameAsync(exp: ExpoConfig): Promise<string | null> {\n  // Attempt to use the ios bundle id first since it's convenient to have them aligned.\n  if (exp.ios?.bundleIdentifier && validatePackage(exp.ios.bundleIdentifier)) {\n    return exp.ios.bundleIdentifier;\n  } else {\n    const username = await getUsernameAsync(exp);\n    // It's common to use dashes in your node project name, strip them from the suggested package name.\n    const possibleId = `com.${username}.${exp.slug}`.split('-').join('');\n    if (username && validatePackage(possibleId)) {\n      return possibleId;\n    }\n  }\n  return null;\n}\n\n/**\n * Get the package name from the Expo config or prompt the user to choose a new package name.\n * Prompted value will be validated against the Play Store and a local regex.\n * If the project Expo config is a static JSON file, the package name will be updated in the config automatically.\n */\nexport async function getOrPromptForPackage(projectRoot: string): Promise<string> {\n  const { exp } = getConfig(projectRoot);\n\n  const current = exp.android?.package;\n  if (current) {\n    assertValidPackage(current);\n    return current;\n  }\n\n  Log.log(\n    chalk`\\n{bold 📝  Android package} {dim ${learnMore('https://expo.fyi/android-package')}}\\n`\n  );\n\n  return await promptForPackageAsync(projectRoot, exp);\n}\n\nasync function promptForPackageAsync(projectRoot: string, exp: ExpoConfig): Promise<string> {\n  // Prompt the user for the android package.\n  // Even if the project is using a dynamic config we can still\n  // prompt a better error message, recommend a default value, and help the user\n  // validate their custom android package upfront.\n  const { packageName } = await prompt(\n    {\n      type: 'text',\n      name: 'packageName',\n      initial: (await getRecommendedPackageNameAsync(exp)) ?? undefined,\n      message: `What would you like your Android package name to be?`,\n      validate: validatePackage,\n    },\n    {\n      nonInteractiveHelp: NO_PACKAGE_MESSAGE,\n    }\n  );\n\n  // Warn the user if the package name is already in use.\n  const warning = await getPackageNameWarningAsync(packageName);\n  if (warning && !(await warnAndConfirmAsync(warning))) {\n    // Cycle the Package name prompt to try again.\n    return await promptForPackageAsync(projectRoot, exp);\n  }\n\n  // Apply the changes to the config.\n  await attemptModification(\n    projectRoot,\n    {\n      android: { ...(exp.android || {}), package: packageName },\n    },\n    {\n      android: { package: packageName },\n    }\n  );\n\n  return packageName;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}