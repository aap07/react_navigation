{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRootViewBackgroundColor = getRootViewBackgroundColor;\nexports.setRootViewBackgroundColor = setRootViewBackgroundColor;\nexports.shouldUseLegacyBehavior = shouldUseLegacyBehavior;\nexports.warnSystemUIMissing = warnSystemUIMissing;\nexports.withIosRootViewBackgroundColor = void 0;\nfunction _configPlugins() {\n  var data = require(\"@expo/config-plugins\");\n  _configPlugins = function _configPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _normalizeColor() {\n  var data = _interopRequireDefault(require(\"@react-native/normalize-color\"));\n  _normalizeColor = function _normalizeColor() {\n    return data;\n  };\n  return data;\n}\nfunction _semver() {\n  var data = _interopRequireDefault(require(\"semver\"));\n  _semver = function _semver() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar BACKGROUND_COLOR_KEY = 'RCTRootViewBackgroundColor';\nvar debug = require('debug')('expo:system-ui:plugin:ios');\nvar withIosRootViewBackgroundColor = function withIosRootViewBackgroundColor(config) {\n  config = (0, _configPlugins().withInfoPlist)(config, function (config) {\n    if (shouldUseLegacyBehavior(config)) {\n      config.modResults = setRootViewBackgroundColor(config, config.modResults);\n    } else {\n      warnSystemUIMissing(config);\n    }\n    return config;\n  });\n  return config;\n};\nexports.withIosRootViewBackgroundColor = withIosRootViewBackgroundColor;\nfunction shouldUseLegacyBehavior(config) {\n  try {\n    return !!(config.sdkVersion && _semver().default.lt(config.sdkVersion, '44.0.0'));\n  } catch (_unused) {}\n  return false;\n}\nfunction warnSystemUIMissing(config) {\n  var backgroundColor = getRootViewBackgroundColor(config);\n  if (backgroundColor) {\n    _configPlugins().WarningAggregator.addWarningIOS('ios.backgroundColor', 'Install expo-system-ui to enable this feature', 'https://docs.expo.dev/build-reference/migrating/#expo-config--backgroundcolor--depends-on');\n  }\n}\nfunction setRootViewBackgroundColor(config, infoPlist) {\n  var backgroundColor = getRootViewBackgroundColor(config);\n  if (!backgroundColor) {\n    delete infoPlist[BACKGROUND_COLOR_KEY];\n  } else {\n    var color = (0, _normalizeColor().default)(backgroundColor);\n    if (!color) {\n      throw new Error('Invalid background color on iOS');\n    }\n    color = (color << 24 | color >>> 8) >>> 0;\n    infoPlist[BACKGROUND_COLOR_KEY] = color;\n    debug(`Convert color: ${backgroundColor} -> ${color}`);\n  }\n  return infoPlist;\n}\nfunction getRootViewBackgroundColor(config) {\n  var _config$ios;\n  return ((_config$ios = config.ios) === null || _config$ios === void 0 ? void 0 : _config$ios.backgroundColor) || config.backgroundColor || null;\n}","map":{"version":3,"names":["_configPlugins","data","require","_normalizeColor","_interopRequireDefault","_semver","obj","__esModule","default","BACKGROUND_COLOR_KEY","debug","withIosRootViewBackgroundColor","config","withInfoPlist","shouldUseLegacyBehavior","modResults","setRootViewBackgroundColor","warnSystemUIMissing","exports","sdkVersion","lt","_unused","backgroundColor","getRootViewBackgroundColor","WarningAggregator","addWarningIOS","infoPlist","color","Error","_config$ios","ios"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\prebuild-config\\src\\plugins\\unversioned\\expo-system-ui\\withIosRootViewBackgroundColor.ts"],"sourcesContent":["import { ConfigPlugin, InfoPlist, WarningAggregator, withInfoPlist } from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\n// @ts-ignore: uses flow\nimport normalizeColor from '@react-native/normalize-color';\nimport semver from 'semver';\n\n// Maps to the template AppDelegate.m\nconst BACKGROUND_COLOR_KEY = 'RCTRootViewBackgroundColor';\n\nconst debug = require('debug')('expo:system-ui:plugin:ios');\n\nexport const withIosRootViewBackgroundColor: ConfigPlugin = (config) => {\n  config = withInfoPlist(config, (config) => {\n    if (shouldUseLegacyBehavior(config)) {\n      config.modResults = setRootViewBackgroundColor(config, config.modResults);\n    } else {\n      warnSystemUIMissing(config);\n    }\n    return config;\n  });\n  return config;\n};\n\n/** The template was changed in SDK 43 to move the background color logic to the `expo-system-ui` module */\nexport function shouldUseLegacyBehavior(config: Pick<ExpoConfig, 'sdkVersion'>): boolean {\n  try {\n    return !!(config.sdkVersion && semver.lt(config.sdkVersion, '44.0.0'));\n  } catch {}\n  return false;\n}\n\nexport function warnSystemUIMissing(\n  config: Pick<ExpoConfig, 'sdkVersion' | 'backgroundColor' | 'ios'>\n) {\n  const backgroundColor = getRootViewBackgroundColor(config);\n\n  if (backgroundColor) {\n    // Background color needs to be set programmatically\n    WarningAggregator.addWarningIOS(\n      'ios.backgroundColor',\n      'Install expo-system-ui to enable this feature',\n      'https://docs.expo.dev/build-reference/migrating/#expo-config--backgroundcolor--depends-on'\n    );\n  }\n}\n\nexport function setRootViewBackgroundColor(\n  config: Pick<ExpoConfig, 'backgroundColor' | 'ios'>,\n  infoPlist: InfoPlist\n): InfoPlist {\n  const backgroundColor = getRootViewBackgroundColor(config);\n  if (!backgroundColor) {\n    delete infoPlist[BACKGROUND_COLOR_KEY];\n  } else {\n    let color = normalizeColor(backgroundColor);\n    if (!color) {\n      throw new Error('Invalid background color on iOS');\n    }\n    color = ((color << 24) | (color >>> 8)) >>> 0;\n    infoPlist[BACKGROUND_COLOR_KEY] = color;\n\n    debug(`Convert color: ${backgroundColor} -> ${color}`);\n  }\n  return infoPlist;\n}\n\nexport function getRootViewBackgroundColor(config: Pick<ExpoConfig, 'ios' | 'backgroundColor'>) {\n  return config.ios?.backgroundColor || config.backgroundColor || null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}