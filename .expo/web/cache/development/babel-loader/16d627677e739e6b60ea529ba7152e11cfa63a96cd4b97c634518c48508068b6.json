{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveOptionsAsync = resolveOptionsAsync;\nvar _simctl = require(\"../../../start/platforms/ios/simctl\");\nvar _resolveBundlerProps = require(\"../../resolveBundlerProps\");\nvar _resolveDevice = require(\"./resolveDevice\");\nvar _resolveNativeScheme = require(\"./resolveNativeScheme\");\nvar _resolveXcodeProject = require(\"./resolveXcodeProject\");\nfunction resolveOptionsAsync(_x, _x2) {\n  return _resolveOptionsAsync.apply(this, arguments);\n}\nfunction _resolveOptionsAsync() {\n  _resolveOptionsAsync = _asyncToGenerator(function* (projectRoot, options) {\n    var xcodeProject = (0, _resolveXcodeProject).resolveXcodeProject(projectRoot);\n    var bundlerProps = yield (0, _resolveBundlerProps).resolveBundlerPropsAsync(projectRoot, options);\n    var _yield$resolveNativeS = yield (0, _resolveNativeScheme).resolveNativeSchemePropsAsync(projectRoot, options, xcodeProject),\n      osType = _yield$resolveNativeS.osType,\n      scheme = _yield$resolveNativeS.name;\n    var device = yield (0, _resolveDevice).resolveDeviceAsync(options.device, {\n      osType: (0, _simctl).isOSType(osType) ? osType : undefined\n    });\n    var isSimulator = (0, _resolveDevice).isSimulatorDevice(device);\n    var configuration = options.configuration || \"Debug\";\n    var shouldSkipInitialBundling = configuration === \"Debug\" && !isSimulator;\n    return _objectSpread(_objectSpread({}, bundlerProps), {}, {\n      projectRoot: projectRoot,\n      isSimulator: isSimulator,\n      xcodeProject: xcodeProject,\n      device: device,\n      configuration: configuration,\n      shouldSkipInitialBundling: shouldSkipInitialBundling,\n      buildCache: options.buildCache !== false,\n      scheme: scheme\n    });\n  });\n  return _resolveOptionsAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_defineProperty","require","_asyncToGenerator","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","resolveOptionsAsync","_simctl","_resolveBundlerProps","_resolveDevice","_resolveNativeScheme","_resolveXcodeProject","_x","_x2","_resolveOptionsAsync","projectRoot","options","xcodeProject","resolveXcodeProject","bundlerProps","resolveBundlerPropsAsync","_yield$resolveNativeS","resolveNativeSchemePropsAsync","osType","scheme","name","device","resolveDeviceAsync","isOSType","undefined","isSimulator","isSimulatorDevice","configuration","shouldSkipInitialBundling","buildCache"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\run\\ios\\options\\resolveOptions.ts"],"sourcesContent":["import { isOSType } from '../../../start/platforms/ios/simctl';\nimport { resolveBundlerPropsAsync } from '../../resolveBundlerProps';\nimport { BuildProps, Options } from '../XcodeBuild.types';\nimport { isSimulatorDevice, resolveDeviceAsync } from './resolveDevice';\nimport { resolveNativeSchemePropsAsync } from './resolveNativeScheme';\nimport { resolveXcodeProject } from './resolveXcodeProject';\n\n/** Resolve arguments for the `run:ios` command. */\nexport async function resolveOptionsAsync(\n  projectRoot: string,\n  options: Options\n): Promise<BuildProps> {\n  const xcodeProject = resolveXcodeProject(projectRoot);\n\n  const bundlerProps = await resolveBundlerPropsAsync(projectRoot, options);\n\n  // Resolve the scheme before the device so we can filter devices based on\n  // whichever scheme is selected (i.e. don't present TV devices if the scheme cannot be run on a TV).\n  const { osType, name: scheme } = await resolveNativeSchemePropsAsync(\n    projectRoot,\n    options,\n    xcodeProject\n  );\n\n  // Resolve the device based on the provided device id or prompt\n  // from a list of devices (connected or simulated) that are filtered by the scheme.\n  const device = await resolveDeviceAsync(options.device, {\n    // It's unclear if there's any value to asserting that we haven't hardcoded the os type in the CLI.\n    osType: isOSType(osType) ? osType : undefined,\n  });\n\n  const isSimulator = isSimulatorDevice(device);\n\n  // Use the configuration or `Debug` if none is provided.\n  const configuration = options.configuration || 'Debug';\n\n  // This optimization skips resetting the Metro cache needlessly.\n  // The cache is reset in `../node_modules/react-native/scripts/react-native-xcode.sh` when the\n  // project is running in Debug and built onto a physical device. It seems that this is done because\n  // the script is run from Xcode and unaware of the CLI instance.\n  const shouldSkipInitialBundling = configuration === 'Debug' && !isSimulator;\n\n  return {\n    ...bundlerProps,\n    projectRoot,\n    isSimulator,\n    xcodeProject,\n    device,\n    configuration,\n    shouldSkipInitialBundling,\n    buildCache: options.buildCache !== false,\n    scheme,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}