{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nvar MacOSPlatform = _createClass(function MacOSPlatform() {\n  _classCallCheck(this, MacOSPlatform);\n});\nexport { MacOSPlatform as default };","map":{"version":3,"names":["MacOSPlatform","_createClass","_classCallCheck","default"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/devcert/dist/platforms/darwin.d.ts"],"sourcesContent":["import { Options } from '../index';\nimport { Platform } from '.';\nexport default class MacOSPlatform implements Platform {\n    private FIREFOX_BUNDLE_PATH;\n    private FIREFOX_BIN_PATH;\n    private FIREFOX_NSS_DIR;\n    private HOST_FILE_PATH;\n    /**\n     * macOS is pretty simple - just add the certificate to the system keychain,\n     * and most applications will delegate to that for determining trusted\n     * certificates. Firefox, of course, does it's own thing. We can try to\n     * automatically install the cert with Firefox if we can use certutil via the\n     * `nss` Homebrew package, otherwise we go manual with user-facing prompts.\n     */\n    addToTrustStores(certificatePath: string, options?: Options): Promise<void>;\n    removeFromTrustStores(certificatePath: string): void;\n    addDomainToHostFileIfMissing(domain: string): Promise<void>;\n    deleteProtectedFiles(filepath: string): void;\n    readProtectedFile(filepath: string): Promise<string>;\n    writeProtectedFile(filepath: string, contents: string): Promise<void>;\n    private isFirefoxInstalled;\n    private isNSSInstalled;\n}\n"],"mappings":";;IAEqBA,aAAa,GAAAC,YAAA,UAAAD,cAAA;EAAAE,eAAA,OAAAF,aAAA;AAAA;AAAA,SAAbA,aAAa,IAAAG,OAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}