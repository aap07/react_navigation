{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nvar _runServer = _interopRequireDefault(require(\"./runServer\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar _default = {\n  name: 'start',\n  func: _runServer.default,\n  description: 'starts the webserver',\n  options: [{\n    name: '--port <number>',\n    parse: Number\n  }, {\n    name: '--host <string>',\n    default: ''\n  }, {\n    name: '--projectRoot <path>',\n    description: 'Path to a custom project root',\n    parse: function parse(val) {\n      return _path().default.resolve(val);\n    }\n  }, {\n    name: '--watchFolders <list>',\n    description: 'Specify any additional folders to be added to the watch list',\n    parse: function parse(val) {\n      return val.split(',').map(function (folder) {\n        return _path().default.resolve(folder);\n      });\n    }\n  }, {\n    name: '--assetPlugins <list>',\n    description: 'Specify any additional asset plugins to be used by the packager by full filepath',\n    parse: function parse(val) {\n      return val.split(',');\n    }\n  }, {\n    name: '--sourceExts <list>',\n    description: 'Specify any additional source extensions to be used by the packager',\n    parse: function parse(val) {\n      return val.split(',');\n    }\n  }, {\n    name: '--max-workers <number>',\n    description: 'Specifies the maximum number of workers the worker-pool ' + 'will spawn for transforming files. This defaults to the number of the ' + 'cores available on your machine.',\n    parse: function parse(workers) {\n      return Number(workers);\n    }\n  }, {\n    name: '--transformer <string>',\n    description: 'Specify a custom transformer to be used'\n  }, {\n    name: '--reset-cache, --resetCache',\n    description: 'Removes cached files'\n  }, {\n    name: '--custom-log-reporter-path, --customLogReporterPath <string>',\n    description: 'Path to a JavaScript file that exports a log reporter as a replacement for TerminalReporter'\n  }, {\n    name: '--https',\n    description: 'Enables https connections to the server'\n  }, {\n    name: '--key <path>',\n    description: 'Path to custom SSL key'\n  }, {\n    name: '--cert <path>',\n    description: 'Path to custom SSL cert'\n  }, {\n    name: '--config <string>',\n    description: 'Path to the CLI configuration file',\n    parse: function parse(val) {\n      return _path().default.resolve(val);\n    }\n  }, {\n    name: '--no-interactive',\n    description: 'Disables interactive mode'\n  }]\n};\nexports.default = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","default","_path","data","_interopRequireDefault","require","_runServer","obj","__esModule","_default","name","func","description","options","parse","Number","val","resolve","split","map","folder","workers"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-plugin-metro/build/commands/start/index.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nfunction _path() {\n  const data = _interopRequireDefault(require(\"path\"));\n  _path = function () {\n    return data;\n  };\n  return data;\n}\nvar _runServer = _interopRequireDefault(require(\"./runServer\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nvar _default = {\n  name: 'start',\n  func: _runServer.default,\n  description: 'starts the webserver',\n  options: [{\n    name: '--port <number>',\n    parse: Number\n  }, {\n    name: '--host <string>',\n    default: ''\n  }, {\n    name: '--projectRoot <path>',\n    description: 'Path to a custom project root',\n    parse: val => _path().default.resolve(val)\n  }, {\n    name: '--watchFolders <list>',\n    description: 'Specify any additional folders to be added to the watch list',\n    parse: val => val.split(',').map(folder => _path().default.resolve(folder))\n  }, {\n    name: '--assetPlugins <list>',\n    description: 'Specify any additional asset plugins to be used by the packager by full filepath',\n    parse: val => val.split(',')\n  }, {\n    name: '--sourceExts <list>',\n    description: 'Specify any additional source extensions to be used by the packager',\n    parse: val => val.split(',')\n  }, {\n    name: '--max-workers <number>',\n    description: 'Specifies the maximum number of workers the worker-pool ' + 'will spawn for transforming files. This defaults to the number of the ' + 'cores available on your machine.',\n    parse: workers => Number(workers)\n  }, {\n    name: '--transformer <string>',\n    description: 'Specify a custom transformer to be used'\n  }, {\n    name: '--reset-cache, --resetCache',\n    description: 'Removes cached files'\n  }, {\n    name: '--custom-log-reporter-path, --customLogReporterPath <string>',\n    description: 'Path to a JavaScript file that exports a log reporter as a replacement for TerminalReporter'\n  }, {\n    name: '--https',\n    description: 'Enables https connections to the server'\n  }, {\n    name: '--key <path>',\n    description: 'Path to custom SSL key'\n  }, {\n    name: '--cert <path>',\n    description: 'Path to custom SSL cert'\n  }, {\n    name: '--config <string>',\n    description: 'Path to the CLI configuration file',\n    parse: val => _path().default.resolve(val)\n  }, {\n    name: '--no-interactive',\n    description: 'Disables interactive mode'\n  }]\n};\nexports.default = _default;\n\n//# sourceMappingURL=index.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}