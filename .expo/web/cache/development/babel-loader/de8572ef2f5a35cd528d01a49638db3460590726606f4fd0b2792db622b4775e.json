{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"state\", \"descriptors\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { HeaderShownContext, SafeAreaProviderCompat } from '@react-navigation/elements';\nimport { StackActions } from '@react-navigation/native';\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\nimport ModalPresentationContext from \"../../utils/ModalPresentationContext\";\nimport { GestureHandlerRootView } from \"../GestureHandler\";\nimport HeaderContainer from \"../Header/HeaderContainer\";\nimport CardStack from \"./CardStack\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar GestureHandlerWrapper = GestureHandlerRootView != null ? GestureHandlerRootView : View;\nvar isArrayEqual = function isArrayEqual(a, b) {\n  return a.length === b.length && a.every(function (it, index) {\n    return it === b[index];\n  });\n};\nvar StackView = function (_React$Component) {\n  _inherits(StackView, _React$Component);\n  var _super = _createSuper(StackView);\n  function StackView() {\n    var _this;\n    _classCallCheck(this, StackView);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      routes: [],\n      previousRoutes: [],\n      previousDescriptors: {},\n      openingRouteKeys: [],\n      closingRouteKeys: [],\n      replacingRouteKeys: [],\n      descriptors: {}\n    };\n    _this.getPreviousRoute = function (_ref) {\n      var route = _ref.route;\n      var _this$state = _this.state,\n        closingRouteKeys = _this$state.closingRouteKeys,\n        replacingRouteKeys = _this$state.replacingRouteKeys;\n      var routes = _this.state.routes.filter(function (r) {\n        return r.key === route.key || !closingRouteKeys.includes(r.key) && !replacingRouteKeys.includes(r.key);\n      });\n      var index = routes.findIndex(function (r) {\n        return r.key === route.key;\n      });\n      return routes[index - 1];\n    };\n    _this.renderScene = function (_ref2) {\n      var route = _ref2.route;\n      var descriptor = _this.state.descriptors[route.key] || _this.props.descriptors[route.key];\n      if (!descriptor) {\n        return null;\n      }\n      return descriptor.render();\n    };\n    _this.renderHeader = function (props) {\n      return _jsx(HeaderContainer, _objectSpread({}, props));\n    };\n    _this.handleOpenRoute = function (_ref3) {\n      var route = _ref3.route;\n      var _this$props = _this.props,\n        state = _this$props.state,\n        navigation = _this$props.navigation;\n      var _this$state2 = _this.state,\n        closingRouteKeys = _this$state2.closingRouteKeys,\n        replacingRouteKeys = _this$state2.replacingRouteKeys;\n      if (closingRouteKeys.some(function (key) {\n        return key === route.key;\n      }) && replacingRouteKeys.every(function (key) {\n        return key !== route.key;\n      }) && state.routeNames.includes(route.name) && !state.routes.some(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.navigate(route);\n      } else {\n        _this.setState(function (state) {\n          return {\n            routes: state.replacingRouteKeys.length ? state.routes.filter(function (r) {\n              return !state.replacingRouteKeys.includes(r.key);\n            }) : state.routes,\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            replacingRouteKeys: []\n          };\n        });\n      }\n    };\n    _this.handleCloseRoute = function (_ref4) {\n      var route = _ref4.route;\n      var _this$props2 = _this.props,\n        state = _this$props2.state,\n        navigation = _this$props2.navigation;\n      if (state.routes.some(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.pop()), {}, {\n          source: route.key,\n          target: state.key\n        }));\n      } else {\n        _this.setState(function (state) {\n          return {\n            routes: state.routes.filter(function (r) {\n              return r.key !== route.key;\n            }),\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            })\n          };\n        });\n      }\n    };\n    _this.handleTransitionStart = function (_ref5, closing) {\n      var route = _ref5.route;\n      return _this.props.navigation.emit({\n        type: 'transitionStart',\n        data: {\n          closing: closing\n        },\n        target: route.key\n      });\n    };\n    _this.handleTransitionEnd = function (_ref6, closing) {\n      var route = _ref6.route;\n      return _this.props.navigation.emit({\n        type: 'transitionEnd',\n        data: {\n          closing: closing\n        },\n        target: route.key\n      });\n    };\n    _this.handleGestureStart = function (_ref7) {\n      var route = _ref7.route;\n      _this.props.navigation.emit({\n        type: 'gestureStart',\n        target: route.key\n      });\n    };\n    _this.handleGestureEnd = function (_ref8) {\n      var route = _ref8.route;\n      _this.props.navigation.emit({\n        type: 'gestureEnd',\n        target: route.key\n      });\n    };\n    _this.handleGestureCancel = function (_ref9) {\n      var route = _ref9.route;\n      _this.props.navigation.emit({\n        type: 'gestureCancel',\n        target: route.key\n      });\n    };\n    return _this;\n  }\n  _createClass(StackView, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props3 = this.props,\n        state = _this$props3.state,\n        _ = _this$props3.descriptors,\n        rest = _objectWithoutProperties(_this$props3, _excluded);\n      var _this$state3 = this.state,\n        routes = _this$state3.routes,\n        descriptors = _this$state3.descriptors,\n        openingRouteKeys = _this$state3.openingRouteKeys,\n        closingRouteKeys = _this$state3.closingRouteKeys;\n      return _jsx(GestureHandlerWrapper, {\n        style: styles.container,\n        children: _jsx(SafeAreaProviderCompat, {\n          children: _jsx(SafeAreaInsetsContext.Consumer, {\n            children: function children(insets) {\n              return _jsx(ModalPresentationContext.Consumer, {\n                children: function children(isParentModal) {\n                  return _jsx(HeaderShownContext.Consumer, {\n                    children: function children(isParentHeaderShown) {\n                      return _jsx(CardStack, _objectSpread({\n                        insets: insets,\n                        isParentHeaderShown: isParentHeaderShown,\n                        isParentModal: isParentModal,\n                        getPreviousRoute: _this2.getPreviousRoute,\n                        routes: routes,\n                        openingRouteKeys: openingRouteKeys,\n                        closingRouteKeys: closingRouteKeys,\n                        onOpenRoute: _this2.handleOpenRoute,\n                        onCloseRoute: _this2.handleCloseRoute,\n                        onTransitionStart: _this2.handleTransitionStart,\n                        onTransitionEnd: _this2.handleTransitionEnd,\n                        renderHeader: _this2.renderHeader,\n                        renderScene: _this2.renderScene,\n                        state: state,\n                        descriptors: descriptors,\n                        onGestureStart: _this2.handleGestureStart,\n                        onGestureEnd: _this2.handleGestureEnd,\n                        onGestureCancel: _this2.handleGestureCancel\n                      }, rest));\n                    }\n                  });\n                }\n              });\n            }\n          })\n        })\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if ((props.state.routes === state.previousRoutes || isArrayEqual(props.state.routes.map(function (r) {\n        return r.key;\n      }), state.previousRoutes.map(function (r) {\n        return r.key;\n      }))) && state.routes.length) {\n        var _routes = state.routes;\n        var _previousRoutes = state.previousRoutes;\n        var _descriptors = props.descriptors;\n        var previousDescriptors = state.previousDescriptors;\n        if (props.descriptors !== state.previousDescriptors) {\n          _descriptors = state.routes.reduce(function (acc, route) {\n            acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n            return acc;\n          }, {});\n          previousDescriptors = props.descriptors;\n        }\n        if (props.state.routes !== state.previousRoutes) {\n          var map = props.state.routes.reduce(function (acc, route) {\n            acc[route.key] = route;\n            return acc;\n          }, {});\n          _routes = state.routes.map(function (route) {\n            return map[route.key] || route;\n          });\n          _previousRoutes = props.state.routes;\n        }\n        return {\n          routes: _routes,\n          previousRoutes: _previousRoutes,\n          descriptors: _descriptors,\n          previousDescriptors: previousDescriptors\n        };\n      }\n      var routes = props.state.index < props.state.routes.length - 1 ? props.state.routes.slice(0, props.state.index + 1) : props.state.routes;\n      var openingRouteKeys = state.openingRouteKeys,\n        closingRouteKeys = state.closingRouteKeys,\n        replacingRouteKeys = state.replacingRouteKeys,\n        previousRoutes = state.previousRoutes;\n      var previousFocusedRoute = previousRoutes[previousRoutes.length - 1];\n      var nextFocusedRoute = routes[routes.length - 1];\n      var isAnimationEnabled = function isAnimationEnabled(key) {\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return descriptor ? descriptor.options.animationEnabled !== false : true;\n      };\n      var getAnimationTypeForReplace = function getAnimationTypeForReplace(key) {\n        var _descriptor$options$a;\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return (_descriptor$options$a = descriptor.options.animationTypeForReplace) != null ? _descriptor$options$a : 'push';\n      };\n      if (previousFocusedRoute && previousFocusedRoute.key !== nextFocusedRoute.key) {\n        if (!previousRoutes.some(function (r) {\n          return r.key === nextFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(nextFocusedRoute.key) && !openingRouteKeys.includes(nextFocusedRoute.key)) {\n            openingRouteKeys = [].concat(_toConsumableArray(openingRouteKeys), [nextFocusedRoute.key]);\n            closingRouteKeys = closingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n            if (!routes.some(function (r) {\n              return r.key === previousFocusedRoute.key;\n            })) {\n              openingRouteKeys = openingRouteKeys.filter(function (key) {\n                return key !== previousFocusedRoute.key;\n              });\n              if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n                closingRouteKeys = [].concat(_toConsumableArray(closingRouteKeys), [previousFocusedRoute.key]);\n                openingRouteKeys = openingRouteKeys.filter(function (key) {\n                  return key !== nextFocusedRoute.key;\n                });\n                routes = [].concat(_toConsumableArray(routes), [previousFocusedRoute]);\n              } else {\n                replacingRouteKeys = [].concat(_toConsumableArray(replacingRouteKeys), [previousFocusedRoute.key]);\n                closingRouteKeys = closingRouteKeys.filter(function (key) {\n                  return key !== previousFocusedRoute.key;\n                });\n                routes = routes.slice();\n                routes.splice(routes.length - 1, 0, previousFocusedRoute);\n              }\n            }\n          }\n        } else if (!routes.some(function (r) {\n          return r.key === previousFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(previousFocusedRoute.key) && !closingRouteKeys.includes(previousFocusedRoute.key)) {\n            closingRouteKeys = [].concat(_toConsumableArray(closingRouteKeys), [previousFocusedRoute.key]);\n            openingRouteKeys = openingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            routes = [].concat(_toConsumableArray(routes), [previousFocusedRoute]);\n          }\n        } else {}\n      } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n        var _routes2;\n        routes = routes.slice();\n        (_routes2 = routes).splice.apply(_routes2, [routes.length - 1, 0].concat(_toConsumableArray(state.routes.filter(function (_ref10) {\n          var key = _ref10.key;\n          return isAnimationEnabled(key) ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key) : false;\n        }))));\n      }\n      if (!routes.length) {\n        throw new Error('There should always be at least one route in the navigation state.');\n      }\n      var descriptors = routes.reduce(function (acc, route) {\n        acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n        return acc;\n      }, {});\n      return {\n        routes: routes,\n        previousRoutes: props.state.routes,\n        previousDescriptors: props.descriptors,\n        openingRouteKeys: openingRouteKeys,\n        closingRouteKeys: closingRouteKeys,\n        replacingRouteKeys: replacingRouteKeys,\n        descriptors: descriptors\n      };\n    }\n  }]);\n  return StackView;\n}(React.Component);\nexport { StackView as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["HeaderShownContext","SafeAreaProviderCompat","StackActions","React","StyleSheet","View","SafeAreaInsetsContext","ModalPresentationContext","GestureHandlerRootView","HeaderContainer","CardStack","jsx","_jsx","GestureHandlerWrapper","isArrayEqual","a","b","length","every","it","index","StackView","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","call","apply","concat","state","routes","previousRoutes","previousDescriptors","openingRouteKeys","closingRouteKeys","replacingRouteKeys","descriptors","getPreviousRoute","_ref","route","_this$state","filter","r","key","includes","findIndex","renderScene","_ref2","descriptor","props","render","renderHeader","_objectSpread","handleOpenRoute","_ref3","_this$props","navigation","_this$state2","some","routeNames","name","navigate","setState","handleCloseRoute","_ref4","_this$props2","dispatch","pop","source","target","handleTransitionStart","_ref5","closing","emit","type","data","handleTransitionEnd","_ref6","handleGestureStart","_ref7","handleGestureEnd","_ref8","handleGestureCancel","_ref9","_createClass","value","_this2","_this$props3","_","rest","_objectWithoutProperties","_excluded","_this$state3","style","styles","container","children","Consumer","insets","isParentModal","isParentHeaderShown","onOpenRoute","onCloseRoute","onTransitionStart","onTransitionEnd","onGestureStart","onGestureEnd","onGestureCancel","getDerivedStateFromProps","map","reduce","acc","slice","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","options","animationEnabled","getAnimationTypeForReplace","_descriptor$options$a","animationTypeForReplace","_toConsumableArray","splice","_routes2","_ref10","Error","Component","default","create","flex"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-navigation/stack/src/views/Stack/StackView.tsx"],"sourcesContent":["import {\n  HeaderShownContext,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport {\n  ParamListBase,\n  Route,\n  StackActions,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport {\n  EdgeInsets,\n  SafeAreaInsetsContext,\n} from 'react-native-safe-area-context';\n\nimport type {\n  StackDescriptorMap,\n  StackNavigationConfig,\n  StackNavigationHelpers,\n} from '../../types';\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport HeaderContainer, {\n  Props as HeaderContainerProps,\n} from '../Header/HeaderContainer';\nimport CardStack from './CardStack';\n\ntype Props = StackNavigationConfig & {\n  state: StackNavigationState<ParamListBase>;\n  navigation: StackNavigationHelpers;\n  descriptors: StackDescriptorMap;\n};\n\ntype State = {\n  // Local copy of the routes which are actually rendered\n  routes: Route<string>[];\n  // Previous routes, to compare whether routes have changed or not\n  previousRoutes: Route<string>[];\n  // Previous descriptors, to compare whether descriptors have changed or not\n  previousDescriptors: StackDescriptorMap;\n  // List of routes being opened, we need to animate pushing of these new routes\n  openingRouteKeys: string[];\n  // List of routes being closed, we need to animate popping of these routes\n  closingRouteKeys: string[];\n  // List of routes being replaced, we need to keep a copy until the new route animates in\n  replacingRouteKeys: string[];\n  // Since the local routes can vary from the routes from props, we need to keep the descriptors for old routes\n  // Otherwise we won't be able to access the options for routes that were removed\n  descriptors: StackDescriptorMap;\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\nexport default class StackView extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Readonly<Props>,\n    state: Readonly<State>\n  ) {\n    // If there was no change in routes, we don't need to compute anything\n    if (\n      (props.state.routes === state.previousRoutes ||\n        isArrayEqual(\n          props.state.routes.map((r) => r.key),\n          state.previousRoutes.map((r) => r.key)\n        )) &&\n      state.routes.length\n    ) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce<StackDescriptorMap>((acc, route) => {\n          acc[route.key] =\n            props.descriptors[route.key] || state.descriptors[route.key];\n\n          return acc;\n        }, {});\n\n        previousDescriptors = props.descriptors;\n      }\n\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce<Record<string, Route<string>>>(\n          (acc, route) => {\n            acc[route.key] = route;\n            return acc;\n          },\n          {}\n        );\n\n        routes = state.routes.map((route) => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors,\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes =\n      props.state.index < props.state.routes.length - 1\n        ? // Remove any extra routes from the state\n          // The last visible route should be the focused route, i.e. at current index\n          props.state.routes.slice(0, props.state.index + 1)\n        : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes,\n    } = state;\n\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1] as\n      | Route<string>\n      | undefined;\n    const nextFocusedRoute = routes[routes.length - 1];\n\n    const isAnimationEnabled = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n\n    const getAnimationTypeForReplace = (key: string) => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n\n    if (\n      previousFocusedRoute &&\n      previousFocusedRoute.key !== nextFocusedRoute.key\n    ) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.some((r) => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (\n          isAnimationEnabled(nextFocusedRoute.key) &&\n          !openingRouteKeys.includes(nextFocusedRoute.key)\n        ) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n\n          closingRouteKeys = closingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== nextFocusedRoute.key\n          );\n\n          if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(\n              (key) => key !== previousFocusedRoute.key\n            );\n\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [\n                ...closingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(\n                (key) => key !== nextFocusedRoute.key\n              );\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [\n                ...replacingRouteKeys,\n                previousFocusedRoute.key,\n              ];\n\n              closingRouteKeys = closingRouteKeys.filter(\n                (key) => key !== previousFocusedRoute.key\n              );\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some((r) => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (\n          isAnimationEnabled(previousFocusedRoute.key) &&\n          !closingRouteKeys.includes(previousFocusedRoute.key)\n        ) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n          replacingRouteKeys = replacingRouteKeys.filter(\n            (key) => key !== previousFocusedRoute.key\n          );\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(\n        routes.length - 1,\n        0,\n        ...state.routes.filter(({ key }) =>\n          isAnimationEnabled(key)\n            ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key)\n            : false\n        )\n      );\n    }\n\n    if (!routes.length) {\n      throw new Error(\n        'There should always be at least one route in the navigation state.'\n      );\n    }\n\n    const descriptors = routes.reduce<StackDescriptorMap>((acc, route) => {\n      acc[route.key] =\n        props.descriptors[route.key] || state.descriptors[route.key];\n\n      return acc;\n    }, {});\n\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors,\n    };\n  }\n\n  state: State = {\n    routes: [],\n    previousRoutes: [],\n    previousDescriptors: {},\n    openingRouteKeys: [],\n    closingRouteKeys: [],\n    replacingRouteKeys: [],\n    descriptors: {},\n  };\n\n  private getPreviousRoute = ({ route }: { route: Route<string> }) => {\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n    const routes = this.state.routes.filter(\n      (r) =>\n        r.key === route.key ||\n        (!closingRouteKeys.includes(r.key) &&\n          !replacingRouteKeys.includes(r.key))\n    );\n\n    const index = routes.findIndex((r) => r.key === route.key);\n\n    return routes[index - 1];\n  };\n\n  private renderScene = ({ route }: { route: Route<string> }) => {\n    const descriptor =\n      this.state.descriptors[route.key] || this.props.descriptors[route.key];\n\n    if (!descriptor) {\n      return null;\n    }\n\n    return descriptor.render();\n  };\n\n  private renderHeader = (props: HeaderContainerProps) => {\n    return <HeaderContainer {...props} />;\n  };\n\n  private handleOpenRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n    const { closingRouteKeys, replacingRouteKeys } = this.state;\n\n    if (\n      closingRouteKeys.some((key) => key === route.key) &&\n      replacingRouteKeys.every((key) => key !== route.key) &&\n      state.routeNames.includes(route.name) &&\n      !state.routes.some((r) => r.key === route.key)\n    ) {\n      // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n      // So we need to add this route back to the state\n      navigation.navigate(route);\n    } else {\n      this.setState((state) => ({\n        routes: state.replacingRouteKeys.length\n          ? state.routes.filter(\n              (r) => !state.replacingRouteKeys.includes(r.key)\n            )\n          : state.routes,\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        replacingRouteKeys: [],\n      }));\n    }\n  };\n\n  private handleCloseRoute = ({ route }: { route: Route<string> }) => {\n    const { state, navigation } = this.props;\n\n    if (state.routes.some((r) => r.key === route.key)) {\n      // If a route exists in state, trigger a pop\n      // This will happen in when the route was closed from the card component\n      // e.g. When the close animation triggered from a gesture ends\n      navigation.dispatch({\n        ...StackActions.pop(),\n        source: route.key,\n        target: state.key,\n      });\n    } else {\n      // We need to clean up any state tracking the route and pop it immediately\n      this.setState((state) => ({\n        routes: state.routes.filter((r) => r.key !== route.key),\n        openingRouteKeys: state.openingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n        closingRouteKeys: state.closingRouteKeys.filter(\n          (key) => key !== route.key\n        ),\n      }));\n    }\n  };\n\n  private handleTransitionStart = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionStart',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleTransitionEnd = (\n    { route }: { route: Route<string> },\n    closing: boolean\n  ) =>\n    this.props.navigation.emit({\n      type: 'transitionEnd',\n      data: { closing },\n      target: route.key,\n    });\n\n  private handleGestureStart = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureStart',\n      target: route.key,\n    });\n  };\n\n  private handleGestureEnd = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureEnd',\n      target: route.key,\n    });\n  };\n\n  private handleGestureCancel = ({ route }: { route: Route<string> }) => {\n    this.props.navigation.emit({\n      type: 'gestureCancel',\n      target: route.key,\n    });\n  };\n\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n\n    const { routes, descriptors, openingRouteKeys, closingRouteKeys } =\n      this.state;\n\n    return (\n      <GestureHandlerWrapper style={styles.container}>\n        <SafeAreaProviderCompat>\n          <SafeAreaInsetsContext.Consumer>\n            {(insets) => (\n              <ModalPresentationContext.Consumer>\n                {(isParentModal) => (\n                  <HeaderShownContext.Consumer>\n                    {(isParentHeaderShown) => (\n                      <CardStack\n                        insets={insets as EdgeInsets}\n                        isParentHeaderShown={isParentHeaderShown}\n                        isParentModal={isParentModal}\n                        getPreviousRoute={this.getPreviousRoute}\n                        routes={routes}\n                        openingRouteKeys={openingRouteKeys}\n                        closingRouteKeys={closingRouteKeys}\n                        onOpenRoute={this.handleOpenRoute}\n                        onCloseRoute={this.handleCloseRoute}\n                        onTransitionStart={this.handleTransitionStart}\n                        onTransitionEnd={this.handleTransitionEnd}\n                        renderHeader={this.renderHeader}\n                        renderScene={this.renderScene}\n                        state={state}\n                        descriptors={descriptors}\n                        onGestureStart={this.handleGestureStart}\n                        onGestureEnd={this.handleGestureEnd}\n                        onGestureCancel={this.handleGestureCancel}\n                        {...rest}\n                      />\n                    )}\n                  </HeaderShownContext.Consumer>\n                )}\n              </ModalPresentationContext.Consumer>\n            )}\n          </SafeAreaInsetsContext.Consumer>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}