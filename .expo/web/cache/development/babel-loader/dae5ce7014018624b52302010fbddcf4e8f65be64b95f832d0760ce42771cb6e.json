{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getActorDisplayName = getActorDisplayName;\nexports.getUserAsync = getUserAsync;\nexports.loginAsync = loginAsync;\nexports.logoutAsync = logoutAsync;\nexports.ANONYMOUS_USERNAME = void 0;\nvar _fs = require(\"fs\");\nvar _graphqlTag = _interopRequireDefault(require(\"graphql-tag\"));\nvar Log = _interopRequireWildcard(require(\"../../log\"));\nvar Analytics = _interopRequireWildcard(require(\"../../utils/analytics/rudderstackClient\"));\nvar _codesigning = require(\"../../utils/codesigning\");\nvar _env = require(\"../../utils/env\");\nvar _client = require(\"../graphql/client\");\nvar _userQuery = require(\"../graphql/queries/UserQuery\");\nvar _client1 = require(\"../rest/client\");\nvar _userSettings = _interopRequireDefault(require(\"./UserSettings\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar currentUser;\nvar ANONYMOUS_USERNAME = \"anonymous\";\nexports.ANONYMOUS_USERNAME = ANONYMOUS_USERNAME;\nfunction getActorDisplayName(user) {\n  switch (user == null ? void 0 : user.__typename) {\n    case \"User\":\n      return user.username;\n    case \"Robot\":\n      return user.firstName ? `${user.firstName} (robot)` : \"robot\";\n    default:\n      return ANONYMOUS_USERNAME;\n  }\n}\nfunction getUserAsync() {\n  return _getUserAsync.apply(this, arguments);\n}\nfunction _getUserAsync() {\n  _getUserAsync = _asyncToGenerator(function* () {\n    var ref;\n    var hasCredentials = _userSettings.default.getAccessToken() || ((ref = _userSettings.default.getSession()) == null ? void 0 : ref.sessionSecret);\n    if (!_env.env.EXPO_OFFLINE && !currentUser && hasCredentials) {\n      var user = yield _userQuery.UserQuery.currentUserAsync();\n      currentUser = user != null ? user : undefined;\n      if (user) {\n        yield Analytics.setUserDataAsync(user.id, {\n          username: getActorDisplayName(user),\n          user_id: user.id,\n          user_type: user.__typename\n        });\n      }\n    }\n    return currentUser;\n  });\n  return _getUserAsync.apply(this, arguments);\n}\nfunction loginAsync(_x) {\n  return _loginAsync.apply(this, arguments);\n}\nfunction _loginAsync() {\n  _loginAsync = _asyncToGenerator(function* (json) {\n    var res = yield (0, _client1).fetchAsync(\"auth/loginAsync\", {\n      method: \"POST\",\n      body: JSON.stringify(json)\n    });\n    var _yield$res$json = yield res.json(),\n      sessionSecret = _yield$res$json.data.sessionSecret;\n    var result = yield _client.graphqlClient.query(_graphqlTag.default`\n        query UserQuery {\n          viewer {\n            id\n            username\n          }\n        }\n      `, {}, {\n      fetchOptions: {\n        headers: {\n          \"expo-session\": sessionSecret\n        }\n      },\n      additionalTypenames: []\n    }).toPromise();\n    var viewer = result.data.viewer;\n    yield _userSettings.default.setSessionAsync({\n      sessionSecret: sessionSecret,\n      userId: viewer.id,\n      username: viewer.username,\n      currentConnection: \"Username-Password-Authentication\"\n    });\n  });\n  return _loginAsync.apply(this, arguments);\n}\nfunction logoutAsync() {\n  return _logoutAsync.apply(this, arguments);\n}\nfunction _logoutAsync() {\n  _logoutAsync = _asyncToGenerator(function* () {\n    currentUser = undefined;\n    yield Promise.all([_fs.promises.rm((0, _codesigning).getDevelopmentCodeSigningDirectory(), {\n      recursive: true,\n      force: true\n    }), _userSettings.default.setSessionAsync(undefined)]);\n    Log.log(\"Logged out\");\n  });\n  return _logoutAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_asyncToGenerator","require","getActorDisplayName","getUserAsync","loginAsync","logoutAsync","_fs","_graphqlTag","_interopRequireDefault","Log","_interopRequireWildcard","Analytics","_codesigning","_env","_client","_userQuery","_client1","_userSettings","currentUser","ANONYMOUS_USERNAME","user","__typename","username","firstName","_getUserAsync","apply","arguments","ref","hasCredentials","default","getAccessToken","getSession","sessionSecret","env","EXPO_OFFLINE","UserQuery","currentUserAsync","undefined","setUserDataAsync","id","user_id","user_type","_x","_loginAsync","json","res","fetchAsync","method","body","JSON","stringify","_yield$res$json","data","result","graphqlClient","query","fetchOptions","headers","additionalTypenames","toPromise","viewer","setSessionAsync","userId","currentConnection","_logoutAsync","Promise","all","promises","rm","getDevelopmentCodeSigningDirectory","recursive","force","log"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\api\\user\\user.ts"],"sourcesContent":["import { promises as fs } from 'fs';\nimport gql from 'graphql-tag';\n\nimport { CurrentUserQuery } from '../../graphql/generated';\nimport * as Log from '../../log';\nimport * as Analytics from '../../utils/analytics/rudderstackClient';\nimport { getDevelopmentCodeSigningDirectory } from '../../utils/codesigning';\nimport { env } from '../../utils/env';\nimport { graphqlClient } from '../graphql/client';\nimport { UserQuery } from '../graphql/queries/UserQuery';\nimport { fetchAsync } from '../rest/client';\nimport UserSettings from './UserSettings';\n\nexport type Actor = NonNullable<CurrentUserQuery['meActor']>;\n\nlet currentUser: Actor | undefined;\n\nexport const ANONYMOUS_USERNAME = 'anonymous';\n\n/**\n * Resolve the name of the actor, either normal user or robot user.\n * This should be used whenever the \"current user\" needs to be displayed.\n * The display name CANNOT be used as project owner.\n */\nexport function getActorDisplayName(user?: Actor): string {\n  switch (user?.__typename) {\n    case 'User':\n      return user.username;\n    case 'Robot':\n      return user.firstName ? `${user.firstName} (robot)` : 'robot';\n    default:\n      return ANONYMOUS_USERNAME;\n  }\n}\n\nexport async function getUserAsync(): Promise<Actor | undefined> {\n  const hasCredentials = UserSettings.getAccessToken() || UserSettings.getSession()?.sessionSecret;\n  if (!env.EXPO_OFFLINE && !currentUser && hasCredentials) {\n    const user = await UserQuery.currentUserAsync();\n    currentUser = user ?? undefined;\n    if (user) {\n      await Analytics.setUserDataAsync(user.id, {\n        username: getActorDisplayName(user),\n        user_id: user.id,\n        user_type: user.__typename,\n      });\n    }\n  }\n  return currentUser;\n}\n\nexport async function loginAsync(json: {\n  username: string;\n  password: string;\n  otp?: string;\n}): Promise<void> {\n  const res = await fetchAsync('auth/loginAsync', {\n    method: 'POST',\n    body: JSON.stringify(json),\n  });\n  const {\n    data: { sessionSecret },\n  } = await res.json();\n  const result = await graphqlClient\n    .query(\n      gql`\n        query UserQuery {\n          viewer {\n            id\n            username\n          }\n        }\n      `,\n      {},\n      {\n        fetchOptions: {\n          headers: {\n            'expo-session': sessionSecret,\n          },\n        },\n        additionalTypenames: [] /* UserQuery has immutable fields */,\n      }\n    )\n    .toPromise();\n  const {\n    data: { viewer },\n  } = result;\n  await UserSettings.setSessionAsync({\n    sessionSecret,\n    userId: viewer.id,\n    username: viewer.username,\n    currentConnection: 'Username-Password-Authentication',\n  });\n}\n\nexport async function logoutAsync(): Promise<void> {\n  currentUser = undefined;\n  await Promise.all([\n    fs.rm(getDevelopmentCodeSigningDirectory(), { recursive: true, force: true }),\n    UserSettings.setSessionAsync(undefined),\n  ]);\n  Log.log('Logged out');\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}