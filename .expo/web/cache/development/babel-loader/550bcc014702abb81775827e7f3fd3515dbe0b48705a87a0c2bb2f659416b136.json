{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveDeviceAsync = resolveDeviceAsync;\nexports.isSimulatorDevice = isSimulatorDevice;\nvar Log = _interopRequireWildcard(require(\"../../../log\"));\nvar _appleDeviceManager = require(\"../../../start/platforms/ios/AppleDeviceManager\");\nvar _assertSystemRequirements = require(\"../../../start/platforms/ios/assertSystemRequirements\");\nvar _promptAppleDevice = require(\"../../../start/platforms/ios/promptAppleDevice\");\nvar SimControl = _interopRequireWildcard(require(\"../../../start/platforms/ios/simctl\"));\nvar _errors = require(\"../../../utils/errors\");\nvar _profile = require(\"../../../utils/profile\");\nvar _hints = require(\"../../hints\");\nvar AppleDevice = _interopRequireWildcard(require(\"../appleDevice/AppleDevice\"));\nvar _promptDevice = require(\"./promptDevice\");\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction getDevicesAsync() {\n  return _getDevicesAsync.apply(this, arguments);\n}\nfunction _getDevicesAsync() {\n  _getDevicesAsync = _asyncToGenerator(function* () {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      osType = _ref.osType;\n    var connectedDevices = yield AppleDevice.getConnectedDevicesAsync();\n    var simulators = yield (0, _promptAppleDevice).sortDefaultDeviceToBeginningAsync(yield (0, _profile).profile(SimControl.getDevicesAsync)(), osType);\n    var devices = [].concat(_toConsumableArray(connectedDevices), _toConsumableArray(simulators));\n    return osType ? filterDevicesForOsType(devices, osType) : devices;\n  });\n  return _getDevicesAsync.apply(this, arguments);\n}\nfunction filterDevicesForOsType(devices, osType) {\n  return devices.filter(function (device) {\n    return !(\"osType\" in device) || device.osType === osType;\n  });\n}\nfunction resolveDeviceAsync(_x) {\n  return _resolveDeviceAsync.apply(this, arguments);\n}\nfunction _resolveDeviceAsync() {\n  _resolveDeviceAsync = _asyncToGenerator(function* (device) {\n    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      osType = _ref2.osType;\n    yield (0, _assertSystemRequirements).assertSystemRequirementsAsync();\n    if (!device) {\n      var manager = yield _appleDeviceManager.AppleDeviceManager.resolveAsync({\n        device: {\n          osType: osType\n        }\n      });\n      Log.debug(`Resolved default device (name: ${manager.device.name}, udid: ${manager.device.udid}, osType: ${osType})`);\n      return manager.device;\n    }\n    var devices = yield getDevicesAsync({\n      osType: osType\n    });\n    var resolved = device === true ? yield (0, _promptDevice).promptDeviceAsync(devices) : findDeviceFromSearchValue(devices, device.toLowerCase());\n    return ensureBootedAsync(resolved);\n  });\n  return _resolveDeviceAsync.apply(this, arguments);\n}\nfunction isSimulatorDevice(device) {\n  return !(\"deviceType\" in device) || device.deviceType.startsWith(\"com.apple.CoreSimulator.SimDeviceType.\");\n}\nfunction findDeviceFromSearchValue(devices, searchValue) {\n  var device1 = devices.find(function (device) {\n    return device.udid.toLowerCase() === searchValue || device.name.toLowerCase() === searchValue;\n  });\n  if (!device1) {\n    throw new _errors.CommandError(\"BAD_ARGS\", `No device UDID or name matching \"${searchValue}\"`);\n  }\n  return device1;\n}\nfunction ensureBootedAsync(_x2) {\n  return _ensureBootedAsync.apply(this, arguments);\n}\nfunction _ensureBootedAsync() {\n  _ensureBootedAsync = _asyncToGenerator(function* (device) {\n    (0, _hints).logDeviceArgument(device.udid);\n    if (isSimulatorDevice(device)) {\n      return (0, _appleDeviceManager).ensureSimulatorOpenAsync({\n        udid: device.udid\n      });\n    }\n    return device;\n  });\n  return _ensureBootedAsync.apply(this, arguments);\n}","map":{"version":3,"names":["_toConsumableArray","require","_asyncToGenerator","resolveDeviceAsync","isSimulatorDevice","Log","_interopRequireWildcard","_appleDeviceManager","_assertSystemRequirements","_promptAppleDevice","SimControl","_errors","_profile","_hints","AppleDevice","_promptDevice","getDevicesAsync","_getDevicesAsync","apply","arguments","_ref","length","undefined","osType","connectedDevices","getConnectedDevicesAsync","simulators","sortDefaultDeviceToBeginningAsync","profile","devices","concat","filterDevicesForOsType","filter","device","_x","_resolveDeviceAsync","_ref2","assertSystemRequirementsAsync","manager","AppleDeviceManager","resolveAsync","debug","name","udid","resolved","promptDeviceAsync","findDeviceFromSearchValue","toLowerCase","ensureBootedAsync","deviceType","startsWith","searchValue","device1","find","CommandError","_x2","_ensureBootedAsync","logDeviceArgument","ensureSimulatorOpenAsync"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\run\\ios\\options\\resolveDevice.ts"],"sourcesContent":["import * as Log from '../../../log';\nimport {\n  AppleDeviceManager,\n  ensureSimulatorOpenAsync,\n} from '../../../start/platforms/ios/AppleDeviceManager';\nimport { assertSystemRequirementsAsync } from '../../../start/platforms/ios/assertSystemRequirements';\nimport { sortDefaultDeviceToBeginningAsync } from '../../../start/platforms/ios/promptAppleDevice';\nimport { OSType } from '../../../start/platforms/ios/simctl';\nimport * as SimControl from '../../../start/platforms/ios/simctl';\nimport { CommandError } from '../../../utils/errors';\nimport { profile } from '../../../utils/profile';\nimport { logDeviceArgument } from '../../hints';\nimport * as AppleDevice from '../appleDevice/AppleDevice';\nimport { promptDeviceAsync } from './promptDevice';\n\ntype AnyDevice = SimControl.Device | AppleDevice.ConnectedDevice;\n\n/** Get a list of devices (called destinations) that are connected to the host machine. Filter by `osType` if defined. */\nasync function getDevicesAsync({ osType }: { osType?: OSType } = {}): Promise<AnyDevice[]> {\n  const connectedDevices = await AppleDevice.getConnectedDevicesAsync();\n\n  const simulators = await sortDefaultDeviceToBeginningAsync(\n    await profile(SimControl.getDevicesAsync)(),\n    osType\n  );\n\n  const devices = [...connectedDevices, ...simulators];\n\n  // If osType is defined, then filter out ineligible simulators.\n  // Only do this inside of the device selection so users who pass the entire device udid can attempt to select any simulator (even if it's invalid).\n  return osType ? filterDevicesForOsType(devices, osType) : devices;\n}\n\n/** @returns a list of devices, filtered by the provided `osType`. */\nfunction filterDevicesForOsType(devices: AnyDevice[], osType: OSType): AnyDevice[] {\n  return devices.filter((device) => !('osType' in device) || device.osType === osType);\n}\n\n/** Given a `device` argument from the CLI, parse and prompt our way to a usable device for building. */\nexport async function resolveDeviceAsync(\n  device?: string | boolean,\n  { osType }: { osType?: OSType } = {}\n): Promise<AnyDevice> {\n  await assertSystemRequirementsAsync();\n\n  if (!device) {\n    /** Finds the first possible device and returns in a booted state. */\n    const manager = await AppleDeviceManager.resolveAsync({\n      device: {\n        osType,\n      },\n    });\n    Log.debug(\n      `Resolved default device (name: ${manager.device.name}, udid: ${manager.device.udid}, osType: ${osType})`\n    );\n    return manager.device;\n  }\n\n  const devices: AnyDevice[] = await getDevicesAsync({\n    osType,\n  });\n\n  const resolved =\n    device === true\n      ? // `--device` (no props after)\n        await promptDeviceAsync(devices)\n      : // `--device <name|udid>`\n        findDeviceFromSearchValue(devices, device.toLowerCase());\n\n  return ensureBootedAsync(resolved);\n}\n\n/** @returns `true` if the given device is a simulator. */\nexport function isSimulatorDevice(device: AnyDevice): boolean {\n  return (\n    !('deviceType' in device) ||\n    device.deviceType.startsWith('com.apple.CoreSimulator.SimDeviceType.')\n  );\n}\n\n/** @returns device matching the `searchValue` against name or UDID. */\nfunction findDeviceFromSearchValue(devices: AnyDevice[], searchValue: string): AnyDevice {\n  const device = devices.find(\n    (device) =>\n      device.udid.toLowerCase() === searchValue || device.name.toLowerCase() === searchValue\n  );\n  if (!device) {\n    throw new CommandError('BAD_ARGS', `No device UDID or name matching \"${searchValue}\"`);\n  }\n  return device;\n}\n\n/** Ensures the device is booted if it's a simulator. */\nasync function ensureBootedAsync(device: AnyDevice): Promise<AnyDevice> {\n  // --device with no props after\n  logDeviceArgument(device.udid);\n  if (isSimulatorDevice(device)) {\n    return ensureSimulatorOpenAsync({ udid: device.udid });\n  }\n  return device;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}