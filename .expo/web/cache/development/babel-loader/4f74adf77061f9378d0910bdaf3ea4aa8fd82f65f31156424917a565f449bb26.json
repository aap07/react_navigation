{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.appendScheme = appendScheme;\nexports.getScheme = getScheme;\nexports.getSchemesFromPlist = getSchemesFromPlist;\nexports.hasScheme = hasScheme;\nexports.removeScheme = removeScheme;\nexports.setScheme = setScheme;\nexports.withScheme = void 0;\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nvar withScheme = (0, _iosPlugins().createInfoPlistPluginWithPropertyGuard)(setScheme, {\n  infoPlistProperty: 'CFBundleURLTypes',\n  expoConfigProperty: 'scheme'\n}, 'withScheme');\nexports.withScheme = withScheme;\nfunction getScheme(config) {\n  if (Array.isArray(config.scheme)) {\n    var validate = function validate(value) {\n      return typeof value === 'string';\n    };\n    return config.scheme.filter(validate);\n  } else if (typeof config.scheme === 'string') {\n    return [config.scheme];\n  }\n  return [];\n}\nfunction setScheme(config, infoPlist) {\n  var _config$ios, _config$ios2;\n  var scheme = [].concat(_toConsumableArray(getScheme(config)), _toConsumableArray(getScheme((_config$ios = config.ios) !== null && _config$ios !== void 0 ? _config$ios : {})));\n  if ((_config$ios2 = config.ios) !== null && _config$ios2 !== void 0 && _config$ios2.bundleIdentifier) {\n    scheme.push(config.ios.bundleIdentifier);\n  }\n  if (scheme.length === 0) {\n    return infoPlist;\n  }\n  return _objectSpread(_objectSpread({}, infoPlist), {}, {\n    CFBundleURLTypes: [{\n      CFBundleURLSchemes: scheme\n    }]\n  });\n}\nfunction appendScheme(scheme, infoPlist) {\n  var _infoPlist$CFBundleUR;\n  if (!scheme) {\n    return infoPlist;\n  }\n  var existingSchemes = (_infoPlist$CFBundleUR = infoPlist.CFBundleURLTypes) !== null && _infoPlist$CFBundleUR !== void 0 ? _infoPlist$CFBundleUR : [];\n  if (existingSchemes !== null && existingSchemes !== void 0 && existingSchemes.some(function (_ref) {\n    var CFBundleURLSchemes = _ref.CFBundleURLSchemes;\n    return CFBundleURLSchemes.includes(scheme);\n  })) {\n    return infoPlist;\n  }\n  return _objectSpread(_objectSpread({}, infoPlist), {}, {\n    CFBundleURLTypes: [].concat(_toConsumableArray(existingSchemes), [{\n      CFBundleURLSchemes: [scheme]\n    }])\n  });\n}\nfunction removeScheme(scheme, infoPlist) {\n  if (!scheme) {\n    return infoPlist;\n  }\n  if (!infoPlist.CFBundleURLTypes) {\n    return infoPlist;\n  }\n  infoPlist.CFBundleURLTypes = infoPlist.CFBundleURLTypes.map(function (bundleUrlType) {\n    var index = bundleUrlType.CFBundleURLSchemes.indexOf(scheme);\n    if (index > -1) {\n      bundleUrlType.CFBundleURLSchemes.splice(index, 1);\n      if (bundleUrlType.CFBundleURLSchemes.length === 0) {\n        return undefined;\n      }\n    }\n    return bundleUrlType;\n  }).filter(Boolean);\n  return infoPlist;\n}\nfunction hasScheme(scheme, infoPlist) {\n  var existingSchemes = infoPlist.CFBundleURLTypes;\n  if (!Array.isArray(existingSchemes)) return false;\n  return existingSchemes === null || existingSchemes === void 0 ? void 0 : existingSchemes.some(function (_ref2) {\n    var schemes = _ref2.CFBundleURLSchemes;\n    return Array.isArray(schemes) ? schemes.includes(scheme) : false;\n  });\n}\nfunction getSchemesFromPlist(infoPlist) {\n  if (Array.isArray(infoPlist.CFBundleURLTypes)) {\n    return infoPlist.CFBundleURLTypes.reduce(function (schemes, _ref3) {\n      var CFBundleURLSchemes = _ref3.CFBundleURLSchemes;\n      if (Array.isArray(CFBundleURLSchemes)) {\n        return [].concat(_toConsumableArray(schemes), _toConsumableArray(CFBundleURLSchemes));\n      }\n      return schemes;\n    }, []);\n  }\n  return [];\n}","map":{"version":3,"names":["_iosPlugins","data","require","withScheme","createInfoPlistPluginWithPropertyGuard","setScheme","infoPlistProperty","expoConfigProperty","exports","getScheme","config","Array","isArray","scheme","validate","value","filter","infoPlist","_config$ios","_config$ios2","concat","_toConsumableArray","ios","bundleIdentifier","push","length","_objectSpread","CFBundleURLTypes","CFBundleURLSchemes","appendScheme","_infoPlist$CFBundleUR","existingSchemes","some","_ref","includes","removeScheme","map","bundleUrlType","index","indexOf","splice","undefined","Boolean","hasScheme","_ref2","schemes","getSchemesFromPlist","reduce","_ref3"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\ios\\Scheme.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\n\nimport { createInfoPlistPluginWithPropertyGuard } from '../plugins/ios-plugins';\nimport { InfoPlist, URLScheme } from './IosConfig.types';\n\nexport const withScheme = createInfoPlistPluginWithPropertyGuard(\n  setScheme,\n  {\n    infoPlistProperty: 'CFBundleURLTypes',\n    expoConfigProperty: 'scheme',\n  },\n  'withScheme'\n);\n\nexport function getScheme(config: { scheme?: string | string[] }): string[] {\n  if (Array.isArray(config.scheme)) {\n    const validate = (value: any): value is string => {\n      return typeof value === 'string';\n    };\n    return config.scheme.filter<string>(validate);\n  } else if (typeof config.scheme === 'string') {\n    return [config.scheme];\n  }\n  return [];\n}\n\nexport function setScheme(\n  config: Partial<Pick<ExpoConfig, 'scheme' | 'ios'>>,\n  infoPlist: InfoPlist\n): InfoPlist {\n  const scheme = [\n    ...getScheme(config),\n    // @ts-ignore: TODO: ios.scheme is an unreleased -- harder to add to turtle v1.\n    ...getScheme(config.ios ?? {}),\n  ];\n  // Add the bundle identifier to the list of schemes for easier Google auth and parity with Turtle v1.\n  if (config.ios?.bundleIdentifier) {\n    scheme.push(config.ios.bundleIdentifier);\n  }\n  if (scheme.length === 0) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    CFBundleURLTypes: [{ CFBundleURLSchemes: scheme }],\n  };\n}\n\nexport function appendScheme(scheme: string | null, infoPlist: InfoPlist): InfoPlist {\n  if (!scheme) {\n    return infoPlist;\n  }\n\n  const existingSchemes = infoPlist.CFBundleURLTypes ?? [];\n  if (existingSchemes?.some(({ CFBundleURLSchemes }) => CFBundleURLSchemes.includes(scheme))) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    CFBundleURLTypes: [\n      ...existingSchemes,\n      {\n        CFBundleURLSchemes: [scheme],\n      },\n    ],\n  };\n}\n\nexport function removeScheme(scheme: string | null, infoPlist: InfoPlist): InfoPlist {\n  if (!scheme) {\n    return infoPlist;\n  }\n\n  // No need to remove if we don't have any\n  if (!infoPlist.CFBundleURLTypes) {\n    return infoPlist;\n  }\n\n  infoPlist.CFBundleURLTypes = infoPlist.CFBundleURLTypes.map((bundleUrlType) => {\n    const index = bundleUrlType.CFBundleURLSchemes.indexOf(scheme);\n    if (index > -1) {\n      bundleUrlType.CFBundleURLSchemes.splice(index, 1);\n      if (bundleUrlType.CFBundleURLSchemes.length === 0) {\n        return undefined;\n      }\n    }\n    return bundleUrlType;\n  }).filter(Boolean) as URLScheme[];\n\n  return infoPlist;\n}\n\nexport function hasScheme(scheme: string, infoPlist: InfoPlist): boolean {\n  const existingSchemes = infoPlist.CFBundleURLTypes;\n\n  if (!Array.isArray(existingSchemes)) return false;\n\n  return existingSchemes?.some(({ CFBundleURLSchemes: schemes }: any) =>\n    Array.isArray(schemes) ? schemes.includes(scheme) : false\n  );\n}\n\nexport function getSchemesFromPlist(infoPlist: InfoPlist): string[] {\n  if (Array.isArray(infoPlist.CFBundleURLTypes)) {\n    return infoPlist.CFBundleURLTypes.reduce<string[]>((schemes, { CFBundleURLSchemes }) => {\n      if (Array.isArray(CFBundleURLSchemes)) {\n        return [...schemes, ...CFBundleURLSchemes];\n      }\n      return schemes;\n    }, []);\n  }\n  return [];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}