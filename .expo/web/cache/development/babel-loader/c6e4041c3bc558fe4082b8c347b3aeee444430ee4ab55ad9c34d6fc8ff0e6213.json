{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveInstallApkNameAsync = resolveInstallApkNameAsync;\nvar _fs = _interopRequireDefault(require(\"fs\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _adb = require(\"../../start/platforms/android/adb\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = require(\"debug\")(\"expo:run:android:resolveInstallApkName\");\nfunction resolveInstallApkNameAsync(_x, _x2) {\n  return _resolveInstallApkNameAsync.apply(this, arguments);\n}\nfunction _resolveInstallApkNameAsync() {\n  _resolveInstallApkNameAsync = _asyncToGenerator(function* (device, _ref) {\n    var appName = _ref.appName,\n      buildType = _ref.buildType,\n      flavors = _ref.flavors,\n      apkVariantDirectory = _ref.apkVariantDirectory;\n    var availableCPUs = yield (0, _adb).getDeviceABIsAsync(device);\n    availableCPUs.push(_adb.DeviceABI.universal);\n    debug(\"Supported ABIs: \" + availableCPUs.join(\", \"));\n    debug(\"Searching for APK: \" + apkVariantDirectory);\n    for (var availableCPU of availableCPUs) {\n      var _apkName = getApkFileName(appName, buildType, flavors, availableCPU);\n      var _apkPath = _path.default.join(apkVariantDirectory, _apkName);\n      debug(\"Checking for APK at:\", _apkPath);\n      if (_fs.default.existsSync(_apkPath)) {\n        return _apkName;\n      }\n    }\n    var apkName = getApkFileName(appName, buildType, flavors);\n    var apkPath = _path.default.join(apkVariantDirectory, apkName);\n    debug(\"Checking for fallback APK at:\", apkPath);\n    if (_fs.default.existsSync(apkPath)) {\n      return apkName;\n    }\n    return null;\n  });\n  return _resolveInstallApkNameAsync.apply(this, arguments);\n}\nfunction getApkFileName(appName, buildType, flavors, cpuArch) {\n  var apkName = `${appName}-`;\n  if (flavors) {\n    apkName += flavors.reduce(function (rest, flavor) {\n      return `${rest}${flavor}-`;\n    }, \"\");\n  }\n  if (cpuArch) {\n    apkName += `${cpuArch}-`;\n  }\n  apkName += `${buildType}.apk`;\n  return apkName;\n}","map":{"version":3,"names":["_asyncToGenerator","require","resolveInstallApkNameAsync","_fs","_interopRequireDefault","_path","_adb","debug","_x","_x2","_resolveInstallApkNameAsync","apply","arguments","device","_ref","appName","buildType","flavors","apkVariantDirectory","availableCPUs","getDeviceABIsAsync","push","DeviceABI","universal","join","availableCPU","apkName","getApkFileName","apkPath","default","existsSync","cpuArch","reduce","rest","flavor"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\run\\android\\resolveInstallApkName.ts"],"sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nimport { Device, DeviceABI, getDeviceABIsAsync } from '../../start/platforms/android/adb';\nimport { GradleProps } from './resolveGradleProps';\n\nconst debug = require('debug')('expo:run:android:resolveInstallApkName') as typeof console.log;\n\nexport async function resolveInstallApkNameAsync(\n  device: Pick<Device, 'name' | 'pid'>,\n  { appName, buildType, flavors, apkVariantDirectory }: GradleProps\n) {\n  const availableCPUs = await getDeviceABIsAsync(device);\n  availableCPUs.push(DeviceABI.universal);\n\n  debug('Supported ABIs: ' + availableCPUs.join(', '));\n  debug('Searching for APK: ' + apkVariantDirectory);\n\n  // Check for cpu specific builds first\n  for (const availableCPU of availableCPUs) {\n    const apkName = getApkFileName(appName, buildType, flavors, availableCPU);\n    const apkPath = path.join(apkVariantDirectory, apkName);\n    debug('Checking for APK at:', apkPath);\n    if (fs.existsSync(apkPath)) {\n      return apkName;\n    }\n  }\n\n  // Otherwise use the default apk named after the variant: app-debug.apk\n  const apkName = getApkFileName(appName, buildType, flavors);\n  const apkPath = path.join(apkVariantDirectory, apkName);\n  debug('Checking for fallback APK at:', apkPath);\n  if (fs.existsSync(apkPath)) {\n    return apkName;\n  }\n\n  return null;\n}\n\nfunction getApkFileName(\n  appName: string,\n  buildType: string,\n  flavors?: string[] | null,\n  cpuArch?: string | null\n) {\n  let apkName = `${appName}-`;\n  if (flavors) {\n    apkName += flavors.reduce((rest, flavor) => `${rest}${flavor}-`, '');\n  }\n  if (cpuArch) {\n    apkName += `${cpuArch}-`;\n  }\n  apkName += `${buildType}.apk`;\n\n  return apkName;\n}\n"],"mappings":"AAAA;;AAAA,IAAAA,iBAAA,GAAAC,OAAA;;;;QAQsBC,0BAA0B,GAA1BA,0BAA0B;AARjC,IAAAC,GAAI,GAAAC,sBAAA,CAAAH,OAAA,CAAJ,IAAI;AACF,IAAAI,KAAM,GAAAD,sBAAA,CAAAH,OAAA,CAAN,MAAM;AAE+B,IAAAK,IAAmC,GAAAL,OAAA;;;;;;AAGzF,IAAMM,KAAK,GAAGN,OAAO,CAAC,OAAO,CAAC,CAAC,wCAAwC,CAAC;AAAuB,SAEzEC,0BAA0BA,CAAAM,EAAA,EAAAC,GAAA;EAAA,OAAAC,2BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,4BAAA;EAAAA,2BAAA,GAAAV,iBAAA,CAAzC,WACLa,MAAoC,EAAAC,IAAA,EAEpC;IAAA,IADEC,OAAO,GAAAD,IAAA,CAAPC,OAAO;MAAEC,SAAS,GAAAF,IAAA,CAATE,SAAS;MAAEC,OAAO,GAAAH,IAAA,CAAPG,OAAO;MAAEC,mBAAmB,GAAAJ,IAAA,CAAnBI,mBAAmB;IAElD,IAAMC,aAAa,SAAS,IAAAb,IAAkB,EAAQc,kBAAR,CAACP,MAAM,CAAC;IACtDM,aAAa,CAACE,IAAI,CAACf,IAAS,CAAAgB,SAAA,CAACC,SAAS,CAAC;IAEvChB,KAAK,CAAC,kBAAkB,GAAGY,aAAa,CAACK,IAAI,CAAC,IAAI,CAAC,CAAC;IACpDjB,KAAK,CAAC,qBAAqB,GAAGW,mBAAmB,CAAC;IAGlD,KAAK,IAAMO,YAAY,IAAIN,aAAa,EAAE;MACxC,IAAMO,QAAO,GAAGC,cAAc,CAACZ,OAAO,EAAEC,SAAS,EAAEC,OAAO,EAAEQ,YAAY,CAAC;MACzE,IAAMG,QAAO,GAAGvB,KAAI,CAAAwB,OAAA,CAACL,IAAI,CAACN,mBAAmB,EAAEQ,QAAO,CAAC;MACvDnB,KAAK,CAAC,sBAAsB,EAAEqB,QAAO,CAAC;MACtC,IAAIzB,GAAE,CAAA0B,OAAA,CAACC,UAAU,CAACF,QAAO,CAAC,EAAE;QAC1B,OAAOF,QAAO;;;IAKlB,IAAMA,OAAO,GAAGC,cAAc,CAACZ,OAAO,EAAEC,SAAS,EAAEC,OAAO,CAAC;IAC3D,IAAMW,OAAO,GAAGvB,KAAI,CAAAwB,OAAA,CAACL,IAAI,CAACN,mBAAmB,EAAEQ,OAAO,CAAC;IACvDnB,KAAK,CAAC,+BAA+B,EAAEqB,OAAO,CAAC;IAC/C,IAAIzB,GAAE,CAAA0B,OAAA,CAACC,UAAU,CAACF,OAAO,CAAC,EAAE;MAC1B,OAAOF,OAAO;;IAGhB,OAAO,IAAI;GACZ;EAAA,OAAAhB,2BAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAED,SAASe,cAAcA,CACrBZ,OAAe,EACfC,SAAiB,EACjBC,OAAyB,EACzBc,OAAuB,EACvB;EACA,IAAIL,OAAO,GAAI,GAAEX,OAAQ,GAAE;EAC3B,IAAIE,OAAO,EAAE;IACXS,OAAO,IAAIT,OAAO,CAACe,MAAM,CAAC,UAACC,IAAI,EAAEC,MAAM;MAAA,OAAM,GAAED,IAAK,GAAEC,MAAO,GAAE;IAAA,GAAE,EAAE,CAAC;;EAEtE,IAAIH,OAAO,EAAE;IACXL,OAAO,IAAK,GAAEK,OAAQ,GAAE;;EAE1BL,OAAO,IAAK,GAAEV,SAAU,MAAK;EAE7B,OAAOU,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}