{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _excluded = [\"GMSApiKey\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MATCH_INIT = void 0;\nexports.addGoogleMapsAppDelegateImport = addGoogleMapsAppDelegateImport;\nexports.addGoogleMapsAppDelegateInit = addGoogleMapsAppDelegateInit;\nexports.addMapsCocoaPods = addMapsCocoaPods;\nexports.getGoogleMapsApiKey = getGoogleMapsApiKey;\nexports.removeGoogleMapsAppDelegateImport = removeGoogleMapsAppDelegateImport;\nexports.removeGoogleMapsAppDelegateInit = removeGoogleMapsAppDelegateInit;\nexports.removeMapsCocoaPods = removeMapsCocoaPods;\nexports.setGoogleMapsApiKey = setGoogleMapsApiKey;\nexports.withMaps = void 0;\nfunction _fs() {\n  var data = _interopRequireDefault(require(\"fs\"));\n  _fs = function _fs() {\n    return data;\n  };\n  return data;\n}\nfunction _path() {\n  var data = _interopRequireDefault(require(\"path\"));\n  _path = function _path() {\n    return data;\n  };\n  return data;\n}\nfunction _resolveFrom() {\n  var data = _interopRequireDefault(require(\"resolve-from\"));\n  _resolveFrom = function _resolveFrom() {\n    return data;\n  };\n  return data;\n}\nfunction _iosPlugins() {\n  var data = require(\"../plugins/ios-plugins\");\n  _iosPlugins = function _iosPlugins() {\n    return data;\n  };\n  return data;\n}\nfunction _withDangerousMod() {\n  var data = require(\"../plugins/withDangerousMod\");\n  _withDangerousMod = function _withDangerousMod() {\n    return data;\n  };\n  return data;\n}\nfunction _generateCode() {\n  var data = require(\"../utils/generateCode\");\n  _generateCode = function _generateCode() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = require('debug')('expo:config-plugins:ios:maps');\nvar MATCH_INIT = /-\\s*\\(BOOL\\)\\s*application:\\s*\\(UIApplication\\s*\\*\\s*\\)\\s*\\w+\\s+didFinishLaunchingWithOptions:/g;\nexports.MATCH_INIT = MATCH_INIT;\nvar withGoogleMapsKey = (0, _iosPlugins().createInfoPlistPlugin)(setGoogleMapsApiKey, 'withGoogleMapsKey');\nvar withMaps = function withMaps(config) {\n  config = withGoogleMapsKey(config);\n  var apiKey = getGoogleMapsApiKey(config);\n  debug('Google Maps API Key:', apiKey);\n  config = withMapsCocoaPods(config, {\n    useGoogleMaps: !!apiKey\n  });\n  config = withGoogleMapsAppDelegate(config, {\n    apiKey: apiKey\n  });\n  return config;\n};\nexports.withMaps = withMaps;\nfunction getGoogleMapsApiKey(config) {\n  var _config$ios$config$go, _config$ios, _config$ios$config;\n  return (_config$ios$config$go = (_config$ios = config.ios) === null || _config$ios === void 0 ? void 0 : (_config$ios$config = _config$ios.config) === null || _config$ios$config === void 0 ? void 0 : _config$ios$config.googleMapsApiKey) !== null && _config$ios$config$go !== void 0 ? _config$ios$config$go : null;\n}\nfunction setGoogleMapsApiKey(config, _ref) {\n  var GMSApiKey = _ref.GMSApiKey,\n    infoPlist = _objectWithoutProperties(_ref, _excluded);\n  var apiKey = getGoogleMapsApiKey(config);\n  if (apiKey === null) {\n    return infoPlist;\n  }\n  return _objectSpread(_objectSpread({}, infoPlist), {}, {\n    GMSApiKey: apiKey\n  });\n}\nfunction addGoogleMapsAppDelegateImport(src) {\n  var newSrc = [];\n  newSrc.push('#if __has_include(<GoogleMaps/GoogleMaps.h>)', '#import <GoogleMaps/GoogleMaps.h>', '#endif');\n  return (0, _generateCode().mergeContents)({\n    tag: 'react-native-maps-import',\n    src: src,\n    newSrc: newSrc.join('\\n'),\n    anchor: /#import \"AppDelegate\\.h\"/,\n    offset: 1,\n    comment: '//'\n  });\n}\nfunction removeGoogleMapsAppDelegateImport(src) {\n  return (0, _generateCode().removeContents)({\n    tag: 'react-native-maps-import',\n    src: src\n  });\n}\nfunction addGoogleMapsAppDelegateInit(src, apiKey) {\n  var newSrc = [];\n  newSrc.push('#if __has_include(<GoogleMaps/GoogleMaps.h>)', `  [GMSServices provideAPIKey:@\"${apiKey}\"];`, '#endif');\n  return (0, _generateCode().mergeContents)({\n    tag: 'react-native-maps-init',\n    src: src,\n    newSrc: newSrc.join('\\n'),\n    anchor: MATCH_INIT,\n    offset: 2,\n    comment: '//'\n  });\n}\nfunction removeGoogleMapsAppDelegateInit(src) {\n  return (0, _generateCode().removeContents)({\n    tag: 'react-native-maps-init',\n    src: src\n  });\n}\nfunction addMapsCocoaPods(src) {\n  return (0, _generateCode().mergeContents)({\n    tag: 'react-native-maps',\n    src: src,\n    newSrc: `  pod 'react-native-google-maps', path: File.dirname(\\`node --print \"require.resolve('react-native-maps/package.json')\"\\`)`,\n    anchor: /use_native_modules/,\n    offset: 0,\n    comment: '#'\n  });\n}\nfunction removeMapsCocoaPods(src) {\n  return (0, _generateCode().removeContents)({\n    tag: 'react-native-maps',\n    src: src\n  });\n}\nfunction isReactNativeMapsInstalled(projectRoot) {\n  var resolved = _resolveFrom().default.silent(projectRoot, 'react-native-maps/package.json');\n  return resolved ? _path().default.dirname(resolved) : null;\n}\nfunction isReactNativeMapsAutolinked(config) {\n  return true;\n}\nvar withMapsCocoaPods = function withMapsCocoaPods(config, _ref2) {\n  var useGoogleMaps = _ref2.useGoogleMaps;\n  return (0, _withDangerousMod().withDangerousMod)(config, ['ios', function () {\n    var _ref3 = _asyncToGenerator(function* (config) {\n      var filePath = _path().default.join(config.modRequest.platformProjectRoot, 'Podfile');\n      var contents = yield _fs().default.promises.readFile(filePath, 'utf-8');\n      var results;\n      var googleMapsPath = isReactNativeMapsInstalled(config.modRequest.projectRoot);\n      var isLinked = isReactNativeMapsAutolinked(config);\n      debug('Is Expo Autolinked:', isLinked);\n      debug('react-native-maps path:', googleMapsPath);\n      if (isLinked && googleMapsPath && useGoogleMaps) {\n        try {\n          results = addMapsCocoaPods(contents);\n        } catch (error) {\n          if (error.code === 'ERR_NO_MATCH') {\n            throw new Error(`Cannot add react-native-maps to the project's ios/Podfile because it's malformed. Please report this with a copy of your project Podfile.`);\n          }\n          throw error;\n        }\n      } else {\n        results = removeMapsCocoaPods(contents);\n      }\n      if (results.didMerge || results.didClear) {\n        yield _fs().default.promises.writeFile(filePath, results.contents);\n      }\n      return config;\n    });\n    return function (_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }()]);\n};\nvar withGoogleMapsAppDelegate = function withGoogleMapsAppDelegate(config, _ref4) {\n  var apiKey = _ref4.apiKey;\n  return (0, _iosPlugins().withAppDelegate)(config, function (config) {\n    if (['objc', 'objcpp'].includes(config.modResults.language)) {\n      if (apiKey && isReactNativeMapsAutolinked(config) && isReactNativeMapsInstalled(config.modRequest.projectRoot)) {\n        try {\n          config.modResults.contents = addGoogleMapsAppDelegateImport(config.modResults.contents).contents;\n          config.modResults.contents = addGoogleMapsAppDelegateInit(config.modResults.contents, apiKey).contents;\n        } catch (error) {\n          if (error.code === 'ERR_NO_MATCH') {\n            throw new Error(`Cannot add Google Maps to the project's AppDelegate because it's malformed. Please report this with a copy of your project AppDelegate.`);\n          }\n          throw error;\n        }\n      } else {\n        config.modResults.contents = removeGoogleMapsAppDelegateImport(config.modResults.contents).contents;\n        config.modResults.contents = removeGoogleMapsAppDelegateInit(config.modResults.contents).contents;\n      }\n    } else {\n      throw new Error(`Cannot setup Google Maps because the project AppDelegate is not a supported language: ${config.modResults.language}`);\n    }\n    return config;\n  });\n};","map":{"version":3,"names":["_fs","data","_interopRequireDefault","require","_path","_resolveFrom","_iosPlugins","_withDangerousMod","_generateCode","obj","__esModule","default","debug","MATCH_INIT","exports","withGoogleMapsKey","createInfoPlistPlugin","setGoogleMapsApiKey","withMaps","config","apiKey","getGoogleMapsApiKey","withMapsCocoaPods","useGoogleMaps","withGoogleMapsAppDelegate","_config$ios$config$go","_config$ios","_config$ios$config","ios","googleMapsApiKey","_ref","GMSApiKey","infoPlist","_objectWithoutProperties","_excluded","_objectSpread","addGoogleMapsAppDelegateImport","src","newSrc","push","mergeContents","tag","join","anchor","offset","comment","removeGoogleMapsAppDelegateImport","removeContents","addGoogleMapsAppDelegateInit","removeGoogleMapsAppDelegateInit","addMapsCocoaPods","removeMapsCocoaPods","isReactNativeMapsInstalled","projectRoot","resolved","silent","dirname","isReactNativeMapsAutolinked","_ref2","withDangerousMod","_ref3","_asyncToGenerator","filePath","modRequest","platformProjectRoot","contents","promises","readFile","results","googleMapsPath","isLinked","error","code","Error","didMerge","didClear","writeFile","_x","apply","arguments","_ref4","withAppDelegate","includes","modResults","language"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config-plugins\\src\\ios\\Maps.ts"],"sourcesContent":["import { ExpoConfig } from '@expo/config-types';\nimport fs from 'fs';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { ConfigPlugin, InfoPlist } from '../Plugin.types';\nimport { createInfoPlistPlugin, withAppDelegate } from '../plugins/ios-plugins';\nimport { withDangerousMod } from '../plugins/withDangerousMod';\nimport { mergeContents, MergeResults, removeContents } from '../utils/generateCode';\n\nconst debug = require('debug')('expo:config-plugins:ios:maps') as typeof console.log;\n\nexport const MATCH_INIT =\n  /-\\s*\\(BOOL\\)\\s*application:\\s*\\(UIApplication\\s*\\*\\s*\\)\\s*\\w+\\s+didFinishLaunchingWithOptions:/g;\n\nconst withGoogleMapsKey = createInfoPlistPlugin(setGoogleMapsApiKey, 'withGoogleMapsKey');\n\nexport const withMaps: ConfigPlugin = (config) => {\n  config = withGoogleMapsKey(config);\n\n  const apiKey = getGoogleMapsApiKey(config);\n  // Technically adds react-native-maps (Apple maps) and google maps.\n\n  debug('Google Maps API Key:', apiKey);\n  config = withMapsCocoaPods(config, { useGoogleMaps: !!apiKey });\n\n  // Adds/Removes AppDelegate setup for Google Maps API on iOS\n  config = withGoogleMapsAppDelegate(config, { apiKey });\n\n  return config;\n};\n\nexport function getGoogleMapsApiKey(config: Pick<ExpoConfig, 'ios'>) {\n  return config.ios?.config?.googleMapsApiKey ?? null;\n}\n\nexport function setGoogleMapsApiKey(\n  config: Pick<ExpoConfig, 'ios'>,\n  { GMSApiKey, ...infoPlist }: InfoPlist\n): InfoPlist {\n  const apiKey = getGoogleMapsApiKey(config);\n\n  if (apiKey === null) {\n    return infoPlist;\n  }\n\n  return {\n    ...infoPlist,\n    GMSApiKey: apiKey,\n  };\n}\n\nexport function addGoogleMapsAppDelegateImport(src: string): MergeResults {\n  const newSrc = [];\n  newSrc.push(\n    '#if __has_include(<GoogleMaps/GoogleMaps.h>)',\n    '#import <GoogleMaps/GoogleMaps.h>',\n    '#endif'\n  );\n\n  return mergeContents({\n    tag: 'react-native-maps-import',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: /#import \"AppDelegate\\.h\"/,\n    offset: 1,\n    comment: '//',\n  });\n}\n\nexport function removeGoogleMapsAppDelegateImport(src: string): MergeResults {\n  return removeContents({\n    tag: 'react-native-maps-import',\n    src,\n  });\n}\n\nexport function addGoogleMapsAppDelegateInit(src: string, apiKey: string): MergeResults {\n  const newSrc = [];\n  newSrc.push(\n    '#if __has_include(<GoogleMaps/GoogleMaps.h>)',\n    `  [GMSServices provideAPIKey:@\"${apiKey}\"];`,\n    '#endif'\n  );\n\n  return mergeContents({\n    tag: 'react-native-maps-init',\n    src,\n    newSrc: newSrc.join('\\n'),\n    anchor: MATCH_INIT,\n    offset: 2,\n    comment: '//',\n  });\n}\n\nexport function removeGoogleMapsAppDelegateInit(src: string): MergeResults {\n  return removeContents({\n    tag: 'react-native-maps-init',\n    src,\n  });\n}\n\n/**\n * @param src The contents of the Podfile.\n * @returns Podfile with Google Maps added.\n */\nexport function addMapsCocoaPods(src: string): MergeResults {\n  return mergeContents({\n    tag: 'react-native-maps',\n    src,\n    newSrc: `  pod 'react-native-google-maps', path: File.dirname(\\`node --print \"require.resolve('react-native-maps/package.json')\"\\`)`,\n    anchor: /use_native_modules/,\n    offset: 0,\n    comment: '#',\n  });\n}\n\nexport function removeMapsCocoaPods(src: string): MergeResults {\n  return removeContents({\n    tag: 'react-native-maps',\n    src,\n  });\n}\n\nfunction isReactNativeMapsInstalled(projectRoot: string): string | null {\n  const resolved = resolveFrom.silent(projectRoot, 'react-native-maps/package.json');\n  return resolved ? path.dirname(resolved) : null;\n}\n\nfunction isReactNativeMapsAutolinked(config: Pick<ExpoConfig, '_internal'>): boolean {\n  // Only add the native code changes if we know that the package is going to be linked natively.\n  // This is specifically for monorepo support where one app might have react-native-maps (adding it to the node_modules)\n  // but another app will not have it installed in the package.json, causing it to not be linked natively.\n  // This workaround only exists because react-native-maps doesn't have a config plugin vendored in the package.\n\n  // TODO: `react-native-maps` doesn't use Expo autolinking so we cannot safely disable the module.\n  return true;\n\n  // return (\n  //   !config._internal?.autolinkedModules ||\n  //   config._internal.autolinkedModules.includes('react-native-maps')\n  // );\n}\n\nconst withMapsCocoaPods: ConfigPlugin<{ useGoogleMaps: boolean }> = (config, { useGoogleMaps }) => {\n  return withDangerousMod(config, [\n    'ios',\n    async (config) => {\n      const filePath = path.join(config.modRequest.platformProjectRoot, 'Podfile');\n      const contents = await fs.promises.readFile(filePath, 'utf-8');\n      let results: MergeResults;\n      // Only add the block if react-native-maps is installed in the project (best effort).\n      // Generally prebuild runs after a yarn install so this should always work as expected.\n      const googleMapsPath = isReactNativeMapsInstalled(config.modRequest.projectRoot);\n      const isLinked = isReactNativeMapsAutolinked(config);\n      debug('Is Expo Autolinked:', isLinked);\n      debug('react-native-maps path:', googleMapsPath);\n      if (isLinked && googleMapsPath && useGoogleMaps) {\n        try {\n          results = addMapsCocoaPods(contents);\n        } catch (error: any) {\n          if (error.code === 'ERR_NO_MATCH') {\n            throw new Error(\n              `Cannot add react-native-maps to the project's ios/Podfile because it's malformed. Please report this with a copy of your project Podfile.`\n            );\n          }\n          throw error;\n        }\n      } else {\n        // If the package is no longer installed, then remove the block.\n        results = removeMapsCocoaPods(contents);\n      }\n      if (results.didMerge || results.didClear) {\n        await fs.promises.writeFile(filePath, results.contents);\n      }\n      return config;\n    },\n  ]);\n};\n\nconst withGoogleMapsAppDelegate: ConfigPlugin<{ apiKey: string | null }> = (config, { apiKey }) => {\n  return withAppDelegate(config, (config) => {\n    if (['objc', 'objcpp'].includes(config.modResults.language)) {\n      if (\n        apiKey &&\n        isReactNativeMapsAutolinked(config) &&\n        isReactNativeMapsInstalled(config.modRequest.projectRoot)\n      ) {\n        try {\n          config.modResults.contents = addGoogleMapsAppDelegateImport(\n            config.modResults.contents\n          ).contents;\n          config.modResults.contents = addGoogleMapsAppDelegateInit(\n            config.modResults.contents,\n            apiKey\n          ).contents;\n        } catch (error: any) {\n          if (error.code === 'ERR_NO_MATCH') {\n            throw new Error(\n              `Cannot add Google Maps to the project's AppDelegate because it's malformed. Please report this with a copy of your project AppDelegate.`\n            );\n          }\n          throw error;\n        }\n      } else {\n        config.modResults.contents = removeGoogleMapsAppDelegateImport(\n          config.modResults.contents\n        ).contents;\n        config.modResults.contents = removeGoogleMapsAppDelegateInit(\n          config.modResults.contents\n        ).contents;\n      }\n    } else {\n      throw new Error(\n        `Cannot setup Google Maps because the project AppDelegate is not a supported language: ${config.modResults.language}`\n      );\n    }\n    return config;\n  });\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AACA,SAAAA,IAAA;EAAA,IAAAC,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAH,GAAA,YAAAA,IAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAG,MAAA;EAAA,IAAAH,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAC,KAAA,YAAAA,MAAA;IAAA,OAAAH,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAI,aAAA;EAAA,IAAAJ,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAE,YAAA,YAAAA,aAAA;IAAA,OAAAJ,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAGA,SAAAK,YAAA;EAAA,IAAAL,IAAA,GAAAE,OAAA;EAAAG,WAAA,YAAAA,YAAA;IAAA,OAAAL,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAM,kBAAA;EAAA,IAAAN,IAAA,GAAAE,OAAA;EAAAI,iBAAA,YAAAA,kBAAA;IAAA,OAAAN,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAO,cAAA;EAAA,IAAAP,IAAA,GAAAE,OAAA;EAAAK,aAAA,YAAAA,cAAA;IAAA,OAAAP,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAAoF,SAAAC,uBAAAO,GAAA;EAAA,OAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA;IAAAE,OAAA,EAAAF;EAAA;AAAA;AAEpF,IAAMG,KAAK,GAAGT,OAAO,CAAC,OAAO,CAAC,CAAC,8BAA8B,CAAuB;AAE7E,IAAMU,UAAU,GACrB,iGAAiG;AAACC,OAAA,CAAAD,UAAA,GAAAA,UAAA;AAEpG,IAAME,iBAAiB,GAAG,IAAAT,WAAA,GAAAU,qBAAqB,EAACC,mBAAmB,EAAE,mBAAmB,CAAC;AAElF,IAAMC,QAAsB,GAAI,SAA1BA,QAAsBA,CAAIC,MAAM,EAAK;EAChDA,MAAM,GAAGJ,iBAAiB,CAACI,MAAM,CAAC;EAElC,IAAMC,MAAM,GAAGC,mBAAmB,CAACF,MAAM,CAAC;EAG1CP,KAAK,CAAC,sBAAsB,EAAEQ,MAAM,CAAC;EACrCD,MAAM,GAAGG,iBAAiB,CAACH,MAAM,EAAE;IAAEI,aAAa,EAAE,CAAC,CAACH;EAAO,CAAC,CAAC;EAG/DD,MAAM,GAAGK,yBAAyB,CAACL,MAAM,EAAE;IAAEC,MAAA,EAAAA;EAAO,CAAC,CAAC;EAEtD,OAAOD,MAAM;AACf,CAAC;AAACL,OAAA,CAAAI,QAAA,GAAAA,QAAA;AAEK,SAASG,mBAAmBA,CAACF,MAA+B,EAAE;EAAA,IAAAM,qBAAA,EAAAC,WAAA,EAAAC,kBAAA;EACnE,QAAAF,qBAAA,IAAAC,WAAA,GAAOP,MAAM,CAACS,GAAG,cAAAF,WAAA,wBAAAC,kBAAA,GAAVD,WAAA,CAAYP,MAAM,cAAAQ,kBAAA,uBAAlBA,kBAAA,CAAoBE,gBAAgB,cAAAJ,qBAAA,cAAAA,qBAAA,GAAI,IAAI;AACrD;AAEO,SAASR,mBAAmBA,CACjCE,MAA+B,EAAAW,IAAA,EAEpB;EAAA,IADTC,SAAS,GAAAD,IAAA,CAATC,SAAS;IAAKC,SAAA,GAAAC,wBAAA,CAAAH,IAAA,EAAAI,SAAA;EAEhB,IAAMd,MAAM,GAAGC,mBAAmB,CAACF,MAAM,CAAC;EAE1C,IAAIC,MAAM,KAAK,IAAI,EAAE;IACnB,OAAOY,SAAS;EAClB;EAEA,OAAAG,aAAA,CAAAA,aAAA,KACKH,SAAS;IACZD,SAAS,EAAEX;EAAA;AAEf;AAEO,SAASgB,8BAA8BA,CAACC,GAAW,EAAgB;EACxE,IAAMC,MAAM,GAAG,EAAE;EACjBA,MAAM,CAACC,IAAI,CACT,8CAA8C,EAC9C,mCAAmC,EACnC,QAAQ,CACT;EAED,OAAO,IAAA/B,aAAA,GAAAgC,aAAa,EAAC;IACnBC,GAAG,EAAE,0BAA0B;IAC/BJ,GAAG,EAAHA,GAAG;IACHC,MAAM,EAAEA,MAAM,CAACI,IAAI,CAAC,IAAI,CAAC;IACzBC,MAAM,EAAE,0BAA0B;IAClCC,MAAM,EAAE,CAAC;IACTC,OAAO,EAAE;EACX,CAAC,CAAC;AACJ;AAEO,SAASC,iCAAiCA,CAACT,GAAW,EAAgB;EAC3E,OAAO,IAAA7B,aAAA,GAAAuC,cAAc,EAAC;IACpBN,GAAG,EAAE,0BAA0B;IAC/BJ,GAAA,EAAAA;EACF,CAAC,CAAC;AACJ;AAEO,SAASW,4BAA4BA,CAACX,GAAW,EAAEjB,MAAc,EAAgB;EACtF,IAAMkB,MAAM,GAAG,EAAE;EACjBA,MAAM,CAACC,IAAI,CACT,8CAA8C,EAC7C,kCAAiCnB,MAAO,KAAI,EAC7C,QAAQ,CACT;EAED,OAAO,IAAAZ,aAAA,GAAAgC,aAAa,EAAC;IACnBC,GAAG,EAAE,wBAAwB;IAC7BJ,GAAG,EAAHA,GAAG;IACHC,MAAM,EAAEA,MAAM,CAACI,IAAI,CAAC,IAAI,CAAC;IACzBC,MAAM,EAAE9B,UAAU;IAClB+B,MAAM,EAAE,CAAC;IACTC,OAAO,EAAE;EACX,CAAC,CAAC;AACJ;AAEO,SAASI,+BAA+BA,CAACZ,GAAW,EAAgB;EACzE,OAAO,IAAA7B,aAAA,GAAAuC,cAAc,EAAC;IACpBN,GAAG,EAAE,wBAAwB;IAC7BJ,GAAA,EAAAA;EACF,CAAC,CAAC;AACJ;AAMO,SAASa,gBAAgBA,CAACb,GAAW,EAAgB;EAC1D,OAAO,IAAA7B,aAAA,GAAAgC,aAAa,EAAC;IACnBC,GAAG,EAAE,mBAAmB;IACxBJ,GAAG,EAAHA,GAAG;IACHC,MAAM,EAAG,4HAA2H;IACpIK,MAAM,EAAE,oBAAoB;IAC5BC,MAAM,EAAE,CAAC;IACTC,OAAO,EAAE;EACX,CAAC,CAAC;AACJ;AAEO,SAASM,mBAAmBA,CAACd,GAAW,EAAgB;EAC7D,OAAO,IAAA7B,aAAA,GAAAuC,cAAc,EAAC;IACpBN,GAAG,EAAE,mBAAmB;IACxBJ,GAAA,EAAAA;EACF,CAAC,CAAC;AACJ;AAEA,SAASe,0BAA0BA,CAACC,WAAmB,EAAiB;EACtE,IAAMC,QAAQ,GAAGjD,YAAA,GAAAM,OAAW,CAAC4C,MAAM,CAACF,WAAW,EAAE,gCAAgC,CAAC;EAClF,OAAOC,QAAQ,GAAGlD,KAAA,GAAAO,OAAI,CAAC6C,OAAO,CAACF,QAAQ,CAAC,GAAG,IAAI;AACjD;AAEA,SAASG,2BAA2BA,CAACtC,MAAqC,EAAW;EAOnF,OAAO,IAAI;AAMb;AAEA,IAAMG,iBAA2D,GAAG,SAA9DA,iBAA2DA,CAAIH,MAAM,EAAAuC,KAAA,EAAwB;EAAA,IAApBnC,aAAA,GAAAmC,KAAA,CAAAnC,aAAA;EAC7E,OAAO,IAAAhB,iBAAA,GAAAoD,gBAAgB,EAACxC,MAAM,EAAE,CAC9B,KAAK;IAAA,IAAAyC,KAAA,GAAAC,iBAAA,CACL,WAAO1C,MAAM,EAAK;MAChB,IAAM2C,QAAQ,GAAG1D,KAAA,GAAAO,OAAI,CAAC+B,IAAI,CAACvB,MAAM,CAAC4C,UAAU,CAACC,mBAAmB,EAAE,SAAS,CAAC;MAC5E,IAAMC,QAAQ,SAASjE,GAAA,GAAAW,OAAE,CAACuD,QAAQ,CAACC,QAAQ,CAACL,QAAQ,EAAE,OAAO,CAAC;MAC9D,IAAIM,OAAqB;MAGzB,IAAMC,cAAc,GAAGjB,0BAA0B,CAACjC,MAAM,CAAC4C,UAAU,CAACV,WAAW,CAAC;MAChF,IAAMiB,QAAQ,GAAGb,2BAA2B,CAACtC,MAAM,CAAC;MACpDP,KAAK,CAAC,qBAAqB,EAAE0D,QAAQ,CAAC;MACtC1D,KAAK,CAAC,yBAAyB,EAAEyD,cAAc,CAAC;MAChD,IAAIC,QAAQ,IAAID,cAAc,IAAI9C,aAAa,EAAE;QAC/C,IAAI;UACF6C,OAAO,GAAGlB,gBAAgB,CAACe,QAAQ,CAAC;QACtC,CAAC,CAAC,OAAOM,KAAU,EAAE;UACnB,IAAIA,KAAK,CAACC,IAAI,KAAK,cAAc,EAAE;YACjC,MAAM,IAAIC,KAAK,CACZ,2IAA0I,CAC5I;UACH;UACA,MAAMF,KAAK;QACb;MACF,CAAC,MAAM;QAELH,OAAO,GAAGjB,mBAAmB,CAACc,QAAQ,CAAC;MACzC;MACA,IAAIG,OAAO,CAACM,QAAQ,IAAIN,OAAO,CAACO,QAAQ,EAAE;QACxC,MAAM3E,GAAA,GAAAW,OAAE,CAACuD,QAAQ,CAACU,SAAS,CAACd,QAAQ,EAAEM,OAAO,CAACH,QAAQ,CAAC;MACzD;MACA,OAAO9C,MAAM;IACf,CAAC;IAAA,iBAAA0D,EAAA;MAAA,OAAAjB,KAAA,CAAAkB,KAAA,OAAAC,SAAA;IAAA;EAAA,IACF,CAAC;AACJ,CAAC;AAED,IAAMvD,yBAAkE,GAAG,SAArEA,yBAAkEA,CAAIL,MAAM,EAAA6D,KAAA,EAAiB;EAAA,IAAb5D,MAAA,GAAA4D,KAAA,CAAA5D,MAAA;EACpF,OAAO,IAAAd,WAAA,GAAA2E,eAAe,EAAC9D,MAAM,EAAG,UAAAA,MAAM,EAAK;IACzC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC+D,QAAQ,CAAC/D,MAAM,CAACgE,UAAU,CAACC,QAAQ,CAAC,EAAE;MAC3D,IACEhE,MAAM,IACNqC,2BAA2B,CAACtC,MAAM,CAAC,IACnCiC,0BAA0B,CAACjC,MAAM,CAAC4C,UAAU,CAACV,WAAW,CAAC,EACzD;QACA,IAAI;UACFlC,MAAM,CAACgE,UAAU,CAAClB,QAAQ,GAAG7B,8BAA8B,CACzDjB,MAAM,CAACgE,UAAU,CAAClB,QAAQ,CAC3B,CAACA,QAAQ;UACV9C,MAAM,CAACgE,UAAU,CAAClB,QAAQ,GAAGjB,4BAA4B,CACvD7B,MAAM,CAACgE,UAAU,CAAClB,QAAQ,EAC1B7C,MAAM,CACP,CAAC6C,QAAQ;QACZ,CAAC,CAAC,OAAOM,KAAU,EAAE;UACnB,IAAIA,KAAK,CAACC,IAAI,KAAK,cAAc,EAAE;YACjC,MAAM,IAAIC,KAAK,CACZ,yIAAwI,CAC1I;UACH;UACA,MAAMF,KAAK;QACb;MACF,CAAC,MAAM;QACLpD,MAAM,CAACgE,UAAU,CAAClB,QAAQ,GAAGnB,iCAAiC,CAC5D3B,MAAM,CAACgE,UAAU,CAAClB,QAAQ,CAC3B,CAACA,QAAQ;QACV9C,MAAM,CAACgE,UAAU,CAAClB,QAAQ,GAAGhB,+BAA+B,CAC1D9B,MAAM,CAACgE,UAAU,CAAClB,QAAQ,CAC3B,CAACA,QAAQ;MACZ;IACF,CAAC,MAAM;MACL,MAAM,IAAIQ,KAAK,CACZ,yFAAwFtD,MAAM,CAACgE,UAAU,CAACC,QAAS,EAAC,CACtH;IACH;IACA,OAAOjE,MAAM;EACf,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}