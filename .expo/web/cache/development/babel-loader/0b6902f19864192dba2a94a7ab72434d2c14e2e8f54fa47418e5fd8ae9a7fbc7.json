{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBareExtensions = getBareExtensions;\nexports.getExtensions = getExtensions;\nexports.getLanguageExtensionsInOrder = getLanguageExtensionsInOrder;\nfunction _assert() {\n  var data = _interopRequireDefault(require(\"assert\"));\n  _assert = function _assert() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction getExtensions(platforms, extensions, workflows) {\n  (0, _assert().default)(Array.isArray(platforms), 'Expected: `platforms: string[]`');\n  (0, _assert().default)(Array.isArray(extensions), 'Expected: `extensions: string[]`');\n  (0, _assert().default)(Array.isArray(workflows), 'Expected: `workflows: string[]`');\n  var fileExtensions = [];\n  for (var workflow of [].concat(_toConsumableArray(workflows), [''])) {\n    for (var platform of [].concat(_toConsumableArray(platforms), [''])) {\n      for (var extension of extensions) {\n        fileExtensions.push([platform, workflow, extension].filter(Boolean).join('.'));\n      }\n    }\n  }\n  return fileExtensions;\n}\nfunction getLanguageExtensionsInOrder(_ref) {\n  var isTS = _ref.isTS,\n    isModern = _ref.isModern,\n    isReact = _ref.isReact;\n  var addLanguage = function addLanguage(lang) {\n    return [lang, isReact && `${lang}x`].filter(Boolean);\n  };\n  var extensions = addLanguage('js');\n  if (isModern) {\n    extensions.unshift('mjs');\n  }\n  if (isTS) {\n    extensions = [].concat(_toConsumableArray(addLanguage('ts')), _toConsumableArray(extensions));\n  }\n  return extensions;\n}\nfunction getBareExtensions(platforms) {\n  var languageOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    isTS: true,\n    isModern: true,\n    isReact: true\n  };\n  var fileExtensions = getExtensions(platforms, getLanguageExtensionsInOrder(languageOptions), []);\n  _addMiscellaneousExtensions(platforms, fileExtensions);\n  return fileExtensions;\n}\nfunction _addMiscellaneousExtensions(platforms, fileExtensions) {\n  fileExtensions.push('json');\n  if (platforms.includes('web')) {\n    fileExtensions.push('wasm');\n  }\n  return fileExtensions;\n}","map":{"version":3,"names":["_assert","data","_interopRequireDefault","require","obj","__esModule","default","getExtensions","platforms","extensions","workflows","Array","isArray","fileExtensions","workflow","concat","_toConsumableArray","platform","extension","push","filter","Boolean","join","getLanguageExtensionsInOrder","_ref","isTS","isModern","isReact","addLanguage","lang","unshift","getBareExtensions","languageOptions","arguments","length","undefined","_addMiscellaneousExtensions","includes"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\config\\src\\paths\\extensions.ts"],"sourcesContent":["import assert from 'assert';\n\nexport type LanguageOptions = {\n  isTS: boolean;\n  isModern: boolean;\n  isReact: boolean;\n};\n\nexport function getExtensions(\n  platforms: string[],\n  extensions: string[],\n  workflows: string[]\n): string[] {\n  // In the past we used spread operators to collect the values so now we enforce type safety on them.\n  assert(Array.isArray(platforms), 'Expected: `platforms: string[]`');\n  assert(Array.isArray(extensions), 'Expected: `extensions: string[]`');\n  assert(Array.isArray(workflows), 'Expected: `workflows: string[]`');\n\n  const fileExtensions = [];\n  // support .expo files\n  for (const workflow of [...workflows, '']) {\n    // Ensure order is correct: [platformA.js, platformB.js, js]\n    for (const platform of [...platforms, '']) {\n      // Support both TypeScript and JavaScript\n      for (const extension of extensions) {\n        fileExtensions.push([platform, workflow, extension].filter(Boolean).join('.'));\n      }\n    }\n  }\n  return fileExtensions;\n}\n\nexport function getLanguageExtensionsInOrder({\n  isTS,\n  isModern,\n  isReact,\n}: LanguageOptions): string[] {\n  // @ts-ignore: filter removes false type\n  const addLanguage = (lang: string): string[] => [lang, isReact && `${lang}x`].filter(Boolean);\n\n  // Support JavaScript\n  let extensions = addLanguage('js');\n\n  if (isModern) {\n    extensions.unshift('mjs');\n  }\n  if (isTS) {\n    extensions = [...addLanguage('ts'), ...extensions];\n  }\n\n  return extensions;\n}\n\nexport function getBareExtensions(\n  platforms: string[],\n  languageOptions: LanguageOptions = { isTS: true, isModern: true, isReact: true }\n): string[] {\n  const fileExtensions = getExtensions(\n    platforms,\n    getLanguageExtensionsInOrder(languageOptions),\n    []\n  );\n  // Always add these last\n  _addMiscellaneousExtensions(platforms, fileExtensions);\n  return fileExtensions;\n}\n\nfunction _addMiscellaneousExtensions(platforms: string[], fileExtensions: string[]): string[] {\n  // Always add these with no platform extension\n  // In the future we may want to add platform and workspace extensions to json.\n  fileExtensions.push('json');\n  // Native doesn't currently support web assembly.\n  if (platforms.includes('web')) {\n    fileExtensions.push('wasm');\n  }\n  return fileExtensions;\n}\n"],"mappings":";;;;;;;;;AAAA,SAAAA,QAAA;EAAA,IAAAC,IAAA,GAAAC,sBAAA,CAAAC,OAAA;EAAAH,OAAA,YAAAA,QAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAA4B,SAAAC,uBAAAE,GAAA;EAAA,OAAAA,GAAA,IAAAA,GAAA,CAAAC,UAAA,GAAAD,GAAA;IAAAE,OAAA,EAAAF;EAAA;AAAA;AAQrB,SAASG,aAAaA,CAC3BC,SAAmB,EACnBC,UAAoB,EACpBC,SAAmB,EACT;EAEV,IAAAV,OAAA,GAAAM,OAAM,EAACK,KAAK,CAACC,OAAO,CAACJ,SAAS,CAAC,EAAE,iCAAiC,CAAC;EACnE,IAAAR,OAAA,GAAAM,OAAM,EAACK,KAAK,CAACC,OAAO,CAACH,UAAU,CAAC,EAAE,kCAAkC,CAAC;EACrE,IAAAT,OAAA,GAAAM,OAAM,EAACK,KAAK,CAACC,OAAO,CAACF,SAAS,CAAC,EAAE,iCAAiC,CAAC;EAEnE,IAAMG,cAAc,GAAG,EAAE;EAEzB,KAAK,IAAMC,QAAQ,OAAAC,MAAA,CAAAC,kBAAA,CAAQN,SAAS,IAAE,EAAE,IAAG;IAEzC,KAAK,IAAMO,QAAQ,OAAAF,MAAA,CAAAC,kBAAA,CAAQR,SAAS,IAAE,EAAE,IAAG;MAEzC,KAAK,IAAMU,SAAS,IAAIT,UAAU,EAAE;QAClCI,cAAc,CAACM,IAAI,CAAC,CAACF,QAAQ,EAAEH,QAAQ,EAAEI,SAAS,CAAC,CAACE,MAAM,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAAC;MAChF;IACF;EACF;EACA,OAAOT,cAAc;AACvB;AAEO,SAASU,4BAA4BA,CAAAC,IAAA,EAId;EAAA,IAH5BC,IAAI,GAAAD,IAAA,CAAJC,IAAI;IACJC,QAAQ,GAAAF,IAAA,CAARE,QAAQ;IACRC,OAAA,GAAAH,IAAA,CAAAG,OAAA;EAGA,IAAMC,WAAW,GAAI,SAAfA,WAAWA,CAAIC,IAAY;IAAA,OAAe,CAACA,IAAI,EAAEF,OAAO,IAAK,GAAEE,IAAK,GAAE,CAAC,CAACT,MAAM,CAACC,OAAO,CAAC;EAAA;EAG7F,IAAIZ,UAAU,GAAGmB,WAAW,CAAC,IAAI,CAAC;EAElC,IAAIF,QAAQ,EAAE;IACZjB,UAAU,CAACqB,OAAO,CAAC,KAAK,CAAC;EAC3B;EACA,IAAIL,IAAI,EAAE;IACRhB,UAAU,MAAAM,MAAA,CAAAC,kBAAA,CAAOY,WAAW,CAAC,IAAI,CAAC,GAAAZ,kBAAA,CAAKP,UAAU,EAAC;EACpD;EAEA,OAAOA,UAAU;AACnB;AAEO,SAASsB,iBAAiBA,CAC/BvB,SAAmB,EAET;EAAA,IADVwB,eAAgC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG;IAAER,IAAI,EAAE,IAAI;IAAEC,QAAQ,EAAE,IAAI;IAAEC,OAAO,EAAE;EAAK,CAAC;EAEhF,IAAMd,cAAc,GAAGN,aAAa,CAClCC,SAAS,EACTe,4BAA4B,CAACS,eAAe,CAAC,EAC7C,EAAE,CACH;EAEDI,2BAA2B,CAAC5B,SAAS,EAAEK,cAAc,CAAC;EACtD,OAAOA,cAAc;AACvB;AAEA,SAASuB,2BAA2BA,CAAC5B,SAAmB,EAAEK,cAAwB,EAAY;EAG5FA,cAAc,CAACM,IAAI,CAAC,MAAM,CAAC;EAE3B,IAAIX,SAAS,CAAC6B,QAAQ,CAAC,KAAK,CAAC,EAAE;IAC7BxB,cAAc,CAACM,IAAI,CAAC,MAAM,CAAC;EAC7B;EACA,OAAON,cAAc;AACvB"},"metadata":{},"sourceType":"script","externalDependencies":[]}