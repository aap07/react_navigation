{"ast":null,"code":"export { DEFAULT_ICON_COLOR, DEFAULT_ICON_SIZE } from \"./vendor/react-native-vector-icons/lib/create-icon-set\";","map":{"version":3,"names":["DEFAULT_ICON_COLOR","DEFAULT_ICON_SIZE"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/vector-icons/build/createIconSet.d.ts"],"sourcesContent":["import React, { ComponentClass } from \"react\";\nimport { TextProps, TouchableHighlightProps, ViewProps, OpaqueColorValue, TextStyle, ViewStyle } from \"react-native\";\nexport { DEFAULT_ICON_COLOR, DEFAULT_ICON_SIZE, } from \"./vendor/react-native-vector-icons/lib/create-icon-set\";\nexport interface IconProps<GLYPHS extends string> extends TextProps {\n    /**\n     * Size of the icon, can also be passed as fontSize in the style object.\n     *\n     * @default 12\n     */\n    size?: number;\n    /**\n     * Name of the icon to show\n     *\n     * See Icon Explorer app\n     * {@link https://expo.github.io/vector-icons/}\n     */\n    name: GLYPHS;\n    /**\n     * Color of the icon. Can be a string or OpaqueColorValue (returned from\n     * PlatformColor(..))\n     *\n     */\n    color?: string | OpaqueColorValue;\n}\nexport interface IconButtonProps<GLYPHS extends string> extends IconProps<GLYPHS>, ViewProps, TouchableHighlightProps {\n    /**\n     * Text and icon color\n     * Use iconStyle or nest a Text component if you need different colors.\n     * Can be a string or OpaqueColorValue (returned from PlatformColor(..))\n     *\n     *  @default 'white'\n     */\n    color?: string | OpaqueColorValue;\n    /**\n     * Border radius of the button\n     * Set to 0 to disable.\n     *\n     * @default 5\n     */\n    borderRadius?: number;\n    /**\n     * Styles applied to the icon only\n     * Good for setting margins or a different color.\n     *\n     * @default {marginRight: 10}\n     */\n    iconStyle?: TextStyle;\n    /**\n     * Style prop inherited from TextProps and TouchableWithoutFeedbackProperties\n     * Only exist here so we can have ViewStyle or TextStyle\n     *\n     */\n    style?: ViewStyle | TextStyle;\n    /**\n     * Background color of the button. Can be a string or OpaqueColorValue (returned from\n     * PlatformColor(..))\n     *\n     * @default '#007AFF'\n     */\n    backgroundColor?: string | OpaqueColorValue;\n}\nexport declare type GlyphMap<G extends string> = {\n    [K in G]: number | string;\n};\nexport interface Icon<G extends string, FN extends string> {\n    defaultProps: any;\n    Button: ComponentClass<IconButtonProps<G>>;\n    glyphMap: GlyphMap<G>;\n    getRawGlyphMap: () => GlyphMap<G>;\n    getFontFamily: () => FN;\n    loadFont: () => Promise<void>;\n    font: {\n        [x: string]: any;\n    };\n    new (props: IconProps<G>): React.Component<IconProps<G>>;\n}\nexport default function <G extends string, FN extends string>(glyphMap: GlyphMap<G>, fontName: FN, expoAssetId: any, fontStyle?: any): Icon<G, FN>;\n"],"mappings":"AAEA,SAASA,kBAAkB,EAAEC,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}