{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"@babel/runtime/helpers/toConsumableArray\");\nvar _toArray = require(\"@babel/runtime/helpers/toArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.environmentVariableSerializerPlugin = environmentVariableSerializerPlugin;\nexports.getTransformEnvironment = getTransformEnvironment;\nexports.replaceEnvironmentVariables = replaceEnvironmentVariables;\nfunction _CountingSet() {\n  var data = _interopRequireDefault(require(\"metro/src/lib/CountingSet\"));\n  _CountingSet = function _CountingSet() {\n    return data;\n  };\n  return data;\n}\nfunction _countLines() {\n  var data = _interopRequireDefault(require(\"metro/src/lib/countLines\"));\n  _countLines = function _countLines() {\n    return data;\n  };\n  return data;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = require('debug')('expo:metro-config:serializer:env-var');\nfunction replaceEnvironmentVariables(code, env) {\n  return code.replace(/process\\.env\\.([a-zA-Z0-9_]+)/gm, function (match) {\n    var _env$name;\n    var name = match.replace('process.env.', '');\n    if (!/^EXPO_PUBLIC_/.test(name)) {\n      return match;\n    }\n    var value = JSON.stringify((_env$name = env[name]) !== null && _env$name !== void 0 ? _env$name : '');\n    debug(`Inlining environment variable \"${match}\" with ${value}`);\n    return value;\n  });\n}\nfunction getTransformEnvironment(url) {\n  var match = url.match(/[&?]transform\\.environment=([^&]+)/);\n  return match ? match[1] : null;\n}\nfunction getAllExpoPublicEnvVars() {\n  var env = {};\n  for (var key in process.env) {\n    if (key.startsWith('EXPO_PUBLIC_')) {\n      env[key] = process.env[key];\n    }\n  }\n  return env;\n}\nfunction environmentVariableSerializerPlugin(entryPoint, preModules, graph, options) {\n  if (options.sourceUrl && getTransformEnvironment(options.sourceUrl) === 'node') {\n    debug('Skipping environment variable inlining in Node.js environment.');\n    return [entryPoint, preModules, graph, options];\n  }\n  if (options.dev) {\n    var str = `process.env=Object.defineProperties(process.env, {${Object.keys(getAllExpoPublicEnvVars()).map(function (key) {\n      return `${JSON.stringify(key)}: { value: ${JSON.stringify(process.env[key])} }`;\n    }).join(',')}});`;\n    var _preModules = _toArray(preModules),\n      firstModule = _preModules[0],\n      restModules = _preModules.slice(1);\n    return [entryPoint, [firstModule, getEnvPrelude(str)].concat(_toConsumableArray(restModules)), graph, options];\n  }\n  for (var value of graph.dependencies.values()) {\n    if (/node_modules/.test(value.path)) {\n      continue;\n    }\n    for (var index in value.output) {\n      var code = replaceEnvironmentVariables(value.output[index].data.code, process.env);\n      value.output[index].data.code = code;\n    }\n  }\n  return [entryPoint, preModules, graph, options];\n}\nfunction getEnvPrelude(contents) {\n  var code = '// HMR env vars from Expo CLI (dev-only)\\n' + contents;\n  var name = '__env__';\n  var lineCount = (0, _countLines().default)(code);\n  return {\n    dependencies: new Map(),\n    getSource: function getSource() {\n      return Buffer.from(code);\n    },\n    inverseDependencies: new (_CountingSet().default)(),\n    path: name,\n    output: [{\n      type: 'js/script/virtual',\n      data: {\n        code: code,\n        lineCount: lineCount,\n        map: []\n      }\n    }]\n  };\n}","map":{"version":3,"names":["_CountingSet","data","_interopRequireDefault","require","_countLines","obj","__esModule","default","debug","replaceEnvironmentVariables","code","env","replace","match","_env$name","name","test","value","JSON","stringify","getTransformEnvironment","url","getAllExpoPublicEnvVars","key","process","startsWith","environmentVariableSerializerPlugin","entryPoint","preModules","graph","options","sourceUrl","dev","str","Object","keys","map","join","_preModules","_toArray","firstModule","restModules","slice","getEnvPrelude","concat","_toConsumableArray","dependencies","values","path","index","output","contents","lineCount","Map","getSource","Buffer","from","inverseDependencies","type"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\metro-config\\src\\serializer\\environmentVariableSerializerPlugin.ts"],"sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { ReadOnlyGraph, MixedOutput, Module, SerializerOptions } from 'metro';\nimport CountingSet from 'metro/src/lib/CountingSet';\nimport countLines from 'metro/src/lib/countLines';\n\nimport { SerializerParameters } from './withExpoSerializers';\n\nconst debug = require('debug')('expo:metro-config:serializer:env-var') as typeof console.log;\n\nexport function replaceEnvironmentVariables(\n  code: string,\n  env: Record<string, string | undefined>\n): string {\n  // match and replace env variables that aren't NODE_ENV or JEST_WORKER_ID\n  // return code.match(/process\\.env\\.(EXPO_PUBLIC_[A-Z_]+)/g);\n  return code.replace(/process\\.env\\.([a-zA-Z0-9_]+)/gm, (match) => {\n    const name = match.replace('process.env.', '');\n    if (\n      // Must start with EXPO_PUBLIC_ to be replaced\n      !/^EXPO_PUBLIC_/.test(name)\n    ) {\n      return match;\n    }\n\n    const value = JSON.stringify(env[name] ?? '');\n    debug(`Inlining environment variable \"${match}\" with ${value}`);\n    return value;\n  });\n}\n\nexport function getTransformEnvironment(url: string): string | null {\n  const match = url.match(/[&?]transform\\.environment=([^&]+)/);\n  return match ? match[1] : null;\n}\n\nfunction getAllExpoPublicEnvVars() {\n  // Create an object containing all environment variables that start with EXPO_PUBLIC_\n  const env = {};\n  for (const key in process.env) {\n    if (key.startsWith('EXPO_PUBLIC_')) {\n      // @ts-ignore\n      env[key] = process.env[key];\n    }\n  }\n  return env;\n}\n\nexport function environmentVariableSerializerPlugin(\n  entryPoint: string,\n  preModules: readonly Module<MixedOutput>[],\n  graph: ReadOnlyGraph,\n  options: SerializerOptions\n): SerializerParameters {\n  // Skip replacement in Node.js environments.\n  if (options.sourceUrl && getTransformEnvironment(options.sourceUrl) === 'node') {\n    debug('Skipping environment variable inlining in Node.js environment.');\n    return [entryPoint, preModules, graph, options];\n  }\n\n  // Adds about 5ms on a blank Expo Router app.\n  // TODO: We can probably cache the results.\n\n  // In development, we need to add the process.env object to ensure it\n  // persists between Fast Refresh updates.\n  if (options.dev) {\n    // Set the process.env object to the current environment variables object\n    // ensuring they aren't iterable, settable, or enumerable.\n    const str = `process.env=Object.defineProperties(process.env, {${Object.keys(\n      getAllExpoPublicEnvVars()\n    )\n      .map((key) => `${JSON.stringify(key)}: { value: ${JSON.stringify(process.env[key])} }`)\n      .join(',')}});`;\n\n    const [firstModule, ...restModules] = preModules;\n    // const envCode = `var process=this.process||{};${str}`;\n    // process.env\n    return [\n      entryPoint,\n      [\n        // First module defines the process.env object.\n        firstModule,\n        // Second module modifies the process.env object.\n        getEnvPrelude(str),\n        // Now we add the rest\n        ...restModules,\n      ],\n      graph,\n      options,\n    ];\n  }\n\n  // In production, inline all process.env variables to ensure they cannot be iterated and read arbitrarily.\n  for (const value of graph.dependencies.values()) {\n    // Skip node_modules, the feature is a bit too sensitive to allow in arbitrary code.\n    if (/node_modules/.test(value.path)) {\n      continue;\n    }\n\n    for (const index in value.output) {\n      // TODO: This probably breaks source maps.\n      const code = replaceEnvironmentVariables(value.output[index].data.code, process.env);\n      value.output[index].data.code = code;\n    }\n  }\n  return [entryPoint, preModules, graph, options];\n}\n\nfunction getEnvPrelude(contents: string): Module<MixedOutput> {\n  const code = '// HMR env vars from Expo CLI (dev-only)\\n' + contents;\n  const name = '__env__';\n  const lineCount = countLines(code);\n\n  return {\n    dependencies: new Map(),\n    getSource: (): Buffer => Buffer.from(code),\n    inverseDependencies: new CountingSet(),\n    path: name,\n    output: [\n      {\n        type: 'js/script/virtual',\n        data: {\n          code,\n          // @ts-expect-error: typed incorrectly upstream\n          lineCount,\n          map: [],\n        },\n      },\n    ],\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}