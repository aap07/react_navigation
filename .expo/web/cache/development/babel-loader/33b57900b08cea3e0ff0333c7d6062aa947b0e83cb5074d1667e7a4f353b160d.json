{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AUTOMATIC_FIX_LEVELS = void 0;\nexports.default = _default;\nfunction _cliTools() {\n  var data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function _cliTools() {\n    return data;\n  };\n  return data;\n}\nfunction _chalk() {\n  var data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function _chalk() {\n    return data;\n  };\n  return data;\n}\nfunction _ora() {\n  var data = _interopRequireDefault(require(\"ora\"));\n  _ora = function _ora() {\n    return data;\n  };\n  return data;\n}\nvar _healthchecks = require(\"./healthchecks\");\nvar _common = require(\"./healthchecks/common\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar AUTOMATIC_FIX_LEVELS;\nexports.AUTOMATIC_FIX_LEVELS = AUTOMATIC_FIX_LEVELS;\n(function (AUTOMATIC_FIX_LEVELS) {\n  AUTOMATIC_FIX_LEVELS[\"ALL_ISSUES\"] = \"ALL_ISSUES\";\n  AUTOMATIC_FIX_LEVELS[\"ERRORS\"] = \"ERRORS\";\n  AUTOMATIC_FIX_LEVELS[\"WARNINGS\"] = \"WARNINGS\";\n})(AUTOMATIC_FIX_LEVELS || (exports.AUTOMATIC_FIX_LEVELS = AUTOMATIC_FIX_LEVELS = {}));\nfunction _default(_x) {\n  return _default2.apply(this, arguments);\n}\nfunction _default2() {\n  _default2 = _asyncToGenerator(function* (_ref) {\n    var _totalIssuesBasedOnFi;\n    var healthchecks = _ref.healthchecks,\n      automaticFixLevel = _ref.automaticFixLevel,\n      stats = _ref.stats,\n      environmentInfo = _ref.environmentInfo,\n      config = _ref.config;\n    if (process.stdout.isTTY) {\n      process.stdout.moveCursor(0, -6);\n      process.stdout.clearScreenDown();\n    }\n    var totalIssuesBasedOnFixLevel = (_totalIssuesBasedOnFi = {}, _defineProperty(_totalIssuesBasedOnFi, AUTOMATIC_FIX_LEVELS.ALL_ISSUES, stats.errors + stats.warnings), _defineProperty(_totalIssuesBasedOnFi, AUTOMATIC_FIX_LEVELS.ERRORS, stats.errors), _defineProperty(_totalIssuesBasedOnFi, AUTOMATIC_FIX_LEVELS.WARNINGS, stats.warnings), _totalIssuesBasedOnFi);\n    var issuesCount = totalIssuesBasedOnFixLevel[automaticFixLevel];\n    _cliTools().logger.log(`\\nAttempting to fix ${_chalk().default.bold(issuesCount.toString())} issue${issuesCount > 1 ? 's' : ''}...`);\n    for (var category of healthchecks) {\n      var healthchecksToRun = category.healthchecks.filter(function (healthcheck) {\n        if (automaticFixLevel === AUTOMATIC_FIX_LEVELS.ALL_ISSUES) {\n          return healthcheck.needsToBeFixed;\n        }\n        if (automaticFixLevel === AUTOMATIC_FIX_LEVELS.ERRORS) {\n          return healthcheck.needsToBeFixed && healthcheck.type === _healthchecks.HEALTHCHECK_TYPES.ERROR;\n        }\n        if (automaticFixLevel === AUTOMATIC_FIX_LEVELS.WARNINGS) {\n          return healthcheck.needsToBeFixed && healthcheck.type === _healthchecks.HEALTHCHECK_TYPES.WARNING;\n        }\n        return;\n      });\n      if (!healthchecksToRun.length) {\n        continue;\n      }\n      _cliTools().logger.log(`\\n${_chalk().default.dim(category.label)}`);\n      for (var healthcheckToRun of healthchecksToRun) {\n        var spinner = (0, _ora().default)({\n          prefixText: '',\n          text: healthcheckToRun.label\n        }).start();\n        try {\n          yield healthcheckToRun.runAutomaticFix({\n            loader: spinner,\n            logManualInstallation: _common.logManualInstallation,\n            environmentInfo: environmentInfo,\n            config: config\n          });\n        } catch (error) {}\n      }\n    }\n  });\n  return _default2.apply(this, arguments);\n}","map":{"version":3,"names":["_defineProperty","require","_asyncToGenerator","Object","defineProperty","exports","value","AUTOMATIC_FIX_LEVELS","default","_default","_cliTools","data","_chalk","_interopRequireDefault","_ora","_healthchecks","_common","obj","__esModule","_x","_default2","apply","arguments","_ref","_totalIssuesBasedOnFi","healthchecks","automaticFixLevel","stats","environmentInfo","config","process","stdout","isTTY","moveCursor","clearScreenDown","totalIssuesBasedOnFixLevel","ALL_ISSUES","errors","warnings","ERRORS","WARNINGS","issuesCount","logger","log","bold","toString","category","healthchecksToRun","filter","healthcheck","needsToBeFixed","type","HEALTHCHECK_TYPES","ERROR","WARNING","length","dim","label","healthcheckToRun","spinner","prefixText","text","start","runAutomaticFix","loader","logManualInstallation","error"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/build/tools/runAutomaticFix.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AUTOMATIC_FIX_LEVELS = void 0;\nexports.default = _default;\nfunction _cliTools() {\n  const data = require(\"@react-native-community/cli-tools\");\n  _cliTools = function () {\n    return data;\n  };\n  return data;\n}\nfunction _chalk() {\n  const data = _interopRequireDefault(require(\"chalk\"));\n  _chalk = function () {\n    return data;\n  };\n  return data;\n}\nfunction _ora() {\n  const data = _interopRequireDefault(require(\"ora\"));\n  _ora = function () {\n    return data;\n  };\n  return data;\n}\nvar _healthchecks = require(\"./healthchecks\");\nvar _common = require(\"./healthchecks/common\");\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\nlet AUTOMATIC_FIX_LEVELS;\nexports.AUTOMATIC_FIX_LEVELS = AUTOMATIC_FIX_LEVELS;\n(function (AUTOMATIC_FIX_LEVELS) {\n  AUTOMATIC_FIX_LEVELS[\"ALL_ISSUES\"] = \"ALL_ISSUES\";\n  AUTOMATIC_FIX_LEVELS[\"ERRORS\"] = \"ERRORS\";\n  AUTOMATIC_FIX_LEVELS[\"WARNINGS\"] = \"WARNINGS\";\n})(AUTOMATIC_FIX_LEVELS || (exports.AUTOMATIC_FIX_LEVELS = AUTOMATIC_FIX_LEVELS = {}));\nasync function _default({\n  healthchecks,\n  automaticFixLevel,\n  stats,\n  environmentInfo,\n  config\n}) {\n  // Remove the fix options from screen\n  if (process.stdout.isTTY) {\n    process.stdout.moveCursor(0, -6);\n    process.stdout.clearScreenDown();\n  }\n  const totalIssuesBasedOnFixLevel = {\n    [AUTOMATIC_FIX_LEVELS.ALL_ISSUES]: stats.errors + stats.warnings,\n    [AUTOMATIC_FIX_LEVELS.ERRORS]: stats.errors,\n    [AUTOMATIC_FIX_LEVELS.WARNINGS]: stats.warnings\n  };\n  const issuesCount = totalIssuesBasedOnFixLevel[automaticFixLevel];\n  _cliTools().logger.log(`\\nAttempting to fix ${_chalk().default.bold(issuesCount.toString())} issue${issuesCount > 1 ? 's' : ''}...`);\n  for (const category of healthchecks) {\n    const healthchecksToRun = category.healthchecks.filter(healthcheck => {\n      if (automaticFixLevel === AUTOMATIC_FIX_LEVELS.ALL_ISSUES) {\n        return healthcheck.needsToBeFixed;\n      }\n      if (automaticFixLevel === AUTOMATIC_FIX_LEVELS.ERRORS) {\n        return healthcheck.needsToBeFixed && healthcheck.type === _healthchecks.HEALTHCHECK_TYPES.ERROR;\n      }\n      if (automaticFixLevel === AUTOMATIC_FIX_LEVELS.WARNINGS) {\n        return healthcheck.needsToBeFixed && healthcheck.type === _healthchecks.HEALTHCHECK_TYPES.WARNING;\n      }\n      return;\n    });\n    if (!healthchecksToRun.length) {\n      continue;\n    }\n    _cliTools().logger.log(`\\n${_chalk().default.dim(category.label)}`);\n    for (const healthcheckToRun of healthchecksToRun) {\n      // @todo replace this with `getLoader` from `tools`\n      const spinner = (0, _ora().default)({\n        prefixText: '',\n        text: healthcheckToRun.label\n      }).start();\n      try {\n        await healthcheckToRun.runAutomaticFix({\n          loader: spinner,\n          logManualInstallation: _common.logManualInstallation,\n          environmentInfo,\n          config\n        });\n      } catch (error) {\n        // TODO: log the error in a meaningful way\n      }\n    }\n  }\n}\n\n//# sourceMappingURL=runAutomaticFix.ts.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}