{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveNativeSchemePropsAsync = resolveNativeSchemePropsAsync;\nexports.promptOrQueryNativeSchemeAsync = promptOrQueryNativeSchemeAsync;\nexports.getDefaultNativeScheme = getDefaultNativeScheme;\nvar _configPlugins = require(\"@expo/config-plugins\");\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar _path = _interopRequireDefault(require(\"path\"));\nvar Log = _interopRequireWildcard(require(\"../../../log\"));\nvar _errors = require(\"../../../utils/errors\");\nvar _profile = require(\"../../../utils/profile\");\nvar _prompts = require(\"../../../utils/prompts\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nvar debug = require(\"debug\")(\"expo:run:ios:options:resolveNativeScheme\");\nfunction resolveNativeSchemePropsAsync(_x, _x2, _x3) {\n  return _resolveNativeSchemePropsAsync.apply(this, arguments);\n}\nfunction _resolveNativeSchemePropsAsync() {\n  _resolveNativeSchemePropsAsync = _asyncToGenerator(function* (projectRoot, options, xcodeProject) {\n    var ref;\n    return (ref = yield promptOrQueryNativeSchemeAsync(projectRoot, options)) != null ? ref : getDefaultNativeScheme(projectRoot, options, xcodeProject);\n  });\n  return _resolveNativeSchemePropsAsync.apply(this, arguments);\n}\nfunction promptOrQueryNativeSchemeAsync(_x4, _x5) {\n  return _promptOrQueryNativeSchemeAsync.apply(this, arguments);\n}\nfunction _promptOrQueryNativeSchemeAsync() {\n  _promptOrQueryNativeSchemeAsync = _asyncToGenerator(function* (projectRoot, _ref) {\n    var scheme = _ref.scheme,\n      configuration = _ref.configuration;\n    var schemes = _configPlugins.IOSConfig.BuildScheme.getRunnableSchemesFromXcodeproj(projectRoot, {\n      configuration: configuration\n    });\n    if (!schemes.length) {\n      throw new _errors.CommandError(\"IOS_MALFORMED\", \"No native iOS build schemes found\");\n    }\n    if (scheme === true) {\n      if (schemes.length === 1) {\n        Log.log(`Auto selecting only available scheme: ${schemes[0].name}`);\n        return schemes[0];\n      }\n      var resolvedSchemeName = yield (0, _prompts).selectAsync(\"Select a scheme\", schemes.map(function (value) {\n        var isApp = value.type === _configPlugins.IOSConfig.Target.TargetType.APPLICATION && value.osType === \"iOS\";\n        return {\n          value: value.name,\n          title: isApp ? _chalk.default.bold(value.name) + _chalk.default.gray(\" (app)\") : value.name\n        };\n      }), {\n        nonInteractiveHelp: `--scheme: argument must be provided with a string in non-interactive mode. Valid choices are: ${schemes.join(\", \")}`\n      });\n      var ref;\n      return (ref = schemes.find(function (_ref3) {\n        var name = _ref3.name;\n        return resolvedSchemeName === name;\n      })) != null ? ref : null;\n    }\n    return scheme ? schemes.find(function (_ref4) {\n      var name = _ref4.name;\n      return name === scheme;\n    }) || {\n      name: scheme\n    } : null;\n  });\n  return _promptOrQueryNativeSchemeAsync.apply(this, arguments);\n}\nfunction getDefaultNativeScheme(projectRoot, options, xcodeProject) {\n  var resolvedSchemes = (0, _profile).profile(_configPlugins.IOSConfig.BuildScheme.getRunnableSchemesFromXcodeproj)(projectRoot, {\n    configuration: options.configuration\n  });\n  if (resolvedSchemes.length > 1) {\n    var ref;\n    var scheme = (ref = resolvedSchemes.find(function (_ref2) {\n      var type = _ref2.type;\n      return type === _configPlugins.IOSConfig.Target.TargetType.APPLICATION;\n    })) != null ? ref : resolvedSchemes[0];\n    debug(`Using default scheme: ${scheme.name}`);\n    return scheme;\n  }\n  if (resolvedSchemes[0]) {\n    return resolvedSchemes[0];\n  }\n  return {\n    name: _path.default.basename(xcodeProject.name, _path.default.extname(xcodeProject.name))\n  };\n}","map":{"version":3,"names":["_asyncToGenerator","require","resolveNativeSchemePropsAsync","promptOrQueryNativeSchemeAsync","getDefaultNativeScheme","_configPlugins","_chalk","_interopRequireDefault","_path","Log","_interopRequireWildcard","_errors","_profile","_prompts","debug","_x","_x2","_x3","_resolveNativeSchemePropsAsync","apply","arguments","projectRoot","options","xcodeProject","ref","_x4","_x5","_promptOrQueryNativeSchemeAsync","_ref","scheme","configuration","schemes","IOSConfig","BuildScheme","getRunnableSchemesFromXcodeproj","length","CommandError","log","name","resolvedSchemeName","selectAsync","map","value","isApp","type","Target","TargetType","APPLICATION","osType","title","default","bold","gray","nonInteractiveHelp","join","find","_ref3","_ref4","resolvedSchemes","profile","_ref2","basename","extname"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\run\\ios\\options\\resolveNativeScheme.ts"],"sourcesContent":["import { IOSConfig } from '@expo/config-plugins';\nimport chalk from 'chalk';\nimport path from 'path';\n\nimport * as Log from '../../../log';\nimport { CommandError } from '../../../utils/errors';\nimport { profile } from '../../../utils/profile';\nimport { selectAsync } from '../../../utils/prompts';\nimport { Options, ProjectInfo, XcodeConfiguration } from '../XcodeBuild.types';\n\nconst debug = require('debug')('expo:run:ios:options:resolveNativeScheme') as typeof console.log;\n\ntype NativeSchemeProps = {\n  name: string;\n  osType?: string;\n};\n\nexport async function resolveNativeSchemePropsAsync(\n  projectRoot: string,\n  options: Pick<Options, 'scheme' | 'configuration'>,\n  xcodeProject: ProjectInfo\n): Promise<NativeSchemeProps> {\n  return (\n    (await promptOrQueryNativeSchemeAsync(projectRoot, options)) ??\n    getDefaultNativeScheme(projectRoot, options, xcodeProject)\n  );\n}\n\n/** Resolve the native iOS build `scheme` for a given `configuration`. If the `scheme` isn't provided then the user will be prompted to select one. */\nexport async function promptOrQueryNativeSchemeAsync(\n  projectRoot: string,\n  { scheme, configuration }: { scheme?: string | boolean; configuration?: XcodeConfiguration }\n): Promise<NativeSchemeProps | null> {\n  const schemes = IOSConfig.BuildScheme.getRunnableSchemesFromXcodeproj(projectRoot, {\n    configuration,\n  });\n  if (!schemes.length) {\n    throw new CommandError('IOS_MALFORMED', 'No native iOS build schemes found');\n  }\n\n  if (scheme === true) {\n    if (schemes.length === 1) {\n      Log.log(`Auto selecting only available scheme: ${schemes[0].name}`);\n      return schemes[0];\n    }\n    const resolvedSchemeName = await selectAsync(\n      'Select a scheme',\n      schemes.map((value) => {\n        const isApp =\n          value.type === IOSConfig.Target.TargetType.APPLICATION && value.osType === 'iOS';\n        return {\n          value: value.name,\n          title: isApp ? chalk.bold(value.name) + chalk.gray(' (app)') : value.name,\n        };\n      }),\n      {\n        nonInteractiveHelp: `--scheme: argument must be provided with a string in non-interactive mode. Valid choices are: ${schemes.join(\n          ', '\n        )}`,\n      }\n    );\n    return schemes.find(({ name }) => resolvedSchemeName === name) ?? null;\n  }\n  // Attempt to match the schemes up so we can open the correct simulator\n  return scheme ? schemes.find(({ name }) => name === scheme) || { name: scheme } : null;\n}\n\nexport function getDefaultNativeScheme(\n  projectRoot: string,\n  options: Pick<Options, 'configuration'>,\n  xcodeProject: Pick<ProjectInfo, 'name'>\n): NativeSchemeProps {\n  // If the resolution failed then we should just use the first runnable scheme that\n  // matches the provided configuration.\n  const resolvedSchemes = profile(IOSConfig.BuildScheme.getRunnableSchemesFromXcodeproj)(\n    projectRoot,\n    {\n      configuration: options.configuration,\n    }\n  );\n\n  // If there are multiple schemes, then the default should be the application.\n  if (resolvedSchemes.length > 1) {\n    const scheme =\n      resolvedSchemes.find(({ type }) => type === IOSConfig.Target.TargetType.APPLICATION) ??\n      resolvedSchemes[0];\n    debug(`Using default scheme: ${scheme.name}`);\n    return scheme;\n  }\n\n  // If we couldn't find the scheme, then we'll guess at it,\n  // this is needed for cases where the native code hasn't been generated yet.\n  if (resolvedSchemes[0]) {\n    return resolvedSchemes[0];\n  }\n  return {\n    name: path.basename(xcodeProject.name, path.extname(xcodeProject.name)),\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}