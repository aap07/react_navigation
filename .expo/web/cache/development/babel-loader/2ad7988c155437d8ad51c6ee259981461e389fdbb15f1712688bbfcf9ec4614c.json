{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@expo/prebuild-config/build/plugins/unversioned/expo-splash-screen/InterfaceBuilder.d.ts"],"sourcesContent":["export type IBBoolean = 'YES' | 'NO' | boolean;\nexport type IBItem<H extends Record<string, any>, B extends Record<string, any[]> = {\n    [key: string]: any;\n}> = {\n    $: H;\n} & B;\nexport type Rect = {\n    key: string;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n};\nexport type IBRect = IBItem<Rect>;\nexport type IBAutoresizingMask = IBItem<{\n    /** @example `autoresizingMask` */\n    key: string;\n    flexibleMaxX: IBBoolean;\n    flexibleMaxY: IBBoolean;\n}>;\n/** @example `<color key=\"textColor\" systemColor=\"linkColor\"/>` */\nexport type IBColor = IBItem<{\n    /** @example `textColor` */\n    key: string;\n} & (/** Custom color */ {\n    /** @example `0.86584504117670746` */\n    red: number;\n    /** @example `0.26445041990630447` */\n    green: number;\n    /** @example `0.3248577810203549` */\n    blue: number;\n    /** @example `1` */\n    alpha: number;\n    colorSpace: 'custom' | string;\n    customColorSpace: 'displayP3' | 'sRGB' | string;\n}\n/** Built-in color */\n | {\n    systemColor: 'linkColor' | string;\n})>;\nexport type IBFontDescription = IBItem<{\n    /** @example `fontDescription` */\n    key: string;\n    /** Font size */\n    pointSize: number;\n    /** Custom font */\n    name?: 'HelveticaNeue' | string;\n    family?: 'Helvetica Neue' | string;\n    /** Built-in font */\n    type?: 'system' | 'boldSystem' | 'UICTFontTextStyleCallout' | 'UICTFontTextStyleBody' | string;\n}>;\nexport type ImageContentMode = 'scaleAspectFit' | 'scaleAspectFill';\nexport type ConstraintAttribute = 'top' | 'bottom' | 'trailing' | 'leading';\nexport type IBImageView = IBItem<{\n    id: string;\n    userLabel: string;\n    image: string;\n    clipsSubviews?: IBBoolean;\n    userInteractionEnabled: IBBoolean;\n    contentMode: IBContentMode;\n    horizontalHuggingPriority: number;\n    verticalHuggingPriority: number;\n    insetsLayoutMarginsFromSafeArea?: IBBoolean;\n    translatesAutoresizingMaskIntoConstraints?: IBBoolean;\n}, {\n    rect: IBRect[];\n}>;\nexport type IBLabel = IBItem<{\n    id: string;\n    /** The main value. */\n    text: string;\n    opaque: IBBoolean;\n    fixedFrame: IBBoolean;\n    textAlignment?: IBTextAlignment;\n    lineBreakMode: 'clip' | 'characterWrap' | 'wordWrap' | 'headTruncation' | 'middleTruncation' | 'tailTruncation';\n    baselineAdjustment?: 'none' | 'alignBaselines';\n    adjustsFontSizeToFit: IBBoolean;\n    userInteractionEnabled: IBBoolean;\n    contentMode: IBContentMode;\n    horizontalHuggingPriority: number;\n    verticalHuggingPriority: number;\n    translatesAutoresizingMaskIntoConstraints?: IBBoolean;\n}, {\n    /** @example `<rect key=\"frame\" x=\"175\" y=\"670\" width=\"35\" height=\"17\"/>` */\n    rect: IBRect[];\n    /** @example `<autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"/>` */\n    autoresizingMask?: IBAutoresizingMask[];\n    /** @example `<fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"19\"/>` */\n    fontDescription?: IBFontDescription[];\n    /** @example `<color key=\"textColor\" red=\"0.0\" green=\"0.0\" blue=\"0.0\" alpha=\"1\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>` */\n    color?: IBColor[];\n    nil?: IBItem<{\n        /** @example `textColor` `highlightedColor` */\n        key: string;\n    }>[];\n}>;\nexport type IBTextAlignment = 'left' | 'center' | 'right' | 'justified' | 'natural';\nexport type IBContentMode = string | 'left' | 'scaleAspectFill';\nexport type IBConstraint = IBItem<{\n    firstItem: string;\n    firstAttribute: ConstraintAttribute;\n    secondItem: string;\n    secondAttribute: ConstraintAttribute;\n    constant?: number;\n    id: string;\n}>;\nexport type IBViewController = IBItem<{\n    id: string;\n    placeholderIdentifier?: string;\n    userLabel: string;\n    sceneMemberID: string;\n}, {\n    view: IBItem<{\n        id: string;\n        key: string;\n        userInteractionEnabled: IBBoolean;\n        contentMode: string | 'scaleToFill';\n        insetsLayoutMarginsFromSafeArea: IBBoolean;\n        userLabel: string;\n    }, {\n        rect: IBRect[];\n        autoresizingMask: IBItem<{\n            key: string;\n            flexibleMaxX: IBBoolean;\n            flexibleMaxY: IBBoolean;\n        }>[];\n        subviews: IBItem<object, {\n            imageView: IBImageView[];\n            label: IBLabel[];\n        }>[];\n        color: IBItem<{\n            key: string | 'backgroundColor';\n            systemColor: string | 'systemBackgroundColor';\n        }>[];\n        constraints: IBItem<object, {\n            constraint: IBConstraint[];\n        }>[];\n        viewLayoutGuide: IBItem<{\n            id: string;\n            key: string | 'safeArea';\n        }>[];\n    }>[];\n}>;\nexport type IBPoint = IBItem<{\n    key: string | 'canvasLocation';\n    x: number;\n    y: number;\n}>;\nexport type IBScene = IBItem<{\n    sceneID: string;\n}, {\n    objects: {\n        viewController: IBViewController[];\n        placeholder: IBItem<{\n            id: string;\n            placeholderIdentifier?: string;\n            userLabel: string;\n            sceneMemberID: string;\n        }>[];\n    }[];\n    point: IBPoint[];\n}>;\nexport type IBResourceImage = IBItem<{\n    name: string;\n    width: number;\n    height: number;\n}>;\nexport type IBDevice = IBItem<{\n    id: string;\n    orientation: string | 'portrait';\n    appearance: string | 'light';\n}>;\nexport type IBSplashScreenDocument = {\n    document: IBItem<{\n        type: 'com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB' | string;\n        version: '3.0' | string;\n        toolsVersion: number;\n        targetRuntime: 'iOS.CocoaTouch' | string;\n        propertyAccessControl: 'none' | string;\n        useAutolayout: IBBoolean;\n        launchScreen: IBBoolean;\n        useTraitCollections: IBBoolean;\n        useSafeAreas: IBBoolean;\n        colorMatched: IBBoolean;\n        initialViewController: string;\n    }, {\n        device: IBDevice[];\n        dependencies: unknown[];\n        scenes: {\n            scene: IBScene[];\n        }[];\n        resources: {\n            image: IBResourceImage[];\n        }[];\n    }>;\n};\nexport declare function createConstraint([firstItem, firstAttribute]: [string, ConstraintAttribute], [secondItem, secondAttribute]: [string, ConstraintAttribute], constant?: number): IBConstraint;\nexport declare function createConstraintId(...attributes: string[]): string;\nexport declare function removeImageFromSplashScreen(xml: IBSplashScreenDocument, { imageName }: {\n    imageName: string;\n}): IBSplashScreenDocument;\nexport declare function applyImageToSplashScreenXML(xml: IBSplashScreenDocument, { imageName, contentMode, }: {\n    imageName: string;\n    contentMode: ImageContentMode;\n}): IBSplashScreenDocument;\n/**\n * IB does not allow two items to have the same ID.\n * This method will add an item by first removing any existing item with the same `$.id`.\n */\nexport declare function ensureUniquePush<TItem extends {\n    $: {\n        id: string;\n    };\n}>(array: TItem[], item: TItem): TItem[];\nexport declare function removeExisting<TItem extends {\n    $: {\n        id: string;\n    };\n}>(array: TItem[], item: TItem | string): TItem[];\nexport declare function toString(xml: any): string;\n/** Parse string contents into an object. */\nexport declare function toObjectAsync(contents: string): Promise<any>;\n"],"mappings":""},"metadata":{},"sourceType":"script","externalDependencies":[]}