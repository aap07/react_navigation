{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.runIosAsync = runIosAsync;\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\nvar Log = _interopRequireWildcard(require(\"../../log\"));\nvar _cocoapods = require(\"../../utils/cocoapods\");\nvar _nodeEnv = require(\"../../utils/nodeEnv\");\nvar _port = require(\"../../utils/port\");\nvar _profile = require(\"../../utils/profile\");\nvar _scheme = require(\"../../utils/scheme\");\nvar _ensureNativeProject = require(\"../ensureNativeProject\");\nvar _hints = require(\"../hints\");\nvar _startBundler = require(\"../startBundler\");\nvar XcodeBuild = _interopRequireWildcard(require(\"./XcodeBuild\"));\nvar _launchApp = require(\"./launchApp\");\nvar _resolveOptions = require(\"./options/resolveOptions\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nfunction runIosAsync(_x, _x2) {\n  return _runIosAsync.apply(this, arguments);\n}\nfunction _runIosAsync() {\n  _runIosAsync = _asyncToGenerator(function* (projectRoot, options) {\n    var ref;\n    (0, _nodeEnv).setNodeEnv(options.configuration === \"Release\" ? \"production\" : \"development\");\n    require(\"@expo/env\").load(projectRoot);\n    assertPlatform();\n    var install = !!options.install;\n    if ((yield (0, _ensureNativeProject).ensureNativeProjectAsync(projectRoot, {\n      platform: \"ios\",\n      install: install\n    })) && install) {\n      yield (0, _cocoapods).maybePromptToSyncPodsAsync(projectRoot);\n    }\n    var props = yield (0, _resolveOptions).resolveOptionsAsync(projectRoot, options);\n    var buildOutput = yield XcodeBuild.buildAsync(props);\n    var binaryPath = yield (0, _profile).profile(XcodeBuild.getAppBinaryPath)(buildOutput);\n    if (props.shouldStartBundler && !(yield (0, _port).ensurePortAvailabilityAsync(projectRoot, props))) {\n      props.shouldStartBundler = false;\n    }\n    var manager = yield (0, _startBundler).startBundlerAsync(projectRoot, {\n      port: props.port,\n      headless: !props.shouldStartBundler,\n      scheme: (ref = yield (0, _scheme).getSchemesForIosAsync(projectRoot)) == null ? void 0 : ref[0]\n    });\n    yield (0, _launchApp).launchAppAsync(binaryPath, manager, {\n      isSimulator: props.isSimulator,\n      device: props.device,\n      shouldStartBundler: props.shouldStartBundler\n    });\n    if (props.shouldStartBundler) {\n      (0, _hints).logProjectLogsLocation();\n    }\n  });\n  return _runIosAsync.apply(this, arguments);\n}\nfunction assertPlatform() {\n  if (process.platform !== \"darwin\") {\n    Log.exit(_chalk.default`iOS apps can only be built on macOS devices. Use {cyan eas build -p ios} to build in the cloud.`);\n  }\n}","map":{"version":3,"names":["_asyncToGenerator","require","runIosAsync","_chalk","_interopRequireDefault","Log","_interopRequireWildcard","_cocoapods","_nodeEnv","_port","_profile","_scheme","_ensureNativeProject","_hints","_startBundler","XcodeBuild","_launchApp","_resolveOptions","_x","_x2","_runIosAsync","apply","arguments","projectRoot","options","ref","setNodeEnv","configuration","load","assertPlatform","install","ensureNativeProjectAsync","platform","maybePromptToSyncPodsAsync","props","resolveOptionsAsync","buildOutput","buildAsync","binaryPath","profile","getAppBinaryPath","shouldStartBundler","ensurePortAvailabilityAsync","manager","startBundlerAsync","port","headless","scheme","getSchemesForIosAsync","launchAppAsync","isSimulator","device","logProjectLogsLocation","process","exit","default"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\run\\ios\\runIosAsync.ts"],"sourcesContent":["import chalk from 'chalk';\n\nimport * as Log from '../../log';\nimport { maybePromptToSyncPodsAsync } from '../../utils/cocoapods';\nimport { setNodeEnv } from '../../utils/nodeEnv';\nimport { ensurePortAvailabilityAsync } from '../../utils/port';\nimport { profile } from '../../utils/profile';\nimport { getSchemesForIosAsync } from '../../utils/scheme';\nimport { ensureNativeProjectAsync } from '../ensureNativeProject';\nimport { logProjectLogsLocation } from '../hints';\nimport { startBundlerAsync } from '../startBundler';\nimport * as XcodeBuild from './XcodeBuild';\nimport { Options } from './XcodeBuild.types';\nimport { launchAppAsync } from './launchApp';\nimport { resolveOptionsAsync } from './options/resolveOptions';\n\nexport async function runIosAsync(projectRoot: string, options: Options) {\n  setNodeEnv(options.configuration === 'Release' ? 'production' : 'development');\n  require('@expo/env').load(projectRoot);\n\n  assertPlatform();\n\n  const install = !!options.install;\n\n  if ((await ensureNativeProjectAsync(projectRoot, { platform: 'ios', install })) && install) {\n    await maybePromptToSyncPodsAsync(projectRoot);\n  }\n\n  // Resolve the CLI arguments into useable options.\n  const props = await resolveOptionsAsync(projectRoot, options);\n\n  // Spawn the `xcodebuild` process to create the app binary.\n  const buildOutput = await XcodeBuild.buildAsync(props);\n\n  // Find the path to the built app binary, this will be used to install the binary\n  // on a device.\n  const binaryPath = await profile(XcodeBuild.getAppBinaryPath)(buildOutput);\n\n  // Ensure the port hasn't become busy during the build.\n  if (props.shouldStartBundler && !(await ensurePortAvailabilityAsync(projectRoot, props))) {\n    props.shouldStartBundler = false;\n  }\n\n  // Start the dev server which creates all of the required info for\n  // launching the app on a simulator.\n  const manager = await startBundlerAsync(projectRoot, {\n    port: props.port,\n    headless: !props.shouldStartBundler,\n    // If a scheme is specified then use that instead of the package name.\n    scheme: (await getSchemesForIosAsync(projectRoot))?.[0],\n  });\n\n  // Install and launch the app binary on a device.\n  await launchAppAsync(binaryPath, manager, {\n    isSimulator: props.isSimulator,\n    device: props.device,\n    shouldStartBundler: props.shouldStartBundler,\n  });\n\n  // Log the location of the JS logs for the device.\n  if (props.shouldStartBundler) {\n    logProjectLogsLocation();\n  }\n}\n\nfunction assertPlatform() {\n  if (process.platform !== 'darwin') {\n    Log.exit(\n      chalk`iOS apps can only be built on macOS devices. Use {cyan eas build -p ios} to build in the cloud.`\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}