{"ast":null,"code":"'use strict';\n\nvar stringifyNumber = require(\"../../stringify/stringifyNumber.js\");\nvar intIdentify = function intIdentify(value) {\n  return typeof value === 'bigint' || Number.isInteger(value);\n};\nvar intResolve = function intResolve(str, offset, radix, _ref) {\n  var intAsBigInt = _ref.intAsBigInt;\n  return intAsBigInt ? BigInt(str) : parseInt(str.substring(offset), radix);\n};\nfunction intStringify(node, radix, prefix) {\n  var value = node.value;\n  if (intIdentify(value) && value >= 0) return prefix + value.toString(radix);\n  return stringifyNumber.stringifyNumber(node);\n}\nvar intOct = {\n  identify: function identify(value) {\n    return intIdentify(value) && value >= 0;\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  format: 'OCT',\n  test: /^0o[0-7]+$/,\n  resolve: function resolve(str, _onError, opt) {\n    return intResolve(str, 2, 8, opt);\n  },\n  stringify: function stringify(node) {\n    return intStringify(node, 8, '0o');\n  }\n};\nvar int = {\n  identify: intIdentify,\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  test: /^[-+]?[0-9]+$/,\n  resolve: function resolve(str, _onError, opt) {\n    return intResolve(str, 0, 10, opt);\n  },\n  stringify: stringifyNumber.stringifyNumber\n};\nvar intHex = {\n  identify: function identify(value) {\n    return intIdentify(value) && value >= 0;\n  },\n  default: true,\n  tag: 'tag:yaml.org,2002:int',\n  format: 'HEX',\n  test: /^0x[0-9a-fA-F]+$/,\n  resolve: function resolve(str, _onError, opt) {\n    return intResolve(str, 2, 16, opt);\n  },\n  stringify: function stringify(node) {\n    return intStringify(node, 16, '0x');\n  }\n};\nexports.int = int;\nexports.intHex = intHex;\nexports.intOct = intOct;","map":{"version":3,"names":["stringifyNumber","require","intIdentify","value","Number","isInteger","intResolve","str","offset","radix","_ref","intAsBigInt","BigInt","parseInt","substring","intStringify","node","prefix","toString","intOct","identify","default","tag","format","test","resolve","_onError","opt","stringify","int","intHex","exports"],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/@react-native-community/cli-doctor/node_modules/yaml/dist/schema/core/int.js"],"sourcesContent":["'use strict';\n\nvar stringifyNumber = require('../../stringify/stringifyNumber.js');\n\nconst intIdentify = (value) => typeof value === 'bigint' || Number.isInteger(value);\nconst intResolve = (str, offset, radix, { intAsBigInt }) => (intAsBigInt ? BigInt(str) : parseInt(str.substring(offset), radix));\nfunction intStringify(node, radix, prefix) {\n    const { value } = node;\n    if (intIdentify(value) && value >= 0)\n        return prefix + value.toString(radix);\n    return stringifyNumber.stringifyNumber(node);\n}\nconst intOct = {\n    identify: value => intIdentify(value) && value >= 0,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'OCT',\n    test: /^0o[0-7]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 8, opt),\n    stringify: node => intStringify(node, 8, '0o')\n};\nconst int = {\n    identify: intIdentify,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    test: /^[-+]?[0-9]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 0, 10, opt),\n    stringify: stringifyNumber.stringifyNumber\n};\nconst intHex = {\n    identify: value => intIdentify(value) && value >= 0,\n    default: true,\n    tag: 'tag:yaml.org,2002:int',\n    format: 'HEX',\n    test: /^0x[0-9a-fA-F]+$/,\n    resolve: (str, _onError, opt) => intResolve(str, 2, 16, opt),\n    stringify: node => intStringify(node, 16, '0x')\n};\n\nexports.int = int;\nexports.intHex = intHex;\nexports.intOct = intOct;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,eAAe,GAAGC,OAAO,qCAAqC,CAAC;AAEnE,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAIC,KAAK;EAAA,OAAK,OAAOA,KAAK,KAAK,QAAQ,IAAIC,MAAM,CAACC,SAAS,CAACF,KAAK,CAAC;AAAA;AACnF,IAAMG,UAAU,GAAG,SAAbA,UAAUA,CAAIC,GAAG,EAAEC,MAAM,EAAEC,KAAK,EAAAC,IAAA;EAAA,IAAIC,WAAW,GAAAD,IAAA,CAAXC,WAAW;EAAA,OAAQA,WAAW,GAAGC,MAAM,CAACL,GAAG,CAAC,GAAGM,QAAQ,CAACN,GAAG,CAACO,SAAS,CAACN,MAAM,CAAC,EAAEC,KAAK,CAAC;AAAA,CAAC;AAChI,SAASM,YAAYA,CAACC,IAAI,EAAEP,KAAK,EAAEQ,MAAM,EAAE;EACvC,IAAQd,KAAK,GAAKa,IAAI,CAAdb,KAAK;EACb,IAAID,WAAW,CAACC,KAAK,CAAC,IAAIA,KAAK,IAAI,CAAC,EAChC,OAAOc,MAAM,GAAGd,KAAK,CAACe,QAAQ,CAACT,KAAK,CAAC;EACzC,OAAOT,eAAe,CAACA,eAAe,CAACgB,IAAI,CAAC;AAChD;AACA,IAAMG,MAAM,GAAG;EACXC,QAAQ,EAAE,SAAAA,SAAAjB,KAAK;IAAA,OAAID,WAAW,CAACC,KAAK,CAAC,IAAIA,KAAK,IAAI,CAAC;EAAA;EACnDkB,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,uBAAuB;EAC5BC,MAAM,EAAE,KAAK;EACbC,IAAI,EAAE,YAAY;EAClBC,OAAO,EAAE,SAAAA,QAAClB,GAAG,EAAEmB,QAAQ,EAAEC,GAAG;IAAA,OAAKrB,UAAU,CAACC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAEoB,GAAG,CAAC;EAAA;EAC3DC,SAAS,EAAE,SAAAA,UAAAZ,IAAI;IAAA,OAAID,YAAY,CAACC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC;EAAA;AAClD,CAAC;AACD,IAAMa,GAAG,GAAG;EACRT,QAAQ,EAAElB,WAAW;EACrBmB,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,uBAAuB;EAC5BE,IAAI,EAAE,eAAe;EACrBC,OAAO,EAAE,SAAAA,QAAClB,GAAG,EAAEmB,QAAQ,EAAEC,GAAG;IAAA,OAAKrB,UAAU,CAACC,GAAG,EAAE,CAAC,EAAE,EAAE,EAAEoB,GAAG,CAAC;EAAA;EAC5DC,SAAS,EAAE5B,eAAe,CAACA;AAC/B,CAAC;AACD,IAAM8B,MAAM,GAAG;EACXV,QAAQ,EAAE,SAAAA,SAAAjB,KAAK;IAAA,OAAID,WAAW,CAACC,KAAK,CAAC,IAAIA,KAAK,IAAI,CAAC;EAAA;EACnDkB,OAAO,EAAE,IAAI;EACbC,GAAG,EAAE,uBAAuB;EAC5BC,MAAM,EAAE,KAAK;EACbC,IAAI,EAAE,kBAAkB;EACxBC,OAAO,EAAE,SAAAA,QAAClB,GAAG,EAAEmB,QAAQ,EAAEC,GAAG;IAAA,OAAKrB,UAAU,CAACC,GAAG,EAAE,CAAC,EAAE,EAAE,EAAEoB,GAAG,CAAC;EAAA;EAC5DC,SAAS,EAAE,SAAAA,UAAAZ,IAAI;IAAA,OAAID,YAAY,CAACC,IAAI,EAAE,EAAE,EAAE,IAAI,CAAC;EAAA;AACnD,CAAC;AAEDe,OAAO,CAACF,GAAG,GAAGA,GAAG;AACjBE,OAAO,CAACD,MAAM,GAAGA,MAAM;AACvBC,OAAO,CAACZ,MAAM,GAAGA,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}