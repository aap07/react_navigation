{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:/Users/CR Laptop/Desktop/rn-project/react_navigation/node_modules/react-native-gesture-handler/lib/typescript/handlers/gestureHandlerCommon.d.ts"],"sourcesContent":["import * as React from 'react';\nimport { State } from '../State';\nimport { TouchEventType } from '../TouchEventType';\nimport { ValueOf } from '../typeUtils';\nexport declare const baseGestureHandlerProps: readonly [\"id\", \"enabled\", \"shouldCancelWhenOutside\", \"hitSlop\", \"cancelsTouchesInView\", \"userSelect\", \"waitFor\", \"simultaneousHandlers\", \"onBegan\", \"onFailed\", \"onCancelled\", \"onActivated\", \"onEnded\", \"onGestureEvent\", \"onHandlerStateChange\"];\nexport declare const baseGestureHandlerWithMonitorProps: string[];\nexport interface GestureEventPayload {\n    handlerTag: number;\n    numberOfPointers: number;\n    state: ValueOf<typeof State>;\n}\nexport interface HandlerStateChangeEventPayload extends GestureEventPayload {\n    oldState: ValueOf<typeof State>;\n}\nexport declare type HitSlop = number | Partial<Record<'left' | 'right' | 'top' | 'bottom' | 'vertical' | 'horizontal', number>> | Record<'width' | 'left', number> | Record<'width' | 'right', number> | Record<'height' | 'top', number> | Record<'height' | 'bottom', number>;\nexport declare type UserSelect = 'none' | 'auto' | 'text';\nexport interface GestureEvent<ExtraEventPayloadT = Record<string, unknown>> {\n    nativeEvent: Readonly<GestureEventPayload & ExtraEventPayloadT>;\n}\nexport interface HandlerStateChangeEvent<ExtraEventPayloadT = Record<string, unknown>> {\n    nativeEvent: Readonly<HandlerStateChangeEventPayload & ExtraEventPayloadT>;\n}\nexport declare type TouchData = {\n    id: number;\n    x: number;\n    y: number;\n    absoluteX: number;\n    absoluteY: number;\n};\nexport declare type GestureTouchEvent = {\n    handlerTag: number;\n    numberOfTouches: number;\n    state: ValueOf<typeof State>;\n    eventType: TouchEventType;\n    allTouches: TouchData[];\n    changedTouches: TouchData[];\n};\nexport declare type GestureUpdateEvent<GestureEventPayloadT = Record<string, unknown>> = GestureEventPayload & GestureEventPayloadT;\nexport declare type GestureStateChangeEvent<GestureStateChangeEventPayloadT = Record<string, unknown>> = HandlerStateChangeEventPayload & GestureStateChangeEventPayloadT;\nexport declare type CommonGestureConfig = {\n    enabled?: boolean;\n    shouldCancelWhenOutside?: boolean;\n    hitSlop?: HitSlop;\n    userSelect?: UserSelect;\n};\nexport declare type BaseGestureHandlerProps<ExtraEventPayloadT extends Record<string, unknown> = Record<string, unknown>> = CommonGestureConfig & {\n    id?: string;\n    waitFor?: React.Ref<unknown> | React.Ref<unknown>[];\n    simultaneousHandlers?: React.Ref<unknown> | React.Ref<unknown>[];\n    testID?: string;\n    cancelsTouchesInView?: boolean;\n    onBegan?: (event: HandlerStateChangeEvent) => void;\n    onFailed?: (event: HandlerStateChangeEvent) => void;\n    onCancelled?: (event: HandlerStateChangeEvent) => void;\n    onActivated?: (event: HandlerStateChangeEvent) => void;\n    onEnded?: (event: HandlerStateChangeEvent) => void;\n    onGestureEvent?: (event: GestureEvent<ExtraEventPayloadT>) => void;\n    onHandlerStateChange?: (event: HandlerStateChangeEvent<ExtraEventPayloadT>) => void;\n    children?: React.ReactNode;\n};\nexport declare function filterConfig(props: Record<string, unknown>, validProps: string[], defaults?: Record<string, unknown>): {\n    [x: string]: unknown;\n};\nexport declare function findNodeHandle(node: null | number | React.Component<any, any> | React.ComponentClass<any>): null | number | React.Component<any, any> | React.ComponentClass<any>;\nexport declare function scheduleFlushOperations(): void;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}