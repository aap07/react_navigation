{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar _inherits = require(\"@babel/runtime/helpers/inherits\");\nvar _possibleConstructorReturn = require(\"@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"@babel/runtime/helpers/getPrototypeOf\");\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LoadingEndpoint = void 0;\nvar _config = require(\"@expo/config\");\nvar _updates = require(\"@expo/config-plugins/build/utils/Updates\");\nvar _promises = require(\"fs/promises\");\nvar _path = _interopRequireDefault(require(\"path\"));\nvar _resolveFrom = _interopRequireDefault(require(\"resolve-from\"));\nvar _expoMiddleware = require(\"./ExpoMiddleware\");\nvar _resolvePlatform = require(\"./resolvePlatform\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar debug = require(\"debug\")(\"expo:start:server:middleware:interstitialPage\");\nvar LoadingEndpoint = \"/_expo/loading\";\nexports.LoadingEndpoint = LoadingEndpoint;\nvar InterstitialPageMiddleware = function (_expoMiddleware$ExpoM) {\n  _inherits(InterstitialPageMiddleware, _expoMiddleware$ExpoM);\n  var _super = _createSuper(InterstitialPageMiddleware);\n  function InterstitialPageMiddleware(projectRoot) {\n    var _this;\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      scheme: null\n    };\n    _classCallCheck(this, InterstitialPageMiddleware);\n    _this = _super.call(this, projectRoot, [LoadingEndpoint]);\n    _this.options = options;\n    return _this;\n  }\n  _createClass(InterstitialPageMiddleware, [{\n    key: \"_getPageAsync\",\n    value: function () {\n      var _getPageAsync2 = _asyncToGenerator(function* (_ref) {\n        var appName = _ref.appName,\n          projectVersion = _ref.projectVersion;\n        var ref;\n        var templatePath = (ref = _resolveFrom.default.silent(this.projectRoot, \"expo/static/loading-page/index.html\")) != null ? ref : _path.default.resolve(__dirname, \"../../../../../static/loading-page/index.html\");\n        var content = (yield (0, _promises).readFile(templatePath)).toString(\"utf-8\");\n        content = content.replace(/{{\\s*AppName\\s*}}/, appName);\n        content = content.replace(/{{\\s*Path\\s*}}/, this.projectRoot);\n        var _scheme;\n        content = content.replace(/{{\\s*Scheme\\s*}}/, (_scheme = this.options.scheme) != null ? _scheme : \"Unknown\");\n        content = content.replace(/{{\\s*ProjectVersionType\\s*}}/, `${projectVersion.type === \"sdk\" ? \"SDK\" : \"Runtime\"} version`);\n        var _version;\n        content = content.replace(/{{\\s*ProjectVersion\\s*}}/, (_version = projectVersion.version) != null ? _version : \"Undetected\");\n        return content;\n      });\n      function _getPageAsync(_x) {\n        return _getPageAsync2.apply(this, arguments);\n      }\n      return _getPageAsync;\n    }()\n  }, {\n    key: \"_getProjectOptions\",\n    value: function _getProjectOptions(platform) {\n      (0, _resolvePlatform).assertRuntimePlatform(platform);\n      var _getConfig = (0, _config).getConfig(this.projectRoot),\n        exp = _getConfig.exp;\n      var _getNameFromConfig = (0, _config).getNameFromConfig(exp),\n        appName = _getNameFromConfig.appName;\n      var runtimeVersion = (0, _updates).getRuntimeVersionNullable(exp, platform);\n      var _sdkVersion;\n      var sdkVersion = (_sdkVersion = exp.sdkVersion) != null ? _sdkVersion : null;\n      return {\n        appName: appName != null ? appName : \"App\",\n        projectVersion: sdkVersion && !runtimeVersion ? {\n          type: \"sdk\",\n          version: sdkVersion\n        } : {\n          type: \"runtime\",\n          version: runtimeVersion\n        }\n      };\n    }\n  }, {\n    key: \"handleRequestAsync\",\n    value: function () {\n      var _handleRequestAsync = _asyncToGenerator(function* (req, res) {\n        res = (0, _expoMiddleware).disableResponseCache(res);\n        res.setHeader(\"Content-Type\", \"text/html\");\n        var ref;\n        var platform = (ref = (0, _resolvePlatform).parsePlatformHeader(req)) != null ? ref : (0, _resolvePlatform).resolvePlatformFromUserAgentHeader(req);\n        (0, _resolvePlatform).assertMissingRuntimePlatform(platform);\n        (0, _resolvePlatform).assertRuntimePlatform(platform);\n        var _this$_getProjectOpti = this._getProjectOptions(platform),\n          appName = _this$_getProjectOpti.appName,\n          projectVersion = _this$_getProjectOpti.projectVersion;\n        debug(`Create loading page. (platform: ${platform}, appName: ${appName}, projectVersion: ${projectVersion.version}, type: ${projectVersion.type})`);\n        var content = yield this._getPageAsync({\n          appName: appName,\n          projectVersion: projectVersion\n        });\n        res.end(content);\n      });\n      function handleRequestAsync(_x2, _x3) {\n        return _handleRequestAsync.apply(this, arguments);\n      }\n      return handleRequestAsync;\n    }()\n  }]);\n  return InterstitialPageMiddleware;\n}(_expoMiddleware.ExpoMiddleware);\nexports.InterstitialPageMiddleware = InterstitialPageMiddleware;","map":{"version":3,"names":["_asyncToGenerator","require","_classCallCheck","_createClass","_inherits","_possibleConstructorReturn","_getPrototypeOf","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","_config","_updates","_promises","_path","_interopRequireDefault","_resolveFrom","_expoMiddleware","_resolvePlatform","debug","LoadingEndpoint","InterstitialPageMiddleware","_expoMiddleware$ExpoM","_super","projectRoot","_this","options","length","undefined","scheme","key","value","_getPageAsync2","_ref","appName","projectVersion","ref","templatePath","default","silent","resolve","__dirname","content","readFile","toString","replace","_scheme","type","_version","version","_getPageAsync","_x","_getProjectOptions","platform","assertRuntimePlatform","_getConfig","getConfig","exp","_getNameFromConfig","getNameFromConfig","runtimeVersion","getRuntimeVersionNullable","_sdkVersion","sdkVersion","_handleRequestAsync","req","res","disableResponseCache","setHeader","parsePlatformHeader","resolvePlatformFromUserAgentHeader","assertMissingRuntimePlatform","_this$_getProjectOpti","end","handleRequestAsync","_x2","_x3","ExpoMiddleware"],"sources":["C:\\Users\\CR Laptop\\Desktop\\rn-project\\react_navigation\\node_modules\\@expo\\cli\\src\\start\\server\\middleware\\InterstitialPageMiddleware.ts"],"sourcesContent":["import { getConfig, getNameFromConfig } from '@expo/config';\nimport { getRuntimeVersionNullable } from '@expo/config-plugins/build/utils/Updates';\nimport { readFile } from 'fs/promises';\nimport path from 'path';\nimport resolveFrom from 'resolve-from';\n\nimport { disableResponseCache, ExpoMiddleware } from './ExpoMiddleware';\nimport {\n  assertMissingRuntimePlatform,\n  assertRuntimePlatform,\n  parsePlatformHeader,\n  resolvePlatformFromUserAgentHeader,\n  RuntimePlatform,\n} from './resolvePlatform';\nimport { ServerRequest, ServerResponse } from './server.types';\n\ntype ProjectVersion = {\n  type: 'sdk' | 'runtime';\n  version: string | null;\n};\n\nconst debug = require('debug')(\n  'expo:start:server:middleware:interstitialPage'\n) as typeof console.log;\n\nexport const LoadingEndpoint = '/_expo/loading';\n\nexport class InterstitialPageMiddleware extends ExpoMiddleware {\n  constructor(\n    projectRoot: string,\n    protected options: { scheme: string | null } = { scheme: null }\n  ) {\n    super(projectRoot, [LoadingEndpoint]);\n  }\n\n  /** Get the template HTML page and inject values. */\n  async _getPageAsync({\n    appName,\n    projectVersion,\n  }: {\n    appName: string;\n    projectVersion: ProjectVersion;\n  }): Promise<string> {\n    const templatePath =\n      // Production: This will resolve when installed in the project.\n      resolveFrom.silent(this.projectRoot, 'expo/static/loading-page/index.html') ??\n      // Development: This will resolve when testing locally.\n      path.resolve(__dirname, '../../../../../static/loading-page/index.html');\n    let content = (await readFile(templatePath)).toString('utf-8');\n\n    content = content.replace(/{{\\s*AppName\\s*}}/, appName);\n    content = content.replace(/{{\\s*Path\\s*}}/, this.projectRoot);\n    content = content.replace(/{{\\s*Scheme\\s*}}/, this.options.scheme ?? 'Unknown');\n    content = content.replace(\n      /{{\\s*ProjectVersionType\\s*}}/,\n      `${projectVersion.type === 'sdk' ? 'SDK' : 'Runtime'} version`\n    );\n    content = content.replace(/{{\\s*ProjectVersion\\s*}}/, projectVersion.version ?? 'Undetected');\n\n    return content;\n  }\n\n  /** Get settings for the page from the project config. */\n  _getProjectOptions(platform: RuntimePlatform): {\n    appName: string;\n    projectVersion: ProjectVersion;\n  } {\n    assertRuntimePlatform(platform);\n\n    const { exp } = getConfig(this.projectRoot);\n    const { appName } = getNameFromConfig(exp);\n    const runtimeVersion = getRuntimeVersionNullable(exp, platform);\n    const sdkVersion = exp.sdkVersion ?? null;\n\n    return {\n      appName: appName ?? 'App',\n      projectVersion:\n        sdkVersion && !runtimeVersion\n          ? { type: 'sdk', version: sdkVersion }\n          : { type: 'runtime', version: runtimeVersion },\n    };\n  }\n\n  async handleRequestAsync(req: ServerRequest, res: ServerResponse): Promise<void> {\n    res = disableResponseCache(res);\n    res.setHeader('Content-Type', 'text/html');\n\n    const platform = parsePlatformHeader(req) ?? resolvePlatformFromUserAgentHeader(req);\n    assertMissingRuntimePlatform(platform);\n    assertRuntimePlatform(platform);\n\n    const { appName, projectVersion } = this._getProjectOptions(platform);\n    debug(\n      `Create loading page. (platform: ${platform}, appName: ${appName}, projectVersion: ${projectVersion.version}, type: ${projectVersion.type})`\n    );\n    const content = await this._getPageAsync({ appName, projectVersion });\n    res.end(content);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}